<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hpa330ukrServiceImpl_KOCIS">

    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList1" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList1*/
        SELECT  'FIRST'													AS QUERY_COUNT
        	 ,  fnGetUserDateComp(HPA.COMP_CODE, LEFT(HPA.PAY_YYYYMM,6)) PAY_YYYYMM
             ,  CAST(HPA.SUPP_TYPE AS VARCHAR(02)) SUPP_TYPE
             ,  HPA.PERSON_NUMB
             ,  CAST(HPA.WAGES_CODE AS VARCHAR(03)) AS WAGES_CODE
             ,  HBS.WAGES_NAME AS WAGES_NAME
             ,  CAST(HPA.AMOUNT_I AS DECIMAL(18,4)) AMOUNT_I
             ,  HPA.COMP_CODE
             ,  HPA.UPDATE_DB_USER
             ,  HPA.UPDATE_DB_TIME
        FROM               HPA300T HPA
                INNER JOIN HBS300T HBS ON HBS.COMP_CODE  = HPA.COMP_CODE
                                      AND HBS.WAGES_CODE = HPA.WAGES_CODE
                                      AND HBS.CODE_TYPE  = '1'
        WHERE   HPA.COMP_CODE   = #{S_COMP_CODE}
        AND     HPA.PAY_YYYYMM  = #{PAY_YYYYMM}
        <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
        AND     HPA.SUPP_TYPE   = #{SUPP_TYPE}
        </if>
        AND     HPA.PERSON_NUMB =  #{PERSON_NUMB}
        AND     HBS.USE_YN      = 'Y'
        ORDER   BY HBS.SORT_SEQ
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList1_1" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList1_1 */
        SELECT  'SECOND'													AS QUERY_COUNT
        	 ,  fnGetUserDateComp(COMP_CODE, Left(#{PAY_YYYYMM}, 6)) PAY_YYYYMM
             ,  #{SUPP_TYPE} AS SUPP_TYPE
             ,  #{PERSON_NUMB} AS PERSON_NUMB
             ,  WAGES_CODE
             ,  WAGES_NAME
             ,  0 AS AMOUNT_I
             ,  COMP_CODE
             ,  UPDATE_DB_USER
             ,  UPDATE_DB_TIME
        FROM    HBS300T 
        WHERE   COMP_CODE = #{S_COMP_CODE}
        AND     USE_YN = 'Y' 
        ORDER   BY SORT_SEQ
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList2" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList2*/
        SELECT  'FIRST'													AS QUERY_COUNT
        	 ,  fnGetUserDateComp(HPA.COMP_CODE, LEFT(HPA.PAY_YYYYMM,6)) PAY_YYYYMM
             ,  CAST(HPA.SUPP_TYPE AS VARCHAR(02)) AS SUPP_TYPE
             ,  HPA.PERSON_NUMB
             ,  CAST(HPA.DED_CODE AS VARCHAR(03)) DED_CODE
             ,  B1.CODE_NAME AS WAGES_NAME
             ,  CAST(HPA.DED_AMOUNT_I AS DECIMAL(18,4)) DED_AMOUNT_I
             ,  HPA.COMP_CODE
             ,  HPA.UPDATE_DB_USER
             ,  HPA.UPDATE_DB_TIME
        FROM               HPA400T HPA
                INNER JOIN BSA100T B1 ON B1.COMP_CODE = HPA.COMP_CODE
                                     AND B1.MAIN_CODE = 'H034'
                                     AND B1.SUB_CODE  = HPA.DED_CODE
        WHERE   HPA.COMP_CODE   = #{S_COMP_CODE}
        AND     HPA.PAY_YYYYMM  = #{PAY_YYYYMM}
        <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">        
        AND     HPA.SUPP_TYPE   = #{SUPP_TYPE}
        </if>
        AND     HPA.PERSON_NUMB = #{PERSON_NUMB}
        AND     B1.USE_YN       = 'Y'
        ORDER   BY B1.REF_CODE2   
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList2_1" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList2_1 */
        SELECT  'SECOND'													AS QUERY_COUNT
        	 ,  fnGetUserDateComp(COMP_CODE, Left(#{PAY_YYYYMM}, 6)) AS PAY_YYYYMM
             ,  #{SUPP_TYPE} AS SUPP_TYPE
             ,  #{PERSON_NUMB} AS PERSON_NUMB
             ,  B.SUB_CODE AS DED_CODE
             ,  B.CODE_NAME AS WAGES_NAME
             ,  '0.0000' AS DED_AMOUNT_I
             ,  B.COMP_CODE
             ,  B.UPDATE_DB_USER
             ,  B.UPDATE_DB_TIME
        FROM    BSA100T B
        WHERE   COMP_CODE = #{S_COMP_CODE}
        AND     SUB_CODE &lt;&gt; '$'
        AND     B.MAIN_CODE = 'H034'
        AND     B.USE_YN = 'Y'
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList3" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList3*/
        SELECT  CAST(A.PAY_YYYYMM + '01' AS VARCHAR(08))                AS PAY_YYYYMM
             ,  CAST(A.SUPP_TYPE AS VARCHAR(02))                        AS SUPP_TYPE
             ,  A.PERSON_NUMB
             ,  B.NAME
             ,  CAST(A.DEPT_CODE AS VARCHAR(08))                        AS DEPT_CODE
             ,  CAST(A.DEPT_NAME AS VARCHAR(30))                        AS DEPT_NAME
             ,  CAST(A.ABIL_CODE AS VARCHAR(02))                        AS ABIL_CODE
             ,  CAST(A.POST_CODE AS VARCHAR(02))                        AS POST_CODE
             ,  CAST(A.PAY_CODE AS VARCHAR(01))                         AS PAY_CODE
             ,  CAST(A.TAX_CODE AS VARCHAR(01))                         AS TAX_CODE
             ,  CAST(A.EXCEPT_TYPE AS VARCHAR(01))                      AS EXCEPT_TYPE
             ,  CAST(A.EMPLOY_TYPE AS VARCHAR(02))                      AS EMPLOY_TYPE
             ,  CAST(A.SUPP_DATE AS VARCHAR(08))                        AS SUPP_DATE
             ,  CAST(A.PAY_PROV_FLAG AS VARCHAR(01))                    AS PAY_PROV_FLAG
             ,  CAST(A.OT_KIND AS VARCHAR(04))                          AS OT_KIND
             ,  CAST(A.BONUS_KIND AS VARCHAR(04))                       AS BONUS_KIND
             ,  CAST(A.COM_DAY_WAGES AS DECIMAL(18,4))                  AS COM_DAY_WAGES
             ,  CAST(A.LONG_MONTH AS DECIMAL(6,0))                      AS LONG_MONTH
             ,  CAST(A.SPOUSE AS VARCHAR(01))                           AS SPOUSE
             ,  CAST(A.WOMAN AS VARCHAR(01))                            AS WOMAN
             ,  CAST(A.SUPP_NUM AS DECIMAL(2,0))                        AS SUPP_NUM
             ,  CAST(A.DEFORM_NUM AS DECIMAL(2,0))                      AS DEFORM_NUM
             ,  CAST(A.AGED_NUM AS DECIMAL(2,0))                        AS AGED_NUM
             ,  NVL(CAST(A.MED_AVG_I AS DECIMAL(18,0)), 0)              AS MED_AVG_I
             ,  NVL(CAST(A.ANU_BASE_I AS DECIMAL(18,0)), 0)             AS ANU_BASE_I
             ,  CAST(A.BONUS_STD_I AS DECIMAL(18,4))                    AS BONUS_STD_I
             ,  CAST(A.BONUS_RATE AS DECIMAL(7,3))                      AS BONUS_RATE
             ,  CAST(A.INCE_WAGES_RATE AS DECIMAL(7,3))                 AS INCE_WAGES_RATE
             ,  CAST(A.PLUS_RATE AS DECIMAL(7,3))                       AS PLUS_RATE
             ,  CAST(A.MINUS_RATE AS DECIMAL(7,3))                      AS MINUS_RATE
             ,  CAST(A.SUPP_RATE AS DECIMAL(7,3))                       AS SUPP_RATE
             ,  CAST(A.BONUS_I AS DECIMAL(18,4))                        AS BONUS_I
             ,  CAST(A.BONUS_TOTAL_I AS DECIMAL(18,4))                  AS BONUS_TOTAL_I
             ,  CAST(A.PAY_TOTAL_I AS DECIMAL(18,4))                    AS PAY_TOTAL_I
             ,  CAST(D.TAX_EXEMPTION1_I AS DECIMAL(18,4))               AS TAX_EXEMPTION1_I
             ,  CAST(D.TAX_EXEMPTION2_I AS DECIMAL(18,4))               AS TAX_EXEMPTION2_I
             ,  CAST(D.TAX_EXEMPTION3_I AS DECIMAL(18,4))               AS TAX_EXEMPTION3_I
             ,  CAST(D.TAX_EXEMPTION4_I AS DECIMAL(18,4))               AS TAX_EXEMPTION4_I
             ,  CAST(D.TAX_EXEMPTION6_I AS DECIMAL(18,4))               AS TAX_EXEMPTION6_I
             ,  CAST(NVL(D.TAX_EXEMPTION5_I, 0) AS DECIMAL(18,4))
                                                                        AS TAX_EXEMPTION5_I
             ,  CAST((NVL(A.SUPP_TOTAL_I, 0)
                      - NVL(D.TAX_EXEMPTION1_I, 0)
                      - NVL(D.TAX_EXEMPTION2_I, 0)
                      - NVL(D.TAX_EXEMPTION3_I, 0)
                      - NVL(D.TAX_EXEMPTION4_I, 0)
                      - NVL(D.TAX_EXEMPTION6_I, 0)
                      - NVL(D.TAX_EXEMPTION5_I, 0) ) AS DECIMAL(18,4))          
                                                                        AS TAX_AMOUNT_I
             ,  CAST(A.BONUS_TAX_I AS DECIMAL(18,4))                    AS BONUS_TAX_I
             ,  CAST(A.SUPP_TOTAL_I AS DECIMAL(18,4))                   AS SUPP_TOTAL_I
             ,  CAST(A.DED_TOTAL_I AS DECIMAL(18,4))                    AS DED_TOTAL_I
             ,  CAST(A.REAL_AMOUNT_I AS  DECIMAL(18,4))                 AS REAL_AMOUNT_I
             ,  CAST(A.YEAR_CRT AS DECIMAL(4,2))                        AS YEAR_CRT
             ,  CAST(A.YEAR_ADD AS DECIMAL(4,2))                        AS YEAR_ADD
             ,  CAST(A.MONTH_CRT AS DECIMAL(4,2))                       AS MONTH_CRT
             ,  CAST(A.MON_YEAR_USE AS DECIMAL(4,2))                    AS MON_YEAR_USE
             ,  CAST(A.MON_YEAR_PROV AS DECIMAL(4,2))                   AS MON_YEAR_PROV
             ,  CAST(A.RETR_FLAG AS VARCHAR(01))                        AS RETR_FLAG
             ,  CAST(A.AUTO_RECORD_NUM AS VARCHAR(20))                  AS AUTO_RECORD_NUM
             ,  B.JOIN_DATE
             ,  B.RETR_DATE
             ,  B.WAGES_STD_I
             ,  A.COM_DAY_WAGES
             ,  A.DIV_CODE
             ,  A.SECT_CODE
             ,  A.MAKE_SALE
             ,  A.COST_KIND
             ,  A.PAY_GUBUN
             ,  A.PAY_GUBUN2
             ,  CAST(A.MED_GRADE AS VARCHAR(04))                        AS MED_GRADE
             ,  CAST(NVL(A.BUSI_SHARE_I, 0) AS DECIMAL(18,0))           AS BUSI_SHARE_I
             ,  CAST(A.CHILD_20_NUM AS DECIMAL(2,0))                    AS CHILD_20_NUM
             ,  A.COM_PAY_FLAG
             ,  CAST(NVL(A.NON_TAX_I, 0) AS DECIMAL(18,4))              AS NON_TAX_I
             ,  CAST(NVL(A.WORKER_COMPEN_I, 0) AS DECIMAL(18,0))        AS WORKER_COMPEN_I    
             ,  NVL(A.TAXRATE_BASE, '2')                                AS TAXRATE_BASE
             ,  CASE WHEN C.CLOSE_DATE IS NOT NULL 
                   THEN '마감'
                   ELSE '미마감'
                END                                                     AS CLOSE_YN
        FROM    HPA600T A 
                LEFT OUTER JOIN HUM100T B   ON A.COMP_CODE   = B.COMP_CODE
                                           AND A.PERSON_NUMB = B.PERSON_NUMB
                LEFT JOIN HBS910T C         ON C.COMP_CODE   = A.COMP_CODE
                                           AND C.PERSON_NUMB = A.PERSON_NUMB
                                           AND C.CLOSE_DATE  = A.PAY_YYYYMM
                                           AND C.CLOSE_TYPE  = A.SUPP_TYPE
                LEFT  JOIN (SELECT A.COMP_CODE
                                 , A.PAY_YYYYMM
                                 , A.SUPP_TYPE
                                 , A.PERSON_NUMB
                                 , SUM(CASE WHEN A.NONTAX_CODE IN ('O01') THEN NVL(A.LIMIT_PAY_SUPP_I, 0)  -- 연장근로 비과세
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION1_I
                                 , SUM(CASE WHEN A.NONTAX_CODE IN ('P01') THEN NVL(A.LIMIT_PAY_SUPP_I, 0)  -- 식대비과세
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION2_I
                                 , SUM(CASE WHEN A.NONTAX_CODE IN ('M01', 'M02', 'M03')  -- 국외근로 비과세
                                                 THEN NVL(A.LIMIT_PAY_SUPP_I, 0)
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION4_I
                                 , SUM(CASE WHEN A.NONTAX_CODE IN ('Q01') THEN NVL(A.LIMIT_PAY_SUPP_I, 0)  -- 자녀양육비비과세
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION5_I
                                 , SUM(CASE WHEN A.NONTAX_CODE IN ('H06', 'H07', 'H08', 'H09', 'H10')  -- 연구활동비과세
                                                 THEN NVL(A.LIMIT_PAY_SUPP_I, 0)
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION6_I
                                 , SUM(CASE WHEN A.NONTAX_CODE NOT IN ('O01', 'P01', 'M01', 'M02', 'M03', 'Q01', 'H06', 'H07', 'H08', 'H09', 'H10')  -- 기타비과세
                                                 THEN NVL(A.LIMIT_PAY_SUPP_I, 0)
                                            ELSE 0
                                       END)               AS TAX_EXEMPTION3_I
                              FROM            HPA800T A
                             GROUP BY A.COMP_CODE, A.PAY_YYYYMM, A.SUPP_TYPE, A.PERSON_NUMB
                           ) D                       ON D.COMP_CODE   = A.COMP_CODE
                                                    AND D.PAY_YYYYMM  = A.PAY_YYYYMM
                                                    AND D.SUPP_TYPE   = A.SUPP_TYPE
                                                    AND D.PERSON_NUMB = A.PERSON_NUMB
        WHERE A.COMP_CODE    = #{S_COMP_CODE}
        AND   A.PAY_YYYYMM   = #{PAY_YYYYMM}
        AND   A.SUPP_TYPE    = #{SUPP_TYPE}
        AND   A.PERSON_NUMB  = #{PERSON_NUMB}                   
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.getHumanMaster"  parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.getHumanMaster*/
        SELECT  A.NAME
             ,  A.PERSON_NUMB
             ,  A.POST_CODE
             ,  A.POST_CODE_NAME
             ,  A.DEPT_CODE
             ,  A.DEPT_NAME
             ,  fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE)              AS JOIN_DATE
             ,  A.ABIL_CODE
             ,  A.ABIL_NAME
             ,  CASE WHEN A.RETR_DATE = '00000000' THEN ''
                     ELSE fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE)
                END                                                              AS RETR_DATE
             ,  A.SECT_CODE
             ,  A.SECT_NAME
             ,  A.JOB_CODE
             ,  A.JOB_NAME
             ,  A.PAY_CODE
             ,  A.TAX_CODE
             ,  A.OT_KIND
             ,  A.PAY_PROV_FLAG
             ,  A.EMPLOY_TYPE
             ,  A.MED_GRADE
             ,  A.ANU_BASE_I
             ,  A.SPOUSE
             ,  A.SUPP_AGED_NUM
             ,  A.BONUS_KIND
             ,  fnCipherDecrypt(A.REPRE_NUM, 'R')                        AS REPRE_NUM
             ,  A.WOMAN
             ,  A.ZIP_CODE
             ,  A.KOR_ADDR
             ,  A.DEFORM_NUM
             ,  A.AGED_NUM
             ,  A.BRING_CHILD_NUM
             ,  A.ANNUAL_SALARY_I
             ,  A.WAGES_STD_I
             ,  A.BONUS_STD_I
             ,  A.COM_DAY_WAGES
             ,  A.COM_YEAR_WAGES
             ,  A.MED_INSUR_NO
             ,  A.PAY_PROV_FLAG_DAT
             ,  A.SEX_CODE
             ,  A.STD_AMOUNT_I_01
             ,  A.STD_AMOUNT_I_02
             ,  A.INSUR_AMOUNT_I_01
             ,  A.INSUR_AMOUNT_I_02
             ,  A.TELEPHON
             ,  A.DIV_CODE
             ,  A.MAKE_SALE
             ,  A.COST_KIND
             ,  A.MED_AVG_I
             ,  A.NATION_CODE
             ,  A.LIVE_GUBUN
             ,  A.CHILD_20_NUM
             ,  A.PENS_GRADE
             ,  A.MED_INSUR_I
             ,  A.ANU_INSUR_I
             ,  A.HIRE_INSUR_TYPE
             ,  A.WORK_COMPEN_YN
             ,  fnCipherDecrypt(A.REPRE_NUM, 'A')                       AS REPRE_NUM2
             ,  A.DED_TYPE
             ,  A.DOC_ID
             ,  A.BANK_CODE1
             ,  A.BANK_NAME1
             ,  fnCipherDecrypt(A.BANK_ACCOUNT1, '')                    AS BANK_ACCOUNT1
             ,  A.TAXRATE_BASE
        FROM    (              
                SELECT  H.COMP_CODE
                     ,  H.NAME
                     ,  H.PERSON_NUMB
                     ,  H.POST_CODE
                     ,  M1.CODE_NAME                                                     AS POST_CODE_NAME
                     ,  H.DEPT_CODE
                     ,  H.DEPT_NAME
                     ,  H.JOIN_DATE
                     ,  H.ABIL_CODE
                     ,  M2.CODE_NAME                                                     AS ABIL_NAME
                     ,  H.RETR_DATE
                     ,  H.SECT_CODE
                     ,  M3.DIV_NAME                                                      AS SECT_NAME
                     ,  H.JOB_CODE
                     ,  M4.CODE_NAME                                                     AS JOB_NAME
                     ,  H.PAY_CODE
                     ,  H.TAX_CODE
                     ,  H.OT_KIND
                     ,  H.PAY_PROV_FLAG
                     ,  H.EMPLOY_TYPE
                     ,  H.MED_GRADE
                     ,  H.ANU_BASE_I
                     ,  H.SPOUSE
                     ,  H.SUPP_AGED_NUM
                     ,  H.BONUS_KIND
                     ,  H.REPRE_NUM
                     ,  H.WOMAN
                     ,  H.ZIP_CODE
                     ,  H.KOR_ADDR
                     ,  H.DEFORM_NUM
                     ,  H.AGED_NUM
                     ,  H.BRING_CHILD_NUM
                     ,  NVL(H.ANNUAL_SALARY_I,0)                                    AS ANNUAL_SALARY_I
                     ,  NVL(H.WAGES_STD_I    ,0)                                    AS WAGES_STD_I
                     ,  NVL(H.BONUS_STD_I    ,0)                                    AS BONUS_STD_I
                     ,  NVL(H.COM_DAY_WAGES  ,0)                                    AS COM_DAY_WAGES
                     ,  NVL(H.COM_YEAR_WAGES ,0)                                    AS COM_YEAR_WAGES
                     ,  H.MED_INSUR_NO
                     ,  M5.REF_CODE1                                                AS PAY_PROV_FLAG_DAT
                     ,  H.SEX_CODE
                     ,  B1.STD_AMOUNT_I                                             AS STD_AMOUNT_I_01
                     ,  B2.STD_AMOUNT_I                                             AS STD_AMOUNT_I_02
                     ,  B1.INSUR_AMOUNT_I                                           AS INSUR_AMOUNT_I_01
                     ,  B2.INSUR_AMOUNT_I                                           AS INSUR_AMOUNT_I_02
                     ,  H.TELEPHON
                     ,  H.DIV_CODE
                     ,  H.MAKE_SALE
                     ,  H.COST_KIND
                     ,  H.MED_AVG_I
                     ,  H.NATION_CODE
                     ,  H.LIVE_GUBUN
                     ,  H.CHILD_20_NUM
                     ,  H.PENS_GRADE
                     ,  H.MED_INSUR_I
                     ,  H.ANU_INSUR_I
                     ,  H.HIRE_INSUR_TYPE
                     ,  H.WORK_COMPEN_YN
                     ,  H.REPRE_NUM                                                 AS REPRE_NUM2
                     ,  H.DED_TYPE
                     ,  0                                                           AS DOC_ID
                     ,  NVL(H.BANK_CODE1, '')                                       AS BANK_CODE1
                     ,  NVL(C1.CUSTOM_NAME, '')                                     AS BANK_NAME1
                     ,  H.BANK_ACCOUNT1                                             AS BANK_ACCOUNT1
                     ,  NVL(H.TAXRATE_BASE, '2')                                    AS TAXRATE_BASE
                FROM                HUM100T   H  
                        LEFT  JOIN  HBS500T   B1  ON B1.COMP_CODE   = H.COMP_CODE
                                                 AND B1.GRADE       = H.MED_GRADE
                                                 AND B1.INSUR_TYPE  = 2
                        LEFT  JOIN  HBS500T   B2  ON B2.COMP_CODE   = H.COMP_CODE
                                                 AND B2.GRADE       = H.PENS_GRADE
                                                 AND B2.INSUR_TYPE  = 1
                        LEFT  JOIN  BCM100T   C1  ON C1.COMP_CODE   = H.COMP_CODE
                                                 AND C1.CUSTOM_CODE = H.BANK_CODE1
                                                 AND C1.CUSTOM_TYPE = '4'
                        LEFT  JOIN  BSA100T   M1  ON M1.COMP_CODE   = H.COMP_CODE
                                                 AND M1.MAIN_CODE   = 'H005'
                                                 AND M1.SUB_CODE    = H.POST_CODE
                        LEFT  JOIN  BSA100T   M2  ON M2.COMP_CODE   = H.COMP_CODE
                                                 AND M2.MAIN_CODE   = 'H006'
                                                 AND M2.SUB_CODE    = H.ABIL_CODE
                        LEFT  JOIN  BOR120T   M3  ON M3.COMP_CODE   = H.COMP_CODE
                                                 AND M3.DIV_CODE    = H.SECT_CODE
                        LEFT  JOIN  BSA100T   M4  ON M4.COMP_CODE   = H.COMP_CODE
                                                 AND M4.MAIN_CODE   = 'H008'
                                                 AND M4.SUB_CODE    = H.JOB_CODE
                        LEFT  JOIN  BSA100T   M5  ON M5.COMP_CODE   = H.COMP_CODE
                                                 AND M5.MAIN_CODE   = 'H031'
                                                 AND M5.SUB_CODE    = H. PAY_PROV_FLAG
                        LEFT  JOIN  BSA100T   M6  ON M6.COMP_CODE   = H.COMP_CODE
                                                 AND M6.MAIN_CODE   = 'H011'
                                                 AND M6.SUB_CODE    = H.PAY_GUBUN
                
                WHERE  H.COMP_CODE     = #{S_COMP_CODE}
                AND    H.PERSON_NUMB   LIKE #{PERSON_NUMB}
                AND    H.NAME          LIKE '%'
            ) A         
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.selectList4" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.selectList4*/
        SELECT  B.CODE_NAME
             ,  A.DUTY_NUM
             ,  A.DUTY_TIME
        FROM               HAT200T A
                INNER JOIN BSA100T B ON A.COMP_CODE = B.COMP_CODE
                                    AND A.DUTY_CODE = B.SUB_CODE
        WHERE   A.COMP_CODE   = #{S_COMP_CODE}
        AND     B.MAIN_CODE   = 'H033'
        AND     A.DUTY_YYYYMM = #{PAY_YYYYMM}
        AND     A.PERSON_NUMB = #{PERSON_NUMB}
        ORDER   BY B.REF_CODE2, SUB_CODE  
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.getPrNxPersonNumb" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.getPrNxPersonNumb */
        SELECT  NVL((
                    SELECT  MAX(A.PERSON_NUMB)
                    FROM               HPA600T A 
                            LEFT  JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
                                                AND A.PERSON_NUMB = B.PERSON_NUMB
                    WHERE   A.COMP_CODE     = #{S_COMP_CODE}
                    AND     A.PAY_YYYYMM    = #{PAY_YYYYMM}
                    AND     A.SUPP_TYPE     = #{SUPP_TYPE}
                    AND     A.PERSON_NUMB &lt; #{PERSON_NUMB}
                    ), 'BOF' ) AS PV_D
             ,  NVL((
                    SELECT  NAME 
                    FROM    HUM100T
                    WHERE   COMP_CODE   = #{S_COMP_CODE}
                    AND     PERSON_NUMB = ( SELECT  MAX(A.PERSON_NUMB)
                                            FROM               HPA600T A 
                                                    LEFT  JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
                                                                        AND A.PERSON_NUMB = B.PERSON_NUMB
                                            WHERE   A.COMP_CODE     = #{S_COMP_CODE}
                                            AND     A.PAY_YYYYMM    = #{PAY_YYYYMM}
                                            AND     A.SUPP_TYPE     = #{SUPP_TYPE}
                                            AND     A.PERSON_NUMB &lt; #{PERSON_NUMB}
                                            )
                    ), 'BOF' ) AS PV_NAME
             ,  NVL((
                    SELECT MIN(A.PERSON_NUMB)
                    FROM               HPA600T A 
                            LEFT  JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
                                                AND A.PERSON_NUMB = B.PERSON_NUMB
                    WHERE   A.COMP_CODE     = #{S_COMP_CODE}
                    AND     A.PAY_YYYYMM    = #{PAY_YYYYMM}
                    AND     A.SUPP_TYPE     = #{SUPP_TYPE}
                    AND     A.PERSON_NUMB &gt; #{PERSON_NUMB}
               ), 'EOF' )  AS NX_D
             ,  NVL((
                    SELECT  NAME
                    FROM    HUM100T
                    WHERE   COMP_CODE   = #{S_COMP_CODE}
                    AND     PERSON_NUMB = ( SELECT  MIN(A.PERSON_NUMB)
                                            FROM              HPA600T A 
                                                    LEFT JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
                                                                       AND A.PERSON_NUMB = B.PERSON_NUMB
                                            WHERE   A.COMP_CODE     = #{S_COMP_CODE}
                                            AND     A.PAY_YYYYMM    = #{PAY_YYYYMM}
                                            AND     A.SUPP_TYPE     = #{SUPP_TYPE}
                                            AND     A.PERSON_NUMB &gt; #{PERSON_NUMB}
                                            )
                    ), 'EOF' ) AS NX_NAME
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.seletList1ForCopy" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.seletList1ForCopy */
        SELECT  CAST(#{PAY_YYYYMM} AS VARCHAR(06))               AS PAY_YYYYMM
             ,  CAST(A.SUPP_TYPE AS VARCHAR(02))               AS SUPP_TYPE
             ,  A.PERSON_NUMB
             ,  B.NAME
             ,  CAST(B.DEPT_CODE AS VARCHAR(08))               AS DEPT_CODE
             ,  CAST(D.TREE_NAME AS VARCHAR(30))               AS DEPT_NAME
             ,  CAST(A.ABIL_CODE AS VARCHAR(02))               AS ABIL_CODE
             ,  CAST(B.POST_CODE AS VARCHAR(02))               AS POST_CODE
             ,  CAST(A.PAY_CODE AS VARCHAR(01))                AS PAY_CODE
             ,  CAST(A.TAX_CODE AS VARCHAR(01))                AS TAX_CODE
             ,  CAST(A.EXCEPT_TYPE AS VARCHAR(01))             AS EXCEPT_TYPE
             ,  CAST(A.EMPLOY_TYPE AS VARCHAR(02))             AS EMPLOY_TYPE
             ,  CAST(#{SUPP_DATE} + RIGHT(A.SUPP_DATE, 2)   AS VARCHAR(08))
             									               AS SUPP_DATE
             ,  CAST(A.PAY_PROV_FLAG AS VARCHAR(01))           AS PAY_PROV_FLAG
             ,  CAST(A.OT_KIND AS VARCHAR(04))                 AS OT_KIND
             ,  CAST(A.BONUS_KIND AS VARCHAR(04))              AS BONUS_KIND
             ,  CAST(A.COM_DAY_WAGES AS DECIMAL(18,4))         AS COM_DAY_WAGES
             ,  CAST(A.LONG_MONTH AS DECIMAL(6,0))             AS LONG_MONTH
             ,  CAST(A.SPOUSE AS VARCHAR(01))                  AS SPOUSE
             ,  CAST(A.WOMAN AS VARCHAR(01))                   AS WOMAN
             ,  CAST(A.SUPP_NUM AS DECIMAL(2,0))               AS SUPP_NUM
             ,  CAST(A.DEFORM_NUM AS DECIMAL(2,0))             AS DEFORM_NUM
             ,  CAST(A.AGED_NUM AS DECIMAL(2,0))               AS AGED_NUM
             ,  NVL(CAST(A.MED_AVG_I AS DECIMAL(18,0)), 0)  AS MED_AVG_I
             ,  NVL(CAST(A.ANU_BASE_I AS DECIMAL(18,0)), 0) AS ANU_BASE_I
             ,  CAST(A.BONUS_STD_I AS DECIMAL(18,4))           AS BONUS_STD_I
             ,  CAST(A.BONUS_RATE AS DECIMAL(7,3))             AS BONUS_RATE
             ,  CAST(A.INCE_WAGES_RATE AS DECIMAL(7,3))        AS INCE_WAGES_RATE
             ,  CAST(A.PLUS_RATE AS DECIMAL(7,3))              AS PLUS_RATE
             ,  CAST(A.MINUS_RATE AS DECIMAL(7,3))             AS MINUS_RATE
             ,  CAST(A.SUPP_RATE AS DECIMAL(7,3))              AS SUPP_RATE
             ,  CAST(A.BONUS_I AS DECIMAL(18,4))               AS BONUS_I
             ,  CAST(A.BONUS_TOTAL_I AS DECIMAL(18,4))         AS BONUS_TOTAL_I
             ,  CAST(A.PAY_TOTAL_I AS DECIMAL(18,4))           AS PAY_TOTAL_I
             ,  CAST(A.TAX_EXEMPTION1_I AS DECIMAL(18,4))      AS TAX_EXEMPTION1_I
             ,  CAST(A.TAX_EXEMPTION2_I AS DECIMAL(18,4))      AS TAX_EXEMPTION2_I
             ,  CAST(A.TAX_EXEMPTION3_I AS DECIMAL(18,4))      AS TAX_EXEMPTION3_I
             ,  CAST(A.TAX_EXEMPTION4_I AS DECIMAL(18,4))      AS TAX_EXEMPTION4_I
             ,  CAST(A.TAX_EXEMPTION6_I AS DECIMAL(18,4))      AS TAX_EXEMPTION6_I
             ,  CAST(NVL(A.TAX_EXEMPTION5_I, 0) AS DECIMAL(18,4)) AS TAX_EXEMPTION5_I
             ,  CAST(A.TAX_AMOUNT_I AS DECIMAL(18,4))          AS TAX_AMOUNT_I
             ,  CAST(A.BONUS_TAX_I AS DECIMAL(18,4))           AS BONUS_TAX_I
             ,  CAST(A.SUPP_TOTAL_I AS DECIMAL(18,4))          AS SUPP_TOTAL_I
             ,  CAST(A.DED_TOTAL_I AS DECIMAL(18,4))           AS DED_TOTAL_I
             ,  CAST(A.REAL_AMOUNT_I AS  DECIMAL(18,4))        AS REAL_AMOUNT_I
             ,  CAST(A.YEAR_CRT AS DECIMAL(4,2))               AS YEAR_CRT
             ,  CAST(A.YEAR_ADD AS DECIMAL(4,2))               AS YEAR_ADD
             ,  CAST(A.MONTH_CRT AS DECIMAL(4,2))              AS MONTH_CRT
             ,  CAST(A.MON_YEAR_USE AS DECIMAL(4,2))           AS MON_YEAR_USE
             ,  CAST(A.MON_YEAR_PROV AS DECIMAL(4,2))          AS MON_YEAR_PROV
             ,  CAST(A.RETR_FLAG AS VARCHAR(01))               AS RETR_FLAG
             ,  CAST(A.AUTO_RECORD_NUM AS VARCHAR(20))         AS AUTO_RECORD_NUM
             ,  B.JOIN_DATE
             ,  B.RETR_DATE
             ,  B.WAGES_STD_I
             ,  A.COM_DAY_WAGES
             ,  A.DIV_CODE
             ,  A.SECT_CODE
             ,  A.MAKE_SALE
             ,  A.COST_KIND
             ,  A.PAY_GUBUN
             ,  A.PAY_GUBUN2
             ,  CAST(A.MED_GRADE AS VARCHAR(04))                    AS MED_GRADE
             ,  CAST(NVL(A.BUSI_SHARE_I, 0) AS DECIMAL(18,0))    AS BUSI_SHARE_I
             ,  CAST(A.CHILD_20_NUM AS DECIMAL(2,0))                AS CHILD_20_NUM
             ,  COM_PAY_FLAG
             ,  CAST(NVL(A.NON_TAX_I, 0) AS DECIMAL(18,4))       AS NON_TAX_I
             ,  CAST(NVL(A.WORKER_COMPEN_I, 0) AS DECIMAL(18,0)) AS WORKER_COMPEN_I
             ,  CASE WHEN C.CLOSE_DATE IS NOT NULL 
                   THEN '마감'
                   ELSE '미마감'
                END                                                 AS CLOSE_YN
        FROM              HPA600T A 
                LEFT JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
                                   AND A.PERSON_NUMB = B.PERSON_NUMB
                LEFT JOIN BSA210T D ON D.COMP_CODE   = B.COMP_CODE
                                   AND D.TREE_CODE   = B.DEPT_CODE
                LEFT JOIN HBS910T C ON C.COMP_CODE   = A.COMP_CODE
                                   AND C.PERSON_NUMB = A.PERSON_NUMB
                                   AND C.CLOSE_DATE  = #{PAY_YYYYMM}
                                   AND C.CLOSE_TYPE  = '1'
        
        WHERE   A.COMP_CODE     = #{S_COMP_CODE}
        AND     A.PAY_YYYYMM    = #{FR_PAY_YYYYMM}
        AND     A.PERSON_NUMB   = #{PERSON_NUMB}
        AND     A.SUPP_TYPE     = '1'
    </select>
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.seletList2ForCopy" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.seletList2ForCopy */
        SELECT  #{PAY_YYYYMM}                     AS PAY_YYYYMM
             ,  CAST(A.SUPP_TYPE AS VARCHAR(02))  AS SUPP_TYPE
             ,  A.PERSON_NUMB
             ,  CAST(A.WAGES_CODE AS VARCHAR(03)) AS WAGES_CODE
             ,  B.WAGES_NAME                      AS WAGES_NAME
             ,  CAST(A.AMOUNT_I AS DECIMAL(18,4)) AS AMOUNT_I
             ,  A.COMP_CODE
             ,  #{S_USER_ID}                          AS UPDATE_DB_USER
             ,  SYSDATETIME                        AS UPDATE_DB_TIME
        FROM               HPA300T A
                INNER JOIN HBS300T B ON B.COMP_CODE  = A.COMP_CODE
                                    AND B.WAGES_CODE = A.WAGES_CODE
                                    AND B.CODE_TYPE  = '1'
        WHERE   A.COMP_CODE   = #{S_COMP_CODE}
        AND     A.PAY_YYYYMM  = #{FR_PAY_YYYYMM}
        AND     A.PERSON_NUMB = #{PERSON_NUMB}
        AND     A.SUPP_TYPE   = '1'
        ORDER   BY B.SORT_SEQ
    </select>   
    
    <select id="s_hpa330ukrServiceImpl_KOCIS.seletList3ForCopy" parameterType="Map" resultType="rMap">
        /* s_hpa330ukrServiceImpl_KOCIS.seletList3ForCopy */
        SELECT  #{PAY_YYYYMM}                        AS PAY_YYYYMM
             ,  CAST(A.SUPP_TYPE AS VARCHAR(02))      AS SUPP_TYPE
             ,  A.PERSON_NUMB
             ,  CAST(A.DED_CODE AS VARCHAR(03))       AS DED_CODE
             ,  B.CODE_NAME                           AS WAGES_NAME
             ,  CAST(A.DED_AMOUNT_I AS DECIMAL(18,4)) AS DED_AMOUNT_I
             ,  A.COMP_CODE
             ,  #{S_USER_ID}                          AS UPDATE_DB_USER
             ,  SYSDATETIME                             AS UPDATE_DB_TIME
        FROM               HPA400T A
                INNER JOIN BSA100T B ON B.COMP_CODE = A.COMP_CODE
                                    AND B.MAIN_CODE = 'H034'
                                    AND B.SUB_CODE  = A.DED_CODE
        WHERE   A.COMP_CODE   = #{S_COMP_CODE}
        AND     A.PAY_YYYYMM  = #{FR_PAY_YYYYMM}
        AND     A.PERSON_NUMB = #{PERSON_NUMB}
        AND     A.SUPP_TYPE   = '1'
        ORDER   BY B.REF_CODE2
    </select>


    <!-- 수정 가능여부(마감 여부) 체크 -->
    <select id="s_hpa330ukrServiceImpl_KOCIS.checkUpdateAvailable" parameterType="Map" resultType="String">
        /* s_hpa330ukrServiceImpl_KOCIS.checkUpdateAvailable */
	       SET @existYN		:= 0;
	       SET @checkDesc	:= ' ';
	        DO (
				SELECT @existYN := COUNT(*) 
				  FROM HBS900T
				WHERE COMP_CODE			= #{S_COMP_CODE} 
				   AND CLOSE_DATE	&gt;= #{PAY_YYYYMM}
				   AND CLOSE_TYPE		= '1'
			 )
	       SET @checkDesc	= CASE WHEN @existYN > 0 THEN '이미 마감된 데이터 입니다.'
	       						   ELSE 'complete'
	       					  END
		SELECT @checkDesc
    </select>


    <!-- 기존 지급 / 공제내역 / 월급상여내역 DELETE -->
    <delete id="s_hpa330ukrServiceImpl_KOCIS.deleteList1" parameterType="Map">
        /* (지급내역 삭제) */
        DELETE  HPA300T
        WHERE   COMP_CODE   = #{S_COMP_CODE} 
        AND     PAY_YYYYMM  = #{PAY_YYYYMM} 
        AND     PERSON_NUMB = #{PERSON_NUMB} 
        AND     SUPP_TYPE   = #{SUPP_TYPE}
        
        
        /* (공제내역 삭제) */
        DELETE  HPA400T
        WHERE   COMP_CODE   = #{S_COMP_CODE} 
        AND     PAY_YYYYMM  = #{PAY_YYYYMM} 
        AND     PERSON_NUMB = #{PERSON_NUMB} 
        AND     SUPP_TYPE   = #{SUPP_TYPE}
        
        
        /* (월급상여내역 삭제) */
        DELETE  HPA600T
        WHERE   COMP_CODE   = #{S_COMP_CODE} 
        AND     PAY_YYYYMM  = #{PAY_YYYYMM} 
        AND     PERSON_NUMB = #{PERSON_NUMB} 
        AND     SUPP_TYPE   = #{SUPP_TYPE}
    </delete>
    
    
    <!-- 지급 / 공제내역 INSERT -->
 	<insert id="s_hpa330ukrServiceImpl_KOCIS.insertList1" parameterType="Map">
		INSERT HPA300T
			( PAY_YYYYMM
			, SUPP_TYPE
			, PERSON_NUMB
			, WAGES_CODE
			, AMOUNT_I
			, COMP_CODE
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME
			) 
		
		VALUES
			( #{PAY_YYYYMM}	
			, #{SUPP_TYPE}		 
			, #{PERSON_NUMB}
			, #{WAGES_CODE}  
			, #{AMOUNT_I}
			, #{S_COMP_CODE}
			, #{S_USER_ID}
			, SYSDATETIME
			, #{S_USER_ID}
			, SYSDATETIME
			)
	</insert>       

 	<insert id="s_hpa330ukrServiceImpl_KOCIS.insertList2" parameterType="Map">
		INSERT HPA400T
			 ( PAY_YYYYMM
			 , SUPP_TYPE
			 , PERSON_NUMB
			 , DED_CODE
			 , DED_AMOUNT_I
			 , COMP_CODE
			, INSERT_DB_USER
			, INSERT_DB_TIME
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
			 ) 
		
		VALUES
			( #{PAY_YYYYMM}
			, #{SUPP_TYPE}		 
			, #{PERSON_NUMB}
			, #{DED_CODE}
			, #{DED_AMOUNT_I}
			, #{S_COMP_CODE}
			, #{S_USER_ID}
			, SYSDATETIME
			, #{S_USER_ID}
			, SYSDATETIME
			 )
	</insert>   
    <!-- (여기까지) 지급 / 공제내역 INSERT -->    
    
    
    <!-- 월급상여내역 INSERT -->  
    <update id="s_hpa330ukrServiceImpl_KOCIS.form01update" parameterType="rMap" >
        /* s_hpa330ukrServiceImpl_KOCIS.form01update */
        
        SET @DIV_CODE   = (SELECT DIV_CODE FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB});
        SET @PAY_GUBUN  = (SELECT NVL(PAY_GUBUN, '1')  FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB});
        SET @PAY_GUBUN2 = (SELECT NVL(PAY_GUBUN2, '2') FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB});
        SET @DEPT_CODE  = (SELECT TREE_CODE FROM BSA210T WHERE COMP_CODE = #{S_COMP_CODE} AND TYPE_LEVEL = @DIV_CODE AND ROWNUM = 1);
        SET @DEPT_NAME  = (SELECT TREE_NAME FROM BSA210T WHERE COMP_CODE = #{S_COMP_CODE} AND TYPE_LEVEL = @DIV_CODE AND ROWNUM = 1);         
        
		INSERT HPA600T
			 (    COMP_CODE
			 	, DIV_CODE
			 	, PAY_YYYYMM
			 	, SUPP_TYPE
			 	, PERSON_NUMB
		        <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
				, POST_CODE	
				</if>
				, PAY_CODE				
				, EXCEPT_TYPE				
				, SUPP_DATE		
		        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
				, ABIL_CODE				
				</if>				
				, PAY_PROV_FLAG							
				, EMPLOY_TYPE			
				, TAX_CODE	
				, ANU_BASE_I		
				, MED_AVG_I	
				, TAX_AMOUNT_I
				, NON_TAX_I
				, DED_TOTAL_I
				, SUPP_TOTAL_I
				, REAL_AMOUNT_I
				--저장 시 오류발생하여 추가(20170711)
				, PAY_GUBUN
                , PAY_GUBUN2
                , DEPT_CODE
                , DEPT_NAME
                , SECT_CODE
                , MAKE_SALE
				, INSERT_DB_TIME
				, INSERT_DB_USER
				, UPDATE_DB_TIME
				, UPDATE_DB_USER	
			 ) 
		
		VALUES
			 (    #{S_COMP_CODE}
			 	, (SELECT DIV_CODE 
			 		 FROM HUM100T 
			 		WHERE COMP_CODE		= #{S_COMP_CODE}
			 		  AND PERSON_NUMB	= #{PERSON_NUMB}
		 		  ) 
			 	, #{PAY_YYYYMM}
			 	, #{SUPP_TYPE}
			 	, #{PERSON_NUMB}
		        <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
				, #{POST_CODE}
				</if>
				, #{PAY_CODE}			
				, #{EXCEPT_TYPE}
				, #{SUPP_DATE}
		        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
				, #{ABIL_CODE}
				</if>				
				, #{PAY_PROV_FLAG}
				, #{EMPLOY_TYPE}
				, #{TAX_CODE}
				, #{ANU_BASE_I}
				, #{MED_AVG_I}
				, (SELECT NVL(SUM(AMOUNT_I),0)
		             FROM HPA300T
		            WHERE COMP_CODE   = #{S_COMP_CODE}
		              AND PAY_YYYYMM  = #{PAY_YYYYMM}
		              AND PERSON_NUMB = #{PERSON_NUMB}
		              AND SUPP_TYPE   = #{SUPP_TYPE}
				   )															-- TAX_AMOUNT_I	(급여 총금액)
				, 0																-- NON_TAX_I	(비과세금액)
				, (SELECT NVL(SUM(DED_AMOUNT_I),0)
                     FROM HPA400T
		            WHERE COMP_CODE   = #{S_COMP_CODE}
		              AND PAY_YYYYMM  = #{PAY_YYYYMM}
		              AND PERSON_NUMB = #{PERSON_NUMB}
		              AND SUPP_TYPE   = #{SUPP_TYPE}
	              )																-- DED_TOTAL_I	(공제 총금액)
				, (SELECT NVL(SUM(AMOUNT_I),0)
                        FROM HPA300T
 		            WHERE COMP_CODE   = #{S_COMP_CODE}
		              AND PAY_YYYYMM  = #{PAY_YYYYMM}
		              AND PERSON_NUMB = #{PERSON_NUMB}
		              AND SUPP_TYPE   = #{SUPP_TYPE}
	              )																-- SUPP_TOTAL_I	(지급총액)
				, (SELECT NVL(SUM(AMOUNT_I),0)     
		             FROM HPA300T
		            WHERE COMP_CODE   = #{S_COMP_CODE}
		              AND PAY_YYYYMM  = #{PAY_YYYYMM}
		              AND PERSON_NUMB = #{PERSON_NUMB}
		              AND SUPP_TYPE   = #{SUPP_TYPE}
	              )
	             -(SELECT NVL(SUM(DED_AMOUNT_I),0)
					 FROM HPA400T
				    WHERE COMP_CODE   = #{S_COMP_CODE}
                      AND PAY_YYYYMM  = #{PAY_YYYYMM}  
                      AND PERSON_NUMB = #{PERSON_NUMB} 
                      AND SUPP_TYPE   = #{SUPP_TYPE}
                  )																-- REAL_AMOUNT_I	(실지급액(지급-공제))
                , @PAY_GUBUN
                , @PAY_GUBUN2
                , @DEPT_CODE
                , @DEPT_NAME
                , @DIV_CODE
                , '2'
				, SYSDATETIME
				, #{S_USER_ID}
				, SYSDATETIME
				, #{S_USER_ID}
			 ) 
    </update>
    <!-- (여기까지) 월급상여내역 INSERT -->     
    
   <update id="s_hpa330ukrServiceImpl_KOCIS.form02update_Backup" parameterType="foren.unilite.modules.z_kocis.S_Hpa330ukrModel_KOCIS" >
        /* s_hpa330ukrServiceImpl_KOCIS.form02update */
        SET @DIV_CODE   = (SELECT DIV_CODE FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB});

        SET @PAY_GUBUN = (
                                        SELECT NVL(PAY_GUBUN, '')
                                        FROM HPA600T 
                                        WHERE COMP_CODE   = #{S_COMP_CODE}
                                        AND PAY_YYYYMM     = #{PAY_YYYYMM} 
                                        AND SUPP_TYPE         = #{SUPP_TYPE} 
                                        AND PERSON_NUMB   = #{PERSON_NUMB}
                                     );
        SET @PAY_GUBUN = NVL(@PAY_GUBUN, 'N');
        
        SET @PAY_GUBUN2 = (
                                        SELECT NVL(PAY_GUBUN2, '1')
                                        FROM HPA600T 
                                        WHERE COMP_CODE   = #{S_COMP_CODE}
                                        AND PAY_YYYYMM     = #{PAY_YYYYMM} 
                                        AND SUPP_TYPE         = #{SUPP_TYPE} 
                                        AND PERSON_NUMB   = #{PERSON_NUMB}
                                     );     
        SET @PAY_GUBUN2 = NVL(@PAY_GUBUN2, 'N');

        
        SET @PAY_GUBUN = (
                                        SELECT NVL(PAY_GUBUN, '')                                      
                                        FROM HUM100T 
                                        WHERE COMP_CODE    = #{S_COMP_CODE}
                                        AND    PERSON_NUMB = #{PERSON_NUMB} 
                                        AND    @PAY_GUBUN   = 'N'
                                     );
        SET @PAY_GUBUN = NVL(@PAY_GUBUN, '');                                    
        
        SET @PAY_GUBUN2 = (
                                        SELECT NVL(PAY_GUBUN2, '1')                                    
                                        FROM HUM100T 
                                        WHERE COMP_CODE    = #{S_COMP_CODE}
                                        AND    PERSON_NUMB = #{PERSON_NUMB} 
                                        AND    @PAY_GUBUN2   = 'N'
                                     );
        SET @PAY_GUBUN2 = NVL(@PAY_GUBUN2, '1');         
        
                
        UPDATE  HPA600T
        SET     POST_CODE       = #{POST_CODE}
          ,     ABIL_CODE       = #{ABIL_CODE}
          ,     PAY_CODE        = #{PAY_CODE}
          ,     TAX_CODE        = #{TAX_CODE}
          ,     OT_KIND         = #{OT_KIND}
          ,     PAY_PROV_FLAG   = #{PAY_PROV_FLAG}
          ,     EMPLOY_TYPE     = #{EMPLOY_TYPE}
          ,     EXCEPT_TYPE     = #{EXCEPT_TYPE}
          ,     SUPP_DATE       = #{SUPP_DATE}
          ,     MED_AVG_I       = #{MED_AVG_I}
          ,     ANU_BASE_I      = #{ANU_BASE_I}
		<if test="@foren.Ognl@isNotEmpty(PAY_TOTAL_I)">     
          ,     PAY_TOTAL_I     = #{PAY_TOTAL_I}
		</if>
		<if test="@foren.Ognl@isNotEmpty(COM_DAY_WAGES)">     
          ,     COM_DAY_WAGES   = #{COM_DAY_WAGES}
		</if>
          ,     UPDATE_DB_USER  = #{S_USER_ID}
          ,     UPDATE_DB_TIME  = SYSDATETIME
          ,     DIV_CODE        = @DIV_CODE
          ,     PAY_GUBUN       = @PAY_GUBUN
          ,     PAY_GUBUN2      = @PAY_GUBUN2
        WHERE   PAY_YYYYMM      = #{PAY_YYYYMM}
        AND     SUPP_TYPE       = #{SUPP_TYPE}
        AND     PERSON_NUMB     = #{PERSON_NUMB}
        AND     COMP_CODE       = #{S_COMP_CODE};
    </update>
 </mapper>