<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb530ukrServiceImpl">

<select id="afb530ukrServiceImpl.selectChargeInfo" parameterType="Map" resultType="rMap">	/* 사용자ID로부터 회계담당자 코드, 담당자명, 사용부서, 사번 정보 가져오기*/	
--zfa_popupZ.fnGetChargeInfo 
SELECT  A.SUB_CODE      AS CHARGE_CODE  
     ,  A.CODE_NAME     AS CHARGE_NAME  
     ,  A.REF_CODE2     AS CHARGE_DIVI  
     ,  C.PERSON_NUMB   AS CHARGE_PNUMB 
     ,  C.NAME          AS CHARGE_PNAME 
  FROM              BSA100T   A    
         LEFT  JOIN  BSA300T   B  ON B.COMP_CODE   = A.COMP_CODE   
                                               AND B.USER_ID     = A.REF_CODE1   
         LEFT  JOIN  HUM100T   C  ON C.COMP_CODE   = B.COMP_CODE   
                                               AND C.PERSON_NUMB = B.PERSON_NUMB 

 WHERE  A.COMP_CODE = #{S_COMP_CODE}
   AND  A.MAIN_CODE = 'A009'   
   AND  A.REF_CODE1 = #{S_USER_ID}  
</select>
	
<select id="afb530ukrServiceImpl.selectFnDate" parameterType="Map" resultType="rMap">		/* 회계기간 가져오기*/
--afb530ukr.CAfb530UKR[fnAfb530q]Query1
SELECT SUBSTRING(FN_DATE,1,6) AS FN_DATE 
  FROM BOR100T  
 WHERE COMP_CODE = #{S_COMP_CODE}
</select>	

<select id="afb530ukrServiceImpl.selectBudgName" parameterType="Map" resultType="rMap">		/* BUDG_NAME 컬럼수*/
--UAccntPopupKrv.CAccntPopupKR[fnGetBudgCode] Query02
<!-- BEGIN -->
    <!-- DECLARE         @COMP_CODE          NVARCHAR(08) -->

--  [ 변수 값 할당 ] ------------------------------------------------------------------------------------------
    SET @COMP_CODE  = #{S_COMP_CODE}
--  [ 데이터 조회 ] -------------------------------------------------------------------------------------------
    SELECT  *
    FROM    fnGetBudgLevelName(@COMP_CODE, #{ST_DATE})
<!-- END	 -->

<!-- SP생성필요 -->

</select>	

<select id="afb530ukrServiceImpl.selectList1" parameterType="Map" resultType="rMap">		/* 메인 조회*/
--afb530ukr.CAfb530UKR[fnCreateRecordSet]Query9


    SET @COMP_CODE    = #{S_COMP_CODE}
    <!-- SET @BUDG_YYYYMM  = #{BUDG_YYYYMM} -->
    SET @BUDG_TYPE    = #{BUDG_TYPE}



SELECT A.BUDG_YYYYMM
     , A.CHOICE
     , A.DEPT_CODE
     , '' AS DEPT_NAME
     , A.BUDG_CODE
     , A.BUDG_NAME
     <foreach collection="budgNameInfoList" item="budgNameInfo" index="index" >
     , CASE WHEN L${budgNameInfoList.size}.CODE_LEVEL &gt;= ${index+1}
            THEN L${index+1}.BUDG_NAME
            ELSE ''
        END AS BUDG_NAME_L${index+1}
     </foreach>
     , A.BUDG_TOT_I
     , A.IWALL_YYYYMM
     , A.BUDG_AMT_I
     , 'N' AS EDIT_YN
     , A.COMP_CODE
  FROM (
        select BUDG_YYYYMM
                , CHOICE
                , DEPT_CODE
                , BUDG_CODE
                , BUDG_NAME
                , BUDG_TOT_I
                , fnGetUserTypeDateComp(COMP_CODE, CAST('' AS VARCHAR(11)), 'M') AS IWALL_YYYYMM
                , BUDG_AMT_I
                , COMP_CODE
            from (
                SELECT NVL(A.BUDG_YYYYMM, '') AS BUDG_YYYYMM
                     , CAST('0' AS BIT) AS CHOICE
                     , A.DEPT_CODE
                     , A.BUDG_CODE
                     , B.BUDG_NAME
                     , (SUM(NVL(A.BUDG_CONF_I , 0)) +
                        SUM(NVL(A.BUDG_CONV_I , 0)) +
                        SUM(NVL(A.BUDG_ASGN_I , 0)) +
                        SUM(NVL(A.BUDG_SUPP_I , 0)) +
                        SUM(NVL(A.BUDG_IWALL_I, 0)) -
                        SUM(NVL(A.EX_AMT_I , 0)) -
                        SUM(NVL(A.AC_AMT_I , 0)) -
                        SUM(NVL(A.DRAFT_AMT, 0)) -
                        SUM(NVL(A.ORDER_AMT, 0)) -
                        SUM(NVL(A.REQ_AMT  , 0))) AS BUDG_TOT_I

                     , (SUM(NVL(A.BUDG_CONF_I , 0)) +
                        SUM(NVL(A.BUDG_CONV_I , 0)) +
                        SUM(NVL(A.BUDG_ASGN_I , 0)) +
                        SUM(NVL(A.BUDG_SUPP_I , 0)) +
                        SUM(NVL(A.BUDG_IWALL_I, 0)) -
                        SUM(NVL(A.EX_AMT_I , 0)) -
                        SUM(NVL(A.AC_AMT_I , 0)) -
                        SUM(NVL(A.DRAFT_AMT, 0)) -
                        SUM(NVL(A.ORDER_AMT, 0)) -
                        SUM(NVL(A.REQ_AMT  , 0))) AS BUDG_AMT_I
                     , A.COMP_CODE AS COMP_CODE
                  FROM                 AFB510T A  
                       LEFT OUTER JOIN AFB400T B   ON B.COMP_CODE   = A.COMP_CODE
                                                AND B.BUDG_CODE   = A.BUDG_CODE
                                                AND B.AC_YYYY     = fnGetBudgAcYyyy(A.COMP_CODE, A.BUDG_YYYYMM)
                       LEFT OUTER JOIN AFB530T C  ON C.COMP_CODE   = A.COMP_CODE
                                                              AND C.BUDG_CODE   = A.BUDG_CODE
                                                              AND C.BUDG_YYYYMM = A.BUDG_YYYYMM
                                                              AND C.DEPT_CODE   = A.DEPT_CODE
                 WHERE A.COMP_CODE   = #{S_COMP_CODE}
                   AND B.BUDG_TYPE   = #{BUDG_TYPE}
                   AND A.BUDG_YYYYMM = ''
                   AND A.DEPT_CODE   = ''
                   AND A.BUDG_GUBUN  = '1'
                 GROUP BY A.COMP_CODE, A.BUDG_YYYYMM, A.DEPT_CODE, A.BUDG_CODE, B.BUDG_NAME
             )
       ) A
       LEFT  JOIN AFB400T AS L${budgNameInfoList.size}
                          ON L${budgNameInfoList.size}.COMP_CODE     = A.COMP_CODE
                         AND L${budgNameInfoList.size}.AC_YYYY       = LEFT(A.BUDG_YYYYMM, 4)
                         AND L${budgNameInfoList.size}.BUDG_CODE     = A.BUDG_CODE
       <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
	   	   <if test="index+1 &lt; budgNameInfoList.size">
           INNER JOIN AFB400T      AS L${budgNameInfoList.size-(index+1)}
                                   ON L${budgNameInfoList.size-(index+1)}.COMP_CODE     = L${budgNameInfoList.size-(index)}.COMP_CODE
                                  AND L${budgNameInfoList.size-(index+1)}.AC_YYYY       = L${budgNameInfoList.size-(index)}.AC_YYYY
                                  AND L${budgNameInfoList.size-(index+1)}.BUDG_CODE     = L${budgNameInfoList.size-(index)}.TREE_LEVEL
                                  AND L${budgNameInfoList.size-(index+1)}.CODE_LEVEL    = L${budgNameInfoList.size-(index)}.CODE_LEVEL - 1
       	   </if>
	   </foreach>
 WHERE A.BUDG_TOT_I &gt; 0
</select>

<select id="afb530ukrServiceImpl.selectList2" parameterType="Map" resultType="rMap">		/* 메인 조회2*/
--afb530ukr.CAfb530UKR[fnCreateRecordSet]Query10



    SET @COMP_CODE    = #{S_COMP_CODE}
    SET @BUDG_YYYYMM  = #{BUDG_YYYYMM}
    SET @BUDG_TYPE    = #{BUDG_TYPE}
    SET @BUDG_CODE    = #{BUDG_CODE}
    SET @DEPT_CODE    = #{DEPT_CODE}



    SET @ACYYYY = ''    

 
     DO(
     SELECT @ACYYYY := fnGetBudgAcYyyy(@COMP_CODE, @BUDG_YYYYMM)
    )


SELECT BUDG_YYYYMM
    , DEPT_CODE
    , DEPT_NAME
    , USER_CODE
    , UPDATE_DB_USER
    , UPDATE_DB_TIME
    , BUDG_CODE
    , BUDG_NAME
    <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
    , BUDG_NAME_L${index+1}
    </foreach>
    , CASE NVL(IWALL_YYYYMM, '') 
        WHEN '' THEN ''
        ELSE fnGetUserTypeDateComp(COMP_CODE, IWALL_YYYYMM, 'M') 
        END AS IWALL_YYYYMM
    , IWALL_AMT_I
    , CASE NVL(IWALL_DATE, '') 
        WHEN '' THEN ''
        ELSE fnGetUserDateComp(COMP_CODE, IWALL_DATE)
        END AS IWALL_DATE
    , USER_NAME
    , COMP_CODE    

FROM (
    
    SELECT A.BUDG_YYYYMM
         , A.DEPT_CODE
         , C.TREE_NAME AS DEPT_NAME
         , A.USER_CODE
         , A.UPDATE_DB_USER
         , A.UPDATE_DB_TIME
         , A.BUDG_CODE
         , B.BUDG_NAME
         <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
         , CASE WHEN L${budgNameInfoList.size}.CODE_LEVEL &gt;= ${index+1}
                THEN L${index+1}.BUDG_NAME
                ELSE ''
            END AS BUDG_NAME_L${index+1}
         </foreach>

         , A.IWALL_YYYYMM AS   IWALL_YYYYMM
            
         , NVL(A.IWALL_AMT_I, 0) AS IWALL_AMT_I

         , A.IWALL_DATE AS IWALL_DATE  
            
         , NVL(M1.CODE_NAME, '') AS USER_NAME
         , A.COMP_CODE AS COMP_CODE
      FROM            AFB530T AS A   
           LEFT  JOIN AFB400T AS B    ON B.COMP_CODE = A.COMP_CODE
                                   AND B.BUDG_CODE = A.BUDG_CODE
                                   <!-- AND B.AC_YYYY   = fnGetBudgAcYyyy(A.COMP_CODE, A.BUDG_YYYYMM) -->
                                   AND B.AC_YYYY   = @ACYYYY
           LEFT  JOIN BSA210T AS C    ON C.COMP_CODE = A.COMP_CODE
                                   AND C.TREE_CODE = A.DEPT_CODE
           LEFT  JOIN BSA100T AS M1   ON M1.COMP_CODE = A.COMP_CODE
                                   AND M1.MAIN_CODE = 'A009'
                                   AND M1.SUB_CODE  = A.USER_CODE
           LEFT  JOIN AFB400T AS L${budgNameInfoList.size}  
                              ON L${budgNameInfoList.size}.COMP_CODE     = A.COMP_CODE
                             AND L${budgNameInfoList.size}.AC_YYYY       = LEFT(A.BUDG_YYYYMM, 4)
                             AND L${budgNameInfoList.size}.BUDG_CODE     = A.BUDG_CODE
           <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
    	       <if test="index+1 &lt; budgNameInfoList.size">
               INNER JOIN AFB400T      AS L${budgNameInfoList.size-(index+1)}
                                       ON L${budgNameInfoList.size-(index+1)}.COMP_CODE     = L${budgNameInfoList.size-(index)}.COMP_CODE
                                      AND L${budgNameInfoList.size-(index+1)}.AC_YYYY       = L${budgNameInfoList.size-(index)}.AC_YYYY
                                      AND L${budgNameInfoList.size-(index+1)}.BUDG_CODE     = L${budgNameInfoList.size-(index)}.TREE_LEVEL
                                      AND L${budgNameInfoList.size-(index+1)}.CODE_LEVEL    = L${budgNameInfoList.size-(index)}.CODE_LEVEL - 1
        	   </if>
    	   </foreach>
            
     WHERE A.COMP_CODE   = @COMP_CODE
       AND A.BUDG_YYYYMM = @BUDG_YYYYMM
       AND B.BUDG_TYPE   = @BUDG_TYPE
       AND ((A.DEPT_CODE = @DEPT_CODE    AND @DEPT_CODE    != '') OR (@DEPT_CODE    = ''))
       AND ((A.BUDG_CODE = @BUDG_CODE    AND @BUDG_CODE    != '') OR (@BUDG_CODE    = ''))
     ORDER BY A.BUDG_CODE ASC, A.IWALL_YYYYMM
)
</select>

<select id="afb530ukrServiceImpl.selectList3" parameterType="Map" resultType="rMap">		/* 참조 조회*/
--afb530ukr.CAfb530UKR[fnCreateRecordSet]Query11



    SET @COMP_CODE       = #{S_COMP_CODE}
    SET @BUDG_YYYYMM     = #{BUDG_YYYYMM}
    SET @BUDG_TYPE       = #{BUDG_TYPE}
    SET @FR_BUDG_CODE    = #{BUDG_CODE_FR}
    SET @TO_BUDG_CODE    = #{BUDG_CODE_TO}
    SET @FR_DEPT_CODE    = #{DEPT_CODE_FR}
    SET @TO_DEPT_CODE    = #{DEPT_CODE_TO}

    -- 회계기간조회
    SELECT  @FR_DATE    = FN_DATE
          , @TO_DATE    = "TO_DATE"
    FROM    BOR100T 
    WHERE   COMP_CODE   = @COMP_CODE


SELECT A.BUDG_YYYYMM
     , A.CHOICE
     , A.DEPT_CODE
     , A.DEPT_NAME
     , A.BUDG_CODE
     , A.BUDG_NAME
     <foreach collection="budgNameInfoList" item="budgNameInfo" index="index" >
     , CASE WHEN L${budgNameInfoList.size}.CODE_LEVEL &gt;= ${index+1}
            THEN L${index+1}.BUDG_NAME
            ELSE ''
        END AS BUDG_NAME_L${index+1}
     </foreach>
     , A.BUDG_TOT_I
     , A.IWALL_YYYYMM
     , A.BUDG_AMT_I
     , CASE WHEN NVL(B.GROUP_YN,'') = 'Y'
                 THEN 'N'
                 ELSE 'Y'
       END EDIT_YN
     , A.COMP_CODE AS  COMP_CODE
  FROM (SELECT A.BUDG_YYYYMM  AS BUDG_YYYYMM
             , CAST(0 AS BIT) AS CHOICE
             , A.DEPT_CODE    AS DEPT_CODE
             , D.TREE_NAME    AS DEPT_NAME
             , A.BUDG_CODE    AS BUDG_CODE
             , B.BUDG_NAME    AS BUDG_NAME
             , (SUM(NVL(A.BUDG_CONF_I , 0)) +
                SUM(NVL(A.BUDG_CONV_I , 0)) +
                SUM(NVL(A.BUDG_ASGN_I , 0)) +
                SUM(NVL(A.BUDG_SUPP_I , 0)) +
                SUM(NVL(A.BUDG_IWALL_I, 0)) -
                SUM(NVL(A.EX_AMT_I , 0)) -
                SUM(NVL(A.AC_AMT_I , 0)) -
                SUM(NVL(A.DRAFT_AMT, 0)) -
                SUM(NVL(A.ORDER_AMT, 0)) -
                SUM(NVL(A.REQ_AMT  , 0)))  AS BUDG_TOT_I
             <if test="sNxtMonth &gt; sToMonth">
             , fnGetUserTypeDateComp(A.COMP_CODE, '','M') AS IWALL_YYYYMM
             </if>
             <if test="sNxtMonth &lt;= sToMonth">
        	 , CASE NVL(#{sNxtMonth}, '') 
                    WHEN '' THEN ''
                    ELSE fnGetUserTypeDateComp(A.COMP_CODE, #{sNxtMonth},'M') 
                END AS IWALL_YYYYMM
             </if>
             , (SUM(NVL(A.BUDG_CONF_I , 0)) +
                SUM(NVL(A.BUDG_CONV_I , 0)) +
                SUM(NVL(A.BUDG_ASGN_I , 0)) +
                SUM(NVL(A.BUDG_SUPP_I , 0)) +
                SUM(NVL(A.BUDG_IWALL_I, 0)) -
                SUM(NVL(A.EX_AMT_I , 0)) -
                SUM(NVL(A.AC_AMT_I , 0)) -
                SUM(NVL(A.DRAFT_AMT, 0)) -
                SUM(NVL(A.ORDER_AMT, 0)) -
                SUM(NVL(A.REQ_AMT  , 0)))  AS BUDG_AMT_I
             , A.COMP_CODE
          FROM            AFB510T A   
               LEFT  JOIN AFB400T B   ON B.COMP_CODE   = A.COMP_CODE
                                   AND B.BUDG_CODE   = A.BUDG_CODE
                                   AND B.AC_YYYY     = fnGetBudgAcYyyy(A.COMP_CODE, A.BUDG_YYYYMM)
               LEFT  JOIN AFB530T C   ON C.COMP_CODE   = A.COMP_CODE
                                   AND C.BUDG_CODE   = A.BUDG_CODE
                                   AND C.BUDG_YYYYMM = A.BUDG_YYYYMM
                                   AND C.DEPT_CODE   = A.DEPT_CODE
               LEFT  JOIN BSA210T D   ON D.COMP_CODE   = A.COMP_CODE
                                   AND D.TREE_CODE   = A.DEPT_CODE
         WHERE A.COMP_CODE    = @COMP_CODE
           AND A.BUDG_YYYYMM  = @BUDG_YYYYMM
           AND A.BUDG_GUBUN   = '1'
         GROUP BY A.COMP_CODE, A.BUDG_YYYYMM, A.DEPT_CODE, D.TREE_NAME, A.BUDG_CODE, B.BUDG_NAME
       ) A
       LEFT  JOIN AFB400T AS B  ON B.COMP_CODE        = A.COMP_CODE
                                            AND B.BUDG_CODE        = A.BUDG_CODE
                                            AND B.AC_YYYY          = fnGetBudgAcYyyy(A.COMP_CODE, A.BUDG_YYYYMM)
       LEFT  JOIN AFB400T AS L${budgNameInfoList.size}
                          ON L${budgNameInfoList.size}.COMP_CODE     = #{S_COMP_CODE}
                         AND L${budgNameInfoList.size}.AC_YYYY       = #{ST_DATE}
                         AND L${budgNameInfoList.size}.BUDG_CODE     = A.BUDG_CODE
       <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
	   	   <if test="index+1 &lt; budgNameInfoList.size">
	       LEFT  JOIN AFB400T AS L${budgNameInfoList.size-(index+1)}
	                          ON L${budgNameInfoList.size-(index+1)}.COMP_CODE     = L${budgNameInfoList.size-(index)}.COMP_CODE
	                         AND L${budgNameInfoList.size-(index+1)}.AC_YYYY       = L${budgNameInfoList.size-(index)}.AC_YYYY
	                         AND L${budgNameInfoList.size-(index+1)}.BUDG_CODE     = L${budgNameInfoList.size-(index)}.TREE_LEVEL
	                         AND L${budgNameInfoList.size-(index+1)}.CODE_LEVEL    = L${budgNameInfoList.size-(index)}.CODE_LEVEL - 1
	   	   </if>
       </foreach>
 WHERE A.COMP_CODE   = @COMP_CODE
   AND A.BUDG_TOT_I != 0   -- (-)인 예산잔액도 넘길 수 있어야 함. 부서별 잔액이 (-)일 수도 있음
   AND B.BUDG_TYPE   = @BUDG_TYPE
   AND ((A.BUDG_CODE  &gt;= @FR_BUDG_CODE AND @FR_BUDG_CODE != '') OR (@FR_BUDG_CODE = ''))
   AND ((A.BUDG_CODE  &lt;= @TO_BUDG_CODE AND @TO_BUDG_CODE != '') OR (@TO_BUDG_CODE = ''))
   AND ((A.DEPT_CODE  &gt;= @FR_DEPT_CODE AND @FR_DEPT_CODE != '') OR (@FR_DEPT_CODE = ''))
   AND ((A.DEPT_CODE  &lt;= @TO_DEPT_CODE AND @TO_DEPT_CODE != '') OR (@TO_DEPT_CODE = ''))
</select>

<insert id="afb530ukrServiceImpl.insertLogAfb530t" parameterType="Map">						/* LOG저장 */
--afb530ukr.CAfb530UKR[fnBalancing] Query1-2
INSERT INTO L_AFB530T
     ( KEY_VALUE      
	 , OPR_FLAG
	 , BUDG_YYYYMM
     , DEPT_CODE
     , USER_CODE
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     , BUDG_CODE
     , IWALL_YYYYMM
     , IWALL_AMT_I
     , IWALL_DATE
     , COMP_CODE
     ) 
VALUES
     ( #{KEY_VALUE}                                                   
     , #{OPR_FLAG}
     , #{BUDG_YYYYMM}
     , #{DEPT_CODE}
     , #{USER_CODE}
     , #{S_USER_ID}
     , SYS_DATETIME
     , #{BUDG_CODE}
     , #{IWALL_YYYYMM}
     , #{IWALL_AMT_I}
     , #{IWALL_DATE}
     , #{S_COMP_CODE}
     )
</insert>

<update id="afb530ukrServiceImpl.spReceiving" parameterType="Map" statementType="CALLABLE">
{call USP_ACCNT_AFB530UKR (
	#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	#{UserId, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
)}
</update>
</mapper>