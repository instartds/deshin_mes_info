<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ham800ukrService">
	<insert id="ham800ukrService.insertLogMaster" parameterType="Map">
	--ham800ukrService.insertLogMaster	
	INSERT INTO L_HAM800T
     ( 
     	 TYPE_KEY         	 ,OPR_FLAG					
	    ,COMP_CODE       	 ,DEPT_CODE        ,DEPT_NAME           ,PERSON_NUMB       ,PERSON_NAME                 
	    ,REPRE_NUM       	 ,BANK_CODE        ,BANK_NAME1          ,BANK_ACCOUNT1     ,JOIN_DATE                   
	    ,RETR_DATE       	 ,SUPP_TYPE        ,PAY_YYYYMM          ,SUPP_DATE         ,WORK_DAY                    
	    ,SUPP_TOTAL_I    	 ,TAX_EXEMPTION_I  ,REAL_AMOUNT_I       ,IN_TAX_I          ,LOCAL_TAX_I                 
	    ,ANU_INSUR_I     	 ,MED_INSUR_I      ,HIR_INSUR_I         ,BUSI_SHARE_I      ,WORKER_COMPEN_I             
	    ,HIRE_INSUR_TYPE 	 ,WORK_COMPEN_YN   ,OLD_MED_INSUR_I            
        ,UPDATE_DB_USER	 	 ,UPDATE_DB_TIME   ,INSERT_DB_USER    	,INSERT_DB_TIME)
	VALUES
    (    #{KEY_VALUE}      	 ,#{OPR_FLAG}
        ,#{S_COMP_CODE}      ,#{DEPT_CODE}      ,#{DEPT_NAME}        ,#{PERSON_NUMB}     ,#{NAME}                 
	    ,#{REPRE_NUM}        ,#{BANK_CODE}      ,#{BANK_NAME1}       ,#{BANK_ACCOUNT1}   ,#{JOIN_DATE}                   
	    ,#{RETR_DATE}        ,#{SUPP_TYPE}      ,#{PAY_YYYYMM}       ,#{SUPP_DATE}       ,#{WORK_DAY}                    
	    ,#{SUPP_TOTAL_I}     ,#{TAX_EXEMPTION_I},#{REAL_AMOUNT_I}    ,#{IN_TAX_I}        ,#{LOCAL_TAX_I}                 
	    ,#{ANU_INSUR_I}      ,#{MED_INSUR_I}    ,#{HIR_INSUR_I}      ,#{BUSI_SHARE_I}    ,#{WORKER_COMPEN_I}             
	    ,#{HIRE_INSUR_TYPE}  ,#{WORK_COMPEN_YN} ,#{OLD_MED_INSUR_I}              
        ,#{S_USER_ID}        ,GETDATE()	   	    ,#{S_USER_ID}     	 ,GETDATE() ) 
	</insert>

	<update id="ham800ukrService.ham800Sp" parameterType="Map" statementType="CALLABLE">
		{call USP_HUMAN_HAM800UKR (
			#{KeyValue			, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
			#{updateDbUser		, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</update>

	<select id="ham800ukrService.strsql" parameterType="Map" resultType="rMap">
		 --ham800ukrService.strsql
		 SELECT CLOSE_DATE
		   FROM HBS900T
		  WHERE COMP_CODE  = #{S_COMP_CODE}
		    AND CLOSE_TYPE = '1' 
	</select>

	<select id="ham800ukrService.saveCheck" parameterType="Map" resultType="rMap">
	    --ham800ukrService.saveCheck[Query-01] 
	    SELECT A.PERSON_NUMB 
	      FROM            HPA600T AS A WITH(NOLOCK) 
	           INNER JOIN HUM100T AS B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                               AND B.PERSON_NUMB = A.PERSON_NUMB
	     WHERE A.COMP_CODE  = #{S_COMP_CODE}
	       AND A.PAY_YYYYMM = #{PAY_YYYYMM}
	       AND A.SUPP_TYPE  = #{SUPP_TYPE}
	       AND A.PAY_GUBUN  = '2'            -- 비정규직
	       AND A.PAY_GUBUN2 = '1'            -- 일용
	       AND ISNULL(A.EX_DATE, '') != ''
	</select>

	<select id="ham800ukrService.Ham800Qstd2" parameterType="Map" resultType="rMap">
        --ham800ukrService.Ham800Qstd2 [QUERY-01]
	    /*******************************************************************************************
	    	간이세율(일용직 근로소득공제 금액)
	    *******************************************************************************************/
	    BEGIN
	          SET NOCOUNT ON
	          SET ARITHABORT ON
	    
	          DECLARE @COMP_CODE         NVARCHAR(10)
	                , @TAX_YEAR          NVARCHAR(04)
	                , @COMPANY_CODE      NVARCHAR(08)
	    
	          SET @COMP_CODE         = #{S_COMP_CODE}
	          SET @TAX_YEAR          = #{TAX_YEAR}
	          SET @COMPANY_CODE      = #{COMPANY_CODE}
	    
	          SELECT 
	                 A.D_INCOME_DED
	               , A.D_IN_TAX_I
	            FROM HAD200T AS A WITH(NOLOCK)
	           WHERE A.COMP_CODE       = @COMP_CODE
	             AND A.TAX_YEAR        = @TAX_YEAR
	             AND A.COMPANY_CODE    = @COMPANY_CODE
	    
	          SET NOCOUNT OFF
	          SET ARITHABORT OFF
	    END
	</select>

	<select id="ham800ukrService.Ham800Qstd3" parameterType="Map" resultType="rMap">
     --ham800ukrService.Ham800Qstd3 [QUERY-01]
    /*******************************************************************************************
    	고용보험료, 사회보험 사업자 부담금, 산재보험금
    *******************************************************************************************/
    BEGIN
          SET NOCOUNT ON
          SET ARITHABORT ON
    
          DECLARE @COMP_CODE         NVARCHAR(10)
                , @COMPANY_CODE      NVARCHAR(08)
    
          SET @COMP_CODE         = #{S_COMP_CODE}
          SET @COMPANY_CODE      = #{COMPANY_CODE}
    
          SELECT 
                 A.EMPLOY_RATE
               , A.BUSI_SHARE_RATE
               , A.WORKER_COMPEN_RATE
               , A.LCI_CALCU_RULE
               , ISNULL(A.MED_PRSN_RATE  , 0) AS MED_PRSN_RATE
            FROM HBS400T AS A WITH(NOLOCK)
           WHERE A.COMP_CODE       = @COMP_CODE
             AND A.COMPANY_CODE    = @COMPANY_CODE
    
          SET NOCOUNT OFF
          SET ARITHABORT OFF
    END
	</select>

	<select id="ham800ukrService.fnAmtCal" parameterType="String" resultType="rMap">
	--ham800ukrService.fnAmtCal[QUERY-01]
	  BEGIN
          SET NOCOUNT ON
          SET ARITHABORT ON
    
          DECLARE @COMP_CODE         NVARCHAR(10)
                , @COMPANY_CODE      NVARCHAR(08)
    
          SET @COMP_CODE         = #{S_COMP_CODE}
          SET @COMPANY_CODE      = '1'
    
          SELECT 
                 A.EMPLOY_RATE
               , A.BUSI_SHARE_RATE
               , A.WORKER_COMPEN_RATE
            FROM HBS400T AS A WITH(NOLOCK)
           WHERE A.COMP_CODE       = @COMP_CODE
             AND A.COMPANY_CODE    = @COMPANY_CODE
    
          SET NOCOUNT OFF
          SET ARITHABORT OFF
    END
	</select>

	<select id="ham800ukrService.fnEndAmtCalc" parameterType="String" resultType="rMap">
		--SELECT unilite.fnEndAmtCalc(#{WAGES_CODE},#{WAGES_AMT},'1', #{S_COMP_CODE}) A
	</select>

	<select id="ham800ukrService.Ham800Qstd4" parameterType="String" resultType="rMap">
		SELECT unilite.fnEndAmtCalc(#{WAGES_AMT}, #{WAGES_TYPE}, #{WAGES_CODE}, #{S_COMP_CODE}) A
	</select>

	<select id="ham800ukrService.fnInSur" parameterType="String" resultType="rMap">
	   --ham800ukrService.fnInSur [QUERY-01] 
	    /*******************************************************************************************
	    	간이세율(일용직 근로소득공제 금액)
	    *******************************************************************************************/
	    BEGIN
	          SET NOCOUNT ON
	          SET ARITHABORT ON
	    
	          DECLARE @COMP_CODE         NVARCHAR(10)
	                , @TAX_YEAR          NVARCHAR(04)
	                , @COMPANY_CODE      NVARCHAR(08)
	    
	          SET @COMP_CODE         = #{S_COMP_CODE}
	          SET @TAX_YEAR          = LEFT(#{PAY_YYYYMM},4)
	          SET @COMPANY_CODE      = '1'
	    
	          SELECT 
	                 A.D_INCOME_DED
	               , A.D_IN_TAX_I
	            FROM HAD200T AS A WITH(NOLOCK)
	           WHERE A.COMP_CODE       = @COMP_CODE
	             AND A.TAX_YEAR        = @TAX_YEAR
	             AND A.COMPANY_CODE    = @COMPANY_CODE
	    
	          SET NOCOUNT OFF
	          SET ARITHABORT OFF
	    END
	</select>

	<select id="ham800ukrService.selectList" parameterType="Map" resultType="rMap">
		<if test="FLAG == &quot;1&quot;">
		 --ham800ukrService.selectList [QUERY-01]
	    /*******************************************************************************************
	        일용직급여등록 조회
	    *******************************************************************************************/
	    BEGIN
	          SET NOCOUNT ON
	          SET ARITHABORT ON
	    
	          SELECT
	                 A.COMP_CODE 
	               , B.DEPT_CODE
	               , B.DEPT_NAME
	               , B.PERSON_NUMB
	               , B.NAME
	               , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR')          AS REPRE_NUM
	               , unilite.fnCipherDecrypt(B.REPRE_NUM, '')            AS REPRE_NUM_EXPOS
	               , B.BANK_CODE1										 AS BANK_CODE
	               , C.CUSTOM_NAME                                       AS BANK_NAME1
	               , '***************'                                   AS BANK_ACCOUNT1
	               , uniLITE.fnCipherDecrypt(B.BANK_ACCOUNT1, 'B')       AS BANK_ACCOUNT1_EXPOS
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.JOIN_DATE) AS JOIN_DATE
	               , CASE WHEN B.RETR_DATE = '00000000'     THEN NULL
	                      WHEN ISNULL(B.RETR_DATE, '') = '' THEN NULL
	                                                        ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, B.RETR_DATE) 
	                  END AS RETR_DATE
	               , A.SUPP_TYPE
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)  AS SUPP_DATE
	               , A.WORK_DAY
	               , A.SUPP_TOTAL_I
	               , A.TAX_EXEMPTION_I
	               , ISNULL(A.SUPP_TOTAL_I,0) + ISNULL(A.TAX_EXEMPTION_I,0) AS PAY_TOTAL_I
	               , ISNULL(A.IN_TAX_I,0)     + ISNULL(A.LOCAL_TAX_I,0) + 
                     ISNULL(A.ANU_INSUR_I,0)  + ISNULL(A.MED_INSUR_I,0) + 
                     ISNULL(A.OLD_MED_INSUR_I,0) +ISNULL(A.HIR_INSUR_I,0)   AS DED_TOTAL_I
	               , A.REAL_AMOUNT_I	               
	               , A.IN_TAX_I
	               , A.LOCAL_TAX_I
	               , A.ANU_INSUR_I
	               , A.MED_INSUR_I
	               , A.OLD_MED_INSUR_I
	               , A.HIR_INSUR_I
	               , A.BUSI_SHARE_I
	               , A.WORKER_COMPEN_I
	               , B.HIRE_INSUR_TYPE
	               , B.WORK_COMPEN_YN
	            FROM            HAM800T AS A WITH(NOLOCK)
	                 INNER JOIN HUM100T AS B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                                     AND B.PERSON_NUMB = A.PERSON_NUMB
	                 LEFT  JOIN BCM100T AS C WITH(NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
	                                                     AND C.CUSTOM_CODE = B.BANK_CODE1
	                                                     AND C.CUSTOM_TYPE = '4'
	           WHERE A.COMP_CODE   	    = #{S_COMP_CODE}
	             <if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM_FR)">
				 AND A.PAY_YYYYMM   &gt;= #{PAY_YYYYMM_FR}
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM_TO)">
				 AND A.PAY_YYYYMM   &lt;= #{PAY_YYYYMM_TO}
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_FR)">
				 AND A.SUPP_DATE    &gt;= #{SUPP_DATE_FR}
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_TO)">
				 AND A.SUPP_DATE    &lt;= #{SUPP_DATE_TO}
				 </if>
	             <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   	 AND B.DEPT_CODE	 IN
					 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
			          		 #{item}
			    	 </foreach>
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
			     AND B.PAY_PROV_FLAG  	= #{PAY_PROV_FLAG}					
			     </if>
			     <if test="@foren.Ognl@isNotEmpty(NAME)">
		    	 AND B.NAME   LIKE + '%' +  #{NAME} + '%'
        		 </if>
        		 <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		    	 AND B.PERSON_NUMB  	= #{PERSON_NUMB}
				 </if>
	    
	          SET NOCOUNT OFF
	          SET ARITHABORT OFF
	    END
	    
		</if>

	    <if test="FLAG == &quot;2&quot;">
	    --ham800ukrService.selectList [QUERY-02]
	    /*******************************************************************************************
	        일용직급여등록 조회 (일별등록참조)
	    *******************************************************************************************/
	    BEGIN
	          SET NOCOUNT ON
	          SET ARITHABORT ON
	    
	          SELECT A.COMP_CODE
	          	   , B.DEPT_CODE							
	               , B.DEPT_NAME                                                                                  --부서
	               , A.PERSON_NUMB                                                                                --사번   
	               , B.NAME                                                                                       --성명
	               , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR')                           AS REPRE_NUM
	               , C.CUSTOM_NAME                                                        AS BANK_NAME1
	               , B.BANK_CODE1														  AS BANK_CODE	               
	               , '***************'                                                    AS BANK_ACCOUNT1
                   , uniLITE.fnCipherDecrypt(B.BANK_ACCOUNT1, 'B')                        AS BANK_ACCOUNT1_EXPOS
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.JOIN_DATE)                  AS JOIN_DATE
	               , CASE WHEN B.RETR_DATE = '00000000'     THEN NULL
	                      WHEN ISNULL(B.RETR_DATE, '') = '' THEN NULL
	                                                        ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, B.RETR_DATE) 
	                 END                                                                  AS RETR_DATE
	               , '1'                                                                  AS SUPP_TYPE
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM)                 AS PAY_YYYYMM
	               , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)                  AS SUPP_DATE
	               , COUNT(A.DUTY_YYYYMMDD)                                               AS WORK_DAY             --근무일수
	               , SUM(SUPP_TOTAL_I)                                                    AS SUPP_TOTAL_I         --과세소득
	               , SUM(ISNULL(TAX_EXEMPTION_I,0))                                       AS TAX_EXEMPTION_I      --비과세소득
	               , SUM(ISNULL(A.SUPP_TOTAL_I,0) + ISNULL(A.TAX_EXEMPTION_I,0))          AS PAY_TOTAL_I          --지급총액
	               , SUM(ISNULL(A.IN_TAX_I,0)     + ISNULL(A.LOCAL_TAX_I,0) + 
                         ISNULL(A.ANU_INSUR_I,0)  + ISNULL(A.MED_INSUR_I,0) + 
                         ISNULL(A.OLD_MED_INSUR_I,0) +ISNULL(A.HIR_INSUR_I,0))            AS DED_TOTAL_I          --공제총액
	               , SUM(ISNULL(A.REAL_AMOUNT_I,0))                                       AS REAL_AMOUNT_I        --실지급액	               
	               , SUM(ISNULL(A.IN_TAX_I,0))                                            AS IN_TAX_I             --소득세
	               , SUM(ISNULL(A.LOCAL_TAX_I,0))                                         AS LOCAL_TAX_I          --주민세	    
	               , SUM(ISNULL(A.ANU_INSUR_I,0))                                         AS ANU_INSUR_I          --국민연금
	               , SUM(ISNULL(A.MED_INSUR_I,0))                                         AS MED_INSUR_I          --건강보험
	               , SUM(ISNULL(A.OLD_MED_INSUR_I,0))                                     AS OLD_MED_INSUR_I      --요양보험
	               , SUM(ISNULL(A.HIR_INSUR_I,0))                                         AS HIR_INSUR_I          --고용보험
	               , SUM(ISNULL(A.BUSI_SHARE_I,0))                                        AS BUSI_SHARE_I
	               , SUM(ISNULL(A.WORKER_COMPEN_I,0))                                     AS WORKER_COMPEN_I
	               , MAX(B.HIRE_INSUR_TYPE)                                               AS HIRE_INSUR_TYPE
	               , MAX(B.WORK_COMPEN_YN)                                                AS WORK_COMPEN_YN
	            FROM            HAM810T AS A WITH(NOLOCK)
	                 INNER JOIN HUM100T AS B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                                     AND B.PERSON_NUMB = A.PERSON_NUMB
	                 LEFT  JOIN BCM100T AS C WITH(NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
	                                                     AND C.CUSTOM_CODE = B.BANK_CODE1
	                                                     AND C.CUSTOM_TYPE = '4'
	           WHERE A.COMP_CODE   	    = #{S_COMP_CODE}
	             <if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM_FR)">
				 AND A.PAY_YYYYMM   &gt;= #{PAY_YYYYMM_FR}
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM_TO)">
				 AND A.PAY_YYYYMM   &lt;= #{PAY_YYYYMM_TO}
				 </if>  
	             
	           GROUP BY A.COMP_CODE, B.DEPT_CODE, B.DEPT_NAME, A.PERSON_NUMB, B.NAME, unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR'), C.CUSTOM_NAME , B.BANK_CODE1
	                  , uniLITE.fnCipherDecrypt(B.BANK_ACCOUNT1, 'B'), B.JOIN_DATE, B.RETR_DATE, A.PAY_YYYYMM, A.SUPP_DATE
	
	    
	          SET NOCOUNT OFF
	          SET ARITHABORT OFF
	    END
	    </if>
	</select>

	<select id="ham800ukrService.Ham800Qstd5" parameterType="Map" resultType="rMap">
        --ham800ukrService.Ham800Qstd5 [QUERY-01] 
	    /*******************************************************************************************
	    	건강보험요율, 장기노인요양보험율
	    *******************************************************************************************/
	    BEGIN  
			SELECT STD_STRT_AMOUNT_I               
				 , STD_END_AMOUNT_I                
				 , INSUR_RATE                      
				 , INSUR_RATE1                                
			  FROM HAD300T                         
			 WHERE COMP_CODE             =  #{S_COMP_CODE}
			   AND BASE_YEAR             =  LEFT(#{PAY_YYYYMM},4)
			   AND STD_STRT_AMOUNT_I &lt;= #{STD_AMOUNT_1}
			   AND STD_END_AMOUNT_I  &gt;= #{STD_AMOUNT_1}
	           AND INSUR_TYPE            = '2' 
			ORDER BY INSUR_SEQ 
	    END
	</select>




	<select id="ham800ukrService.fnPrintData" parameterType="Map" resultType="rMap">
		/* ham800ukrService.fnPrintData */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @COMP_CODE         NVARCHAR(10)
		          , @FR_PAY_YYYYMM     NVARCHAR(06)
		          , @TO_PAY_YYYYMM     NVARCHAR(06)
		          , @FR_SUPP_DATE      NVARCHAR(08)
		          , @TO_SUPP_DATE      NVARCHAR(08)
		          , @PAY_PROV_FLAG     NVARCHAR(10)
		          , @NAME              NVARCHAR(30)
		          , @PERSON_NUMB       NVARCHAR(30)

		    SET @COMP_CODE         = #{S_COMP_CODE}
		    SET @FR_PAY_YYYYMM     = #{PAY_YYYYMM_FR}
		    SET @TO_PAY_YYYYMM     = #{PAY_YYYYMM_TO}
		    SET @FR_SUPP_DATE      = #{SUPP_DATE_FR}
		    SET @TO_SUPP_DATE      = #{SUPP_DATE_TO}
		    SET @PAY_PROV_FLAG     = #{PAY_PROV_FLAG}
		    SET @NAME              = #{NAME}
		    SET @PERSON_NUMB       = #{PERSON_NUMB}

<!-- 일용근로지급명세서 -->
		<if test="PRINT_GUBUN == &quot;1&quot;">
		    SELECT A.COMP_CODE 
		         , B.DEPT_NAME
		         , B.PERSON_NUMB
		         , B.NAME
		         , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR')           AS REPRE_NUM
		         , C.CUSTOM_NAME                                        AS BANK_NAME1
		         , uniLITE.fnCipherDecrypt(B.BANK_ACCOUNT1, '')         AS BANK_ACCOUNT1
		         , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.JOIN_DATE)  AS JOIN_DATE
		         , CASE WHEN B.RETR_DATE = '00000000'     THEN NULL
		                WHEN ISNULL(B.RETR_DATE, '') = '' THEN NULL
		                                                  ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, B.RETR_DATE) 
		            END                                                 AS RETR_DATE
		         , A.SUPP_TYPE
		         , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
		         , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)  AS SUPP_DATE
		         , A.WORK_DAY
		         , A.SUPP_TOTAL_I
		         , A.REAL_AMOUNT_I
		         , A.TAX_EXEMPTION_I
		         , A.IN_TAX_I
		         , A.LOCAL_TAX_I
		         , A.ANU_INSUR_I
		         , A.MED_INSUR_I
		         , A.HIR_INSUR_I
		         , A.BUSI_SHARE_I
		         , A.WORKER_COMPEN_I
		         , B.HIRE_INSUR_TYPE
		         , B.WORK_COMPEN_YN
		         , D.COMP_NAME
		         , GETDATE()                                            AS PRINT_DATE
		      FROM            HAM800T AS A WITH(NOLOCK)
		           INNER JOIN HUM100T AS B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                               AND B.PERSON_NUMB = A.PERSON_NUMB
		           LEFT  JOIN BCM100T AS C WITH(NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
		                                               AND C.CUSTOM_CODE = B.BANK_CODE1
		                                               AND C.CUSTOM_TYPE = '4'
		           LEFT  JOIN BOR100T AS D WITH(NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
		     WHERE A.COMP_CODE       = @COMP_CODE
		       AND A.PAY_YYYYMM     &gt;= @FR_PAY_YYYYMM
		       AND A.PAY_YYYYMM     &lt;= @TO_PAY_YYYYMM
		    <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_FR)">
		       AND A.SUPP_DATE      &gt;= @FR_SUPP_DATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_TO)">
		       AND A.SUPP_DATE      &lt;= @TO_SUPP_DATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DEPTS)">
		       AND B.DEPT_CODE IN
		          <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		            #{item}
		          </foreach>
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
		       AND B.PAY_PROV_FLAG = @PAY_PROV_FLAG
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(NAME)">
		       AND B.NAME            = @NAME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		       AND B.PERSON_NUMB     = @PERSON_NUMB
		    </if>
		</if>

<!-- 일용근로소득집계표 -->
		<if test="PRINT_GUBUN == &quot;2&quot;">
		    SELECT A.COMP_CODE 
		         , uniLITE.fnGetUserDateComp(A.COMP_CODE, @FR_PAY_YYYYMM + '01') + ' ~ ' + uniLITE.fnGetUserDateComp(A.COMP_CODE, CONVERT(NVARCHAR(10), DATEADD(MONTH, 1, @TO_PAY_YYYYMM + '01') - DAY(@TO_PAY_YYYYMM + '01'), 23)) AS QUERY_DATE
		         , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)  AS SUPP_DATE
		         , SUM(A.SUPP_TOTAL_I)                                  AS SUPP_TOTAL_I
		         , SUM(A.REAL_AMOUNT_I)                                 AS REAL_AMOUNT_I
		         , SUM(A.IN_TAX_I)                                      AS IN_TAX_I
		         , SUM(A.LOCAL_TAX_I)                                   AS LOCAL_TAX_I
		         , D.COMP_NAME
		         , GETDATE()                                            AS PRINT_DATE
		      FROM            HAM800T AS A WITH(NOLOCK)
		           LEFT  JOIN BOR100T AS D WITH(NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
		     WHERE A.COMP_CODE       = @COMP_CODE
		       AND A.PAY_YYYYMM     &gt;= @FR_PAY_YYYYMM
		       AND A.PAY_YYYYMM     &lt;= @TO_PAY_YYYYMM
		    <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_FR)">
		       AND A.SUPP_DATE      &gt;= @FR_SUPP_DATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_TO)">
		       AND A.SUPP_DATE      &lt;= @TO_SUPP_DATE
		    </if>
		     GROUP BY A.COMP_CODE, A.SUPP_DATE, D.COMP_NAME

		    UNION ALL

		    SELECT Z.COMP_CODE
		         , uniLITE.fnGetUserDateComp(Z.COMP_CODE, @FR_PAY_YYYYMM + '01') + ' ~ ' + uniLITE.fnGetUserDateComp(Z.COMP_CODE, CONVERT(NVARCHAR(10), DATEADD(MONTH, 1, @TO_PAY_YYYYMM + '01') - DAY(@TO_PAY_YYYYMM + '01'), 23)) AS QUERY_DATE
		         , '합    계'                                               AS SUPP_DATE
		         , SUM(Z.SUPP_TOTAL_I)                                  AS SUPP_TOTAL_I
		         , SUM(Z.REAL_AMOUNT_I)                                 AS REAL_AMOUNT_I
		         , SUM(Z.IN_TAX_I)                                      AS IN_TAX_I
		         , SUM(Z.LOCAL_TAX_I)                                   AS LOCAL_TAX_I
		         , D.COMP_NAME
		         , GETDATE()                                            AS PRINT_DATE
		      FROM (
		             SELECT A.COMP_CODE 
		                  , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)  AS SUPP_DATE
		                  , SUM(A.SUPP_TOTAL_I)                                  AS SUPP_TOTAL_I
		                  , SUM(A.REAL_AMOUNT_I)                                 AS REAL_AMOUNT_I
		                  , SUM(A.IN_TAX_I)                                      AS IN_TAX_I
		                  , SUM(A.LOCAL_TAX_I)                                   AS LOCAL_TAX_I
		               FROM HAM800T AS A WITH(NOLOCK)
		              WHERE A.COMP_CODE       = @COMP_CODE
		                AND A.PAY_YYYYMM     &gt;= @FR_PAY_YYYYMM
		                AND A.PAY_YYYYMM     &lt;= @TO_PAY_YYYYMM
		             <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_FR)">
		                AND A.SUPP_DATE      &gt;= @FR_SUPP_DATE
		             </if>
		             <if test="@foren.Ognl@isNotEmpty(SUPP_DATE_TO)">
		                AND A.SUPP_DATE      &lt;= @TO_SUPP_DATE
		             </if>
		              GROUP BY A.COMP_CODE, A.SUPP_DATE
		      ) Z
		           LEFT  JOIN BOR100T AS D WITH(NOLOCK) ON D.COMP_CODE   = Z.COMP_CODE
		      GROUP BY Z.COMP_CODE, D.COMP_NAME
		</if>

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
</mapper>