<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ham850ukrServiceImpl">	
	
	<select id="ham850ukrServiceImpl.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>
	
	
	<select id="ham850ukrServiceImpl.selectList" parameterType="rMap" resultType="rMap">
		SELECT '' AS N_GUBUN
			     , M1.NAME
			     , A.PERSON_NUMB
			     , unilite.fnCipherDecrypt(M1.REPRE_NUM, 'RR')                        AS REPRE_NUM 
			     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},M1.JOIN_DATE)       AS JOIN_DATE  
			     , (CASE WHEN M1.RETR_DATE != '00000000'
			                  THEN uniLITE.fnGetUserDateComp(#{S_COMP_CODE},M1.RETR_DATE) 
			                  ELSE ''                                                                
			         END)                                                             AS RETR_DATE                                                               
			     , A.QUARTER_TYPE                                                                    
			     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},A.PAY_YYYYMM)           AS PAY_YYYYMM
			     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE}, LEFT(A.SUPP_YYYYMM,6)) AS SUPP_YYYYMM                                                                        
			     , A.WORK_MM          
			     , A.WORK_DAY
			     , A.SUPP_TOTAL_I
			     , A.TAX_EXEMPTION_I 
			     , A.IN_TAX_I
			     , A.LOCAL_TAX_I 
			     , A.PAY_YYYY                                                              
			     , A.SUPP_TOTAL_I                                                     AS P_SUPP_TOTAL_I                                           
			     , A.TAX_EXEMPTION_I                                                  AS P_TAX_EXEMPTION_I                                     
			     , A.IN_TAX_I                                                         AS P_IN_TAX_I                                                   
			     , A.LOCAL_TAX_I                                                      AS P_LOCAL_TAX_I                                             
			     , A.INSERT_DB_USER
			     , A.INSERT_DB_TIME
			  FROM HAM800T A WITH (NOLOCK)
			               INNER JOIN HUM100T M1 WITH (NOLOCK)
			                       ON A.COMP_CODE   = M1.COMP_CODE
			                      AND A.PERSON_NUMB = M1.PERSON_NUMB
			 WHERE A.COMP_CODE    = #{S_COMP_CODE}
			   AND A.PAY_YYYY     = #{PAY_YYYY}                 
			   AND A.QUARTER_TYPE = #{QUARTER_TYPE}
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
               AND A.PERSON_NUMB  = #{PERSON_NUMB}
            </if>
            
			 UNION ALL
			SELECT 'N'                                                                        AS N_GUBUN
			     , A.NAME
			     , A.PERSON_NUMB
			     , uniLITE.fnFormatData(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 'RR')       AS REPRE_NUM
			     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},A.JOIN_DATE)                AS JOIN_DATE 
			     , (CASE WHEN A.RETR_DATE != '00000000'
			                  THEN uniLITE.fnGetUserDateComp(#{S_COMP_CODE},A.RETR_DATE)
			                  ELSE ''
			         END)                                                                     AS RETR_DATE
			     , #{QUARTER_TYPE}                                                       AS QUARTER_TYPE
			     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE}, M1.PAY_YYYYMM)                 AS PAY_YYYYMM
			     , LEFT(uniLITE.fnGetUserDateComp(#{S_COMP_CODE}, LEFT(M1.SUPP_DATE,6)), 7) AS SUPP_YYYYMM
			     , SUBSTRING(M1.PAY_YYYYMM, 5,2)                                              AS WORK_MM 
			     , SUM(ISNULL(M4.WORK_DAY, 0) - (ISNULL(M4.SUN_DAY, 0) + 
			           ISNULL(M4.SAT_DAY, 0)  + ISNULL(M4.NON_WEEK_DAY, 0)) + 
			           ISNULL(M4.WEEK_GIVE, 0))                                               AS WORK_DAY
			     , SUM(M1.SUPP_TOTAL_I)                                                       AS SUPP_TOTAL_I
			     , SUM(M1.TAX_EXEMPTION1_I + TAX_EXEMPTION2_I + TAX_EXEMPTION3_I + 
			              TAX_EXEMPTION4_I + TAX_EXEMPTION5_I + TAX_EXEMPTION6_I)             AS TAX_EXEMPTION_I
			     , SUM(M2.DED_AMOUNT_I)                                                       AS IN_TAX_I 
			     , SUM(M3.DED_AMOUNT_I)                                                       AS LOCAL_TAX_I
			     , #{PAY_YYYY}                                                         AS PAY_YYYY 
			     , SUM(M1.SUPP_TOTAL_I)                                                       AS P_SUPP_TOTAL_I 
			     , SUM(M1.TAX_EXEMPTION1_I + TAX_EXEMPTION2_I + TAX_EXEMPTION3_I + 
			              TAX_EXEMPTION4_I + TAX_EXEMPTION5_I + TAX_EXEMPTION6_I)             AS P_TAX_EXEMPTION_I
			     , SUM(M2.DED_AMOUNT_I)                                                       AS P_IN_TAX_I 
			     , SUM(M3.DED_AMOUNT_I)                                                       AS P_LOCAL_TAX_I
			     , ''                                                                         AS INSERT_DB_USER
			     , ''                                                                         AS INSERT_DB_TIME
			  FROM HUM100T A WITH (NOLOCK)
			               INNER JOIN HPA600T M1 WITH (NOLOCK)
			                       ON A.COMP_CODE   = M1.COMP_CODE
			                      AND A.PERSON_NUMB = M1.PERSON_NUMB
			               INNER JOIN (SELECT SUM(S1.DED_AMOUNT_I) AS DED_AMOUNT_I
			                                , S1.PAY_YYYYMM
			                                , S1.PERSON_NUMB
			                                , SUBSTRING(S2.SUPP_DATE,1, 6)AS SUPP_DATE
			                                , S1.COMP_CODE
			                                , S1.SUPP_TYPE
			                             FROM HPA400T S1 WITH (NOLOCK) INNER JOIN HPA600T S2 WITH (NOLOCK)
			                                                ON S1.COMP_CODE   = S2.COMP_CODE
			                                               AND S1.PAY_YYYYMM  = S2.PAY_YYYYMM
			                                               AND S1.PERSON_NUMB = S2.PERSON_NUMB   
			                                               AND S1.SUPP_TYPE   = S2.SUPP_TYPE
			                             WHERE S2.COMP_CODE          = #{S_COMP_CODE} 
			                               AND LEFT(S2.PAY_YYYYMM,4) = #{PAY_YYYY}
			                               <!--12월귀속일경우에는 지급일 관계 없이 당해년도 4분기 귀속분으로 함 -->
							            <choose>
								            <when test='SUPP_DATE_TO.equals("12")'>            
								                AND ((LEFT(S2.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}) OR
								                      (LEFT(S2.PAY_YYYYMM,6) =  #{SUPP_DATE_TO} AND LEFT(S2.SUPP_DATE, 6) &gt; #{SUPP_DATE_TO} ))
								            </when>
								            <otherwise>
								                AND LEFT(S2.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}
								            </otherwise>
							            </choose>
			                               
			                               AND S2.PAY_GUBUN          = '2'                                                      
			                               AND DED_CODE              = 'INC'
			                             GROUP BY S1.PAY_YYYYMM, S1.PERSON_NUMB, SUBSTRING(S2.SUPP_DATE,1, 6), S1.COMP_CODE, S1.SUPP_TYPE ) AS M2 
			                       ON M1.COMP_CODE                  = M2.COMP_CODE
			                      AND M1.PAY_YYYYMM                 = M2.PAY_YYYYMM
			                      AND M1.PERSON_NUMB                = M2.PERSON_NUMB
			                      AND SUBSTRING(M1.SUPP_DATE, 1, 6) = M2.SUPP_DATE
			                      AND M1.SUPP_TYPE                  = M2.SUPP_TYPE  
			               INNER JOIN (SELECT SUM(S1.DED_AMOUNT_I)        AS DED_AMOUNT_I
			                                , S1.PAY_YYYYMM
			                                , S1.PERSON_NUMB
			                                , SUBSTRING(S2.SUPP_DATE,1, 6)AS SUPP_DATE
			                                , S1.COMP_CODE
			                                , S1.SUPP_TYPE
			                             FROM HPA400T S1 WITH (NOLOCK) INNER JOIN HPA600T S2 WITH (NOLOCK)
			                                                ON S1.COMP_CODE   = S2.COMP_CODE
			                                               AND S1.PAY_YYYYMM  = S2.PAY_YYYYMM
			                                               AND S1.PERSON_NUMB = S2.PERSON_NUMB
			                                               AND S1.SUPP_TYPE   = S2.SUPP_TYPE 
			                             WHERE S2.COMP_CODE          = #{S_COMP_CODE}     
			                               AND LEFT(S2.PAY_YYYYMM,4) = #{PAY_YYYY}
			                               <choose>            
								            <when test='SUPP_DATE_TO.equals("12")'>
							                    AND ((LEFT(S2.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}) OR
							                          (LEFT(S2.PAY_YYYYMM,6) =  #{SUPP_DATE_TO} AND LEFT(S2.SUPP_DATE, 6) &gt; #{SUPP_DATE_TO} ))
								            </when>
								            <otherwise>
							                          AND LEFT(S2.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}
								            </otherwise>
								         </choose>
			                               AND S2.PAY_GUBUN          = '2'                                                      
			                               AND DED_CODE              = 'LOC'
			                             GROUP BY S1.PAY_YYYYMM, S1.PERSON_NUMB, SUBSTRING(S2.SUPP_DATE,1, 6), S1.COMP_CODE, S1.SUPP_TYPE ) AS M3 
			                       ON M1.COMP_CODE                  = M3.COMP_CODE
			                      AND M1.PAY_YYYYMM                 = M3.PAY_YYYYMM
			                      AND M1.PERSON_NUMB                = M3.PERSON_NUMB
			                      AND SUBSTRING(M1.SUPP_DATE, 1, 6) = M3.SUPP_DATE
			                      AND M1.SUPP_TYPE                  = M3.SUPP_TYPE               
			               LEFT OUTER JOIN HAT300T M4 WITH (NOLOCK)
			                       ON M1.COMP_CODE                  = M4.COMP_CODE
			                      AND M1.PAY_YYYYMM                 = M4.DUTY_YYYYMM                    
			                      AND M1.PERSON_NUMB                = M4.PERSON_NUMB
			 WHERE A.COMP_CODE = #{S_COMP_CODE}
			   AND A.PAY_GUBUN2 = '1'
			   AND M1.PERSON_NUMB + M1.PAY_YYYYMM NOT IN (SELECT PERSON_NUMB + PAY_YYYYMM                
			                               FROM HAM800T WITH (NOLOCK)                                             
			                              WHERE COMP_CODE     = #{S_COMP_CODE}                 
			                                AND PAY_YYYY      = #{PAY_YYYY}                 
			                                AND QUARTER_TYPE  = #{QUARTER_TYPE}
			                         <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
                                            AND A.PERSON_NUMB = #{PERSON_NUMB}
            						</if>                 
			                                                                        )                
			   AND M1.PAY_GUBUN   = '2'   
			                               
			 <choose>
	            <when test='SUPP_DATE_TO.equals("12")'>
                                               AND ((LEFT(M1.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}) OR
                                                    (LEFT(M1.PAY_YYYYMM,6) =  #{SUPP_DATE_TO} AND LEFT(M1.SUPP_DATE, 6) &gt; #{SUPP_DATE_TO} ))
	            </when>
	            <otherwise>
                                               AND LEFT(M1.SUPP_DATE,6) BETWEEN #{SUPP_DATE_FR} AND #{SUPP_DATE_TO}
	            </otherwise>
            </choose>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
                AND A.PERSON_NUMB = #{PERSON_NUMB}
            </if>
			 GROUP BY A.NAME, A.PERSON_NUMB, uniLITE.fnFormatData(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 'RR'), A.JOIN_DATE, A.RETR_DATE, M1.PAY_YYYYMM
			        , LEFT(M1.SUPP_DATE, 6), SUBSTRING(M1.PAY_YYYYMM, 5,2), M1.SUPP_DATE
			 ORDER BY M1.NAME, A.PERSON_NUMB, PAY_YYYYMM, SUPP_YYYYMM
             
	</select>
	
	<update id="ham850ukrServiceImpl.update1" parameterType="rMap">
		<!--UHam01Krv.CHam850Ukr[fnHam850nSet] HAM900T DELETE -->
		DECLARE @TOT_SUPP_I AS NUMERIC(18,0)
		DECLARE @COMP_CODE AS NVARCHAR(8)
		DECLARE @PAY_YYYY AS NVARCHAR(4)
		DECLARE @QUARTER_TYPE AS NVARCHAR(2)
		DECLARE @PERSON_NUMB AS NVARCHAR(10)
		DECLARE @WORK_DAY AS NUMERIC(18,4)
		DECLARE @SUPP_TOTAL_I AS NUMERIC(18,0)
		DECLARE @P_SUPP_TOTAL_I AS NUMERIC(18,0)
		DECLARE @TAX_EXEMPTION_I AS NUMERIC(18,0)
		DECLARE @P_TAX_EXEMPTION_I AS NUMERIC(18,0)
		DECLARE @IN_TAX_I AS NUMERIC(18,0)
		DECLARE @P_IN_TAX_I AS NUMERIC(18,0)
		DECLARE @LOCAL_TAX_I AS NUMERIC(18,0)
		DECLARE @P_LOCAL_TAX_I AS NUMERIC(18,0)
		DECLARE @UPDATE_DB_USER AS NVARCHAR(20)
		
		SET @COMP_CODE       = #{S_COMP_CODE}
		SET @UPDATE_DB_USER  = #{S_USER_ID}
		<if test="@foren.Ognl@isNotEmpty(TOT_SUPP_I)">
		SET @TOT_SUPP_I    = ${TOT_SUPP_I}
		</if>
		<if test="@foren.Ognl@isEmpty(TOT_SUPP_I)">
		SET @TOT_SUPP_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(PAY_YYYY)">
		SET @PAY_YYYY        = #{PAY_YYYY}
		</if>
		<if test="@foren.Ognl@isEmpty(PAY_YYYY)">
		SET @PAY_YYYY      = ''
		</if>				
		
		<if test="@foren.Ognl@isNotEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE    = #{QUARTER_TYPE}
		</if>
		<if test="@foren.Ognl@isEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE      = ''
		</if>
						
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB     = #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(WORK_DAY)">
		SET @WORK_DAY        = ${WORK_DAY}
		</if>
		<if test="@foren.Ognl@isEmpty(WORK_DAY)">
		SET @WORK_DAY      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I    = ${SUPP_TOTAL_I}
		</if>
		<if test="@foren.Ognl@isEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I      = 0
		</if>		
		<if test="@foren.Ognl@isNotEmpty(P_SUPP_TOTAL_I)">
		SET @P_SUPP_TOTAL_I    = ${P_SUPP_TOTAL_I}
		</if>
		<if test="@foren.Ognl@isEmpty(P_SUPP_TOTAL_I)">
		SET @P_SUPP_TOTAL_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I = ${TAX_EXEMPTION_I}
		</if>
		<if test="@foren.Ognl@isEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I      = 0
		</if>		
		<if test="@foren.Ognl@isNotEmpty(P_TAX_EXEMPTION_I)">
		SET @P_TAX_EXEMPTION_I = ${P_TAX_EXEMPTION_I}
		</if>
		<if test="@foren.Ognl@isEmpty(P_TAX_EXEMPTION_I)">
		SET @P_TAX_EXEMPTION_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
		SET @IN_TAX_I        = ${IN_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(IN_TAX_I)">
		SET @IN_TAX_I      = 0
		</if>
		<if test="@foren.Ognl@isNotEmpty(P_IN_TAX_I)">
		SET @P_IN_TAX_I        = ${P_IN_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(P_IN_TAX_I)">
		SET @P_IN_TAX_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I     = ${LOCAL_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I      = 0
		</if>
		<if test="@foren.Ognl@isNotEmpty(P_LOCAL_TAX_I)">
		SET @P_LOCAL_TAX_I     = ${P_LOCAL_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(P_LOCAL_TAX_I)">
		SET @P_LOCAL_TAX_I      = 0
		</if>
		
		IF EXISTS(SELECT PERSON_NUMB FROM HAM900T WITH (NOLOCK)
		                 WHERE COMP_CODE = @COMP_CODE
		                   AND PAY_YYYY  = @PAY_YYYY
		                   AND QUARTER_TYPE = @QUARTER_TYPE
		                   AND PERSON_NUMB  = @PERSON_NUMB)
		    BEGIN
		        SELECT @TOT_SUPP_I = TOTAL_AMOUNT_I
		          FROM HAM900T WITH (NOLOCK)
		         WHERE COMP_CODE = @COMP_CODE
		           AND PAY_YYYY  = @PAY_YYYY
		           AND QUARTER_TYPE = @QUARTER_TYPE
		           AND PERSON_NUMB  = @PERSON_NUMB
		         
		        IF (@TOT_SUPP_I = @P_SUPP_TOTAL_I)
		            BEGIN
		                DELETE FROM HAM900T
		                 WHERE COMP_CODE = @COMP_CODE
		                   AND PAY_YYYY  = @PAY_YYYY
		                   AND QUARTER_TYPE = @QUARTER_TYPE
		                   AND PERSON_NUMB  = @PERSON_NUMB
		            END
		        ELSE
		            BEGIN
		                UPDATE A SET WORK_DAYS = WORK_DAYS - @WORK_DAY
		                           , TOTAL_AMOUNT_I = TOTAL_AMOUNT_I - @P_SUPP_TOTAL_I
		                           , TAX_EXEMPTION_I = TAX_EXEMPTION_I - @P_TAX_EXEMPTION_I
		                           , IN_TAX_I = IN_TAX_I - @P_IN_TAX_I
		                           , LOCAL_TAX_I = @P_LOCAL_TAX_I
		                           , UPDATE_DB_USER = @UPDATE_DB_USER
		                           , UPDATE_DB_TIME = GETDATE()
		                  FROM HAM900T A
		                 WHERE COMP_CODE = @COMP_CODE
		                   AND PAY_YYYY  = @PAY_YYYY
		                   AND QUARTER_TYPE = @QUARTER_TYPE
		                   AND PERSON_NUMB  = @PERSON_NUMB
		            
		            END 
		    END
	</update>
	
	<update id="ham850ukrServiceImpl.update2" parameterType="rMap">
		<!--UHam01Krv.CHam850Ukr[fnHam850nSet] HAM800T INSERT, UPDATE -->
		DECLARE @COMP_CODE       AS NVARCHAR(8)
		DECLARE @PAY_YYYYMM      AS NVARCHAR(6)
		DECLARE @PERSON_NUMB     AS NVARCHAR(10)
		DECLARE @PAY_YYYY        AS NVARCHAR(4)
		DECLARE @QUARTER_TYPE    AS NVARCHAR(2)
		DECLARE @SUPP_YYYYMM     AS NVARCHAR(6)
		DECLARE @WORK_MM         AS NVARCHAR(02)
		DECLARE @WORK_DAY        AS NUMERIC(18,4)
		DECLARE @SUPP_TOTAL_I    AS NUMERIC(18,0)
		DECLARE @TAX_EXEMPTION_I AS NUMERIC(18,0)
		DECLARE @IN_TAX_I        AS NUMERIC(18,0)
		DECLARE @LOCAL_TAX_I     AS NUMERIC(18,0)
		DECLARE @UPDATE_DB_USER  AS NVARCHAR(20)
		
		SET @COMP_CODE       = #{S_COMP_CODE}
		SET @UPDATE_DB_USER  = #{S_USER_ID}
		<if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM)">
		SET @PAY_YYYYMM      = #{PAY_YYYYMM}
		</if>
		<if test="@foren.Ognl@isEmpty(PAY_YYYYMM)">
		SET @PAY_YYYYMM      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB     = #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(PAY_YYYY)">
		SET @PAY_YYYY        = #{PAY_YYYY}
		</if>
		<if test="@foren.Ognl@isEmpty(PAY_YYYY)">
		SET @PAY_YYYY      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE    = #{QUARTER_TYPE}
		</if>
		<if test="@foren.Ognl@isEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(SUPP_YYYYMM)">
		SET @SUPP_YYYYMM     = #{SUPP_YYYYMM}
		</if>
		<if test="@foren.Ognl@isEmpty(SUPP_YYYYMM)">
		SET @SUPP_YYYYMM      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(WORK_MM)">
		SET @WORK_MM         = #{WORK_MM}
		</if>
		<if test="@foren.Ognl@isEmpty(WORK_MM)">
		SET @WORK_MM      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(WORK_DAY)">
		SET @WORK_DAY        = ${WORK_DAY}
		</if>
		<if test="@foren.Ognl@isEmpty(WORK_DAY)">
		SET @WORK_DAY      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I    = ${SUPP_TOTAL_I}
		</if>
		<if test="@foren.Ognl@isEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I = ${TAX_EXEMPTION_I}
		</if>
		<if test="@foren.Ognl@isEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
		SET @IN_TAX_I        = ${IN_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(IN_TAX_I)">
		SET @IN_TAX_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I     = ${LOCAL_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I      = 0
		</if>		
		
		IF EXISTS(SELECT PERSON_NUMB 
		            FROM HAM800T WITH (NOLOCK)
		           WHERE COMP_CODE   = @COMP_CODE
		             AND PAY_YYYYMM  = @PAY_YYYYMM
		             AND PERSON_NUMB = @PERSON_NUMB)
		    BEGIN
		        UPDATE A 
		           SET A.PAY_YYYYMM      = @PAY_YYYYMM
		             , A.PAY_YYYY        = @PAY_YYYY
		             , A.QUARTER_TYPE    = @QUARTER_TYPE
		             , A.SUPP_YYYYMM     = @SUPP_YYYYMM
		             , A.SUPP_DATE       = B.SUPP_DATE
		             , A.WORK_MM         = @WORK_MM
		             , A.WORK_DAY        = @WORK_DAY
		             , A.SUPP_TOTAL_I    = @SUPP_TOTAL_I
		             , A.REAL_AMOUNT_I   = @SUPP_TOTAL_I - @IN_TAX_I - @LOCAL_TAX_I
		             , A.TAX_EXEMPTION_I = TAX_EXEMPTION_I 
		             , A.IN_TAX_I        = @IN_TAX_I
		             , A.LOCAL_TAX_I     = @LOCAL_TAX_I
		             , A.UPDATE_DB_USER  = @UPDATE_DB_USER
		             , A.UPDATE_DB_TIME  = GETDATE()
		          FROM           HAM800T AS A 
		               LEFT JOIN HPA600T AS B  ON B.COMP_CODE   = A.COMP_CODE
		                                      AND B.PAY_YYYYMM  = A.PAY_YYYYMM
		                                      AND B.PERSON_NUMB = A.PERSON_NUMB
		                                      AND B.SUPP_TYPE   = '1'
		         WHERE A.COMP_CODE    = @COMP_CODE
		           AND A.PAY_YYYYMM   = @PAY_YYYYMM
		           AND A.PERSON_NUMB  = @PERSON_NUMB
		    END
		ELSE
		    BEGIN
		        INSERT INTO HAM800T
		        (  COMP_CODE
		         , PAY_YYYYMM   
		         , PERSON_NUMB  
		         , PAY_YYYY       
		         , QUARTER_TYPE   
		         , SUPP_YYYYMM    
		         , SUPP_DATE      
		         , WORK_MM        
		         , WORK_DAY       
		         , SUPP_TOTAL_I   
		         , REAL_AMOUNT_I  
		         , TAX_EXEMPTION_I
		         , IN_TAX_I       
		         , LOCAL_TAX_I
		         , INSERT_DB_USER 
		         , INSERT_DB_TIME 
		         , UPDATE_DB_USER 
		         , UPDATE_DB_TIME )
		        SELECT @COMP_CODE 
		             , @PAY_YYYYMM 
		             , @PERSON_NUMB
		             , @PAY_YYYY
		             , @QUARTER_TYPE 
		             , @SUPP_YYYYMM 
		             , M.SUPP_DATE
		             , @WORK_MM
		             , @WORK_DAY
		             , @SUPP_TOTAL_I
		             , @SUPP_TOTAL_I - @IN_TAX_I - @LOCAL_TAX_I
		             , @TAX_EXEMPTION_I
		             , @IN_TAX_I
		             , @LOCAL_TAX_I
		             , @UPDATE_DB_USER AS INSERT_DB_USER
		             , GETDATE()       AS INSERT_DB_TIME
		             , @UPDATE_DB_USER AS UPDATE_DB_USER
		             , GETDATE()       AS UPDATE_DB_TIME
		          FROM HPA600T M WITH (NOLOCK)
		         WHERE M.COMP_CODE    = @COMP_CODE
		           AND M.PERSON_NUMB  = @PERSON_NUMB
		           AND M.PAY_YYYYMM   = @PAY_YYYYMM
		           AND M.SUPP_TYPE    = '1'
		       END
	
	</update>
	
	<update id="ham850ukrServiceImpl.update3" parameterType="rMap">
		<!--UHam01Krv.CHam850Ukr[fnHam850nSet] HAM900T INSERT, UPDATE -->
		DECLARE @TOT_SUPP_I AS NUMERIC(18,0)
		DECLARE @COMP_CODE AS NVARCHAR(8)
		DECLARE @PAY_YYYY AS NVARCHAR(4)
		DECLARE @PAY_YYYYMM AS NVARCHAR(06)
		DECLARE @QUARTER_TYPE AS NVARCHAR(2)
		DECLARE @PERSON_NUMB AS NVARCHAR(10)
		DECLARE @WORK_DAY AS NUMERIC(18,4)
		DECLARE @SUPP_TOTAL_I AS NUMERIC(18,0)
		DECLARE @TAX_EXEMPTION_I AS NUMERIC(18,0)
		DECLARE @IN_TAX_I AS NUMERIC(18,0)
		DECLARE @LOCAL_TAX_I AS NUMERIC(18,0)
		DECLARE @UPDATE_DB_USER AS NVARCHAR(20)
		
		SET @COMP_CODE = #{S_COMP_CODE}
		SET @UPDATE_DB_USER = #{S_USER_ID}
		<if test="@foren.Ognl@isNotEmpty(TOT_SUPP_I)">
		SET @TOT_SUPP_I    = ${TOT_SUPP_I}
		</if>
		<if test="@foren.Ognl@isEmpty(TOT_SUPP_I)">
		SET @TOT_SUPP_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(PAY_YYYYMM)">
        SET @PAY_YYYYMM        = #{PAY_YYYYMM}
        </if>
        <if test="@foren.Ognl@isEmpty(PAY_YYYYMM)">
        SET @PAY_YYYYMM      = ''
        </if>       
        
		<if test="@foren.Ognl@isNotEmpty(PAY_YYYY)">
		SET @PAY_YYYY        = #{PAY_YYYY}
		</if>
		<if test="@foren.Ognl@isEmpty(PAY_YYYY)">
		SET @PAY_YYYY      = ''
		</if>				
		
		<if test="@foren.Ognl@isNotEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE    = #{QUARTER_TYPE}
		</if>
		<if test="@foren.Ognl@isEmpty(QUARTER_TYPE)">
		SET @QUARTER_TYPE      = ''
		</if>
						
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB     = #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isEmpty(PERSON_NUMB)">
		SET @PERSON_NUMB      = ''
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(WORK_DAY)">
		SET @WORK_DAY        = ${WORK_DAY}
		</if>
		<if test="@foren.Ognl@isEmpty(WORK_DAY)">
		SET @WORK_DAY      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I    = ${SUPP_TOTAL_I}
		</if>
		<if test="@foren.Ognl@isEmpty(SUPP_TOTAL_I)">
		SET @SUPP_TOTAL_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I = ${TAX_EXEMPTION_I}
		</if>
		<if test="@foren.Ognl@isEmpty(TAX_EXEMPTION_I)">
		SET @TAX_EXEMPTION_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
		SET @IN_TAX_I        = ${IN_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(IN_TAX_I)">
		SET @IN_TAX_I      = 0
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I     = ${LOCAL_TAX_I}
		</if>
		<if test="@foren.Ognl@isEmpty(LOCAL_TAX_I)">
		SET @LOCAL_TAX_I      = 0
		</if>	
		
		
		IF EXISTS(SELECT PERSON_NUMB FROM HAM900T WITH (NOLOCK)
		                 WHERE COMP_CODE = @COMP_CODE
		                   AND PAY_YYYY  = @PAY_YYYY
		                   AND QUARTER_TYPE = @QUARTER_TYPE
		                   AND PERSON_NUMB  = @PERSON_NUMB)
		    BEGIN
		        UPDATE A SET WORK_DAYS       = WORK_DAYS       + @WORK_DAY
		                   , TOTAL_AMOUNT_I  = TOTAL_AMOUNT_I  + @SUPP_TOTAL_I
		                   , TAX_EXEMPTION_I = TAX_EXEMPTION_I + @TAX_EXEMPTION_I
		                   , IN_TAX_I        = IN_TAX_I        + @IN_TAX_I
		                   , LOCAL_TAX_I     = LOCAL_TAX_I     + @LOCAL_TAX_I
		                   , END_YYYYMM      = CASE WHEN A.END_YYYYMM > @PAY_YYYYMM THEN A.END_YYYYMM ELSE @PAY_YYYYMM END
/*		                   , END_YYYYMM  = (CASE WHEN M1.RETR_DATE != '00000000' THEN SUBSTRING(M1.RETR_DATE, 1, 6)
		                                         ELSE ''
	                                         END)
*/  	                                        
		                   , UPDATE_DB_USER = @UPDATE_DB_USER
		                   , UPDATE_DB_TIME = GETDATE()
		          FROM            HAM900T A 
		               INNER JOIN HUM100T M1 ON A.COMP_CODE = M1.COMP_CODE
		                                    AND A.PERSON_NUMB = M1.PERSON_NUMB
		         WHERE A.COMP_CODE    = @COMP_CODE
		           AND A.PAY_YYYY     = @PAY_YYYY
		           AND A.QUARTER_TYPE = @QUARTER_TYPE
		           AND A.PERSON_NUMB  = @PERSON_NUMB
		    END
		ELSE
		    BEGIN
		        INSERT INTO HAM900T
		        ( COMP_CODE, PAY_YYYY,    QUARTER_TYPE,   PERSON_NUMB
		        , IN_FORE,   END_YYYYMM,  WORK_DAYS,      TOTAL_AMOUNT_I, TAX_EXEMPTION_I
		        , IN_TAX_I,  LOCAL_TAX_I, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME)
		        SELECT @COMP_CODE       AS COMP_CODE
		             , @PAY_YYYY        AS PAY_YYYY
		             , @QUARTER_TYPE    AS QUARTER_TYPE
		             , @PERSON_NUMB     AS PERSON_NUMB
		             , (CASE WHEN M1.NATION_CODE = 'KR' THEN '1'                                                               
		                     ELSE '9'
		                     END) IN_FORE 
		             , @PAY_YYYYMM      AS END_YYYYMM
/*		             , (CASE WHEN M1.RETR_DATE != '00000000' THEN SUBSTRING(M1.RETR_DATE, 1, 6)
		                     ELSE ''
		                     END)       AS END_YYYYMM
*/		                     
		             , @WORK_DAY        AS WORK_DAYS
		             , @SUPP_TOTAL_I    AS TOTAL_AMOUNT_I
		             , @TAX_EXEMPTION_I AS TAX_EXEMPTION_I
		             , @IN_TAX_I        AS IN_TAX_I
		             , @LOCAL_TAX_I     AS LOCAL_TAX_I
		             , @UPDATE_DB_USER  AS INSERT_DB_USER
		             , GETDATE()        AS INSERT_DB_TIME
		             , @UPDATE_DB_USER  AS UPDATE_DB_USER
		             , GETDATE()        AS UPDATE_DB_TIME
		          FROM HUM100T M1 WITH (NOLOCK)
		         WHERE M1.COMP_CODE    = @COMP_CODE
		           AND M1.PERSON_NUMB  = @PERSON_NUMB
		      END
	</update>
	
	
	
	<update id="ham850ukrServiceImpl.delete" parameterType="rMap">	
		DELETE FROM HAM800T 
		 WHERE PERSON_NUMB = #{PERSON_NUMB}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND SUPP_YYYYMM = #{SUPP_YYYYMM}
		   AND COMP_CODE   = #{S_COMP_CODE}
		   
		   
		   DECLARE @TOT_SUPP_I AS NUMERIC(18,0)
			DECLARE @COMP_CODE AS NVARCHAR(8)
			DECLARE @PAY_YYYY AS NVARCHAR(4)
			DECLARE @QUARTER_TYPE AS NVARCHAR(2)
			DECLARE @PERSON_NUMB AS NVARCHAR(10)
			DECLARE @WORK_DAY AS NUMERIC(18,4)
			DECLARE @SUPP_TOTAL_I AS NUMERIC(18,0)
			DECLARE @P_SUPP_TOTAL_I AS NUMERIC(18,0)
			DECLARE @TAX_EXEMPTION_I AS NUMERIC(18,0)
			DECLARE @P_TAX_EXEMPTION_I AS NUMERIC(18,0)
			DECLARE @IN_TAX_I AS NUMERIC(18,0)
			DECLARE @P_IN_TAX_I AS NUMERIC(18,0)
			DECLARE @LOCAL_TAX_I AS NUMERIC(18,0)
			DECLARE @P_LOCAL_TAX_I AS NUMERIC(18,0)
			DECLARE @UPDATE_DB_USER AS NVARCHAR(20)
			
			SET @TOT_SUPP_I = 0
			SET @COMP_CODE = #{S_COMP_CODE}
			SET @PAY_YYYY = #{PAY_YYYY}
			SET @QUARTER_TYPE = #{QUARTER_TYPE}
			SET @PERSON_NUMB = #{PERSON_NUMB}
			SET @WORK_DAY = ${WORK_DAY}
			SET @SUPP_TOTAL_I = ${SUPP_TOTAL_I}
			SET @P_SUPP_TOTAL_I = ${P_SUPP_TOTAL_I}
			SET @TAX_EXEMPTION_I = ${TAX_EXEMPTION_I}
			SET @P_TAX_EXEMPTION_I = ${P_TAX_EXEMPTION_I}
			SET @IN_TAX_I = ${IN_TAX_I}
			SET @P_IN_TAX_I = ${P_IN_TAX_I}
			SET @LOCAL_TAX_I = ${LOCAL_TAX_I}
			SET @P_LOCAL_TAX_I = ${P_LOCAL_TAX_I}
			SET @UPDATE_DB_USER = #{S_USER_ID}
			
			IF EXISTS(SELECT PERSON_NUMB FROM HAM900T WITH (NOLOCK)
			                 WHERE COMP_CODE = @COMP_CODE
			                   AND PAY_YYYY  = @PAY_YYYY
			                   AND QUARTER_TYPE = @QUARTER_TYPE
			                   AND PERSON_NUMB  = @PERSON_NUMB)
			    BEGIN
			        SELECT @TOT_SUPP_I = TOTAL_AMOUNT_I
			          FROM HAM900T WITH (NOLOCK)
			         WHERE COMP_CODE = @COMP_CODE
			           AND PAY_YYYY  = @PAY_YYYY
			           AND QUARTER_TYPE = @QUARTER_TYPE
			           AND PERSON_NUMB  = @PERSON_NUMB
			         
			        IF (@TOT_SUPP_I = @P_SUPP_TOTAL_I)
			            BEGIN
			                DELETE FROM HAM900T
			                 WHERE COMP_CODE = @COMP_CODE
			                   AND PAY_YYYY  = @PAY_YYYY
			                   AND QUARTER_TYPE = @QUARTER_TYPE
			                   AND PERSON_NUMB  = @PERSON_NUMB
			            END
			        ELSE
			            BEGIN
			                UPDATE A SET WORK_DAYS = WORK_DAYS - @WORK_DAY
			                           , TOTAL_AMOUNT_I = TOTAL_AMOUNT_I - @P_SUPP_TOTAL_I
			                           , TAX_EXEMPTION_I = TAX_EXEMPTION_I - @P_TAX_EXEMPTION_I
			                           , IN_TAX_I = IN_TAX_I - @P_IN_TAX_I
			                           , LOCAL_TAX_I = @P_LOCAL_TAX_I
			                           , UPDATE_DB_USER = @UPDATE_DB_USER
			                           , UPDATE_DB_TIME = GETDATE()
			                  FROM HAM900T A
			                 WHERE COMP_CODE = @COMP_CODE
			                   AND PAY_YYYY  = @PAY_YYYY
			                   AND QUARTER_TYPE = @QUARTER_TYPE
			                   AND PERSON_NUMB  = @PERSON_NUMB
			            
			            END
			     END 
	</update>
		
</mapper>