<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hbs700ukrServiceImpl">
	
    <!-- 메인조회 -->
	<select id="hbs700ukrServiceImpl.selectMasterList" parameterType="Map" resultType="rMap">
		/* hbs700ukrServiceImpl.selectMasterList */
        SELECT 
            AA.COMP_CODE 
            --,  'Y' AS ESS_FLAG  
            , AA.ESS_FLAG       /* 대사우 연결여부 */
            , AA.ESS_FLAG AS ESS_FLAG_ORI       /* 대사우 연결여부(ori) */
            , isnull(AA.AGRN_DATE, '')      /* 동의 일자 */
            , AA.CNRC_YEAR 
            , AA.MERITS_YEARS   
            , BB.DEPT_CODE  
            , BB.DEPT_NAME  
            , AA.POST_CODE
            , AA.ABIL_CODE
            , BB.PERSON_NUMB
            , BB.NAME
            , AA.JOIN_DATE
            , AA.MERITS_BSE_AMT
            , AA.MERITS_CLASS   
            , AA.ADTN_RATE
            , AA.RSNG_AMT
            , AA.AVRG_PMTN_AMT
            , AA.BSE_AMT
            , AA.BNS_ALWN
            , AA.MNGM_ALWN
            , AA.CNWK_ALWN
            , AA.ABIL_ASST_EXPN
            , AA.RSP_EXPN
            , AA.CHFD_ASST_EXPN
            , AA.BZNS_PRGS_EXPN
            , AA.TCHN_ALWN
            , AA.BZNS_ALWN
            , AA.DEV_BZNS_ALWN
            , AA.FMLY_ALWN
            , AA.SCEXP_ASST_ALWN
            , AA.TRET_ALWN
            , AA.MOD_ALWN
            , AA.MERIT_PAY
            , AA.ANNUAL_SALARY_I
            , AA.WAGES_STD_I
            , AA.ADD_AMT
            , AA.SUB_AMT
            , AA.AGRN_DATE
            , AA.RMK

        FROM HBS700T AA
        INNER JOIN HUM100T BB   ON AA.COMP_CODE   = BB.COMP_CODE 
                               AND AA.PERSON_NUMB = BB.PERSON_NUMB 
        WHERE 1=1
        AND AA.CNRC_YEAR            = #{CNRC_YEAR}
        AND AA.MERITS_YEARS         = #{MERITS_YEARS}
        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND AA.DEPT_CODE            = #{DEPT_CODE}
        </if> 
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND AA.PERSON_NUMB          = #{PERSON_NUMB}
        </if> 
        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
        AND AA.ABIL_CODE            = #{ABIL_CODE}
        </if> 
        
        ORDER BY AA.DEPT_CODE, AA.PERSON_NUMB
        
	</select>
	
	<!-- 수정  -->
 	<update id="hbs700ukrServiceImpl.updateMaster" parameterType="Map">	
	   /* hbs700ukrServiceImpl.updateMaster */
		UPDATE HBS700T
		   SET 
               SCEXP_ASST_ALWN          = #{SCEXP_ASST_ALWN}          /* 학비보조수당 */
             , MOD_ALWN                 = #{MOD_ALWN}                 /* 조정수당     */
             , WAGES_STD_I              = #{WAGES_STD_I}              /* 월지급액     */
		     , ADD_AMT                  = #{ADD_AMT}                  /* 월지급액+    */
		     , SUB_AMT                  = #{SUB_AMT}                  /* 월지급액-    */
             , ANNUAL_SALARY_I          = #{ANNUAL_SALARY_I}          /* 연봉         */
             , MERIT_PAY                = #{MERIT_PAY}                /* 성과연봉     */
             , RMK                      = #{RMK}		              /* 비고         */
             , ESS_FLAG                 = #{ESS_FLAG}               
		 WHERE 1=1
            AND COMP_CODE            = #{S_COMP_CODE} 
		    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
            AND DEPT_CODE            = #{DEPT_CODE}
            </if> 
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
            AND PERSON_NUMB          = #{PERSON_NUMB}
            </if> 
            <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
            AND ABIL_CODE            = #{ABIL_CODE}
            </if> 
            	   
	</update>
    
	

 
 
   
    <!-- 1.대상자생성 -->
    <update id="hbs700ukrServiceImpl.createBaseData" parameterType="Map">
        /* hbs700ukrServiceImpl.createBaseData */
        
        /************ 대상자 생성 ***********/

        DECLARE @COMP_CODE NVARCHAR(20)
                , @CNRC_YEAR NVARCHAR(20)
                , @MERITS_YEARS NVARCHAR(20)
                , @DEPT_CODE NVARCHAR(20)
                , @PERSON_NUMB NVARCHAR(20)
                , @ABIL_CODE NVARCHAR(20)
        
        SET @COMP_CODE      = 'MASTER'
        SET @CNRC_YEAR      = #{CNRC_YEAR}
        SET @MERITS_YEARS   = #{MERITS_YEARS}
        SET @DEPT_CODE      = #{DEPT_CODE}
        SET @PERSON_NUMB    = #{PERSON_NUMB}
        SET @ABIL_CODE      = #{ABIL_CODE}
        
        
        /* 기존 데이터 삭제 */
        DELETE FROM HBS700T
        WHERE COMP_CODE     = @COMP_CODE
        AND CNRC_YEAR       = @CNRC_YEAR
        AND MERITS_YEARS    = @MERITS_YEARS
        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND DEPT_CODE                   = @DEPT_CODE
        </if>
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND PERSON_NUMB                 = @PERSON_NUMB
        </if>
        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
        AND ABIL_CODE                   = @ABIL_CODE
        </if>

        /*신규 데이터 생성*/
        INSERT INTO HBS700T(COMP_CODE
                            ,   CNRC_YEAR
                            , PERSON_NUMB
                            , DEPT_CODE
                            , POST_CODE
                            , ABIL_CODE
                            , JOIN_DATE
                            , MERITS_YEARS
                            , MERITS_CLASS
                            , MERITS_BSE_AMT) 
        
            SELECT  @COMP_CODE AS COMP_CODE
                 ,  @CNRC_YEAR AS CNRC_YEAR             --연봉계약년도
                 , A.PERSON_NUMB
                 --, A.NAME
                 , A.DEPT_CODE  AS DEPT_CODE            --부서코드
                 --, A.DEPT_NAME    AS DEPT_NAME            
                 , A.POST_CODE  AS POST_CODE            --직위코드              
                 , A.ABIL_CODE  AS ABIL_CODE            --직급
                 , A.JOIN_DATE  AS JOIN_DATE            --입사일   --HUM100T
        
                 --, ISNULL(B.MERITS_YEARS, 'NO') AS MERITS_YEARS     --(평가)기준년도  
                 ,  @MERITS_YEARS AS MERITS_YEARS             --연봉계약년도
                 , ISNULL(B.MERITS_CLASS, 'NO') AS MERITS_CLASS     --고과등급 
        
                 , ISNULL(C.AMOUNT_I, 0)    AS  MERITS_BSE_AMT      --(평가)기준년도 기본급
            FROM HUM100T A
            LEFT JOIN HUM770T B ON A.PERSON_NUMB = B.PERSON_NUMB
                                AND B.MERITS_YEARS = @MERITS_YEARS
                                AND B.MERITS_GUBUN = '98'
            LEFT JOIN HBS210T_DTL C ON A.PERSON_NUMB = C.PERSON_NUMB
                                    AND B.MERITS_YEARS = C.PAY_YYYY
                                    AND C.WAGES_CODE = 'S01'
            WHERE A.EMPLOY_TYPE = '4' 
            AND A.RETR_DATE = '00000000'

            <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
            AND A.DEPT_CODE                   = @DEPT_CODE
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
            AND A.PERSON_NUMB                 = @PERSON_NUMB
            </if>
            <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
            AND A.ABIL_CODE                   = @ABIL_CODE
            </if>

    </update>

    <!-- 2-1.평균호봉승급액 계산 -->
    <select id="hbs700ukrServiceImpl.calcAvg" parameterType="Map" resultType="rMap">
       /* hbs700ukrServiceImpl.calcAvg */
       DECLARE @PAY_GRADE_YYYY NVARCHAR(20)
       SET @PAY_GRADE_YYYY = #{MERITS_YEARS}
       
       DECLARE @BSE_DIFF_AMT_1 TABLE(
                        RN                          INT  ,          /* 순번 */
                        PAY_GRADE_01                NVARCHAR(20)  , /* 호봉 */
                        PAY_GRADE_02                NVARCHAR(20)  , /* 호봉 */
                        WAGES_CODE                  NVARCHAR(20)  , /* 기본금 */
                        WAGES_I                     NUMERIC(18,4)  /* 금액 */
                )
    
        INSERT INTO @BSE_DIFF_AMT_1
            SELECT DISTINCT
                ROW_NUMBER() OVER(ORDER BY PAY_GRADE_01,PAY_GRADE_02) AS RN
                , PAY_GRADE_01
                , PAY_GRADE_02
                , WAGES_CODE
                , WAGES_I   
                FROM HBS200T
                WHERE PAY_GRADE_01 IN ( '일반5급','일반6급','일반7급') 
                AND WAGES_CODE = 'BSE' 
                AND PAY_GRADE_YYYY = @PAY_GRADE_YYYY
        
        DECLARE @BSE_DIFF_AMT_2 TABLE(
                            BSE_DIFF_AMT_2_RN           INT  ,          /* 순번 */
                            PAY_GRADE_01                NVARCHAR(20)  , /* 급 */
                            PAY_GRADE_02                NVARCHAR(20)  , /* 호봉 */
                            WAGES_CODE                  NVARCHAR(20)  , /* 기본금 */
                            WAGES_I                     NUMERIC(18,4)  , /* 금액 */
                            
                            B_PAY_GRADE_01              NVARCHAR(20)  , /* 이전급 */
                            B_PAY_GRADE_02              NVARCHAR(20)  , /* 이전호봉 */
                            B_WAGES_CODE                NVARCHAR(20)  , /* 이전기본금 */
                            B_WAGES_I                   NUMERIC(18,4)  , /* 이전금액 */
                            DIFF                        NUMERIC(18,4)  /* 차이금액 */
                    )
                
        INSERT INTO @BSE_DIFF_AMT_2
            SELECT 
                    ROW_NUMBER() OVER(ORDER BY A.PAY_GRADE_01,A.PAY_GRADE_02) AS BSE_DIFF_AMT_2_RN 
                    , A.PAY_GRADE_01
                    , A.PAY_GRADE_02
                    , A.WAGES_CODE
                    , A.WAGES_I
                    , B.PAY_GRADE_01            AS B_PAY_GRADE_01
                    , B.PAY_GRADE_02            AS B_PAY_GRADE_02
                    , B.WAGES_CODE              AS B_WAGES_CODE
                    , B.WAGES_I                 AS B_WAGES_I
                    , A.WAGES_I - B.WAGES_I     AS DIFF
        
            FROM @BSE_DIFF_AMT_1 A
            LEFT JOIN @BSE_DIFF_AMT_1 B ON A.PAY_GRADE_01   = B.PAY_GRADE_01     --같은급에서의 호봉습급액 , 001호봉도 체크시에는  PAY_GRADE_01 부분은 주석처리
                                --AND A.PAY_GRADE_02        = B.PAY_GRADE_02
                                AND A.RN = B.RN +1
            WHERE B.PAY_GRADE_01 IS NOT NULL
            --ORDER BY A.PAY_GRADE_01, A.PAY_GRADE_02 DESC
            ORDER BY BSE_DIFF_AMT_2_RN
        
        
        --SELECT * FROM @BSE_DIFF_AMT_2
        
        SELECT 
                COUNT(*)                    AS TOTAL_PERSON 
                , SUM(CC.DIFF)              AS TOTAL_AMT
                , SUM(CC.DIFF) / COUNT(*)   AS AVRG_PMTN_AMT
                
        FROM HUM760T AA
        LEFT JOIN HUM100T BB                ON AA.PERSON_NUMB = BB.PERSON_NUMB 
        INNER JOIN @BSE_DIFF_AMT_2 CC       ON BB.PAY_GRADE_01 = CC.PAY_GRADE_01
                                            AND BB.PAY_GRADE_02 = CC.PAY_GRADE_02
        WHERE AA.ANNOUNCE_CODE = '14'
        AND AA.ANNOUNCE_DATE LIKE (@PAY_GRADE_YYYY + '%')
        
    </select>       
    
    <!-- 2-2.평균호보승급액 반영 -->
    <update id="hbs700ukrServiceImpl.commitAvrgAmt" parameterType="Map"> 
       /* hbs700ukrServiceImpl.commitAvrgAmt */
   
            UPDATE HBS700T
            SET AVRG_PMTN_AMT =   case when MERITS_BSE_AMT = 0 then 0
                                        else #{AVRG_PMTN_AMT}
                                        END , 
                BSE_AMT              =    case when MERITS_BSE_AMT = 0 then 0 
                                                else MERITS_BSE_AMT + RSNG_AMT + #{AVRG_PMTN_AMT}  
                                                END  ,
                BNS_ALWN            = 0 ,   
                MNGM_ALWN           = 0 ,    
                CNWK_ALWN           = 0 ,  
                ABIL_ASST_EXPN      = 0 , 
                RSP_EXPN            = 0 ,         
                CHFD_ASST_EXPN      = 0 ,     
                BZNS_PRGS_EXPN      = 0 ,     
                TCHN_ALWN           = 0 ,
                BZNS_ALWN           = 0 ,          
                DEV_BZNS_ALWN       = 0 ,            
                FMLY_ALWN           = 0 ,          
                SCEXP_ASST_ALWN     = 0 ,
                TRET_ALWN           = 0 ,
                MOD_ALWN            = 0 ,
                MERIT_PAY           = 0 ,      
                ANNUAL_SALARY_I     = 0 ,
                WAGES_STD_I         = 0 ,
                ADD_AMT             = 0 ,
                SUB_AMT             = 0 
                                            
            WHERE 1=1
            --AND MERITS_BSE_AMT != 0
            AND CNRC_YEAR                   = #{CNRC_YEAR}
            AND MERITS_YEARS                = #{MERITS_YEARS}
            <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
            AND DEPT_CODE                   = #{DEPT_CODE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
            AND PERSON_NUMB                 = #{PERSON_NUMB}
            </if>
            <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
            AND ABIL_CODE                   = #{ABIL_CODE}
            </if>
           
    </update>
    
    <!-- 3.가율계산 - 2.재원산출  -->
    <select id="hbs700ukrServiceImpl.selectSorc" parameterType="Map" resultType="rMap">
        /* hbs700ukrServiceImpl.selectSorc */
        --재원산출 계산
        --재원산출
    DECLARE @CNRC_YEAR NVARCHAR(10)
            , @MERITS_YEARS NVARCHAR(10)
            
            , @DEPT_CODE NVARCHAR(10)
            , @PERSON_NUMB NVARCHAR(10)
            , @ABIL_CODE NVARCHAR(10)
            
            , @SPRR_RATE NUMERIC(18,4) --수
            , @STD_RATE NUMERIC(18,4)  --우
            , @IMPV_RATE NUMERIC(18,4)  --양
            , @CHLG_RATRE NUMERIC(18,4)  --가
            , @NN_RATE NUMERIC(18,4)  --미반영
    
    SET @CNRC_YEAR          = #{CNRC_YEAR} 
    SET @MERITS_YEARS       = #{MERITS_YEARS} 
    
    SET @DEPT_CODE          = #{DEPT_CODE} 
    SET @PERSON_NUMB        = #{PERSON_NUMB} 
    SET @ABIL_CODE          = #{ABIL_CODE} 
    
    SET @SPRR_RATE          = #{S_GRADE} --수
    SET @STD_RATE           = #{A_GRADE} --우
    SET @IMPV_RATE          = #{B_GRADE} --양
    SET @CHLG_RATRE         = #{C_GRADE} --가
    SET @NN_RATE            = #{Z_GRADE} --미평가

    SELECT 
        SUM(MERITS_BSE_AMT) AS MERITS_BSE_AMT --기본급계
        , SUM(MERITS_BSE_AMT) * 0.01 * @STD_RATE AS  STD_SORC_TOT_AMT  --총재원(기준비율),
        , SUM(CASE WHEN MERITS_CLASS = '수' THEN MERITS_BSE_AMT * 0.01 * @SPRR_RATE
                    WHEN MERITS_CLASS = '우' THEN MERITS_BSE_AMT * 0.01 * @STD_RATE
                    WHEN MERITS_CLASS = '양' THEN MERITS_BSE_AMT * 0.01 * @IMPV_RATE
                    WHEN MERITS_CLASS = '가' THEN MERITS_BSE_AMT * 0.01 * @CHLG_RATRE
                    WHEN MERITS_CLASS = 'Z' THEN MERITS_BSE_AMT * 0.01 * @NN_RATE
                    ELSE 0
        END) AS ADTN_SORC_TOT_AMT --가율적용재원 
    FROM HBS700T
        --INNER JOIN HUM100T BB   ON AA.COMP_CODE   = BB.COMP_CODE 
        --                       AND AA.PERSON_NUMB = BB.PERSON_NUMB 
        WHERE 1=1
        AND CNRC_YEAR            = @CNRC_YEAR 
        AND MERITS_YEARS         = @MERITS_YEARS 
        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND DEPT_CODE            = @DEPT_CODE
        </if>
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND PERSON_NUMB          = @PERSON_NUMB
        </if>
        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
        AND ABIL_CODE            = @ABIL_CODE
        </if>
        
    </select>
    
    
    
    <!-- 3.가율계산 - 3.가율확정 -->
    <update id="hbs700ukrServiceImpl.commitMeritsRate" parameterType="Map"> 
       /* hbs700ukrServiceImpl.commitMeritsRate */
       DECLARE @CNRC_YEAR NVARCHAR(10)
            , @MERITS_YEARS NVARCHAR(10)
            , @DEPT_CODE NVARCHAR(10)
            , @PERSON_NUMB NVARCHAR(10)
            , @ABIL_CODE NVARCHAR(10)
            , @SPRR_RATE NUMERIC(18,4) --수
            , @STD_RATE NUMERIC(18,4)  --우
            , @IMPV_RATE NUMERIC(18,4)  --양
            , @CHLG_RATRE NUMERIC(18,4)  --가
            , @NN_RATE NUMERIC(18,4)  --미반영
        
        SET @CNRC_YEAR      = #{CNRC_YEAR} 
        SET @MERITS_YEARS   = #{MERITS_YEARS} 
        
        SET @DEPT_CODE      = #{DEPT_CODE} 
        SET @PERSON_NUMB    = #{PERSON_NUMB} 
        SET @ABIL_CODE      = #{ABIL_CODE} 
        
        SET @SPRR_RATE      = #{S_GRADE} --수
        SET @STD_RATE       = #{A_GRADE} --우
        SET @IMPV_RATE      = #{B_GRADE} --양
        SET @CHLG_RATRE     = #{C_GRADE} --가
        SET @NN_RATE        = #{Z_GRADE} --미평가
   
        UPDATE HBS700T
        SET ADTN_RATE =             CASE WHEN MERITS_CLASS = '수' THEN @SPRR_RATE
                                         WHEN MERITS_CLASS = '우' THEN @STD_RATE
                                         WHEN MERITS_CLASS = '양' THEN @IMPV_RATE
                                         WHEN MERITS_CLASS = '가' THEN @CHLG_RATRE
                                         WHEN MERITS_CLASS = 'Z' THEN @NN_RATE
                                         ELSE 0
                                         END ,
            RSNG_AMT              =    case when MERITS_BSE_AMT = 0 then 0 
                                else( CASE WHEN MERITS_CLASS = '수' THEN  MERITS_BSE_AMT / 100 * @SPRR_RATE 
                                             WHEN MERITS_CLASS = '우' THEN  MERITS_BSE_AMT / 100 * @STD_RATE
                                             WHEN MERITS_CLASS = '양' THEN  MERITS_BSE_AMT / 100 * @IMPV_RATE
                                             WHEN MERITS_CLASS = '가' THEN  MERITS_BSE_AMT / 100 * @CHLG_RATRE
                                             WHEN MERITS_CLASS = 'Z' THEN  MERITS_BSE_AMT / 100 * @NN_RATE
                                             ELSE 0
                                             END 
                                    ) END ,
            BSE_AMT              =    case when MERITS_BSE_AMT = 0 then 0 
                                else( CASE WHEN MERITS_CLASS = '수' THEN  MERITS_BSE_AMT + AVRG_PMTN_AMT  + (MERITS_BSE_AMT / 100 * @SPRR_RATE) 
                                             WHEN MERITS_CLASS = '우' THEN  MERITS_BSE_AMT + AVRG_PMTN_AMT  + (MERITS_BSE_AMT / 100 * @STD_RATE)
                                             WHEN MERITS_CLASS = '양' THEN  MERITS_BSE_AMT + AVRG_PMTN_AMT  + (MERITS_BSE_AMT / 100 * @IMPV_RATE)
                                             WHEN MERITS_CLASS = '가' THEN  MERITS_BSE_AMT + AVRG_PMTN_AMT  + (MERITS_BSE_AMT / 100 * @CHLG_RATRE)
                                             WHEN MERITS_CLASS = 'Z' THEN  MERITS_BSE_AMT + AVRG_PMTN_AMT  + (MERITS_BSE_AMT / 100 * @NN_RATE)
                                             ELSE 0
                                             END 
                                    ) END ,
           
            BNS_ALWN            = 0 ,   
            MNGM_ALWN           = 0 ,    
            CNWK_ALWN           = 0 ,  
            ABIL_ASST_EXPN      = 0 , 
            RSP_EXPN            = 0 ,         
            CHFD_ASST_EXPN      = 0 ,     
            BZNS_PRGS_EXPN      = 0 ,     
            TCHN_ALWN           = 0 ,
            BZNS_ALWN           = 0 ,          
            DEV_BZNS_ALWN       = 0 ,            
            FMLY_ALWN           = 0 ,          
            SCEXP_ASST_ALWN     = 0 ,
            TRET_ALWN           = 0 ,
            MOD_ALWN            = 0 ,
            MERIT_PAY           = 0 ,      
            ANNUAL_SALARY_I     = 0 ,
            WAGES_STD_I         = 0 , 
            ADD_AMT             = 0 ,
            SUB_AMT             = 0 
                                    
        WHERE 1=1
        AND CNRC_YEAR       = @CNRC_YEAR
        AND MERITS_YEARS    = @MERITS_YEARS
        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND DEPT_CODE       = @DEPT_CODE
        </if>
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND PERSON_NUMB     = @PERSON_NUMB
        </if>
        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
        AND ABIL_CODE       = @ABIL_CODE
        </if>
        
           
    </update>
    
     <!-- 4.상세금액계산 -->
    <update id="hbs700ukrServiceImpl.calcAmt" parameterType="Map"> 
       /* hbs700ukrServiceImpl.calcAmt */
       DECLARE @CNRC_YEAR NVARCHAR(10)
            , @MERITS_YEARS NVARCHAR(10)
            , @DEPT_CODE NVARCHAR(10)
            , @PERSON_NUMB NVARCHAR(10)
            , @ABIL_CODE NVARCHAR(10)
        
        SET @CNRC_YEAR      = #{CNRC_YEAR} 
        SET @MERITS_YEARS   = #{MERITS_YEARS} 
        SET @DEPT_CODE      = #{DEPT_CODE} 
        SET @PERSON_NUMB    = #{PERSON_NUMB} 
        SET @ABIL_CODE      = #{ABIL_CODE} 
   
        BEGIN    
            UPDATE HBS700T
            SET 
                BNS_ALWN = KK.BNS_ALWN,
                MNGM_ALWN = KK.MNGM_ALWN,
                CNWK_ALWN = KK.CNWK_ALWN,
                ABIL_ASST_EXPN = KK.ABIL_ASST_EXPN,
                RSP_EXPN = KK.RSP_EXPN,
                CHFD_ASST_EXPN = KK.CHFD_ASST_EXPN,
                BZNS_PRGS_EXPN = KK.BZNS_PRGS_EXPN,
                TCHN_ALWN = KK.TCHN_ALWN,
                BZNS_ALWN = KK.BZNS_ALWN,
                DEV_BZNS_ALWN = KK.DEV_BZNS_ALWN,
                FMLY_ALWN = KK.FMLY_ALWN,
                SCEXP_ASST_ALWN = KK.SCEXP_ASST_ALWN,
                TRET_ALWN = KK.TRET_ALWN,
                MOD_ALWN  = KK.MOD_ALWN,
                
                ANNUAL_SALARY_I = ( HBS700T.BSE_AMT + KK.BNS_ALWN + KK.MNGM_ALWN + KK.CNWK_ALWN + KK.ABIL_ASST_EXPN + KK.RSP_EXPN 
                                + KK.CHFD_ASST_EXPN + KK.BZNS_PRGS_EXPN + KK.TCHN_ALWN + KK.BZNS_ALWN + KK.DEV_BZNS_ALWN 
                                + KK.FMLY_ALWN + KK.SCEXP_ASST_ALWN + KK.TRET_ALWN ) * 12 , -- + HBS700T.MERIT_PAY ,
                                
                WAGES_STD_I = ( HBS700T.BSE_AMT + KK.BNS_ALWN + KK.MNGM_ALWN + KK.CNWK_ALWN + KK.ABIL_ASST_EXPN + KK.RSP_EXPN 
                                + KK.CHFD_ASST_EXPN + KK.BZNS_PRGS_EXPN + KK.TCHN_ALWN + KK.BZNS_ALWN + KK.DEV_BZNS_ALWN 
                                + KK.FMLY_ALWN + KK.SCEXP_ASST_ALWN + KK.TRET_ALWN )  --+ case when HBS700T.MERIT_PAY = 0 then 0 
                                                                                       --     else HBS700T.MERIT_PAY / 12  
                                                                                       --     END                             
                
                
            FROM (SELECT AA.PERSON_NUMB, AA.BSE_AMT
                                , SUM(CASE WHEN BS.SUB_CODE = 'S02' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S02' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS BNS_ALWN  /* 상여수당 */ 
                                --,SUM(CASE WHEN BS.SUB_CODE = 'S07' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10 
                                --   WHEN BS.SUB_CODE = 'S07' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                --   ELSE 0
                                --END) AS MNGM_ALWN /* 관리업무수당 */
                                
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S07' AND BS.REF_CODE8 = 'A'  AND B6.REF_CODE2 IS NOT NULL THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10 
                                   WHEN BS.SUB_CODE = 'S07' AND BS.REF_CODE8 = 'B'  AND B6.REF_CODE2 IS NOT NULL THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS MNGM_ALWN /* 관리업무수당 */
                                                                
                                , ISNULL(B3.SUPP_TOTAL_I, 0) AS CNWK_ALWN /* 장기근속수당 */
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S04' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S04' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS ABIL_ASST_EXPN /* 직급보조비 */ 
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S05' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S05' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS RSP_EXPN /* 효도휴가비 */
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S06' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S06' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS CHFD_ASST_EXPN /* 급식보조비 */ 
                                , ISNULL(B2.REF_CODE2, 0) AS  BZNS_PRGS_EXPN /* 직책급업무추진비 */
                                , ISNULL(B1.REF_CODE1 + B1.REF_CODE2, 0) AS TCHN_ALWN /* 기술자격수당 */
                                , ISNULL(B4.AMOUNT_I, 0) AS BZNS_ALWN /* 업무수당 */ 
                                --,SUM(CASE WHEN BS.SUB_CODE = 'S13' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                --   WHEN BS.SUB_CODE = 'S13' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                --   ELSE 0
                                --END) AS DEV_BZNS_ALWN /* 개발업무수당 */ 
                                
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S13' AND BS.REF_CODE8 = 'A' AND B5.PERSON_NUMB IS NOT NULL THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S13' AND BS.REF_CODE8 = 'B' AND B5.PERSON_NUMB IS NOT NULL THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS DEV_BZNS_ALWN /* 개발업무수당 */ 
                                                                
                                , ISNULL(DD.FAMILY_SUDANG, 0) AS FMLY_ALWN /* 가족수당  */
                                , 0 AS SCEXP_ASST_ALWN /* 학비보조수당  */
                                ,SUM(CASE WHEN BS.SUB_CODE = 'S16' AND BS.REF_CODE8 = 'A' THEN AA.BSE_AMT * BS.REF_CODE9 * 0.01 / BS.REF_CODE10
                                   WHEN BS.SUB_CODE = 'S16' AND BS.REF_CODE8 = 'B' THEN BS.REF_CODE9
                                   ELSE 0
                                END) AS TRET_ALWN  /* 대우수당 */ 
                                , 0  AS MOD_ALWN   /* 조정수당 */

                            FROM HBS700T AA
                            LEFT JOIN BSA100T BS ON AA.comp_code = BS.comp_code
                                                AND BS.MAIN_CODE = 'H035'
                                                AND BS.SUB_CODE LIKE 'S%'

                            LEFT JOIN HUM600T A1 ON AA.PERSON_NUMB = A1.PERSON_NUMB
                                                AND A1.ALWN_PAYN_YN = 'Y'
                                                AND A1.QUAL_CODE IS NOT NULL 
                                                AND A1.QUAL_CODE !=''
                            LEFT JOIN BSA100T B1 ON A1.QUAL_CODE = B1.SUB_CODE
                                                AND B1.MAIN_CODE = 'H022'

                            LEFT JOIN BSA100T B2 ON AA.POST_CODE = B2.SUB_CODE
                                                AND B2.MAIN_CODE = 'H005'

                            LEFT JOIN (SELECT A.PERSON_NUMB, SUM(CONVERT(DECIMAL(18,4),C.REF_CODE6)) AS FAMILY_SUDANG
                                        FROM HUM100T A
                                        LEFT JOIN (
                                                SELECT DISTINCT PERSON_NUMB
                                                        , REL_CODE
                                                        , uniLITE.fnCipherDecrypt(REPRE_NUM, '') AS FAMILY_REPRE_NUM
                                                        , CASE WHEN REL_CODE IN ('17','18','19') AND SUBSTRING(uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,1) = '0' THEN uniLITE.fnGetAge(@CNRC_YEAR+'12', substring('20' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                WHEN REL_CODE IN ('17','18','19') AND SUBSTRING(uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,1) = '1' THEN uniLITE.fnGetAge(@CNRC_YEAR+'12', substring('20' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                ELSE UNILITE.FNGETAGE(@CNRC_YEAR+'12', SUBSTRING('19' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                END 'AAA'
                                                        , FAMILY_AMOUNT_YN 
                                                FROM HUM200T
                                                WHERE FAMILY_AMOUNT_YN = 'Y'
                                                AND PERSON_NUMB &lt;&gt; 'S1111'
                                                AND uniLITE.fnCipherDecrypt(REPRE_NUM, '') != ''
            
                                                EXCEPT

                                                SELECT * 
                                                FROM (
                                                    SELECT DISTINCT PERSON_NUMB
                                                            , REL_CODE
                                                            , uniLITE.fnCipherDecrypt(REPRE_NUM, '') AS FAMILY_REPRE_NUM
                                                            , CASE WHEN REL_CODE IN ('17','18','19') AND SUBSTRING(uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,1) = '0' then uniLITE.fnGetAge(@CNRC_YEAR+'12', substring('20' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                    WHEN REL_CODE IN ('17','18','19') AND SUBSTRING(uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,1) = '1' then uniLITE.fnGetAge(@CNRC_YEAR+'12', substring('20' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                    ELSE uniLITE.fnGetAge(@CNRC_YEAR+'12', SUBSTRING('19' + uniLITE.fnCipherDecrypt(REPRE_NUM, '') , 1,6), 'Y') 
                                                                    END 'AAA'
                                                            , FAMILY_AMOUNT_YN 
                                                    FROM HUM200T
                                                    WHERE FAMILY_AMOUNT_YN = 'Y'
                                                    AND PERSON_NUMB &lt;&gt; 'S1111'
                                                    AND uniLITE.fnCipherDecrypt(REPRE_NUM, '') != ''
                                                ) AS ABC
                                                WHERE ABC.REL_CODE IN ('17','18','19') 
                                                AND ABC.AAA &gt; 19) B ON A.PERSON_NUMB = B.PERSON_NUMB
                                                LEFT JOIN BSA100T C ON B.REL_CODE = C.SUB_CODE
                                                                    AND C.MAIN_CODE = 'H196'
                                                WHERE A.EMPLOY_TYPE = '4'
                                                AND A.RETR_DATE = '00000000'
                                                GROUP BY A.PERSON_NUMB
                                        ) DD ON AA.PERSON_NUMB = DD.PERSON_NUMB

                            LEFT JOIN HUM100T A3 ON AA.PERSON_NUMB = A3.PERSON_NUMB
                            LEFT JOIN HBS350T B3 ON A3.COMP_CODE = B3.COMP_CODE
                                                AND A3.YEAR_GRADE*12 &gt;= B3.STRT_MONTH
                                                AND A3.YEAR_GRADE*12 &lt; B3.LAST_MONTH
                                                AND B3.CNWK_DSNC = '4'

                            LEFT JOIN HPA200T B4 ON AA.PERSON_NUMB = B4.PERSON_NUMB
                                                AND B4.PROV_GUBUN = '1'
                                                AND B4.WAGES_CODE = 'J21'
                            LEFT JOIN HPA200T B5 ON AA.PERSON_NUMB = B5.PERSON_NUMB
                                                AND B5.PROV_GUBUN = '1'
                                                AND B5.WAGES_CODE = 'J75'
                            LEFT JOIN BSA100T B6 ON AA.COMP_CODE = B6.COMP_CODE
                                                AND B6.MAIN_CODE = 'H005'
                                                AND AA.POST_CODE = B6.SUB_CODE                    
                            WHERE AA.BSE_AMT        != 0 
                            AND AA.CNRC_YEAR        = @CNRC_YEAR
                            AND AA.MERITS_YEARS     = @MERITS_YEARS
                            
                            <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                            AND AA.DEPT_CODE        = @DEPT_CODE
                            </if>
                            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
                            AND AA.PERSON_NUMB      = @PERSON_NUMB
                            </if>
                            <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                            AND AA.ABIL_CODE        = @ABIL_CODE
                            </if>
                            
                            GROUP BY AA.PERSON_NUMB
                                    , AA.BSE_AMT
                                    , B1.REF_CODE1 + B1.REF_CODE2   /* 기술자격수당 */
                                    , B2.REF_CODE2                  /* 직책급업무추진비 */
                                    , DD.FAMILY_SUDANG              /* 가족수당 */
                                    , B3.SUPP_TOTAL_I               /* 장기근속수당 */
                                    , B4.AMOUNT_I                   /* 업무수당 */ 
                            ) AS KK
    
            WHERE HBS700T.PERSON_NUMB = KK.PERSON_NUMB   
          END 
    </update>
    
	<select id="hbs700ukrServiceImpl.spGetYearPay" parameterType="Map" resultType="rMap">
		DECLARE	  @COMP_CODE		NVARCHAR(20)
				, @CNRC_YEAR		NVARCHAR(20)
				, @MERITS_YEARS		NVARCHAR(20)
				, @DEPT_CODE		NVARCHAR(20)
				, @PERSON_NUMB		NVARCHAR(20)
				, @ABIL_CODE		NVARCHAR(20)
				, @ERROR_DESC		NVARCHAR(2000)
		
		SET @COMP_CODE		= #{S_COMP_CODE}
		SET @CNRC_YEAR		= #{CNRC_YEAR}
		SET @MERITS_YEARS	= #{MERITS_YEARS}
		SET @DEPT_CODE		= #{DEPT_CODE}
		SET @PERSON_NUMB	= #{PERSON_NUMB}
		SET @ABIL_CODE		= #{ABIL_CODE}
		SET @ERROR_DESC		= ''
		
		EXEC uniLITE.USP_HBS700UKR_SALAY_QUERY	  @COMP_CODE
												, @CNRC_YEAR
												, @MERITS_YEARS
												, @DEPT_CODE
												, @PERSON_NUMB
												, @ABIL_CODE
												, @ERROR_DESC	OUTPUT
		
		SELECT @ERROR_DESC AS ErrorDesc
	</select>
	
	<select id="hbs700ukrServiceImpl.spCalcYearPay" parameterType="Map" resultType="rMap">
		DECLARE	  @COMP_CODE		NVARCHAR(20)
				, @CNRC_YEAR		NVARCHAR(20)
				, @MERITS_YEARS		NVARCHAR(20)
				, @DEPT_CODE		NVARCHAR(20)
				, @PERSON_NUMB		NVARCHAR(20)
				, @ABIL_CODE		NVARCHAR(20)
				, @ERROR_DESC		NVARCHAR(2000)
		
		SET @COMP_CODE		= #{S_COMP_CODE}
		SET @CNRC_YEAR		= #{CNRC_YEAR}
		SET @MERITS_YEARS	= #{MERITS_YEARS}
		SET @DEPT_CODE		= #{DEPT_CODE}
		SET @PERSON_NUMB	= #{PERSON_NUMB}
		SET @ABIL_CODE		= #{ABIL_CODE}
		SET @ERROR_DESC		= ''
		
		EXEC uniLITE.USP_HBS700UKR_SALAY_CREATE	  @COMP_CODE
												, @CNRC_YEAR
												, @MERITS_YEARS
												, @DEPT_CODE
												, @PERSON_NUMB
												, @ABIL_CODE
												, @ERROR_DESC	OUTPUT
		
		SELECT @ERROR_DESC AS ErrorDesc
	</select>
	
	<!--hans::20190531-->
	<select id="hbs700ukrServiceImpl.spupdateMaster" parameterType="Map" resultType="rMap">
		DECLARE	  @COMP_CODE        NVARCHAR(8)
				, @CNRC_YEAR  		NVARCHAR(4)
				, @PERSON_NUMB		NVARCHAR(200)
				, @RMK		        NVARCHAR(2000)
				, @TB_NM		    NVARCHAR(2000)
                , @ESS_FLAG         NVARCHAR(1)
                , @SUB_CLOSING      NVARCHAR(1)
                , @BSE_AMT		    NUMERIC(30,6)
                , @BNS_ALWN		    NUMERIC(30,6)
                , @MNGM_ALWN		NUMERIC(30,6)
                , @CNWK_ALWN		NUMERIC(30,6)
                , @ABIL_ASST_EXPN	NUMERIC(30,6)
                , @RSP_EXPN		    NUMERIC(30,6)
                , @CHFD_ASST_EXPN	NUMERIC(30,6)
                , @BZNS_PRGS_EXPN	NUMERIC(30,6)
                , @TCHN_ALWN		NUMERIC(30,6)
                , @BZNS_ALWN		NUMERIC(30,6)
                , @DEV_BZNS_ALWN	NUMERIC(30,6)
                , @FMLY_ALWN		NUMERIC(30,6)
                , @SCEXP_ASST_ALWN  NUMERIC(30,6)
                , @TRET_ALWN		NUMERIC(30,6)
                , @MOD_ALWN		    NUMERIC(30,6)
                , @SUM_YEAR         NUMERIC(30,6)
				, @ERROR_DESC		NVARCHAR(2000)
		
		SET @COMP_CODE  		    = #{COMP_CODE  }
		SET @CNRC_YEAR  		    = #{CNRC_YEAR  }
		SET @PERSON_NUMB		    = #{PERSON_NUMB}
		SET @RMK		            = #{RMK}
		SET @TB_NM		            = #{TB_NM}
		SET @ESS_FLAG		        = #{ESS_FLAG}
		SET @SUB_CLOSING		    = #{SUB_CLOSING}
		SET @BSE_AMT		    	= #{BSE_AMT}
		SET @BNS_ALWN		    	= #{BNS_ALWN}
		SET @MNGM_ALWN		    	= #{MNGM_ALWN}
		SET @CNWK_ALWN		    	= #{CNWK_ALWN}
		SET @ABIL_ASST_EXPN	    	= #{ABIL_ASST_EXPN}
		SET @RSP_EXPN		    	= #{RSP_EXPN}
		SET @CHFD_ASST_EXPN	    	= #{CHFD_ASST_EXPN}
		SET @BZNS_PRGS_EXPN	    	= #{BZNS_PRGS_EXPN}
		SET @TCHN_ALWN		    	= #{TCHN_ALWN}
		SET @BZNS_ALWN		    	= #{BZNS_ALWN}
		SET @DEV_BZNS_ALWN	    	= #{DEV_BZNS_ALWN}
		SET @FMLY_ALWN		    	= #{FMLY_ALWN}
		SET @SCEXP_ASST_ALWN    	= #{SCEXP_ASST_ALWN}
		SET @TRET_ALWN		    	= #{TRET_ALWN}
		SET @MOD_ALWN		    	= #{MOD_ALWN}
		SET @SUM_YEAR               = #{SUM_YEAR}
		SET @ERROR_DESC		        = ''
		
		EXEC uniLITE.USP_HBS700UKR_SALAY_UPDATE	 @COMP_CODE  
                                                ,@CNRC_YEAR  
                                                ,@PERSON_NUMB
                                                ,@RMK		 
                                                ,@TB_NM
                                                ,@ESS_FLAG
                                                ,@SUB_CLOSING
                                                ,@BSE_AMT		    
                                                ,@BNS_ALWN		    
                                                ,@MNGM_ALWN		    
                                                ,@CNWK_ALWN		    
                                                ,@ABIL_ASST_EXPN	
                                                ,@RSP_EXPN		    
                                                ,@CHFD_ASST_EXPN	
                                                ,@BZNS_PRGS_EXPN	
                                                ,@TCHN_ALWN		    
                                                ,@BZNS_ALWN		    
                                                ,@DEV_BZNS_ALWN	    
                                                ,@FMLY_ALWN		    
                                                ,@SCEXP_ASST_ALWN   
                                                ,@TRET_ALWN		    
                                                ,@MOD_ALWN
                                                ,@SUM_YEAR		    
												,@ERROR_DESC	OUTPUT

		
		SELECT @ERROR_DESC AS ErrorDesc
	</select>
	
</mapper>