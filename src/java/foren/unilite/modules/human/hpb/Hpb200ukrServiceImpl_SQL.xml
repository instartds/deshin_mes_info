<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hpb200ukrServiceImpl">
	
	
	<select id="hpb200ukrServiceImpl.getGubun" parameterType="Map" resultType="comboItem">  
	--소득구분
		<if test="DWELLING_YN == &quot;1&quot;">
			-- 국내
			SELECT SUB_CODE AS 'value'                         
			     , CODE_NAME AS 'text'
				 , '' AS search
				 , '' AS 'option'
			  FROM BSA100T WITH (NOLOCK)             
			 WHERE COMP_CODE = #{S_COMP_CODE}   
			   AND MAIN_CODE = 'HS05'
			   AND SUB_CODE != '$'      
			 ORDER BY SORT_SEQ, SUB_CODE 
		</if>
		
		<if test="DWELLING_YN == &quot;2&quot;">     
		-- 해외
			SELECT SUB_CODE AS 'value'                         
			     , CODE_NAME AS 'text'
				 , '' AS search
				 , '' AS 'option'
			  FROM BSA100T WITH (NOLOCK)             
			 WHERE COMP_CODE = #{S_COMP_CODE}   
			   AND MAIN_CODE = 'HS06'
			   AND SUB_CODE != '$'      
			 ORDER BY SORT_SEQ, SUB_CODE 
		</if> 
	</select>
	
	<select id="hpb200ukrServiceImpl.fnGetBusinessCode" parameterType="Map" resultType="rMap">
        SELECT TOP 1 SUB_CODE 
          FROM BSA100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'B016'
           AND USE_YN    = 'Y'
           AND SUB_CODE  != '$'
         ORDER BY SORT_SEQ, SUB_CODE 
    </select>
    
	<select id="hpb200ukrServiceImpl.userDept" parameterType="Map" resultType="rMap">		
	/* hpb200ukrServiceImpl.userDept */
	SELECT A.DEPT_CODE AS DEPT_CODE
	     , B.TREE_NAME AS DEPT_NAME
	  FROM      BSA300T A WITH (NOLOCK)
	  LEFT JOIN BSA210T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE   
	                                   AND B.TREE_CODE = A.DEPT_CODE   
	 WHERE A.COMP_CODE = #{S_COMP_CODE}
	   AND A.USER_ID   = #{S_USER_ID}
	   AND A.USE_YN    = 'Y'
	   AND B.USE_YN    = 'Y'
	</select>
	
	<select id="hpb200ukrServiceImpl.checkPersonNumb" parameterType="Map" resultType="rMap">       
    /* hpb200ukrServiceImpl.userDept */
    SELECT COUNT(PERSON_NUMB) AS CNT 
    FROM HPB100T WITH (NOLOCK)
    WHERE COMP_CODE = #{S_COMP_CODE}
        AND DED_TYPE = #{DED_TYPE}
        AND PERSON_NUMB = #{PERSON_NUMB}
    </select>
	
	<select id="hpb200ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">		
	/* hpb200ukrServiceImpl.selectList */
	SELECT A.DED_TYPE
         , A.PERSON_NUMB 
         , ISNULL(A.NAME,'') AS NAME 
         , ISNULL(A.ENG_NAME,'') AS ENG_NAME
         , ISNULL(A.DEPT_CODE,'') AS DEPT_CODE
         , ISNULL(A.DEPT_NAME,'') AS DEPT_NAME
         , ISNULL(A.DIV_CODE,'') AS DIV_CODE
         , ISNULL(A.SECT_CODE,'') AS SECT_CODE
         , ISNULL(A.BUSINESS_TYPE,'') AS BUSINESS_TYPE
         , ISNULL(A.KNOWN_YN,'') AS KNOWN_YN
         , ISNULL(A.FOREIGN_YN,'') AS FOREIGN_YN
         , ISNULL(A.NATION_CODE,'') AS NATION_CODE
         , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A') AS REPRE_NUM
         , unilite.fnCipherDecrypt(A.FOREIGN_NUM, 'F') AS FOREIGN_NUM
         , ISNULL(A.RECOGN_NUM,'') AS RECOGN_NUM
         , ISNULL(A.DWELLING_YN,'') AS DWELLING_YN
         , ISNULL(A.EXPS_PERCENT,'') AS EXPS_PERCENT
         , ISNULL(A.DED_CODE,'') AS DED_CODE
         , unilite.fnGetUserDateComp(A.COMP_CODE, A.BIRTH_DATE) AS BIRTH_DATE
         , ISNULL(A.TRUST_PROFIT_YN,'') AS TRUST_PROFIT_YN
         , CASE WHEN ISNULL(A.COMP_NUM,'')='' THEN '' 
                ELSE (SUBSTRING(A.COMP_NUM,1,3) + '-' + SUBSTRING(A.COMP_NUM,4,2) + '-' + SUBSTRING(A.COMP_NUM,6,5))
                END AS COMP_NUM
         , ISNULL(A.COMP_KOR_NAME,'') AS COMP_KOR_NAME
         , ISNULL(A.COMP_KOR_ADDR,'') AS COMP_KOR_ADDR
         , CASE WHEN ISNULL(A.COMP_ZIP_CODE,'')='' THEN '' 
                ELSE (SUBSTRING(A.COMP_ZIP_CODE,1,3) + '-' + SUBSTRING(A.COMP_ZIP_CODE,4,3)) 
                END AS COMP_ZIP_CODE
         , ISNULL(A.COMP_TELEPHONE,'') AS COMP_TELEPHONE
         , ISNULL(A.COMP_ENG_NAME,'') AS COMP_ENG_NAME
         , ISNULL(A.COMP_ENG_ADDR,'') AS COMP_ENG_ADDR
         , CASE WHEN ISNULL(A.ZIP_CODE,'')='' THEN '' 
                ELSE (SUBSTRING(A.ZIP_CODE,1,3) + '-' + SUBSTRING(A.ZIP_CODE,4,3))
                END AS ZIP_CODE
         , ISNULL(A.KOR_ADDR,'') AS KOR_ADDR
         , ISNULL(A.ENG_ADDR,'') AS ENG_ADDR
         , ISNULL(A.TELEPHONE,'') AS TELEPHONE
         , ISNULL(A.BANK_CODE,'') AS BANK_CODE
         , ISNULL(A.BANK_NAME,'') AS BANK_NAME
         , unilite.fnCipherDecrypt(A.BANK_ACCOUNT, 'B') AS BANK_ACCOUNT
         , ISNULL(A.USER_YN,'') AS USER_YN  
         , ISNULL(B.BUSS_OFFICE_NAME,'') AS BUSS_OFFICE_NAME  
         , ISNULL(A.BUSS_OFFICE_CODE,'') AS BUSS_OFFICE_CODE  
         , ISNULL(A.EXEDEPT_CODE,'') AS EXEDEPT_CODE  
         , ISNULL(A.EXEDEPT_NAME,'') AS EXEDEPT_NAME  
         , ISNULL(A.COMP_CODE,'') AS COMP_CODE  
         , ISNULL(A.INPUT_PGMID, '')    AS INPUT_PGMID
         , ISNULL(A.REMARK, '')    AS REMARK
         , ISNULL(A.PJT_CODE, '')        AS PJT_CODE
         , ISNULL(M1.PJT_NAME, '')       AS PJT_NAME
         , ISNULL(A.CUSTOM_CODE, '')     AS CUSTOM_CODE
         , ISNULL(M2.CUSTOM_NAME, '')    AS CUSTOM_NAME
      FROM HPB100T A WITH (NOLOCK) 
      LEFT OUTER JOIN HBS230T B WITH (NOLOCK)    ON A.COMP_CODE = B.COMP_CODE
					                            AND A.BUSS_OFFICE_CODE = B.BUSS_OFFICE_CODE
      LEFT JOIN       BCM600T M1 WITH (NOLOCK)   ON M1.COMP_CODE       = A.COMP_CODE
                                                AND M1.PJT_CODE        = A.PJT_CODE
      LEFT JOIN       BCM100T M2 WITH (NOLOCK)   ON M2.COMP_CODE       = A.COMP_CODE
                                                AND M2.CUSTOM_CODE     = A.CUSTOM_CODE   
      <choose>
		<when test="@foren.Ognl@isNotEmpty(DED_TYPE)">
      		WHERE DED_TYPE = #{DED_TYPE}
      	</when>
      	<otherwise>
      		WHERE  1 = 1
      	</otherwise>      	
      </choose>
      	<if test="@foren.Ognl@isNotEmpty(S_COMP_CODE)">
      		AND A.COMP_CODE  = #{S_COMP_CODE}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(SECT_CODE)">
      		AND A.SECT_CODE  = #{SECT_CODE}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
      		AND A.PERSON_NUMB  = #{PERSON_NUMB}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(NAME)">
      		AND NAME  = #{NAME}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(USER_YN)">
      		AND USER_YN  = #{USER_YN}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
      		AND  A.DEPT_CODE  = #{DEPT_CODE}
      	</if>	
		ORDER BY A.PERSON_NUMB
	</select>
	
	<insert id="hpb200ukrServiceImpl.insertList" parameterType="Map">
	/* hpb200ukrServiceImpl.insertList */
	INSERT INTO HPB100T
	     ( DED_TYPE
	     , PERSON_NUMB
	     , NAME
	     , ENG_NAME
	     , DEPT_CODE
	     , DEPT_NAME
	     , DIV_CODE
	     , SECT_CODE
	     , BUSINESS_TYPE
	     , KNOWN_YN
	     , FOREIGN_YN																																											
	     , NATION_CODE
	     , REPRE_NUM
	     , FOREIGN_NUM
	     , RECOGN_NUM
	     , DWELLING_YN
	     , EXPS_PERCENT
	     , DED_CODE
	     , COMP_NUM
	     , COMP_KOR_NAME
	     , COMP_KOR_ADDR
	     , COMP_ZIP_CODE
	     , COMP_TELEPHONE
	     , COMP_ENG_NAME
	     , COMP_ENG_ADDR
	     , ZIP_CODE
	     , KOR_ADDR
	     , ENG_ADDR
	     , TELEPHONE
	     , BANK_CODE
	     , BANK_NAME
	     , BANK_ACCOUNT
	     , USER_YN
	     , BUSS_OFFICE_CODE
	     , EXEDEPT_CODE
	     , EXEDEPT_NAME
	     , COMP_CODE
	     , REMARK
	     , PJT_CODE
	     , CUSTOM_CODE
	     , INSERT_DB_USER
         , INSERT_DB_TIME
         , UPDATE_DB_USER
         , UPDATE_DB_TIME
	     ) 
	VALUES
	     ( #{DED_TYPE}
	     , #{PERSON_NUMB}
	     , #{NAME}
	     , #{ENG_NAME}
	     , #{DEPT_CODE}
	     , #{DEPT_NAME}
	     , #{DIV_CODE}
	     , #{SECT_CODE}
	     , #{BUSINESS_TYPE}
	     , #{KNOWN_YN}
	     , #{FOREIGN_YN}
	     , #{NATION_CODE}
	     , uniLITE.fnCipherEncrypt(#{REPRE_NUM}, '')
	     , uniLITE.fnCipherEncrypt(#{FOREIGN_NUM}, '')
	     , #{RECOGN_NUM}
	     , #{DWELLING_YN}
	     , #{EXPS_PERCENT}
	     , #{DED_CODE}
	     , #{COMP_NUM}
	     , #{COMP_KOR_NAME}
	     , #{COMP_KOR_ADDR}
	     , #{COMP_ZIP_CODE}
	     , #{COMP_TELEPHONE}
	     , #{COMP_ENG_NAME}
	     , #{COMP_ENG_ADDR}
	     , #{ZIP_CODE}
	     , #{KOR_ADDR}
	     , #{ENG_ADDR}
	     , #{TELEPHONE}
	     , #{BANK_CODE}
	     , #{BANK_NAME}
	     , uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
	     , #{USER_YN}
	     , #{BUSS_OFFICE_CODE}
	     , #{DEPT_CODE}
	     , #{DEPT_NAME}
	     , #{S_COMP_CODE}
	     , #{REMARK}
	     , #{PJT_CODE}
	     , #{CUSTOM_CODE}
	     , #{S_USER_ID}
	     , GETDATE()
	     , #{S_USER_ID}
         , GETDATE()
	     )
	</insert>
	
	<update id="hpb200ukrServiceImpl.updateList" parameterType="foren.unilite.modules.human.hpb.Hpb200ukrModel">
	/* hpb200ukrServiceImpl.updateList */
	UPDATE HPB100T
	   SET NAME             = #{NAME}
	     , ENG_NAME         = #{ENG_NAME}
	     , DEPT_CODE        = #{DEPT_CODE}
	     , DEPT_NAME        = #{DEPT_NAME}
	     , DIV_CODE         = #{DIV_CODE}
	     , SECT_CODE        = #{SECT_CODE}
	     , BUSINESS_TYPE    = #{BUSINESS_TYPE}
	     , KNOWN_YN         = #{KNOWN_YN}
	     , FOREIGN_YN       = #{FOREIGN_YN}
	     , NATION_CODE      = #{NATION_CODE}
	     , REPRE_NUM        = uniLITE.fnCipherEncrypt(#{REPRE_NUM}, '')
	     , FOREIGN_NUM      = uniLITE.fnCipherEncrypt(#{FOREIGN_NUM}, '')
	     , RECOGN_NUM       = #{RECOGN_NUM}
	     , DWELLING_YN      = #{DWELLING_YN}
	     , EXPS_PERCENT		= #{EXPS_PERCENT}
	     , DED_CODE         = #{DED_CODE}
	     , BIRTH_DATE       = #{BIRTH_DATE}
	     , TRUST_PROFIT_YN  = #{TRUST_PROFIT_YN}
	     , COMP_NUM         = #{COMP_NUM}
	     , COMP_KOR_NAME    = #{COMP_KOR_NAME}
	     , COMP_KOR_ADDR    = #{COMP_KOR_ADDR}
	     , COMP_ZIP_CODE    = #{COMP_ZIP_CODE}
	     , COMP_TELEPHONE   = #{COMP_TELEPHONE}
	     , COMP_ENG_NAME    = #{COMP_ENG_NAME}
	     , COMP_ENG_ADDR    = #{COMP_ENG_ADDR}
	     , ZIP_CODE         = #{ZIP_CODE}
	     , KOR_ADDR         = #{KOR_ADDR}
	     , ENG_ADDR         = #{ENG_ADDR}
	     , TELEPHONE        = #{TELEPHONE}
	     , BANK_CODE        = #{BANK_CODE}
	     , BANK_NAME        = #{BANK_NAME}
	     , BANK_ACCOUNT     = uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
	     , USER_YN 			= #{USER_YN} 
	     , BUSS_OFFICE_CODE = #{BUSS_OFFICE_CODE}
	     , EXEDEPT_CODE     = #{DEPT_CODE}
	     , EXEDEPT_NAME     = #{DEPT_NAME}
	     , REMARK           = #{REMARK}
	     , PJT_CODE         = #{PJT_CODE}
	     , CUSTOM_CODE      = #{CUSTOM_CODE}
	     , UPDATE_DB_USER   = #{S_USER_ID}
         , UPDATE_DB_TIME   = GETDATE()
	 WHERE DED_TYPE         = #{DED_TYPE}
	   AND PERSON_NUMB      = #{PERSON_NUMB}
	   AND COMP_CODE        = #{S_COMP_CODE}
	</update>
	
	<delete id="hpb200ukrServiceImpl.deleteList" parameterType="Map">
	/* hpb200ukrServiceImpl.deleteList */
	DELETE HPB100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND PERSON_NUMB = #{PERSON_NUMB}
           AND DED_TYPE = #{DED_TYPE}  
	</delete>
	
	<select id="hpb200ukrServiceImpl.checkTopNum" parameterType="Map" resultType="rMap">
        SELECT  CUSTOM_CODE
          FROM BCM100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND REPLACE(unilite.fnCipherDecrypt(TOP_NUM, 'A'),'-','') = #{REPRE_NUM}
         
    </select>
    
    <select id="hpb200ukrServiceImpl.checkBankBookNum" parameterType="Map" resultType="rMap">
        SELECT  CUSTOM_CODE
          FROM BCM130T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND REPLACE(unilite.fnCipherDecrypt(BANKBOOK_NUM, 'B'),'-','') = #{BANK_ACCOUNT}
         
    </select>
    
    <select id="hpb200ukrServiceImpl.checkName" parameterType="Map" resultType="rMap">
        SELECT  NAME
          FROM HPB100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND REPLACE(unilite.fnCipherDecrypt(REPRE_NUM, 'A'),'-','') = #{REPRE_NUM}
           AND DED_TYPE = #{DED_TYPE} 
    </select>
    
    <select id="hpb200ukrServiceImpl.beforeDeleteCheck1" parameterType="Map" resultType="rMap">
        SELECT 
           PERSON_NUMB 
          FROM HPB200T WITH (NOLOCK)
         WHERE COMP_CODE   = #{S_COMP_CODE} 
           AND PERSON_NUMB = #{PERSON_NUMB}
           AND DED_TYPE = #{DED_TYPE} 
    </select>
    
    <select id="hpb200ukrServiceImpl.beforeDeleteCheck2" parameterType="Map" resultType="rMap">

        SELECT ISNULL((SELECT TOP 1 1
                  FROM AGJ110T WITH (NOLOCK)
                 WHERE COMP_CODE = #{S_COMP_CODE}
                   AND (MOD_DIVI IS NULL OR MOD_DIVI = '')
                   AND ((AC_CODE1='A4' AND AC_DATA1 = #{PERSON_NUMB})    
                    OR  (AC_CODE2='A4' AND AC_DATA2 = #{PERSON_NUMB})    
                    OR  (AC_CODE3='A4' AND AC_DATA3 = #{PERSON_NUMB})    
                    OR  (AC_CODE4='A4' AND AC_DATA4 = #{PERSON_NUMB})    
                    OR  (AC_CODE5='A4' AND AC_DATA5 = #{PERSON_NUMB})    
                    OR  (AC_CODE6='A4' AND AC_DATA6 = #{PERSON_NUMB}))), 0) +
        ISNULL((SELECT TOP 1 1                                                        
                  FROM AGJ210T WITH (NOLOCK)
                 WHERE COMP_CODE = #{S_COMP_CODE}
                   AND (MOD_DIVI IS NULL OR MOD_DIVI = '')
                   AND ((AC_CODE1='A4' AND AC_DATA1 = #{PERSON_NUMB})    
                    OR  (AC_CODE2='A4' AND AC_DATA2 = #{PERSON_NUMB})    
                    OR  (AC_CODE3='A4' AND AC_DATA3 = #{PERSON_NUMB})    
                    OR  (AC_CODE4='A4' AND AC_DATA4 = #{PERSON_NUMB})    
                    OR  (AC_CODE5='A4' AND AC_DATA5 = #{PERSON_NUMB})    
                    OR  (AC_CODE6='A4' AND AC_DATA6 = #{PERSON_NUMB}))), 0) +
        ISNULL((SELECT TOP 1 1                                                        
                  FROM AGJ800T  WITH (NOLOCK)
                 WHERE COMP_CODE = #{S_COMP_CODE}
                   AND (BOOK_CODE1='A4' AND BOOK_DATA1 = #{PERSON_NUMB}) 
                    OR (BOOK_CODE2='A4' AND BOOK_DATA2 = #{PERSON_NUMB})), 0)  AS CNT
    </select>
    
    <select id="hpb200ukrServiceImpl.beforeDeleteCheck3" parameterType="Map" resultType="rMap">
        SELECT 
           PERSON_NUMB 
          FROM HPB100T WITH (NOLOCK)
         WHERE COMP_CODE   = #{S_COMP_CODE} 
           AND PERSON_NUMB = #{PERSON_NUMB}
           AND DED_TYPE != '2'
    </select>
    
    <select id="hpb200ukrServiceImpl.getAutoCustomCode" parameterType="Map" resultType="rMap">        
        DECLARE @COMP_CODE NVARCHAR(10), @sAUTO_CUSTOM_CODE NVARCHAR(20)
            SET @COMP_CODE = #{S_COMP_CODE}
           EXEC uniLITE.USP_GetCustomCode @COMP_CODE, @sAUTO_CUSTOM_CODE OUTPUT

         SELECT @sAUTO_CUSTOM_CODE  AS  CUSTOM_CODE
    </select>   
    
    
    <insert id="hpb200ukrServiceImpl.insertListAutoCustom" parameterType="Map">
    
    INSERT INTO BCM100T
         ( 
              COMP_CODE
            , CUSTOM_CODE
            , CUSTOM_TYPE
            , CUSTOM_NAME
            , TOP_NUM
            , BUSINESS_TYPE
            , USE_YN
            , ZIP_CODE
            , ADDR1
            , TELEPHON
            , START_DATE
            , AGENT_TYPE
            , BILL_PUBLISH_TYPE
            , INSERT_DB_USER
            , INSERT_DB_TIME
            , UPDATE_DB_USER
            , UPDATE_DB_TIME
         ) 
    VALUES
         (  #{S_COMP_CODE}
          , #{PERSON_NUMB}
          , '1'
          , #{NAME}
          , uniLITE.fnCipherEncrypt(#{REPRE_NUM}, '')
          , '3'
          , 'Y'
          , #{ZIP_CODE}
          , #{KOR_ADDR}
          , #{TELEPHONE}
          , GETDATE()
          , (SELECT TOP 1 SUB_CODE FROM BSA100T WHERE COMP_CODE = #{S_COMP_CODE} AND REF_CODE4 = '1')
          , '1'
          , #{S_USER_ID}
          , GETDATE()
          , #{S_USER_ID}
          , GETDATE()
         )
    </insert>
    
    <update id="hpb200ukrServiceImpl.updateListAutoCustom" parameterType="Map">
    /* hpb200ukrServiceImpl.updateList */
    UPDATE BCM100T
       SET CUSTOM_NAME     = #{NAME}
         , TOP_NUM         = uniLITE.fnCipherEncrypt(#{REPRE_NUM}, '')
         , ZIP_CODE        = #{ZIP_CODE}
         , ADDR1           = #{KOR_ADDR}
         , TELEPHON        = #{TELEPHONE}
         , UPDATE_DB_USER   = #{S_USER_ID}
         , UPDATE_DB_TIME   = GETDATE()
     WHERE CUSTOM_CODE     = #{PERSON_NUMB}
       AND COMP_CODE       = #{S_COMP_CODE}
    </update>
    
    <delete id="hpb200ukrServiceImpl.deleteListAutoCustom" parameterType="Map">

    DELETE BCM100T 
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND CUSTOM_CODE = #{PERSON_NUMB}
    </delete>
    
    <insert id="hpb200ukrServiceImpl.insertListAutoBankAccount" parameterType="Map">
    /* hpb200ukrServiceImpl.insertList */
    INSERT INTO BCM130T
         ( 
              COMP_CODE
            , CUSTOM_CODE
            , BOOK_CODE
            , BOOK_NAME
            , BANK_CODE
            , BANKBOOK_NUM
            , BANKBOOK_NAME
            , MAIN_BOOK_YN
            
            , INSERT_DB_USER
            , INSERT_DB_TIME
            , UPDATE_DB_USER
            , UPDATE_DB_TIME
         ) 
    VALUES
         (  #{S_COMP_CODE}
          , #{PERSON_NUMB}
          , (SELECT ISNULL(MAX(BOOK_CODE),'0') FROM BCM130T WHERE COMP_CODE = #{S_COMP_CODE} AND CUSTOM_CODE = #{PERSON_NUMB}) + 1
          , (#{BANK_NAME} + '(' + right(#{BANK_ACCOUNT_DEC}, 5) + ')')
          , #{BANK_CODE}
          , uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
          , #{NAME}
          , 'Y'
          , #{S_USER_ID}
          , GETDATE()
          , #{S_USER_ID}
          , GETDATE()
         )
    </insert>
    
    <update id="hpb200ukrServiceImpl.updateListAutoBankAccount" parameterType="Map">
    /* hpb200ukrServiceImpl.updateList */
    UPDATE BCM130T
       SET 
           BOOK_NAME        = (#{BANK_NAME} + '(' + right(#{BANK_ACCOUNT_DEC}, 5) + ')')
          ,BANK_CODE        = #{BANK_CODE}
          ,BANKBOOK_NUM     = uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
          ,BANKBOOK_NAME    = #{NAME}
         , UPDATE_DB_USER   = #{S_USER_ID}
         , UPDATE_DB_TIME   = GETDATE()
     WHERE  COMP_CODE     = #{S_COMP_CODE}
        AND CUSTOM_CODE   = #{PERSON_NUMB}
        AND REPLACE(unilite.fnCipherDecrypt(BANKBOOK_NUM, 'B'),'-','') = #{BANK_ACCOUNT_BEFOREUPDATE}
    </update>
    
    <delete id="hpb200ukrServiceImpl.deleteListAutoBankAccount" parameterType="Map">

    DELETE BCM130T 
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND CUSTOM_CODE = #{PERSON_NUMB}
    </delete>
</mapper>