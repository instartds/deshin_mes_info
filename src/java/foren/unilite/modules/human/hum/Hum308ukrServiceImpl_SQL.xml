<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum308ukrService">
	<update id="hum308ukrService.Hum100MasterUpdate" parameterType="Map">
		-- 인사마스터에 변경된 정보를 UPDATE
		--UHum04Krv.CHum206UKr SetHum206[fnhum206save] Query04
        UPDATE HUM100T
        SET    DIV_CODE  			= #{AF_DIV_NAME}
        	 , DEPT_CODE 			= #{AF_DEPT_CODE}
             , DEPT_NAME 			= #{AF_DEPT_NAME}
             , POST_CODE 			= #{POST_CODE}
             <if test="@foren.Ognl@isExists(_parameter, 'ABIL_CODE')">
             , ABIL_CODE 			= #{ABIL_CODE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_01')">
             , PAY_GRADE_01 		= #{PAY_GRADE_01}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_02')">
             , PAY_GRADE_02 		= #{PAY_GRADE_02}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_BASE')">
             , PAY_GRADE_BASE 		= #{PAY_GRADE_BASE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'YEAR_GRADE')">
             , YEAR_GRADE 			= #{YEAR_GRADE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'YEAR_GRADE_BASE')">
             , YEAR_GRADE_BASE 		= #{YEAR_GRADE_BASE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'WAGES_STD_I')">
             , WAGES_STD_I 			= #{WAGES_STD_I}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'COST_KIND')">
             , COST_KIND 			= #{COST_KIND}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'ANNUAL_SALARY_I')">
             , ANNUAL_SALARY_I 		= #{ANNUAL_SALARY_I}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'EMPLOY_TYPE')">
             , EMPLOY_TYPE 			= #{EMPLOY_TYPE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'OFFICE_CODE')">
             , OFFICE_CODE 			= #{OFFICE_CODE}
             </if>
             <if test="@foren.Ognl@isExists(_parameter, 'ROUTE_GROUP')">
             , ROUTE_GROUP 			= #{ROUTE_GROUP}
             </if>
        
         WHERE COMP_CODE   = #{S_COMP_CODE}
           AND PERSON_NUMB = #{PERSON_NUMB}
	</update>
	
	
	
	<select id="hum308ukrService.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>

	
	<select id="hum308ukrService.select" parameterType="Map" resultType="rMap">	/* 조회쿼리 */
		  --hum308ukr.Chum308ukr[fnHum308QStd] QUERY01
		 
		    
		    SELECT  
		            M.COMP_CODE           
		         ,  A.DIV_CODE            
		         ,  A.DEPT_NAME           
		         ,  A.POST_CODE  AS  POST_CODE2 
		         ,  A.NAME                
		         ,  A.PERSON_NUMB     
		         ,  CONVERT(VARCHAR(10),CAST(M.ANNOUNCE_DATE AS smalldatetime),102)   AS ANNOUNCE_DATE
		         ,  M.ANNOUNCE_CODE
		         ,  M.BE_DIV_NAME
		         ,  M.AF_DIV_NAME
		         ,  M.BE_DEPT_CODE
		         ,  M.BE_DEPT_NAME
		         ,  M.AF_DEPT_CODE
		         ,  M.AF_DEPT_NAME
		         ,  M.POST_CODE
		         ,  M.ABIL_CODE
		         ,  M.ANNOUNCE_REASON
		         ,  M.PAY_GRADE_01          --급
		         ,  M.PAY_GRADE_02          --호
		         ,  M.PAY_GRADE_BASE        --승급기준
		         ,  M.YEAR_GRADE            --근속
		         ,  M.YEAR_GRADE_BASE       --승급기준(근속)
		         ,  M.COST_KIND             --사업명
		         ,  M.WAGES_STD_I           --연봉
		         ,  M.ANNUAL_SALARY_I       --연봉
		         ,  M.OFFICE_CODE           --영업소(버스회사전용)
		         ,  M.ROUTE_GROUP           --소속그룹(버스회사전용)
		         ,  M.EMPLOY_TYPE           --사원구분(버스회사전용)
		         ,  CASE WHEN ISNULL(U1.SUB_CODE, N'')  = '' AND ISNULL(U2.SUB_CODE, N'')  = '' THEN N'직위, 직책코드 오류'
		                 WHEN ISNULL(U1.SUB_CODE, N'')  = '' AND ISNULL(U2.SUB_CODE, N'') != '' THEN N'직위코드 오류'
		                 WHEN ISNULL(U1.SUB_CODE, N'') != '' AND ISNULL(U2.SUB_CODE, N'')  = '' THEN N'직책코드 오류'
		                 WHEN ISNULL(U1.SUB_CODE, N'') != '' AND ISNULL(U2.SUB_CODE, N'') != '' THEN N''
		            END                                                                                 AS CODE_CHECK
		         ,  M.INSERT_DB_USER
		         ,  M.INSERT_DB_TIME
		         ,  M.UPDATE_DB_USER
		         ,  M.UPDATE_DB_TIME
		    FROM               HUM760T AS M WITH (NOLOCK)
		            INNER JOIN HUM100T AS A WITH (NOLOCK) ON M.COMP_CODE        = A.COMP_CODE
		                                                 AND M.PERSON_NUMB      = A.PERSON_NUMB
		    
		            LEFT  JOIN BSA100T AS B WITH (NOLOCK) ON M.COMP_CODE        = B.COMP_CODE
		                                                 AND B.SUB_CODE         = A.EMPLOY_TYPE
		                                                 AND B.MAIN_CODE        = 'H024'
		            LEFT  JOIN CBM600T AS C WITH (NOLOCK) ON C.COMP_CODE        = A.COMP_CODE
		                                                 AND C.COST_POOL_CODE   = A.COST_KIND
		            LEFT  JOIN (SELECT  SUB_CODE, COMP_CODE
		                        FROM    BSA100T
		                        WHERE   COMP_CODE = #{S_COMP_CODE}
		                        AND     MAIN_CODE = N'H005') AS U1 ON U1.COMP_CODE = M.COMP_CODE
		                                                          AND U1.SUB_CODE  = M.POST_CODE
		            LEFT  JOIN (SELECT  SUB_CODE, COMP_CODE
		                        FROM    BSA100T
		                        WHERE   COMP_CODE = #{S_COMP_CODE}
		                        AND     MAIN_CODE = N'H006') AS U2 ON U2.COMP_CODE = M.COMP_CODE
		                                                          AND U2.SUB_CODE  = M.ABIL_CODE 
		    
		    WHERE   M.COMP_CODE     =   #{S_COMP_CODE}
		    
		    	<if test="@foren.Ognl@isNotEmpty(NAME)">
			   	AND A.NAME   LIKE + '%' +  #{NAME} + '%'
	            </if>
	            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				AND A.PERSON_NUMB  = #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(DEPTS)">
				   AND  A.DEPT_CODE	 IN
					 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
			          		 #{item}
			    	 </foreach>
				</if>
				<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
			        AND A.DIV_CODE IN
						<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
						 #{item}
						</foreach>									
			    </if>
	            <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
				   AND A.PAY_GUBUN  	= #{PAY_GUBUN}					-- 고용형태
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
				   AND A.PAY_CODE 		= #{PAY_CODE}		 	 		-- 급여지급방식
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
				   AND A.PAY_PROV_FLAG 	= #{PAY_PROV_FLAG}		 		-- 급여지급차수
				</if>
				<if test="@foren.Ognl@isNotEmpty(EMPLOY_GUBUN)">
				   AND A.EMPLOY_TYPE 	= #{EMPLOY_GUBUN}		 		-- 사원구분
				</if>
				<if test="@foren.Ognl@isNotEmpty(COST_POOL)">
				   AND A.COST_KIND 		= #{COST_POOL}		 	 		-- 사업명
				</if>
				<if test="@foren.Ognl@isNotEmpty(PERSON_GROUP)">
				   AND B.REF_CODE1 		= #{PERSON_GROUP}		 		-- 사원그룹
				</if>
				<if test="RDO_TYPE == &quot;A&quot;">
					AND A.RETR_DATE = '00000000'						-- 재직구분 (재직)
				</if>
				<if test="RDO_TYPE == &quot;B&quot;">
					AND A.RETR_DATE != '00000000'						-- 재직구분 (퇴사)
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
				   AND M.ANNOUNCE_CODE 	= #{ANNOUNCE_CODE}		 		-- 교육명
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_FR_DATE)">
				   AND M.ANNOUNCE_DATE 	&gt;= #{ANNOUNCE_FR_DATE}		-- 교육기간 FR
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_TO_DATE)">
				   AND M.ANNOUNCE_DATE  &lt;= #{ANNOUNCE_TO_DATE}		-- 교육기간 TO
				</if>
				<if test="@foren.Ognl@isNotEmpty(SEX_CODE)">
				   AND A.SEX_CODE 	= #{SEX_CODE}		 				-- 성별
				</if>
		    
		    ORDER   BY A.DIV_CODE, A.DEPT_CODE, A.POST_CODE, A.JOIN_DATE, A.NAME, A.PERSON_NUMB
	</select>
	
	<insert id="hum308ukrService.insertDetail" parameterType="Map">    /* 추가 */
	--Hum308ukr.CHum308UKR[fnHum308Save] Query02
		INSERT INTO HUM760T
		     ( COMP_CODE
		     , PERSON_NUMB
		     , ANNOUNCE_DATE
		     , ANNOUNCE_CODE
		     <if test="@foren.Ognl@isNotEmpty(BE_DIV_NAME)">
		     , BE_DIV_NAME
		     </if>
		     , AF_DIV_NAME
		     <if test="@foren.Ognl@isNotEmpty(BE_DEPT_CODE)">
		     , BE_DEPT_CODE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(BE_DEPT_NAME)">
		     , BE_DEPT_NAME
		     </if>
		     , AF_DEPT_CODE
		     , AF_DEPT_NAME
		     , POST_CODE
		     <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
		     , ABIL_CODE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_REASON)">
		     , ANNOUNCE_REASON
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
		     , PAY_GRADE_01
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
		     , PAY_GRADE_02
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
		     , PAY_GRADE_BASE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(YEAR_GRADE)">
		     , YEAR_GRADE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(YEAR_GRADE_BASE)">
		     , YEAR_GRADE_BASE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(COST_KIND)">
		     , COST_KIND
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(WAGES_STD_I)">
		     , WAGES_STD_I
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ANNUAL_SALARY_I)">
		     , ANNUAL_SALARY_I
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
		     , OFFICE_CODE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
		     , ROUTE_GROUP
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">
		     , EMPLOY_TYPE
		     </if>
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     ) 
		VALUES
		     ( #{S_COMP_CODE}
		     , #{PERSON_NUMB}
		     , #{ANNOUNCE_DATE}
		     , #{ANNOUNCE_CODE}
		     <if test="@foren.Ognl@isNotEmpty(BE_DIV_NAME)">
		     , #{BE_DIV_NAME}
		     </if>
		     , #{AF_DIV_NAME}
		     <if test="@foren.Ognl@isNotEmpty(BE_DEPT_CODE)">
		     , #{BE_DEPT_CODE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(BE_DEPT_NAME)">
		     , #{BE_DEPT_NAME}
		     </if>
		     , #{AF_DEPT_CODE}
		     , #{AF_DEPT_NAME}
		     , #{POST_CODE}
		     <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
		     , #{ABIL_CODE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_REASON)">
		     , #{ANNOUNCE_REASON}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
		     , #{PAY_GRADE_01}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
		     , #{PAY_GRADE_02}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
		     , #{PAY_GRADE_BASE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(YEAR_GRADE)">
		     , #{YEAR_GRADE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(YEAR_GRADE_BASE)">
		     , #{YEAR_GRADE_BASE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(COST_KIND)">
		     , #{COST_KIND}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(WAGES_STD_I)">
		     , #{WAGES_STD_I}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ANNUAL_SALARY_I)">
		     , #{ANNUAL_SALARY_I}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
		     , #{OFFICE_CODE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
		     , #{ROUTE_GROUP}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">
		     , #{EMPLOY_TYPE}
		     </if>
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		     )
	</insert>
	
	<update id="hum308ukrService.updateDetail" parameterType="Map">		/* 수정 */
	
	--Hum308ukr.CHum308UKR[fnHum308Save] Query02
		UPDATE HUM760T
		   SET 
		       INSERT_DB_USER  = #{S_USER_ID}
		     , UPDATE_DB_USER  = #{S_USER_ID}
		     , UPDATE_DB_TIME  = GETDATE()
		     <if test="@foren.Ognl@isExists(_parameter, 'BE_DIV_NAME')">
		     , BE_DIV_NAME     = #{BE_DIV_NAME}
		     </if>
		     , AF_DIV_NAME     = #{AF_DIV_NAME}
		     <if test="@foren.Ognl@isExists(_parameter, 'BE_DEPT_CODE')">
		     , BE_DEPT_CODE    = #{BE_DEPT_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BE_DEPT_NAME')">
		     , BE_DEPT_NAME    = #{BE_DEPT_NAME}
		     </if>
		     , AF_DEPT_CODE    = #{AF_DEPT_CODE}
		     , AF_DEPT_NAME    = #{AF_DEPT_NAME}
		     , POST_CODE       = #{POST_CODE}
		     <if test="@foren.Ognl@isExists(_parameter, 'ABIL_CODE')">
		     , ABIL_CODE       = #{ABIL_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'ANNOUNCE_REASON')">
		     , ANNOUNCE_REASON = #{ANNOUNCE_REASON}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_01')">
		     , PAY_GRADE_01    = #{PAY_GRADE_01}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_02')">
		     , PAY_GRADE_02    = #{PAY_GRADE_02}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_BASE')">
		     , PAY_GRADE_BASE  = #{PAY_GRADE_BASE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'YEAR_GRADE')">
		     , YEAR_GRADE      = #{YEAR_GRADE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'YEAR_GRADE_BASE')">
		     , YEAR_GRADE_BASE = #{YEAR_GRADE_BASE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'COST_KIND')">
		     , COST_KIND       = #{COST_KIND}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'WAGES_STD_I')">
		     , WAGES_STD_I     = #{WAGES_STD_I}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'ANNUAL_SALARY_I')">
		     , ANNUAL_SALARY_I = #{ANNUAL_SALARY_I}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'OFFICE_CODE')">
		     , OFFICE_CODE     = #{OFFICE_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'ROUTE_GROUP')">
		     , ROUTE_GROUP     = #{ROUTE_GROUP}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'EMPLOY_TYPE')">
		     , EMPLOY_TYPE     = #{EMPLOY_TYPE}
		     </if>
		 WHERE COMP_CODE     = #{S_COMP_CODE}
		   AND PERSON_NUMB   = #{PERSON_NUMB}
		   AND ANNOUNCE_DATE = #{ANNOUNCE_DATE}
		   AND ANNOUNCE_CODE = #{ANNOUNCE_CODE}
	</update>
	
	<delete id="hum308ukrService.deleteDetail" parameterType="Map">		/* 삭제 */
		--Hum308ukr.CHum308UKR1[fnHum308Save] Query02
		DELETE FROM HUM760T 
		 WHERE COMP_CODE     = #{S_COMP_CODE}
		   AND PERSON_NUMB   = #{PERSON_NUMB}
		   AND ANNOUNCE_DATE = #{ANNOUNCE_DATE}
		   AND ANNOUNCE_CODE = #{ANNOUNCE_CODE}
	</delete>
	
	
	<insert id="hum308ukrService.insertExcelHum760t_xls" parameterType="Map">		/* 엑셀insert */
		INSERT INTO HUM760t_XLS
		     ( _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_HAS_ERROR
		     , _EXCEL_ERROR_MSG
		     
		     , NAME   			
			 , ANNOUNCE_DATE		
			 , ANNOUNCE_CODE		
			 , BE_DIV_NAME		
			 , AF_DIV_NAME		
			 , BE_DEPT_CODE		
			 , BE_DEPT_NAME		
			 , AF_DEPT_CODE		
			 , AF_DEPT_NAME		
			 , POST_CODE	    	
			 , ABIL_CODE			
			 , ANNOUNCE_REASON	
			 , PAY_GRADE_01 		
		     , PAY_GRADE_02 		
		     , PAY_GRADE_BASE		
		     , YEAR_GRADE 		
		     , YEAR_GRADE_BASE 	
		     , WAGES_STD_I		
		     , ANNUAL_SALARY_I 	
		     , OFFICE_CODE 		
		     , ROUTE_GROUP		
		     , EMPLOY_TYPE 		
		     , COST_KIND 		
		     	
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , COMP_CODE     
		     ) 
		VALUES
		     ( #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		     , #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}
		     , #{_EXCEL_ERROR,jdbcType=VARCHAR}
		     
		     , #{NAME}   			
			 , #{ANNOUNCE_DATE}		
			 , #{ANNOUNCE_CODE}		
			 , #{BE_DIV_NAME}		
			 , #{AF_DIV_NAME}		
			 , #{BE_DEPT_CODE}		
			 , #{BE_DEPT_NAME}		
			 , #{AF_DEPT_CODE}		
			 , #{AF_DEPT_NAME}		
			 , #{POST_CODE}	    	
			 , #{ABIL_CODE}			
			 , #{ANNOUNCE_REASON}	
			 , #{PAY_GRADE_01} 		
		     , #{PAY_GRADE_02} 		
		     , #{PAY_GRADE_BASE}		
		     , #{YEAR_GRADE} 		
		     , #{YEAR_GRADE_BASE} 	
		     , #{WAGES_STD_I}		
		     , #{ANNUAL_SALARY_I} 	
		     , #{OFFICE_CODE} 		
		     , #{ROUTE_GROUP}		
		     , #{EMPLOY_TYPE} 		
		     , #{COST_KIND} 			
		     
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_COMP_CODE}
		     )
	</insert>

	<select id="hum308ukrService.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">	/* 엑셀업로드 버튼 / 조회 */
		BEGIN
	    SET NOCOUNT ON
	    SET ARITHABORT ON
	
	    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
	          , @UserId      NVARCHAR(100) /* 사용자ID    */
	          , @LangType    NVARCHAR(2)  /* 언어구분    */
	          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
	          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
	
	    SET @CompCode = #{S_COMP_CODE}
	    SET @UserId   = #{S_USER_ID}
	    SET @LangType = #{S_LANG_CODE}  
	
	    /* 명칭 참조 유형 */
	    SELECT TOP 1 @RefItem = REF_ITEM
	      FROM BSA300T WITH (NOLOCK)
	     WHERE USER_ID = @UserId
	
	    SET @RefItem = ISNULL(@RefItem, N'0')
	
	    /* 날짜 포맷 유형 설정 */
	    SELECT TOP 1 @DateFormat = CODE_NAME
	      FROM BSA100T WITH (NOLOCK)
	     WHERE COMP_CODE = @CompCode
	       AND MAIN_CODE = N'B044'
	       AND REF_CODE1 = N'Y'
	
	    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
	
	    /* 데이터 조회 */	
		    SELECT A._EXCEL_JOBID
				 , A._EXCEL_ROWNUM
				 , A._EXCEL_HAS_ERROR
				 , A._EXCEL_ERROR_MSG
				 , A.NAME   			-- 성명
				 , B.PERSON_NUMB		-- 사번
				 , A.ANNOUNCE_DATE		-- 발령일자 
				 , A.ANNOUNCE_CODE		-- 발령코드
				 , A.BE_DIV_NAME		-- 발령전사업장
				 , A.AF_DIV_NAME		-- 발령후사업장
				 , A.BE_DEPT_CODE		-- 발령전부서코드
				 , A.BE_DEPT_NAME		-- 발령전부서명
				 , A.AF_DEPT_CODE		-- 발령후부서코드
				 , A.AF_DEPT_NAME		-- 발령후부서명
				 , A.POST_CODE	    	-- 직위코드
				 , A.ABIL_CODE			-- 직책코드
				 , A.ANNOUNCE_REASON	-- 발령사유
				 , A.PAY_GRADE_01 		-- 호봉(급)
			     , A.PAY_GRADE_02 		-- 호봉(호)
			     , A.PAY_GRADE_BASE		-- 호봉승급기준
			     , A.YEAR_GRADE 		-- 근속(년)
			     , A.YEAR_GRADE_BASE 	-- 근속년승급기준
			     , A.WAGES_STD_I		-- 호봉테이블의기본급
			     , A.ANNUAL_SALARY_I 	-- 연봉
			     , A.OFFICE_CODE 		-- 영업소
			     , A.ROUTE_GROUP		-- 소속그룹
			     , A.EMPLOY_TYPE 		-- 사원구분(직종)
			     , A.COST_KIND 			-- 사업명
				 	
			     , A.UPDATE_DB_USER 
			     , A.UPDATE_DB_TIME 
			     , A.COMP_CODE 
			  FROM HUM760t_XLS  A
			  
			  LEFT JOIN HUM100T B   ON B.COMP_CODE = #{S_COMP_CODE}
			  					   AND A.NAME      = B.NAME
			  					   
			  					   
			 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		  	ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	END
	</select>

	<update id="excelValidate" >	/* 엑셀validation */
		
	UPDATE   A
	SET 
			A._EXCEL_HAS_ERROR = (CASE WHEN 
										A.NAME   		  IS NULL 	   OR		-- 성명
										A.ANNOUNCE_DATE   IS NULL 	   OR		-- 발령일자
										A.ANNOUNCE_CODE   IS NULL  THEN 'Y'		-- 발령코드
										
							  	   ELSE A._EXCEL_HAS_ERROR 				    	-- 필수값 체크
						      	 END),
			
			
	
						     
			A._EXCEL_ERROR_MSG = (CASE WHEN  A.NAME   		 	IS NULL 	    OR
											 A.ANNOUNCE_DATE    IS NULL 	    OR
										     A.ANNOUNCE_CODE    IS NULL  THEN '필수입력 값을 확인 해주세요.'
							  	   	   ELSE  A._EXCEL_ERROR_MSG 
						      	 END)
								 
	FROM HUM760t_XLS A 	

	UPDATE   A
	SET 
			A._EXCEL_HAS_ERROR = (CASE WHEN 
										B.NAME   IS NULL THEN 'Y'		-- HUM100 사번 체크
							  	   ELSE A._EXCEL_HAS_ERROR 				-- 필수값 체크
						      	 END),
			
			
	
						     
			A._EXCEL_ERROR_MSG = (CASE WHEN  
										B.NAME   IS NULL  THEN '인사정보에 없는 성명이 존재합니다.'
							  	   ELSE A._EXCEL_ERROR_MSG 
						      	 END)
								 
	FROM HUM760t_XLS A 
	
	LEFT JOIN HUM100T B  ON B.COMP_CODE = #{S_COMP_CODE}
						AND B.NAME  = A.NAME
						
	
	
	</update>
	
	
	
	<select id="hum308ukrService.selectExcelUploadApply" parameterType="Map" resultType="rMap">	/* 엑셀업로드 버튼 / 조회 */
		BEGIN
	    SET NOCOUNT ON
	    SET ARITHABORT ON
	
	    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
	          , @UserId      NVARCHAR(100) /* 사용자ID    */
	          , @LangType    NVARCHAR(2)  /* 언어구분    */
	          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
	          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
	
	    SET @CompCode = #{S_COMP_CODE}
	    SET @UserId   = #{S_USER_ID}
	    SET @LangType = #{S_LANG_CODE}  
	
	    /* 명칭 참조 유형 */
	    SELECT TOP 1 @RefItem = REF_ITEM
	      FROM BSA300T WITH (NOLOCK)
	     WHERE USER_ID = @UserId
	
	    SET @RefItem = ISNULL(@RefItem, N'0')
	
	    /* 날짜 포맷 유형 설정 */
	    SELECT TOP 1 @DateFormat = CODE_NAME
	      FROM BSA100T WITH (NOLOCK)
	     WHERE COMP_CODE = @CompCode
	       AND MAIN_CODE = N'B044'
	       AND REF_CODE1 = N'Y'
	
	    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
	
	    /* 데이터 조회 */	
		    SELECT A._EXCEL_JOBID
				 , A._EXCEL_ROWNUM
				 , A._EXCEL_HAS_ERROR
				 , A._EXCEL_ERROR_MSG
				 , B.DIV_CODE
				 , B.DEPT_NAME
				 , B.POST_CODE AS POST_CODE2
				 , A.NAME   			-- 성명
				 , B.PERSON_NUMB		-- 사번
				 , A.ANNOUNCE_DATE		-- 발령일자 
				 , A.ANNOUNCE_CODE		-- 발령코드
				 , A.BE_DIV_NAME		-- 발령전사업장
				 , A.AF_DIV_NAME		-- 발령후사업장
				 , A.BE_DEPT_CODE		-- 발령전부서코드
				 , A.BE_DEPT_NAME		-- 발령전부서명
				 , A.AF_DEPT_CODE		-- 발령후부서코드
				 , A.AF_DEPT_NAME		-- 발령후부서명
				 , A.POST_CODE	    	-- 직위코드
				 , A.ABIL_CODE			-- 직책코드
				 , A.ANNOUNCE_REASON	-- 발령사유
				 , A.PAY_GRADE_01 		-- 호봉(급)
			     , A.PAY_GRADE_02 		-- 호봉(호)
			     , A.PAY_GRADE_BASE		-- 호봉승급기준
			     , A.YEAR_GRADE 		-- 근속(년)
			     , A.YEAR_GRADE_BASE 	-- 근속년승급기준
			     , A.WAGES_STD_I		-- 호봉테이블의기본급
			     , A.ANNUAL_SALARY_I 	-- 연봉
			     , A.OFFICE_CODE 		-- 영업소
			     , A.ROUTE_GROUP		-- 소속그룹
			     , A.EMPLOY_TYPE 		-- 사원구분(직종)
			     , A.COST_KIND 			-- 사업명
			     , A.UPDATE_DB_USER 
			     , A.UPDATE_DB_TIME 
			     , A.COMP_CODE 
			  FROM HUM760t_XLS A
			  LEFT JOIN HUM100T B   ON B.COMP_CODE = #{S_COMP_CODE}
			  					   AND A.NAME      = B.NAME
			  
			 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		  	ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	END
	</select>
</mapper>