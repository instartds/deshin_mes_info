<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum110ukrServiceImpl">
	<!-- 데이터 조회 -->
	<select id="hum110ukrServiceImpl.getSelectList" parameterType="rMap" resultType="rMap">
		/* hum110ukrServiceImpl.getSelectList */
		SELECT DISTINCT A.AUTO_NUM
			 , A.PROC_YN
			 , A.COMP_CODE
			 , A.DIV_CODE
			 , A.SECT_CODE
			 , A.PERSON_NUMB
			 , A.NAME
			 , A.NAME_ENG
			 , A.NAME_CHI
			 , A.SEX_CODE
			 , A.BIRTH_DATE
			 , unilite.fnCipherDecrypt(A.REPRE_NUM, '') AS REPRE_NUM  -- 주민번호
			 , A.DEPT_CODE
			 , A.DEPT_NAME
			 , A.POST_CODE
			 , A.ABIL_CODE
			 , A.AFFIL_CODE
			 , A.KNOC
			 , A.BUSS_OFFICE_CODE
			 , A.PAY_GUBUN
			 , A.ZIP_CODE
			 , A.KOR_ADDR
			 , A.NATION_CODE
			 , A.LIVE_CODE
			 , A.JOIN_DATE
			 , A.ORI_JOIN_DATE
			 , A.JOIN_CODE
			 , A.EMPLOY_TYPE
			 , A.RETR_OT_KIND
			 , A.JOB_CODE
			 , A.PAY_GRADE_BASE
			 , A.PAY_GRADE_01
			 , A.PAY_GRADE_02
			 , A.ANNUAL_SALARY_I
			 , A.WAGES_STD_I
			 , A.PAY_PROV_FLAG
			 , A.PAY_CODE
			 , A.TAX_CODE
			 , A.TAX_CODE2
			 , A.BANK_CODE1
			 , B.CUSTOM_NAME								AS BANK_NAME1
			 , unilite.fnCipherDecrypt(A.BANK_ACCOUNT1, '') AS BANK_ACCOUNT1
			 , A.BANK_ACCOUNT1
			 , A.BANKBOOK_NAME
			 , A.EMAIL_ADDR
			   
			 , A.MED_AVG_I
			 , A.ORI_MED_INSUR_I
			 , A.OLD_MED_INSUR_I
			 , A.ANU_BASE_I
			 , A.ANU_INSUR_I
			   
			 , A.MAKE_SALE
			 , A.PHONE_NO
			 , A.WEDDING_DATE
			 , A.FOREIGN_NUM
			 , A.LIVE_GUBUN
			 , A.HOUSEHOLDER_YN

			 , CASE WHEN ISNULL(A1.PERSON_NUMB, 'N') = A.PERSON_NUMB THEN 'Y'
					ELSE 'N'
					END AS NUNB_YN
			 , CASE WHEN ISNULL(A2.REPRE_NUM, 'N') = A.REPRE_NUM THEN 'Y'
					ELSE 'N'
					END AS REPER_YN
		  FROM HUM100T_UPD A		 WITH (NOLOCK)
		  LEFT OUTER JOIN BCM100T B  WITH (NOLOCK)	 ON B.COMP_CODE		= A.COMP_CODE
													AND B.CUSTOM_TYPE	= '4'
													AND B.CUSTOM_CODE	= A.BANK_CODE1
		  LEFT OUTER JOIN HUM100T A1 WITH (NOLOCK)	 ON A1.COMP_CODE	= A.COMP_CODE
													AND A1.PERSON_NUMB	= A.PERSON_NUMB
		  LEFT OUTER JOIN HUM100T A2 WITH (NOLOCK)	 ON A2.COMP_CODE	= A.COMP_CODE
													AND REPLACE(unilite.fnCipherDecrypt(A2.REPRE_NUM, ''), '-', '') = REPLACE(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), '-', '')
		 WHERE A.COMP_CODE 		= #{S_COMP_CODE}
		   AND ISNULL(A.PROC_YN, '') &lt;&gt; 'Y'
		 <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		   AND A.DIV_CODE			= #{DIV_CODE}
		 </if>
		 <if test="@foren.Ognl@isNotEmpty(_EXCEL_JOBID)">
		   AND A.TEMPC_01			= #{_EXCEL_JOBID}
		 </if>
		 ORDER BY A.AUTO_NUM
	</select>

	<!-- Insert, Excel Upload-->
	<insert id="hum110ukrServiceImpl.insertList" parameterType="Map">
	/* hum110ukrServiceImpl.insertList,excelUpload */
	DECLARE @EXCEL_JOBID	NVARCHAR(30)
		  , @SEX_CODE		NVARCHAR(01)
		  , @BIRTH_DATE		NVARCHAR(08)
	
	SET @EXCEL_JOBID	= #{_EXCEL_JOBID}
	SET @SEX_CODE		= #{SEX_CODE}
	SET @BIRTH_DATE		= #{BIRTH_DATE}
	
	INSERT INTO HUM100T_UPD
			 ( COMP_CODE
			 , DIV_CODE
			 , SECT_CODE
			 , PERSON_NUMB
			 , NAME
			 , NAME_ENG
			 , NAME_CHI
			 , REPRE_NUM
			 , DEPT_CODE
			 , DEPT_NAME
			 , POST_CODE
			 , ABIL_CODE
			 , AFFIL_CODE
			 , KNOC
			 , PAY_GUBUN
			 , ZIP_CODE
			 , KOR_ADDR
			 , NATION_CODE
			 , LIVE_CODE
			 , JOIN_DATE
			 , ORI_JOIN_DATE
			 , JOIN_CODE
			 , EMPLOY_TYPE
			 , RETR_OT_KIND
			 , JOB_CODE
			 , PAY_GRADE_BASE
			 , PAY_GRADE_01
			 , PAY_GRADE_02
			 , ANNUAL_SALARY_I
			 , WAGES_STD_I
			 , PAY_PROV_FLAG
			 , PAY_CODE
			 , TAX_CODE
			 , TAX_CODE2
			 , BANK_CODE1
			 , BANK_ACCOUNT1
			 , BANKBOOK_NAME
			 , EMAIL_ADDR
	
			 , MED_AVG_I
			 , ORI_MED_INSUR_I
			 , OLD_MED_INSUR_I
			 , ANU_BASE_I
			 , ANU_INSUR_I
	
			 , MAKE_SALE
			 , PHONE_NO
			 , WEDDING_DATE
			 , FOREIGN_NUM
			 , LIVE_GUBUN
			 , HOUSEHOLDER_YN
			 , SEX_CODE
			 , BIRTH_DATE
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
			 , INSERT_DB_USER
			 , INSERT_DB_TIME
			 , TEMPC_01
			 )
		VALUES
			 ( #{COMP_CODE}
			 , #{DIV_CODE}
			 , #{SECT_CODE}
			 , #{PERSON_NUMB}
			 , #{NAME}
			 , #{NAME_ENG}
			 , #{NAME_CHI}
			 , CASE WHEN ISNULL(@EXCEL_JOBID, '') &lt;&gt; '' THEN unilite.fnCipherEncrypt(#{REPRE_NUM}, '')
					ELSE #{REPRE_NUM_EXPOS}
					END
			 , #{DEPT_CODE}
			 , #{DEPT_NAME}
			 , #{POST_CODE}
			 , #{ABIL_CODE}
			 , #{AFFIL_CODE}
			 , #{KNOC}
			 , #{PAY_GUBUN}
			 , #{ZIP_CODE}
			 , #{KOR_ADDR}
			 , #{NATION_CODE}
			 , #{LIVE_CODE}
			 , #{JOIN_DATE}
			 , #{ORI_JOIN_DATE}
			 , #{JOIN_CODE}
			 , #{EMPLOY_TYPE}
			 , #{RETR_OT_KIND}
			 , #{JOB_CODE}
			 , #{PAY_GRADE_BASE}
			 , #{PAY_GRADE_01}
			 , #{PAY_GRADE_02}
			 , ${ANNUAL_SALARY_I}
			 , ${WAGES_STD_I}
			 , #{PAY_PROV_FLAG}
			 , #{PAY_CODE}
			 , #{TAX_CODE}
			 , #{TAX_CODE2}
			 , #{BANK_CODE1}
			 , CASE WHEN ISNULL(@EXCEL_JOBID, '') &lt;&gt; '' THEN unilite.fnCipherEncrypt(#{BANK_ACCOUNT1}, '')
					ELSE #{BANK_ACCOUNT1}
					END
			 , #{BANKBOOK_NAME}
			 , #{EMAIL_ADDR}
	
			 , ${MED_AVG_I}
			 , ${ORI_MED_INSUR_I}
			 , ${OLD_MED_INSUR_I}
			 , ${ANU_BASE_I}
			 , ${ANU_INSUR_I}
	
			 , #{MAKE_SALE}
			 , #{PHONE_NO}
			 , #{WEDDING_DATE}
			 , #{FOREIGN_NUM}
			 , #{LIVE_GUBUN}
			 , #{HOUSEHOLDER_YN}
			 , ISNULL(@SEX_CODE		,  CASE WHEN SUBSTRING(REPLACE(#{REPRE_NUM}, '-', ''), 7,1) IN ('1', '3', '5', '7') THEN 'M'
											WHEN SUBSTRING(REPLACE(#{REPRE_NUM}, '-', ''), 7,1) IN ('2', '4', '6', '8') THEN 'F'
											ELSE 'M'
											END
					)
			 , ISNULL(@BIRTH_DATE	, (CASE WHEN SUBSTRING(REPLACE(#{REPRE_NUM}, '-', ''), 7,1) IN ('1', '2', '5', '6') THEN '19'
											WHEN SUBSTRING(REPLACE(#{REPRE_NUM}, '-', ''), 7,1) IN ('3', '4', '7', '8') THEN '20'
											ELSE '20'
											END) + LEFT(REPLACE(#{REPRE_NUM}, '-', ''), 6)
					)
			 , #{S_USER_ID}
			 , GETDATE()
			 , #{S_USER_ID}
			 , GETDATE()
			 , #{_EXCEL_JOBID}
			)
	</insert>
	
	<!-- 인사테이블에 저장한 항목 확정 FLAG UPDATE -->
	<update id="hum110ukrServiceImpl.updateList"  parameterType="rMap">
		/* hum110ukrServiceImpl.updateList */
		UPDATE HUM100T_UPD
		   SET COMP_CODE		= #{COMP_CODE}
			 , DIV_CODE			= #{DIV_CODE}
			 , SECT_CODE		= #{SECT_CODE}
			 , PERSON_NUMB		= #{PERSON_NUMB}
			 , NAME				= #{NAME}
			 , NAME_ENG			= #{NAME_ENG}
			 , NAME_CHI			= #{NAME_CHI}
			 , REPRE_NUM		= #{REPRE_NUM}
			 , DEPT_CODE		= #{DEPT_CODE}
			 , DEPT_NAME		= #{DEPT_NAME}
			 , POST_CODE		= #{POST_CODE}
			 , ABIL_CODE		= #{ABIL_CODE}
			 , AFFIL_CODE		= #{AFFIL_CODE}
			 , KNOC				= #{KNOC}
			 , BUSS_OFFICE_CODE	= #{BUSS_OFFICE_CODE}
			 , PAY_GUBUN		= #{PAY_GUBUN}
			 , ZIP_CODE			= #{ZIP_CODE}
			 , KOR_ADDR			= #{KOR_ADDR}
			 , NATION_CODE		= #{NATION_CODE}
			 , LIVE_CODE		= #{LIVE_CODE}
			 , JOIN_DATE		= #{JOIN_DATE}
			 , ORI_JOIN_DATE	= #{ORI_JOIN_DATE}
			 , JOIN_CODE		= #{JOIN_CODE}
			 , EMPLOY_TYPE		= #{EMPLOY_TYPE}
			 , RETR_OT_KIND		= #{RETR_OT_KIND}
			 , JOB_CODE			= #{JOB_CODE}
			 , PAY_GRADE_BASE	= #{PAY_GRADE_BASE}
			 , PAY_GRADE_01		= #{PAY_GRADE_01}
			 , PAY_GRADE_02		= #{PAY_GRADE_02}
			 , ANNUAL_SALARY_I	= #{ANNUAL_SALARY_I}
			 , WAGES_STD_I		= #{WAGES_STD_I}
			 , PAY_PROV_FLAG	= #{PAY_PROV_FLAG}
			 , PAY_CODE			= #{PAY_CODE}
			 , TAX_CODE			= #{TAX_CODE}
			 , TAX_CODE2		= #{TAX_CODE2}
			 , BANK_CODE1		= #{BANK_CODE1}
			 , BANK_ACCOUNT1	= #{BANK_ACCOUNT1}
			 , BANKBOOK_NAME	= #{BANKBOOK_NAME}
			 , EMAIL_ADDR		= #{EMAIL_ADDR}

			 , MED_AVG_I		= #{MED_AVG_I}
			 , ORI_MED_INSUR_I	= #{ORI_MED_INSUR_I}
			 , OLD_MED_INSUR_I	= #{OLD_MED_INSUR_I}
			 , ANU_BASE_I		= #{ANU_BASE_I}
			 , ANU_INSUR_I		= #{ANU_INSUR_I}

			 , MAKE_SALE		= #{MAKE_SALE}
			 , PHONE_NO			= #{PHONE_NO}
			 , WEDDING_DATE		= #{WEDDING_DATE}
			 , FOREIGN_NUM		= #{FOREIGN_NUM}
			 , LIVE_GUBUN		= #{LIVE_GUBUN}
			 , HOUSEHOLDER_YN	= #{HOUSEHOLDER_YN}
			 , SEX_CODE			= #{SEX_CODE}
			 , BIRTH_DATE		= #{BIRTH_DATE}
			
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE AUTO_NUM = #{AUTO_NUM}
		   AND ISNULL(PROC_YN, '') &lt;&gt; 'Y'
	</update>
	
	<!-- 데이터 삭제 -->
	<delete id="hum110ukrServiceImpl.deleteList"  parameterType="rMap">
		/* hum110ukrServiceImpl.deleteList */
		DELETE FROM HUM100T_UPD
		 WHERE AUTO_NUM = #{AUTO_NUM}
		   AND ISNULL(PROC_YN, '') &lt;&gt; 'Y'
	</delete>
	
	<!-- 인사테이블에 항목 신규추가 -->
	<insert id="hum110ukrServiceImpl.insertHum100T"  parameterType="rMap">
		/* hum110ukrServiceImpl.insertHum100T */
		INSERT INTO HUM100T
			 ( COMP_CODE		, DIV_CODE
			 , SECT_CODE		, PERSON_NUMB
			 , NAME				, NAME_ENG
			 , NAME_CHI			, REPRE_NUM
			 , DEPT_CODE		, DEPT_NAME
			 , POST_CODE		, ABIL_CODE
			 , AFFIL_CODE		, KNOC
			 , BUSS_OFFICE_CODE
			 , PAY_GUBUN		, ZIP_CODE
			 , KOR_ADDR			, NATION_CODE
			 , LIVE_CODE		, JOIN_DATE
			 , ORI_JOIN_DATE	, JOIN_CODE
			 , EMPLOY_TYPE		, RETR_OT_KIND
			 , JOB_CODE			, PAY_GRADE_BASE
			 , PAY_GRADE_01		, PAY_GRADE_02
			 , ANNUAL_SALARY_I	, WAGES_STD_I
			 , PAY_PROV_FLAG	, PAY_CODE
			 , TAX_CODE			, TAX_CODE2
			 , BANK_CODE1		, BANK_ACCOUNT1
			 , BANKBOOK_NAME	, EMAIL_ADDR

			 , MED_AVG_I		, ORI_MED_INSUR_I
			 , OLD_MED_INSUR_I	, ANU_BASE_I
			 , ANU_INSUR_I

			 , MAKE_SALE		, PHONE_NO
			 , WEDDING_DATE		, FOREIGN_NUM
			 , LIVE_GUBUN		, HOUSEHOLDER_YN
			 , SEX_CODE			, BIRTH_DATE

			 , INSERT_DB_USER	, INSERT_DB_TIME
			 , UPDATE_DB_USER	, UPDATE_DB_TIME
			 )
		SELECT COMP_CODE		, DIV_CODE
			 , SECT_CODE		, PERSON_NUMB
			 , NAME				, NAME_ENG
			 , NAME_CHI			, REPRE_NUM
			 , DEPT_CODE		, DEPT_NAME
			 , POST_CODE		, ABIL_CODE
			 , AFFIL_CODE		, KNOC
			 , BUSS_OFFICE_CODE
			 , PAY_GUBUN		, ZIP_CODE
			 , KOR_ADDR			, NATION_CODE
			 , LIVE_CODE		, JOIN_DATE
			 , ORI_JOIN_DATE	, JOIN_CODE
			 , EMPLOY_TYPE		, RETR_OT_KIND
			 , JOB_CODE			, PAY_GRADE_BASE
			 , PAY_GRADE_01		, PAY_GRADE_02
			 , ANNUAL_SALARY_I	, WAGES_STD_I
			 , PAY_PROV_FLAG	, PAY_CODE
			 , TAX_CODE			, TAX_CODE2
			 , BANK_CODE1		, BANK_ACCOUNT1
			 , BANKBOOK_NAME	, EMAIL_ADDR

			 , MED_AVG_I		, ORI_MED_INSUR_I
			 , OLD_MED_INSUR_I	, ANU_BASE_I
			 , ANU_INSUR_I

			 , MAKE_SALE		, PHONE_NO
			 , WEDDING_DATE		, FOREIGN_NUM
			 , LIVE_GUBUN		, HOUSEHOLDER_YN
			 , SEX_CODE			, BIRTH_DATE
			 
			 , #{S_USER_ID}		, GETDATE()
			 , #{S_USER_ID}		, GETDATE()
		  FROM HUM100T_UPD
		 WHERE AUTO_NUM 		= #{AUTO_NUM}
		   AND ISNULL(PROC_YN, '') &lt;&gt; 'Y'
	</insert>
	
	<!-- 인사테이블에 저장한 항목 확정 FLAG UPDATE -->
	<update id="hum110ukrServiceImpl.updateConfirm"  parameterType="rMap">
		/* hum110ukrServiceImpl.updateConfirm */
		UPDATE HUM100T_UPD
		   SET PROC_YN			= 'Y'
			
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE AUTO_NUM = #{AUTO_NUM}
		   AND ISNULL(PROC_YN, '') &lt;&gt; 'Y'
	</update>
	
	
	<!-- 임시 테이블에 insert된 데이터 조회 -->
	<select id="hum110ukrServiceImpl.checkData" parameterType="Map" resultType="rMap">
	SELECT COUNT(*) AS CNT
	  FROM HUM100T_UPD A
	 WHERE A.TEMPC_01  = #{_EXCEL_JOBID}
	</select>
</mapper>