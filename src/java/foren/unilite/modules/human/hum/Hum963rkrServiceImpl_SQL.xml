<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hum963rkrServiceImpl">
	
	<select id="selectPrimaryDataList" parameterType="Map" resultType="rMap" >	
	/* hum963rkrServiceImpl.selectPrimaryDataList  */	
	
SELECT A.COMP_CODE
     , A.NAME
     , A.PERSON_NUMB
     , A.NAME_ENG
     , A.NAME_CHI
     , unilite.fnCipherDecrypt(A.REPRE_NUM, 'RR') REPRE_NUM 
     , CASE WHEN A.BIRTH_DATE != '' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.BIRTH_DATE)
            END  AS BIRTH_DATE
     , A.TELEPHON
     , A.PHONE_NO
     , A.ORI_ADDR
     , ( '(' + SUBSTRING(A.ZIP_CODE,1,3) + '-' + SUBSTRING(A.ZIP_CODE,4,6) + ')' + ' ' + A.KOR_ADDR) AS ADDR
     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE) AS JOIN_DATE
     , CASE WHEN A.RETR_DATE != '' AND  A.RETR_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE)
            END AS RETR_DATE
     , CASE WHEN A.TRIAL_TERM_END_DATE != '' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.TRIAL_TERM_END_DATE)
            END AS TRIAL_TERM_END_DATE
     , CASE WHEN A.ORI_JOIN_DATE != '' AND A.ORI_JOIN_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ORI_JOIN_DATE)
            END AS ORI_JOIN_DATE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE     = A.COMP_CODE
           AND A.EMPLOY_TYPE = SUB_CODE
           AND MAIN_CODE     = 'H024') AS EMPLOY_TYPE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.JOIN_CODE = SUB_CODE
           AND MAIN_CODE   = 'H012') AS JOIN_CODE
     , (SELECT DIV_NAME
          FROM BOR120T 
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.DIV_CODE = DIV_CODE) AS DIV_NAME
     , SUBSTRING(DEPT_NAME,1,8) AS DEPT_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.POST_CODE = SUB_CODE
           AND MAIN_CODE   = 'H005') AS POST_CODE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.ABIL_CODE = SUB_CODE
           AND MAIN_CODE   = 'H006') AS ABIL_CODE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.JOB_CODE = SUB_CODE
           AND MAIN_CODE  = 'H008') AS JOB_CODE
     , A.CARD_NUM
     , A.ARMY_NO
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.ARMY_KIND = SUB_CODE
           AND MAIN_CODE   = 'H017') AS ARMY_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.MIL_TYPE = SUB_CODE
           AND MAIN_CODE  = 'H016') AS MIL_TYPE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND A.ARMY_GRADE = SUB_CODE
           AND MAIN_CODE    = 'H018') AS ARMY_GRADE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND A.ARMY_MAJOR = SUB_CODE
           AND MAIN_CODE    = 'H019') AS ARMY_MAJOR
     , CASE WHEN A.ARMY_STRT_DATE != '' AND A.ARMY_STRT_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ARMY_STRT_DATE)
            END AS ARMY_STRT_DATE
     , CASE WHEN A.ARMY_LAST_DATE != '' AND A.ARMY_LAST_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ARMY_LAST_DATE)
            END AS ARMY_LAST_DATE
     , B.HEIGHT, B.WEIGHT, B.SIGHT_LEFT, B.SIGHT_RIGHT
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.BLOOD_KIND = SUB_CODE
           AND MAIN_CODE    = 'H080') AS BLOOD_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND B.COLOR_YN = SUB_CODE
           AND MAIN_CODE  = 'H081') AS COLOR_YN
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND B.LIVE_KIND = SUB_CODE
           AND MAIN_CODE   = 'H082') AS LIVE_KIND
     , B.GROUND AS GROUND, B.FLOOR_SPACE AS FLOOR_SPACE, B.GARDEN AS GARDEN, B.REAL_PROPERTY AS REAL_PROPERTY
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.LIVE_LEVEL = SUB_CODE
           AND MAIN_CODE    = 'H083') AS LIVE_LEVEL
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE     = A.COMP_CODE
           AND B.AGENCY_KIND = SUB_CODE
           AND MAIN_CODE     = 'H084') AS AGENCY_KIND
     , B.AGENCY_GRADE AS AGENCY_GRADE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.HITCH_KIND = SUB_CODE
           AND MAIN_CODE    = 'H085') AS HITCH_KIND
     , B.HITCH_GRADE AS HITCH_GRADE
     , B.SPECIAL_ABILITY AS SPECIAL_ABILITY
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND B.RELIGION = SUB_CODE
           AND MAIN_CODE  = 'H086') AS RELIGION
     , C.IMG_FILE
     , '' AS FAMILY_NAME
     , '' AS REL_CODE
     , '' AS SCHSHIP_CODE
     , '' AS OCCUPATION
     , '' AS COMP_NAME
     , '' AS CARR_STRT_DATE
     , '' AS CARR_END_DATE
     , '' AS POST_NAME
     , '' AS OCPT_NAME
     , '' AS JOB_NAME
     , '' AS QUAL_KIND
     , '' AS QUAL_GRADE
     , '' AS ACQ_DATE
     , '' AS VALI_DATE
     , '' AS QUAL_MACH
     , '' AS QUAL_NUM
     , '' AS SCHOOL_NAME
     , '' AS ENTR_DATE
     , '' AS GRAD_DATE
     , '' AS GRAD_GUBUN
     , '' AS FIRST_SUBJECT
     , '' AS CREDITS
     , '' AS PASS_NO
     , '' AS VISA_NO
     , '' AS VISA_KIND
     , '' AS TERMI_DATE
     , '' AS BIGO
     , '' AS EDU_TITLE
     , '' AS EDU_FR_DATE
     , '' AS EDU_TO_DATE
     , '' AS EDU_GUBUN
     , 0  AS EDU_GRADES
     , 0  AS GRADE
     , '' AS FOREIGN_KIND
     , '' AS EXAM_KIND
     , '' AS GAIN_DATE
     , 0  AS GRADES
     , '' AS CLASS
     , '' AS ANNOUNCE_DATE
     , '' AS ANNOUNCE_CODE
     , '' AS BE_DEPT_NAME
     , '' AS AF_DEPT_NAME
     , '' AS MERITS_YEARS
     , '' AS MERITS_GUBUN
     , '' AS MERITS_CLASS
     , '' AS MERITS_GRADE
     , '' AS SYNTHETIC_EVAL
     , '' AS RECOMMEND1_NAME
     , '' AS RECOMMEND1_RELATION
     , '' AS RECOMMEND1_OFFICE_NAME
     , '' AS RECOMMEND1_CLASS
     , '' AS RECOMMEND1_ADDR
     , '' AS RECOMMEND2_NAME
     , '' AS RECOMMEND2_RELATION
     , '' AS RECOMMEND2_OFFICE_NAME
     , '' AS RECOMMEND2_CLASS
     , '' AS RECOMMEND2_ADDR
     , '' AS INSURANCE_NAME
     , '' AS INSURANCE_NO
     , '' AS INSURANCE_COMPANY
     , 0  AS INSURANCE_FARE
     , '' AS GUARANTEE_PERIOD_FR
     , '' AS GUARANTEE_PERIOD_TO
     , '' AS GUARANTOR1_NAME
     , '' AS GUARANTOR1_RELATION
     , '' AS GUARANTOR1_RES_NO
     , '' AS GUARANTOR1_WORK_ZONE
     , '' AS GUARANTOR1_PERIOD_FR
     , '' AS GUARANTOR1_PERIOD_TO
     , '' AS GUARANTOR2_NAME
     , '' AS GUARANTOR2_RELATION
     , '' AS GUARANTOR2_RES_NO
     , '' AS GUARANTOR2_WORK_ZONE
     , '' AS GUARANTOR2_PERIOD_FR
     , '' AS GUARANTOR2_PERIOD_TO
     , #{HUMAN_IMAGE_PATH} AS HUMAN_IMAGE_PATH
  FROM            HUM100T A 
  LEFT OUTER JOIN HUM710T B
             ON A.COMP_CODE   = B.COMP_CODE
            AND A.PERSON_NUMB = B.PERSON_NUMB
  LEFT OUTER JOIN HUM120T C
             ON A.COMP_CODE   = C.COMP_CODE
            AND A.PERSON_NUMB = C.PERSON_NUMB
  INNER JOIN (SELECT PERSON_NUMB
                   , POST_CODE POST
                   , COMP_CODE
              FROM HUM100T
              WHERE COMP_CODE =#{S_COMP_CODE}) D
               ON A.COMP_CODE   = D.COMP_CODE
              AND A.PERSON_NUMB = D.PERSON_NUMB
  LEFT JOIN  HBS400T M1 WITH (NOLOCK) ON M1.COMP_CODE = A.COMP_CODE
                                     AND M1.COMPANY_CODE = '1'           
  WHERE A.COMP_CODE = #{S_COMP_CODE}
    AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
   
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
  	 	   AND A.DIV_CODE = #{DIV_CODE}
       </if>   
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
       		AND A.DEPT_CODE  &gt;= #{DEPT_CODE_FR}
       </if>
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
       		AND A.DEPT_CODE &lt;=#{DEPT_CODE_TO}
       </if>  
       <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
       		AND A.POST_CODE = #{POST_CODE}
       </if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		 	AND A.PAY_GUBUN = '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		 	AND ISNULL(A.RETR_DATE, '00000000') = '00000000'
		</if>
		ORDER BY DEPT_CODE
			,D.POST
			,NAME
			,A.PERSON_NUMB ASC	
	</select>
	
	<select id="hum963rkrServiceImpl.ds_sub01" parameterType="Map" resultType="rMap" >	
	/* hum960rkrServiceImpl.ds_sub01  */	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.PERSON_NUMB, C.SUB_CODE, unilite.fnCipherDecrypt(B.REPRE_NUM, '') DESC, FAMILY_NAME)) AS ROW_NUM 
	 , B.PERSON_NUMB AS PERSON_NUMB
     , B.FAMILY_NAME AS FAMILY_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H020'
           AND SUB_CODE  = B.REL_CODE) AS REL_CODE
     , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR') REPRE_NUM 
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H009'
           AND SUB_CODE  = B.SCHSHIP_CODE) AS SCHSHIP_CODE
     , B.OCCUPATION
     , B.COMP_NAME
  FROM HUM100T A INNER JOIN HUM200T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 INNER JOIN BSA100T C
                    ON B.COMP_CODE   = C.COMP_CODE
                   AND B.REL_CODE    = C.SUB_CODE 
                   AND C.MAIN_CODE   = 'H020'
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'       
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.PERSON_NUMB, C.SUB_CODE, unilite.fnCipherDecrypt(B.REPRE_NUM, '') DESC, FAMILY_NAME
	</select>
	
	<select id="hum963rkrServiceImpl.ds_sub02" parameterType="Map" resultType="rMap" >	
	/* hum960rkrServiceImpl.ds_sub02  */	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.PERSON_NUMB, B.CARR_STRT_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.COMP_NAME
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_STRT_DATE) AS CARR_STRT_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_END_DATE) AS CARR_END_DATE
     , B.POST_NAME
     , B.OCPT_NAME
     , B.JOB_NAME
  FROM HUM100T A INNER JOIN HUM500T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'                       
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.PERSON_NUMB, B.CARR_STRT_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC
	</select>
			
	<select id="hum963rkrServiceImpl.ds_sub03" parameterType="Map" resultType="rMap" >		
	/* hum960rkrServiceImpl.ds_sub03  */	
	SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY  A.PERSON_NUMB , B.ACQ_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , (SELECT C.CODE_NAME
          FROM BSA100T AS C
         WHERE COMP_CODE   = #{S_COMP_CODE}
           AND MAIN_CODE   = 'H022'
           AND B.QUAL_KIND = C.SUB_CODE) AS QUAL_KIND
     , B.QUAL_GRADE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ACQ_DATE) AS ACQ_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
     , B.QUAL_MACH
     , B.QUAL_NUM
  FROM HUM100T A INNER JOIN HUM600T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY  A.PERSON_NUMB , B.ACQ_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC
	</select>
	<select id="hum963rkrServiceImpl.ds_sub04" parameterType="Map" resultType="rMap" >
	/* hum960rkrServiceImpl.ds_sub04  */	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB   ORDER BY GRAD_DATE DESC,SCHOOL_NAME)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.SCHOOL_NAME
     , ENTR_DATE = uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ENTR_DATE)
     , GRAD_DATE = uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GRAD_DATE)
     , GRAD_GUBUN = (SELECT C.CODE_NAME
                      FROM BSA100T AS C
                     WHERE C.COMP_CODE = #{S_COMP_CODE}
                       AND C.MAIN_CODE = 'H010'
                       AND C.SUB_CODE  = B.GRAD_GUBUN)
     , B.FIRST_SUBJECT
   --  , FIRST_SUBJECT = (SELECT C.CODE_NAME
   --                       FROM BSA100T AS C
   --                      WHERE C.COMP_CODE = #{S_COMP_CODE}
   --                         AND C.MAIN_CODE = 'H087'
   --                        AND C.SUB_CODE  = B.FIRST_SUBJECT)
     , B.CREDITS 
  FROM HUM100T A INNER JOIN HUM720T B
                    ON A.COMP_CODE = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY GRAD_DATE DESC,SCHOOL_NAME	
	</select>
	<select id="hum963rkrServiceImpl.ds_sub05" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub05  */
		SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.TERMI_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 		 , B.PERSON_NUMB
		     , unilite.fnCipherDecrypt(B.PASS_NO, 'P') PASS_NO 
		     , unilite.fnCipherDecrypt(B.VISA_NO, 'V') VISA_NO 
		     , (SELECT CODE_NAME
		          FROM BSA100T
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H088'
		           AND SUB_CODE  = B.VISA_KIND) AS VISA_KIND
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.TERMI_DATE) AS TERMI_DATE
		     , B.BIGO
		  FROM HUM100T A INNER JOIN HUM730T B
		                    ON A.COMP_CODE   = B.COMP_CODE
		                   AND A.PERSON_NUMB = B.PERSON_NUMB
		                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
		                   ON M1.COMP_CODE = A.COMP_CODE
		                  AND M1.COMPANY_CODE = '1'    
		 WHERE A.COMP_CODE =  #{S_COMP_CODE}
           AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
		 ORDER BY B.TERMI_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	
	<select id="hum963rkrServiceImpl.ds_sub06" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub06  */
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY EDU_FR_DATE DESC,EDU_TITLE)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.EDU_TITLE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_FR_DATE) AS EDU_FR_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_TO_DATE) AS EDU_TO_DATE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H091'
           AND SUB_CODE = B.EDU_GUBUN) AS EDU_GUBUN
     , B.EDU_GRADES
     , B.GRADE
  FROM HUM100T A INNER JOIN HUM740T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE =  #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
  ORDER BY B.PERSON_NUMB
        , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY EDU_FR_DATE DESC,EDU_TITLE))
        , EDU_FR_DATE DESC
	</select>
	
	<select id="hum963rkrServiceImpl.ds_sub07" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub07  */
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.GAIN_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H092'
           AND SUB_CODE  = B.FOREIGN_KIND) AS FOREIGN_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H093'
           AND SUB_CODE  = B.EXAM_KIND) AS EXAM_KIND
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, LEFT(B.GAIN_DATE,6)) AS GAIN_DATE
     , B.GRADES
     , B.CLASS
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
  FROM HUM100T A INNER JOIN HUM750T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.GAIN_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC
	</select>
	
	<select id="hum963rkrServiceImpl.ds_sub08" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub08  */
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.ANNOUNCE_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     ,  uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ANNOUNCE_DATE) AS ANNOUNCE_DATE
     ,  (SELECT C.CODE_NAME
           FROM BSA100T AS C
          WHERE C.COMP_CODE = #{S_COMP_CODE}
            AND C.MAIN_CODE = 'H094'
            AND C.SUB_CODE  = B.ANNOUNCE_CODE) AS ANNOUNCE_CODE
     --,  B.BE_DEPT_NAME
     , SUBSTRING(B.BE_DEPT_NAME,1,8) AS BE_DEPT_NAME
     --,  B.AF_DEPT_NAME
     , SUBSTRING(B.AF_DEPT_NAME,1,8) AS AF_DEPT_NAME
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H005'
            AND SUB_CODE  = B.POST_CODE) AS POST_CODE
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H006'
            AND SUB_CODE  = B.ABIL_CODE) AS ABIL_CODE
  FROM HUM100T A INNER JOIN HUM760T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                   ON M1.COMP_CODE = A.COMP_CODE
                  AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.ANNOUNCE_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	<select id="ds_sub09" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub09  */
SELECT  CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.MERITS_YEARS DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     ,  B.MERITS_YEARS
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H095'
            AND SUB_CODE  = B.MERITS_GUBUN) AS MERITS_GUBUN
     ,  B.DEPT_NAME
     ,  B.MERITS_CLASS
     ,  B.MERITS_GRADE
     ,  B.SYNTHETIC_EVAL
  FROM  HUM100T A INNER JOIN HUM770T B
                     ON A.COMP_CODE   = B.COMP_CODE
                    AND A.PERSON_NUMB = B.PERSON_NUMB
                   LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                     ON M1.COMP_CODE = A.COMP_CODE
                    AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.MERITS_YEARS DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	<select id="ds_sub10" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub10  */
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.RECOMMEND1_NAME
     , (SELECT C.CODE_NAME
          FROM BSA100T AS C
         WHERE C.COMP_CODE = #{S_COMP_CODE}
           AND C.MAIN_CODE = 'H020'
           AND C.SUB_CODE  = B.RECOMMEND1_RELATION) AS RECOMMEND1_RELATION
     , B.RECOMMEND1_OFFICE_NAME
     , B.RECOMMEND1_CLASS
     , (ISNULL(B.RECOMMEND1_ADDR,'') + ' ' + ISNULL(B.RECOMMEND1_ADDR_DE,'')) AS RECOMMEND1_ADDR
     , B.RECOMMEND2_NAME
     , (SELECT C.CODE_NAME
          FROM BSA100T AS C
         WHERE C.COMP_CODE = #{S_COMP_CODE}
           AND C.MAIN_CODE = 'H020'
           AND C.SUB_CODE  = B.RECOMMEND2_RELATION) AS RECOMMEND2_RELATION
     , B.RECOMMEND2_OFFICE_NAME
     , B.RECOMMEND2_CLASS
     , (ISNULL(B.RECOMMEND1_ADDR,'') + ' ' + ISNULL(B.RECOMMEND1_ADDR_DE,'')) AS RECOMMEND2_ADDR
  FROM HUM100T A INNER JOIN HUM790T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                  LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                    ON M1.COMP_CODE = A.COMP_CODE
                   AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	
	<select id="ds_sub11" parameterType="Map" resultType="rMap" >
		/* hum960rkrServiceImpl.ds_sub11  */
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.INSURANCE_NAME
     , B.INSURANCE_NO
     , B.INSURANCE_COMPANY
     , B.INSURANCE_FARE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_FR) AS GUARANTEE_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_TO) AS GUARANTEE_PERIOD_TO
     , B.GUARANTOR1_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H020'
           AND SUB_CODE = B.GUARANTOR1_RELATION) AS GUARANTOR1_RELATION
     , unilite.fnCipherDecrypt(B.GUARANTOR1_RES_NO, 'RR') GUARANTOR1_RES_NO 
     , B.GUARANTOR1_WORK_ZONE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_FR) AS GUARANTOR1_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_TO) AS GUARANTOR1_PERIOD_TO
     , B.GUARANTOR2_NAME
     , GUARANTOR2_RELATION = (SELECT CODE_NAME
                                FROM BSA100T
                               WHERE COMP_CODE = #{S_COMP_CODE}
                                 AND MAIN_CODE = 'H020'
                                 AND SUB_CODE  = B.GUARANTOR2_RELATION)
     , unilite.fnCipherDecrypt(B.GUARANTOR2_RES_NO, 'RR') GUARANTOR2_RES_NO 
     , B.GUARANTOR2_WORK_ZONE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_FR) AS GUARANTOR2_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_TO) AS GUARANTOR2_PERIOD_TO
  FROM HUM100T A INNER JOIN HUM800T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                  LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                    ON M1.COMP_CODE = A.COMP_CODE
                   AND M1.COMPANY_CODE = '1'    
 WHERE A.COMP_CODE = #{S_COMP_CODE}
   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	<select id="selectPrintDetail" parameterType="Map" resultType="rMap" >
		/* hum963rkrServiceImpl.selectPrintDetail */
		DECLARE	@COMP_CODE	NVARCHAR(08)	= #{S_COMP_CODE}
			  , @DIV_CODE	NVARCHAR(08)	= #{DIV_CODE}
		
		SELECT 'FAMILY'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , ROW_NUMBER()	OVER(PARTITION BY B.PERSON_NUMB ORDER BY B.PERSON_NUMB, CASE WHEN SUBSTRING(REPLACE(unilite.fnCipherDecrypt(B.REPRE_NUM, ''), '-', ''), 7, 1) IN ('1', '2', '5', '6') THEN '19' ELSE '20' END + SUBSTRING(REPLACE(unilite.fnCipherDecrypt(B.REPRE_NUM, ''), '-', ''), 1, 6), B.FAMILY_NAME)	AS SUB_DATA_SEQ 
			 , B.FAMILY_NAME								AS DATA01	/*	가족사항 -  성명		*/
			 , C.CODE_NAME									AS DATA02	/*	가족사항 -  관계		*/
			 , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR')	AS DATA03	/*	가족사항 -  주민번호	*/
			 , D.CODE_NAME									AS DATA04	/*	가족사항 -  최종학력	*/
			 , B.OCCUPATION									AS DATA05	/*	가족사항 -  직업		*/
			 , B.COMP_NAME									AS DATA06	/*	가족사항 -  근무처		*/
			 , ''											AS DATA07	/*	임시컬럼				*/
			 , ''											AS DATA08	/*	임시컬럼				*/
			 , ''											AS DATA09	/*	임시컬럼				*/
			 , ''											AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM200T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H020'
							AND B.REL_CODE		= C.SUB_CODE
				LEFT OUTER JOIN	BSA100T D
							 ON B.COMP_CODE		= D.COMP_CODE
							AND D.MAIN_CODE		= 'H009'
							AND B.SCHSHIP_CODE	= D.SUB_CODE
                LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'    
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
           AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'CAREER'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , ROW_NUMBER() OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.PERSON_NUMB, B.CARR_STRT_DATE DESC, B.COMP_NAME)	AS SUB_DATA_SEQ
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_STRT_DATE)	AS DATA01	/*	경력사항 -  근무 시작일	*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_END_DATE)	AS DATA02	/*	경력사항 -  근무 종료일	*/
			 , B.COMP_NAME												AS DATA03	/*	경력사항 -  회사명		*/
			 , B.POST_NAME												AS DATA04	/*	경력사항 -  직위명		*/
			 , B.OCPT_NAME												AS DATA05	/*	경력사항 -  직종		*/
			 , B.JOB_NAME												AS DATA06	/*	경력사항 -  담당업무	*/
			 , ''														AS DATA07	/*	임시컬럼				*/
			 , ''														AS DATA08	/*	임시컬럼				*/
			 , ''														AS DATA09	/*	임시컬럼				*/
			 , ''														AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A 
				INNER JOIN		HUM500T B
							 ON A.COMP_CODE		= B.COMP_CODE
		                    AND A.PERSON_NUMB	= B.PERSON_NUMB
                LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'    
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
           AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'QUAL'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.ACQ_DATE DESC, B.QUAL_GRADE))	AS SUB_DATA_SEQ 
			 , C.CODE_NAME											AS DATA01	/*	자격면허 -  자격면허	*/
			 , B.QUAL_GRADE											AS DATA02	/*	자격면허 -  등급		*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ACQ_DATE)	AS DATA03	/*	자격면허 -  취득일		*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE)	AS DATA04	/*	자격면허 -  유효일		*/
			 , B.QUAL_MACH											AS DATA05	/*	자격면허 -  발행기관	*/
			 , B.QUAL_NUM											AS DATA06	/*	자격면허 -  자격증번호	*/
			 , B.QUAL_CODE											AS DATA07	/*	자격면허 -  자격종류	*/
			 , ''													AS DATA08	/*	임시컬럼				*/
			 , ''													AS DATA09	/*	임시컬럼				*/
			 , ''													AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM600T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H022'
							AND B.QUAL_KIND		= C.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   			
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'SCHOOL'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.GRAD_DATE DESC, B.GRAD_DATE DESC))	AS SUB_DATA_SEQ 
			 , B.SCHOOL_NAME										AS DATA01	/*	자격면허 -  자격면허	*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ENTR_DATE)	AS DATA02	/*	자격면허 -  등급		*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GRAD_DATE)	AS DATA03	/*	자격면허 -  취득일		*/
			 , C.CODE_NAME											AS DATA04	/*	자격면허 -  유효일		*/
			 , B.FIRST_SUBJECT										AS DATA05	/*	자격면허 -  발행기관	*/
			 , B.CREDITS											AS DATA06	/*	자격면허 -  자격증번호	*/
			 , ''													AS DATA07	/*	임시컬럼				*/
			 , ''													AS DATA08	/*	임시컬럼				*/
			 , ''													AS DATA09	/*	임시컬럼				*/
			 , ''													AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM720T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H010'
							AND B.GRAD_GUBUN	= C.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   			
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'EDUC'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.EDU_FR_DATE DESC, B.EDU_TO_DATE DESC, B.EDU_TITLE))	AS SUB_DATA_SEQ 
			 , B.EDU_TITLE												AS DATA01	/*	교육사항 -  교육명		*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_FR_DATE)	AS DATA02	/*	교육사항 -  교육 시작일	*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_TO_DATE)	AS DATA03	/*	교육사항 -  교육 종료일	*/
			 , C.CODE_NAME												AS DATA04	/*	교육사항 -  필수구분	*/
			 , CONVERT(NVARCHAR, B.EDU_GRADES)							AS DATA05	/*	교육사항 -  이수점수	*/
			 , CONVERT(NVARCHAR, B.GRADE)								AS DATA06	/*	교육사항 -  고과반영점수*/
			 , ''														AS DATA07	/*	임시컬럼				*/
			 , ''														AS DATA08	/*	임시컬럼				*/
			 , ''														AS DATA09	/*	임시컬럼				*/
			 , ''														AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM740T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H091'
							AND B.EDU_GUBUN		= C.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   	
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'LANG'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.GAIN_DATE DESC, B.FOREIGN_KIND))	AS SUB_DATA_SEQ 
			 , C.CODE_NAME												AS DATA01	/*	어학자격 -  외국어 구분	*/
			 , D.CODE_NAME												AS DATA02	/*	어학자격 -  시험종류	*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GAIN_DATE)		AS DATA03	/*	어학자격 -  취득일자	*/
			 , CONVERT(NVARCHAR, B.GRADES)								AS DATA04	/*	어학자격 -  점수		*/
			 , B.CLASS													AS DATA05	/*	어학자격 -  등급		*/
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE)		AS DATA06	/*	어학자격 -  유효일		*/
			 , ''														AS DATA07	/*	임시컬럼				*/
			 , ''														AS DATA08	/*	임시컬럼				*/
			 , ''														AS DATA09	/*	임시컬럼				*/
			 , ''														AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM750T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H092'
							AND B.FOREIGN_KIND	= C.SUB_CODE
				LEFT OUTER JOIN	BSA100T D
							 ON B.COMP_CODE		= D.COMP_CODE
							AND D.MAIN_CODE		= 'H093'
							AND B.EXAM_KIND		= D.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   	
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'ANNOUNCE'		AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.ANNOUNCE_DATE DESC, B.ANNOUNCE_CODE DESC))	AS SUB_DATA_SEQ 
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ANNOUNCE_DATE)	AS DATA01	/*	인사변동 -  발령일자	*/
			 , C.CODE_NAME												AS DATA02	/*	인사변동 -  발령코드	*/
			 , B.BE_DEPT_NAME											AS DATA03	/*	인사변동 -  발령전 부서	*/
			 , B.AF_DEPT_NAME											AS DATA04	/*	인사변동 -  발령후 부서	*/
			 , D.CODE_NAME												AS DATA05	/*	인사변동 -  직위		*/
			 , E.CODE_NAME												AS DATA06	/*	인사변동 -  직책		*/
			 , ''														AS DATA07	/*	임시컬럼				*/
			 , ''														AS DATA08	/*	임시컬럼				*/
			 , ''														AS DATA09	/*	임시컬럼				*/
			 , ''														AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM760T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H094'
							AND B.ANNOUNCE_CODE	= C.SUB_CODE
				LEFT OUTER JOIN	BSA100T D
							 ON B.COMP_CODE		= D.COMP_CODE
							AND D.MAIN_CODE		= 'H005'
							AND B.POST_CODE		= D.SUB_CODE
				LEFT OUTER JOIN	BSA100T E
							 ON B.COMP_CODE		= E.COMP_CODE
							AND E.MAIN_CODE		= 'H006'
							AND B.ABIL_CODE		= E.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   	
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'PRIZE'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.OCCUR_DATE DESC, B.KIND_PRIZE_PENALTY))	AS SUB_DATA_SEQ 
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.OCCUR_DATE)			AS DATA01	/*	상벌사항 -  발생일자	*/
			 , C.CODE_NAME													AS DATA02	/*	상벌사항 -  상벌종류	*/
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.SLRY_APLC_YM)		AS DATA03	/*	상벌사항 -  급여적용년월*/
			 , B.NAME_PRIZE_PENALTY											AS DATA04	/*	상벌사항 -  상벌명		*/
			 , B.REASON														AS DATA05	/*	상벌사항 -  사유		*/
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.VALIDITYFR_DATE)	AS DATA06	/*	상벌사항 -  징계시작일	*/
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.VALIDITY_DATE)		AS DATA07	/*	상벌사항 -  징계종료일	*/
			 , ''															AS DATA08	/*	임시컬럼				*/
			 , ''															AS DATA09	/*	임시컬럼				*/
			 , ''															AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM810T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE				= C.COMP_CODE
							AND C.MAIN_CODE				= 'H096'
							AND B.KIND_PRIZE_PENALTY	= C.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'   	
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		
		UNION ALL
		
		SELECT 'LAYOFF'			AS SUB_DATA_GUBUN
			 , B.PERSON_NUMB	AS PERSON_NUMB
			 , CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.OCCUR_DATE DESC, B.OFF_CODE1))	AS SUB_DATA_SEQ 
			 , C.CODE_NAME												AS DATA01	/*	휴직산재 -  휴직산재구분*/
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.FROM_DATE)		AS DATA02	/*	휴직산재 -  휴직 시작일	*/
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, B.TO_DATE)		AS DATA03	/*	휴직산재 -  휴직 종료일	*/
			 , D.CODE_NAME												AS DATA04	/*	휴직산재 -  휴직산재원인*/
			 , B.DS_TITLE												AS DATA05	/*	휴직산재 -  휴직산재내역*/
			 , ''														AS DATA06	/*	임시컬럼				*/
			 , ''														AS DATA07	/*	임시컬럼				*/
			 , ''														AS DATA08	/*	임시컬럼				*/
			 , ''														AS DATA09	/*	임시컬럼				*/
			 , ''														AS DATA10	/*	임시컬럼				*/
		  FROM HUM100T A
				INNER JOIN		HUM850T B
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.PERSON_NUMB	= B.PERSON_NUMB
				LEFT OUTER JOIN	BSA100T C
							 ON B.COMP_CODE		= C.COMP_CODE
							AND C.MAIN_CODE		= 'H185'
							AND B.OFF_CODE1		= C.SUB_CODE
				LEFT OUTER JOIN	BSA100T D
							 ON B.COMP_CODE		= D.COMP_CODE
							AND D.MAIN_CODE		= 'H186'
							AND B.OFF_CODE2		= D.SUB_CODE
				LEFT JOIN  HBS400T M1 WITH (NOLOCK) 
                             ON M1.COMP_CODE = A.COMP_CODE
                            AND M1.COMPANY_CODE = '1'  
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND (M1.DAY_LABOR_RULE = '2' OR (M1.DAY_LABOR_RULE = '1' AND (A.PAY_GUBUN != '2' OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))))
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
		   AND A.DEPT_CODE	   &gt;= #{DEPT_CODE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
		   AND A.DEPT_CODE	   &lt;= #{DEPT_CODE_TO}
		</if>  
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE		= #{POST_CODE}
		</if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		   AND A.PAY_GUBUN		= '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		   AND ISNULL(NULLIF(A.RETR_DATE, ''), '00000000') = '00000000'
		</if>
		 
		 ORDER BY PERSON_NUMB
		 	 , SUB_DATA_GUBUN
		 	 , SUB_DATA_SEQ
	</select>
</mapper>