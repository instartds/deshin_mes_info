<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum105ukrServiceImpl">
	<!--
		Sorry, I can`t migrate	Hum100ukrModel
		See console output for further details 
	-->
	<!--
		Sorry, I can`t migrate	Hum710ukrModel
		See console output for further details 
	-->	
	<!--
		Sorry, I can`t migrate	Hum790ukrModel
		See console output for further details 
	-->
	<!--
		Sorry, I can`t migrate	Hum800ukrModel
		See console output for further details 
	-->
	
	<select id="hum105ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">		
	/* hum105ukrServiceImpl.selectList */
		SELECT   A.NAME
			   , A.PERSON_NUMB
			   , A.DEPT_CODE
			   , A.DEPT_NAME
			   , A.NAME_ENG
			   , A.PHONE_NO
			   , A.NAME_CHI
			   , A.DIV_CODE
			   , A.POST_CODE
			   , A.ABIL_CODE
			   , SUBSTRING(A.ZIP_CODE,1,3) + '-' + SUBSTRING(A.ZIP_CODE,4,3) AS ZIP_CODE
			   , A.KOR_ADDR
			   , CONVERT(binary(8), A.UPDATE_DB_TIME, 0) dc 
               , ISNULL(B.ANNOUNCE_CODE, A.ANNOUNCE_CODE) AS ANNOUNCE_CODE		
               , ISNULL(B.ANNOUNCE_DATE, A.ANNOUNCE_DATE) AS ANNOUNCE_DATE 
		  FROM HUM100T AS A WITH (NOLOCK)
		  LEFT JOIN (
					SELECT  M1.PERSON_NUMB, MAX(M1.ANNOUNCE_CODE) AS ANNOUNCE_CODE, M1.ANNOUNCE_DATE
					FROM HUM760T M1 WITH(NOLOCK)
					INNER JOIN (SELECT COMP_CODE, PERSON_NUMB,  MAX(ANNOUNCE_DATE) AS ANNOUNCE_DATE
								FROM HUM760T WITH(NOLOCK)
								GROUP BY COMP_CODE, PERSON_NUMB
							   ) M2        ON M1.COMP_CODE     = M2.COMP_CODE
										  AND M1.PERSON_NUMB   = M2.PERSON_NUMB
										  AND M1.ANNOUNCE_DATE = M2.ANNOUNCE_DATE
					GROUP BY M1.COMP_CODE,M1.PERSON_NUMB, M1.ANNOUNCE_DATE
            
				 ) B  ON  A.PERSON_NUMB = B.PERSON_NUMB 
		 WHERE  A.COMP_CODE=#{S_COMP_CODE} 
		   AND  A.PERSON_NUMB != '1'
		 <if test="@foren.Ognl@isNotEmpty(TXT_SEARCH)">
		 	AND (A.NAME LIKE '%' + #{TXT_SEARCH} +'%'		 
		 	OR A.PERSON_NUMB LIKE  #{TXT_SEARCH} +'%')
		 </if>
		 <if test="RETR_DATE == &quot;1&quot;">
		 	AND A.RETR_DATE = '00000000'
		 </if>
		 <if test="RETR_DATE == &quot;2&quot;">
		 	AND A.RETR_DATE != '00000000'
		 </if>	
		
	</select>
	<select id="hum105ukrServiceImpl.select" parameterType="Map" resultType="rMap">	
	/* hum105ukrServiceImpl.select */
		SELECT    A.COMP_CODE		, A.PERSON_NUMB		, SECT_CODE			, DIV_CODE		, NAME				, NAME_ENG				, NAME_CHI		
				, NATION_CODE	, DEPT_CODE			, DEPT_NAME			, POST_CODE		, JOB_CODE			, ABIL_CODE				, JOIN_CODE		
				,  uniLITE.fnCipherDecrypt(REPRE_NUM		, '') as REPRE_NUM			, SEX_CODE			, ORI_JOIN_DATE			, JOIN_DATE		
				, RETR_DATE		, RETR_RESN			, EMPLOY_TYPE		, ZIP_CODE --SUBSTRING(ZIP_CODE,1,3) + '-' + SUBSTRING(ZIP_CODE,4,3) AS ZIP_CODE		
				, KOR_ADDR		, TELEPHON			, PHONE_NO			, EMAIL_ADDR	, SCHSHIP_CODE		, GRADU_TYPE			, BUSS_OFFICE_CODE		
				, PAY_CODE		, TAX_CODE			, PAY_PROV_YN		, HIRE_INSUR_TYPE					, PAY_PROV_FLAG			, YEAR_GIVE		
				, MONTH_GIVE	, COMP_TAX_I		, RETR_GIVE			, YEAR_CALCU	, BANKBOOK_NAME		, BANK_CODE1			, B.BANK_NAME AS BANK_NAME1
				, uniLITE.fnCipherDecrypt(BANK_ACCOUNT1	, '') as BANK_ACCOUNT1		
				, MED_AVG_I		, MED_INSUR_I		, MED_INSUR_NO		, HIRE_AVG_I	, HIRE_INSUR_I		, ANU_BASE_I			, ANU_INSUR_I		
				, SPOUSE		, WOMAN				, SUPP_AGED_NUM		, DEFORM_YN		, DEFORM_NUM		, CHILD_20_NUM			, AGED_NUM		
				, AGED_NUM70	, BRING_CHILD_NUM	, ANNUAL_SALARY_I	, WAGES_STD_I	, PAY_PRESERVE_I	, BONUS_STD_I			, COM_DAY_WAGES		
				, COM_YEAR_WAGES, OT_KIND			, BONUS_KIND		, MIL_TYPE		, ARMY_KIND			, ARMY_STRT_DATE		, ARMY_LAST_DATE		
				, ARMY_GRADE	, ARMY_MAJOR		, ARMY_NO			, WEDDING_DATE	, BIRTH_DATE		, SOLAR_YN		
				, MAKE_SALE		, COST_KIND			, PAY_GUBUN			, PAY_GRADE_01	, PAY_GRADE_02		, PAY_GRADE_03			, PAY_GRADE_04
				, PAY_GRADE_05  , PAY_GRADE_BASE					,YEAR_GRADE
				, YEAR_GRADE_BASE					, uniLITE.fnCipherDecrypt(FOREIGN_NUM, '') as FOREIGN_NUM		
				, LIVE_GUBUN	, CARD_NUM			, LABOR_UNON_YN		, TRIAL_TERM_END_DATE				, MARRY_YN				, HOUSEHOLDER_YN		
				, EMAIL_SEND_YN	, PAY_PROV_STOP_YN	, BONUS_PROV_YN		, WORK_COMPEN_YN					, CONVERT(NVARCHAR(30)		
				, TAX_CODE2) as TAX_CODE2		, RETR_BASE_MONEY		, YOUTH_EXEMP_DATE					, BANK_CODE2			, BANK_NAME2		
				, uniLITE.fnCipherDecrypt(BANK_ACCOUNT2	, '') as BANK_ACCOUNT2		
				, PAY_GUBUN2	, RETR_OT_KIND		
                
                , CASE WHEN ISNULL(ORI_ZIP_CODE, '') = ''
                       THEN ''
                       ELSE SUBSTRING(ORI_ZIP_CODE,1,3) + '-' + SUBSTRING(ORI_ZIP_CODE,4,3)
                   END AS ORI_ZIP_CODE
 				
                , ORI_ADDR		, END_INSUR_NO		, SOCIAL_INSUR_YN	, NATION_TYPE	, POLITICAL_BELIF	, HOUSE_CODE			, CONTRACT_PERIOD		
				, CONTRACT_FRDATE					, CONTRACT_TODATE	, RESIDENTIAL_TERM					, RESIDENTIAL_FRDATE	, RESIDENTIAL_TODATE	
				, CONTRACT_TYPE	, DORMITORY_USE_YN	, PAY_METHOD		, WORKMAN_TYPE1	, WORKMAN_TYPE2		, WORK_SHOP_CODE		, PROG_WORK_CODE		
				, MED_GRADE		, PENS_GRADE		,  RETR_PENSION_KIND, DED_TYPE		, FOREIGN_YN		, RECOGN_NUM			, INPUT_PGMID		
				, PROMOTION_DATE, FOREIGN_SKILL_YN	, ONE_PARENT		, REMARK		, uniLITE.fnCipherDecrypt(ESS_PASSWORD		, '') as ESS_PASSWORD		
				, YOUTH_EXEMP_DATE2					, AFFIL_CODE			, ORI_MED_INSUR_I					, OLD_MED_INSUR_I		, ESS_USE_YN
				, BANKBOOK_NAME2
				, ISNULL(E.ANNOUNCE_CODE, A.ANNOUNCE_CODE) AS ANNOUNCE_CODE		, ISNULL(E.ANNOUNCE_DATE, A.ANNOUNCE_DATE) AS ANNOUNCE_DATE  
				, SCHOOL_NAME , MAJOR_NAME , TAXRATE_BASE
                , WAGES_AMT_01, WAGES_AMT_02, WAGES_AMT_03, WAGES_AMT_04
                , WAGES_AMT_05, WAGES_AMT_06, WAGES_AMT_07, WAGES_AMT_08
                , WAGES_AMT_09, WAGES_AMT_10, WAGES_AMT_11, WAGES_AMT_12, WAGES_AMT_13
                , WAGES_AMT_01+ WAGES_AMT_02+ WAGES_AMT_03+ WAGES_AMT_04
                + WAGES_AMT_05+ WAGES_AMT_06+ WAGES_AMT_07+ WAGES_AMT_08
                + WAGES_AMT_09+ WAGES_AMT_10+ WAGES_AMT_11+ WAGES_AMT_12+ WAGES_AMT_13 AS WAGES_AMT_14
                , D.CODE_NAME AS PAY_GRADE_01_NAME
                
                , A.MEMO_2
	   FROM HUM100T A
	   LEFT JOIN (SELECT CUSTOM_CODE AS BANK_CODE, CUSTOM_NAME AS BANK_NAME 
	   				FROM BCM100T 
	   			   WHERE COMP_CODE = #{S_COMP_CODE} 
	   			     AND CUSTOM_TYPE = '4' 
	   			  ) B ON A.BANK_CODE1 = B.BANK_CODE
	   LEFT JOIN (SELECT CUSTOM_CODE AS BANK_CODE, CUSTOM_NAME AS BANK_NAME2 
	   				FROM BCM100T 
	   			   WHERE COMP_CODE = #{S_COMP_CODE} 
	   			     AND CUSTOM_TYPE = '4' 
	   			  ) C ON A.BANK_CODE2 = C.BANK_CODE
       LEFT JOIN (SELECT SUB_CODE AS SUB_CODE, CODE_NAME AS CODE_NAME 
                    FROM BSA100T 
                   WHERE COMP_CODE = #{S_COMP_CODE} 
                     AND MAIN_CODE = 'HX09'
                  ) D ON D.SUB_CODE = A.PAY_GRADE_01  
       LEFT JOIN (
					SELECT  M1.PERSON_NUMB, MAX(M1.ANNOUNCE_CODE) AS ANNOUNCE_CODE, M1.ANNOUNCE_DATE
					FROM HUM760T M1 WITH(NOLOCK)
					INNER JOIN (SELECT COMP_CODE, PERSON_NUMB,  MAX(ANNOUNCE_DATE) AS ANNOUNCE_DATE
								FROM HUM760T WITH(NOLOCK)
								GROUP BY COMP_CODE, PERSON_NUMB
							   ) M2        ON M1.COMP_CODE     = M2.COMP_CODE
										  AND M1.PERSON_NUMB   = M2.PERSON_NUMB
										  AND M1.ANNOUNCE_DATE = M2.ANNOUNCE_DATE
					GROUP BY M1.COMP_CODE,M1.PERSON_NUMB, M1.ANNOUNCE_DATE
            
				 ) E  ON  A.PERSON_NUMB = E.PERSON_NUMB                 
	  WHERE A.COMP_CODE = #{S_COMP_CODE}
	    AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<select id="hum105ukrServiceImpl.chkRepreNum" parameterType="Map" resultType="rMap">	
	/* hum105ukrServiceImpl.chkRepreNum */
		SELECT COUNT(PERSON_NUMB) AS CNT
	   	  FROM HUM100T
	  	 WHERE COMP_CODE = #{S_COMP_CODE}
	       AND unilite.fnCipherDecrypt(REPRE_NUM, '') = substring(#{REPRE_NUM},1,6) + substring(#{REPRE_NUM},8,7)  
	       
	</select>
	<update id="hum105ukrServiceImpl.save" parameterType="foren.unilite.modules.human.hum.Hum100ukrModel" >
	/* hum105ukrServiceImpl.save */
		 DECLARE @PERSON_NUMB NVARCHAR(10)
		 
		 <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		 SET @PERSON_NUMB = #{PERSON_NUMB}
		 </if>
		 <if test="@foren.Ognl@isEmpty(PERSON_NUMB)">
		  SELECT @PERSON_NUMB = LEFT(#{ANNOUNCE_DATE}, 4) + RIGHT(CONVERT(NVARCHAR, (CONVERT(NUMERIC(5, 0), MAX(RIGHT(PERSON_NUMB , 3))) + 1001)), 3) FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND LEFT(PERSON_NUMB , 4)   = LEFT(#{ANNOUNCE_DATE}, 4)		
		 </if>
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HUM100T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=@PERSON_NUMB)	
        
    		BEGIN	
        		INSERT INTO HUM100T
                   (COMP_CODE
                   ,PERSON_NUMB
        			<if test="@foren.Ognl@isNotEmpty(REPRE_NUM)">  
                   ,REPRE_NUM
        			</if>
                   ,MAKE_SALE
                	<if test="@foren.Ognl@isNotEmpty(SECT_CODE)">
                   ,SECT_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                   ,DIV_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME)">
                   ,NAME
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME_ENG)">
                   ,NAME_ENG
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME_CHI)">
                   ,NAME_CHI
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NATION_CODE)">
                   ,NATION_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                   ,DEPT_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
                   ,DEPT_NAME
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
                   ,POST_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOB_CODE)">
                   ,JOB_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                   ,ABIL_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOIN_CODE)">
                   ,JOIN_CODE
                	</if>
                	
                	<if test="@foren.Ognl@isNotEmpty(SEX_CODE)">
                   ,SEX_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ORI_JOIN_DATE)">
                   ,ORI_JOIN_DATE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOIN_DATE)">
                   ,JOIN_DATE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(RETR_DATE)">
                   ,RETR_DATE
                    </if>
                	<if test="@foren.Ognl@isNotEmpty(RETR_RESN)">
                   ,RETR_RESN
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">
                   ,EMPLOY_TYPE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ZIP_CODE)">
                   ,ZIP_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(KOR_ADDR)">
                   ,KOR_ADDR
                	</if>
                    
                    <if test="@foren.Ognl@isNotEmpty(ORI_ZIP_CODE)">
                   ,ORI_ZIP_CODE
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(ORI_ADDR)">
                   ,ORI_ADDR
                    </if>
                    
                	<if test="@foren.Ognl@isNotEmpty(BIRTH_DATE)">
                   ,BIRTH_DATE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(BUSS_OFFICE_CODE)">
                   ,BUSS_OFFICE_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
                   ,PAY_GUBUN
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(TRIAL_TERM_END_DATE)">
                   ,TRIAL_TERM_END_DATE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(RETR_OT_KIND)">
                   ,RETR_OT_KIND
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
                   ,AFFIL_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
                   ,PAY_GRADE_BASE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE)">
                   ,YEAR_GRADE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE_BASE)">
                   ,YEAR_GRADE_BASE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
                   ,ANNOUNCE_CODE
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
                   ,ANNOUNCE_DATE
                	</if> 
                	<if test="@foren.Ognl@isNotEmpty(SCHOOL_NAME)">
                   ,SCHOOL_NAME
                	</if> 
                	<if test="@foren.Ognl@isNotEmpty(MAJOR_NAME)">
                   ,MAJOR_NAME
                	</if>      	        	
                	
                	,DEFORM_YN
                    
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                   ,WAGES_AMT_01
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                   ,WAGES_AMT_02
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                   ,WAGES_AMT_03
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                   ,WAGES_AMT_04
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                   ,WAGES_AMT_05
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                   ,WAGES_AMT_06
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                   ,WAGES_AMT_07
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                   ,WAGES_AMT_08
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                   ,WAGES_AMT_09
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                   ,WAGES_AMT_10
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                   ,WAGES_AMT_11
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                   ,WAGES_AMT_12
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_13)">
                   ,WAGES_AMT_13
                    </if>
                     <if test="@foren.Ognl@isNotEmpty(TAXRATE_BASE)">
                   ,TAXRATE_BASE
                    </if>
                    
                   ,INSERT_DB_USER    ,INSERT_DB_TIME     ,UPDATE_DB_USER   ,UPDATE_DB_TIME
                   
                   , MEMO_2
                   )
                 VALUES
            		  (#{S_COMP_CODE}      				
            		  ,@PERSON_NUMB
            		<if test="@foren.Ognl@isNotEmpty(REPRE_NUM)">  					
            		  ,uniLITE.fnCipherEncrypt(#{REPRE_NUM},'')    
                	</if>
                	,''
                    <if test="@foren.Ognl@isNotEmpty(SECT_CODE)"> 					
            		  ,#{SECT_CODE} 
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">   					
            		  ,#{DIV_CODE} 
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME)">    					
            		  ,#{NAME}	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME_ENG)">								
            		  ,#{NAME_ENG}     
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NAME_CHI)">					
            		  ,#{NAME_CHI}  
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(NATION_CODE)">   					
            		  ,#{NATION_CODE}  	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">				
            		  ,#{DEPT_CODE}    
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">					
            		  ,#{DEPT_NAME} 
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(POST_CODE)">   					
            		  ,#{POST_CODE}   
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOB_CODE)"> 					
            		  ,#{JOB_CODE}   
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">  					
            		  ,#{ABIL_CODE}    
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOIN_CODE)">					
            		  ,#{JOIN_CODE}  
                	</if>
                	
                	<if test="@foren.Ognl@isNotEmpty(SEX_CODE)">					
            		  ,#{SEX_CODE}		
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ORI_JOIN_DATE)">					
            		  ,#{ORI_JOIN_DATE} 
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(JOIN_DATE)">				
            		  ,#{JOIN_DATE}   
            		</if>  		
                	<if test="@foren.Ognl@isNotEmpty(RETR_DATE)">
                      ,#{RETR_DATE}
                    </if>
                	<if test="@foren.Ognl@isNotEmpty(RETR_RESN)">   				
            		  ,#{RETR_RESN}     	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">			
            		  ,#{EMPLOY_TYPE}   	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ZIP_CODE)">			
            		  ,#{ZIP_CODE}	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(KOR_ADDR)">						
            		  ,#{KOR_ADDR}	
                	</if>
                    
                    <if test="@foren.Ognl@isNotEmpty(ORI_ZIP_CODE)">            
                      ,#{ORI_ZIP_CODE}  
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(ORI_ADDR)">                        
                      ,#{ORI_ADDR}  
                    </if>
                    
                	<if test="@foren.Ognl@isNotEmpty(BIRTH_DATE)">	 					
            		  ,#{BIRTH_DATE}   
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(BUSS_OFFICE_CODE)">   			
            		  ,#{BUSS_OFFICE_CODE}  
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">  	
            		   ,#{PAY_GUBUN}   
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(TRIAL_TERM_END_DATE)">   			
            		   ,#{TRIAL_TERM_END_DATE} 	
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(RETR_OT_KIND)">
            		   ,#{RETR_OT_KIND}  
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
                   		,#{AFFIL_CODE}
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
                   		,#{PAY_GRADE_BASE}
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE)">
                   		,#{YEAR_GRADE}
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE_BASE)">
                   		,#{YEAR_GRADE_BASE}
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
                   		,#{ANNOUNCE_CODE}
                	</if>
                	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
                   		,#{ANNOUNCE_DATE}
                	</if>  
                	<if test="@foren.Ognl@isNotEmpty(SCHOOL_NAME)">
                   		,#{SCHOOL_NAME}
                	</if>  
                	<if test="@foren.Ognl@isNotEmpty(MAJOR_NAME)">
                   		,#{MAJOR_NAME}
                	</if>      	
                		,'N'
                        
                   <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                        , #{WAGES_AMT_01}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                        , #{WAGES_AMT_02}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                        , #{WAGES_AMT_03}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                        , #{WAGES_AMT_04}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                        , #{WAGES_AMT_05}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                        , #{WAGES_AMT_06}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                        , #{WAGES_AMT_07}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                        , #{WAGES_AMT_08}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                        , #{WAGES_AMT_09}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                        , #{WAGES_AMT_10}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                        , #{WAGES_AMT_11}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                        , #{WAGES_AMT_12}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_13)">
                        , #{WAGES_AMT_13}
                    </if>
                     <if test="@foren.Ognl@isNotEmpty(TAXRATE_BASE)">
                        , #{TAXRATE_BASE}
                    </if>
                    
            		     ,#{S_USER_ID}  ,GETDATE()          ,#{S_USER_ID}  ,GETDATE()     		
            		     
            			, 'NEW'
        		   ) 
                   
                   INSERT INTO HUM760T ( 
                       COMP_CODE
                     , PERSON_NUMB
                     , INSERT_DB_USER
                     , INSERT_DB_TIME
                     , UPDATE_DB_USER
                     , UPDATE_DB_TIME
                     
                     , AF_DEPT_CODE
                     , AF_DEPT_NAME
                     , AF_DIV_CODE
                     
                     , BE_DEPT_CODE
                     , BE_DEPT_NAME
                     , BE_DIV_CODE
                     
                     , ANNOUNCE_REASON
                     
                <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
                     , ANNOUNCE_DATE
                </if>
                <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
                     , ANNOUNCE_CODE
                </if>
                <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
                     , AF_POST_CODE
                </if>
                <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                     , AF_ABIL_CODE
                </if>
                
                  <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
                     , POST_CODE
                </if>
                <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                     , ABIL_CODE
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                     , WAGES_AMT_01
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                     , WAGES_AMT_02
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                     , WAGES_AMT_03
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                     , WAGES_AMT_04
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                     , WAGES_AMT_05
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                     , WAGES_AMT_06
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                     , WAGES_AMT_07
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                     , WAGES_AMT_08
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                     , WAGES_AMT_09
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                     , WAGES_AMT_10
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                     , WAGES_AMT_11
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                     , WAGES_AMT_12
                </if>
                
                
                
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                     , BE_WAGES_AMT_01
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                     , BE_WAGES_AMT_02
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                     , BE_WAGES_AMT_03
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                     , BE_WAGES_AMT_04
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                     , BE_WAGES_AMT_05
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                     , BE_WAGES_AMT_06
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                     , BE_WAGES_AMT_07
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                     , BE_WAGES_AMT_08
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                     , BE_WAGES_AMT_09
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                     , BE_WAGES_AMT_10
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                     , BE_WAGES_AMT_11
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                     , BE_WAGES_AMT_12
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
               		,AFFIL_CODE
            	</if>
            	
            	<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
               		,AF_AFFIL_CODE
            	</if>                              
                
                
                
                
             ) VALUES ( 
                    #{S_COMP_CODE}
                     , @PERSON_NUMB
                     , #{S_USER_ID}
                     , getDate()
                     , #{S_USER_ID}
                     , getDate()
                     
                     , #{DEPT_CODE}
                     , #{DEPT_NAME}
                     , #{DIV_CODE}
                     
                     , #{DEPT_CODE}
                     , #{DEPT_NAME}
                     , #{DIV_CODE}
                     
                     , '신규입사'
                     
                <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
                     , #{ANNOUNCE_DATE}
                </if>
                <if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
                     , #{ANNOUNCE_CODE}
                </if>
                <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
                     , #{POST_CODE}
                </if>
                <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                     , #{ABIL_CODE}
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
                     , #{POST_CODE}
                </if>
                <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                     , #{ABIL_CODE}
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                     , #{WAGES_AMT_01}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                     , #{WAGES_AMT_02}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                     , #{WAGES_AMT_03}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                     , #{WAGES_AMT_04}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                     , #{WAGES_AMT_05}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                     , #{WAGES_AMT_06}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                     , #{WAGES_AMT_07}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                     , #{WAGES_AMT_08}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                     , #{WAGES_AMT_09}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                     , #{WAGES_AMT_10}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                     , #{WAGES_AMT_11}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                     , #{WAGES_AMT_12}
                </if>
                
                
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                     , #{WAGES_AMT_01}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                     , #{WAGES_AMT_02}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                     , #{WAGES_AMT_03}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                     , #{WAGES_AMT_04}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                     , #{WAGES_AMT_05}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                     , #{WAGES_AMT_06}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                     , #{WAGES_AMT_07}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                     , #{WAGES_AMT_08}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                     , #{WAGES_AMT_09}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                     , #{WAGES_AMT_10}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                     , #{WAGES_AMT_11}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                     , #{WAGES_AMT_12}
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
               		,#{AFFIL_CODE}
            	</if>
            	<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
               		,#{AFFIL_CODE}
            	</if>
                                
            )
    		END
	   ELSE
    		BEGIN
    			UPDATE HUM100T
    			SET
    				  UPDATE_DB_USER = #{S_USER_ID}  
    		      	 ,UPDATE_DB_TIME = GETDATE()   
    			<if test="SECT_CODE != null">
    				 , SECT_CODE = #{SECT_CODE}
    			</if>
    			<if test="DIV_CODE != null">
    				 , DIV_CODE = #{DIV_CODE}
    			</if>
    			<if test="NAME != null">
    				 , NAME = #{NAME}
    			</if>
    			<if test="NAME_ENG != null">
    				 , NAME_ENG = #{NAME_ENG}
    			</if>
    			<if test="NAME_CHI != null">
    				 , NAME_CHI = #{NAME_CHI}
    			</if>
    			<if test="NATION_CODE != null">
    				 , NATION_CODE = #{NATION_CODE}
    			</if>
    			<if test="DEPT_CODE != null">
    				 , DEPT_CODE = #{DEPT_CODE}
    			</if>
    			<if test="DEPT_NAME != null">
    				 , DEPT_NAME = #{DEPT_NAME}
    			</if>
    			<if test="POST_CODE != null">
    				 , POST_CODE = #{POST_CODE}
    			</if>
    			<if test="JOB_CODE != null">
    				 , JOB_CODE = #{JOB_CODE}
    			</if>
    			<if test="ABIL_CODE != null">
    				 , ABIL_CODE = #{ABIL_CODE}
    			</if>
    			<if test="JOIN_CODE != null">
    				 , JOIN_CODE = #{JOIN_CODE}
    			</if>
    			<if test="REPRE_NUM != null">
    				 , REPRE_NUM = uniLITE.fnCipherEncrypt(#{REPRE_NUM},'')  
    			</if>
    			<if test="SEX_CODE != null">
    				 , SEX_CODE = #{SEX_CODE}
    			</if>
    			<if test="ORI_JOIN_DATE != null">
    				 , ORI_JOIN_DATE = #{ORI_JOIN_DATE}
    			</if>
    			<if test="JOIN_DATE != null">
    				 , JOIN_DATE = #{JOIN_DATE}
    			</if>
    			<if test="@foren.Ognl@isNotEmpty(RETR_DATE)">					
		             , RETR_DATE = #{RETR_DATE}
        		</if>
        		<if test="RETR_RESN != null">
                     , RETR_RESN = #{RETR_RESN}
                </if>
        		<if test="@foren.Ognl@isNotEmpty(SCHOOL_NAME)">
                , SCHOOL_NAME = #{SCHOOL_NAME}
                	</if> 
              	<if test="@foren.Ognl@isNotEmpty(MAJOR_NAME)">
                , MAJOR_NAME = #{MAJOR_NAME}
               	</if>       			  			
    				
    			
    			<if test="EMPLOY_TYPE != null">
    				 , EMPLOY_TYPE = #{EMPLOY_TYPE}
    			</if>
    			<if test="ZIP_CODE != null">
    				 , ZIP_CODE = #{ZIP_CODE}
    			</if>
    			<if test="KOR_ADDR != null">
    				 , KOR_ADDR = #{KOR_ADDR}
    			</if>
    			<if test="TELEPHON != null">
    				 , TELEPHON = #{TELEPHON}
    			</if>
    			<if test="PHONE_NO != null">
    				 , PHONE_NO = #{PHONE_NO}
    			</if>
    			<if test="EMAIL_ADDR != null">
    				 , EMAIL_ADDR = #{EMAIL_ADDR}
    			</if>
    			<if test="SCHSHIP_CODE != null">
    				 , SCHSHIP_CODE = #{SCHSHIP_CODE}
    			</if>
    			<if test="GRADU_TYPE != null">
    				 , GRADU_TYPE = #{GRADU_TYPE}
    			</if>
    			<if test="BUSS_OFFICE_CODE != null">
    				 , BUSS_OFFICE_CODE = #{BUSS_OFFICE_CODE}
    			</if>
    			<if test="PAY_CODE != null">
    				 , PAY_CODE = #{PAY_CODE}
    			</if>
    			<if test="TAX_CODE != null">
    				 , TAX_CODE = #{TAX_CODE}
    			</if>
    			<if test="PAY_PROV_YN != null">
    				 , PAY_PROV_YN = #{PAY_PROV_YN}
    			</if>
    			<if test="HIRE_INSUR_TYPE != null">
    				 , HIRE_INSUR_TYPE = #{HIRE_INSUR_TYPE}
    			</if>
    			<if test="PAY_PROV_FLAG != null">
    				 , PAY_PROV_FLAG = #{PAY_PROV_FLAG}
    			</if>
    			<if test="YEAR_GIVE != null">
    				 , YEAR_GIVE = #{YEAR_GIVE}
    			</if>
    			<if test="MONTH_GIVE != null">
    				 , MONTH_GIVE = #{MONTH_GIVE}
    			</if>
    			<if test="COMP_TAX_I != null">
    				 , COMP_TAX_I = #{COMP_TAX_I}
    			</if>
    			<if test="RETR_GIVE != null">
    				 , RETR_GIVE = #{RETR_GIVE}
    			</if>
    			<if test="YEAR_CALCU != null">
    				 , YEAR_CALCU = #{YEAR_CALCU}
    			</if>
    			<if test="BANKBOOK_NAME != null">
    				 , BANKBOOK_NAME = #{BANKBOOK_NAME}
    			</if>
    			<if test="BANK_CODE1 != null">
    				 , BANK_CODE1 = #{BANK_CODE1}
    			</if>
    			<if test="BANK_ACCOUNT1 != null">
    				 , BANK_ACCOUNT1 = uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT1},'')
    			</if>
    			<if test="MED_AVG_I != null">
    				 , MED_AVG_I = #{MED_AVG_I}
    			</if>
    			<if test="MED_INSUR_I != null">
    				 , MED_INSUR_I = #{MED_INSUR_I}
    			</if>
    			<if test="MED_INSUR_NO != null">
    				 , MED_INSUR_NO = #{MED_INSUR_NO}
    			</if>
    			<if test="HIRE_AVG_I != null">
    				 , HIRE_AVG_I = #{HIRE_AVG_I}
    			</if>
    			<if test="HIRE_INSUR_I != null">
    				 , HIRE_INSUR_I = #{HIRE_INSUR_I}
    			</if>
    			<if test="ANU_BASE_I != null">
    				 , ANU_BASE_I = #{ANU_BASE_I}
    			</if>
    			<if test="ANU_INSUR_I != null">
    				 , ANU_INSUR_I = #{ANU_INSUR_I}
    			</if>
    			<if test="SPOUSE != null">
    				 , SPOUSE = #{SPOUSE}
    			</if>
    			<if test="WOMAN != null">
    				 , WOMAN = #{WOMAN}
    			</if>
    			<if test="SUPP_AGED_NUM != null">
    				 , SUPP_AGED_NUM = #{SUPP_AGED_NUM}
    			</if>
    			<if test="DEFORM_YN != null">
    				 , DEFORM_YN = #{DEFORM_YN}
    			</if>
    			<if test="DEFORM_NUM != null">
    				 , DEFORM_NUM = #{DEFORM_NUM}
    			</if>
    			<if test="CHILD_20_NUM != null">
    				 , CHILD_20_NUM = #{CHILD_20_NUM}
    			</if>
    			<if test="AGED_NUM != null">
    				 , AGED_NUM = #{AGED_NUM}
    			</if>
    			<if test="AGED_NUM70 != null">
    				 , AGED_NUM70 = #{AGED_NUM70}
    			</if>
    			<if test="BRING_CHILD_NUM != null">
    				 , BRING_CHILD_NUM = #{BRING_CHILD_NUM}
    			</if>
    			<if test="ANNUAL_SALARY_I != null">
    				 , ANNUAL_SALARY_I = #{ANNUAL_SALARY_I}
    			</if>
    			<if test="WAGES_STD_I != null">
    				 , WAGES_STD_I = #{WAGES_STD_I}
    			</if>
    			<if test="PAY_PRESERVE_I != null">
    				 , PAY_PRESERVE_I = #{PAY_PRESERVE_I}
    			</if>
    			<if test="BONUS_STD_I != null">
    				 , BONUS_STD_I = #{BONUS_STD_I}
    			</if>
    			<if test="COM_DAY_WAGES != null">
    				 , COM_DAY_WAGES = #{COM_DAY_WAGES}
    			</if>
                <if test="COM_YEAR_WAGES != null">
                     , COM_YEAR_WAGES = #{COM_YEAR_WAGES}
                </if>
    			<if test="OT_KIND != null">
    				 , OT_KIND = #{OT_KIND}
    			</if>
    			<if test="BONUS_KIND != null">
    				 , BONUS_KIND = #{BONUS_KIND}
    			</if>
    			<if test="MIL_TYPE != null">
    				 , MIL_TYPE = #{MIL_TYPE}
    			</if>
    			<if test="ARMY_KIND != null">
    				 , ARMY_KIND = #{ARMY_KIND}
    			</if>
    			<if test="ARMY_STRT_DATE != null">
    				 , ARMY_STRT_DATE = #{ARMY_STRT_DATE}
    			</if>
    			<if test="ARMY_LAST_DATE != null">
    				 , ARMY_LAST_DATE = #{ARMY_LAST_DATE}
    			</if>
    			<if test="ARMY_GRADE != null">
    				 , ARMY_GRADE = #{ARMY_GRADE}
    			</if>
    			<if test="ARMY_MAJOR != null">
    				 , ARMY_MAJOR = #{ARMY_MAJOR}
    			</if>
    			<if test="ARMY_NO != null">
    				 , ARMY_NO = #{ARMY_NO}
    			</if>
    			<if test="WEDDING_DATE != null">
    				 , WEDDING_DATE = #{WEDDING_DATE}
    			</if>
    			<if test="BIRTH_DATE != null">
    				 , BIRTH_DATE = #{BIRTH_DATE}
    			</if>
    			<if test="SOLAR_YN != null">
    				 , SOLAR_YN = #{SOLAR_YN}
    			</if>
    			<if test="MAKE_SALE != null">
    				 , MAKE_SALE = #{MAKE_SALE}
    			</if>
    			<if test="COST_KIND != null">
    				 , COST_KIND = #{COST_KIND}
    			</if>
    			<if test="PAY_GUBUN != null">
    				 , PAY_GUBUN = #{PAY_GUBUN}
    			</if>
    			<if test="PAY_GRADE_01 != null">
    				 , PAY_GRADE_01 = #{PAY_GRADE_01}
    			</if>
    			<if test="PAY_GRADE_02 != null">
    				 , PAY_GRADE_02 = #{PAY_GRADE_02}
    			</if>
    			<if test="PAY_GRADE_03 != null">
    				 , PAY_GRADE_03 = #{PAY_GRADE_03}
    			</if>
    			<if test="PAY_GRADE_04 != null">
    				 , PAY_GRADE_04 = #{PAY_GRADE_04}
    			</if>
                
                <if test="PAY_GRADE_05 != null">
                     , PAY_GRADE_05 = #{PAY_GRADE_05}
                </if>
                
    			<if test="FOREIGN_NUM != null">
    				 , FOREIGN_NUM = uniLITE.fnCipherEncrypt(#{FOREIGN_NUM},'')
    			</if>
    			<if test="LIVE_GUBUN != null">
    				 , LIVE_GUBUN = #{LIVE_GUBUN}
    			</if>
    			<if test="CARD_NUM != null">
    				 , CARD_NUM = #{CARD_NUM}
    			</if>
    			<if test="LABOR_UNON_YN != null">
    				 , LABOR_UNON_YN = #{LABOR_UNON_YN}
    			</if>
    			<if test="TRIAL_TERM_END_DATE != null">
    				 , TRIAL_TERM_END_DATE = #{TRIAL_TERM_END_DATE}
    			</if>
    			<if test="MARRY_YN != null">
    				 , MARRY_YN = #{MARRY_YN}
    			</if>
    			<if test="HOUSEHOLDER_YN != null">
    				 , HOUSEHOLDER_YN = #{HOUSEHOLDER_YN}
    			</if>
    			<if test="EMAIL_SEND_YN != null">
    				 , EMAIL_SEND_YN = #{EMAIL_SEND_YN}
    			</if>
    			<if test="PAY_PROV_STOP_YN != null">
    				 , PAY_PROV_STOP_YN = #{PAY_PROV_STOP_YN}
    			</if>
    			<if test="BONUS_PROV_YN != null">
    				 , BONUS_PROV_YN = #{BONUS_PROV_YN}
    			</if>
    			<if test="WORK_COMPEN_YN != null">
    				 , WORK_COMPEN_YN = #{WORK_COMPEN_YN}
    			</if>
    			<if test="TAX_CODE2 != null">
    				 , TAX_CODE2 = #{TAX_CODE2}
    			</if>
    			<if test="RETR_BASE_MONEY != null">
    				 , RETR_BASE_MONEY = #{RETR_BASE_MONEY}
    			</if>
    			<if test="YOUTH_EXEMP_DATE != null">
    				 , YOUTH_EXEMP_DATE = #{YOUTH_EXEMP_DATE}
    			</if>
    			<if test="BANK_CODE2 != null">
    				 , BANK_CODE2 = #{BANK_CODE2}
    			</if>
    			<if test="BANK_ACCOUNT2 != null">
    				 , BANK_ACCOUNT2 = uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT2},'')
    			</if>
    			<if test="PAY_GUBUN2 != null">
    				 , PAY_GUBUN2 = #{PAY_GUBUN2}
    			</if>
    			<if test="RETR_OT_KIND != null">
    				 , RETR_OT_KIND = #{RETR_OT_KIND}
    			</if>
    			<if test="ORI_ZIP_CODE != null">
    				 , ORI_ZIP_CODE = #{ORI_ZIP_CODE}
    			</if>
    			<if test="ORI_ADDR != null">
    				 , ORI_ADDR = #{ORI_ADDR}
    			</if>
    			<if test="END_INSUR_NO != null">
    				 , END_INSUR_NO = #{END_INSUR_NO}
    			</if>
    			<if test="SOCIAL_INSUR_YN != null">
    				 , SOCIAL_INSUR_YN = #{SOCIAL_INSUR_YN}
    			</if>
    			<if test="NATION_TYPE != null">
    				 , NATION_TYPE = #{NATION_TYPE}
    			</if>
    			<if test="POLITICAL_BELIF != null">
    				 , POLITICAL_BELIF = #{POLITICAL_BELIF}
    			</if>
    			<if test="HOUSE_CODE != null">
    				 , HOUSE_CODE = #{HOUSE_CODE}
    			</if>
    			<if test="CONTRACT_PERIOD != null">
    				 , CONTRACT_PERIOD = #{CONTRACT_PERIOD}
    			</if>
    			<if test="CONTRACT_FRDATE != null">
    				 , CONTRACT_FRDATE = #{CONTRACT_FRDATE}
    			</if>
    			<if test="CONTRACT_TODATE != null">
    				 , CONTRACT_TODATE = #{CONTRACT_TODATE}
    			</if>
    			<if test="RESIDENTIAL_TERM != null">
    				 , RESIDENTIAL_TERM = #{RESIDENTIAL_TERM}
    			</if>
    			<if test="RESIDENTIAL_FRDATE != null">
    				 , RESIDENTIAL_FRDATE = #{RESIDENTIAL_FRDATE}
    			</if>
    			<if test="RESIDENTIAL_TODATE != null">
    				 , RESIDENTIAL_TODATE = #{RESIDENTIAL_TODATE}
    			</if>
    			<if test="CONTRACT_TYPE != null">
    				 , CONTRACT_TYPE = #{CONTRACT_TYPE}
    			</if>
    			<if test="DORMITORY_USE_YN != null">
    				 , DORMITORY_USE_YN = #{DORMITORY_USE_YN}
    			</if>
    			<if test="PAY_METHOD != null">
    				 , PAY_METHOD = #{PAY_METHOD}
    			</if>
    			<if test="WORKMAN_TYPE1 != null">
    				 , WORKMAN_TYPE1 = #{WORKMAN_TYPE1}
    			</if>
    			<if test="WORKMAN_TYPE2 != null">
    				 , WORKMAN_TYPE2 = #{WORKMAN_TYPE2}
    			</if>
    			<if test="WORK_SHOP_CODE != null">
    				 , WORK_SHOP_CODE = #{WORK_SHOP_CODE}
    			</if>
    			<if test="PROG_WORK_CODE != null">
    				 , PROG_WORK_CODE = #{PROG_WORK_CODE}
    			</if>
    			<if test="MED_GRADE != null">
    				 , MED_GRADE = #{MED_GRADE}
    			</if>
    			<if test="PENS_GRADE != null">
    				 , PENS_GRADE = #{PENS_GRADE}
    			</if>
    			<if test="RETR_PENSION_KIND != null">
    				 , RETR_PENSION_KIND = #{RETR_PENSION_KIND}
    			</if>
    			<if test="DED_TYPE != null">
    				 , DED_TYPE = #{DED_TYPE}
    			</if>
    			<if test="FOREIGN_YN != null">
    				 , FOREIGN_YN = #{FOREIGN_YN}
    			</if>
    			<if test="RECOGN_NUM != null">
    				 , RECOGN_NUM = #{RECOGN_NUM}
    			</if>
    			<if test="INPUT_PGMID != null">
    				 , INPUT_PGMID = #{INPUT_PGMID}
    			</if>
    			<if test="PROMOTION_DATE != null">
    				 , PROMOTION_DATE = #{PROMOTION_DATE}
    			</if>
    			<if test="FOREIGN_SKILL_YN != null">
    				 , FOREIGN_SKILL_YN = #{FOREIGN_SKILL_YN}
    			</if>
    			<if test="ONE_PARENT != null">
    				 , ONE_PARENT = #{ONE_PARENT}
    			</if>
    			<if test="REMARK != null">
    				 , REMARK = #{REMARK}
    			</if>
    			<if test="ESS_PASSWORD != null">
    				 , ESS_PASSWORD = uniLITE.fnCipherEncrypt(#{ESS_PASSWORD}, '')
    			</if>
    			<if test="YOUTH_EXEMP_DATE2 != null">
    				 , YOUTH_EXEMP_DATE2 = #{YOUTH_EXEMP_DATE2}
    			</if>
    			<if test="YOUTH_EXEMP_DATE3 != null">
    				 , YOUTH_EXEMP_DATE3 = #{YOUTH_EXEMP_DATE3}
    			</if>
    			<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
    	       		, AFFIL_CODE = #{AFFIL_CODE}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
    	       		,PAY_GRADE_BASE = #{PAY_GRADE_BASE}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE)">
    	       		,YEAR_GRADE = #{YEAR_GRADE}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(YEAR_GRADE_BASE)">
    	       		,YEAR_GRADE_BASE = #{YEAR_GRADE_BASE}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(ORI_MED_INSUR_I)">
    	       		,ORI_MED_INSUR_I = #{ORI_MED_INSUR_I}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(OLD_MED_INSUR_I)">
    	       		,OLD_MED_INSUR_I = #{OLD_MED_INSUR_I}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(ESS_USE_YN)">
    	       		,ESS_USE_YN = #{ESS_USE_YN}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
    	       		,ANNOUNCE_CODE = #{ANNOUNCE_CODE}
    	    	</if>
    	    	<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
    	       		,ANNOUNCE_DATE = #{ANNOUNCE_DATE}
    	    	</if>
                
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_01)">
                    ,WAGES_AMT_01 = #{WAGES_AMT_01}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_02)">
                    ,WAGES_AMT_02 = #{WAGES_AMT_02}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_03)">
                    ,WAGES_AMT_03 = #{WAGES_AMT_03}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_04)">
                    ,WAGES_AMT_04 = #{WAGES_AMT_04}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_05)">
                    ,WAGES_AMT_05 = #{WAGES_AMT_05}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_06)">
                    ,WAGES_AMT_06 = #{WAGES_AMT_06}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_07)">
                    ,WAGES_AMT_07 = #{WAGES_AMT_07}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_08)">
                    ,WAGES_AMT_08 = #{WAGES_AMT_08}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_09)">
                    ,WAGES_AMT_09 = #{WAGES_AMT_09}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_10)">
                    ,WAGES_AMT_10 = #{WAGES_AMT_10}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_11)">
                    ,WAGES_AMT_11 = #{WAGES_AMT_11}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_12)">
                    ,WAGES_AMT_12 = #{WAGES_AMT_12}
                </if>
                <if test="@foren.Ognl@isNotEmpty(WAGES_AMT_13)">
                    ,WAGES_AMT_13 = #{WAGES_AMT_13}
                </if>
    	    	<if test="@foren.Ognl@isNotEmpty(TAXRATE_BASE)">
                    ,TAXRATE_BASE = #{TAXRATE_BASE}
                </if>
                	, MEMO_2	= NULL
    			WHERE COMP_CODE = #{S_COMP_CODE}
    			  AND PERSON_NUMB = #{PERSON_NUMB}
                  
                  
             --시작일이 같은 경우, 삭제된다.    
             DELETE FROM HPA700T
              WHERE COMP_CODE     = #{S_COMP_CODE}
                AND PERSON_NUMB   = #{PERSON_NUMB}
                --AND PAY_FR_YYYYMM = CONVERT(NVARCHAR(06), GETDATE(), 112)
                --AND SUPP_TYPE     = '1'
                --AND PROV_GUBUN    = '1'
             
             --삭제 후, 새로 인서트
             INSERT HPA700T
             (
                COMP_CODE
              , PERSON_NUMB
              , SUPP_TYPE
              , PROV_GUBUN
              , WAGES_CODE
              , PAY_FR_YYYYMM
              , PAY_TO_YYYYMM
              , DED_AMOUNT_I
              , REMARK
              , INSERT_DB_USER
              , INSERT_DB_TIME
              , UPDATE_DB_USER
              , UPDATE_DB_TIME
             ) 
  
               
               
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_05, 0) = 0 THEN '' ELSE '130' END  AS WAGES_CODE         -- 가족수당코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_05, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_05, 0) = 0 THEN '' ELSE '130' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_06, 0) = 0 THEN '' ELSE '150' END  AS WAGES_CODE         -- 생산장려코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_06, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_06, 0) = 0 THEN '' ELSE '150' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_07, 0) = 0 THEN '' ELSE '160' END  AS WAGES_CODE         -- 반장수당코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_07, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_07, 0) = 0 THEN '' ELSE '160' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_08, 0) = 0 THEN '' ELSE '180' END  AS WAGES_CODE         -- 연구수당코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_08, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_08, 0) = 0 THEN '' ELSE '180' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_09, 0) = 0 THEN '' ELSE '250' END  AS WAGES_CODE         -- 기타수당1코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_09, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_09, 0) = 0 THEN '' ELSE '250' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_10, 0) = 0 THEN '' ELSE '260' END  AS WAGES_CODE         -- 기타수당2코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_10, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_10, 0) = 0 THEN '' ELSE '260' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_11, 0) = 0 THEN '' ELSE '220' END  AS WAGES_CODE         -- 운전수당코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_11, 0)                                       AS DED_AMOUNT_I       -- 
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_11, 0) = 0 THEN '' ELSE '220' END != ''
               
               UNION ALL 
               
               SELECT A.COMP_CODE
                    , A.PERSON_NUMB
                    , '1'  AS SUPP_TYPE
                    , '1'  AS PROV_GUBUN
                    , CASE WHEN ISNULL(A.WAGES_AMT_12, 0) = 0 THEN '' ELSE '190' END  AS WAGES_CODE         -- 연수수당코드
                    --, CONVERT(NVARCHAR(06), GETDATE(), 112)                           AS PAY_FR_YYYYMM      -- 기간FROM
                    , A.JOIN_DATE                                                     AS PAY_FR_YYYYMM      -- 기간FROM
                    , '299912'                                                        AS PAY_TO_YYYYMM      -- 기간TO
                    , ISNULL(A.WAGES_AMT_12, 0)                                       AS WAGES_AMT          -- 기본급
                    , ''                                                              AS REMARK             -- 비고
                    , #{S_USER_ID}                                                    AS INSERT_DB_USER     -- 등록자
                    , GETDATE()                                                       AS INSERT_DB_TINE     -- 등록일
                    , #{S_USER_ID}                                                    AS UPDATE_DB_USER     -- 수정자
                    , GETDATE()                                                       AS UPDATE_DB_TINE     -- 수정일
                FROM HUM100T A WITH (NOLOCK)
               WHERE A.COMP_CODE   = #{S_COMP_CODE}
                 AND A.PERSON_NUMB = #{PERSON_NUMB}
                 AND CASE WHEN ISNULL(A.WAGES_AMT_12, 0) = 0 THEN '' ELSE '190' END != ''
                  
              --해당월보다 작은 것 중, 가장 큰 시작월의 종료일을 현재월 - 1 한다.
              UPDATE A
                SET PAY_TO_YYYYMM =  CONVERT(NVARCHAR(06), DATEADD(MM, -1, CONVERT(NVARCHAR(06), GETDATE(), 112) + '01'), 112)
            
               FROM       HPA700T A
               INNER JOIN HUM100T B ON B.COMP_CODE     = A.COMP_CODE
                                   AND B.PERSON_NUMB   = A.PERSON_NUMB
                                   AND A.PAY_TO_YYYYMM = '299912'
              WHERE A.COMP_CODE     = #{S_COMP_CODE}
                AND A.PERSON_NUMB   = #{PERSON_NUMB}
                AND A.PAY_TO_YYYYMM = '299912'
                AND A.PAY_FR_YYYYMM = (
                                        SELECT MAX(D.PAY_FR_YYYYMM) AS PAY_FR_YYYYMM
                                        FROM HPA700T D WITH (NOLOCK)
                                        WHERE D.COMP_CODE    = #{S_COMP_CODE}
                                          AND D.PERSON_NUMB  = B.PERSON_NUMB
                                          AND D.PAY_FR_YYYYMM &lt; CONVERT(NVARCHAR(06), GETDATE(), 112)
                                        GROUP BY D.COMP_CODE, D.PERSON_NUMB
                                        )
            --급여정보 수정시         
            UPDATE A
               SET AF_PAY_GRADE_01 = B.PAY_GRADE_01
                 , AF_PAY_GRADE_02 = B.PAY_GRADE_02
                 , AF_PAY_GRADE_03 = B.PAY_GRADE_03
                 , AF_PAY_GRADE_04 = B.PAY_GRADE_04
                 , AF_PAY_GRADE_05 = B.PAY_GRADE_05
                 
                 , PAY_GRADE_01 = B.PAY_GRADE_01
                 , PAY_GRADE_02 = B.PAY_GRADE_02
                 , PAY_GRADE_03 = B.PAY_GRADE_03
                 , PAY_GRADE_04 = B.PAY_GRADE_04
                 , PAY_GRADE_05 = B.PAY_GRADE_05
                 
                 , WAGES_AMT_01    = B.WAGES_AMT_01
                 , WAGES_AMT_02    = B.WAGES_AMT_02
                 , WAGES_AMT_03    = B.WAGES_AMT_03
                 , WAGES_AMT_04    = B.WAGES_AMT_04
                 , WAGES_AMT_05    = B.WAGES_AMT_05
                 , WAGES_AMT_06    = B.WAGES_AMT_06
                 , WAGES_AMT_07    = B.WAGES_AMT_07
                 , WAGES_AMT_08    = B.WAGES_AMT_08
                 , WAGES_AMT_09    = B.WAGES_AMT_09
                 , WAGES_AMT_10    = B.WAGES_AMT_10
                 , WAGES_AMT_11    = B.WAGES_AMT_11
                 , WAGES_AMT_12    = B.WAGES_AMT_12
                 , WAGES_AMT_13    = B.WAGES_AMT_13
                 
                 , BE_WAGES_AMT_01    = B.WAGES_AMT_01
                 , BE_WAGES_AMT_02    = B.WAGES_AMT_02
                 , BE_WAGES_AMT_03    = B.WAGES_AMT_03
                 , BE_WAGES_AMT_04    = B.WAGES_AMT_04
                 , BE_WAGES_AMT_05    = B.WAGES_AMT_05
                 , BE_WAGES_AMT_06    = B.WAGES_AMT_06
                 , BE_WAGES_AMT_07    = B.WAGES_AMT_07
                 , BE_WAGES_AMT_08    = B.WAGES_AMT_08
                 , BE_WAGES_AMT_09    = B.WAGES_AMT_09
                 , BE_WAGES_AMT_10    = B.WAGES_AMT_10
                 , BE_WAGES_AMT_11    = B.WAGES_AMT_11
                 , BE_WAGES_AMT_12    = B.WAGES_AMT_12
                 , BE_WAGES_AMT_13    = B.WAGES_AMT_13
                 
                 , BE_PAY_CODE    = B.PAY_CODE
                 , AF_PAY_CODE    = B.PAY_CODE
                 
              FROM HUM760T A
                   INNER JOIN HUM100T B  ON B.COMP_CODE   = A.COMP_CODE
                                        AND B.PERSON_NUMB = A.PERSON_NUMB
             WHERE A.COMP_CODE     = #{S_COMP_CODE}
               AND B.PERSON_NUMB   = #{PERSON_NUMB}
               AND A.ANNOUNCE_CODE = #{ANNOUNCE_CODE}
               AND A.ANNOUNCE_DATE = (SELECT MAX(C.ANNOUNCE_DATE)
                                        FROM HUM100T C
                                       WHERE C.COMP_CODE   = A.COMP_CODE
                                         AND C.PERSON_NUMB = A.PERSON_NUMB )
                         
                 
			
		<if test="MEMO_2 == &quot;NEW&quot;">
			
			IF EXISTS (	SELECT *
						  FROM HPA200T
						 WHERE COMP_CODE   = #{S_COMP_CODE}
						   AND PERSON_NUMB = #{PERSON_NUMB}
						   AND WAGES_CODE IN ('110', '120', '130', '150', '160', '180', '250', '260', '220', '190', '270')	)
			BEGIN
				DELETE A
				  FROM HPA200T A WITH(NOLOCK)
				 WHERE A.COMP_CODE   = #{S_COMP_CODE}
				   AND A.PERSON_NUMB = #{PERSON_NUMB}
				   AND A.WAGES_CODE IN ('110', '120', '130', '150', '160', '180', '250', '260', '220', '190', '270')

				INSERT HPA200T --신규
					 ( COMP_CODE		, PERSON_NUMB		, PROV_GUBUN		, WAGES_CODE		, AMOUNT_I
					 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
				SELECT COMP_CODE
					 , PERSON_NUMB
					 , '1'	AS PROV_GUBUN
					 , CASE	WHEN WAGES_CD = 'WAGES_AMT_03' THEN '110'
							WHEN WAGES_CD = 'WAGES_AMT_04' THEN '120'
							WHEN WAGES_CD = 'WAGES_AMT_05' THEN '130'
							WHEN WAGES_CD = 'WAGES_AMT_06' THEN '150'
							WHEN WAGES_CD = 'WAGES_AMT_07' THEN '160'
							WHEN WAGES_CD = 'WAGES_AMT_08' THEN '180'
							WHEN WAGES_CD = 'WAGES_AMT_09' THEN '250'
							WHEN WAGES_CD = 'WAGES_AMT_10' THEN '260'
							WHEN WAGES_CD = 'WAGES_AMT_11' THEN '220'
							WHEN WAGES_CD = 'WAGES_AMT_12' THEN '190'
							WHEN WAGES_CD = 'WAGES_AMT_13' THEN '270'
							ELSE ''
					   END	AS WAGES_CODE
					 , AMOUNT_I
					 , #{S_USER_ID}		AS INSERT_DB_USER
					 , GETDATE()		AS INSERT_DB_TIME
					 , #{S_USER_ID}		AS UPDATE_DB_USER
					 , GETDATE()		AS UPDATE_DB_TIME
				  FROM (
						SELECT COMP_CODE	, PERSON_NUMB	, ANNOUNCE_DATE	, ANNOUNCE_CODE
							 , WAGES_AMT_03	, WAGES_AMT_04	, WAGES_AMT_05	, WAGES_AMT_06
							 , WAGES_AMT_07	, WAGES_AMT_08	, WAGES_AMT_09	, WAGES_AMT_10
							 , WAGES_AMT_11	, WAGES_AMT_12	, WAGES_AMT_13
						  FROM HUM760T A
						 WHERE A.COMP_CODE		= #{S_COMP_CODE}
						   AND A.PERSON_NUMB	= #{PERSON_NUMB}
						   AND A.ANNOUNCE_DATE	= (	SELECT MAX(C.ANNOUNCE_DATE)
													  FROM HUM100T C
													 WHERE C.COMP_CODE   = A.COMP_CODE
													   AND C.PERSON_NUMB = A.PERSON_NUMB )
						   AND ANNOUNCE_CODE	= #{ANNOUNCE_CODE}
					   ) P
						UNPIVOT (
									AMOUNT_I FOR WAGES_CD IN ( WAGES_AMT_03	, WAGES_AMT_04	, WAGES_AMT_05	, WAGES_AMT_06
															 , WAGES_AMT_07	, WAGES_AMT_08	, WAGES_AMT_09	, WAGES_AMT_10
															 , WAGES_AMT_11	, WAGES_AMT_12	, WAGES_AMT_13	)
								) AS UNP
				 WHERE AMOUNT_I > 0
			END
			
		</if>
    	END
             
	</update>
	
	<select id="hum105ukrServiceImpl.personalInfoDeleteCheck" parameterType="Map" resultType="rMap">
		/* hum100ukrServiceImpl.personalInfoDeleteCheck */
		/* 인사기본자료정보 삭제시 급여, 근태정보 존재여부 확인 */
	SELECT (ISNULL(A.COUNTS, 0) + ISNULL(B.COUNTS, 0)) AS COUNTS
	  FROM (SELECT COMP_CODE, PERSON_NUMB, COUNT(*) AS COUNTS
	          FROM HPA600T WITH (NOLOCK)
		     WHERE COMP_CODE   = #{S_COMP_CODE}
	           AND PERSON_NUMB = #{PERSON_NUMB}
	         GROUP BY COMP_CODE, PERSON_NUMB) AS A
		    LEFT JOIN (SELECT COMP_CODE, PERSON_NUMB, COUNT(*) AS COUNTS
	                     FROM HAT300T WITH (NOLOCK)
		                WHERE COMP_CODE   = #{S_COMP_CODE}
	                      AND PERSON_NUMB = #{PERSON_NUMB}
	                    GROUP BY COMP_CODE, PERSON_NUMB) AS B ON B.COMP_CODE = A.COMP_CODE AND B.PERSON_NUMB = A.PERSON_NUMB
	</select>	
	
	<update id="hum105ukrServiceImpl.personalInfoDelete" parameterType="Map">	
		/* hum100ukrServiceImpl.personalInfoDelete */
        DELETE FROM HUM100t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM200t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM500t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM600t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HPA200T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HPA500T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM120T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
      
	</update>		
	<update id="hum105ukrServiceImpl.photoModified" parameterType="foren.unilite.modules.human.hum.Hum100ukrModel">	
	/* hum105ukrServiceImpl.photoModified */
		UPDATE HUM100T
		SET	 UPDATE_DB_USER = #{S_USER_ID}  
		     ,UPDATE_DB_TIME = GETDATE()   
		WHERE COMP_CODE=#{S_COMP_CODE}
			  AND PERSON_NUMB=#{PERSON_NUMB}
	</update>
	<select id="hum105ukrServiceImpl.getMonthInsurI" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.getMonthInsurI */
		DECLARE @STD_AMT NUMERIC(30,2),
				@INSU_AMT1 NUMERIC(30,0),
				@INSU_AMT2 NUMERIC(30,0),
				@INSUR_RATE1 NUMERIC(30,2)
		SET @STD_AMT = #{MONTH_AVG_I}
		SELECT @INSU_AMT1 =  		 
				ROUND((CASE WHEN INSUR_SEQ = '1' THEN STD_END_AMOUNT_I * (INSUR_RATE /100) * (INSURPAY_RATE/100)
				    WHEN INSUR_SEQ = '2' THEN (@STD_AMT * (INSUR_RATE / 100)) * (INSURPAY_RATE / 100)
				    WHEN INSUR_SEQ = '3' THEN (STD_STRT_AMOUNT_I * (INSUR_RATE / 100)) * (INSURPAY_RATE / 100)
				    ELSE 0
				END) ,-1, 1),
			   @INSUR_RATE1 = INSUR_RATE1
		FROM (
				SELECT INSUR_SEQ
					 
					 , STD_STRT_AMOUNT_I
					 , STD_END_AMOUNT_I
					 , INSUR_RATE
					 , CASE WHEN INSUR_TYPE = '1' THEN ANUT_PRSN_RATE1
							ELSE MED_PRSN_RATE
							END AS INSURPAY_RATE
					 , INSUR_RATE1
				  FROM HAD300T A INNER JOIN HBS400T B
									ON A.COMP_CODE = B.COMP_CODE
				 WHERE A.COMP_CODE = #{S_COMP_CODE}
				   AND A.BASE_YEAR = LEFT(CONVERT(NVARCHAR(10), GETDATE(), 112), 4)
				   AND INSUR_TYPE = #{TYPE} ) AS A
		 WHERE @STD_AMT BETWEEN  STD_STRT_AMOUNT_I AND STD_END_AMOUNT_I
		
		 SELECT @INSU_AMT2 = @INSU_AMT1 + @INSU_AMT1 * (@INSUR_RATE1/100)
		<if test="TYPE == 2">
		 SELECT @INSU_AMT1 AS INSUR_I, floor(@INSU_AMT2 / 10)* 10 AS INSUR_I2, floor(@INSU_AMT2 / 10)* 10  - @INSU_AMT1 AS INSUR_I3
		</if>
		<if test="TYPE != 2">
		 SELECT @INSU_AMT2 AS INSUR_I 
		</if>
	</select>
	<select id="hum105ukrServiceImpl.getHireInsurI" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.getHireInsurI */
		SELECT #{HIRE_AVG_I} * EMPLOY_RATE / 100  AS HIRE_INSUR_I
		  FROM HBS400T
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND COMPANY_CODE = '1'
	</select>
	<select id="hum105ukrServiceImpl.familyList" parameterType="Map" resultType="rMap">	
	/* hum105ukrServiceImpl.familyList */
			SELECT A.NAME
		     , A.PERSON_NUMB
		     , B.FAMILY_NAME
		     , B.REL_CODE 
		     , uniLITE.fnCipherDecrypt(B.REPRE_NUM, 'A')  AS REPRE_NUM
		     , 'Y' AS REPRE_NUMCHK
		     , B.TOGETHER_YN
		     , B.SCHSHIP_CODE
		     , B.GRADU_TYPE
		     , B.OCCUPATION
		     , B.COMP_NAME
		     , B.POST_NAME
		     , B.UPDATE_DB_USER
		     , B.UPDATE_DB_TIME
		     , A.COMP_CODE
		  FROM HUM100T A 
		  INNER JOIN HUM200T B  ON A.COMP_CODE   = B.COMP_CODE   
		                       AND A.PERSON_NUMB = B.PERSON_NUMB
		  WHERE A.COMP_CODE=#{S_COMP_CODE}
		    AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<select id="hum105ukrServiceImpl.chkFamilyRepreNum" parameterType="Map" resultType="rMap">	
	/* hum105ukrServiceImpl.chkFamilyRepreNum */
		SELECT COUNT(PERSON_NUMB) AS CNT
	   	  FROM HUM200T
	  	 WHERE COMP_CODE = #{S_COMP_CODE}
	       AND uniLITE.fnCipherDecrypt(REPRE_NUM, '') = #{REPRE_NUM}
	</select>
	<insert id="hum105ukrServiceImpl.insertFamilyInfo" parameterType="Map">
	/* hum105ukrServiceImpl.insertFamilyInfo */
		INSERT INTO HUM200T ( 
			COMP_CODE
			 , INSERT_DB_USER
			 , INSERT_DB_TIME
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			 , PERSON_NUMB
		</if>
		<if test="@foren.Ognl@isNotEmpty(FAMILY_NAME)">
			 , FAMILY_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(REL_CODE)">
			 , REL_CODE
		</if>
		<if test="@foren.Ognl@isNotEmpty(REPRE_NUM)">
			 , REPRE_NUM
		</if>
		<if test="@foren.Ognl@isNotEmpty(SCHSHIP_CODE)">
			 , SCHSHIP_CODE
		</if>
		<if test="@foren.Ognl@isNotEmpty(GRADU_TYPE)">
			 , GRADU_TYPE
		</if>
		<if test="@foren.Ognl@isNotEmpty(OCCUPATION)">
			 , OCCUPATION
		</if>
		<if test="@foren.Ognl@isNotEmpty(COMP_NAME)">
			 , COMP_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_NAME)">
			 , POST_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(TOGETHER_YN)">
			 , TOGETHER_YN
		</if>
		
	 ) VALUES ( 
			#{S_COMP_CODE}
			 , #{S_USER_ID}
			 , getDate()
			 , #{S_USER_ID}
			 , getDate()
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			 , #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isNotEmpty(FAMILY_NAME)">
			 , #{FAMILY_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(REL_CODE)">
			 , #{REL_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(REPRE_NUM)">
			 , uniLITE.fnCipherEncrypt(#{REPRE_NUM},'')  
		</if>
		<if test="@foren.Ognl@isNotEmpty(SCHSHIP_CODE)">
			 , #{SCHSHIP_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(GRADU_TYPE)">
			 , #{GRADU_TYPE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(OCCUPATION)">
			 , #{OCCUPATION}
		</if>
		<if test="@foren.Ognl@isNotEmpty(COMP_NAME)">
			 , #{COMP_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_NAME)">
			 , #{POST_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(TOGETHER_YN)">
			 , #{TOGETHER_YN}
		</if>
	)
	</insert>
	<update id="hum105ukrServiceImpl.updateFamilyInfo" parameterType="Map">
	/* hum105ukrServiceImpl.updateFamilyInfo */
		UPDATE HUM200T 
		   SET     UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'FAMILY_NAME')">
				 , FAMILY_NAME = #{FAMILY_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'REL_CODE')">
				 , REL_CODE = #{REL_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'REPRE_NUM')">
				 , REPRE_NUM = uniLITE.fnCipherEncrypt(#{REPRE_NUM},'')  
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'SCHSHIP_CODE')">
				 , SCHSHIP_CODE = #{SCHSHIP_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRADU_TYPE')">
				 , GRADU_TYPE = #{GRADU_TYPE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'OCCUPATION')">
				 , OCCUPATION = #{OCCUPATION}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'COMP_NAME')">
				 , COMP_NAME = #{COMP_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'POST_NAME')">
				 , POST_NAME = #{POST_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'TOGETHER_YN')">
				 , TOGETHER_YN = #{TOGETHER_YN}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND FAMILY_NAME = #{FAMILY_NAME} 
			 AND REL_CODE = #{REL_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteFamilyInfo" parameterType="Map">
	/* hum105ukrServiceImpl.deleteFamilyInfo */
		DELETE FROM HUM200T 		  
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND FAMILY_NAME = #{FAMILY_NAME} 
			 AND REL_CODE = #{REL_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.healthInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.healthInfo */
		SELECT 
			 B.PERSON_NUMB
		     , B.NAME
		     , B.DEPT_CODE
		     , B.DEPT_NAME
		     , A.HEIGHT AS HEIGHT 
		     , A.WEIGHT AS WEIGHT 
		     , A.SIGHT_LEFT AS SIGHT_LEFT 
		     , A.SIGHT_RIGHT AS SIGHT_RIGHT 
		     , A.BLOOD_KIND AS BLOOD_KIND 
		     , A.COLOR_YN AS COLOR_YN 
		     , A.LIVE_KIND AS LIVE_KIND 
		     , A.GROUND AS GROUND 
		     , A.FLOOR_SPACE AS FLOOR_SPACE 
		     , A.GARDEN AS GARDEN 
		     , A.REAL_PROPERTY AS REAL_PROPERTY 
		     , A.LIVE_LEVEL AS LIVE_LEVEL 
		     , A.AGENCY_KIND AS AGENCY_KIND 
		     , A.AGENCY_GRADE AS AGENCY_GRADE 
		     , A.HITCH_KIND AS HITCH_KIND 
		     , A.HITCH_GRADE AS HITCH_GRADE 
		     , A.HITCH_DATE
		     , A.SPECIAL_ABILITY AS SPECIAL_ABILITY 
		     , A.RELIGION AS RELIGION 
		     , B.COMP_CODE
		  FROM HUM100T B 
		  LEFT JOIN  HUM710T A 
		                    ON A.COMP_CODE   = B.COMP_CODE
		                   AND A.PERSON_NUMB = B.PERSON_NUMB

		 WHERE B.COMP_CODE = #{S_COMP_CODE}
		   AND  B.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<update id="hum105ukrServiceImpl.saveHUM710" parameterType="foren.unilite.modules.human.hum.Hum710ukrModel">
	/* hum105ukrServiceImpl.saveHUM710 */
		 DECLARE @PERSON_NUMB NVARCHAR(10)
		 
		 SET @PERSON_NUMB = #{PERSON_NUMB}
		 
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HUM710T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=@PERSON_NUMB)	
		BEGIN	
			INSERT INTO HUM710T ( 
					COMP_CODE
					 , INSERT_DB_USER
					 , INSERT_DB_TIME
					 , UPDATE_DB_USER
					 , UPDATE_DB_TIME
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , PERSON_NUMB
				</if>
				<if test="@foren.Ognl@isNotEmpty(HEIGHT)">
					 , HEIGHT
				</if>
				<if test="@foren.Ognl@isNotEmpty(WEIGHT)">
					 , WEIGHT
				</if>
				<if test="@foren.Ognl@isNotEmpty(SIGHT_LEFT)">
					 , SIGHT_LEFT
				</if>
				<if test="@foren.Ognl@isNotEmpty(SIGHT_RIGHT)">
					 , SIGHT_RIGHT
				</if>
				<if test="@foren.Ognl@isNotEmpty(BLOOD_KIND)">
					 , BLOOD_KIND
				</if>
				<if test="@foren.Ognl@isNotEmpty(COLOR_YN)">
					 , COLOR_YN
				</if>
				<if test="@foren.Ognl@isNotEmpty(LIVE_KIND)">
					 , LIVE_KIND
				</if>
				<if test="@foren.Ognl@isNotEmpty(GROUND)">
					 , GROUND
				</if>
				<if test="@foren.Ognl@isNotEmpty(FLOOR_SPACE)">
					 , FLOOR_SPACE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GARDEN)">
					 , GARDEN
				</if>
				<if test="@foren.Ognl@isNotEmpty(REAL_PROPERTY)">
					 , REAL_PROPERTY
				</if>
				<if test="@foren.Ognl@isNotEmpty(LIVE_LEVEL)">
					 , LIVE_LEVEL
				</if>
				<if test="@foren.Ognl@isNotEmpty(AGENCY_KIND)">
					 , AGENCY_KIND
				</if>
				<if test="@foren.Ognl@isNotEmpty(AGENCY_GRADE)">
					 , AGENCY_GRADE
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_KIND)">
					 , HITCH_KIND
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_GRADE)">
					 , HITCH_GRADE
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_DATE)">
					 , HITCH_DATE
				</if>
				<if test="@foren.Ognl@isNotEmpty(SPECIAL_ABILITY)">
					 , SPECIAL_ABILITY
				</if>
				<if test="@foren.Ognl@isNotEmpty(RELIGION)">
					 , RELIGION
				</if>
			 ) VALUES ( 
					#{S_COMP_CODE}
					 , #{S_USER_ID}
					 , getDate()
					 , #{S_USER_ID}
					 , getDate()
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(HEIGHT)">
					 , #{HEIGHT}
				</if>
				<if test="@foren.Ognl@isNotEmpty(WEIGHT)">
					 , #{WEIGHT}
				</if>
				<if test="@foren.Ognl@isNotEmpty(SIGHT_LEFT)">
					 , #{SIGHT_LEFT}
				</if>
				<if test="@foren.Ognl@isNotEmpty(SIGHT_RIGHT)">
					 , #{SIGHT_RIGHT}
				</if>
				<if test="@foren.Ognl@isNotEmpty(BLOOD_KIND)">
					 , #{BLOOD_KIND}
				</if>
				<if test="@foren.Ognl@isNotEmpty(COLOR_YN)">
					 , #{COLOR_YN}
				</if>
				<if test="@foren.Ognl@isNotEmpty(LIVE_KIND)">
					 , #{LIVE_KIND}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GROUND)">
					 , #{GROUND}
				</if>
				<if test="@foren.Ognl@isNotEmpty(FLOOR_SPACE)">
					 , #{FLOOR_SPACE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GARDEN)">
					 , #{GARDEN}
				</if>
				<if test="@foren.Ognl@isNotEmpty(REAL_PROPERTY)">
					 , #{REAL_PROPERTY}
				</if>
				<if test="@foren.Ognl@isNotEmpty(LIVE_LEVEL)">
					 , #{LIVE_LEVEL}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AGENCY_KIND)">
					 , #{AGENCY_KIND}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AGENCY_GRADE)">
					 , #{AGENCY_GRADE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_KIND)">
					 , #{HITCH_KIND}
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_GRADE)">
					 , #{HITCH_GRADE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(HITCH_DATE)">
					 , #{HITCH_DATE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(SPECIAL_ABILITY)">
					 , #{SPECIAL_ABILITY}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RELIGION)">
					 , #{RELIGION}
				</if>				
			)
		END
		ELSE
		BEGIN
			UPDATE HUM710T SET  
				  UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="HEIGHT != null">
				 , HEIGHT = #{HEIGHT}
			</if>
			<if test="WEIGHT != null">
				 , WEIGHT = #{WEIGHT}
			</if>
			<if test="SIGHT_LEFT != null">
				 , SIGHT_LEFT = #{SIGHT_LEFT}
			</if>
			<if test="SIGHT_RIGHT != null">
				 , SIGHT_RIGHT = #{SIGHT_RIGHT}
			</if>
			<if test="BLOOD_KIND != null">
				 , BLOOD_KIND = #{BLOOD_KIND}
			</if>
			<if test="COLOR_YN != null">
				 , COLOR_YN = #{COLOR_YN}
			</if>
			<if test="LIVE_KIND != null">
				 , LIVE_KIND = #{LIVE_KIND}
			</if>
			<if test="GROUND != null">
				 , GROUND = #{GROUND}
			</if>
			<if test="FLOOR_SPACE != null">
				 , FLOOR_SPACE = #{FLOOR_SPACE}
			</if>
			<if test="GARDEN != null">
				 , GARDEN = #{GARDEN}
			</if>
			<if test="REAL_PROPERTY != null">
				 , REAL_PROPERTY = #{REAL_PROPERTY}
			</if>
			<if test="LIVE_LEVEL != null">
				 , LIVE_LEVEL = #{LIVE_LEVEL}
			</if>
			<if test="AGENCY_KIND != null">
				 , AGENCY_KIND = #{AGENCY_KIND}
			</if>
			<if test="AGENCY_GRADE != null">
				 , AGENCY_GRADE = #{AGENCY_GRADE}
			</if>
			<if test="HITCH_KIND != null">
				 , HITCH_KIND = #{HITCH_KIND}
			</if>
			<if test="HITCH_GRADE != null">
				 , HITCH_GRADE = #{HITCH_GRADE}
			</if>
			<if test="HITCH_DATE != null">
				 , HITCH_DATE = #{HITCH_DATE}
			</if>
			<if test="SPECIAL_ABILITY != null">
				 , SPECIAL_ABILITY = #{SPECIAL_ABILITY}
			</if>
			<if test="RELIGION != null">
				 , RELIGION = #{RELIGION}
			</if>
		 WHERE 	COMP_CODE = #{S_COMP_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
		END
	</update>
	<select id="hum105ukrServiceImpl.deductionInfo1" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.saveHUM710 */
		SELECT A.PERSON_NUMB                                
		     , A.WAGES_CODE                                 
		     , (SELECT B.WAGES_NAME                         
		          FROM HBS300T B                            
		         WHERE B.COMP_CODE  = #{S_COMP_CODE}   
		           AND B.WAGES_CODE = A.WAGES_CODE) NAME    
		     , A.AMOUNT_I                                   
		     , '1' AS PROV_GUBUN
		     , A.UPDATE_DB_USER                             
		     , A.UPDATE_DB_TIME                             
		     , A.COMP_CODE                                  
		  FROM HPA200T A                                    
		 WHERE A.COMP_CODE = #{S_COMP_CODE}            
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
		 UNION All                                          
		SELECT #{PERSON_NUMB} AS PERSON_NUMB                           
		     , A.WAGES_CODE                                 
		     , A.WAGES_NAME                                 
		     , '0'                                          
		     , '1'
		     , A.UPDATE_DB_USER                             
		     , A.UPDATE_DB_TIME                             
		     , A.COMP_CODE                                  
		  FROM HBS300T A                                    
		 WHERE A.WAGES_CODE NOT IN (SELECT B.WAGES_CODE     
		                              FROM HPA200T B        
		                             WHERE B.COMP_CODE   = #{S_COMP_CODE} 
		                               AND B.PERSON_NUMB = #{PERSON_NUMB})   
		   AND A.COMP_CODE = #{S_COMP_CODE}            
	</select>
	<update id="hum105ukrServiceImpl.saveHPA200" parameterType="Map">
	/* hum105ukrServiceImpl.saveHPA200 */		 
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HPA200T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=#{PERSON_NUMB} AND WAGES_CODE = #{WAGES_CODE} )	
		BEGIN	
			INSERT INTO HPA200T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(WAGES_CODE)">
				 , WAGES_CODE
			</if>
			<if test="@foren.Ognl@isNotEmpty(AMOUNT_I)">
				 , AMOUNT_I
			</if>
			<if test="@foren.Ognl@isNotEmpty(PROV_GUBUN)">
				 , PROV_GUBUN
			</if>
		 ) VALUES ( 
				#{COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(WAGES_CODE)">
				 , #{WAGES_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(AMOUNT_I)">
				 , #{AMOUNT_I}
			</if>			
			<if test="@foren.Ognl@isNotEmpty(PROV_GUBUN)">
				 , #{PROV_GUBUN}
			</if>
		)
		END
		ELSE
		BEGIN
			UPDATE HPA200T SET  
					  UPDATE_DB_USER = #{S_USER_ID}
					 , UPDATE_DB_TIME = getDate()
				
				<if test="WAGES_CODE != null">
					 , WAGES_CODE = #{WAGES_CODE}
				</if>
				<if test="AMOUNT_I != null">
					 , AMOUNT_I = #{AMOUNT_I}
				</if>
				<if test="PROV_GUBUN != null">
					 , PROV_GUBUN = #{PROV_GUBUN}
				</if>
			 WHERE 	COMP_CODE = #{COMP_CODE} 
				 AND PERSON_NUMB = #{PERSON_NUMB} 
				 AND WAGES_CODE = #{WAGES_CODE} 
		END
	</update>
	<update id="hum105ukrServiceImpl.deleteHPA200" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHPA200 */
		DELETE FROM HPA200T
		WHERE 	COMP_CODE = #{COMP_CODE} 
				 AND PERSON_NUMB = #{PERSON_NUMB} 
				 AND WAGES_CODE = #{WAGES_CODE} 
	</update>
	<select id="hum105ukrServiceImpl.deductionInfo2" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.deductionInfo2 */
		SELECT '1' SUPP_TYPE                                                    
	         , A.PERSON_NUMB                                                    
	         , A.DED_CODE                                                       
	         , (SELECT B.CODE_NAME                                              
	              FROM BSA100T B                                                
	             WHERE B.COMP_CODE = #{S_COMP_CODE}                        
	               AND B.MAIN_CODE = 'H034'                                     
	               AND B.SUB_CODE = A.DED_CODE) NAME                            
	         , A.DED_AMOUNT_I                                                   
	         , A.UPDATE_DB_USER                                                 
	         , A.UPDATE_DB_TIME                                                 
	         , A.COMP_CODE                                                      
	      FROM HPA500T A                                                        
	     WHERE A.COMP_CODE = #{S_COMP_CODE}                                
	       AND A.PERSON_NUMB = #{PERSON_NUMB}                              
	     UNION ALL                                                              
	    SELECT '1' AS  SUPP_TYPE                                                            
	         , #{PERSON_NUMB} AS PERSON_NUMB                                             
	         , A.SUB_CODE                                                       
	         , A.CODE_NAME                                                      
	         , '0'                                                              
	         , A.UPDATE_DB_USER                                                 
	         , A.UPDATE_DB_TIME                                                 
	         , A.COMP_CODE                                                      
	      FROM BSA100T A                                                        
	     WHERE A.COMP_CODE = #{S_COMP_CODE}                                
	       AND A.SUB_CODE NOT IN (SELECT B.DED_CODE                             
	                                FROM HPA500T B                              
	                               WHERE B.COMP_CODE = #{S_COMP_CODE}      
	                                 AND B.PERSON_NUMB = #{PERSON_NUMB})   
	       AND MAIN_CODE = 'H034'                                               
	       AND SUB_CODE != '$'              
	</select>
	<update id="hum105ukrServiceImpl.saveHPA500" parameterType="Map">
	/* hum105ukrServiceImpl.saveHPA500 */
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HPA500T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=#{PERSON_NUMB} AND DED_CODE = #{DED_CODE} AND SUPP_TYPE = #{SUPP_TYPE}   )	
		BEGIN	
			INSERT INTO HPA500T ( 
						COMP_CODE
					 , UPDATE_DB_USER
					 , UPDATE_DB_TIME
					 , INSERT_DB_USER
					 , INSERT_DB_TIME
				<if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
					 , SUPP_TYPE
				</if>
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , PERSON_NUMB
				</if>
				<if test="@foren.Ognl@isNotEmpty(DED_CODE)">
					 , DED_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(DED_AMOUNT_I)">
					 , DED_AMOUNT_I
				</if>
				<if test="@foren.Ognl@isNotEmpty(PROV_GUBUN)">
					 , PROV_GUBUN
				</if>
			 ) VALUES ( 
					#{S_COMP_CODE}
					 , #{S_USER_ID}
					 , getDate()
					 , #{S_USER_ID}
					 , getDate()
				<if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
					 , #{SUPP_TYPE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(DED_CODE)">
					 , #{DED_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(DED_AMOUNT_I)">
					 , #{DED_AMOUNT_I}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PROV_GUBUN)">
					 , #{PROV_GUBUN}
				</if>
			)
		END
		ELSE
		BEGIN
			UPDATE HPA500T SET  
				  UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="SUPP_TYPE != null">
				 , SUPP_TYPE = #{SUPP_TYPE}
			</if>
			<if test="DED_CODE != null">
				 , DED_CODE = #{DED_CODE}
			</if>
			<if test="DED_AMOUNT_I != null">
				 , DED_AMOUNT_I = #{DED_AMOUNT_I}
			</if>
			<if test="PROV_GUBUN != null">
				 , PROV_GUBUN = #{PROV_GUBUN}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND DED_CODE = #{DED_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND SUPP_TYPE = #{SUPP_TYPE} 
		END
	</update>
	<update id="hum105ukrServiceImpl.deleteHPA500" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHPA500 */
		DELETE FROM HPA500T
		WHERE 	COMP_CODE = #{COMP_CODE} 
		  AND DED_CODE = #{DED_CODE} 
		  AND PERSON_NUMB = #{PERSON_NUMB} 
		  AND SUPP_TYPE = #{SUPP_TYPE} 
	</update>
	<select id="hum105ukrServiceImpl.careerInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.careerInfo */
		SELECT HUM00.COMP_CODE 
		     , HUM00.NAME
		     , HUM00.PERSON_NUMB
		     , unilite.fnGetUserDateComp(HUM50.COMP_CODE, HUM50.CARR_STRT_DATE) AS CARR_STRT_DATE
		     , unilite.fnGetUserDateComp(HUM50.COMP_CODE, HUM50.CARR_END_DATE)  AS CARR_END_DATE
		     , HUM50.COMP_NAME
		     , HUM50.POST_NAME 
		     , HUM50.OCPT_NAME
		     , HUM50.DEPT_NAME
		     , HUM50.JOB_NAME
		     , HUM50.CARR_GUBUN
		  FROM HUM100T HUM00 INNER JOIN HUM500T HUM50                                 
		                        ON HUM00.COMP_CODE = HUM50.COMP_CODE                  
		                       AND HUM50.PERSON_NUMB = HUM00.PERSON_NUMB              
		 WHERE HUM00.COMP_CODE =#{S_COMP_CODE} 
		   AND HUM50.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM500" parameterType="Map">		 
	/* hum105ukrServiceImpl.insertHUM500 */
		INSERT INTO HUM500T (
			 COMP_CODE
			 , INSERT_DB_USER
			 , INSERT_DB_TIME
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			 , PERSON_NUMB
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_STRT_DATE)">
			 , CARR_STRT_DATE
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_END_DATE)">
			 , CARR_END_DATE
		</if>
		<if test="@foren.Ognl@isNotEmpty(COMP_NAME)">
			 , COMP_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_NAME)">
			 , POST_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
			 , DEPT_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(OCPT_NAME)">
			 , OCPT_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(JOB_NAME)">
			 , JOB_NAME
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GRADE)">
			 , PAY_GRADE
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_GUBUN)">
			 , CARR_GUBUN
		</if>
	 ) VALUES (
			 #{S_COMP_CODE}
			 , #{S_USER_ID}
			 , getDate()
			 , #{S_USER_ID}
			 , getDate()
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			 , #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_STRT_DATE)">
			 , #{CARR_STRT_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_END_DATE)">
			 , #{CARR_END_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(COMP_NAME)">
			 , #{COMP_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_NAME)">
			 , #{POST_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
			 , #{DEPT_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(OCPT_NAME)">
			 , #{OCPT_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(JOB_NAME)">
			 , #{JOB_NAME}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GRADE)">
			 , #{PAY_GRADE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CARR_GUBUN)">
			 , #{CARR_GUBUN}
		</if>
	)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM500" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM500 */
		UPDATE HUM500T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'CARR_STRT_DATE')">
				 , CARR_STRT_DATE = #{CARR_STRT_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CARR_END_DATE')">
				 , CARR_END_DATE = #{CARR_END_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'COMP_NAME')">
				 , COMP_NAME = #{COMP_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'POST_NAME')">
				 , POST_NAME = #{POST_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'DEPT_NAME')">
				 , DEPT_NAME = #{DEPT_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'OCPT_NAME')">
				 , OCPT_NAME = #{OCPT_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'JOB_NAME')">
				 , JOB_NAME = #{JOB_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE')">
				 , PAY_GRADE = #{PAY_GRADE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CARR_GUBUN')">
				 , CARR_GUBUN = #{CARR_GUBUN}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND CARR_STRT_DATE = #{CARR_STRT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND CARR_END_DATE = #{CARR_END_DATE} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM500" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM500 */
		DELETE FROM HUM500T
		WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND CARR_STRT_DATE = #{CARR_STRT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND CARR_END_DATE = #{CARR_END_DATE}  
	</update>
	<select id="hum105ukrServiceImpl.academicBakground" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.academicBakground */
		SELECT A.PERSON_NUMB
		     , A.SCHOOL_NAME
		     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ENTR_DATE) AS ENTR_DATE
		     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.GRAD_DATE) AS GRAD_DATE
		     , A.GRAD_GUBUN
		     , A.ADDRESS
		     , A.FIRST_SUBJECT
		     , A.DEGREE
		     , A.CREDITS
		     , A.SPECIAL_ITEM
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		     , A.COMP_CODE
		    
		  FROM HUM720T A INNER JOIN HUM100T B 
		                   ON A.COMP_CODE   = B.COMP_CODE
		                  AND A.PERSON_NUMB = B.PERSON_NUMB             
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM720" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM720 */
		INSERT INTO HUM720T ( 
				COMP_CODE
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(SCHOOL_NAME)">
				 , SCHOOL_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(ENTR_DATE)">
				 , ENTR_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRAD_DATE)">
				 , GRAD_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRAD_GUBUN)">
				 , GRAD_GUBUN
			</if>
			<if test="@foren.Ognl@isNotEmpty(ADDRESS)">
				 , ADDRESS
			</if>
			<if test="@foren.Ognl@isNotEmpty(FIRST_SUBJECT)">
				 , FIRST_SUBJECT
			</if>
			<if test="@foren.Ognl@isNotEmpty(DEGREE)">
				 , DEGREE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CREDITS)">
				 , CREDITS
			</if>
			<if test="@foren.Ognl@isNotEmpty(SPECIAL_ITEM)">
				 , SPECIAL_ITEM
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(SCHOOL_NAME)">
				 , #{SCHOOL_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ENTR_DATE)">
				 , #{ENTR_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRAD_DATE)">
				 , #{GRAD_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRAD_GUBUN)">
				 , #{GRAD_GUBUN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ADDRESS)">
				 , #{ADDRESS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(FIRST_SUBJECT)">
				 , #{FIRST_SUBJECT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(DEGREE)">
				 , #{DEGREE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CREDITS)">
				 , #{CREDITS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(SPECIAL_ITEM)">
				 , #{SPECIAL_ITEM}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM720" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM720 */
		UPDATE HUM720T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'SCHOOL_NAME')">
				 , SCHOOL_NAME = #{SCHOOL_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ENTR_DATE')">
				 , ENTR_DATE = #{ENTR_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRAD_DATE')">
				 , GRAD_DATE = #{GRAD_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRAD_GUBUN')">
				 , GRAD_GUBUN = #{GRAD_GUBUN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ADDRESS')">
				 , ADDRESS = #{ADDRESS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'FIRST_SUBJECT')">
				 , FIRST_SUBJECT = #{FIRST_SUBJECT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'DEGREE')">
				 , DEGREE = #{DEGREE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CREDITS')">
				 , CREDITS = #{CREDITS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'SPECIAL_ITEM')">
				 , SPECIAL_ITEM = #{SPECIAL_ITEM}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND ENTR_DATE = #{ENTR_DATE} 
			 AND SCHOOL_NAME = #{SCHOOL_NAME} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM720" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM720 */
		DELETE FROM HUM720T 
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND ENTR_DATE = #{ENTR_DATE} 
			 AND SCHOOL_NAME = #{SCHOOL_NAME} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.educationInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.educationInfo */
		SELECT A.PERSON_NUMB
		     , A.EDU_TITLE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EDU_FR_DATE) AS EDU_FR_DATE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EDU_TO_DATE) AS EDU_TO_DATE
		     , A.EDU_TIME
		     , A.EDU_ORGAN
		     , A.EDU_NATION
		     , A.EDU_GUBUN
		     , A.EDU_GRADES
		     , A.EDU_AMT
		     , A.REPORT_YN
		     , A.GRADE
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		     , A.COMP_CODE
		  FROM HUM740T A INNER JOIN HUM100T B 
		                    ON A.COMP_CODE   = B.COMP_CODE
		                   AND A.PERSON_NUMB = B.PERSON_NUMB          
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM740" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM740 */
		INSERT INTO HUM740T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TITLE)">
				 , EDU_TITLE
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_FR_DATE)">
				 , EDU_FR_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TO_DATE)">
				 , EDU_TO_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_ORGAN)">
				 , EDU_ORGAN
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_NATION)">
				 , EDU_NATION
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_GUBUN)">
				 , EDU_GUBUN
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_GRADES)">
				 , EDU_GRADES
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_AMT)">
				 , EDU_AMT
			</if>
			<if test="@foren.Ognl@isNotEmpty(REPORT_YN)">
				 , REPORT_YN
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE)">
				 , GRADE
			</if>
			
			<if test="@foren.Ognl@isNotEmpty(EDU_KIND)">
				 , EDU_KIND
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_PERIOD)">
				 , EDU_PERIOD
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_SUBJECT)">
				 , EDU_SUBJECT
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_CONTENTS)">
				 , EDU_CONTENTS
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_RESULT)">
				 , EDU_RESULT
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TIME)">
				 , EDU_TIME
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_KING)">
				 , EDU_KING
			</if>
		 ) VALUES ( 
				#{COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TITLE)">
				 , #{EDU_TITLE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_FR_DATE)">
				 , #{EDU_FR_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TO_DATE)">
				 , #{EDU_TO_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_ORGAN)">
				 , #{EDU_ORGAN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_NATION)">
				 , #{EDU_NATION}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_GUBUN)">
				 , #{EDU_GUBUN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_GRADES)">
				 , #{EDU_GRADES}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_AMT)">
				 , #{EDU_AMT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(REPORT_YN)">
				 , #{REPORT_YN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE)">
				 , #{GRADE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_KIND)">
				 , #{EDU_KIND}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_PERIOD)">
				 , #{EDU_PERIOD}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_SUBJECT)">
				 , #{EDU_SUBJECT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_CONTENTS)">
				 , #{EDU_CONTENTS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_RESULT)">
				 , #{EDU_RESULT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_TIME)">
				 , #{EDU_TIME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EDU_KING)">
				 , #{EDU_KING}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM740" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM740 */
		UPDATE HUM740T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_TITLE')">
				 , EDU_TITLE = #{EDU_TITLE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_FR_DATE')">
				 , EDU_FR_DATE = #{EDU_FR_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_TO_DATE')">
				 , EDU_TO_DATE = #{EDU_TO_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_ORGAN')">
				 , EDU_ORGAN = #{EDU_ORGAN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_NATION')">
				 , EDU_NATION = #{EDU_NATION}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_GUBUN')">
				 , EDU_GUBUN = #{EDU_GUBUN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_GRADES')">
				 , EDU_GRADES = #{EDU_GRADES}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_AMT')">
				 , EDU_AMT = #{EDU_AMT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'REPORT_YN')">
				 , REPORT_YN = #{REPORT_YN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRADE')">
				 , GRADE = #{GRADE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_KIND')">
				 , EDU_KIND = #{EDU_KIND}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_PERIOD')">
				 , EDU_PERIOD = #{EDU_PERIOD}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_SUBJECT')">
				 , EDU_SUBJECT = #{EDU_SUBJECT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_CONTENTS')">
				 , EDU_CONTENTS = #{EDU_CONTENTS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_RESULT')">
				 , EDU_RESULT = #{EDU_RESULT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_TIME')">
				 , EDU_TIME = #{EDU_TIME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EDU_KING')">
				 , EDU_KING = #{EDU_KING}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND EDU_FR_DATE = #{EDU_FR_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND EDU_TITLE = #{EDU_TITLE} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM740" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM740 */
		DELETE FROM HUM740T 
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND EDU_FR_DATE = #{EDU_FR_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND EDU_TITLE = #{EDU_TITLE}  
	</update>
	<select id="hum105ukrServiceImpl.certificateInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.certificateInfo */
		SELECT A.PERSON_NUMB
		     , A.QUAL_KIND
		     , A.QUAL_GRADE 
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.ACQ_DATE)   AS ACQ_DATE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.VALI_DATE)  AS VALI_DATE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.RENEW_DATE) AS RENEW_DATE
		     , A.QUAL_MACH
		     , A.QUAL_NUM
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		     , A.COMP_CODE
		FROM HUM600T A       
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM600" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM600 */
		INSERT INTO HUM600T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_KIND)">
				 , QUAL_KIND
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_GRADE)">
				 , QUAL_GRADE
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_MACH)">
				 , QUAL_MACH
			</if>
			<if test="@foren.Ognl@isNotEmpty(ACQ_DATE)">
				 , ACQ_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , VALI_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(RENEW_DATE)">
				 , RENEW_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_NUM)">
				 , QUAL_NUM
			</if>
			<if test="@foren.Ognl@isNotEmpty(ACQ_STYLE)">
				 , ACQ_STYLE
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_JOB)">
				 , APPOINT_JOB
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_START_DT)">
				 , APPOINT_START_DT
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_END_DT)">
				 , APPOINT_END_DT
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_COMPANY)">
				 , APPOINT_COMPANY
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_KIND)">
				 , #{QUAL_KIND}
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_GRADE)">
				 , #{QUAL_GRADE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_MACH)">
				 , #{QUAL_MACH}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ACQ_DATE)">
				 , #{ACQ_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , #{VALI_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(RENEW_DATE)">
				 , #{RENEW_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(QUAL_NUM)">
				 , #{QUAL_NUM}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ACQ_STYLE)">
				 , #{ACQ_STYLE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_JOB)">
				 , #{APPOINT_JOB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_START_DT)">
				 , #{APPOINT_START_DT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_END_DT)">
				 , #{APPOINT_END_DT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(APPOINT_COMPANY)">
				 , #{APPOINT_COMPANY}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM600" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM600 */
		UPDATE HUM600T SET  
		  	   UPDATE_DB_USER = #{S_USER_ID}
			 , UPDATE_DB_TIME = getDate()
		<if test="@foren.Ognl@isExists(_parameter, 'QUAL_KIND')">
			 , QUAL_KIND = #{QUAL_KIND}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'QUAL_GRADE')">
			 , QUAL_GRADE = #{QUAL_GRADE}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'QUAL_MACH')">
			 , QUAL_MACH = #{QUAL_MACH}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'ACQ_DATE')">
			 , ACQ_DATE = #{ACQ_DATE}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'VALI_DATE')">
			 , VALI_DATE = #{VALI_DATE}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'RENEW_DATE')">
			 , RENEW_DATE = #{RENEW_DATE}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'QUAL_NUM')">
			 , QUAL_NUM = #{QUAL_NUM}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'ACQ_STYLE')">
			 , ACQ_STYLE = #{ACQ_STYLE}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'APPOINT_JOB')">
			 , APPOINT_JOB = #{APPOINT_JOB}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'APPOINT_START_DT')">
			 , APPOINT_START_DT = #{APPOINT_START_DT}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'APPOINT_END_DT')">
			 , APPOINT_END_DT = #{APPOINT_END_DT}
		</if>
		<if test="@foren.Ognl@isExists(_parameter, 'APPOINT_COMPANY')">
			 , APPOINT_COMPANY = #{APPOINT_COMPANY}
		</if>
	 WHERE 	COMP_CODE = #{COMP_CODE} 
		 AND PERSON_NUMB = #{PERSON_NUMB} 
		 AND ACQ_DATE = #{ACQ_DATE} 
		 AND QUAL_KIND = #{QUAL_KIND} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM600" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM600 */
		DELETE FROM HUM600T 
		 WHERE 	COMP_CODE = #{COMP_CODE} 
		 AND PERSON_NUMB = #{PERSON_NUMB} 
		 AND ACQ_DATE = #{ACQ_DATE} 
		 AND QUAL_KIND = #{QUAL_KIND} 
	</update>
	<select id="hum105ukrServiceImpl.hrChanges" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.hrChanges */
		SELECT A.PERSON_NUMB
		     , unilite.fnGetUserDateComp(A.COMP_CODE,A.ANNOUNCE_DATE) AS ANNOUNCE_DATE
		     , A.ANNOUNCE_CODE
		     , A.BE_DIV_NAME
		     , A.AF_DIV_NAME
		     , A.BE_DEPT_NAME
		     , A.AF_DEPT_NAME
		     , A.POST_CODE
		     , A.ABIL_CODE
		     , A.PAY_GRADE_01
		     , A.PAY_GRADE_02
		     , A.PAY_GRADE_03
		     , A.PAY_GRADE_04
		     , A.ANNOUNCE_REASON
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		     , B.DEPT_NAME
		     , B.DIV_CODE
		     , B.DEPT_CODE
		     , A.BE_DEPT_CODE
		     , A.AF_DEPT_CODE
		     , A.COMP_CODE
		  FROM HUM760T A INNER JOIN HUM100T B
		                    ON A.COMP_CODE = B.COMP_CODE
		                   AND A.PERSON_NUMB = B.PERSON_NUMB
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<update id="hum105ukrServiceImpl.saveHRHUM100" parameterType="Map" statementType="PREPARED">
	/* hum105ukrServiceImpl.saveHRHUM100 */
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HUM760T  WHERE COMP_CODE = #{COMP_CODE}  AND PERSON_NUMB = #{PERSON_NUMB} AND ANNOUNCE_DATE &gt; #{ANNOUNCE_DATE} )
		BEGIN
			UPDATE HUM100T 
			SET   UPDATE_DB_USER =  #{S_USER_ID}
				, UPDATE_DB_TIME =  getDate() 
				<if test="@foren.Ognl@isExists(_parameter, 'AF_DIV_NAME')">
			    ,  DIV_CODE = #{AF_DIV_NAME}
				</if>
				<if test="@foren.Ognl@isExists(_parameter, 'AF_DEPT_CODE')">
			    , DEPT_CODE = #{AF_DEPT_CODE}
				</if>
				<if test="@foren.Ognl@isExists(_parameter, 'AF_DEPT_NAME')">
			    , DEPT_NAME = #{AF_DEPT_NAME}
				</if>
				<if test="@foren.Ognl@isExists(_parameter, 'POST_CODE')">
			    , POST_CODE = #{POST_CODE}
				</if>
				<if test="@foren.Ognl@isExists(_parameter, 'ABIL_CODE')">
			    , ABIL_CODE = #{ABIL_CODE}
				</if>
			WHERE COMP_CODE   = #{COMP_CODE}
			  AND PERSON_NUMB = #{PERSON_NUMB}
		END
	</update>
	<insert id="hum105ukrServiceImpl.insertHUM760" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM760 */
		INSERT INTO HUM760T ( 
					COMP_CODE
					 , INSERT_DB_USER
					 , INSERT_DB_TIME
					 , UPDATE_DB_USER
					 , UPDATE_DB_TIME
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , PERSON_NUMB
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
					 , ANNOUNCE_DATE
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
					 , ANNOUNCE_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DIV_NAME)">
					 , BE_DIV_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DIV_NAME)">
					 , AF_DIV_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DEPT_CODE)">
					 , BE_DEPT_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DEPT_NAME)">
					 , BE_DEPT_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DEPT_CODE)">
					 , AF_DEPT_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DEPT_NAME)">
					 , AF_DEPT_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
					 , POST_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
					 , ABIL_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_REASON)">
					 , ANNOUNCE_REASON
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
					 , BE_PAY_CODE
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
					 , AF_PAY_CODE
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
					 , PAY_GRADE_01
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
					 , PAY_GRADE_02
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_03)">
					 , PAY_GRADE_03
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_04)">
					 , PAY_GRADE_04
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_05)">
					 , PAY_GRADE_05
				</if>
				
				
			 ) VALUES ( 
					#{S_COMP_CODE}
					 , #{S_USER_ID}
					 , getDate()
					 , #{S_USER_ID}
					 , getDate()
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_DATE)">
					 , #{ANNOUNCE_DATE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_CODE)">
					 , #{ANNOUNCE_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DIV_NAME)">
					 , #{BE_DIV_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DIV_NAME)">
					 , #{AF_DIV_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DEPT_CODE)">
					 , #{BE_DEPT_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(BE_DEPT_NAME)">
					 , #{BE_DEPT_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DEPT_CODE)">
					 , #{AF_DEPT_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AF_DEPT_NAME)">
					 , #{AF_DEPT_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
					 , #{POST_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
					 , #{ABIL_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ANNOUNCE_REASON)">
					 , #{ANNOUNCE_REASON}
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
					 , #{PAY_CODE}
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
					 , #{PAY_CODE}
				</if>
				
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
					 , #{PAY_GRADE_01}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
					 , #{PAY_GRADE_02}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_03)">
					 , #{PAY_GRADE_03}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_04)">
					 , #{PAY_GRADE_04}
				</if>
				<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_05)">
					 , #{PAY_GRADE_05}
				</if>
			)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM760" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM760 */
		UPDATE HUM760T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'ANNOUNCE_DATE')">
				 , ANNOUNCE_DATE = #{ANNOUNCE_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ANNOUNCE_CODE')">
				 , ANNOUNCE_CODE = #{ANNOUNCE_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BE_DIV_NAME')">
				 , BE_DIV_NAME = #{BE_DIV_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'AF_DIV_NAME')">
				 , AF_DIV_NAME = #{AF_DIV_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BE_DEPT_CODE')">
				 , BE_DEPT_CODE = #{BE_DEPT_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BE_DEPT_NAME')">
				 , BE_DEPT_NAME = #{BE_DEPT_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'AF_DEPT_CODE')">
				 , AF_DEPT_CODE = #{AF_DEPT_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'AF_DEPT_NAME')">
				 , AF_DEPT_NAME = #{AF_DEPT_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'POST_CODE')">
				 , POST_CODE = #{POST_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ABIL_CODE')">
				 , ABIL_CODE = #{ABIL_CODE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ANNOUNCE_REASON')">
				 , ANNOUNCE_REASON = #{ANNOUNCE_REASON}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_01')">
				 , PAY_GRADE_01 = #{PAY_GRADE_01}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_02')">
				 , PAY_GRADE_02 = #{PAY_GRADE_02}
			</if>
			
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_03')">
				 , PAY_GRADE_02 = #{PAY_GRADE_03}
			</if>
			
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_04')">
				 , PAY_GRADE_02 = #{PAY_GRADE_04}
			</if>
			
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_GRADE_05')">
				 , PAY_GRADE_02 = #{PAY_GRADE_05}
			</if>
			
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_CODE')">
				 , BE_PAY_CODE = #{PAY_CODE}
			</if>
			
			<if test="@foren.Ognl@isExists(_parameter, 'PAY_CODE')">
				 , AF_PAY_CODE = #{PAY_CODE}
			</if>
			
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND ANNOUNCE_DATE = #{ANNOUNCE_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND ANNOUNCE_CODE = #{ANNOUNCE_CODE} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM760" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM760 */
		DELETE FROM HUM760T 
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND ANNOUNCE_DATE = #{ANNOUNCE_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
			 AND ANNOUNCE_CODE = #{ANNOUNCE_CODE} 
	</update>
	<select id="hum105ukrServiceImpl.personalRating" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.personalRating */
		SELECT A.COMP_CODE
		     , A.PERSON_NUMB
		     , A.MERITS_YEARS
		     , A.MERITS_GUBUN
		     , A.DEPT_NAME
		     , A.MERITS_CLASS
		     , A.MERITS_GRADE
		     , (SELECT C.NAME 
		          FROM HUM100T AS C 
		          WHERE COMP_CODE = #{S_COMP_CODE}
		            AND A.GRADE_PERSON_NUMB = C.PERSON_NUMB) AS GRADE_PERSON_NAME
		     , A.GRADE_PERSON_NUMB
		     , (SELECT C.NAME 
		          FROM HUM100T AS C 
		          WHERE COMP_CODE =  #{S_COMP_CODE}
		            AND A.GRADE_PERSON_NUMB2 = C.PERSON_NUMB)AS GRADE_PERSON_NAME2
		     , A.GRADE_PERSON_NUMB2
		     , A.SYNTHETIC_EVAL
		  FROM HUM770T A INNER JOIN HUM100T B 
		                    ON A.COMP_CODE = B.COMP_CODE
		                   AND A.PERSON_NUMB   = B.PERSON_NUMB
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM770" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM770 */
		INSERT INTO HUM770T ( 
				COMP_CODE
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_YEARS)">
				 , MERITS_YEARS
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GUBUN)">
				 , MERITS_GUBUN
			</if>
			<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
				 , DEPT_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_CLASS)">
				 , MERITS_CLASS
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GRADE)">
				 , MERITS_GRADE
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB)">
				 , GRADE_PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB2)">
				 , GRADE_PERSON_NUMB2
			</if>
			<if test="@foren.Ognl@isNotEmpty(SYNTHETIC_EVAL)">
				 , SYNTHETIC_EVAL
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_YEARS)">
				 , #{MERITS_YEARS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GUBUN)">
				 , #{MERITS_GUBUN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
				 , #{DEPT_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_CLASS)">
				 , #{MERITS_CLASS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GRADE)">
				 , #{MERITS_GRADE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB)">
				 , #{GRADE_PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB2)">
				 , #{GRADE_PERSON_NUMB2}
			</if>
			<if test="@foren.Ognl@isNotEmpty(SYNTHETIC_EVAL)">
				 , #{SYNTHETIC_EVAL}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM770" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM770 */
		UPDATE HUM770T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'MERITS_YEARS')">
				 , MERITS_YEARS = #{MERITS_YEARS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'MERITS_GUBUN')">
				 , MERITS_GUBUN = #{MERITS_GUBUN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'DEPT_NAME')">
				 , DEPT_NAME = #{DEPT_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'MERITS_CLASS')">
				 , MERITS_CLASS = #{MERITS_CLASS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'MERITS_GRADE')">
				 , MERITS_GRADE = #{MERITS_GRADE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRADE_PERSON_NUMB')">
				 , GRADE_PERSON_NUMB = #{GRADE_PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'GRADE_PERSON_NUMB2')">
				 , GRADE_PERSON_NUMB2 = #{GRADE_PERSON_NUMB2}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'SYNTHETIC_EVAL')">
				 , SYNTHETIC_EVAL = #{SYNTHETIC_EVAL}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND MERITS_GUBUN = #{MERITS_GUBUN} 
			 AND MERITS_YEARS = #{MERITS_YEARS} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM770" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM770 */
		DELETE FROM HUM770T 
		  WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND MERITS_GUBUN = #{MERITS_GUBUN} 
			 AND MERITS_YEARS = #{MERITS_YEARS} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.disciplinaryInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.disciplinaryInfo */
		SELECT A.PERSON_NUMB
		      , unilite.fnGetUserDateComp(A.COMP_CODE, A.OCCUR_DATE) AS OCCUR_DATE
		      , A.KIND_PRIZE_PENALTY
		      , A.NAME_PRIZE_PENALTY
		      , A.REASON
		      , unilite.fnGetUserDateComp(A.COMP_CODE, A.VALIDITYFR_DATE) AS VALIDITYFR_DATE
		      , unilite.fnGetUserDateComp(A.COMP_CODE, A.VALIDITY_DATE) AS VALIDITY_DATE
		      , unilite.fnGetUserDateComp(A.COMP_CODE, A.VALIDITYTO_DATE) AS VALIDITYTO_DATE
		      , unilite.fnGetUserDateComp(A.COMP_CODE, A.EX_DATE) AS EX_DATE
		      , A.ADDITION_POINT
		      , A.RELATION_ORGAN
		      , A.UPDATE_DB_USER
		      , A.UPDATE_DB_TIME
		      , A.COMP_CODE
		   FROM HUM810T A 
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM810" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM810 */
		INSERT INTO HUM810T ( 
				COMP_CODE
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(OCCUR_DATE)">
				 , OCCUR_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(KIND_PRIZE_PENALTY)">
				 , KIND_PRIZE_PENALTY
			</if>
			<if test="@foren.Ognl@isNotEmpty(NAME_PRIZE_PENALTY)">
				 , NAME_PRIZE_PENALTY
			</if>
			<if test="@foren.Ognl@isNotEmpty(REASON)">
				 , REASON
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITYFR_DATE)">
				 , VALIDITYFR_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITY_DATE)">
				 , VALIDITY_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITYTO_DATE)">
				 , VALIDITYTO_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(EX_DATE)">
				 , EX_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(ADDITION_POINT)">
				 , ADDITION_POINT
			</if>
			<if test="@foren.Ognl@isNotEmpty(RELATION_ORGAN)">
				 , RELATION_ORGAN
			</if>
			<if test="@foren.Ognl@isNotEmpty(PUNISHMENT_RSN)">
				 , PUNISHMENT_RSN
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(OCCUR_DATE)">
				 , #{OCCUR_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(KIND_PRIZE_PENALTY)">
				 , #{KIND_PRIZE_PENALTY}
			</if>
			<if test="@foren.Ognl@isNotEmpty(NAME_PRIZE_PENALTY)">
				 , #{NAME_PRIZE_PENALTY}
			</if>
			<if test="@foren.Ognl@isNotEmpty(REASON)">
				 , #{REASON}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITYFR_DATE)">
				 , #{VALIDITYFR_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITY_DATE)">
				 , #{VALIDITY_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALIDITYTO_DATE)">
				 , #{VALIDITYTO_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(EX_DATE)">
				 , #{EX_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ADDITION_POINT)">
				 , #{ADDITION_POINT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(RELATION_ORGAN)">
				 , #{RELATION_ORGAN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PUNISHMENT_RSN)">
				 , #{PUNISHMENT_RSN}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM810" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM810 */
		UPDATE HUM810T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'OCCUR_DATE')">
				 , OCCUR_DATE = #{OCCUR_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'KIND_PRIZE_PENALTY')">
				 , KIND_PRIZE_PENALTY = #{KIND_PRIZE_PENALTY}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'NAME_PRIZE_PENALTY')">
				 , NAME_PRIZE_PENALTY = #{NAME_PRIZE_PENALTY}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'REASON')">
				 , REASON = #{REASON}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VALIDITYFR_DATE')">
				 , VALIDITYFR_DATE = #{VALIDITYFR_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VALIDITY_DATE')">
				 , VALIDITY_DATE = #{VALIDITY_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VALIDITYTO_DATE')">
				 , VALIDITYTO_DATE = #{VALIDITYTO_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'EX_DATE')">
				 , EX_DATE = #{EX_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ADDITION_POINT')">
				 , ADDITION_POINT = #{ADDITION_POINT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'RELATION_ORGAN')">
				 , RELATION_ORGAN = #{RELATION_ORGAN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PUNISHMENT_RSN')">
				 , PUNISHMENT_RSN = #{PUNISHMENT_RSN}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND KIND_PRIZE_PENALTY = #{KIND_PRIZE_PENALTY} 
			 AND OCCUR_DATE = #{OCCUR_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM810" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM810 */
		DELETE FROM HUM810T 
		   WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND KIND_PRIZE_PENALTY = #{KIND_PRIZE_PENALTY} 
			 AND OCCUR_DATE = #{OCCUR_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.contractInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.contractInfo */
		SELECT COMP_CODE
		     , PERSON_NUMB 
		     , SUBSTRING(CONTRACT_DATE,1,4)+'.'+SUBSTRING(CONTRACT_DATE,5,2)+'.'+SUBSTRING(CONTRACT_DATE,7,2) AS CONTRACT_DATE
		     , SUBSTRING(CONTRACT_FRDATE,1,4)+'.'+SUBSTRING(CONTRACT_FRDATE,5,2)+'.'+SUBSTRING(CONTRACT_FRDATE,7,2) AS CONTRACT_FRDATE
		     , SUBSTRING(CONTRACT_TODATE,1,4)+'.'+SUBSTRING(CONTRACT_TODATE,5,2)+'.'+SUBSTRING(CONTRACT_TODATE,7,2) AS CONTRACT_TODATE
		     , CONTRACT_GUBUN
		     , CONTRACT_TERMS
		     , SPECIAL_ITEM
		     , JOB_NAME
		     , BIGO
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		  FROM HUM840T
		 WHERE COMP_CODE =#{S_COMP_CODE} 
		   AND PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM840" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM840 */
		INSERT INTO HUM840T ( 
				COMP_CODE
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_DATE)">
				 , CONTRACT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_FRDATE)">
				 , CONTRACT_FRDATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_TODATE)">
				 , CONTRACT_TODATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_TERMS)">
				 , CONTRACT_TERMS
			</if>
			<if test="@foren.Ognl@isNotEmpty(SPECIAL_ITEM)">
				 , SPECIAL_ITEM
			</if>
			<if test="@foren.Ognl@isNotEmpty(JOB_NAME)">
				 , JOB_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , BIGO
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_GUBUN)">
				 , CONTRACT_GUBUN
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_DATE)">
				 , #{CONTRACT_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_FRDATE)">
				 , #{CONTRACT_FRDATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_TODATE)">
				 , #{CONTRACT_TODATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_TERMS)">
				 , #{CONTRACT_TERMS}
			</if>
			<if test="@foren.Ognl@isNotEmpty(SPECIAL_ITEM)">
				 , #{SPECIAL_ITEM}
			</if>
			<if test="@foren.Ognl@isNotEmpty(JOB_NAME)">
				 , #{JOB_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , #{BIGO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CONTRACT_GUBUN)">
				 , #{CONTRACT_GUBUN}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM840" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM840 */
		UPDATE HUM840T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'CONTRACT_DATE')">
				 , CONTRACT_DATE = #{CONTRACT_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CONTRACT_FRDATE')">
				 , CONTRACT_FRDATE = #{CONTRACT_FRDATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CONTRACT_TODATE')">
				 , CONTRACT_TODATE = #{CONTRACT_TODATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CONTRACT_TERMS')">
				 , CONTRACT_TERMS = #{CONTRACT_TERMS}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'SPECIAL_ITEM')">
				 , SPECIAL_ITEM = #{SPECIAL_ITEM}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'JOB_NAME')">
				 , JOB_NAME = #{JOB_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BIGO')">
				 , BIGO = #{BIGO}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CONTRACT_GUBUN')">
				 , CONTRACT_GUBUN = #{CONTRACT_GUBUN}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND CONTRACT_DATE = #{CONTRACT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM840" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM840 */
		DELETE FROM HUM840T 
		   WHERE COMP_CODE = #{COMP_CODE} 
			 AND CONTRACT_DATE = #{CONTRACT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.passportInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.passportInfo */
		SELECT A.COMP_CODE
		     , A.PERSON_NUMB
		     , unilite.fnCipherDecrypt(A.PASS_NO, 'P') AS PASS_NO
		     , A.PASS_KIND
		     , A.NATION_NAME
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.ISSUE_DATE) AS ISSUE_DATE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.TERMI_DATE) AS TERMI_DATE
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		  FROM HUM730T A 
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM730" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM730 */
		INSERT INTO HUM730T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_NO)">
				 ,PASS_NO
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_KIND)">
				 , PASS_KIND
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION_NAME)">
				 , NATION_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_DATE)">
				 , ISSUE_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(TERMI_DATE)">
				 , TERMI_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , BIGO
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_NO)">
				 , VISA_NO
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_KIND)">
				 , VISA_KIND
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , VALI_DATE
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_NO)">
				 ,  unilite.fnCipherEncrypt( #{PASS_NO}, 'P')
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_KIND)">
				 , #{PASS_KIND}
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION_NAME)">
				 , #{NATION_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_DATE)">
				 , #{ISSUE_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TERMI_DATE)">
				 , #{TERMI_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , #{BIGO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_NO)">
				 , #{VISA_NO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_KIND)">
				 , #{VISA_KIND}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , #{VALI_DATE}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM730" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM730 */
		UPDATE HUM730T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'PASS_NO')">
				 , PASS_NO =  unilite.fnCipherEncrypt(#{PASS_NO}, 'P')
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PASS_KIND')">
				 , PASS_KIND = #{PASS_KIND}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'NATION_NAME')">
				 , NATION_NAME = #{NATION_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ISSUE_DATE')">
				 , ISSUE_DATE = #{ISSUE_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'TERMI_DATE')">
				 , TERMI_DATE = #{TERMI_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BIGO')">
				 , BIGO = #{BIGO}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VISA_NO')">
				 , VISA_NO = #{VISA_NO}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VISA_KIND')">
				 , VISA_KIND = #{VISA_KIND}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VALI_DATE')">
				 , VALI_DATE = #{VALI_DATE}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND unilite.fnCipherDecrypt(PASS_NO,'P') = #{PASS_NO}
			 AND PERSON_NUMB = #{PERSON_NUMB}  
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM730" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM730 */
		DELETE FROM HUM730T 
		    WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND unilite.fnCipherDecrypt(PASS_NO,'P') = #{PASS_NO}
			 AND PERSON_NUMB = #{PERSON_NUMB}  
	</update>
	<select id="hum105ukrServiceImpl.visaInfo" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.visaInfo */
		SELECT A.COMP_CODE
		     , A.PERSON_NUMB
		     , unilite.fnCipherDecrypt(A.PASS_NO, 'P') AS PASS_NO
		     , unilite.fnCipherDecrypt(A.VISA_NO, 'V') AS VISA_NO
		     , A.NATION_NAME
		     , A.VISA_GUBUN
		     , A.VISA_KIND
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.VALI_DATE) AS VALI_DATE
		     , A.DURATION_STAY
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.TERMI_DATE) AS TERMI_DATE
		     , unilite.fnGetUserDateComp(A.COMP_CODE, A.ISSUE_DATE) AS ISSUE_DATE
		     , A.ISSUE_AT
		     , A.BIGO
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		  FROM HUM731T A
		 WHERE A.COMP_CODE =#{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM731" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM731 */
		INSERT INTO HUM731T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_NO)">
				 , PASS_NO
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_NO)">
				 , VISA_NO
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION_NAME)">
				 , NATION_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_GUBUN)">
				 , VISA_GUBUN
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_KIND)">
				 , VISA_KIND
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , VALI_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(DURATION_STAY)">
				 , DURATION_STAY
			</if>
			<if test="@foren.Ognl@isNotEmpty(TERMI_DATE)">
				 , TERMI_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_DATE)">
				 , ISSUE_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_AT)">
				 , ISSUE_AT
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , BIGO
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PASS_NO)">
				 ,  unilite.fnCipherEncrypt(#{PASS_NO},'P')
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_NO)">
				 ,  unilite.fnCipherEncrypt(#{VISA_NO},'V')
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION_NAME)">
				 , #{NATION_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_GUBUN)">
				 , #{VISA_GUBUN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VISA_KIND)">
				 , #{VISA_KIND}
			</if>
			<if test="@foren.Ognl@isNotEmpty(VALI_DATE)">
				 , #{VALI_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(DURATION_STAY)">
				 , #{DURATION_STAY}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TERMI_DATE)">
				 , #{TERMI_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_DATE)">
				 , #{ISSUE_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_AT)">
				 , #{ISSUE_AT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(BIGO)">
				 , #{BIGO}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM731" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM731 */
		UPDATE HUM731T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'PASS_NO')">
				 , PASS_NO =  unilite.fnCipherEncrypt(#{PASS_NO},'P')
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VISA_NO')">
				 , VISA_NO =  unilite.fnCipherEncrypt(#{VISA_NO},'V')
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'NATION_NAME')">
				 , NATION_NAME = #{NATION_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VISA_GUBUN')">
				 , VISA_GUBUN = #{VISA_GUBUN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VISA_KIND')">
				 , VISA_KIND = #{VISA_KIND}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'VALI_DATE')">
				 , VALI_DATE = #{VALI_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'DURATION_STAY')">
				 , DURATION_STAY = #{DURATION_STAY}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'TERMI_DATE')">
				 , TERMI_DATE = #{TERMI_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ISSUE_DATE')">
				 , ISSUE_DATE = #{ISSUE_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'ISSUE_AT')">
				 , ISSUE_AT = #{ISSUE_AT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'BIGO')">
				 , BIGO = #{BIGO}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND unilite.fnCipherDecrypt(PASS_NO,'P') = #{PASS_NO}
			 AND PERSON_NUMB = #{PERSON_NUMB}
			 AND unilite.fnCipherDecrypt(VISA_NO,'V') = #{VISA_NO}  
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM731" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM731 */
		DELETE FROM HUM731T 
		    WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND unilite.fnCipherDecrypt(PASS_NO,'P') = #{PASS_NO}
			 AND PERSON_NUMB = #{PERSON_NUMB}
			 AND unilite.fnCipherDecrypt(VISA_NO,'V') = #{VISA_NO}       
	</update>
	<select id="hum105ukrServiceImpl.abroadTrip" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.abroadTrip */
		SELECT PERSON_NUMB
     		 , UNILITE.fnGetUserDateComp(COMP_CODE, OUT_FROM_DATE) AS OUT_FROM_DATE 
   			 , UNILITE.fnGetUserDateComp(COMP_CODE, OUT_TO_DATE)   AS OUT_TO_DATE
     		 , PURPOSE
    		 , NATION 
    		 , CITY
    		 , COMP_CODE
		  FROM HUM830T 
		 WHERE COMP_CODE = #{S_COMP_CODE} 
		   AND PERSON_NUMB = #{PERSON_NUMB}          
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM830" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM830 */
		INSERT INTO HUM830T ( 
				COMP_CODE
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(OUT_FROM_DATE)">
				 , OUT_FROM_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(OUT_TO_DATE)">
				 , OUT_TO_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION)">
				 , NATION
			</if>
			<if test="@foren.Ognl@isNotEmpty(CITY)">
				 , CITY
			</if>
			<if test="@foren.Ognl@isNotEmpty(PURPOSE)">
				 , PURPOSE
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(OUT_FROM_DATE)">
				 , #{OUT_FROM_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(OUT_TO_DATE)">
				 , #{OUT_TO_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(NATION)">
				 , #{NATION}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CITY)">
				 , #{CITY}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PURPOSE)">
				 , #{PURPOSE}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM830" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM830 */
		UPDATE HUM830T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'OUT_FROM_DATE')">
				 , OUT_FROM_DATE = #{OUT_FROM_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'OUT_TO_DATE')">
				 , OUT_TO_DATE = #{OUT_TO_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'NATION')">
				 , NATION = #{NATION}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'CITY')">
				 , CITY = #{CITY}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PURPOSE')">
				 , PURPOSE = #{PURPOSE}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND OUT_FROM_DATE = #{OUT_FROM_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM830" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM830 */
		DELETE FROM HUM830T 
		    WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND OUT_FROM_DATE = #{OUT_FROM_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB}     
	</update>
	<select id="hum105ukrServiceImpl.schoolExpence" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.schoolExpence */
		SELECT A.PERSON_NUMB
		     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAYMENT_DATE) PAYMENT_DATE
		     , A.FAMILY_NAME
		     , A.FAMILY_RELATION
		     , A.PAYMENT_AMOUNT
		     , A.SALARY_REFLECT_YN
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE} , A.REF_YEAR_MONTH) AS REF_YEAR_MONTH  
		     , A.UPDATE_DB_USER
		     , A.UPDATE_DB_TIME
		     , A.COMP_CODE		    
		  FROM HUM820T A 
		 WHERE A.COMP_CODE = #{S_COMP_CODE} 
		   AND A.PERSON_NUMB = #{PERSON_NUMB}       
	</select>
	<insert id="hum105ukrServiceImpl.insertHUM820" parameterType="Map">
	/* hum105ukrServiceImpl.insertHUM820 */
		INSERT INTO HUM820T ( 
				COMP_CODE
				 , UPDATE_DB_USER
				 , UPDATE_DB_TIME
				 , INSERT_DB_USER
				 , INSERT_DB_TIME
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , PERSON_NUMB
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAYMENT_DATE)">
				 , PAYMENT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(FAMILY_NAME)">
				 , FAMILY_NAME
			</if>
			<if test="@foren.Ognl@isNotEmpty(FAMILY_RELATION)">
				 , FAMILY_RELATION
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAYMENT_AMOUNT)">
				 , PAYMENT_AMOUNT
			</if>
			<if test="@foren.Ognl@isNotEmpty(SALARY_REFLECT_YN)">
				 , SALARY_REFLECT_YN
			</if>
			<if test="@foren.Ognl@isNotEmpty(REF_YEAR_MONTH)">
				 , REF_YEAR_MONTH
			</if>
		 ) VALUES ( 
				#{S_COMP_CODE}
				 , #{S_USER_ID}
				 , getDate()
				 , #{S_USER_ID}
				 , getDate()
			<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
				 , #{PERSON_NUMB}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAYMENT_DATE)">
				 , #{PAYMENT_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(FAMILY_NAME)">
				 , #{FAMILY_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(FAMILY_RELATION)">
				 , #{FAMILY_RELATION}
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAYMENT_AMOUNT)">
				 , #{PAYMENT_AMOUNT}
			</if>
			<if test="@foren.Ognl@isNotEmpty(SALARY_REFLECT_YN)">
				 , #{SALARY_REFLECT_YN}
			</if>
			<if test="@foren.Ognl@isNotEmpty(REF_YEAR_MONTH)">
				 , #{REF_YEAR_MONTH}
			</if>
		)
	</insert>
	<update id="hum105ukrServiceImpl.updateHUM820" parameterType="Map">
	/* hum105ukrServiceImpl.updateHUM820 */
		UPDATE HUM820T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="@foren.Ognl@isExists(_parameter, 'PAYMENT_DATE')">
				 , PAYMENT_DATE = #{PAYMENT_DATE}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'FAMILY_NAME')">
				 , FAMILY_NAME = #{FAMILY_NAME}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'FAMILY_RELATION')">
				 , FAMILY_RELATION = #{FAMILY_RELATION}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'PAYMENT_AMOUNT')">
				 , PAYMENT_AMOUNT = #{PAYMENT_AMOUNT}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'SALARY_REFLECT_YN')">
				 , SALARY_REFLECT_YN = #{SALARY_REFLECT_YN}
			</if>
			<if test="@foren.Ognl@isExists(_parameter, 'REF_YEAR_MONTH')">
				 , REF_YEAR_MONTH = #{REF_YEAR_MONTH}
			</if>
		 WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND FAMILY_NAME = #{FAMILY_NAME} 
			 AND FAMILY_RELATION = #{FAMILY_RELATION} 
			 AND PAYMENT_DATE = #{PAYMENT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<update id="hum105ukrServiceImpl.deleteHUM820" parameterType="Map">
	/* hum105ukrServiceImpl.deleteHUM820 */
		DELETE FROM HUM820T 
		     WHERE 	COMP_CODE = #{COMP_CODE} 
			 AND FAMILY_NAME = #{FAMILY_NAME} 
			 AND FAMILY_RELATION = #{FAMILY_RELATION} 
			 AND PAYMENT_DATE = #{PAYMENT_DATE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
	</update>
	<select id="hum105ukrServiceImpl.recommender" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.recommender */
		 	 SELECT A.PERSON_NUMB                                                    
	         , B.RECOMMEND1_NAME                                                
	         , B.RECOMMEND1_OFFICE_NAME                                         
	         , B.RECOMMEND1_CLASS                                               
	         , B.RECOMMEND1_RELATION                                            
	         , SUBSTRING(B.RECOMMEND1_ZIP_CODE,1,3) + '-' + SUBSTRING(B.RECOMMEND1_ZIP_CODE,4,3) AS RECOMMEND1_ZIP_CODE                                           
	         , B.RECOMMEND1_ADDR                                                
	         , B.RECOMMEND1_ADDR_DE                                             
	         , B.RECOMMEND2_NAME                                                
	         , B.RECOMMEND2_OFFICE_NAME                                         
	         , B.RECOMMEND2_CLASS                                               
	         , B.RECOMMEND2_RELATION                                            
	         , SUBSTRING(B.RECOMMEND2_ZIP_CODE,1,3) + '-' + SUBSTRING(B.RECOMMEND2_ZIP_CODE,4,3) AS RECOMMEND2_ZIP_CODE                                              
	         , B.RECOMMEND2_ADDR                                                
	         , B.RECOMMEND2_ADDR_DE                                             
	         , B.COMP_CODE                                                      
	      FROM HUM100T A  LEFT JOIN HUM790T B                                   
	                        ON A.COMP_CODE   = B.COMP_CODE                      
	                       AND A.PERSON_NUMB = B.PERSON_NUMB  
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<update id="hum105ukrServiceImpl.saveHUM790" parameterType="foren.unilite.modules.human.hum.Hum790ukrModel">
	/* hum105ukrServiceImpl.saveHUM790 */
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HUM790T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=#{PERSON_NUMB})	
		BEGIN	
			INSERT INTO HUM790T ( 
					COMP_CODE
					 , UPDATE_DB_USER
					 , UPDATE_DB_TIME
					 , INSERT_DB_USER
					 , INSERT_DB_TIME
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , PERSON_NUMB
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_NAME)">
					 , RECOMMEND1_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_RELATION)">
					 , RECOMMEND1_RELATION
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_OFFICE_NAME)">
					 , RECOMMEND1_OFFICE_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_CLASS)">
					 , RECOMMEND1_CLASS
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ZIP_CODE)">
					 , RECOMMEND1_ZIP_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR)">
					 , RECOMMEND1_ADDR
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR_DE)">
					 , RECOMMEND1_ADDR_DE
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_NAME)">
					 , RECOMMEND2_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_RELATION)">
					 , RECOMMEND2_RELATION
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_OFFICE_NAME)">
					 , RECOMMEND2_OFFICE_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_CLASS)">
					 , RECOMMEND2_CLASS
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ZIP_CODE)">
					 , RECOMMEND2_ZIP_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR)">
					 , RECOMMEND2_ADDR
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR_DE)">
					 , RECOMMEND2_ADDR_DE
				</if>
			 ) VALUES ( 
					#{S_COMP_CODE}
					 , #{S_USER_ID}
					 , getDate()
					 , #{S_USER_ID}
					 , getDate()
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_NAME)">
					 , #{RECOMMEND1_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_RELATION)">
					 , #{RECOMMEND1_RELATION}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_OFFICE_NAME)">
					 , #{RECOMMEND1_OFFICE_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_CLASS)">
					 , #{RECOMMEND1_CLASS}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ZIP_CODE)">
					 , #{RECOMMEND1_ZIP_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR)">
					 , #{RECOMMEND1_ADDR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR_DE)">
					 , #{RECOMMEND1_ADDR_DE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_NAME)">
					 , #{RECOMMEND2_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_RELATION)">
					 , #{RECOMMEND2_RELATION}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_OFFICE_NAME)">
					 , #{RECOMMEND2_OFFICE_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_CLASS)">
					 , #{RECOMMEND2_CLASS}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ZIP_CODE)">
					 , #{RECOMMEND2_ZIP_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR)">
					 , #{RECOMMEND2_ADDR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR_DE)">
					 , #{RECOMMEND2_ADDR_DE}
				</if>
			)
		END
		ELSE
		BEGIN
			UPDATE HUM790T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="RECOMMEND1_NAME != null">
				 , RECOMMEND1_NAME = #{RECOMMEND1_NAME}
			</if>
			<if test="RECOMMEND1_RELATION != null">
				 , RECOMMEND1_RELATION = #{RECOMMEND1_RELATION}
			</if>
			<if test="RECOMMEND1_OFFICE_NAME != null">
				 , RECOMMEND1_OFFICE_NAME = #{RECOMMEND1_OFFICE_NAME}
			</if>
			<if test="RECOMMEND1_CLASS != null">
				 , RECOMMEND1_CLASS = #{RECOMMEND1_CLASS}
			</if>
			<if test="RECOMMEND1_ZIP_CODE != null">
				 , RECOMMEND1_ZIP_CODE = #{RECOMMEND1_ZIP_CODE}
			</if>
			<if test="RECOMMEND1_ADDR != null">
				 , RECOMMEND1_ADDR = #{RECOMMEND1_ADDR}
			</if>
			<if test="RECOMMEND1_ADDR_DE != null">
				 , RECOMMEND1_ADDR_DE = #{RECOMMEND1_ADDR_DE}
			</if>
			<if test="RECOMMEND2_NAME != null">
				 , RECOMMEND2_NAME = #{RECOMMEND2_NAME}
			</if>
			<if test="RECOMMEND2_RELATION != null">
				 , RECOMMEND2_RELATION = #{RECOMMEND2_RELATION}
			</if>
			<if test="RECOMMEND2_OFFICE_NAME != null">
				 , RECOMMEND2_OFFICE_NAME = #{RECOMMEND2_OFFICE_NAME}
			</if>
			<if test="RECOMMEND2_CLASS != null">
				 , RECOMMEND2_CLASS = #{RECOMMEND2_CLASS}
			</if>
			<if test="RECOMMEND2_ZIP_CODE != null">
				 , RECOMMEND2_ZIP_CODE = #{RECOMMEND2_ZIP_CODE}
			</if>
			<if test="RECOMMEND2_ADDR != null">
				 , RECOMMEND2_ADDR = #{RECOMMEND2_ADDR}
			</if>
			<if test="RECOMMEND2_ADDR_DE != null">
				 , RECOMMEND2_ADDR_DE = #{RECOMMEND2_ADDR_DE}
			</if>
		 WHERE 	COMP_CODE = #{S_COMP_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB} 
		END
	</update>
	<select id="hum105ukrServiceImpl.surety" parameterType="Map" resultType="rMap">
	/* hum105ukrServiceImpl.surety */
		 	 SELECT A.PERSON_NUMB
			     , B.INSURANCE_NAME
			     , B.INSURANCE_NO
			     , B.INSURANCE_COMPANY
			     , B.INSURANCE_FARE
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_FR) GUARANTEE_PERIOD_FR
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_TO) GUARANTEE_PERIOD_TO
			    
			    
			     , B.GUARANTOR1_NAME
			     , B.GUARANTOR1_RELATION
			     , unilite.fnCipherDecrypt(B.GUARANTOR1_RES_NO, 'A') AS GUARANTOR1_RES_NO
			
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_FR) GUARANTOR1_PERIOD_FR
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_TO) GUARANTOR1_PERIOD_TO
			    
			     , B.GUARANTOR1_WORK_ZONE
			     , B.GUARANTOR1_CLASS
			     , B.GUARANTOR1_INCOMETAX
			     , SUBSTRING(B.GUARANTOR1_ZIP_CODE,1,3) + '-' + SUBSTRING(B.GUARANTOR1_ZIP_CODE,4,3) AS  GUARANTOR1_ZIP_CODE
			     , B.GUARANTOR1_ADDR
			     , B.GUARANTOR1_ADDR_DE
			    
			     , B.GUARANTOR2_NAME
			     , B.GUARANTOR2_RELATION
			     , unilite.fnCipherDecrypt(B.GUARANTOR2_RES_NO, 'A') AS GUARANTOR2_RES_NO
			
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_FR) GUARANTOR2_PERIOD_FR
			     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_TO) GUARANTOR2_PERIOD_TO
			     , B.GUARANTOR2_WORK_ZONE
			     , B.GUARANTOR2_CLASS
			     , B.GUARANTOR2_INCOMETAX
			     , SUBSTRING(B.GUARANTOR2_ZIP_CODE,1,3) + '-' + SUBSTRING(B.GUARANTOR2_ZIP_CODE,4,3) AS  GUARANTOR2_ZIP_CODE
			     , B.GUARANTOR2_ADDR
			     , B.GUARANTOR2_ADDR_DE 
			     , B.COMP_CODE
			  FROM HUM100T A 
			  LEFT JOIN  HUM800T B
			                    ON A.COMP_CODE = B.COMP_CODE
			                   AND A.PERSON_NUMB = B.PERSON_NUMB
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<update id="hum105ukrServiceImpl.saveHUM800" parameterType="foren.unilite.modules.human.hum.Hum800ukrModel">
	/* hum105ukrServiceImpl.saveHUM800 */
		IF  NOT  EXISTS (SELECT PERSON_NUMB FROM HUM800T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB=#{PERSON_NUMB})	
		BEGIN	
			INSERT INTO HUM800T ( 
					COMP_CODE
					 , INSERT_DB_USER
					 , INSERT_DB_TIME
					 , UPDATE_DB_USER
					 , UPDATE_DB_TIME
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , PERSON_NUMB
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_NAME)">
					 , INSURANCE_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_NO)">
					 , INSURANCE_NO
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_COMPANY)">
					 , INSURANCE_COMPANY
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_FARE)">
					 , INSURANCE_FARE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTEE_PERIOD_FR)">
					 , GUARANTEE_PERIOD_FR
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTEE_PERIOD_TO)">
					 , GUARANTEE_PERIOD_TO
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_NAME)">
					 , GUARANTOR1_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_RELATION)">
					 , GUARANTOR1_RELATION
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_RES_NO)">
					 , GUARANTOR1_RES_NO
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_PERIOD_FR)">
					 , GUARANTOR1_PERIOD_FR
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_PERIOD_TO)">
					 , GUARANTOR1_PERIOD_TO
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_WORK_ZONE)">
					 , GUARANTOR1_WORK_ZONE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_CLASS)">
					 , GUARANTOR1_CLASS
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_INCOMETAX)">
					 , GUARANTOR1_INCOMETAX
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ZIP_CODE)">
					 , GUARANTOR1_ZIP_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ADDR)">
					 , GUARANTOR1_ADDR
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ADDR_DE)">
					 , GUARANTOR1_ADDR_DE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_NAME)">
					 , GUARANTOR2_NAME
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_RELATION)">
					 , GUARANTOR2_RELATION
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_RES_NO)">
					 , GUARANTOR2_RES_NO
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_PERIOD_FR)">
					 , GUARANTOR2_PERIOD_FR
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_PERIOD_TO)">
					 , GUARANTOR2_PERIOD_TO
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_WORK_ZONE)">
					 , GUARANTOR2_WORK_ZONE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_CLASS)">
					 , GUARANTOR2_CLASS
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_INCOMETAX)">
					 , GUARANTOR2_INCOMETAX
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ZIP_CODE)">
					 , GUARANTOR2_ZIP_CODE
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ADDR)">
					 , GUARANTOR2_ADDR
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ADDR_DE)">
					 , GUARANTOR2_ADDR_DE
				</if>
			 ) VALUES ( 
					#{S_COMP_CODE}
					 , #{S_USER_ID}
					 , getDate()
					 , #{S_USER_ID}
					 , getDate()
				<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
					 , #{PERSON_NUMB}
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_NAME)">
					 , #{INSURANCE_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_NO)">
					 , #{INSURANCE_NO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_COMPANY)">
					 , #{INSURANCE_COMPANY}
				</if>
				<if test="@foren.Ognl@isNotEmpty(INSURANCE_FARE)">
					 , #{INSURANCE_FARE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTEE_PERIOD_FR)">
					 , #{GUARANTEE_PERIOD_FR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTEE_PERIOD_TO)">
					 , #{GUARANTEE_PERIOD_TO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_NAME)">
					 , #{GUARANTOR1_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_RELATION)">
					 , #{GUARANTOR1_RELATION}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_RES_NO)">
					 , unilite.fnCipherEncrypt(#{GUARANTOR1_RES_NO},'A')
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_PERIOD_FR)">
					 , #{GUARANTOR1_PERIOD_FR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_PERIOD_TO)">
					 , #{GUARANTOR1_PERIOD_TO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_WORK_ZONE)">
					 , #{GUARANTOR1_WORK_ZONE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_CLASS)">
					 , #{GUARANTOR1_CLASS}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_INCOMETAX)">
					 , #{GUARANTOR1_INCOMETAX}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ZIP_CODE)">
					 , #{GUARANTOR1_ZIP_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ADDR)">
					 , #{GUARANTOR1_ADDR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR1_ADDR_DE)">
					 , #{GUARANTOR1_ADDR_DE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_NAME)">
					 , #{GUARANTOR2_NAME}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_RELATION)">
					 , #{GUARANTOR2_RELATION}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_RES_NO)">
					 , unilite.fnCipherEncrypt(#{GUARANTOR2_RES_NO}, 'A')
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_PERIOD_FR)">
					 , #{GUARANTOR2_PERIOD_FR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_PERIOD_TO)">
					 , #{GUARANTOR2_PERIOD_TO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_WORK_ZONE)">
					 , #{GUARANTOR2_WORK_ZONE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_CLASS)">
					 , #{GUARANTOR2_CLASS}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_INCOMETAX)">
					 , #{GUARANTOR2_INCOMETAX}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ZIP_CODE)">
					 , #{GUARANTOR2_ZIP_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ADDR)">
					 , #{GUARANTOR2_ADDR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(GUARANTOR2_ADDR_DE)">
					 , #{GUARANTOR2_ADDR_DE}
				</if>
			)
		END
		ELSE
		BEGIN
			UPDATE HUM800T SET  
				   UPDATE_DB_USER = #{S_USER_ID}
				 , UPDATE_DB_TIME = getDate()
			<if test="INSURANCE_NAME != null">
				 , INSURANCE_NAME = #{INSURANCE_NAME}
			</if>
			<if test="INSURANCE_NO != null">
				 , INSURANCE_NO = #{INSURANCE_NO}
			</if>
			<if test="INSURANCE_COMPANY != null">
				 , INSURANCE_COMPANY = #{INSURANCE_COMPANY}
			</if>
			<if test="INSURANCE_FARE != null">
				 , INSURANCE_FARE = #{INSURANCE_FARE}
			</if>
			<if test="GUARANTEE_PERIOD_FR != null">
				 , GUARANTEE_PERIOD_FR = #{GUARANTEE_PERIOD_FR}
			</if>
			<if test="GUARANTEE_PERIOD_TO != null">
				 , GUARANTEE_PERIOD_TO = #{GUARANTEE_PERIOD_TO}
			</if>
			<if test="GUARANTOR1_NAME != null">
				 , GUARANTOR1_NAME = #{GUARANTOR1_NAME}
			</if>
			<if test="GUARANTOR1_RELATION != null">
				 , GUARANTOR1_RELATION = #{GUARANTOR1_RELATION}
			</if>
			<if test="GUARANTOR1_RES_NO != null">
				 , GUARANTOR1_RES_NO = unilite.fnCipherEncrypt(#{GUARANTOR1_RES_NO},'A')
			</if>
			<if test="GUARANTOR1_PERIOD_FR != null">
				 , GUARANTOR1_PERIOD_FR = #{GUARANTOR1_PERIOD_FR}
			</if>
			<if test="GUARANTOR1_PERIOD_TO != null">
				 , GUARANTOR1_PERIOD_TO = #{GUARANTOR1_PERIOD_TO}
			</if>
			<if test="GUARANTOR1_WORK_ZONE != null">
				 , GUARANTOR1_WORK_ZONE = #{GUARANTOR1_WORK_ZONE}
			</if>
			<if test="GUARANTOR1_CLASS != null">
				 , GUARANTOR1_CLASS = #{GUARANTOR1_CLASS}
			</if>
			<if test="GUARANTOR1_INCOMETAX != null">
				 , GUARANTOR1_INCOMETAX = #{GUARANTOR1_INCOMETAX}
			</if>
			<if test="GUARANTOR1_ZIP_CODE != null">
				 , GUARANTOR1_ZIP_CODE = #{GUARANTOR1_ZIP_CODE}
			</if>
			<if test="GUARANTOR1_ADDR != null">
				 , GUARANTOR1_ADDR = #{GUARANTOR1_ADDR}
			</if>
			<if test="GUARANTOR1_ADDR_DE != null">
				 , GUARANTOR1_ADDR_DE = #{GUARANTOR1_ADDR_DE}
			</if>
			<if test="GUARANTOR2_NAME != null">
				 , GUARANTOR2_NAME = #{GUARANTOR2_NAME}
			</if>
			<if test="GUARANTOR2_RELATION != null">
				 , GUARANTOR2_RELATION = #{GUARANTOR2_RELATION}
			</if>
			<if test="GUARANTOR2_RES_NO != null">
				 , GUARANTOR2_RES_NO = unilite.fnCipherEncrypt(#{GUARANTOR2_RES_NO},'A')
			</if>
			<if test="GUARANTOR2_PERIOD_FR != null">
				 , GUARANTOR2_PERIOD_FR = #{GUARANTOR2_PERIOD_FR}
			</if>
			<if test="GUARANTOR2_PERIOD_TO != null">
				 , GUARANTOR2_PERIOD_TO = #{GUARANTOR2_PERIOD_TO}
			</if>
			<if test="GUARANTOR2_WORK_ZONE != null">
				 , GUARANTOR2_WORK_ZONE = #{GUARANTOR2_WORK_ZONE}
			</if>
			<if test="GUARANTOR2_CLASS != null">
				 , GUARANTOR2_CLASS = #{GUARANTOR2_CLASS}
			</if>
			<if test="GUARANTOR2_INCOMETAX != null">
				 , GUARANTOR2_INCOMETAX = #{GUARANTOR2_INCOMETAX}
			</if>
			<if test="GUARANTOR2_ZIP_CODE != null">
				 , GUARANTOR2_ZIP_CODE = #{GUARANTOR2_ZIP_CODE}
			</if>
			<if test="GUARANTOR2_ADDR != null">
				 , GUARANTOR2_ADDR = #{GUARANTOR2_ADDR}
			</if>
			<if test="GUARANTOR2_ADDR_DE != null">
				 , GUARANTOR2_ADDR_DE = #{GUARANTOR2_ADDR_DE}
			</if>
		 WHERE 	COMP_CODE = #{S_COMP_CODE} 
			 AND PERSON_NUMB = #{PERSON_NUMB}  
		END
	</update>
	<select id="hum105ukrServiceImpl.fnHum100P2Code" parameterType="Map" resultType="rMap">	
		SELECT WAGES_CODE
		     , WAGES_NAME
		  FROM HBS300T
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND WAGES_KIND = '1'
	</select>
	<select id="hum105ukrServiceImpl.fnHum100P2" parameterType="Map" resultType="rMap">	
		--UHbs01Krv.Chum100Kr.fnHum100P2
		SELECT A.PAY_GRADE_YYYY
			 , PAY_GRADE_01
             , C.CODE_NAME AS PAY_GRADE_01_NAME
		     , PAY_GRADE_02
		      ${CODE_SQL}
		  FROM            HBS200T A
		       INNER JOIN HBS300T B
		          ON A.COMP_CODE  = B.COMP_CODE
		         AND A.WAGES_CODE = B.WAGES_CODE
                LEFT JOIN BSA100T C 
                  ON A.COMP_CODE    = C.COMP_CODE
                 AND C.MAIN_CODE    = 'HX09'
                 AND A.PAY_GRADE_01 = C.SUB_CODE
                 
                 
		 WHERE A.COMP_CODE    = #{S_COMP_CODE}
		 <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_YYYY)">
	 	   AND A.PAY_GRADE_YYYY = #{PAY_GRADE_YYYY}
		 </if>
		 <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
		   AND (PAY_GRADE_01 = #{PAY_GRADE_01} OR C.CODE_NAME LIKE '%' + #{PAY_GRADE_01} + '%')
		 </if>
		 <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
		   AND PAY_GRADE_02 = #{PAY_GRADE_02}
		 </if>
		 <if test="GRADE_FLAG == '03'">
		   AND PAY_GRADE_01 = '97'
		 </if>
		 <if test="GRADE_FLAG == '04'">
		   AND PAY_GRADE_01 = '98'
		 </if>
         <if test="GRADE_FLAG == '05'">
           AND PAY_GRADE_01 = '99'
         </if>
		 GROUP BY A.COMP_CODE, A.PAY_GRADE_YYYY, A.PAY_GRADE_01, A.PAY_GRADE_02, C.CODE_NAME
		 ORDER BY CONVERT(NUMERIC(10,0),A.PAY_GRADE_01), CONVERT(NUMERIC(10,0),A.PAY_GRADE_02) 		
	</select>
	<select id="hum105ukrServiceImpl.fnHum100Chk" parameterType="Map" resultType="rMap">	
		SELECT COUNT(*) AS COUNTS 
 		  FROM HPA600T A, HAT300T B
		 WHERE A.COMP_CODE   = #{S_COMP_CODE}
 		   AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<update id="hum105ukrServiceImpl.delete" parameterType="Map">	
		--UHbs01Krv.CHum100UKr[fnHum100Set] Delete
        DELETE FROM HUM100t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM200t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM500t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM600t WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HPA200T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HPA500T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
        DELETE FROM HUM120T WHERE COMP_CODE = #{S_COMP_CODE} AND PERSON_NUMB = #{PERSON_NUMB}
      
	</update>
</mapper>