<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum205ukrServiceImpl">

    <select id="hum205ukrServiceImpl.selectList" parameterType="rMap" resultType="rMap">
        /* hum205ukrServiceImpl.selectList */       
        SELECT A.COMP_CODE
             , A.PERSON_NUMB
             , B.NAME
             , B.DEPT_CODE
             , B.DEPT_NAME
             , A.ANNOUNCE_DATE
             , A.ANNOUNCE_CODE
             
             , A.RETR_RESN              /*  퇴직사유    */
             
             , A.APPLY_YEAR
             , A.APPLY_YN
             , A.BE_DIV_CODE
             , A.AF_DIV_CODE
             , A.BE_DEPT_CODE
             , A.BE_DEPT_NAME
             , A.AF_DEPT_CODE
             , A.AF_DEPT_NAME
             , A.POST_CODE
             , A.ABIL_CODE
             , A.AF_POST_CODE
             , A.AF_ABIL_CODE
             , A.PAY_GRADE_01
             , C.CODE_NAME AS PAY_GRADE_01_NAME
             , A.PAY_GRADE_02
             
             
             , A.AF_PAY_GRADE_01
             , D.CODE_NAME AS AF_PAY_GRADE_01_NAME
             , A.AF_PAY_GRADE_02
             , A.AFFIL_CODE
             , A.AF_AFFIL_CODE
             , A.KNOC
             , A.AF_KNOC
             
             , A.ANNOUNCE_REASON
             
             
          FROM       HUM760T A
          INNER JOIN HUM100T B  ON B.COMP_CODE   = A.COMP_CODE
                               AND B.PERSON_NUMB = A.PERSON_NUMB
                               
           LEFT JOIN BSA100T C  ON C.COMP_CODE   = A.COMP_CODE
                               AND C.MAIN_CODE   = 'HX09'
                               AND C.SUB_CODE    = A.PAY_GRADE_01

           LEFT JOIN BSA100T D  ON D.COMP_CODE   = A.COMP_CODE
                               AND D.MAIN_CODE   = 'HX09'
                               AND D.SUB_CODE    = A.AF_PAY_GRADE_01
                               
         WHERE A.COMP_CODE         = #{S_COMP_CODE}
           AND A.ANNOUNCE_DATE &gt;= #{FR_ANNOUNCE_DATE}
           AND A.ANNOUNCE_DATE &lt;= #{TO_ANNOUNCE_DATE}
        <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">                  
           AND B.DIV_CODE IN
                <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
                 #{item}
                </foreach>                                  
        </if>
        <if test="@foren.Ognl@isNotEmpty(DEPTS)">                   
           AND B.DEPT_CODE IN
            <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>                                  
        </if>
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
           AND A.PERSON_NUMB = #{PERSON_NUMB}
        </if>
    </select>
    
    
    <insert id="hum205ukrServiceImpl.insertList"  parameterType="rMap">
        /* hum205ukrServiceImpl.insertList */
        INSERT INTO HUM760T
            (
                      COMP_CODE
                    , PERSON_NUMB
                    , ANNOUNCE_DATE
                    , ANNOUNCE_CODE
                    
                    , RETR_RESN         /* 퇴직사유   */
                    
                    , APPLY_YN
                    , APPLY_YEAR
                    , BE_DIV_CODE
                    , AF_DIV_CODE
                    , BE_DEPT_CODE
                    , BE_DEPT_NAME
                    , AF_DEPT_CODE
                    , AF_DEPT_NAME
                    , POST_CODE
                    , ABIL_CODE
                    , AF_POST_CODE
                    , AF_ABIL_CODE
                    , PAY_GRADE_01
                    , PAY_GRADE_02
                    
                    
                    , AF_PAY_GRADE_01
                    , AF_PAY_GRADE_02
                    , KNOC
                    , AF_KNOC
                    , AFFIL_CODE
                    , AF_AFFIL_CODE
                    , ANNOUNCE_REASON
                    
                    
                    , INSERT_DB_USER
                    , INSERT_DB_TIME
                    , UPDATE_DB_USER
                    , UPDATE_DB_TIME
            )
            VALUES (
                      #{S_COMP_CODE}
                    , #{PERSON_NUMB}
                    , #{ANNOUNCE_DATE}
                    , #{ANNOUNCE_CODE}
                    
                    , #{RETR_RESN}
                    
                    , #{APPLY_YN}
                    , #{APPLY_YEAR}
                    , #{BE_DIV_CODE}
                    , #{AF_DIV_CODE}
                    , #{BE_DEPT_CODE}
                    , #{BE_DEPT_NAME}
                    , #{AF_DEPT_CODE}
                    , #{AF_DEPT_NAME}
                    , #{POST_CODE}
                    , #{ABIL_CODE}
                    , #{AF_POST_CODE}
                    , #{AF_ABIL_CODE}
                    , #{PAY_GRADE_01}
                    , #{PAY_GRADE_02}
                    
                    
                    , #{AF_PAY_GRADE_01}
                    , #{AF_PAY_GRADE_02}
                    , #{KNOC}
                    , #{AF_KNOC}
                    , #{AFFIL_CODE}
                    , #{AF_AFFIL_CODE}
                    , #{ANNOUNCE_REASON}
                    
                    , #{S_USER_ID}
                    , GETDATE()
                    , #{S_USER_ID}
                    , GETDATE()
            )
    </insert>
    
    <update id="hum205ukrServiceImpl.updateList"  parameterType="rMap">
        /* hum205ukrServiceImpl.updateList */
        UPDATE HUM760T
           SET      
               AF_DIV_CODE      = #{AF_DIV_CODE}    
             , AF_DEPT_CODE     = #{AF_DEPT_CODE}    
             , AF_DEPT_NAME     = #{AF_DEPT_NAME}   
             , POST_CODE        = #{POST_CODE}    
             , ABIL_CODE        = #{ABIL_CODE}
             , AFFIL_CODE       = #{AFFIL_CODE}
             , KNOC             = #{KNOC}
             , RETR_RESN        = #{RETR_RESN}
             
             , APPLY_YEAR       = #{APPLY_YEAR}
             , AF_POST_CODE     = #{AF_POST_CODE}    
             , AF_ABIL_CODE     = #{AF_ABIL_CODE}
             , AF_KNOC          = #{AF_KNOC}
             , AF_AFFIL_CODE    = #{AF_AFFIL_CODE}    
             , AF_PAY_GRADE_01  = #{AF_PAY_GRADE_01} 
             , AF_PAY_GRADE_02  = #{AF_PAY_GRADE_02}
             , ANNOUNCE_REASON  = #{ANNOUNCE_REASON}
          
             
             , UPDATE_DB_USER   = #{S_USER_ID}
             , UPDATE_DB_TIME   = GETDATE()
         WHERE COMP_CODE        = #{S_COMP_CODE}
           AND PERSON_NUMB      = #{PERSON_NUMB}
           AND ANNOUNCE_DATE    = #{ANNOUNCE_DATE} 
           AND ANNOUNCE_CODE    = #{ANNOUNCE_CODE} 
    </update>
    
    <delete id="hum205ukrServiceImpl.deleteList"  parameterType="rMap">
        /* hum205ukrServiceImpl.deleteList */
        DELETE HUM760T
         WHERE COMP_CODE        = #{S_COMP_CODE}
           AND PERSON_NUMB      = #{PERSON_NUMB}
           AND ANNOUNCE_DATE    = #{ANNOUNCE_DATE} 
           AND ANNOUNCE_CODE    = #{ANNOUNCE_CODE} 
    </delete>



    <!-- CALL SP -->
    <insert id="hum205ukrServiceImpl.insertLogTable" parameterType="Map">     
        INSERT INTO L_HUM760T
               (
                 KEY_VALUE
               , COMP_CODE
               , PERSON_NUMB
               , ANNOUNCE_DATE
               , ANNOUNCE_CODE
               , WORK_GB    
               , INSERT_DB_USER
               , INSERT_DB_TIME
               )
         VALUES
               ( 
                 #{KEY_VALUE}
               , #{S_COMP_CODE}       
               , #{PERSON_NUMB}
               , #{ANNOUNCE_DATE}
               , #{ANNOUNCE_CODE}
               , #{WORK_GB}
               , #{S_USER_ID}
               , GETDATE()         
               ) 
    </insert>
    



    <!-- 일괄반영 SP호출 -->
    <update id="hum205ukrServiceImpl.runAutoSlip" parameterType="Map" statementType="CALLABLE">
        {call USP_HUMAN_HUM205TUKR_fnApply (
            #{COMP_CODE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 법인코드
            #{PERSON_NUMB,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 사원코드
            #{ANNOUNCE_DATE,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 발령일자
            #{ANNOUNCE_CODE,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 발령코드
            #{WORK_GUBUN,      mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 작업구분(1 : 반영, 2 : 취소)
            #{KEY_VALUE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- KEY 문자열
            #{LOGIN_ID,        mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 작업자ID
            #{LANG_TYPE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 언어구분
            #{ERROR_DESC,      mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}             -- 에러명세
        )}
    </update>

    <!-- 반영취소 SP 호출 -->
    <update id="hum205ukrServiceImpl.cancelSlip" parameterType="Map" statementType="CALLABLE">
        {call USP_HUMAN_HUM205TUKR_fnApply (
            #{COMP_CODE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 법인코드
            #{PERSON_NUMB,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 사원코드
            #{ANNOUNCE_DATE,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 발령일자
            #{ANNOUNCE_CODE,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 발령코드
            #{WORK_GUBUN,      mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 작업구분(1 : 반영, 2 : 취소)
            #{KEY_VALUE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- KEY 문자열
            #{LOGIN_ID,        mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 작업자ID
            #{LANG_TYPE,       mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},            -- 언어구분
            #{ERROR_DESC,      mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}             -- 에러명세
        )}
    </update>
    
    <!-- Excel Upload-->
    <update id="hum205ukrServiceImpl.insertExcelUpload" parameterType="Map">
        /* hum205ukrServiceImpl.insertExcelUpload*/
        /* temp Table에 insert */    
        INSERT INTO L_HUM205T
            (
               _EXCEL_JOBID 
             , _EXCEL_ROWNUM 
             , _EXCEL_HAS_ERROR 
             , _EXCEL_ERROR_MSG
             
             , COMP_CODE
             , PERSON_NUMB
             , ANNOUNCE_CODE
             , ANNOUNCE_DATE
             , NAME
            
           
             , RETR_RESN_NAME
             , AF_DIV_CODE
             , AF_DEPT_CODE
             , AF_DEPT_NAME
             , AF_POST_CODE
             
             , AF_ABIL_CODE
             , AF_PAY_GRADE_01
             , AF_PAY_GRADE_02
             , AF_AFFIL_CODE
             
             , AF_KNOC
             , ANNOUNCE_REASON
                          
            
             , INSERT_DB_USER
             , INSERT_DB_TIME
        )
        VALUES (
               #{_EXCEL_JOBID} 
             , #{_EXCEL_ROWNUM} 
             , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR} 
             , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
                  
             , #{S_COMP_CODE}
             , #{PERSON_NUMB}
             , #{ANNOUNCE_CODE}
             , #{ANNOUNCE_DATE}
             , #{NAME}
            
             , #{RETR_RESN_NAME}
             , #{AF_DIV_NAME}
             , #{AF_DEPT_CODE}
             , #{AF_DEPT_NAME}
             , #{AF_POST_NAME}
             
             , #{AF_ABIL_NAME}
             , #{AF_PAY_GRADE_01}
             , #{AF_PAY_GRADE_02}
             , #{AF_AFFIL_NAME}
             
             , #{AF_KNOC_NAME}
             , #{ANNOUNCE_REASON}
             
                       
             , #{S_USER_ID}
             , GETDATE()
        )
    </update>
    
 	<select id="hum205ukrServiceImpl.selectExcelUploadSheet" parameterType="Map" resultType="rMap">
        /* hum205ukrServiceImpl.selectExcelUploadSheet */
		SELECT A._EXCEL_JOBID
             , A._EXCEL_ROWNUM

             , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB
                    THEN CASE WHEN A.NAME != B.NAME
                              THEN 'Y'
                              
                              --퇴직사유
                              WHEN ISNULL(M5.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.RETR_RESN_NAME, '') != ''
                                        THEN 'Y'
                                        ELSE A._EXCEL_HAS_ERROR
                                    END
                              
                              --직위코드
                              WHEN ISNULL(M1.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_POST_CODE, '') != ''
                                        THEN 'Y'
                                        ELSE A._EXCEL_HAS_ERROR
                                    END
                              
                              --직책코드
                              WHEN ISNULL(M2.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_ABIL_CODE, '') != ''
                                        THEN 'Y'
                                        ELSE A._EXCEL_HAS_ERROR
                                    END
                              
                              --직렬코드
                              WHEN ISNULL(M3.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_AFFIL_CODE, '') != ''
                                        THEN 'Y'
                                        ELSE A._EXCEL_HAS_ERROR
                                    END
                              
                              --직종코드
                              WHEN ISNULL(M4.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_KNOC, '') != ''
                                        THEN 'Y'
                                        ELSE A._EXCEL_HAS_ERROR
                                    END

                              ELSE A._EXCEL_HAS_ERROR
                          END 
                    WHEN ISNULL(B.PERSON_NUMB, '') = ''
                    THEN 'Y'
                    
                    ELSE A._EXCEL_HAS_ERROR
                END AS _EXCEL_HAS_ERROR

             , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB
                    THEN CASE WHEN A.NAME != B.NAME
                              THEN '사번과 사원명을 확인하십시오.'
                              
                              --퇴직사유
                              WHEN ISNULL(M5.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.RETR_RESN_NAME, '') != ''
                                        THEN '퇴직사유를 확인하십시오.'
                                        ELSE A._EXCEL_ERROR_MSG
                                    END
                              
                              --직위코드
                              WHEN ISNULL(M1.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_POST_CODE, '') != ''
                                        THEN '직위명을 확인하십시오.'
                                        ELSE A._EXCEL_ERROR_MSG
                                    END
                              
                              --직책코드
                              WHEN ISNULL(M2.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_ABIL_CODE, '') != ''
                                        THEN '직책명을 확인하십시오.'
                                        ELSE A._EXCEL_ERROR_MSG
                                    END
                              
                              --직렬코드
                              WHEN ISNULL(M3.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_AFFIL_CODE, '') != ''
                                        THEN '직렬명을 확인하십시오.'
                                        ELSE A._EXCEL_ERROR_MSG
                                    END
                              
                              --직종코드
                              WHEN ISNULL(M4.SUB_CODE, '') = ''
                              THEN CASE WHEN ISNULL(A.AF_KNOC, '') != ''
                                        THEN '직종명을 확인하십시오.'
                                        ELSE A._EXCEL_ERROR_MSG
                                    END
                              ELSE A._EXCEL_ERROR_MSG
                          END
                    WHEN ISNULL(B.PERSON_NUMB, '') = ''
                    THEN '등록된 사원코드가 없습니다.'

                    ELSE A._EXCEL_ERROR_MSG
                END AS _EXCEL_ERROR_MSG     

		     , A.COMP_CODE
			 , A.PERSON_NUMB             									--사번
		     , A.NAME                    									--성명		     
		     , B.DEPT_CODE													--부서코드(현재)
             , B.DEPT_NAME													--부서명(현재)
		     
		     , #{ANNOUNCE_DATE}	AS ANNOUNCE_DATE							--발령일자	
		     , #{ANNOUNCE_CODE}	AS ANNOUNCE_CODE							--발령코드
		     , M5.SUB_CODE      AS RETR_RESN								--퇴직사유
		     , A.RETR_RESN_NAME												--퇴직사유		     
		     , 0   				AS APPLY_YEAR								--적용년
             , 'N' 				AS APPLY_YN									--확정여부
             
             , B.DIV_CODE     AS BE_DIV_CODE								--사업장코드(발령전)		     
		     , CASE WHEN ISNULL(C.DIV_CODE, '') != '' THEN C.DIV_CODE  ELSE B.DIV_CODE END    	AS AF_DIV_CODE			--사업장코드(발령후)
		     , CASE WHEN ISNULL(C.DIV_NAME, '') != '' THEN C.DIV_NAME  ELSE D.DIV_NAME END		AS AF_DIV_NAME			--사업장명(발령후)
		     
		     , B.DEPT_CODE  AS BE_DEPT_CODE									--부서코드(발령전)
             , B.DEPT_NAME  AS BE_DEPT_NAME									--부서명(발령전)             
		     , CASE WHEN ISNULL(A.AF_DEPT_CODE, '') != '' THEN A.AF_DEPT_CODE  ELSE B.DEPT_CODE END  AS AF_DEPT_CODE			--부서코드(발령후)
		     , CASE WHEN ISNULL(A.AF_DEPT_NAME, '') != '' THEN A.AF_DEPT_NAME  ELSE B.DEPT_NAME END  AS AF_DEPT_NAME			--부서명(발령후)
		     
		     , B.POST_CODE													--직위코드(발령전)
		     , CASE WHEN ISNULL(M1.SUB_CODE, '') != '' THEN M1.SUB_CODE  ELSE B.POST_CODE END    AS AF_POST_CODE			--직위코드(발령후)
		     --, A.AF_POST_CODE					   AS AF_POST_NAME			--직위명(발령후)
		     
			 , B.ABIL_CODE		     										--직책코드(발령전)
		     , CASE WHEN ISNULL(M2.SUB_CODE, '') != '' THEN M2.SUB_CODE  ELSE B.ABIL_CODE END    AS AF_ABIL_CODE			--직책코드(발령후)
		     --, A.AF_ABIL_CODE												--직책명(발령후)
		     
			 , B.PAY_GRADE_01												--급호(발령전)
			 , B.PAY_GRADE_02												--호봉(발령전)		     
		     , CASE WHEN ISNULL(A.AF_PAY_GRADE_01, '') != '' THEN  A.AF_PAY_GRADE_01 ELSE B.PAY_GRADE_01 END AS AF_PAY_GRADE_01	--급호(발령후)
		     , CASE WHEN ISNULL(A.AF_PAY_GRADE_02, '') != '' THEN  A.AF_PAY_GRADE_02 ELSE B.PAY_GRADE_02 END AS	AF_PAY_GRADE_02	--호봉(발령후)
		     
		     , B.AFFIL_CODE													--직렬코드(발령전)
		     , CASE WHEN ISNULL(M3.SUB_CODE, '') != '' THEN M3.SUB_CODE  ELSE B.AFFIL_CODE END    AS AF_AFFIL_CODE		--직렬코드(발령후)
		     --, A.AF_AFFIL_CODE												--직렬코드(발령후)
		     
		     , B.KNOC		     											--직종코드(발령전)
		     , CASE WHEN ISNULL(M4.SUB_CODE, '') != '' THEN M4.SUB_CODE  ELSE B.KNOC END    		AS AF_KNOC				--직종코드(발령후)
		     --, A.AF_KNOC_NAME						--직종(발령후)
		     
		     , A.ANNOUNCE_REASON					--발령사유	     
		        
		  FROM      L_HUM205T A  WITH(NOLOCK)          
		  LEFT JOIN HUM100T   B  WITH(NOLOCK) ON B.COMP_CODE   = #{S_COMP_CODE}
		                                     AND B.PERSON_NUMB = A.PERSON_NUMB
		  LEFT JOIN BOR120T   C  WITH(NOLOCK) ON C.COMP_CODE   = #{S_COMP_CODE}
		                                     AND C.DIV_CODE    = A.AF_DIV_CODE
		  LEFT JOIN BOR120T   D  WITH(NOLOCK) ON D.COMP_CODE   = #{S_COMP_CODE}
		                                     AND D.DIV_CODE    = B.DIV_CODE
		  LEFT JOIN BSA100T   M1 WITH(NOLOCK) ON M1.COMP_CODE  = #{S_COMP_CODE}
		                                     AND M1.MAIN_CODE  = 'H005'
		                                     AND M1.SUB_CODE  =  A.AF_POST_CODE
		  LEFT JOIN BSA100T   M2 WITH(NOLOCK) ON M2.COMP_CODE  = #{S_COMP_CODE}
		                                     AND M2.MAIN_CODE  = 'H006'
		                                     AND M2.SUB_CODE  =  A.AF_ABIL_CODE
		  LEFT JOIN BSA100T   M3 WITH(NOLOCK) ON M3.COMP_CODE  = #{S_COMP_CODE}
		                                     AND M3.MAIN_CODE  = 'H173'
		                                     AND M3.SUB_CODE  =  A.AF_AFFIL_CODE
		  LEFT JOIN BSA100T   M4 WITH(NOLOCK) ON M4.COMP_CODE  = #{S_COMP_CODE}
		                                     AND M4.MAIN_CODE  = 'H072'
		                                     AND M4.SUB_CODE  =  A.AF_KNOC
		  LEFT JOIN BSA100T   M5 WITH(NOLOCK) ON M5.COMP_CODE  = #{S_COMP_CODE}
		                                     AND M5.MAIN_CODE  = 'H023'
		                                     AND M5.CODE_NAME  =  A.RETR_RESN_NAME
		                                 
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>
    
    <!-- 임시 테이블에 insert된 데이터 조회 --> 
    <select id="hum205ukrServiceImpl.getData" parameterType="Map" resultType="rMap">
    	--hum205ukrServiceImpl.getData
        SELECT  * FROM L_HUM205T WITH(NOLOCK)
         WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
    </select>
</mapper>