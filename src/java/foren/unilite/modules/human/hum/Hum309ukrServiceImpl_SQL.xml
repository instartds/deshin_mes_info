<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum309ukrService">
	<select id="hum309ukrService.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>
	
	<select id="hum309ukrService.select" parameterType="Map" resultType="rMap">	/* 조회쿼리 */
		  	--  [ 날짜 포맷 유형 설정 ] ------------------------------------------------------------
	        DECLARE         @DateFormat         NVARCHAR(10)
	    
	        SELECT  TOP 1 @DateFormat = CODE_NAME
	        FROM    BSA100T WITH (NOLOCK)
	        WHERE   COMP_CODE = #{S_COMP_CODE}
	        AND     MAIN_CODE = N'B044'
	        AND     REF_CODE1 = N'Y'
	    
	        SET @DateFormat = ISNULL(@DateFormat, N'YYYY.MM.DD')
	    --  [ 데이터 조회 ] --------------------------------------------------------------------
	    
	    SELECT
	           A.COMP_CODE
	         , B.DIV_CODE
	         , B.DEPT_NAME  AS DEPT_NAME_EX
	         , M4.CODE_NAME AS POST_CODE
	         , B.NAME
	         , A.PERSON_NUMB
	         , A.MERITS_YEARS                       --고과년도
	         , A.MERITS_GUBUN                       --고과구분
	        
	         , A.DEPT_NAME                          --근무부서
	         , A.MERITS_CLASS                       --고과등급
	         , A.MERITS_GRADE                       --고과점수
	         , A.GRADE_PERSON_NUMB                  --평가자1
	         , H1.NAME AS GRADE1_NAME
	         , A.GRADE_PERSON_NUMB2                 --평가자2
	         , H2.NAME AS GRADE2_NAME
	         , A.SYNTHETIC_EVAL                     --통합평가
	    
	         , A.INSERT_DB_USER
	         , A.INSERT_DB_TIME
	         , A.UPDATE_DB_USER
	         , A.UPDATE_DB_TIME
	    
	    
	      FROM       HUM770T A  WITH(NOLOCK)
	      INNER JOIN HUM100T B  WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
	                                        AND B.PERSON_NUMB     = A.PERSON_NUMB
	    
	       LEFT JOIN CBM600T M1 WITH(NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
	                                        AND M1.COST_POOL_CODE = B.COST_KIND
	    
	       LEFT JOIN BSA100T M2 WITH(NOLOCK) ON M2.COMP_CODE      = B.COMP_CODE
	                                        AND M2.MAIN_CODE      = N'H024'
	                                        AND M2.SUB_CODE      != N'$'
	                                        AND M2.SUB_CODE       = B.EMPLOY_TYPE
	    
	       LEFT JOIN BSA100T M3 WITH (NOLOCK) ON M3.COMP_CODE     = B.COMP_CODE
	                                         AND M3.MAIN_CODE     = N'H181'
	                                         AND M3.SUB_CODE      = M2.REF_CODE1
	    
	       LEFT JOIN BSA100T M4 WITH (NOLOCK) ON M4.COMP_CODE     = B.COMP_CODE
	                                         AND M4.MAIN_CODE     = N'H005'
	                                         AND M4.SUB_CODE     != N'$'
	                                         AND M4.SUB_CODE      = B.POST_CODE
	    
	       LEFT JOIN HUM100T H1  WITH(NOLOCK) ON H1.COMP_CODE     = A.COMP_CODE
	                                         AND H1.PERSON_NUMB   = A.GRADE_PERSON_NUMB
	    
	       LEFT JOIN HUM100T H2  WITH(NOLOCK) ON H2.COMP_CODE     = A.COMP_CODE
	                                         AND H2.PERSON_NUMB   = A.GRADE_PERSON_NUMB2
	
	    
	     WHERE A.COMP_CODE   = #{S_COMP_CODE}
	     	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
		      AND B.DIV_CODE IN
					<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
					 #{item}
					</foreach>									
		    </if> 
            <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   AND  B.DEPT_CODE	 IN
				 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		          		 #{item}
		    	 </foreach>
			</if>
			<if test="@foren.Ognl@isNotEmpty(NAME)">
			   AND B.NAME   LIKE + '%' +  #{NAME} + '%'
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			   AND B.PERSON_NUMB  = #{PERSON_NUMB}
			</if>
			<if test="RDO_TYPE == &quot;A&quot;">
				AND B.RETR_DATE = '00000000'		-- 재직구분 (재직)
			</if>
			<if test="RDO_TYPE == &quot;B&quot;">
				AND B.RETR_DATE != '00000000'		-- 재직구분 (퇴사)
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_YEARS_FR)">
			   AND A.MERITS_YEARS 	&gt;= #{MERITS_YEARS_FR}						-- 고과년도 FR
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_YEARS_TO)">
			   AND A.MERITS_YEARS 	&lt;= #{MERITS_YEARS_TO}						-- 고과년도 TO
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GUBUN)">
			   AND A.MERITS_GUBUN  = #{MERITS_GUBUN}								-- 고과구분
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GRADE_FR)">
			   AND A.MERITS_GRADE 	&gt;= #{MERITS_GRADE_FR}						-- 고과점수 FR
			</if>
			<if test="@foren.Ognl@isNotEmpty(MERITS_GRADE_TO)">
			   AND A.MERITS_GRADE 	&lt;= #{MERITS_GRADE_TO}						-- 고과점수 TO
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
			   AND B.PAY_GUBUN  	= #{PAY_GUBUN}									-- 고용형태
			</if>
			<if test="@foren.Ognl@isNotEmpty(EMPLOY_GUBUN)">
			   AND B.EMPLOY_TYPE 	= #{EMPLOY_GUBUN}		 						-- 사원구분
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
			   AND B.PAY_CODE 		= #{PAY_CODE}		 	 						-- 급여지급방식
			</if>
			<if test="@foren.Ognl@isNotEmpty(COST_POOL)">
			   AND B.COST_KIND 		= #{COST_POOL}		 	 						-- 사업명
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
			   AND B.PAY_PROV_FLAG 	= #{PAY_PROV_FLAG}		 						-- 급여지급차수
			</if>
			<if test="@foren.Ognl@isNotEmpty(PERSON_GROUP)">
			   AND M3.SUB_CODE 		= #{PERSON_GROUP}		 						-- 사원그룹
			</if>
		    
		    ORDER BY A.COMP_CODE, B.DIV_CODE, A.MERITS_YEARS DESC, A.PERSON_NUMB 
	</select>
	
	<insert id="hum309ukrService.insertDetail" parameterType="Map">    /* 추가 */    
		--hum309ukr.Chum309ukr[fnHum309Save] Query02
		INSERT INTO HUM770T
		     ( COMP_CODE
		     , PERSON_NUMB
		     , MERITS_YEARS
		     , MERITS_GUBUN
		     <if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
		     , DEPT_NAME
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(MERITS_CLASS)">
		     , MERITS_CLASS
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(MERITS_GRADE)">
		     , MERITS_GRADE
		     </if>
		     , GRADE_PERSON_NUMB
		     <if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB2)">
		     , GRADE_PERSON_NUMB2
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(SYNTHETIC_EVAL)">
		     , SYNTHETIC_EVAL
		     </if>
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     ) 
		VALUES
		     ( #{S_COMP_CODE}
		     , #{PERSON_NUMB}
		     , #{MERITS_YEARS}
		     , #{MERITS_GUBUN}
		     <if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
		     , #{DEPT_NAME}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(MERITS_CLASS)">	
		     , #{MERITS_CLASS}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(MERITS_GRADE)">
		     , #{MERITS_GRADE}
		     </if>
		     , #{GRADE_PERSON_NUMB}
		     <if test="@foren.Ognl@isNotEmpty(GRADE_PERSON_NUMB2)">
		     , #{GRADE_PERSON_NUMB2}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(SYNTHETIC_EVAL)">
		     , #{SYNTHETIC_EVAL}
		     </if>
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		     )
	</insert>
	
	<update id="hum309ukrService.updateDetail" parameterType="Map">		/* 수정 */
	--hum309ukr.Chum309ukr[fnHum309Save] Query02
		UPDATE HUM770T
		   SET 
		        GRADE_PERSON_NUMB  = #{GRADE_PERSON_NUMB}
		     <if test="@foren.Ognl@isExists(_parameter, 'DEPT_NAME')">
		     ,  DEPT_NAME          = #{DEPT_NAME}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'MERITS_CLASS')">
		     , MERITS_CLASS       = #{MERITS_CLASS}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'MERITS_GRADE')">
		     , MERITS_GRADE       = #{MERITS_GRADE}
		     </if>
		    
		     <if test="@foren.Ognl@isExists(_parameter, 'GRADE_PERSON_NUMB2')">
		     , GRADE_PERSON_NUMB2       = #{GRADE_PERSON_NUMB2}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SYNTHETIC_EVAL')">
		     , SYNTHETIC_EVAL           = #{SYNTHETIC_EVAL}
		     </if>
		     , INSERT_DB_USER     = #{S_USER_ID}
		     , UPDATE_DB_USER     = #{S_USER_ID}
		     , UPDATE_DB_TIME     = GETDATE()
		     
		 WHERE COMP_CODE          = #{S_COMP_CODE}
		   AND PERSON_NUMB        = #{PERSON_NUMB}
		   AND MERITS_YEARS       = #{MERITS_YEARS}
		   AND MERITS_GUBUN       = #{MERITS_GUBUN}
	</update>
	
	<delete id="hum309ukrService.deleteDetail" parameterType="Map">		/* 삭제 */
		--hum309ukr.Chum309ukr[fnHum309Save] Query01
		DELETE FROM HUM770T 
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND PERSON_NUMB  = #{PERSON_NUMB}
		   AND MERITS_YEARS = #{MERITS_YEARS}
		   AND MERITS_GUBUN = #{MERITS_GUBUN}
	</delete>
</mapper>