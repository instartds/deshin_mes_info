<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hum960rkrServiceImpl">
	
	<select id="selectPrimaryDataList" parameterType="Map" resultType="rMap" >	
	/* hum960rkrServiceImpl.selectPrimaryDataList  */	
	
--hum960rkr.Chum960rkr[fnHum960nq]
SELECT A.NAME, A.PERSON_NUMB, A.NAME_ENG, A.NAME_CHI
     , unilite.fnCipherDecrypt(A.REPRE_NUM, 'RR') REPRE_NUM 
     , CASE WHEN A.BIRTH_DATE != '' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.BIRTH_DATE)
            END  AS BIRTH_DATE
     , A.TELEPHON, A.PHONE_NO
     , A.ORI_ADDR
     , ( '(' + SUBSTRING(A.ZIP_CODE,1,3) + '-' + SUBSTRING(A.ZIP_CODE,4,6) + ')' + ' ' + A.KOR_ADDR) AS ADDR
     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE) AS JOIN_DATE
     , CASE WHEN A.RETR_DATE != '' AND  A.RETR_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE)
            END AS RETR_DATE
     , CASE WHEN A.TRIAL_TERM_END_DATE != '' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.TRIAL_TERM_END_DATE)
            END AS TRIAL_TERM_END_DATE
     , CASE WHEN A.ORI_JOIN_DATE != '' AND A.ORI_JOIN_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ORI_JOIN_DATE)
            END AS ORI_JOIN_DATE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE     = A.COMP_CODE
           AND A.EMPLOY_TYPE = SUB_CODE
           AND MAIN_CODE     = 'H024') AS EMPLOY_TYPE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.JOIN_CODE = SUB_CODE
           AND MAIN_CODE   = 'H012') AS JOIN_CODE
     , (SELECT DIV_NAME
          FROM BOR120T 
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.DIV_CODE = DIV_CODE) AS DIV_NAME
     , A.DEPT_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.POST_CODE = SUB_CODE
           AND MAIN_CODE   = 'H005') AS POST_CODE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.ABIL_CODE = SUB_CODE
           AND MAIN_CODE   = 'H006') AS ABIL_CODE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.JOB_CODE = SUB_CODE
           AND MAIN_CODE  = 'H008') AS JOB_CODE
     , A.CARD_NUM
     , A.ARMY_NO
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND A.ARMY_KIND = SUB_CODE
           AND MAIN_CODE   = 'H017') AS ARMY_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND A.MIL_TYPE = SUB_CODE
           AND MAIN_CODE  = 'H016') AS MIL_TYPE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND A.ARMY_GRADE = SUB_CODE
           AND MAIN_CODE    = 'H018') AS ARMY_GRADE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND A.ARMY_MAJOR = SUB_CODE
           AND MAIN_CODE    = 'H019') AS ARMY_MAJOR
     , CASE WHEN A.ARMY_STRT_DATE != '' AND A.ARMY_STRT_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ARMY_STRT_DATE)
            END AS ARMY_STRT_DATE
     , CASE WHEN A.ARMY_LAST_DATE != '' AND A.ARMY_LAST_DATE != '00000000' THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ARMY_LAST_DATE)
            END AS ARMY_LAST_DATE
     , B.HEIGHT, B.WEIGHT, B.SIGHT_LEFT, B.SIGHT_RIGHT
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.BLOOD_KIND = SUB_CODE
           AND MAIN_CODE    = 'H080') AS BLOOD_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND B.COLOR_YN = SUB_CODE
           AND MAIN_CODE  = 'H081') AS COLOR_YN
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE   = A.COMP_CODE
           AND B.LIVE_KIND = SUB_CODE
           AND MAIN_CODE   = 'H082') AS LIVE_KIND
     , B.GROUND AS GROUND, B.FLOOR_SPACE AS FLOOR_SPACE, B.GARDEN AS GARDEN, B.REAL_PROPERTY AS REAL_PROPERTY
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.LIVE_LEVEL = SUB_CODE
           AND MAIN_CODE    = 'H083') AS LIVE_LEVEL
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE     = A.COMP_CODE
           AND B.AGENCY_KIND = SUB_CODE
           AND MAIN_CODE     = 'H084') AS AGENCY_KIND
     , B.AGENCY_GRADE AS AGENCY_GRADE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE    = A.COMP_CODE
           AND B.HITCH_KIND = SUB_CODE
           AND MAIN_CODE    = 'H085') AS HITCH_KIND
     , B.HITCH_GRADE AS HITCH_GRADE
     , B.SPECIAL_ABILITY AS SPECIAL_ABILITY
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE  = A.COMP_CODE
           AND B.RELIGION = SUB_CODE
           AND MAIN_CODE  = 'H086') AS RELIGION
     , C.IMG_FILE
     , '' AS FAMILY_NAME
     , '' AS REL_CODE
     , '' AS SCHSHIP_CODE
     , '' AS OCCUPATION
     , '' AS COMP_NAME
     , '' AS CARR_STRT_DATE
     , '' AS CARR_END_DATE
     , '' AS POST_NAME
     , '' AS OCPT_NAME
     , '' AS JOB_NAME
     , '' AS QUAL_KIND
     , '' AS QUAL_GRADE
     , '' AS ACQ_DATE
     , '' AS VALI_DATE
     , '' AS QUAL_MACH
     , '' AS QUAL_NUM
     , '' AS SCHOOL_NAME
     , '' AS ENTR_DATE
     , '' AS GRAD_DATE
     , '' AS GRAD_GUBUN
     , '' AS FIRST_SUBJECT
     , '' AS CREDITS
     , '' AS PASS_NO
     , '' AS VISA_NO
     , '' AS VISA_KIND
     , '' AS TERMI_DATE
     , '' AS BIGO
     , '' AS EDU_TITLE
     , '' AS EDU_FR_DATE
     , '' AS EDU_TO_DATE
     , '' AS EDU_GUBUN
     , 0  AS EDU_GRADES
     , 0  AS GRADE
     , '' AS FOREIGN_KIND
     , '' AS EXAM_KIND
     , '' AS GAIN_DATE
     , 0  AS GRADES
     , '' AS CLASS
     , '' AS ANNOUNCE_DATE
     , '' AS ANNOUNCE_CODE
     , '' AS BE_DEPT_NAME
     , '' AS AF_DEPT_NAME
     , '' AS MERITS_YEARS
     , '' AS MERITS_GUBUN
     , '' AS MERITS_CLASS
     , '' AS MERITS_GRADE
     , '' AS SYNTHETIC_EVAL
     , '' AS RECOMMEND1_NAME
     , '' AS RECOMMEND1_RELATION
     , '' AS RECOMMEND1_OFFICE_NAME
     , '' AS RECOMMEND1_CLASS
     , '' AS RECOMMEND1_ADDR
     , '' AS RECOMMEND2_NAME
     , '' AS RECOMMEND2_RELATION
     , '' AS RECOMMEND2_OFFICE_NAME
     , '' AS RECOMMEND2_CLASS
     , '' AS RECOMMEND2_ADDR
     , '' AS INSURANCE_NAME
     , '' AS INSURANCE_NO
     , '' AS INSURANCE_COMPANY
     , 0  AS INSURANCE_FARE
     , '' AS GUARANTEE_PERIOD_FR
     , '' AS GUARANTEE_PERIOD_TO
     , '' AS GUARANTOR1_NAME
     , '' AS GUARANTOR1_RELATION
     , '' AS GUARANTOR1_RES_NO
     , '' AS GUARANTOR1_WORK_ZONE
     , '' AS GUARANTOR1_PERIOD_FR
     , '' AS GUARANTOR1_PERIOD_TO
     , '' AS GUARANTOR2_NAME
     , '' AS GUARANTOR2_RELATION
     , '' AS GUARANTOR2_RES_NO
     , '' AS GUARANTOR2_WORK_ZONE
     , '' AS GUARANTOR2_PERIOD_FR
     , '' AS GUARANTOR2_PERIOD_TO
  FROM HUM100T A LEFT OUTER JOIN HUM710T B
                   ON A.COMP_CODE   = B.COMP_CODE
                  AND A.PERSON_NUMB = B.PERSON_NUMB
                 LEFT OUTER JOIN HUM120T C
                   ON A.COMP_CODE   = C.COMP_CODE
                  AND A.PERSON_NUMB = C.PERSON_NUMB
                 INNER JOIN (SELECT PERSON_NUMB
                                  , POST_CODE POST
                                  , COMP_CODE
                               FROM HUM100T
                              WHERE COMP_CODE =#{S_COMP_CODE}) D
                    ON A.COMP_CODE   = D.COMP_CODE
                   AND A.PERSON_NUMB = D.PERSON_NUMB
WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
  	 	   AND A.DIV_CODE = #{DIV_CODE}
       </if>   
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE_FR)">
       		AND A.DEPT_CODE  &gt;= #{DEPT_CODE_FR}
       </if>
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE_TO)">
       		AND A.DEPT_CODE &lt;=#{DEPT_CODE_TO}
       </if>  
       <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
       		AND A.POST_CODE = #{POST_CODE}
       </if>                          
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
		<if test="PAY_GUBUN == &quot;Y&quot;">
		 	AND A.PAY_GUBUN = '1'
		</if>
		<if test="RETR_YN == &quot;N&quot;">
		 	AND ISNULL(A.RETR_DATE, '00000000') = '00000000'
		</if>
		ORDER BY DEPT_CODE
			,D.POST
			,NAME
			,A.PERSON_NUMB ASC	
	</select>
	
	<select id="ds_sub01" parameterType="Map" resultType="rMap" >	
	/* hum960rkrServiceImpl.ds_sub01  */	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.PERSON_NUMB, C.SUB_CODE, unilite.fnCipherDecrypt(B.REPRE_NUM, '') DESC, B.FAMILY_NAME)) AS ROW_NUM 
	 , B.PERSON_NUMB AS PERSON_NUMB
     , B.FAMILY_NAME AS FAMILY_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H020'
           AND SUB_CODE  = B.REL_CODE) AS REL_CODE
     , unilite.fnCipherDecrypt(B.REPRE_NUM, 'RR') REPRE_NUM 
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H009'
           AND SUB_CODE  = B.SCHSHIP_CODE) AS SCHSHIP_CODE
     , B.OCCUPATION
     , B.COMP_NAME
  FROM HUM100T A INNER JOIN HUM200T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
                 INNER JOIN BSA100T C
                    ON B.COMP_CODE   = C.COMP_CODE
                   AND B.REL_CODE    = C.SUB_CODE 
                   AND C.MAIN_CODE   = 'H020'
 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.PERSON_NUMB, C.SUB_CODE, unilite.fnCipherDecrypt(B.REPRE_NUM, '') DESC, B.FAMILY_NAME
	</select>
	
	<select id="ds_sub02" parameterType="Map" resultType="rMap" >	
	/* hum960rkrServiceImpl.ds_sub02  */	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.PERSON_NUMB, B.CARR_STRT_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.COMP_NAME
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_STRT_DATE) AS CARR_STRT_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.CARR_END_DATE) AS CARR_END_DATE
     , B.POST_NAME
     , B.OCPT_NAME
     , B.JOB_NAME
  FROM HUM100T A INNER JOIN HUM500T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.PERSON_NUMB, B.CARR_STRT_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC
	</select>
			
	<select id="ds_sub03" parameterType="Map" resultType="rMap" >		
	/* hum960rkrServiceImpl.ds_sub03  */	
	SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY  A.PERSON_NUMB , B.ACQ_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
	 , CASE WHEN ISNULL(C.CODE_NAME, '') = ''
	        THEN B.QUAL_KIND
			ELSE C.CODE_NAME
		END AS QUAL_KIND

     , B.QUAL_GRADE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ACQ_DATE) AS ACQ_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
     , B.QUAL_MACH
     , B.QUAL_NUM
  FROM HUM100T A INNER JOIN HUM600T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
				  LEFT JOIN BSA100T C
				    ON A.COMP_CODE   = B.COMP_CODE
				   AND C.MAIN_CODE   = 'H022'
				   AND C.SUB_CODE    = B.QUAL_KIND
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY  A.PERSON_NUMB , B.ACQ_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME ASC
	</select>
	<select id="ds_sub04" parameterType="Map" resultType="rMap" >	
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB   ORDER BY B.GRAD_DATE DESC, B.SCHOOL_NAME)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.SCHOOL_NAME
     , ENTR_DATE = uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ENTR_DATE)
     , GRAD_DATE = uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GRAD_DATE)
     , GRAD_GUBUN = (SELECT C.CODE_NAME
                      FROM BSA100T AS C
                     WHERE C.COMP_CODE = #{S_COMP_CODE}
                       AND C.MAIN_CODE = 'H010'
                       AND C.SUB_CODE  = B.GRAD_GUBUN)
     , FIRST_SUBJECT = (SELECT C.CODE_NAME
                          FROM BSA100T AS C
                         WHERE C.COMP_CODE = #{S_COMP_CODE}
                           AND C.MAIN_CODE = 'H087'
                           AND C.SUB_CODE  = B.FIRST_SUBJECT)
     , B.CREDITS 
  FROM HUM100T A INNER JOIN HUM720T B
                    ON A.COMP_CODE = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.GRAD_DATE DESC, B.SCHOOL_NAME	
	</select>
	<select id="ds_sub05" parameterType="Map" resultType="rMap" >
		SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.TERMI_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 		 , B.PERSON_NUMB
		     , unilite.fnCipherDecrypt(B.PASS_NO, 'P') PASS_NO 
		     , unilite.fnCipherDecrypt(B.VISA_NO, 'V') VISA_NO 
		     , (SELECT CODE_NAME
		          FROM BSA100T
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H088'
		           AND SUB_CODE  = B.VISA_KIND) AS VISA_KIND
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.TERMI_DATE) AS TERMI_DATE
		     , B.BIGO
		  FROM HUM100T A INNER JOIN HUM730T B
		                    ON A.COMP_CODE   = B.COMP_CODE
		                   AND A.PERSON_NUMB = B.PERSON_NUMB
		 WHERE A.COMP_CODE =  #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
		 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
		 ORDER BY B.TERMI_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	
	<select id="ds_sub06" parameterType="Map" resultType="rMap" >
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.EDU_FR_DATE DESC, B.EDU_TITLE)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.EDU_TITLE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_FR_DATE) AS EDU_FR_DATE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EDU_TO_DATE) AS EDU_TO_DATE
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H091'
           AND SUB_CODE = B.EDU_GUBUN) AS EDU_GUBUN
     , B.EDU_GRADES
     , B.GRADE
  FROM HUM100T A INNER JOIN HUM740T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE =  #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.EDU_FR_DATE DESC, B.EDU_TITLE
	</select>
	
	<select id="ds_sub07" parameterType="Map" resultType="rMap" >
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.GAIN_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H092'
           AND SUB_CODE  = B.FOREIGN_KIND) AS FOREIGN_KIND
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H093'
           AND SUB_CODE  = B.EXAM_KIND) AS EXAM_KIND
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, LEFT(B.GAIN_DATE,6)) AS GAIN_DATE
     , B.GRADES
     , B.CLASS
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.VALI_DATE) AS VALI_DATE
  FROM HUM100T A INNER JOIN HUM750T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.GAIN_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC
	</select>
	
	<select id="ds_sub08" parameterType="Map" resultType="rMap" >
SELECT  CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.ANNOUNCE_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     ,  uniLITE.fnGetUserDateComp(B.COMP_CODE, B.ANNOUNCE_DATE) AS ANNOUNCE_DATE
     ,  (SELECT C.CODE_NAME
           FROM BSA100T AS C
          WHERE C.COMP_CODE = #{S_COMP_CODE}
            AND C.MAIN_CODE = 'H094'
            AND C.SUB_CODE  = B.ANNOUNCE_CODE) AS ANNOUNCE_CODE
     ,  B.BE_DEPT_NAME
     ,  B.AF_DEPT_NAME
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H005'
            AND SUB_CODE  = B.POST_CODE) AS POST_CODE
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H006'
            AND SUB_CODE  = B.ABIL_CODE) AS ABIL_CODE
  FROM HUM100T A INNER JOIN HUM760T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.ANNOUNCE_DATE DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	<select id="ds_sub09" parameterType="Map" resultType="rMap" >
SELECT  CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY B.MERITS_YEARS DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     ,  B.MERITS_YEARS
     ,  (SELECT CODE_NAME
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'H095'
            AND SUB_CODE  = B.MERITS_GUBUN) AS MERITS_GUBUN
     ,  B.DEPT_NAME
     ,  B.MERITS_CLASS
     ,  B.MERITS_GRADE
     ,  B.SYNTHETIC_EVAL
  FROM  HUM100T A INNER JOIN HUM770T B
                     ON A.COMP_CODE   = B.COMP_CODE
                    AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY B.MERITS_YEARS DESC, A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	<select id="ds_sub10" parameterType="Map" resultType="rMap" >
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.RECOMMEND1_NAME
     , (SELECT C.CODE_NAME
          FROM BSA100T AS C
         WHERE C.COMP_CODE = #{S_COMP_CODE}
           AND C.MAIN_CODE = 'H020'
           AND C.SUB_CODE  = B.RECOMMEND1_RELATION) AS RECOMMEND1_RELATION
     , B.RECOMMEND1_OFFICE_NAME
     , B.RECOMMEND1_CLASS
     , (ISNULL(B.RECOMMEND1_ADDR,'') + ' ' + ISNULL(B.RECOMMEND1_ADDR_DE,'')) AS RECOMMEND1_ADDR
     , B.RECOMMEND2_NAME
     , (SELECT C.CODE_NAME
          FROM BSA100T AS C
         WHERE C.COMP_CODE = #{S_COMP_CODE}
           AND C.MAIN_CODE = 'H020'
           AND C.SUB_CODE  = B.RECOMMEND2_RELATION) AS RECOMMEND2_RELATION
     , B.RECOMMEND2_OFFICE_NAME
     , B.RECOMMEND2_CLASS
     , (ISNULL(B.RECOMMEND1_ADDR,'') + ' ' + ISNULL(B.RECOMMEND1_ADDR_DE,'')) AS RECOMMEND2_ADDR
  FROM HUM100T A INNER JOIN HUM790T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
	
	
	<select id="ds_sub11" parameterType="Map" resultType="rMap" >
SELECT CONVERT(INT,ROW_NUMBER()  OVER(PARTITION BY B.PERSON_NUMB  ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC)) AS ROW_NUM 
	 , B.PERSON_NUMB
     , B.INSURANCE_NAME
     , B.INSURANCE_NO
     , B.INSURANCE_COMPANY
     , B.INSURANCE_FARE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_FR) AS GUARANTEE_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTEE_PERIOD_TO) AS GUARANTEE_PERIOD_TO
     , B.GUARANTOR1_NAME
     , (SELECT CODE_NAME
          FROM BSA100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'H020'
           AND SUB_CODE = B.GUARANTOR1_RELATION) AS GUARANTOR1_RELATION
     , unilite.fnCipherDecrypt(B.GUARANTOR1_RES_NO, 'RR') GUARANTOR1_RES_NO 
     , B.GUARANTOR1_WORK_ZONE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_FR) AS GUARANTOR1_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR1_PERIOD_TO) AS GUARANTOR1_PERIOD_TO
     , B.GUARANTOR2_NAME
     , GUARANTOR2_RELATION = (SELECT CODE_NAME
                                FROM BSA100T
                               WHERE COMP_CODE = #{S_COMP_CODE}
                                 AND MAIN_CODE = 'H020'
                                 AND SUB_CODE  = B.GUARANTOR2_RELATION)
     , unilite.fnCipherDecrypt(B.GUARANTOR2_RES_NO, 'RR') GUARANTOR2_RES_NO 
     , B.GUARANTOR2_WORK_ZONE
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_FR) AS GUARANTOR2_PERIOD_FR
     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.GUARANTOR2_PERIOD_TO) AS GUARANTOR2_PERIOD_TO
  FROM HUM100T A INNER JOIN HUM800T B
                    ON A.COMP_CODE   = B.COMP_CODE
                   AND A.PERSON_NUMB = B.PERSON_NUMB
 WHERE A.COMP_CODE = #{S_COMP_CODE}
 		   AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
 	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			AND A.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
 ORDER BY A.DEPT_CODE, A.POST_CODE,  A.NAME , A.PERSON_NUMB ASC		
	</select>
</mapper>