<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="had410ukrServiceImpl">
	<select id="had410ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
		--had410ukr.Chad410ukr[fnHad410QStd] Query01
	    /**********************************************************************************************************************
	     의료비명세 조회
	    **********************************************************************************************************************/
	    BEGIN
	        DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
	                      , @YEAR_YYYY          NVARCHAR(04)                -- (필수) 정산년도
	                      , @PERSON_NUMB        NVARCHAR(10)                -- (필수) 사번
	                      , @USER_ID            NVARCHAR(100)                -- (필수) 사용자ID

	        SET NOCOUNT ON
	        SET ARITHABORT ON


	    --  1. 변수 값 할당 -------------------------------------------------------------------------------------------------
	        SET @COMP_CODE          = #{S_COMP_CODE}
	        SET @YEAR_YYYY          = #{YEAR_YYYY}
	        SET @PERSON_NUMB        = #{PERSON_NUMB}
	        SET @USER_ID            = #{S_USER_ID}

	    --  2. 데이터 조회 --------------------------------------------------------------------------------------------------
	        SELECT
	               A.SEQ_NUM
	             , A.YEAR_YYYY
	             , A.PERSON_NUMB
	             , C1.NAME
	             , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')                AS REPRE_NUM
	             , C2.FAMILY_NAME
	             , A.MED_CODE
	             , A.MED_PROOF_CODE
	             , A.TAX_GU
	             , A.DEFAULT_DED_YN
	             , C2.DEFORM_DED_YN
	             , ISNULL(A.SEND_NUM  , 0)                                  AS SEND_NUM
	             , ISNULL(A.SEND_USE_I, 0)                                  AS SEND_USE_I
	             , CASE WHEN ISNULL(A.MED_COMPANY_NUM, '') = '' THEN ''
	                    ELSE SUBSTRING(A.MED_COMPANY_NUM, 1, 3) + '-' +
	                         SUBSTRING(A.MED_COMPANY_NUM, 4, 2) + '-' +
	                         SUBSTRING(A.MED_COMPANY_NUM, 6, 5)
	               END                                                      AS MED_COMPANY_NUM
	             , ISNULL(A.MED_RELATION    , '')                           AS MED_RELATION
	             , ISNULL(A.IN_FORE_SUPP    , '1')                          AS IN_FORE_SUPP
	             , ISNULL(A.TAX_GU          , '')                           AS TAX_GU_ORGIN
	             , ISNULL(A.MED_COMPANY_NAME, '')                           AS MED_COMPANY_NAME
	        FROM               HAD410T  A  WITH (NOLOCK)
	               INNER JOIN HUM100T  C1 WITH (NOLOCK) ON C1.COMP_CODE     = A.COMP_CODE
	                                                  						AND C1.PERSON_NUMB   = A.PERSON_NUMB
			        LEFT  JOIN HAD430T  C2 WITH (NOLOCK) ON C2.COMP_CODE     = A.COMP_CODE
																			AND C2.YEAR_YYYY     = A.YEAR_YYYY
																			AND C2.PERSON_NUMB   = A.PERSON_NUMB
																			AND unilite.fnCipherDecrypt(C2.REPRE_NUM, 'A')     = unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')
																			AND C2.SEQ_NUM       = '1'
	        WHERE  A.COMP_CODE      = @COMP_CODE
	        AND    A.YEAR_YYYY      = @YEAR_YYYY
	        AND    A.PERSON_NUMB    = @PERSON_NUMB
	        ORDER  BY A.SEQ_NUM

	        SET NOCOUNT OFF
	        SET ARITHABORT OFF
	    END

	</select>
	<select id="had410ukrServiceImpl.selectCheckFamily" parameterType="Map" resultType="rMap">
		--had410ukr.Chad410ukr[fnHad410Save] Query3-01
        SELECT count(*) as CNT
          FROM   HAD430T  A  WITH (NOLOCK)
         WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	       AND   A.YEAR_YYYY      = #{YEAR_YYYY}
	       AND   A.PERSON_NUMB    = #{PERSON_NUMB}
	</select>
	<select id="had410ukrServiceImpl.selectCheck200" parameterType="Map" resultType="rMap">
	--had410ukr.Chad410ukr[fnHad410QPay] Query01
    SELECT MED_DED_STD, MED_DED_LMT, DEFORM_MED_RATE, FOREIGN_LMT_RATE
         , TAX_EXEMPTION_LMT
      FROM HAD200T  WITH (NOLOCK)
     WHERE COMP_CODE    =  #{S_COMP_CODE}
       AND TAX_YEAR     =  #{YEAR_YYYY}
       AND COMPANY_CODE =  '2'
	</select>
	<select id="had410ukrServiceImpl.selectPay" parameterType="Map" resultType="rMap">
		--UHad01Krv.CHad600UKr[fnHad600B] Query03
	    SELECT A.PERSON_NUMB                      , A.YEAR_YYYY                      , A.TAX_CODE
	         , A.PAY_CODE                         , A.DEPT_CODE                      , A.DEPT_NAME
	         , A.PAY_GRADE1                       , A.PAY_GRADE2                     , A.DIV_CODE
	         , A.PAY_PROV_FLAG                    , A.SPOUSE                         , A.WOMAN
	         , A.SUPP_NUM                         , A.RETR_DATE                      , A.DEFORM_NUM
	         , A.AGED_NUM                         , A.JOIN_DATE                      , A.BRING_CHILD_NUM
	         , A.OLD_PAY_TOTAL                    , A.OLD_BONUS_TOTAL                , A.OLD_MEDICAL_INSUR
	         , A.OLD_SAVE_TAX                     , A.OLD_IN_TAX                     , OLD_SP_TAX
	         , OLD_LOCAL_TAX                      , OLD_TAX_EXEMPTION1               , OLD_TAX_EXEMPTION2
	         , OLD_TAX_EXEMPTION3                 , OLD_TAX_EXEMPTION4               , OLD_TAX_EXEMPTION5
	         , OLD_TAX_EXEMPTION6                 , NOW_PAY_TOT
	         , PAY_TOTAL                          , BONUS_TOTAL                      , TAX_EXEMPTION1
	         , TAX_EXEMPTION2                     , TAX_EXEMPTION3                   , TAX_EXEMPTION4
	         , TAX_EXEMPTION5                     , TAX_EXEMPTION6
	         , IN_TAX                             , LOCAL_TAX                        , MEDICAL_INSUR
	         , HIRE_INSUR                         , ETC_INCOME                       , OUTSIDE_INCOME
	         , EDUC_SUPP                          , MED_SUPP                         , ETC_INSUR
	         , ANU_INSUR                          , MED_TOTAL                        , DEFORM_MED
	         , PER_EDUC                           , A.UNIV_EDUC                      , STUD_EDUC
	         , KIND_EDUC                          , A.UNIV_EDUC_NUM                  , A.STUD_EDUC_NUM
	         , A.KIND_EDU_NUM                     , LEGAL_GIFT                       , ASS_GIFT
	         , PRIV_GIFT                          , HOUS_AMOUNT                      , PRIV_PENS
	         , SKILL_DED                          , SAVE_TAX_DED                     , HOUS_INTER
	         , FORE_TAX                           , INCOME_REDU                      , TAXES_REDU
	         , INVESTMENT                         , CARD_USE                         , DEBIT_CARD_USE
	         , HOUS_AMOUNT_INTER                  , NAP_PAY_TOTAL                    , NAP_BONUS_TOTAL
	         , NAP_IN_TAX                         , NAP_LOCAL_TAX                    , NAP_TAX_DED
	         , NAP_SP_TAX                         , OLD_ADD_BONUS                    , A.DEFORM_INSUR_I
	         , A.PENS_I                           , A.STOCK_I                        , A.LONG_STOCK_I
	         , A.OLD_LONG_STOCK_I                 , E_SUPP_TOTAL                     , E_NON_TAX_AMOUNT_I
	         , E_HIRE_INSUR                       , ADD_BONUS                        , A.DEFORM_EDUC_I
	         , A.DEFORM_EDUC_NUM                  , A.HOUS_AMOUNT_TOT_I              , A.INVESTMENT_I2
	         , A.STAFF_STOCK_I                    , A.FOREIGN_ADD_AMT                , A.HOUS_BU_AMT
	         , A.HOUS_WORK_AMT                    , A.HOUS_LONG_AMT                  , A.AGED_NUM70
	         , A.WEDDING_SUPP_I                   , A.DEATH_SUPP_I                   , A.MOVE_SUPP_I
	         , A.MY_MED_DED_I                     , A.POLICY_DED_I                   , A.POLICY_DED_I2
	         , A.POLICY_INDED                     , A.TAX_AMOUNT_I                   , A.CASH_USE
	         , ISNULL(M1.FORE_SINGLE_YN,'N') AS FORE_SINGLE_YN                       , ISNULL(uniLITE.fnCipherDecrypt(M2.FOREIGN_NUM,''),'') AS FOREIGN_NUM
	         , ISNULL(M1.STAFF_GIFT_I,0) AS STAFF_GIFT_I                             , ISNULL(M2.CHILD_20_NUM, 0) AS CHILD_20_NUM
	         , ISNULL(M1.RETIRE_PENS_I, 0) AS RETIRE_PENS_I                          , ISNULL(A.BUSI_SHARE_I, 0) AS BUSI_SHARE_I
	         , ISNULL(A.ADD_HIRE_INSUR_I, 0) AS ADD_HIRE_INSUR_I                     , ISNULL(A.ADD_MED_I, 0) AS ADD_MED_I
	         , ISNULL(A.ADD_ANU_I, 0) AS ADD_ANU_I
	         , ISNULL(A.STOCK_TAX_PROFIT_I, 0) AS STOCK_TAX_PROFIT_I                 , ISNULL(A.STOCK_NON_TAX_PROFIT_I, 0) AS STOCK_NON_TAX_PROFIT_I
	         , ISNULL(A.OLD_STOCK_BUY_PROFIT_I, 0) AS OLD_STOCK_BUY_PROFIT_I         , ISNULL(M2.CHILD_20_NUM, 0) CHILD_20_NUM
	         , ISNULL(A.PAY_TOTAL_I, 0) AS PAY_TOTAL_I                               , ISNULL(M2.LIVE_GUBUN, '1') LIVE_GUBUN
	      FROM HAD600TV A
	                    LEFT OUTER JOIN HAD400T  M1
	                                 ON A.COMP_CODE   = M1.COMP_CODE
	                                AND A.PERSON_NUMB = M1.PERSON_NUMB
	                                AND A.YEAR_YYYY   = M1.YEAR_YYYY
	                    LEFT OUTER JOIN HUM100T  M2
	                                 ON A.COMP_CODE   = M2.COMP_CODE
	                                AND A.PERSON_NUMB = M2.PERSON_NUMB
	     WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	       AND   A.YEAR_YYYY      = #{YEAR_YYYY}
	       AND   A.PERSON_NUMB    = #{PERSON_NUMB}
	</select>
	<insert id="had410ukrServiceImpl.insert" parameterType="Map">
		INSERT INTO HAD410T
	           (COMP_CODE
	           ,SEQ_NUM
	           ,YEAR_YYYY
	           ,PERSON_NUMB
	           ,MED_CODE
	           ,MED_RELATION
	           ,IN_FORE_SUPP
	           ,TAX_GU
	           ,DEFAULT_DED_YN
	           ,MED_COMPANY_NUM
	           ,SEND_NUM
	           ,SEND_USE_I
	           ,MED_PROOF_CODE
	           ,MED_COMPANY_NAME
	           ,INSERT_DB_USER
	           ,INSERT_DB_TIME
	           ,UPDATE_DB_USER
	           ,UPDATE_DB_TIME
	           ,REPRE_NUM)
	     VALUES
	           (#{S_COMP_CODE}
	           ,#{SEQ_NUM}
	           ,#{YEAR_YYYY}
	           ,#{PERSON_NUMB}
	           ,#{MED_CODE}
	           ,#{MED_RELATION}
	           ,#{IN_FORE_SUPP}
	           ,#{TAX_GU}
	           ,#{DEFAULT_DED_YN}
	           ,REPLACE(#{MED_COMPANY_NUM},'-','')
	           ,#{SEND_NUM}
	           ,#{SEND_USE_I}
	           ,#{MED_PROOF_CODE}
	           ,#{MED_COMPANY_NAME}
	           ,#{S_USER_ID}
			   ,GETDATE()
			   ,#{S_USER_ID}
			   ,GETDATE()
	           ,unilite.fnCipherEncrypt(REPLACE(#{REPRE_NUM},'-',''), 'A')
            )
	</insert>
	<update id="had410ukrServiceImpl.update" parameterType="Map">
		UPDATE HAD410T
        SET
            MED_CODE        = #{MED_CODE}
           ,MED_RELATION    = #{MED_RELATION}
           ,IN_FORE_SUPP    = #{IN_FORE_SUPP}
           ,TAX_GU          = #{TAX_GU}
           ,DEFAULT_DED_YN  = #{DEFAULT_DED_YN}
           ,MED_COMPANY_NUM = REPLACE(#{MED_COMPANY_NUM} ,'-','')
           ,SEND_NUM        = #{SEND_NUM}
           ,SEND_USE_I      = #{SEND_USE_I}
           ,MED_PROOF_CODE  = #{MED_PROOF_CODE}
           ,MED_COMPANY_NAME= #{MED_COMPANY_NAME}
           ,REPRE_NUM       = unilite.fnCipherEncrypt(REPLACE(#{REPRE_NUM},'-',''), 'A')
           ,UPDATE_DB_USER          = #{S_USER_ID}
           ,UPDATE_DB_TIME          = GETDATE()
        WHERE   COMP_CODE      = #{S_COMP_CODE}
	       AND   YEAR_YYYY      = #{YEAR_YYYY}
	       AND   PERSON_NUMB    = #{PERSON_NUMB}
	       AND   SEQ_NUM         = #{SEQ_NUM}
	</update>
	<update id="had410ukrServiceImpl.delete" parameterType="Map">
		DELETE FROM  HAD410T
         WHERE   COMP_CODE      = #{S_COMP_CODE}
	       AND   YEAR_YYYY      = #{YEAR_YYYY}
	       AND   PERSON_NUMB    = #{PERSON_NUMB}
	       AND   SEQ_NUM         = #{SEQ_NUM}
	</update>
	<update id="had410ukrServiceImpl.update400" parameterType="Map">
		--had410ukr.Chad410ukr[fnHad410Save] Query4
		UPDATE A
		SET    A.MED_TOTAL_I        = ISNULL(B.MED_TOTAL_I       , 0.0)     -- 일반의료비
		     , A.SENIOR_MED_I       = ISNULL(B.SENIOR_MED_I      , 0.0)     -- 경로의료비
		     , A.DEFORM_MED_I       = ISNULL(B.DEFORM_MED_I      , 0.0)     -- 장애인의료비
		     , A.MY_MED_DED_I       = ISNULL(B.MY_MED_DED_I      , 0.0)     -- 본인의료비
		     , A.SURGERY_MED_I      = ISNULL(B.SURGERY_MED_I     , 0.0)     -- 난임시술비
		     , A.SERIOUS_SICK_MED_I = ISNULL(B.SERIOUS_SICK_MED_I, 0.0)     -- 건강보험산정특례자의료비
		FROM              HAD400T  A  WITH (NOLOCK)
		       LEFT  JOIN (
		                  SELECT S.COMP_CODE, S.YEAR_YYYY, S.PERSON_NUMB
		                       , SUM(S.MED_TOTAL_I)        AS MED_TOTAL_I
		                       , SUM(S.SENIOR_MED_I)       AS SENIOR_MED_I
		                       , SUM(S.DEFORM_MED_I)       AS DEFORM_MED_I
		                       , SUM(S.MY_MED_DED_I)       AS MY_MED_DED_I
		                       , SUM(S.SURGERY_MED_I)      AS SURGERY_MED_I
		                       , SUM(S.SERIOUS_SICK_MED_I) AS SERIOUS_SICK_MED_I
		                    FROM (
				                  SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB
				                       , SUM(CASE WHEN S1.MED_CODE = 'M' THEN S1.SEND_USE_I ELSE 0.0 END)   AS MED_TOTAL_I
				                       , SUM(CASE WHEN S1.MED_CODE = 'L' THEN S1.SEND_USE_I ELSE 0.0 END)   AS SENIOR_MED_I
				                       , SUM(CASE WHEN S1.MED_CODE = 'D' THEN S1.SEND_USE_I ELSE 0.0 END)   AS DEFORM_MED_I
				                       , SUM(CASE WHEN S1.MED_CODE = 'S' THEN S1.SEND_USE_I ELSE 0.0 END)   AS MY_MED_DED_I
				                       , SUM(CASE WHEN S1.MED_CODE = 'P' THEN S1.SEND_USE_I ELSE 0.0 END)   AS SURGERY_MED_I
				                       , SUM(CASE WHEN S1.MED_CODE = 'N' THEN S1.SEND_USE_I ELSE 0.0 END)   AS SERIOUS_SICK_MED_I
				                  FROM   HAD410T  S1 WITH (NOLOCK)
				                  WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
				                  AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
				                  AND    S1.PERSON_NUMB = #{PERSON_NUMB}
				                  GROUP  BY
				                         S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB

								  UNION ALL

		                          --    안경구입비 : 한도 적용하기위해 별도 처리
		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'R' THEN CASE WHEN S2.REL_CODE = '0'         THEN 0.0
		                                                                                     WHEN S2.DEFORM_DED_YN = 'Y'    THEN 0.0
		                                                                                     WHEN SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 7, 1) IN ('1','2')   --  1953년 12월 31일 이전 출생자
		                                                                                      AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 1, 2) &lt; '53'         THEN 0.0
		                                                                                     ELSE S1.SEND_USE_I END
		                                                    ELSE 0.0 END) &gt; 500000 THEN 500000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'R' THEN CASE WHEN S2.REL_CODE = '0'         THEN 0.0
		                                                                                     WHEN S2.DEFORM_DED_YN = 'Y'    THEN 0.0
		                                                                                     WHEN SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 7, 1) IN ('1','2')   --  1953년 12월 31일 이전 출생자
		                                                                                      AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 1, 2) &lt;'53'         THEN 0.0
		                                                                                     ELSE S1.SEND_USE_I END
		                                                    ELSE 0.0 END)
		                                 END    AS MED_TOTAL_I
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'R' AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 7, 1) IN ('1','2')  --  1953년 12월 31일 이전 출생자
		                                                                           AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 1, 2) &lt; '53'        THEN S1.SEND_USE_I ELSE 0.0 END) > 500000 THEN 500000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'R' AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 7, 1) IN ('1','2')  --  1953년 12월 31일 이전 출생자
		                                                                           AND SUBSTRING(unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), 1, 2) &lt; '53'        THEN S1.SEND_USE_I ELSE 0.0 END)
		                                 END    AS SENIOR_MED_I
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'R' AND S2.DEFORM_DED_YN = 'Y'	THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 500000 THEN 500000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'R' AND S2.DEFORM_DED_YN = 'Y'	THEN S1.SEND_USE_I ELSE 0.0 END)
		                                 END    AS DEFORM_MED_I
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'R' AND S2.REL_CODE = '0'		THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 500000 THEN 500000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'R' AND S2.REL_CODE = '0'		THEN S1.SEND_USE_I ELSE 0.0 END)
		                                 END    AS MY_MED_DED_I
		                               , 0.0    AS SURGERY_MED_I
		                               , 0.0    AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                                 INNER JOIN     HAD430T S2 WITH (NOLOCK)
		                                             ON S1.COMP_CODE    = S2.COMP_CODE
		                                            AND S1.YEAR_YYYY    = S2.YEAR_YYYY
		                                            AND S1.PERSON_NUMB  = S2.PERSON_NUMB
		                                            AND S1.REPRE_NUM    = S2.REPRE_NUM
		                                            AND S2.SEQ_NUM      = '1'
				                  WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
				                  AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
				                  AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, S2.REPRE_NUM
		                         ) S
		                   GROUP BY S.COMP_CODE, S.YEAR_YYYY, S.PERSON_NUMB
		                  ) B                      ON B.COMP_CODE       = A.COMP_CODE
		                                          AND B.YEAR_YYYY       = A.YEAR_YYYY
		                                          AND B.PERSON_NUMB     = A.PERSON_NUMB
		 WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	       AND   A.YEAR_YYYY      = #{YEAR_YYYY}
	       AND   A.PERSON_NUMB    = #{PERSON_NUMB}
	</update>
	<update id="had410ukrServiceImpl.update430" parameterType="Map">
		--had410ukr.Chad410ukr[fnHad410Save] Query5
	    UPDATE A
	    SET    A.MED_USE_I          = ISNULL(B.MED_USE_I     , 0.0)         -- 의료비
	         , A.SURGERY_MED_I      = ISNULL(B.SURGERY_MED_I , 0.0)         -- 난임시술비
	         , A.SERIOUS_SICK_MED_I = ISNULL(B.SERIOUS_SICK_MED_I , 0.0)    -- 건강보험산정특례자의료비
	    FROM              HAD430T  A  WITH (NOLOCK)
	           LEFT  JOIN (
		                  SELECT S.COMP_CODE, S.YEAR_YYYY, S.PERSON_NUMB, S.REPRE_NUM, S.MED_RELATION, S.TAX_GU
		                       , SUM(CASE WHEN S.MED_USE_I &lt; 0 THEN 0 ELSE S.MED_USE_I END) AS MED_USE_I
		                       , SUM(S.SURGERY_MED_I)                                       AS SURGERY_MED_I
		                       , SUM(S.SERIOUS_SICK_MED_I)                                  AS SERIOUS_SICK_MED_I
		                    FROM (
		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
		                               , SUM(CASE WHEN S1.MED_CODE NOT IN ('P','N','D','R','B') THEN S1.SEND_USE_I ELSE 0.0 END)   AS MED_USE_I
		                               , SUM(CASE WHEN S1.MED_CODE     IN ('P')                 THEN S1.SEND_USE_I ELSE 0.0 END)   AS SURGERY_MED_I
		                               , SUM(CASE WHEN S1.MED_CODE     IN ('N','D')             THEN S1.SEND_USE_I ELSE 0.0 END)   AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                          WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                          AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                          AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU

		                          UNION ALL

		                          --    안경구입비 : 한도 적용하기위해 별도 처리
		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'R'  THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 500000 THEN 500000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'R'  THEN S1.SEND_USE_I ELSE 0.0 END)
		                                 END  AS MED_USE_I
		                               , 0.0  AS SURGERY_MED_I
		                               , 0.0  AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                          WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                          AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                          AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          AND    S1.TAX_GU      = N'1'
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU

		                          UNION ALL

		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU  
									    ,CASE WHEN SUM(CASE WHEN  S1.MED_CODE = 'R' THEN ISNULL(S1.SEND_USE_I,0) ELSE 0 END) &gt; ISNULL(S2.MED_USE_I, 500000) THEN ISNULL(S2.MED_USE_I, 500000)                        
											  ELSE SUM(CASE WHEN (S1.MED_CODE) = 'R' THEN ISNULL(S1.SEND_USE_I,0) ELSE 0 END)
										 END  AS MED_USE_I
		                               , 0.0  AS SURGERY_MED_I
		                               , 0.0  AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                                 LEFT JOIN  (   SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
		                                                     , CASE WHEN          SUM(CASE WHEN S1.MED_CODE = 'R'    THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 500000 THEN 0
		                                                            ELSE 500000 - SUM(CASE WHEN S1.MED_CODE = 'R'    THEN S1.SEND_USE_I ELSE 0.0 END)
		                                                       END  AS MED_USE_I
		                                                FROM   HAD410T  S1 WITH (NOLOCK)
		                                                WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                                                AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                                                AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                                                AND    S1.TAX_GU      = N'1'
		                                                GROUP  BY
		                                                       S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU    ) S2
		                                             ON S1.COMP_CODE    = S2.COMP_CODE
		                                            AND S1.YEAR_YYYY    = S2.YEAR_YYYY
		                                            AND S1.PERSON_NUMB  = S2.PERSON_NUMB
		                                            AND unilite.fnCipherDecrypt(S1.REPRE_NUM, '')   = S2.REPRE_NUM
		                          WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                          AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                          AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          AND    S1.TAX_GU      = N'2'
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU,  ISNULL(S2.MED_USE_I, 500000)

		                          UNION ALL

		                          --    산후조리비 : 한도 적용하기위해 별도 처리
		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
		                               , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'B'  THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 2000000 THEN 2000000
		                                      ELSE SUM(CASE WHEN S1.MED_CODE = 'B'  THEN S1.SEND_USE_I ELSE 0.0 END)
		                                 END  AS MED_USE_I
		                               , 0.0  AS SURGERY_MED_I
		                               , 0.0  AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                          WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                          AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                          AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          AND    S1.TAX_GU      = N'1'
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU

		                          UNION ALL

		                          SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
									   , CASE WHEN SUM(CASE WHEN S1.MED_CODE = 'B' THEN ISNULL(S1.SEND_USE_I,0) ELSE 0 END) &gt; ISNULL(S2.MED_USE_I, 2000000) THEN ISNULL(S2.MED_USE_I, 2000000)                             
											  ELSE SUM(CASE WHEN S1.MED_CODE = 'B' THEN ISNULL(S1.SEND_USE_I,0) ELSE 0 END)
										 END  AS MED_USE_I
		                               , 0.0  AS SURGERY_MED_I
		                               , 0.0  AS SERIOUS_SICK_MED_I
		                          FROM   HAD410T  S1 WITH (NOLOCK)
		                                 LEFT JOIN  (   SELECT S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, '') AS REPRE_NUM, S1.MED_RELATION, S1.TAX_GU
		                                                     , CASE WHEN           SUM(CASE WHEN S1.MED_CODE = 'B'    THEN S1.SEND_USE_I ELSE 0.0 END) &gt; 2000000 THEN 0
		                                                            ELSE 2000000 - SUM(CASE WHEN S1.MED_CODE = 'B'    THEN S1.SEND_USE_I ELSE 0.0 END)
		                                                       END  AS MED_USE_I
		                                                FROM   HAD410T  S1 WITH (NOLOCK)
		                                                WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                                                AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                                                AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                                                AND    S1.TAX_GU      = N'1'
		                                                GROUP  BY
		                                                       S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU    ) S2
		                                             ON S1.COMP_CODE    = S2.COMP_CODE
		                                            AND S1.YEAR_YYYY    = S2.YEAR_YYYY
		                                            AND S1.PERSON_NUMB  = S2.PERSON_NUMB
		                                            AND unilite.fnCipherDecrypt(S1.REPRE_NUM, '')   = S2.REPRE_NUM
		                          WHERE  S1.COMP_CODE   = #{S_COMP_CODE}
		                          AND    S1.YEAR_YYYY   = #{YEAR_YYYY}
		                          AND    S1.PERSON_NUMB = #{PERSON_NUMB}
		                          AND    S1.TAX_GU      = N'2'
		                          GROUP  BY
		                                 S1.COMP_CODE, S1.YEAR_YYYY, S1.PERSON_NUMB, unilite.fnCipherDecrypt(S1.REPRE_NUM, ''), S1.MED_RELATION, S1.TAX_GU, ISNULL(S2.MED_USE_I, 2000000)
		                         ) S
		                   GROUP BY S.COMP_CODE, S.YEAR_YYYY, S.PERSON_NUMB, S.REPRE_NUM, S.MED_RELATION, S.TAX_GU
	                      ) B                      ON B.COMP_CODE       = A.COMP_CODE
	                                              AND B.YEAR_YYYY       = A.YEAR_YYYY
	                                              AND B.PERSON_NUMB     = A.PERSON_NUMB
	                                              AND B.REPRE_NUM       = REPLACE(unilite.fnCipherDecrypt(A.REPRE_NUM, ''),'-','')
	                                              AND B.MED_RELATION    = A.REL_CODE
	                                              AND B.TAX_GU          = A.SEQ_NUM
	   	 WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	       AND   A.YEAR_YYYY      = #{YEAR_YYYY}
	       AND   A.PERSON_NUMB    = #{PERSON_NUMB}
	</update>
</mapper>