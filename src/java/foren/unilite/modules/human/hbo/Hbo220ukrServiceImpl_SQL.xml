<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hbo220ukrServiceImpl">

	<select id="hbo220ukrServiceImpl.selectList1" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.selectList1*/
		SELECT uniLITE.fnGetUserDateComp(HPA.COMP_CODE, LEFT(HPA.PAY_YYYYMM,6)) PAY_YYYYMM
             , CAST(HPA.SUPP_TYPE AS VARCHAR(02)) SUPP_TYPE
             , HPA.PERSON_NUMB
             , CAST(HPA.WAGES_CODE AS VARCHAR(03)) AS WAGES_CODE
             , HBS.WAGES_NAME AS WAGES_NAME
             , CAST(HPA.AMOUNT_I AS NUMERIC(18,4)) AMOUNT_I
             , HPA.COMP_CODE
             , HPA.UPDATE_DB_USER
             , HPA.UPDATE_DB_TIME
          FROM 		HPA300T HPA
         INNER JOIN HBS300T HBS
                 ON HBS.COMP_CODE  = HPA.COMP_CODE
                AND HBS.WAGES_CODE = HPA.WAGES_CODE
                AND HBS.CODE_TYPE  = '1'
         WHERE 		HPA.COMP_CODE = #{S_COMP_CODE}
           AND 		HPA.PAY_YYYYMM = #{PAY_YYYYMM}
         <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
           AND		HPA.SUPP_TYPE = #{SUPP_TYPE}
         </if>
           AND		HPA.PERSON_NUMB = #{PERSON_NUMB}  
         ORDER BY HBS.SORT_SEQ
	</select>
	
	<select id="hbo220ukrServiceImpl.selectList1_1" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.selectList1_1 */
		SELECT uniLITE.fnGetUserDateComp(COMP_CODE, Left(#{PAY_YYYYMM}, 6)) PAY_YYYYMM
             , #{SUPP_TYPE} AS SUPP_TYPE
             , #{PERSON_NUMB} AS PERSON_NUMB
             , WAGES_CODE
             , WAGES_NAME
             , 0 AS AMOUNT_I
             , COMP_CODE
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
          FROM HBS300T 
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND USE_YN = 'Y' 
         ORDER BY SORT_SEQ
	</select>
	
	<select id="hbo220ukrServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.selectList2*/
		SELECT 'Y'			AS DATA_FLAG
			 , HPA.PAY_YYYYMM AS PAY_YYYYMM
             , CAST(HPA.SUPP_TYPE AS VARCHAR(02)) AS SUPP_TYPE
             , HPA.PERSON_NUMB
             , CAST(HPA.DED_CODE AS VARCHAR(03)) DED_CODE
             , B1.CODE_NAME AS WAGES_NAME
             , CAST(HPA.DED_AMOUNT_I AS NUMERIC(18,4)) DED_AMOUNT_I
             , HPA.COMP_CODE
             , HPA.UPDATE_DB_USER
             , HPA.UPDATE_DB_TIME
          FROM 		HPA400T HPA
         INNER JOIN BSA100T B1
                 ON B1.COMP_CODE = HPA.COMP_CODE
                AND B1.MAIN_CODE = 'H034'
                AND B1.SUB_CODE  = HPA.DED_CODE
         WHERE 		HPA.COMP_CODE  = #{S_COMP_CODE}
           AND 		HPA.PAY_YYYYMM = #{PAY_YYYYMM}
       <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">		
		   AND		HPA.SUPP_TYPE = #{SUPP_TYPE}
       </if>
		   AND 		HPA.PERSON_NUMB = #{PERSON_NUMB}
		ORDER BY 	B1.REF_CODE2	
	</select>
	
	<select id="hbo220ukrServiceImpl.selectList2_1" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.selectList2_1 */
		SELECT 'N'			AS DATA_FLAG
			 , #{PAY_YYYYMM} AS PAY_YYYYMM
	         , #{SUPP_TYPE} AS SUPP_TYPE
	         , #{PERSON_NUMB} AS PERSON_NUMB
	         , B.SUB_CODE AS DED_CODE
	         , B.CODE_NAME AS WAGES_NAME
	         , '0.0000' AS DED_AMOUNT_I
	         , B.COMP_CODE
	         , B.UPDATE_DB_USER
	         , B.UPDATE_DB_TIME
	      FROM BSA100T B
	     WHERE COMP_CODE = #{S_COMP_CODE}
	       AND SUB_CODE &lt;&gt; '$'
	       AND B.MAIN_CODE = 'H034'
	       AND B.USE_YN = 'Y'
	  ORDER BY B.REF_CODE2  
	</select>
	
	<select id="hbo220ukrServiceImpl.selectList3" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.selectList3*/
		SELECT CAST(A.PAY_YYYYMM + '01' AS VARCHAR(08))       AS PAY_YYYYMM
	         , CAST(A.SUPP_TYPE AS VARCHAR(02))               AS SUPP_TYPE
	         , A.PERSON_NUMB
	         , B.NAME
	         , CAST(A.DEPT_CODE 					AS VARCHAR(08))				AS DEPT_CODE
	         , CAST(A.DEPT_NAME 					AS VARCHAR(30))				AS DEPT_NAME
	         , CAST(ISNULL(A.ABIL_CODE, '') 		AS VARCHAR(02))				AS ABIL_CODE
	         , CAST(A.POST_CODE 					AS VARCHAR(02))				AS POST_CODE
	         , CAST(A.PAY_CODE 						AS VARCHAR(01))				AS PAY_CODE
	         , CAST(A.TAX_CODE 						AS VARCHAR(01))				AS TAX_CODE
	         , CAST(A.EXCEPT_TYPE 					AS VARCHAR(01))             AS EXCEPT_TYPE
	         , CAST(A.EMPLOY_TYPE 					AS VARCHAR(02))             AS EMPLOY_TYPE
	         , CAST(A.SUPP_DATE 					AS VARCHAR(08))				AS SUPP_DATE
	         , CAST(A.PAY_PROV_FLAG 				AS VARCHAR(01))				AS PAY_PROV_FLAG
	         , CAST(ISNULL(A.OT_KIND, '') 			AS VARCHAR(04))				AS OT_KIND
	         , CAST(ISNULL(A.BONUS_KIND, '')  		AS VARCHAR(04))				AS BONUS_KIND
	         , CAST(ISNULL(A.COM_DAY_WAGES, 0) 		AS NUMERIC(18,4))			AS COM_DAY_WAGES
	         , CAST(ISNULL(A.LONG_MONTH, 0) 		AS NUMERIC(6,0))            AS LONG_MONTH
	         , CAST(ISNULL(A.SPOUSE, '') 			AS VARCHAR(01))             AS SPOUSE
	         , CAST(ISNULL(A.WOMAN, '')  			AS VARCHAR(01))             AS WOMAN
	         , CAST(ISNULL(A.SUPP_NUM, 0) 			AS NUMERIC(2,0))            AS SUPP_NUM
	         , CAST(ISNULL(A.DEFORM_NUM,0) 			AS NUMERIC(2,0))            AS DEFORM_NUM
	         , CAST(ISNULL(A.AGED_NUM,0) 			AS NUMERIC(2,0))            AS AGED_NUM
	         , ISNULL(CAST(A.MED_AVG_I 				AS NUMERIC(18,0)), 0)		AS MED_AVG_I
	         , ISNULL(CAST(A.ANU_BASE_I 			AS NUMERIC(18,0)), 0)		AS ANU_BASE_I
	         , CAST(ISNULL(A.BONUS_STD_I, 0) 		AS NUMERIC(18,4))           AS BONUS_STD_I
	         , CAST(ISNULL(A.BONUS_RATE, 0) 		AS NUMERIC(7,3))            AS BONUS_RATE
	         , CAST(ISNULL(A.INCE_WAGES_RATE, 0) 	AS NUMERIC(7,3))        	AS INCE_WAGES_RATE
	         , CAST(ISNULL(A.PLUS_RATE, 0) 			AS NUMERIC(7,3))            AS PLUS_RATE
	         , CAST(ISNULL(A.MINUS_RATE, 0) 		AS NUMERIC(7,3))            AS MINUS_RATE
	         , CAST(ISNULL(A.SUPP_RATE, 0) 			AS NUMERIC(7,3))			AS SUPP_RATE
	         , CAST(ISNULL(A.BONUS_I, 0) 			AS NUMERIC(18,4))			AS BONUS_I
	         , CAST(ISNULL(A.BONUS_TOTAL_I, 0) 		AS NUMERIC(18,4))			AS BONUS_TOTAL_I
	         , CAST(ISNULL(A.PAY_TOTAL_I, 0)		AS NUMERIC(18,4))			AS PAY_TOTAL_I
	         , CAST(ISNULL(D.TAX_EXEMPTION1_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION1_I
	         , CAST(ISNULL(D.TAX_EXEMPTION2_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION2_I
	         , CAST(ISNULL(D.TAX_EXEMPTION3_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION3_I
	         , CAST(ISNULL(D.TAX_EXEMPTION4_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION4_I
	         , CAST(ISNULL(D.TAX_EXEMPTION6_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION6_I
	         , CAST(ISNULL(D.TAX_EXEMPTION5_I, 0)	AS NUMERIC(18,4))			AS TAX_EXEMPTION5_I
	         , CAST((ISNULL(A.SUPP_TOTAL_I, 0)
			     - ISNULL(D.TAX_EXEMPTION1_I, 0)
			     - ISNULL(D.TAX_EXEMPTION2_I, 0)
			     - ISNULL(D.TAX_EXEMPTION3_I, 0)
			     - ISNULL(D.TAX_EXEMPTION4_I, 0)
			     - ISNULL(D.TAX_EXEMPTION6_I, 0)
			     - ISNULL(D.TAX_EXEMPTION5_I, 0) )	AS NUMERIC(18,4))			AS TAX_AMOUNT_I
	         , CAST(ISNULL(A.BONUS_TAX_I, 0)		AS NUMERIC(18,4))           AS BONUS_TAX_I
	         , CAST(ISNULL(A.SUPP_TOTAL_I, 0)		AS NUMERIC(18,4))			AS SUPP_TOTAL_I
	         , CAST(ISNULL(A.DED_TOTAL_I, 0)		AS NUMERIC(18,4))           AS DED_TOTAL_I
	         , CAST(ISNULL(A.REAL_AMOUNT_I, 0) 		AS NUMERIC(18,4))			AS REAL_AMOUNT_I
	         , CAST(ISNULL(A.YEAR_CRT, 0)			AS NUMERIC(4,2))            AS YEAR_CRT
	         , CAST(ISNULL(A.YEAR_ADD, 0)			AS NUMERIC(4,2))            AS YEAR_ADD
	         , CAST(ISNULL(A.MONTH_CRT, 0) 			AS NUMERIC(4,2))            AS MONTH_CRT
	         , CAST(ISNULL(A.MON_YEAR_USE, 0) 		AS NUMERIC(4,2))          	AS MON_YEAR_USE
	         , CAST(ISNULL(A.MON_YEAR_PROV, 0) 		AS NUMERIC(4,2))         	AS MON_YEAR_PROV
	         , CAST(ISNULL(A.RETR_FLAG, '') 		AS VARCHAR(01))             AS RETR_FLAG
	         , CAST(ISNULL(A.AUTO_RECORD_NUM, '')	AS VARCHAR(20))        		AS AUTO_RECORD_NUM
	         , B.JOIN_DATE
	         , B.RETR_DATE
	   		 , ISNULL(B.WAGES_STD_I, 0)                  						AS WAGES_STD_I
	         , A.COM_DAY_WAGES
	         , A.DIV_CODE
	         , A.SECT_CODE
	         , A.MAKE_SALE
	         , A.COST_KIND
	         , A.PAY_GUBUN
	         , A.PAY_GUBUN2
	         , CAST(ISNULL(A.MED_GRADE, '') AS VARCHAR(04))						AS MED_GRADE
	         , CAST(ISNULL(ISNULL(A.BUSI_SHARE_I, 0), 0) AS NUMERIC(18,0))		AS BUSI_SHARE_I
	         , CAST(ISNULL(A.CHILD_20_NUM, 0) AS NUMERIC(2,0))             		AS CHILD_20_NUM
	     	 , ISNULL(A.COM_PAY_FLAG, '')                						AS COM_PAY_FLAG
	         , CAST(ISNULL(A.NON_TAX_I, 0) AS NUMERIC(18,4))    				AS NON_TAX_I
	         , CAST(ISNULL(A.WORKER_COMPEN_I, 0)	AS NUMERIC(18,0))			AS WORKER_COMPEN_I    
			 , ISNULL(A.TAXRATE_BASE, '2')               						AS TAXRATE_BASE
	         , CASE WHEN C.CLOSE_DATE IS NOT NULL 
	              THEN '마감'
	              ELSE '미마감'
	           END 																AS CLOSE_YN
	           
		 , CASE WHEN A.PAY_YYYYMM > LEFT(B.YOUTH_EXEMP_DATE, 6)
		        THEN ''
			    ELSE B.YOUTH_EXEMP_RATE
		    END AS YOUTH_EXEMP_RATE

		 , CASE WHEN A.PAY_YYYYMM > LEFT(B.YOUTH_EXEMP_DATE, 6)
			    THEN ''
			    ELSE B.YOUTH_EXEMP_DATE
			END AS YOUTH_EXEMP_DATE
	           
		FROM 			 HPA600T A 
               LEFT JOIN HUM100T B   ON A.COMP_CODE   = B.COMP_CODE
			                        AND A.PERSON_NUMB = B.PERSON_NUMB

               LEFT JOIN HBS910T C 		   ON C.COMP_CODE	= A.COMP_CODE
	                                      AND C.PERSON_NUMB = A.PERSON_NUMB
	                                      AND C.CLOSE_DATE  = A.PAY_YYYYMM
	                                      AND C.CLOSE_TYPE  = A.SUPP_TYPE
			   LEFT  JOIN (SELECT A.COMP_CODE
		                        , A.PAY_YYYYMM
		                        , A.SUPP_TYPE
		                        , A.PERSON_NUMB
		                        , SUM(CASE WHEN A.NONTAX_CODE IN ('O01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 연장근로 비과세
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION1_I
		                        , SUM(CASE WHEN A.NONTAX_CODE IN ('P01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 식대비과세
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION2_I
		                        , SUM(CASE WHEN A.NONTAX_CODE IN ('M01', 'M02', 'M03')  -- 국외근로 비과세
		                                        THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION4_I
		                        , SUM(CASE WHEN A.NONTAX_CODE IN ('Q01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 자녀양육비비과세
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION5_I
		                        , SUM(CASE WHEN A.NONTAX_CODE IN ('H06', 'H07', 'H08', 'H09', 'H10')  -- 연구활동비과세
		                                        THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION6_I
		                        , SUM(CASE WHEN A.NONTAX_CODE NOT IN ('O01', 'P01', 'M01', 'M02', 'M03', 'Q01', 'H06', 'H07', 'H08', 'H09', 'H10')  -- 기타비과세
		                                        THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
		                                   ELSE 0
		                              END)               AS TAX_EXEMPTION3_I
		                     FROM            HPA800T A WITH (NOLOCK)
		                    GROUP BY A.COMP_CODE, A.PAY_YYYYMM, A.SUPP_TYPE, A.PERSON_NUMB
		                  ) D                       ON D.COMP_CODE   = A.COMP_CODE
		                                           AND D.PAY_YYYYMM  = A.PAY_YYYYMM
		                                           AND D.SUPP_TYPE   = A.SUPP_TYPE
		                                           AND D.PERSON_NUMB = A.PERSON_NUMB
		WHERE A.COMP_CODE 	= #{S_COMP_CODE}
		  AND A.PAY_YYYYMM	= #{PAY_YYYYMM}
		  AND A.SUPP_TYPE	= #{SUPP_TYPE}
		  AND A.PERSON_NUMB	= #{PERSON_NUMB}
	</select>
	
	<select id="hbo220ukrServiceImpl.getHumanMaster"  parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.getHumanMaster*/
		SELECT  H.NAME
		      , H.PERSON_NUMB
		      , H.POST_CODE
		      , M1.CODE_NAME                             						 AS POST_CODE_NAME
		      , H.DEPT_CODE
		      , H.DEPT_NAME
		      , uniLITE.fnGetUserDateComp(H.COMP_CODE, H.JOIN_DATE)              AS JOIN_DATE
		      , H.ABIL_CODE
		      , M2.CODE_NAME                              						 AS ABIL_NAME
		      , CASE WHEN H.RETR_DATE = '00000000' THEN ''
		             ELSE uniLITE.fnGetUserDateComp(H.COMP_CODE, H.RETR_DATE)
		        END                                                         	 AS RETR_DATE
		      , H.SECT_CODE
		      , M3.DIV_NAME 	                                                 AS SECT_NAME
		      , H.JOB_CODE
		      , M4.CODE_NAME						                             AS JOB_NAME
		      , H.PAY_CODE
		      , H.TAX_CODE
		      , H.OT_KIND
		      , H.PAY_PROV_FLAG
		      , H.EMPLOY_TYPE
		      , H.MED_GRADE
		      , H.ANU_BASE_I
		      , H.SPOUSE
		      , H.SUPP_AGED_NUM
		      , H.BONUS_KIND
		      , uniLITE.fnCipherDecrypt(H.REPRE_NUM, 'R')                   	 AS REPRE_NUM
		      , H.WOMAN
		      , H.ZIP_CODE
		      , H.KOR_ADDR
		      , H.DEFORM_NUM
		      , H.AGED_NUM
		      , H.BRING_CHILD_NUM
		      , ISNULL(H.ANNUAL_SALARY_I,0)                                 	AS ANNUAL_SALARY_I
		      , ISNULL(H.WAGES_STD_I    ,0)                                  	AS WAGES_STD_I
		      , ISNULL(H.BONUS_STD_I    ,0)                                  	AS BONUS_STD_I
		      , ISNULL(H.COM_DAY_WAGES  ,0)                                  	AS COM_DAY_WAGES
		      , ISNULL(H.COM_YEAR_WAGES ,0)                                  	AS COM_YEAR_WAGES
		      , H.MED_INSUR_NO
		      , M5.REF_CODE1                                                 	AS PAY_PROV_FLAG_DAT
		      , H.SEX_CODE
		      , B1.STD_AMOUNT_I                                              	AS STD_AMOUNT_I_01
		      , B2.STD_AMOUNT_I                                              	AS STD_AMOUNT_I_02
		      , B1.INSUR_AMOUNT_I                                            	AS INSUR_AMOUNT_I_01
		      , B2.INSUR_AMOUNT_I                                            	AS INSUR_AMOUNT_I_02
		      , H.TELEPHON
		      , H.DIV_CODE
		      , H.MAKE_SALE
		      , H.COST_KIND
		      , H.MED_AVG_I
		      , H.NATION_CODE
		      , H.LIVE_GUBUN
		      , H.CHILD_20_NUM
		      , H.PENS_GRADE
		      , H.MED_INSUR_I
		      , H.ANU_INSUR_I
		      , H.HIRE_INSUR_TYPE
		      , H.WORK_COMPEN_YN
		      , uniLITE.fnCipherDecrypt(H.REPRE_NUM, 'A')                    	AS REPRE_NUM2
		      , H.DED_TYPE
		      , 0                                                            	AS DOC_ID
		      , ISNULL(H.BANK_CODE1, '')                                     	AS BANK_CODE1
		      , ISNULL(C1.CUSTOM_NAME, '')                                   	AS BANK_NAME1
		      , uniLITE.fnCipherDecrypt(H.BANK_ACCOUNT1, '')                 	AS BANK_ACCOUNT1
		      , ISNULL(H.TAXRATE_BASE, '2')                                  	AS TAXRATE_BASE
		FROM                HUM100T   H  WITH (NOLOCK)
		        LEFT  JOIN  HBS500T   B1 WITH (NOLOCK) ON B1.COMP_CODE  = H.COMP_CODE
		                                              AND B1.GRADE      = H.MED_GRADE
		                                              AND B1.INSUR_TYPE = 2
		        LEFT  JOIN  HBS500T   B2 WITH (NOLOCK) ON B2.COMP_CODE  = H.COMP_CODE
		                                              AND B2.GRADE      = H.PENS_GRADE
		                                              AND B2.INSUR_TYPE = 1
		        LEFT  JOIN  BCM100T   C1 WITH (NOLOCK) ON C1.COMP_CODE   = H.COMP_CODE
		                                              AND C1.CUSTOM_CODE = H.BANK_CODE1
		                                              AND C1.CUSTOM_TYPE = '4'
		        LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE  = H.COMP_CODE
		                                              AND M1.MAIN_CODE  = 'H005'
		                                              AND M1.SUB_CODE   = H.POST_CODE
		        LEFT  JOIN  BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE  = H.COMP_CODE
		                                              AND M2.MAIN_CODE  = 'H006'
		                                              AND M2.SUB_CODE   = H.ABIL_CODE
		        LEFT  JOIN  BOR120T   M3 WITH (NOLOCK) ON M3.COMP_CODE  = H.COMP_CODE
		                                              AND M3.DIV_CODE   = H.SECT_CODE
		        LEFT  JOIN  BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE  = H.COMP_CODE
		                                              AND M4.MAIN_CODE  = 'H008'
		                                              AND M4.SUB_CODE   = H.JOB_CODE
		        LEFT  JOIN  BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE  = H.COMP_CODE
		                                              AND M5.MAIN_CODE  = 'H031'
		                                              AND M5.SUB_CODE   = H. PAY_PROV_FLAG
		        LEFT  JOIN  BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE  = H.COMP_CODE
		                                              AND M6.MAIN_CODE  = 'H011'
		                                              AND M6.SUB_CODE   = H.PAY_GUBUN
		
		WHERE   H.COMP_CODE = #{S_COMP_CODE}
		AND     H.PERSON_NUMB   LIKE #{PERSON_NUMB}
		AND     H.NAME          LIKE N'%'
	</select>
	
	<select id="hbo220ukrServiceImpl.getPrNxPersonNumb" parameterType="Map" resultType="rMap">
		/* hbo220ukrServiceImpl.getPrNxPersonNumb */
		SELECT PV_D = ISNULL((
	        SELECT MAX(A.PERSON_NUMB)
				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
								   ON A.COMP_CODE = B.COMP_CODE
								  AND A.PERSON_NUMB = B.PERSON_NUMB
				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
				), 'BOF' )
		, PV_NAME = ISNULL((
	        SELECT NAME FROM HUM100T
	          WHERE COMP_CODE = #{S_COMP_CODE}
	          AND PERSON_NUMB = (SELECT MAX(A.PERSON_NUMB)
				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
								   ON A.COMP_CODE = B.COMP_CODE
								  AND A.PERSON_NUMB = B.PERSON_NUMB
				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
				)), 'BOF' )
	      , NX_D = ISNULL((
	           SELECT MIN(A.PERSON_NUMB)
					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
									   ON A.COMP_CODE = B.COMP_CODE
									  AND A.PERSON_NUMB = B.PERSON_NUMB
					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
					   AND A.PERSON_NUMB &gt; #{PERSON_NUMB}
	          ), 'EOF' ) 
          , NX_NAME = ISNULL((
	           SELECT NAME FROM HUM100T
	          WHERE COMP_CODE = #{S_COMP_CODE}
	          AND PERSON_NUMB = (SELECT MIN(A.PERSON_NUMB)
					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
									   ON A.COMP_CODE = B.COMP_CODE
									  AND A.PERSON_NUMB = B.PERSON_NUMB
					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
					   AND A.PERSON_NUMB &gt; #{PERSON_NUMB}
	          )), 'EOF' ) 
	</select>
	
	<select id="hbo220ukrServiceImpl.checkCloseYn" parameterType="Map" resultType="String">
		/* hbo220ukrServiceImpl.checkUpdateAvailable */
		DECLARE @ERRMSG NVARCHAR(2000),
				@CLOSE_DATE NVARCHAR(8),
				@EXIST_DATA INT
		
		   SET @ERRMSG = '';
		SELECT @CLOSE_DATE = CLOSE_DATE 
		  FROM HBS900T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND CLOSE_TYPE = '1'
		   
		SELECT @CLOSE_DATE = A.CLOSE_DATE 
		FROM              HBS910T A WITH (NOLOCK)
		       INNER JOIN HUM100T B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                         AND B.PERSON_NUMB = A.PERSON_NUMB
		       INNER JOIN HPA600T C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
		                                         AND C.PERSON_NUMB = A.PERSON_NUMB
		                                         AND C.PAY_YYYYMM  = A.CLOSE_DATE
		WHERE A.COMP_CODE   = #{S_COMP_CODE}
		  AND A.CLOSE_DATE  = #{PAY_YYYYMM} 
		  AND A.CLOSE_TYPE  = N'1' 
		  AND B.PERSON_NUMB = #{PERSON_NUMB} 
		  
		IF ISNULL(@CLOSE_DATE, '') &gt;= #{PAY_YYYYMM}
			BEGIN
			SET @ERRMSG = '이미 마감된 자료입니다.'
			SELECT @ERRMSG
			RETURN
			END   
	</select>

	<select id="hbo220ukrServiceImpl.checkExCloseYn" parameterType="Map" resultType="String">
		DECLARE @ERRMSG NVARCHAR(2000),
				@EXIST_DATA INT
		
		SELECT @EXIST_DATA = COUNT(*) 
		  FROM HPA600T V INNER JOIN HUM100T V1
		                    ON V.COMP_CODE = V1.COMP_CODE
		                   AND V.PERSON_NUMB = V1.PERSON_NUMB
		 WHERE V.COMP_CODE  = #{S_COMP_CODE}
		   AND V.PAY_YYYYMM = #{PAY_YYYYMM}
		   AND V.SUPP_TYPE  = #{SUPP_TYPE}
		   AND (V.EX_DATE  &lt;&gt; '' OR   V.EX_DATE IS NOT NULL) AND V.PERSON_NUMB = #{PERSON_NUMB}  
		
		IF @EXIST_DATA &gt; 0
			BEGIN
			SET @ERRMSG = '전표를 취소하고 계산을 다시하여 주십시오.'
			SELECT @ERRMSG
			RETURN
			END
		ELSE
			BEGIN
			SELECT ISNULL(@ERRMSG,'')
			END   
	</select>
	
	<select id="hbo220ukrServiceImpl.checkPayGubun" parameterType="Map" resultType="rMap">
		--UHpa01Krv.CHpa600UKr-fnHpa600nSet.ssql3 (PAY_GUBUN 값 구하기)
		SELECT ISNULL(PAY_GUBUN, '') PAY_GUBUN
		     , ISNULL(PAY_GUBUN2, '1') PAY_GUBUN2
		  FROM HPA600T 
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		   AND SUPP_TYPE   = #{SUPP_TYPE} 
		   AND PERSON_NUMB = #{PERSON_NUMB}
	</select>
	
	<select id="hbo220ukrServiceImpl.checkPayGubun2" parameterType="Map" resultType="rMap">
		--UHpa01Krv.CHpa600UKr-fnHpa600nSet.ssql3-1 (PAY_GUBUN 값 구하기2)
		SELECT ISNULL(PAY_GUBUN, '') PAY_GUBUN
		     , ISNULL(PAY_GUBUN2, '1') PAY_GUBUN2
		  FROM HUM100T 
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
	</select>
		
	<update id="hbo220ukrServiceImpl.form01update" parameterType="rMap" >
		/* hbo220ukrServiceImpl.form01update */
		DECLARE @PAY_GUBUN NVARCHAR(1),
				@PAY_GUBUN2 NVARCHAR(1)

		SET @PAY_GUBUN = 'N'
		SET	@PAY_GUBUN2 = 'N'
		   
		SELECT @PAY_GUBUN = ISNULL(PAY_GUBUN, '')
		         , @PAY_GUBUN2 = ISNULL(PAY_GUBUN2, '1')
		      FROM HPA600T 
		     WHERE COMP_CODE   = #{S_COMP_CODE}
		       AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		       AND SUPP_TYPE   = #{SUPP_TYPE} 
		       AND PERSON_NUMB = #{PERSON_NUMB}
		
		IF @PAY_GUBUN = 'N' AND @PAY_GUBUN2 = 'N'
			BEGIN
			SELECT @PAY_GUBUN = ISNULL(PAY_GUBUN, '')
		             , @PAY_GUBUN2 = ISNULL(PAY_GUBUN2, '1')
		          FROM HUM100T 
		         WHERE COMP_CODE   = #{S_COMP_CODE}
		           AND PERSON_NUMB = #{PERSON_NUMB} 
			END
		
		UPDATE HPA600T
		   SET DEPT_CODE        = #{DEPT_CODE}
		     , DEPT_NAME        = #{DEPT_NAME}
		     , POST_CODE        = #{POST_CODE}
		     , ABIL_CODE        = #{ABIL_CODE}
		     , PAY_CODE         = #{PAY_CODE}
		     , TAX_CODE         = #{TAX_CODE}
		     , OT_KIND          = #{OT_KIND}
		     , PAY_PROV_FLAG    = #{PAY_PROV_FLAG}
		     , EMPLOY_TYPE      = #{EMPLOY_TYPE}
		     , EXCEPT_TYPE      = #{EXCEPT_TYPE}
		     , SUPP_DATE        = #{SUPP_DATE}
		     , MED_AVG_I        = #{MED_AVG_I}
		     , ANU_BASE_I       = #{ANU_BASE_I}
		     , SPOUSE           = #{SPOUSE}
		     , SUPP_NUM         = #{SUPP_NUM}
		     , PAY_TOTAL_I      = #{PAY_TOTAL_I}
		     , COM_DAY_WAGES    = #{COM_DAY_WAGES}
		     , UPDATE_DB_USER   = #{S_USER_ID}
		     , UPDATE_DB_TIME   = GETDATE()
		     , DIV_CODE         = #{DIV_CODE}
		     , SECT_CODE        = #{SECT_CODE}
		     , MAKE_SALE        = #{MAKE_SALE}
		     , COST_KIND        = #{COST_KIND}
		     , BONUS_TOTAL_I    = #{BONUS_TOTAL_I}
		     , DED_TOTAL_I      = #{DED_TOTAL_I}
		     , REAL_AMOUNT_I    = #{REAL_AMOUNT_I}
		     , PAY_GUBUN        = @PAY_GUBUN
		     , PAY_GUBUN2       = @PAY_GUBUN2
		     , CHILD_20_NUM     = #{CHILD_20_NUM}
		 WHERE PAY_YYYYMM       = #{PAY_YYYYMM}
		   AND SUPP_TYPE        = #{SUPP_TYPE}
		   AND PERSON_NUMB      = #{PERSON_NUMB}
		   AND COMP_CODE        = #{S_COMP_CODE}
	</update>

	<insert id="hbo220ukrServiceImpl.insertList1" parameterType="rMap" >
		--UHpa01Krv.CHpa600UKr-fnHpa600nSet.ssql3 N/U
		INSERT INTO HPA600T
		     ( PAY_YYYYMM
		     , SUPP_TYPE
		     , PERSON_NUMB
		     , DEPT_CODE
		     , DEPT_NAME
		     , POST_CODE
     		 , ABIL_CODE
		     , PAY_CODE
		     , EMPLOY_TYPE
		     , SUPP_DATE
		     , SPOUSE
		     , SUPP_NUM
		     , RETR_FLAG
		     , LONG_MONTH
		     , BONUS_STD_I
		     , BONUS_RATE
		     , PLUS_RATE
		     , MINUS_RATE
		     , BONUS_TOTAL_I
		     , BONUS_I
		     , BONUS_TAX_I
		     , SUPP_TOTAL_I
		     , SUPP_RATE
		     , TAX_CODE
		     , PAY_PROV_FLAG
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , EXCEPT_TYPE
		     , DIV_CODE
		     , SECT_CODE
		     , MAKE_SALE
		     , COST_KIND
		     , PAY_GUBUN
		     , PAY_GUBUN2
		     , CHILD_20_NUM
		     , COMP_CODE
		     , COM_PAY_FLAG
		) 
		VALUES
		     ( #{PAY_YYYYMM}     
		     , #{SUPP_TYPE}      
		     , #{PERSON_NUMB}    
		     , #{DEPT_CODE}      
		     , #{DEPT_NAME}      
		     , #{POST_CODE}      
		     , #{ABIL_CODE}      
		     , #{PAY_CODE}       
		     , #{EMPLOY_TYPE}    
		     , #{SUPP_DATE}      
		     , #{SPOUSE}         
		     , ISNULL(CONVERT(NUMERIC(5,2), #{SUPP_NUM}), 0)       
		     , #{RETR_FLAG}      
		     , ISNULL(CONVERT(NUMERIC(6,0), #{LONG_MONTH}), 0)
		     , ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_STD_I}), 0)    
		     , ISNULL(CONVERT(NUMERIC(7,3), #{BONUS_RATE}), 0)     
		     , ISNULL(CONVERT(NUMERIC(7,3), #{PLUS_RATE}), 0)      
		     , ISNULL(CONVERT(NUMERIC(7,3), #{MINUS_RATE}), 0)     
		     , ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_TOTAL_I}), 0)  
		     , ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_I}), 0)        
		     , ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_TAX_I}), 0)    
		     , ISNULL(CONVERT(NUMERIC(30,6), #{SUPP_TOTAL_I}), 0)   
		     , ISNULL(CONVERT(NUMERIC(7,3), #{SUPP_RATE}), 0)      
		     , #{TAX_CODE}       
		     , #{PAY_PROV_FLAG}  
		     , #{S_USER_ID} 
		     , GETDATE() 
		     , #{EXCEPT_TYPE}    
		     , #{DIV_CODE}       
		     , #{SECT_CODE}      
		     , #{MAKE_SALE}      
		     , #{COST_KIND}      
		     , #{PAY_GUBUN}      
		     , #{PAY_GUBUN2}     
		     , ISNULL(CONVERT(NUMERIC(2,0), #{CHILD_20_NUM}), 0)   
		     , #{S_COMP_CODE}      
		     , #{COM_PAY_FLAG}   
		)
	</insert>

	<delete id="hbo220ukrServiceImpl.deleteList2" parameterType="rMap" >
		--UHpa01Krv.CHpa400UKr[fnHpa400nSet] Hpa400T DELETE
			DELETE FROM HPA400T 
			 WHERE PAY_YYYYMM  = #{PAY_YYYYMM}
			   AND SUPP_TYPE   = #{SUPP_TYPE}
			   AND PERSON_NUMB = #{PERSON_NUMB}
			   AND DED_CODE    = #{DED_CODE}
			   AND COMP_CODE   = #{S_COMP_CODE}
	</delete>
			  
	<insert id="hbo220ukrServiceImpl.insertList3" parameterType="rMap" >
		--UHpa01Krv.CHpa400UKr[fnHpa400nSet] Hpa400T INSERT
			INSERT INTO HPA400T
			     ( PAY_YYYYMM
			     , SUPP_TYPE
			     , PERSON_NUMB
			     , DED_CODE
			     , DED_AMOUNT_I
			     , COMP_CODE
			     , UPDATE_DB_USER
			     , UPDATE_DB_TIME
		     ) 
			VALUES
			     ( #{PAY_YYYYMM}
			     , #{SUPP_TYPE}
			     , #{PERSON_NUMB}
			     , #{DED_CODE}
			     , ISNULL(CONVERT(NUMERIC(30,6), #{DED_AMOUNT_I}), 0)
			     , #{S_COMP_CODE}
			     , #{UPDATE_DB_USER}
			     , GETDATE()
	     	)
	</insert>

	<delete id="hbo220ukrServiceImpl.deleteList" parameterType="rMap" >
		--UHpa01Krv.CHpa600UKr-fnHpa600nDel.sSql(0)
		DELETE FROM HPA600T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND SUPP_TYPE   = #{SUPP_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB} 
		
		--UHpa01Krv.CHpa600UKr-fnHpa600nDel.sSql(1)
		DELETE FROM HPA300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		   AND SUPP_TYPE   = #{SUPP_TYPE}  
		   AND PERSON_NUMB = #{PERSON_NUMB} 
		
		--UHpa01Krv.CHpa600UKr-fnHpa600nDel.sSql(2)
		DELETE FROM HPA400T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		   AND SUPP_TYPE   = #{SUPP_TYPE}  
		   AND PERSON_NUMB = #{PERSON_NUMB} 
		
		--UHpa01Krv.CHpa800UKr-fnHpa600nDel.sSql(3)
		DELETE FROM HPA800T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		   AND SUPP_TYPE   = #{SUPP_TYPE}  
		   AND PERSON_NUMB = #{PERSON_NUMB} 
	</delete>
	
	<update id="hbo220ukrServiceImpl.updateList" parameterType="rMap" >
		--UHpa01Krv.CHpa600UKr-fnHpa600nSet.ssql3 N/U
		UPDATE HPA600T
		   SET DEPT_CODE      = #{DEPT_CODE}
		     , DEPT_NAME      = #{DEPT_NAME}
		     <if test="@foren.Ognl@isExists(_parameter, 'POST_CODE')">	
		     , POST_CODE      = #{POST_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'ABIL_CODE')">	
		     , ABIL_CODE      = #{ABIL_CODE}		    
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_CODE')">	
		     , PAY_CODE       = #{PAY_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_KIND')">	
		     , BONUS_KIND     = #{BONUS_KIND}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'EMPLOY_TYPE')">	
		     , EMPLOY_TYPE    = #{EMPLOY_TYPE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SUPP_DATE')">	
		     , SUPP_DATE      = #{SUPP_DATE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SPOUSE')">	
		     , SPOUSE         = #{SPOUSE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SUPP_NUM')">	
		     , SUPP_NUM       = ISNULL(CONVERT(NUMERIC(2,0), #{SUPP_NUM}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RETR_FLAG')">	
		     , RETR_FLAG      = #{RETR_FLAG}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'LONG_MONTH')">	
		     , LONG_MONTH     = ISNULL(CONVERT(NUMERIC(6,0), #{LONG_MONTH}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_STD_I')">	
		     , BONUS_STD_I    = ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_STD_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_RATE')">	
		     , BONUS_RATE     = ISNULL(CONVERT(NUMERIC(7,3), #{BONUS_RATE}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PLUS_RATE')">	
		     , PLUS_RATE      = ISNULL(CONVERT(NUMERIC(7,3), #{PLUS_RATE}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'MINUS_RATE')">	
		     , MINUS_RATE     = ISNULL(CONVERT(NUMERIC(7,3), #{MINUS_RATE}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_TOTAL_I')">	
		     , BONUS_TOTAL_I  = ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_TOTAL_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_I')">	
		     , BONUS_I        = ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BONUS_TAX_I')">	
		     , BONUS_TAX_I    = ISNULL(CONVERT(NUMERIC(30,6), #{BONUS_TAX_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SUPP_TOTAL_I')">	
		     , SUPP_TOTAL_I   = ISNULL(CONVERT(NUMERIC(30,6), #{SUPP_TOTAL_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SUPP_RATE')">	
		     , SUPP_RATE      = ISNULL(CONVERT(NUMERIC(7,3), #{SUPP_RATE}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'DED_TOTAL_I')">	
		     , DED_TOTAL_I    = ISNULL(CONVERT(NUMERIC(30,6), #{DED_TOTAL_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'REAL_AMOUNT_I')">	
             , REAL_AMOUNT_I  = ISNULL(CONVERT(NUMERIC(30,6), #{REAL_AMOUNT_I}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'TAX_CODE')">	
		     , TAX_CODE       = #{TAX_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_PROV_FLAG')">	
		     , PAY_PROV_FLAG  = #{PAY_PROV_FLAG}
		     </if>
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		     <if test="@foren.Ognl@isExists(_parameter, 'EXCEPT_TYPE')">	
		     , EXCEPT_TYPE    = #{EXCEPT_TYPE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'DIV_CODE')">	
		     , DIV_CODE       = #{DIV_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'SECT_CODE')">	
		     , SECT_CODE      = #{SECT_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'MAKE_SALE')">	
		     , MAKE_SALE      = #{MAKE_SALE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'COST_KIND')">	
		     , COST_KIND      = #{COST_KIND}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_GUBUN')">	
		     , PAY_GUBUN      = #{PAY_GUBUN}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'PAY_GUBUN2')">	
		     , PAY_GUBUN2     = #{PAY_GUBUN2}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'CHILD_20_NUM')">	
		     , CHILD_20_NUM   = ISNULL(CONVERT(NUMERIC(2,0), #{CHILD_20_NUM}), 0)
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'BUSI_SHARE_I')">	
		     , BUSI_SHARE_I   = #{BUSI_SHARE_I}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'COM_PAY_FLAG')">	
		     , COM_PAY_FLAG   = #{COM_PAY_FLAG}
		     </if>
		 WHERE PAY_YYYYMM     = #{PAY_YYYYMM}
		   AND SUPP_TYPE      = #{SUPP_TYPE}
		   AND PERSON_NUMB    = #{PERSON_NUMB} 
		   AND COMP_CODE      = #{S_COMP_CODE}		
	</update>


	<select id="hbo220ukrServiceImpl.checkCompCode" parameterType="Map" resultType="rMap">
		SELECT A.COMP_CODE, A.COMP_NAME
		  FROM BOR100T   A  WITH (NOLOCK)
	      LEFT JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
	                                          AND M1.MAIN_CODE    = 'B107'
	                                          AND M1.SUB_CODE     = '20'         
		 WHERE (A.COMP_CODE &gt; ''     	  AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		    OR (A.COMP_CODE = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>

</mapper>