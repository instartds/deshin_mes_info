<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pip100ukrvServiceImpl">
	
	<!-- 기존 최적화 데이터 존재여부 체크 -->
	<select id="pip100ukrvServiceImpl.checkDataP200" parameterType="Map" resultType="rMap">
		/* 기존 최적화 데이터 존재여부 체크: pip100ukrvServiceImpl.checkDataP200 */
		SELECT 
			   TOP 1 COMP_CODE
		  FROM PIP200T WITH(NOLOCK)
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND ITEM_CODE	= #{ITEM_CODE}
	</select>

	<!-- 최적화 재계산 시, 삭제로직 -->
	<update id="pip100ukrvServiceImpl.deleteAllLogic" parameterType="Map">
		/* 최적화 재계산 시, 삭제로직: pip100ukrvServiceImpl.deleteAllLogic */
		DELETE FROM PIP200T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE = #{DIV_CODE}
		   AND ITEM_CODE = #{ITEM_CODE}
		   
		DELETE FROM PIP100T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE = #{DIV_CODE}
		   AND ITEM_CODE = #{ITEM_CODE}
		   
		DELETE FROM PIP300T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE = #{DIV_CODE}
		   AND ITEM_CODE = #{ITEM_CODE}
	</update>	




	<!-- 검색팝업 조회 -->
	<select id="pip100ukrvServiceImpl.subSelectList" parameterType="Map" resultType="rMap">
		/* 검색팝업 조회: pip100ukrvServiceImpl.subSelectList */
		SELECT 
			   A.COMP_CODE
			 , A.DIV_CODE
			 , A.ITEM_CODE
			 , MAX(R1.ITEM_NAME) AS ITEM_NAME
			 , MAX(R1.SPEC) AS SPEC
			 --20190110 추가
			 , R2.TRNS_RATE
			 , R1.ITEM_WIDTH
		  FROM PIP200T A WITH(NOLOCK)
		  INNER JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE = A.COMP_CODE
		 									AND R1.ITEM_CODE = A.ITEM_CODE
			 --20190110 추가
		  INNER JOIN BPR200T R2 WITH(NOLOCK) ON R2.COMP_CODE = A.COMP_CODE
											AND R2.DIV_CODE  = A.DIV_CODE
											AND R2.ITEM_CODE = A.ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
		   AND A.ITEM_CODE	= #{ITEM_CODE}
		</if>
		 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, R2.TRNS_RATE, R1.ITEM_WIDTH
	</select>

	<!-- 원단재고정보 조회 -->
	<select id="pip100ukrvServiceImpl.p200SelectList" parameterType="Map" resultType="rMap">
		/* 원단재고정보 조회: pip100ukrvServiceImpl.p200SelectList */
		SELECT 
			   A.COMP_CODE
			 , A.DIV_CODE
			 , A.SEQ
			 , B.WH_CODE
			 , S.TREE_NAME									AS WH_NAME		--창고명(추가)
			 , A.ITEM_CODE
			 , R1.ITEM_NAME
			 , R1.ITEM_WIDTH
			 , A.LOT_NO
			 --, A.STOCK_Q
			 , A.REMARK
			 , ISNULL(R2.TRNS_RATE, 1)						AS TRNS_RATE
			 , A.STOCK_Q * ISNULL(R2.TRNS_RATE, 1)			AS STOCK_LENGTH	--재고(길이)(추가)
			 , A.STOCK_Q									AS STOCK_Q		--재고(수량)
			 , A.REQ_LEN
			 , ISNULL(ITEM_WIDTH, 0) - ISNULL(REQ_LEN, 0)	AS CUT
		  FROM PIP200T A WITH(NOLOCK)
		   LEFT JOIN BIV150T  B WITH(NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
											AND B.DIV_CODE		= A.DIV_CODE
											AND B.ITEM_CODE		= A.ITEM_CODE
											AND B.LOT_NO		= A.LOT_NO
											AND B.STOCK_Q &gt; 0
		  INNER JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE	= A.COMP_CODE
											AND R1.ITEM_CODE	= A.ITEM_CODE
		  INNER JOIN BPR200T R2 WITH(NOLOCK) ON R2.COMP_CODE	= A.COMP_CODE
											AND R2.DIV_CODE		= A.DIV_CODE
											AND R2.ITEM_CODE	= A.ITEM_CODE
		   LEFT JOIN BSA220T  S WITH(NOLOCK) ON S.COMP_CODE		= B.COMP_CODE
											AND S.TREE_CODE		= B.WH_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.ITEM_CODE	= #{ITEM_CODE}
	</select>

	<!-- 원단재고정보 - 참조: 재고 -->
	<select id="pip100ukrvServiceImpl.ref1SelectList" parameterType="Map" resultType="rMap">
		/* 원단재고정보 - 참조: 재고  pip100ukrvServiceImpl.ref1SelectList */
		SELECT
			   A.COMP_CODE
			 , A.DIV_CODE
			 , A.WH_CODE											--창고(추가)
			 , S.TREE_NAME							AS WH_NAME		--창고명(추가)
			 , A.ITEM_CODE
			 , R1.ITEM_NAME
			 , R1.SPEC
			 , R1.ITEM_WIDTH
			 , A.WH_CODE
			 , A.LOT_NO
			 , A.STOCK_Q							AS STOCK_LENGTH	--재고(길이)(추가)
			 --, A.STOCK_Q  ISNULL(R2.TRNS_RATE, 1)	AS STOCK_Q		--재고(수량)
			 , 1  AS STOCK_Q		--재고(수량)
			 --20181218 추가
			 , ISNULL(R2.TRNS_RATE, 1)				AS TRNS_RATE
		  FROM BIV150T A WITH(NOLOCK) 
		  INNER JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE	= A.COMP_CODE
											AND R1.ITEM_CODE	= A.ITEM_CODE
		  INNER JOIN BPR200T R2 WITH(NOLOCK) ON R2.COMP_CODE	= A.COMP_CODE
											AND R2.DIV_CODE		= A.DIV_CODE
											AND R2.ITEM_CODE	= A.ITEM_CODE
		  INNER JOIN BSA220T  S WITH(NOLOCK) ON S.COMP_CODE		= A.COMP_CODE
											AND S.TREE_CODE		= A.WH_CODE
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.DIV_CODE = #{DIV_CODE}
		   AND A.ITEM_CODE = #{ITEM_CODE}
		   AND A.STOCK_Q &gt; 0
		<if test="@foren.Ognl@isNotEmpty(WH_CODE)"> 
		   AND A.WH_CODE = #{WH_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(LOT_NO)"> 
		   AND A.LOT_NO = #{LOT_NO}
		</if>
	</select>

	<!-- 절단소요량 정보 조회 -->
	<select id="pip100ukrvServiceImpl.p100SelectList" parameterType="Map" resultType="rMap">
		/* 절단소요량 정보 조회: pip100ukrvServiceImpl.p100SelectList */
		SELECT 
			   A.COMP_CODE
			 , A.DIV_CODE
			 , A.ITEM_CODE
			 , A.CUT_ITEM_CODE
			 , R1.ITEM_NAME			AS CUT_ITEM_NAME
			 , A.CALC_LEN
			 , A.ORDER_Q
			 , A.MRP_CONTROL_NUM
			 , A.REMARK
		  FROM PIP100T A WITH(NOLOCK)
		  LEFT JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE = A.COMP_CODE
		 								   AND R1.ITEM_CODE = A.CUT_ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.ITEM_CODE	= #{ITEM_CODE}
	</select>

	<!-- 절단소요량 정보 - 참조: 소요량 -->
	<select id="pip100ukrvServiceImpl.ref2SelectList" parameterType="Map" resultType="rMap">
		/* 절단소요량 정보 - 참조: 소요량 pip100ukrvServiceImpl.ref2SelectList */
		/*----  MRP_CONTROL_NUM ----------------------------------------------------------*/
		DECLARE @MRPControlNum	  NVARCHAR(20)

		SELECT @MRPControlNum = MAX(A.MRP_CONTROL_NUM)
		  FROM MRP350T A WITH (NOLOCK)
        	INNER JOIN MRP320T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE 
								AND B.DIV_CODE = A.DIV_CODE
								AND B.MRP_CONTROL_NUM = A.MRP_CONTROL_NUM 
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		   AND A.RECORD_TYPE	= 'M'
		   AND A.APPLY_TYPE	= 'M'
	--	   AND ((A.WORK_SHOP_CODE = @WORK_SHOP_CODE AND @WORK_SHOP_CODE != '') OR (@WORK_SHOP_CODE = ''))

		SET @MRPControlNum = ISNULL(@MRPControlNum, '')

		SELECT
			   A.COMP_CODE
			 , A.DIV_CODE
	--		 , A.PROD_ITEM_CODE							AS ITEM_CODE		--원단품목
			 , #{ITEM_CODE}								AS PROD_ITEM_CODE
			 , A.ITEM_CODE								AS ITEM_CODE	--절단품목
			 , MAX(R1.ITEM_NAME)						AS ITEM_NAME
--			 , MAX(R1.SPEC)								AS SPEC
			 , MAX(R1.ITEM_WIDTH)						AS SPEC
--			 , MAX(A.PROD_Q)							AS PROD_Q
--			 , SUM(A.PROD_Q / ISNULL(R2.TRNS_RATE, 1))	AS PROD_Q
			 , SUM(A.ORDER_PLAN_Q / ISNULL(R2.TRNS_RATE, 1))	AS PROD_Q
			 , MAX(A.MRP_CONTROL_NUM)					AS MRP_CONTROL_NUM
		  FROM MRP350T A WITH(NOLOCK)
--		  LEFT JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE	= A.COMP_CODE
--										   AND R1.ITEM_CODE	= A.ITEM_CODE
		 INNER JOIN BPR100T R1 WITH(NOLOCK) ON R1.COMP_CODE	= A.COMP_CODE
										   AND R1.ITEM_CODE	= A.ITEM_CODE
		 INNER JOIN BPR200T R2 WITH(NOLOCK) ON R2.COMP_CODE	= A.COMP_CODE
										   AND R2.DIV_CODE	= A.DIV_CODE
										   AND R2.ITEM_CODE	= A.ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}

		   AND A.ITEM_CODE	IN ( SELECT DISTINCT PROD_ITEM_CODE FROM MRP350T WHERE COMP_CODE = #{S_COMP_CODE} 
												AND DIV_CODE = #{DIV_CODE}
												AND ITEM_CODE = #{ITEM_CODE}
												AND MRP_CONTROL_NUM =  @MRPControlNum )

		<if test="@foren.Ognl@isNotEmpty(BASIS_DATE_FR)">
		   AND A.BASIS_DATE	&gt;= #{BASIS_DATE_FR}
		</if> 
		<if test="@foren.Ognl@isNotEmpty(BASIS_DATE_TO)">
		   AND A.BASIS_DATE	&lt;= #{BASIS_DATE_TO}
		</if> 
--		   AND A.MRP_CONTROL_NUM = (SELECT MAX(MRP_CONTROL_NUM) FROM MRP350T WHERE COMP_CODE = {S_COMP_CODE} AND DIV_CODE = {DIV_CODE}  AND ITEM_CODE = {ITEM_CODE})
		   AND A.MRP_CONTROL_NUM = @MRPControlNum
		   AND A.STEP &gt; 0
		GROUP BY A.COMP_CODE, A.DIV_CODE,A.PROD_ITEM_CODE, A.ITEM_CODE
		HAVING SUM(A.ORDER_PLAN_Q / ISNULL(R2.TRNS_RATE, 1)) &gt; 0
	</select>

	<!-- 최적화 결과 조회 -->
	<select id="pip100ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* 최적화 결과 조회: pip100ukrvServiceImpl.selectList */
		SELECT 
			   A.COMP_CODE																				--법인코드
			 , A.DIV_CODE																				--사업장
			 , A.ITEM_CODE																				--원단품목코드
			 , A.STOCK_SEQ																				--원단순번
			 , A.STOCK_SEQ_EACH																			--원단순번에 현재고수량만큼 나눔
			 , MAX(A.REQ_LEN)														AS REQ_LEN			--규격(폭)
			 , STUFF((
						SELECT ',' + CONVERT(nvarchar(1000), CONVERT(int,CALC_LEN))
						  FROM PIP300T WITH(NOLOCK)
						 WHERE COMP_CODE	= A.COMP_CODE  
						   AND DIV_CODE		= A.DIV_CODE
						   AND ITEM_CODE	= A.ITEM_CODE
						   AND STOCK_SEQ	= A.STOCK_SEQ
						   AND STOCK_SEQ_EACH = A.STOCK_SEQ_EACH
						FOR XML PATH('')
				) , 1, 1, '')														AS CALC_LENS		--절단사이즈
			 , MAX(A.SUM_LEN)														AS SUM_LEN			--절단합계
			 , MAX(A.REQ_LEN)														AS REQ_LEN_TOTAL	--표준총폭
			 , MAX(A.REQ_LEN) - MAX(A.SUM_LEN)										AS LOSS_LEN			--LOSS폭
			 , ROUND((MAX(A.REQ_LEN) - MAX(A.SUM_LEN)) / MAX(A.REQ_LEN) * 100,1)	AS LOSS_RATE		--LOSS율
			--20181220 추가
			 , CASE WHEN ISNULL(C.WKORD_NUM, '') != '' THEN A.WORK_SHOP_CODE
					ELSE B.WORK_SHOP_CODE
			   END																	AS WORK_SHOP_CODE
			 , CASE WHEN ISNULL(C.WKORD_NUM, '') != '' THEN A.PRODT_WKORD_DATE
					ELSE GETDATE()
			   END																	AS PRODT_WKORD_DATE
			 , CASE WHEN ISNULL(C.WKORD_NUM, '') != '' THEN A.PRODT_START_DATE
					ELSE GETDATE()
			   END																	AS PRODT_START_DATE
			 , CASE WHEN ISNULL(C.WKORD_NUM, '') != '' THEN A.TOP_WKORD_NUM
					ELSE ''
			   END																	AS TOP_WKORD_NUM
		  FROM		 PIP300T A WITH(NOLOCK)
		  INNER JOIN BPR200T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
										   AND B.DIV_CODE	= A.DIV_CODE
										   AND B.ITEM_CODE	= A.ITEM_CODE
		   LEFT JOIN PMP200T C WITH(NOLOCK) ON C.COMP_CODE	= A.COMP_CODE
										   AND C.DIV_CODE	= A.DIV_CODE
										   AND C.ITEM_CODE	= A.ITEM_CODE
										   AND C.WKORD_NUM	= A.TOP_WKORD_NUM
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.ITEM_CODE	= #{ITEM_CODE}
		  GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ, A.STOCK_SEQ_EACH
				--20181220 추가
				 , A.WORK_SHOP_CODE, A.PRODT_WKORD_DATE, A.PRODT_START_DATE, A.TOP_WKORD_NUM
				 , B.WORK_SHOP_CODE
				 , C.WKORD_NUM
	</select>




	<!-- 원단재고정보 INSERT, UPDATE, DELETE -->
	<insert id="pip100ukrvServiceImpl.p200InsertDetail" parameterType="Map">
		INSERT INTO PIP200T(
			  COMP_CODE
			, DIV_CODE
			, ITEM_CODE
			, SEQ
			, REQ_LEN
			, STOCK_Q
			, LOT_NO
			, REMARK
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME
		)VALUES(
			  #{S_COMP_CODE}
			, #{DIV_CODE}
			, #{ITEM_CODE}
			, #{SEQ}
			, #{REQ_LEN}
			, #{STOCK_Q}
			, #{LOT_NO}
			, #{REMARK}
			, #{S_USER_ID}
			, GETDATE()
			, #{S_USER_ID}
			, GETDATE()
		)
	</insert>
	
	<update id="pip100ukrvServiceImpl.p200UpdateDetail" parameterType="Map">	
		UPDATE PIP200T
		   SET REQ_LEN		= #{REQ_LEN}
			  ,STOCK_Q		= #{STOCK_Q} 
			  ,LOT_NO		= #{LOT_NO}
			  ,REMARK		= #{REMARK}
			  ,UPDATE_DB_USER = #{S_USER_ID}
			  ,UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND SEQ			= #{SEQ}
	</update> 

	<update id="pip100ukrvServiceImpl.p200DeleteDetail" parameterType="Map">
		DELETE FROM PIP200T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE = #{DIV_CODE}
		   AND ITEM_CODE = #{ITEM_CODE}
		   AND SEQ = #{SEQ}
	</update>




	<!-- 절단 소요량 정보 INSERT, UPDATE, DELETE -->
	<insert id="pip100ukrvServiceImpl.p100InsertDetail" parameterType="Map">
		INSERT INTO PIP100T (
			  COMP_CODE
			, DIV_CODE
			, ITEM_CODE
			, CUT_ITEM_CODE
			, CALC_LEN
			, ORDER_Q
			, MRP_CONTROL_NUM
			, REMARK
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME
		)VALUES(
			  #{S_COMP_CODE}
			, #{DIV_CODE}
			, #{ITEM_CODE}
			, #{CUT_ITEM_CODE}
			, #{CALC_LEN}
			, #{ORDER_Q}
			, #{MRP_CONTROL_NUM}
			, #{REMARK}
			, #{S_USER_ID}
			, GETDATE()
			, #{S_USER_ID}
			, GETDATE()
		)
	</insert>
	
	<update id="pip100ukrvServiceImpl.p100UpdateDetail" parameterType="Map">	
		UPDATE PIP100T
		   SET CALC_LEN			= #{CALC_LEN}
			 , ORDER_Q			= #{ORDER_Q}
			 , REMARK			= #{REMARK}
			 , MRP_CONTROL_NUM	= #{MRP_CONTROL_NUM}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND CUT_ITEM_CODE= #{CUT_ITEM_CODE}
	</update>

	<update id="pip100ukrvServiceImpl.p100DeleteDetail" parameterType="Map">
		DELETE FROM PIP100T 
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND CUT_ITEM_CODE= #{CUT_ITEM_CODE}
	</update>



	<!-- 최적화 계산 SP -->
	<update id="pip100ukrvServiceImpl.spOptimizingCutOff" parameterType="Map" statementType="CALLABLE">
		<!--{call sp_test_PJW ( -->
		{call USP_PRODT_OptimizingCutOff (
			#{COMP_CODE	, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{DIV_CODE	, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ITEM_CODE	, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{EXEC_CNT	, mode=IN	, jdbcType=NUMERIC	, javaType=java.lang.Integer},
			#{USER_ID	, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ErrorDesc	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update>




	<!-- 작업지시 버튼 관련 로직 (20181220 - JW 재단작업지시 로직) -->
	<select id="pip100ukrvServiceImpl.insertPMP" parameterType="Map" resultType="rMap">
		BEGIN TRY
			DECLARE @compCode		NVARCHAR(08)
				  , @divCode		NVARCHAR(08)
				  , @itemCode		NVARCHAR(20)
				  , @workShopCode	NVARCHAR(08)
				  , @stockSeq		INT
				  , @stockSeqEach	INT
				  , @outStockNum	NVARCHAR(20)
				  , @topWkordNum	NVARCHAR(20)
				  , @wkordNum		NVARCHAR(20)
				  , @prodtWkordDate	NVARCHAR(08)
				  , @prodtStartDate	NVARCHAR(08)
				  , @wkordQ			NUMERIC(12 ,6)		--UNIT_Q를 구하기 위해 작업지시 정보 첫번째 값의 작업지시량을 입력할 변수
				  , @USER_ID		NVARCHAR(100)
				  , @remark			NVARCHAR(1000)

				SET @compCode		= #{S_COMP_CODE}
				SET @divCode		= #{DIV_CODE}
				SET @itemCode		= #{ITEM_CODE}
				SET @workShopCode	= #{WORK_SHOP_CODE}
				SET @stockSeq		= #{STOCK_SEQ}
				SET @stockSeqEach	= #{STOCK_SEQ_EACH}
				SET @USER_ID		= #{S_USER_ID}
				SET @remark			= #{REMARK}

				SET @prodtWkordDate	= #{PRODT_WKORD_DATE}
				SET @prodtStartDate	= #{PRODT_START_DATE}



			--1-1 OUTSTOCK_NUM 채번로직
			EXEC uniLITE.SP_GetAutoNumComp @compCode, @divCode, 'PMP300T', 'P', @prodtWkordDate, '1', @outStockNum OUTPUT


			--1-2 TOP_WKORD_NUM 채번로직
			EXEC uniLITE.SP_GetAutoNumComp @compCode, @divCode, 'PMP100T', 'P', @prodtWkordDate, '1', @topWkordNum OUTPUT


			--2-1 출고요청정보(PMP300T)에 데이터 INSERT
			IF SUBSTRING(@workShopCode, 3,4) &lt; 90
				BEGIN
					--PIP300T: COMP_CODE, DIV_CODE, ITEM_CODE, STOCK_SEQ, STOCK_SEQ_EACH, REQ_LEN(전체 폭), SEQ
					INSERT INTO PMP300T (
						  COMP_CODE				, DIV_CODE			, OUTSTOCK_NUM		, WORK_SHOP_CODE	, ITEM_CODE		, PATH_CODE  
						, OUTSTOCK_REQ_DATE		, OUTSTOCK_REQ_Q	, OUTSTOCK_Q		, CONTROL_STATUS	, CANCEL_Q
						, REMARK				, REF_WKORD_NUM		, PROJECT_NO		, LOT_NO  
						, OUTSTOCK_REQ_PRSN		, AGREE_STATUS		, AGREE_PRSN		, AGREE_DATE		, TEMPN_01  
						, INSERT_DB_USER		, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME
					)
					SELECT A.COMP_CODE									AS COMP_CODE
						 , A.DIV_CODE									AS DIV_CODE
						 , @outStockNum									AS OUTSTOCK_NUM
						 , @workShopCode								AS WORK_SHOP_CODE
						 , A.ITEM_CODE									AS ITEM_CODE
						 , '0'											AS PATH_CODE
						 , @prodtWkordDate								AS OUTSTOCK_REQ_DATE	--작업지시일
						 , 1 * ISNULL(B.TRNS_RATE, 1)					AS OUTSTOCK_REQ_Q								--확인필요
						 , 0											AS OUTSTOCK_Q									--확인필요
						 , '3'											AS CONTROL_STATUS		--진행상태(3: 진행)
						 , 0											AS CANCEL_Q
						 , @remark										AS REMARK
						 , @topWkordNum									AS REF_WKORD_NUM
						 , ''											AS PROJECT_NO
						 , A.LOT_NO										AS LOT_NO
						 , ''											AS OUTSTOCK_REQ_PRSN
						 , '2'											AS AGREE_STATUS									--확인 필요(2: 승인)
						 , ''											AS AGREE_PRSN
						 , GETDATE()									AS AGREE_DATE									--확인 필요(2: 승인)
						 , 1											AS TEMPN_01				--ROLL_CNT
						 , A.INSERT_DB_USER								AS INSERT_DB_USER
						 , GETDATE()									AS INSERT_DB_TIME
						 , A.UPDATE_DB_USER								AS UPDATE_DB_USER
						 , GETDATE()									AS UPDATE_DB_TIME
					  FROM		 PIP300T A  WITH(NOLOCK)
					  INNER JOIN BPR200T B  WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
														AND B.DIV_CODE	= A.DIV_CODE
														AND B.ITEM_CODE	= A.ITEM_CODE
					 WHERE A.COMP_CODE		= @compCode
					   AND A.DIV_CODE		= @divCode
					   AND A.ITEM_CODE		= @itemCode
					   AND A.STOCK_SEQ		= @stockSeq
					   AND A.STOCK_SEQ_EACH	= @stockSeqEach
					 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ	--, A.STOCK_SEQ_EACH, A.CUT_ITEM_CODE, A.CALC_LEN
							, A.REQ_LEN, A.SUM_LEN, A.JAN_LEN, A.LOT_NO								--자재예약 LOT_NO
							, A.INSERT_DB_USER, A.UPDATE_DB_USER
							, B.TRNS_RATE
				END

			--2-2 자재예약정보(PMP200T)에 데이터 INSERT
			--2-2-1 UNIT_Q를 구하기 위해 작업지시 정보 첫번째 값의 작업지시량을 가져옴
			SELECT @wkordQ = X.WKORD_Q
			  FROM (
					SELECT ROW_NUMBER() OVER(ORDER BY A.CUT_ITEM_CODE)		AS ROWNUM
							, ISNULL(C1.TRNS_RATE, 0) * COUNT(A.COMP_CODE)	AS WKORD_Q
						FROM	   PIP300T A  WITH(NOLOCK)
						INNER JOIN BPR200T C1 WITH(NOLOCK) ON C1.COMP_CODE		= A.COMP_CODE
														AND C1.DIV_CODE			= A.DIV_CODE
														AND C1.ITEM_CODE		= A.CUT_ITEM_CODE
					 WHERE A.COMP_CODE		= @compCode
					   AND A.DIV_CODE		= @divCode
					   AND A.ITEM_CODE		= @itemCode
					   AND A.STOCK_SEQ		= @stockSeq
					   AND A.STOCK_SEQ_EACH	= @stockSeqEach
					 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ, A.STOCK_SEQ_EACH, A.REQ_LEN, A.SUM_LEN, A.JAN_LEN
							, A.CUT_ITEM_CODE, A.CALC_LEN, A.LOT_NO--자재예약 LOT_NO
							, A.INSERT_DB_USER, A.UPDATE_DB_USER
							, C1.TRNS_RATE
					) X
			 WHERE X.ROWNUM = 1

			IF ISNULL(@wkordQ, 0) = 0
				SET @wkordQ = 1

			--2-2-2 실제 자재예약정보(PMP200T)에 데이터 INSERT
			INSERT INTO PMP200T (
				  COMP_CODE, DIV_CODE, WKORD_NUM, ITEM_CODE, LOT_NO, PROJECT_NO
				, REMARK, TEMPC_01, TEMPN_01, WORK_SHOP_CODE, WH_CODE
				, PATH_CODE, OUT_METH, REF_TYPE  
				, ONHAND_Q, IN_PLAN_Q, OUT_PLAN_Q  
				, ALLOCK_Q, UNIT_Q, LOSS_RATE  
				, OUTSTOCK_REQ_DATE, OUTSTOCK_REQ_Q, OUTSTOCK_NUM
				, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME
			)
			SELECT A.COMP_CODE									AS COMP_CODE
				 , A.DIV_CODE									AS DIV_CODE
				 , @topWkordNum									AS WKORD_NUM			--TOP_WKORD_NUM을 WKORD_NUM에 입력
				 , A.ITEM_CODE									AS ITEM_CODE
				 , A.LOT_NO										AS LOT_NO
				 , ''											AS PROJECT_NO
				 , @remark										AS REMARK
				 , D1.WH_CODE									AS TEMPC_01
				 --, A.STOCK_SEQ_EACH
				 , 1											AS TEMPN_01
				 , @workShopCode								AS WORK_SHOP_CODE
				 , D1.WH_CODE									AS WH_CODE
				 , '0'											AS PATH_CODE
				 , '1'											AS OUT_METH
				 , ''											AS REF_TYPE
				 , 0											AS ONHAND_Q
				 , 0											AS IN_PLAN_Q
				 , 0											AS OUT_PLAN_Q
				 --확인 필요
				 , 1 * ISNULL(B.TRNS_RATE, 1)					AS ALLOC_Q
				 , 1 * ISNULL(B.TRNS_RATE, 1) / @wkordQ			AS UNIT_Q				--요청량 / 첫번째 작업지시량
				 , 0											AS LOSS_RATE
				 , @prodtWkordDate								AS OUTSTOCK_REQ_DATE	--작업지시일
				 , 1 * ISNULL(B.TRNS_RATE, 1)					AS OUTSTOCK_REQ_Q
				 , @outStockNum									AS OUTSTOCK_NUM
				 , A.INSERT_DB_USER								AS INSERT_DB_USER
				 , GETDATE()									AS INSERT_DB_TIME
				 , A.UPDATE_DB_USER								AS UPDATE_DB_USER
				 , GETDATE()									AS UPDATE_DB_TIME
			  FROM		 PIP300T A  WITH(NOLOCK)
			  INNER JOIN BPR200T B  WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
												AND B.DIV_CODE	= A.DIV_CODE
												AND B.ITEM_CODE	= A.ITEM_CODE
			  INNER JOIN BSA230T D1 WITH(NOLOCK) ON D1.COMP_CODE= A.COMP_CODE
												AND D1.TREE_CODE= @workShopCode
			 WHERE A.COMP_CODE		= @compCode
			   AND A.DIV_CODE		= @divCode
			   AND A.ITEM_CODE		= @itemCode
			   AND A.STOCK_SEQ		= @stockSeq
			   AND A.STOCK_SEQ_EACH	= @stockSeqEach
			 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ	--, A.STOCK_SEQ_EACH, A.CUT_ITEM_CODE, A.CALC_LEN
					, A.REQ_LEN, A.SUM_LEN, A.JAN_LEN, A.LOT_NO								--자재예약 LOT_NO
					, A.INSERT_DB_USER, A.UPDATE_DB_USER
					, B.TRNS_RATE
					, D1.WH_CODE


			--2-3 작업지시정보(PMP100T)에 데이터 INSERT
			DECLARE @maxReNum	INT
				  , @count		INT

			--2-3-1 작업지시에 입력할 데이터 행수 체크
			SELECT @maxReNum = MAX(ROWNUM)
			  FROM (
					SELECT ROW_NUMBER() OVER(ORDER BY A.CUT_ITEM_CODE) AS ROWNUM
					  FROM PIP300T A  WITH(NOLOCK)
					 WHERE A.COMP_CODE		= @compCode
					   AND A.DIV_CODE		= @divCode
					   AND A.ITEM_CODE		= @itemCode
					   AND A.STOCK_SEQ		= @stockSeq
					   AND A.STOCK_SEQ_EACH	= @stockSeqEach
					 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ, A.STOCK_SEQ_EACH, A.REQ_LEN, A.SUM_LEN, A.JAN_LEN
							, A.CUT_ITEM_CODE, A.CALC_LEN, A.LOT_NO--자재예약 LOT_NO
							, A.INSERT_DB_USER, A.UPDATE_DB_USER
			  ) X

			--2-3-2 체크한 행의 수만큼 루프 돌면서 해당 데이터 INSERT / 작업지시생성 (SP_PRODT_WorkOrders_JW)
			IF @maxReNum != 0
				BEGIN
					SET @count = 0
					WHILE @count &lt; @maxReNum
						BEGIN
							IF @count = 0
								BEGIN
									--2-3-2-1 첫 번째 작업지시 정보에는 TOP_WKORD_NUM과 WKORD_NUM을 동일하게 입력
									SET @wkordNum = @topWkordNum
								END
							ELSE
								BEGIN
									--2-3-2-2 첫 번째 작업지시 정보가 아닐 때는 채번하여 입력
									EXEC uniLITE.SP_GetAutoNumComp @compCode, @divCode, 'PMP100T', 'P', @prodtWkordDate, '1', @wkordNum OUTPUT
								END

							--2-3-2-3 한 행씩 PMP100T에 INSERT
							INSERT INTO PMP100T (
								  COMP_CODE			, TOP_WKORD_NUM		, WKORD_NUM			, DIV_CODE
								, ITEM_CODE			, LOT_NO			, PROJECT_NO		, WK_PLAN_NUM
								, REMARK			, TEMPN_01			, WKORD_Q
								, PRODT_START_DATE	, PRODT_END_DATE	, PRODT_WKORD_DATE
								, WORK_SHOP_CODE	, PROG_WORK_CODE	, PROG_UNIT									--PBS200T
								, LINE_SEQ			, PROG_RATE			, PROG_UNIT_Q		, LINE_END_YN			--PBS300T
								, INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME 
							)
							SELECT X.COMP_CODE
								 , X.TOP_WKORD_NUM
								 , X.WKORD_NUM
								 , X.DIV_CODE
								 , X.ITEM_CODE
								 , X.LOT_NO
								 , X.PROJECT_NO
								 , X.WK_PLAN_NUM
								 , X.REMARK
								 , X.ROLL_CNT		--TEMPN_01에 INSERT
								 , X.WKORD_Q
								 , X.PRODT_START_DATE	
								 , X.PRODT_END_DATE
								 , X.PRODT_WKORD_DATE
								 , X.WORK_SHOP_CODE
								 , X.PROG_WORK_CODE
								 , X.PROG_UNIT
								 , X.LINE_SEQ
								 , X.PROG_RATE
								 , X.PROG_UNIT_Q
								 , X.LINE_END_YN
								 , X.INSERT_DB_USER
								 , X.INSERT_DB_TIME
								 , X.UPDATE_DB_USER
								 , X.UPDATE_DB_TIME
							  FROM (
									SELECT ROW_NUMBER() OVER(ORDER BY A.CUT_ITEM_CODE)		AS ROWNUM
											, A.COMP_CODE									AS COMP_CODE
											, @topWkordNum									AS TOP_WKORD_NUM
											, @wkordNum										AS WKORD_NUM
											, A.DIV_CODE									AS DIV_CODE
											, A.CUT_ITEM_CODE								AS ITEM_CODE
											--, A.LOT_NO
											, ''											AS LOT_NO
											, ''											AS PROJECT_NO
											, ''											AS WK_PLAN_NUM
											, @remark										AS REMARK
											, COUNT(A.COMP_CODE)							AS ROLL_CNT		--TEMPN_01에 INSERT
											, ISNULL(C1.TRNS_RATE, 0) * COUNT(A.COMP_CODE)	AS WKORD_Q
											, @prodtStartDate								AS PRODT_START_DATE	
											, @prodtStartDate								AS PRODT_END_DATE
											, @prodtWkordDate								AS PRODT_WKORD_DATE
											, @workShopCode									AS WORK_SHOP_CODE
											, P1.PROG_WORK_CODE								AS PROG_WORK_CODE
											, P1.PROG_UNIT									AS PROG_UNIT
											, ISNULL(P2.LINE_SEQ, 1)						AS LINE_SEQ
											, ISNULL(P2.PROG_RATE, 100)						AS PROG_RATE
											, ISNULL(P2.PROG_UNIT_Q, 1)						AS PROG_UNIT_Q
											, CASE WHEN ISNULL(P2.LINE_SEQ, 1) = MAX(ISNULL(P2.LINE_SEQ, 1)) THEN 'Y'
												ELSE 'N'
											  END											AS LINE_END_YN
											, A.INSERT_DB_USER								AS INSERT_DB_USER
											, GETDATE()										AS INSERT_DB_TIME
											, A.UPDATE_DB_USER								AS UPDATE_DB_USER
											, GETDATE()										AS UPDATE_DB_TIME
										FROM		 PIP300T A  WITH(NOLOCK)
										INNER JOIN BPR200T C1 WITH(NOLOCK) ON C1.COMP_CODE		= A.COMP_CODE
																		AND C1.DIV_CODE			= A.DIV_CODE
																		AND C1.ITEM_CODE		= A.CUT_ITEM_CODE
										LEFT JOIN PBS200T P1 WITH(NOLOCK) ON P1.COMP_CODE		= A.COMP_CODE
																		AND P1.DIV_CODE			= A.DIV_CODE
																		AND P1.WORK_SHOP_CODE	= @workShopCode
										LEFT JOIN PBS300T P2 WITH(NOLOCK) ON P2.COMP_CODE		= P1.COMP_CODE
																		AND P2.DIV_CODE			= P1.DIV_CODE
																		AND P2.ITEM_CODE		= @itemCode
																		AND P2.WORK_SHOP_CODE	= P1.WORK_SHOP_CODE
																		AND P2.PROG_WORK_CODE	= P1.PROG_WORK_CODE
									 WHERE A.COMP_CODE		= @compCode
									   AND A.DIV_CODE		= @divCode
									   AND A.ITEM_CODE		= @itemCode
									   AND A.STOCK_SEQ		= @stockSeq
									   AND A.STOCK_SEQ_EACH	= @stockSeqEach
									 GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.STOCK_SEQ, A.STOCK_SEQ_EACH, A.REQ_LEN, A.SUM_LEN, A.JAN_LEN
											, A.CUT_ITEM_CODE, A.CALC_LEN, A.LOT_NO--자재예약 LOT_NO
											, A.INSERT_DB_USER, A.UPDATE_DB_USER
											, C1.TRNS_RATE
											, P1.PROG_WORK_CODE, P1.PROG_UNIT
											, P2.LINE_SEQ, P2.PROG_RATE, P2.PROG_UNIT_Q
							  ) X
							 WHERE X.ROWNUM = @count + 1


							--2-3-2-4 INSERT 후 작업지시생성 SP(SP_PRODT_WorkOrders_JW) 실행
							DECLARE @ERROR_DESC		NVARCHAR(1000)		-- 에러메세지

							---------------------------------------------------------------------------
							-- Work Orders Process
							---------------------------------------------------------------------------
							EXEC	uniLITE.SP_PRODT_WorkOrders_JW	@compCode,	@divCode,	@wkordNum,
																	'',			@USER_ID,	@ERROR_DESC OUTPUT


							IF ISNULL(@ERROR_DESC, '') != ''
								RAISERROR(@ERROR_DESC, 16, 1)

							 SET @count = @count + 1
						END
				END
				
			--2-4 완료된 데이터 PIP300T에 UPDATE
			UPDATE PIP300T
			   SET WORK_SHOP_CODE	= @workShopCode
				 , PRODT_WKORD_DATE	= @prodtWkordDate
				 , PRODT_START_DATE	= @prodtStartDate
				 , TOP_WKORD_NUM	= @topWkordNum
			 WHERE COMP_CODE		= @compCode
			   AND DIV_CODE			= @divCode
			   AND ITEM_CODE		= @itemCode
			   AND STOCK_SEQ		= @stockSeq
			   AND STOCK_SEQ_EACH	= @stockSeqEach
		
		END TRY

		BEGIN CATCH
			SELECT CASE WHEN @ERROR_DESC > '' THEN @ERROR_DESC
						ELSE ISNULL(ERROR_MESSAGE(), '')
				   END											AS ERROR_CODE
		END CATCH
	</select>
</mapper>