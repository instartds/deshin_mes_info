<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ppl300ukrvServiceImpl">
	<select id="ppl300ukrvServiceImpl.selectMaster" parameterType="Map" resultType="rMap">

	/* ppl300ukrv.selectList1 */

	WITH TMP AS (
		SELECT  	  A.WORK_SHOP_CODE
					 ,A.EQU_CODE
 					 ,A.ITEM_CODE
 					 ,B.PROG_WORK_CODE
			FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM
			LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--COMP_CODE, DIV_CODE, EQU_CODE, ITEM_CODE
											 AND  A.DIV_CODE       = B.DIV_CODE
											 AND  A.EQU_CODE       = B.EQU_CODE
											 AND  A.ITEM_CODE      = B.ITEM_CODE
											 --AND  B.USE_YN     = 'Y'
			  WHERE A.COMP_CODE      = #{COMP_CODE}
			  	AND A.DIV_CODE   	 = #{DIV_CODE}
			  <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
			  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
			  </if>

		 	 	AND A.PLAN_START_DATE >= #{FROM_DATE}

			  <if test="@foren.Ognl@isNotEmpty(APS_NO)">
			   AND A.MRP_CONTROL_NUM  = #{APS_NO}
			  </if>
			  AND A.MRP_CONTROL_NUM  = ( SELECT MAX(MRP_CONTROL_NUM)
										 FROM PPL350T
										 WHERE COMP_CODE = A.COMP_CODE
										   AND DIV_CODE  = A.DIV_CODE
										   AND ORDER_NUM = A.ORDER_NUM
										   AND SEQ       = A.SEQ
										)
			  AND A.CONFIRM_YN		 != 'Y'
			  AND A.CONFIRM_YN		 != 'P'

			UNION ALL

			SELECT    A.WORK_SHOP_CODE
					 ,A.EQU_CODE
					 ,A.ITEM_CODE
					 ,B.PROG_WORK_CODE
			FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM

			LEFT JOIN EQU200T B WITH (NOLOCK)  ON B.COMP_CODE      = A.COMP_CODE
												  AND B.DIV_CODE       = A.DIV_CODE
												  AND B.EQU_CODE       = A.EQU_CODE
			  WHERE A.COMP_CODE      = #{COMP_CODE}
			  	AND A.DIV_CODE   	 = #{DIV_CODE}
			   <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
			  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
			  </if>
			--  AND B.USE_YN = 'Y'
			  	AND A.PLAN_START_DATE >= #{FROM_DATE}

			  	AND (A.CONFIRM_YN       = 'Y' OR A.CONFIRM_YN       = 'P')
	)

	SELECT  AA.SUCCESS
		   ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY AA.ORDER_NUM, AA.SEQ))			 								  AS EVENTS_ROWS_ID
		   ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT 1))) + '0'							 					  AS EVENTS_ROWS_RESOURCE_ID
		   ,AA.EVENTS_ROWS_NAME
		   ,AA.PLAN_START_TIME
		   ,AA.PLAN_END_TIME
		   ,AA.PLAN_START_DATE
		   ,AA.EVENTS_ROWS_START_DATE_OLD
		   ,AA.EVENTS_ROWS_END_DATE_OLD
		   ,AA.EVENTS_ROWS_ICONCLS
		   ,AA.RESOURCES_ROWS_ID
		   ,AA.RESOURCES_ROWS_NAME
		   ,AA.RESOURCES_ROWS_CATEGORY
		   ,AA.RESOURCES_ROWS_TYPE
		   ,AA.PROG_WORK_CODE
		   ,AA.EQU_CODE
		   ,AA.ORDER_NUM
		   ,AA.SEQ
		   ,AA.WK_PLAN_NUM
		   ,AA.LOT_NO
		   ,AA.SCHEDULE_NO
		   ,AA.LUNCH_START_TIME
		   ,AA.LUNCH_END_TIME
		   ,AA.MORNING_REST_START_TIME
		   ,AA.MORNING_REST_END_TIME
		   ,AA.AFTERNOON_REST_START_TIME
		   ,AA.AFTERNOON_REST_END_TIME
		   ,AA.OVER_REST_START_TIME
		   ,AA.OVER_REST_END_TIME
		   ,AA.EVENTS_ROWS_START_DATE
		   ,AA.EVENTS_ROWS_END_DATE
		   ,AA.FLAG
		   ,CONVERT(INT,AA.PLAN_TIME)																									AS	PLAN_TIME
		   ,CONVERT(INT,AA.ACT_SET_M)																									AS	ACT_SET_M
		   ,CONVERT(INT,AA.ACT_OUT_M)																									AS	ACT_OUT_M
		   ,AA.ITEM_NAME
	FROM
	(	  SELECT  'true' AS SUCCESS
				 ,A.TEMPC_01																							  AS EVENTS_ROWS_NAME
				 ,A.PLAN_START_TIME
				 ,A.PLAN_END_TIME
				 ,A.PLAN_START_DATE
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)				  AS EVENTS_ROWS_START_DATE_OLD
				 ,CONVERT(NVARCHAR,DATEADD(MI,60,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)								  AS EVENTS_ROWS_END_DATE_OLD
				 ,'B-FA B-FA-USERS'									 													  AS EVENTS_ROWS_ICONCLS
				 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(G.PROG_WORK_CODE, '')))) + '0'			 		  AS RESOURCES_ROWS_ID
				 ,ISNULL(G.PROG_WORK_CODE, '') + '/' +ISNULL(C.PROG_WORK_NAME, '')  								      	  AS RESOURCES_ROWS_NAME
				 ,ISNULL(G.PROG_WORK_CODE, '')							     											  	  		  AS RESOURCES_ROWS_CATEGORY
				 ,ISNULL(D.EQU_NAME, '')	 																  		  AS RESOURCES_ROWS_TYPE
				 ,G.PROG_WORK_CODE																						  AS PROG_WORK_CODE
				 ,A.EQU_CODE																				              AS EQU_CODE
				 ,A.ORDER_NUM
				 ,A.SEQ
				 ,A.WK_PLAN_NUM
				 ,A.LOT_NO
				 ,A.SCHEDULE_NO
				 ,E.LUNCH_START_TIME
				 ,E.LUNCH_END_TIME
				 ,E.MORNING_REST_START_TIME
				 ,E.MORNING_REST_END_TIME
				 ,E.AFTERNOON_REST_START_TIME
				 ,E.AFTERNOON_REST_END_TIME
				 ,E.OVER_REST_START_TIME
				 ,E.OVER_REST_END_TIME
				 ,A.DUMMY_START_TIME																						AS  EVENTS_ROWS_START_DATE
				 ,A.DUMMY_END_TIME   																						AS  EVENTS_ROWS_END_DATE
				 , '0'																										AS FLAG
				 , A.PLAN_TIME
				 , A.ACT_SET_M
				 , A.ACT_OUT_M
				 ,'' AS ITEM_NAME
			FROM PPL350T A  WITH (NOLOCK)
				LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = #{COMP_CODE}
													AND F.MAIN_CODE    = 'P200'
													AND F.SUB_CODE    != '$'
													AND F.SUB_CODE     = 'A1'
			    INNER JOIN	(SELECT EQU_CODE
						   		   ,MAX(ITEM_CODE) AS ITEM_CODE
								   ,MAX(WORK_SHOP_CODE) AS WORK_SHOP_CODE
								   ,MAX(PROG_WORK_CODE) AS PROG_WORK_CODE
					 		  FROM   TMP
					 		  GROUP BY EQU_CODE
							 ) G  ON A.EQU_CODE = G.EQU_CODE
								-- AND A.WORK_SHOP_CODE = G.WORK_SHOP_CODE

				LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE         --(공정정보)
												 AND C.DIV_CODE        = A.DIV_CODE
												 AND C.WORK_SHOP_CODE  = G.WORK_SHOP_CODE
												 AND C.PROG_WORK_CODE  = G.PROG_WORK_CODE
				LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
												 AND D.DIV_CODE        = A.DIV_CODE
												 AND D.EQU_CODE        = A.EQU_CODE
				LEFT JOIN (SELECT  COMP_CODE
	    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
									   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
					FROM BSA100T WITH (NOLOCK)
					WHERE MAIN_CODE = 'P202'
					  AND SUB_CODE != '$'
					GROUP BY COMP_CODE) E ON E.COMP_CODE = D.COMP_CODE

			WHERE A.DUMMY_YN = 'Y'

			UNION ALL


			SELECT  'true' AS SUCCESS

				 ,A3.ITEM_NAME + '/'
				 + ISNULL(CAST(A4.WK_PLAN_Q AS NVARCHAR),'') + '/'
				 + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),1,4)
				 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),5,2)
				 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),7,2)
				 + '/' + ISNULL(CAST(A.ORDER_Q AS NVARCHAR),'') AS EVENTS_ROWS_NAME
				 ,A.PLAN_START_TIME
				 ,A.PLAN_END_TIME
				 ,A.PLAN_START_DATE
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)						  AS EVENTS_ROWS_START_DATE_OLD
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)							  AS EVENTS_ROWS_END_DATE_OLD
				 ,'B-FA B-FA-USERS'									 															  AS EVENTS_ROWS_ICONCLS
				 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(B.PROG_WORK_CODE, '')))) + '0'			 		  AS RESOURCES_ROWS_ID
				 ,ISNULL(B.PROG_WORK_CODE, '') + '/' +ISNULL(C.PROG_WORK_NAME, '')  								      	  	  AS RESOURCES_ROWS_NAME
				 ,ISNULL(B.PROG_WORK_CODE, '')							     											  	  	  AS RESOURCES_ROWS_CATEGORY
				 ,ISNULL(D.EQU_NAME, '')	 																  		  			  AS RESOURCES_ROWS_TYPE
				 ,ISNULL(B.PROG_WORK_CODE, '')																					  AS PROG_WORK_CODE
				 ,ISNULL(A.EQU_CODE, '')																						  AS EQU_CODE
				 ,A.ORDER_NUM
				 ,A.SEQ
				 ,A.WK_PLAN_NUM
				 ,A.LOT_NO
				 ,A.SCHEDULE_NO
				 ,E.LUNCH_START_TIME
				 ,E.LUNCH_END_TIME
				 ,E.MORNING_REST_START_TIME
				 ,E.MORNING_REST_END_TIME
				 ,E.AFTERNOON_REST_START_TIME
				 ,E.AFTERNOON_REST_END_TIME
				 ,E.OVER_REST_START_TIME
				 ,E.OVER_REST_END_TIME
				 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
							DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)
					   ELSE
					          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME +  E.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_START_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   THEN DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + F.CODE_NAME)

									WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + F.CODE_NAME)
								   ELSE ''
							  END
				   END,120)																														AS  EVENTS_ROWS_START_DATE

				,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_END_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   THEN
									    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
											 THEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME+ E.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
											 ELSE  DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
                                        END

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>  CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   ELSE ''
							 END,120)																															AS  EVENTS_ROWS_END_DATE
							, '1'																																AS FLAG
							, A.PLAN_TIME
							, A.ACT_SET_M
							, A.ACT_OUT_M
							, A3.ITEM_NAME
		FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM
		LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE     = A4.COMP_CODE
										   AND A.DIV_CODE      = A4.DIV_CODE
										   AND A.WK_PLAN_NUM   = A4.WK_PLAN_NUM
		LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
										  AND A5.OUT_DIV_CODE  = A.DIV_CODE
										  AND A5.ORDER_NUM     = A.ORDER_NUM
										  AND A5.SER_NO        = A.SEQ
		LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
										  AND A1.DIV_CODE      = A5.DIV_CODE
										  AND A1.ORDER_NUM     = A5.ORDER_NUM
		LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
										  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
		LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
										  AND A3.ITEM_CODE     = A.ITEM_CODE
		LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--COMP_CODE, DIV_CODE, EQU_CODE, ITEM_CODE
										 AND  A.DIV_CODE       = B.DIV_CODE
										 AND  A.EQU_CODE       = B.EQU_CODE
										 AND  A.ITEM_CODE      = B.ITEM_CODE
										 --AND  B.USE_YN     = 'Y'
		LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE         --(공정정보)
										 AND C.DIV_CODE        = B.DIV_CODE
										 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
										 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
		LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
										 AND D.DIV_CODE        = A.DIV_CODE
										 AND D.EQU_CODE        = A.EQU_CODE
	    LEFT JOIN (SELECT  COMP_CODE
	    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
									   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
					FROM BSA100T WITH (NOLOCK)
					WHERE MAIN_CODE = 'P202'
					  AND SUB_CODE != '$'
					GROUP BY COMP_CODE) E ON E.COMP_CODE = D.COMP_CODE
			LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = E.COMP_CODE
												AND F.MAIN_CODE    = 'P200'
												AND F.SUB_CODE    != '$'
												AND F.SUB_CODE     = 'A1'
		  WHERE A.COMP_CODE      = #{COMP_CODE}
		  	AND A.DIV_CODE   	 = #{DIV_CODE}
		  <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		  </if>

	 	 	AND A.PLAN_START_DATE >= #{FROM_DATE}

		  <if test="@foren.Ognl@isNotEmpty(APS_NO)">
		   AND A.MRP_CONTROL_NUM  = #{APS_NO}
		  </if>
		  AND A.MRP_CONTROL_NUM  = ( SELECT MAX(MRP_CONTROL_NUM)
									 FROM PPL350T
									 WHERE COMP_CODE = A.COMP_CODE
									   AND DIV_CODE  = A.DIV_CODE
									   AND ORDER_NUM = A.ORDER_NUM
									   AND SEQ       = A.SEQ
									)
		   AND A.CONFIRM_YN		 != 'Y'
		   AND A.CONFIRM_YN		 != 'P'
		   AND A.DUMMY_YN != 'Y'

		UNION ALL

		SELECT  'true' AS SUCCESS

				 ,A3.ITEM_NAME + '/'
				 + ISNULL(CAST(A4.WK_PLAN_Q AS NVARCHAR),'') + '/'
				 + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),1,4)
				 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),5,2)
				 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),7,2)
				 + '/' + ISNULL(CAST(A.ORDER_Q AS NVARCHAR),'') AS EVENTS_ROWS_NAME
				 ,A.PLAN_START_TIME
				 ,A.PLAN_END_TIME
				 ,A.PLAN_START_DATE
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)							  AS EVENTS_ROWS_START_DATE_OLD
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)								  AS EVENTS_ROWS_END_DATE_OLD
				 ,'B-FA B-FA-USERS'									 																  AS EVENTS_ROWS_ICONCLS
				 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(B.PROG_WORK_CODE, '')))) + '0'			 		  AS RESOURCES_ROWS_ID
				 ,ISNULL(B.PROG_WORK_CODE, 'H120') + '/' +ISNULL(C.PROG_WORK_NAME, '')  								      	  AS RESOURCES_ROWS_NAME
				 ,ISNULL(B.PROG_WORK_CODE, '')							     											  	  		  AS RESOURCES_ROWS_CATEGORY
				 ,ISNULL(D.EQU_NAME, '')	 																  		  AS RESOURCES_ROWS_TYPE
				 ,ISNULL(B.PROG_WORK_CODE, 'H120')																					  AS PROG_WORK_CODE
				 ,ISNULL(A.EQU_CODE, 'M2303')																						  AS EQU_CODE
				 ,A.ORDER_NUM
				 ,A.SEQ
				 ,A.WK_PLAN_NUM
				 ,A.LOT_NO
				 ,A.SCHEDULE_NO
				 ,E.LUNCH_START_TIME
				 ,E.LUNCH_END_TIME
				 ,E.MORNING_REST_START_TIME
				 ,E.MORNING_REST_END_TIME
				 ,E.AFTERNOON_REST_START_TIME
				 ,E.AFTERNOON_REST_END_TIME
				 ,E.OVER_REST_START_TIME
				 ,E.OVER_REST_END_TIME
				 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
							DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)
					   ELSE
					          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME +  E.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_START_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   THEN DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + F.CODE_NAME)

									WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + F.CODE_NAME)
								   ELSE ''
							  END
				   END,120)																																			AS  EVENTS_ROWS_START_DATE
				,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_END_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
								   THEN
									    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
											 THEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME+ E.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
											 ELSE  DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
                                        END

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>  CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

								   ELSE ''
							 END,120)																															AS  EVENTS_ROWS_END_DATE
					, '1'																																AS FLAG
					, A.PLAN_TIME
					, A.ACT_SET_M
					, A.ACT_OUT_M
					, A3.ITEM_NAME
		FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM
		LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE     	   = A4.COMP_CODE
									       AND A.DIV_CODE          = A4.DIV_CODE
									   	   AND A.WK_PLAN_NUM       = A4.WK_PLAN_NUM
									   	   AND A.MRP_CONTROL_NUM   = A4.APS_NO
									   	   AND A.ORDER_NUM         = A4.ORDER_NUM
									   	   AND A.SEQ               = A4.SEQ
									   	   AND A.ITEM_CODE         = A4.ITEM_CODE
		LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
										  AND A5.OUT_DIV_CODE  = A.DIV_CODE
										  AND A5.ORDER_NUM     = A.ORDER_NUM
										  AND A5.SER_NO        = A.SEQ
		LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
										  AND A1.DIV_CODE      = A5.DIV_CODE
										  AND A1.ORDER_NUM     = A5.ORDER_NUM
		LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
										  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
		LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
										  AND A3.ITEM_CODE     = A.ITEM_CODE
		LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--COMP_CODE, DIV_CODE, EQU_CODE, ITEM_CODE
										 AND  A.DIV_CODE       = B.DIV_CODE
										 AND  A.EQU_CODE       = B.EQU_CODE
										 AND  A.ITEM_CODE      = B.ITEM_CODE
										 --AND  B.USE_YN     = 'Y'
		LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE         --(공정정보)
										 AND C.DIV_CODE        = B.DIV_CODE
										 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
										 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
		LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
										 AND D.DIV_CODE        = A.DIV_CODE
										 AND D.EQU_CODE        = A.EQU_CODE
	    LEFT JOIN (SELECT  COMP_CODE
	    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
									   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
					FROM BSA100T WITH (NOLOCK)
					WHERE MAIN_CODE = 'P202'
					  AND SUB_CODE != '$'
					GROUP BY COMP_CODE) E ON E.COMP_CODE = D.COMP_CODE
			LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = E.COMP_CODE
												AND F.MAIN_CODE    = 'P200'
												AND F.SUB_CODE    != '$'
												AND F.SUB_CODE     = 'A1'
		  WHERE A.COMP_CODE      = #{COMP_CODE}
		  	AND A.DIV_CODE   	 = #{DIV_CODE}
		   <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		  </if>

		--  AND B.USE_YN = 'Y'
		  	AND A.PLAN_START_DATE >= #{FROM_DATE}
			AND A.DUMMY_YN != 'Y'
		  	AND (A.CONFIRM_YN  = 'Y' OR A.CONFIRM_YN  = 'P')

     ) AA

		ORDER BY AA.PROG_WORK_CODE, AA.EQU_CODE ,AA.PLAN_START_DATE, AA.PLAN_START_TIME
	</select>

	<select id="ppl300ukrvServiceImpl.selectDummy" parameterType="Map" resultType="rMap">

		SELECT  'true' AS SUCCESS
				 ,A.TEMPC_01								  															  AS EVENTS_ROWS_NAME
				 ,A.PLAN_START_TIME
				 ,A.PLAN_END_TIME
				 ,A.PLAN_START_DATE
				 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)				  AS EVENTS_ROWS_START_DATE_OLD
				 ,CONVERT(NVARCHAR,DATEADD(MI,60,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)								  AS EVENTS_ROWS_END_DATE_OLD
				 ,'B-FA B-FA-USERS'									 													  AS EVENTS_ROWS_ICONCLS
				 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(D.PROG_WORK_CODE, '')))) + '0'		  AS RESOURCES_ROWS_ID
				 ,ISNULL(D.PROG_WORK_CODE, 'H120') + '/' +ISNULL(C.PROG_WORK_NAME, '')  							  AS RESOURCES_ROWS_NAME
				 ,ISNULL(D.PROG_WORK_CODE, '')							     											  AS RESOURCES_ROWS_CATEGORY
				 ,ISNULL(D.EQU_NAME, '')	 																  		 	  AS RESOURCES_ROWS_TYPE
				 ,D.PROG_WORK_CODE
				 ,A.EQU_CODE																				              AS EQU_CODE
				 ,D.EQU_NAME
				 ,A.ORDER_NUM
				 ,A.SEQ
				 ,A.WK_PLAN_NUM
				 ,A.LOT_NO
				 ,A.SCHEDULE_NO
				 ,'' as LUNCH_START_TIME
				 ,'' as LUNCH_END_TIME
				 ,'' as MORNING_REST_START_TIME
				 ,'' as MORNING_REST_END_TIME
				 ,'' as AFTERNOON_REST_START_TIME
				 ,'' as AFTERNOON_REST_END_TIME
				 ,'' as OVER_REST_START_TIME
				 ,'' as OVER_REST_END_TIME
				 ,A.DUMMY_START_TIME																						AS  EVENTS_ROWS_START_DATE
				 ,A.DUMMY_END_TIME   																						AS  EVENTS_ROWS_END_DATE
				 , '0'																										AS FLAG
				 , A.PLAN_TIME
				 , A.ACT_SET_M
				 , A.ACT_OUT_M
			FROM PPL350T A  WITH (NOLOCK)
				LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = 'master'
													AND F.MAIN_CODE    = 'P200'
													AND F.SUB_CODE    != '$'
													AND F.SUB_CODE     = 'A1'



				LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
												 AND D.DIV_CODE        = A.DIV_CODE
												 AND D.EQU_CODE        = A.EQU_CODE
				LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE        --공정 정보
											 AND C.DIV_CODE        = A.DIV_CODE
											 AND C.WORK_SHOP_CODE  = A.WORK_SHOP_CODE
											 AND C.PROG_WORK_CODE  = D.PROG_WORK_CODE
			WHERE A.DUMMY_YN = 'Y'


	</select>
	<select id="ppl300ukrvServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">
		/*ppl300ukrvServiceImpl.selectDetailList*/
		 WITH TMP AS (SELECT  A.EQU_CODE						            -- 설비코드
						    , A.ITEM_CODE									-- 품목코드
							, C.PROG_WORK_CODE
				FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블

				LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--설비별 생산 공수 등록 테이블
												 AND  A.DIV_CODE       = B.DIV_CODE
												 AND  A.EQU_CODE       = B.EQU_CODE
												 AND  A.ITEM_CODE      = B.ITEM_CODE
												 --AND  B.USE_YN     = 'Y'
				LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE        --공정 정보
												 AND C.DIV_CODE        = B.DIV_CODE
												 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
												 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE

				WHERE A.COMP_CODE      = #{S_COMP_CODE}
				  AND A.DIV_CODE   	   = #{DIV_CODE}

				--  AND B.USE_YN = 'Y'
				  AND A.PLAN_START_DATE >= #{FROM_DATE}
				 <if test="@foren.Ognl@isNotEmpty(APS_NO)">
				    AND A.MRP_CONTROL_NUM  = #{APS_NO}
				  </if>
				 <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
				  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
				  </if>
				   AND A.MRP_CONTROL_NUM  = ( SELECT MAX(MRP_CONTROL_NUM)
											  FROM PPL350T
											  WHERE COMP_CODE = A.COMP_CODE
											    AND DIV_CODE  = A.DIV_CODE
											    AND ORDER_NUM = A.ORDER_NUM
											    AND SEQ       = A.SEQ
											)
				  AND A.CONFIRM_YN		 != 'Y'
				  AND A.CONFIRM_YN		 != 'P'

				 UNION ALL

		 			SELECT  A.EQU_CODE									-- 설비코드
						  , A.ITEM_CODE									-- 품목코드
						  , B.PROG_WORK_CODE
				FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블
				LEFT JOIN EQU200T B WITH (NOLOCK)  ON B.COMP_CODE      = A.COMP_CODE
												  AND B.DIV_CODE       = A.DIV_CODE
												  AND B.EQU_CODE       = A.EQU_CODE

				WHERE A.COMP_CODE        = #{S_COMP_CODE}
				  AND A.DIV_CODE   	     = #{DIV_CODE}
				--  AND B.USE_YN = 'Y'
				  AND A.PLAN_START_DATE >= #{FROM_DATE}
				  <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
				  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
				  </if>
				  AND (A.CONFIRM_YN		 = 'Y' OR  A.CONFIRM_YN		 = 'P')


			)

	  SELECT AA.SCHEDULE_NO
	        ,AA.ORDER_NUM
			,AA.SEQ
		    ,AA.WORK_SHOP_CODE
		    ,AA.WORK_SHOP_CODE_NM
		    ,AA.EQU_CODE
		    ,AA.EQU_NAME
		    ,AA.ITEM_CODE
		    ,AA.WKORD_YN
		    ,AA.ORDER_Q
		    ,AA.DVRY_DATE
		    ,AA.WK_PLAN_Q
		    ,AA.LOT_Q
		    ,AA.PLAN_START_DATE
		    ,AA.PLAN_START_TIME_OLD
		    ,AA.PLAN_END_DATE
		    ,AA.PLAN_END_TIME_OLD
		    ,AA.PLAN_TIME
		    ,AA.CYCLE_TIME
		    ,AA.WORK_MEN
		    ,AA.LOT_NO
		    ,AA.EVIDENCE_NO
		    ,AA.WKORD_NUM
		    ,AA.WKORD_Q
		    ,AA.PRODT_Q
		    ,AA.WK_PLAN_NUM
		    ,AA.ACT_SET_M
		    ,AA.ACT_OUT_M
		    ,AA.PLAN_START_TIME
		    ,AA.PLAN_END_TIME
			,AA.PROG_WORK_CODE
			,AA.CONFIRM_YN
			,AA.FIX_YN
			,CASE WHEN ISNULL(AA.DUMMY_YN,'') = '' THEN 'N' ELSE AA.DUMMY_YN END AS DUMMY_YN
			,AA.ITEM_NAME
			,CASE WHEN REPLACE(AA.DVRY_DATE,'.','') <![CDATA[<]]> ( SELECT MAX(PLAN_END_DATE)
						   											 FROM PPL350T
						   											 WHERE COMP_CODE = #{S_COMP_CODE}
						   											 AND DIV_CODE = #{DIV_CODE}
						   											 AND ORDER_NUM = AA.ORDER_NUM
						   											 AND SEQ = AA.SEQ
						   											 AND WORK_SHOP_CODE = 'WSH30'
						   											 AND EQU_CODE = AA.EQU_CODE)


		   	 THEN 'DELAY' ELSE 'NOT_DELAY' 						END AS DELAY_YN
	  FROM
		  (  	SELECT  A.SCHEDULE_NO							    -- 스케쥴 번호(PK)
					  , A.ORDER_NUM								    -- 수주번호
					  , A.SEQ									    -- 수주순번
					  , A.WORK_SHOP_CODE						    -- 작업장
					  , '' AS WORK_SHOP_CODE_NM						-- 작업장명
					  , A.EQU_CODE									-- 설비코드
				  	  , D.EQU_NAME									-- 설비명
					  , A.ITEM_CODE									-- 품목코드
					  , CASE WHEN  A.CONFIRM_YN = 'Y'  THEN 'true' ELSE 'false' END AS CONFIRM_YN -- 확정여부
					  , CASE WHEN  A.CONFIRM_YN = 'P' OR A.CONFIRM_YN = 'Y' THEN 'true' ELSE 'false' END AS FIX_YN     -- 고정여부
					  , 'N' AS WKORD_YN									-- 작지여부
					  , A.ORDER_Q									-- 누적계획량
					  , '' 		AS DVRY_DATE						-- 납기일
					  , 0 AS WK_PLAN_Q								-- 계획량
					  , A.LOT_Q										-- LOT 분할
					  , A.PLAN_START_DATE							-- 시작일
					  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE  + ' ' + H.CODE_NAME),120),'-','.') AS PLAN_START_TIME_OLD					    -- 시작시간
					  , A.PLAN_END_DATE								-- 종료일
					  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE  + ' ' + H.CODE_NAME),120),'-','.')     AS PLAN_END_TIME_OLD							-- 종료시간
					  , A.PLAN_TIME									-- 제조시간
					  , CASE WHEN A.WORK_SHOP_CODE = 'WSH10' THEN B.MULTI_PRODT_CT ELSE A.CYCLE_TIME END AS CYCLE_TIME							-- 개별 CT
					  , A.WORK_MEN									-- 작업인원
					  , A.LOT_NO									-- LOT_NO
					  , A.MRP_CONTROL_NUM AS EVIDENCE_NO			-- 실행근거번호
					  , '' AS WKORD_NUM									-- 작지번호
					  , 0  AS WKORD_Q               					-- 지시량
					  , 0  AS PRODT_Q									-- 실적수량
					  , '' AS WK_PLAN_NUM								-- 생산계획번호
					  , 0  AS ACT_SET_M
					  , 0  AS ACT_OUT_M
					  ,A.DUMMY_START_TIME					AS PLAN_START_TIME
					  ,A.DUMMY_END_TIME   			    	AS PLAN_END_TIME
					  ,I.PROG_WORK_CODE
					  ,A.DUMMY_YN
					  ,'' AS ITEM_NAME
			FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블

			LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--설비별 생산 공수 등록 테이블
											 AND  A.DIV_CODE       = B.DIV_CODE
											 AND  A.EQU_CODE       = B.EQU_CODE
											 AND  A.WORK_SHOP_CODE = B.WORK_SHOP_CODE
											 AND  A.ITEM_CODE      = B.ITEM_CODE
											 --AND  B.USE_YN     = 'Y'
			LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE        --공정 정보
											 AND C.DIV_CODE        = B.DIV_CODE
											 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
											 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
			LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		--설비 기준 정보
											 AND  D.DIV_CODE       = A.DIV_CODE
											 AND  D.EQU_CODE       = A.EQU_CODE

			LEFT JOIN  BSA100T H WITH (NOLOCK)  ON  H.COMP_CODE    = A.COMP_CODE
											   AND H.MAIN_CODE    = 'P200'
											   AND H.SUB_CODE    != '$'
											   AND H.SUB_CODE     = 'A1'
			INNER JOIN			(SELECT EQU_CODE
							   		   ,PROG_WORK_CODE
									   ,MAX(ITEM_CODE) AS ITEM_CODE
						 		  FROM  TMP
						 		  GROUP BY EQU_CODE
								  ,PROG_WORK_CODE) I  ON I.EQU_CODE = A.EQU_CODE
			WHERE A.COMP_CODE      = #{S_COMP_CODE}
			  AND A.DIV_CODE   	   = #{DIV_CODE}

			  AND A.DUMMY_YN = 'Y'

		     UNION ALL


	  		SELECT  A.SCHEDULE_NO							    -- 스케쥴 번호(PK)
				  , A.ORDER_NUM								    -- 수주번호
				  , A.SEQ									    -- 수주순번
				  , A.WORK_SHOP_CODE						    -- 작업장
				  , E.TREE_NAME AS WORK_SHOP_CODE_NM			-- 작업장명
				  , A.EQU_CODE									-- 설비코드
			  	  , D.EQU_NAME									-- 설비명
				  , A.ITEM_CODE									-- 품목코드
				  , 'false'										    AS CONFIRM_YN -- 확정여부
				  , 'false' 										AS FIX_YN
				  , A4.WKORD_YN									-- 작지여부
				  , A.ORDER_Q									-- 누적계획량
				  , SUBSTRING (A5.DVRY_DATE,1,4) + '.' +  SUBSTRING (A5.DVRY_DATE,5,2) + '.' + SUBSTRING (A5.DVRY_DATE,7,2) AS	DVRY_DATE						-- 납기일
				  , A4.WK_PLAN_Q								-- 계획량
				  , A.LOT_Q										-- LOT 분할
				  , A.PLAN_START_DATE							-- 시작일
				  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' 08:30'),120),'-','.') AS PLAN_START_TIME_OLD					    -- 시작시간
				  , A.PLAN_END_DATE								-- 종료일
				  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' 08:30'),120),'-','.')     AS PLAN_END_TIME_OLD							-- 종료시간
				  , A.PLAN_TIME									-- 제조시간
				  , CASE WHEN A.WORK_SHOP_CODE = 'WSH10' THEN B.MULTI_PRODT_CT ELSE A.CYCLE_TIME END AS CYCLE_TIME							-- CYCLE타임
				  , A.WORK_MEN									-- 작업인원
				  , A.LOT_NO									-- LOT_NO
				  , A.MRP_CONTROL_NUM AS EVIDENCE_NO			-- 실행근거번호
				  , F.WKORD_NUM									-- 작지번호
				  , F.WKORD_Q               					-- 지시량
				  , F.PRODT_Q									-- 실적수량
				  , A4.WK_PLAN_NUM								-- 생산계획번호
				  , A.ACT_SET_M
				  , A.ACT_OUT_M
				 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
							DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)
					   ELSE
					          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME +  G.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_START_TIME + G.LUNCH_TIME + G.MORNING_REST_TIME + G.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   THEN DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + H.CODE_NAME)

									WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + H.CODE_NAME)
								   ELSE ''
							  END
				   END,120)																														AS  PLAN_START_TIME

				,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_END_TIME + G.LUNCH_TIME + G.MORNING_REST_TIME + G.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   THEN
									    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
											 THEN DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME+ G.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)
											 ELSE  DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)
                                        END

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)    <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   ELSE ''
							 END,120)																											AS PLAN_END_TIME
				 ,C.PROG_WORK_CODE
				 ,A.DUMMY_YN
				 ,A3.ITEM_NAME
		FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블
		LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE     = A4.COMP_CODE
										   AND A.DIV_CODE      = A4.DIV_CODE
										   AND A.WK_PLAN_NUM   = A4.WK_PLAN_NUM
		LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
										  AND A5.OUT_DIV_CODE  = A.DIV_CODE
										  AND A5.ORDER_NUM     = A.ORDER_NUM
										  AND A5.SER_NO        = A.SEQ
		LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
										  AND A1.DIV_CODE      = A5.DIV_CODE
										  AND A1.ORDER_NUM     = A5.ORDER_NUM
		LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
										  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
		LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
										  AND A3.ITEM_CODE     = A.ITEM_CODE
		LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--설비별 생산 공수 등록 테이블
										 AND  A.DIV_CODE       = B.DIV_CODE
										 AND  A.EQU_CODE       = B.EQU_CODE
										 AND  A.ITEM_CODE      = B.ITEM_CODE
										 --AND  B.USE_YN     = 'Y'
		LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE        --공정 정보
										 AND C.DIV_CODE        = B.DIV_CODE
										 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
										 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
		LEFT JOIN PMP100T F  WITH (NOLOCK) ON F.COMP_CODE      = B.COMP_CODE	    --작업지시 정보
										 AND  F.DIV_CODE       = B.DIV_CODE
										 AND  F.PROG_WORK_CODE = B.PROG_WORK_CODE
										 AND  F.WK_PLAN_NUM    = A.WK_PLAN_NUM
		LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		--설비 기준 정보
										 AND  D.DIV_CODE       = A.DIV_CODE
										 AND  D.EQU_CODE       = A.EQU_CODE
		LEFT JOIN BSA230T E  WITH (NOLOCK) ON E.COMP_CODE	   = A.COMP_CODE		--작업장 정보
										  AND E.TYPE_LEVEL     = A.DIV_CODE
										  AND E.TREE_CODE      = A.WORK_SHOP_CODE
		LEFT JOIN (SELECT  COMP_CODE
	    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
									   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
					FROM BSA100T WITH (NOLOCK)
					WHERE MAIN_CODE = 'P202'
					  AND SUB_CODE != '$'
					GROUP BY COMP_CODE) G ON G.COMP_CODE = E.COMP_CODE
			LEFT JOIN  BSA100T H WITH (NOLOCK)  ON  H.COMP_CODE    = E.COMP_CODE
												AND H.MAIN_CODE    = 'P200'
												AND H.SUB_CODE    != '$'
												AND H.SUB_CODE     = 'A1'
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE   	   = #{DIV_CODE}
		  AND A.DUMMY_YN != 'Y'

		--  AND B.USE_YN = 'Y'
		  AND A.PLAN_START_DATE 	 		  >= 	  #{FROM_DATE}
		 <if test="@foren.Ognl@isNotEmpty(APS_NO)">
		    AND A.MRP_CONTROL_NUM  = #{APS_NO}
		  </if>
		 <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		  </if>
		   AND A.MRP_CONTROL_NUM  = ( SELECT MAX(MRP_CONTROL_NUM)
									  FROM PPL350T
									  WHERE COMP_CODE = A.COMP_CODE
									    AND DIV_CODE  = A.DIV_CODE
									    AND ORDER_NUM = A.ORDER_NUM
									    AND SEQ       = A.SEQ
									)
		  AND A.CONFIRM_YN		 != 'Y'
		  AND A.CONFIRM_YN		 != 'P'

		 UNION ALL

 			SELECT  A.SCHEDULE_NO							    -- 스케쥴 번호(PK)
				  , A.ORDER_NUM								    -- 수주번호
				  , A.SEQ									    -- 수주순번
				  , A.WORK_SHOP_CODE						    -- 작업장
				  , E.TREE_NAME AS WORK_SHOP_CODE_NM			-- 작업장명
				  , A.EQU_CODE									-- 설비코드
			  	  , D.EQU_NAME									-- 설비명
				  , A.ITEM_CODE									-- 품목코드
				  , CASE WHEN  A.CONFIRM_YN = 'Y' AND ISNULL(A4.COMP_CODE,'') != ''
				  		 THEN 'true' ELSE 'false'
				  	END 							AS CONFIRM_YN -- 확정여부
				   , CASE WHEN  A.CONFIRM_YN = 'P' OR A.CONFIRM_YN = 'Y'
				  		 THEN 'true' ELSE 'false'
				  	END 							AS FIX_YN 	  -- 고정여부
				  , A4.WKORD_YN									-- 작지여부
				  , A.ORDER_Q									-- 누적계획량
				  , SUBSTRING (A5.DVRY_DATE,1,4) + '.' +  SUBSTRING (A5.DVRY_DATE,5,2) + '.' + SUBSTRING (A5.DVRY_DATE,7,2) AS	DVRY_DATE						-- 납기일
				  , A4.WK_PLAN_Q								-- 계획량
				  , A.LOT_Q										-- LOT 분할
				  , A.PLAN_START_DATE							-- 시작일
				  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' 08:30'),120),'-','.') AS PLAN_START_TIME_OLD					    -- 시작시간
				  , A.PLAN_END_DATE								-- 종료일
				  , REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' 08:30'),120),'-','.')     AS PLAN_END_TIME_OLD							-- 종료시간
				  , A.PLAN_TIME									-- 제조시간
				  , CASE WHEN A.WORK_SHOP_CODE = 'WSH10' THEN B.MULTI_PRODT_CT ELSE A.CYCLE_TIME END AS CYCLE_TIME			--CYCLE타임
				  , A.WORK_MEN									-- 작업인원
				  , A.LOT_NO									-- LOT_NO
				  , A.MRP_CONTROL_NUM AS EVIDENCE_NO			-- 실행근거번호
				  , F.WKORD_NUM									-- 작지번호
				  , F.WKORD_Q               					-- 지시량
				  , F.PRODT_Q									-- 실적수량
				  , A4.WK_PLAN_NUM								-- 생산계획번호
				  , A.ACT_SET_M
				  , A.ACT_OUT_M
			 	 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
							DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)
					   ELSE
					          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME +  G.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_START_TIME + G.LUNCH_TIME + G.MORNING_REST_TIME + G.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   THEN DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME + G.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + H.CODE_NAME)

									WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + H.CODE_NAME)
								   ELSE ''
							  END
				   END,120)																																AS  PLAN_START_TIME

				,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
								  THEN  DATEADD(MI,A.PLAN_END_TIME + G.LUNCH_TIME + G.MORNING_REST_TIME + G.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.LUNCH_START_TIME)
								   THEN
									    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.AFTERNOON_REST_START_TIME)
											 THEN DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME+ G.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)
											 ELSE  DATEADD(MI,A.PLAN_END_TIME + G.MORNING_REST_TIME + G.LUNCH_TIME, A.PLAN_START_DATE + ' ' + H.CODE_NAME)
                                        END

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)    <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + G.MORNING_REST_START_TIME)
								   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + H.CODE_NAME)

								   ELSE ''
							 END,120)																											AS PLAN_END_TIME
							 ,C.PROG_WORK_CODE
							 ,A.DUMMY_YN
							 ,A3.ITEM_NAME
		FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블
		LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE         = A4.COMP_CODE
										   AND A.DIV_CODE          = A4.DIV_CODE
										   AND A.WK_PLAN_NUM       = A4.WK_PLAN_NUM
										   AND A.MRP_CONTROL_NUM   = A4.APS_NO
										   AND A.ORDER_NUM         = A4.ORDER_NUM
										   AND A.SEQ               = A4.SEQ
										   AND A.ITEM_CODE         = A4.ITEM_CODE
		LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
										  AND A5.OUT_DIV_CODE  = A.DIV_CODE
										  AND A5.ORDER_NUM     = A.ORDER_NUM
										  AND A5.SER_NO        = A.SEQ
		LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
										  AND A1.DIV_CODE      = A5.DIV_CODE
										  AND A1.ORDER_NUM     = A5.ORDER_NUM
		LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
										  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
		LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
										  AND A3.ITEM_CODE     = A.ITEM_CODE
		LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--설비별 생산 공수 등록 테이블
										 AND  A.DIV_CODE       = B.DIV_CODE
										 AND  A.EQU_CODE       = B.EQU_CODE
										 AND  A.ITEM_CODE      = B.ITEM_CODE
										 --AND  B.USE_YN     = 'Y'
		LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE        --공정 정보
										 AND C.DIV_CODE        = B.DIV_CODE
										 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
										 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
		LEFT JOIN PMP100T F  WITH (NOLOCK) ON F.COMP_CODE      = B.COMP_CODE	    --작업지시 정보
										 AND  F.DIV_CODE       = B.DIV_CODE
										 AND  F.PROG_WORK_CODE = B.PROG_WORK_CODE
										 AND  F.WK_PLAN_NUM    = A.WK_PLAN_NUM
		LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		--설비 기준 정보
										 AND  D.DIV_CODE       = A.DIV_CODE
										 AND  D.EQU_CODE       = A.EQU_CODE
		LEFT JOIN BSA230T E  WITH (NOLOCK) ON E.COMP_CODE	   = A.COMP_CODE		--작업장 정보
										  AND E.TYPE_LEVEL     = A.DIV_CODE
										  AND E.TREE_CODE      = A.WORK_SHOP_CODE
		LEFT JOIN (SELECT  COMP_CODE
	    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
									   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

						  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
						  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
						  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
						               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
					FROM BSA100T WITH (NOLOCK)
					WHERE MAIN_CODE = 'P202'
					  AND SUB_CODE != '$'
					GROUP BY COMP_CODE) G ON G.COMP_CODE = E.COMP_CODE
			LEFT JOIN  BSA100T H WITH (NOLOCK)  ON  H.COMP_CODE    = E.COMP_CODE
												AND H.MAIN_CODE    = 'P200'
												AND H.SUB_CODE    != '$'
												AND H.SUB_CODE     = 'A1'
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE   	   = #{DIV_CODE}
		  AND A.DUMMY_YN != 'Y'
		--  AND B.USE_YN = 'Y'
		  AND A.PLAN_START_DATE 	     >=      #{FROM_DATE}
		 <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		  </if>
		  AND (A.CONFIRM_YN		 = 'Y' OR  A.CONFIRM_YN		 = 'P')
    ) AA

	ORDER BY AA.PROG_WORK_CODE, AA.EQU_CODE , AA.PLAN_START_DATE, AA.PLAN_START_TIME

	</select>
	<select id="ppl300ukrvServiceImpl.selectDependencyList" parameterType="Map" resultType="rMap">

		/* ppl300ukrv.selectDependencyList */

    	IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#APS_TEMP'))
            DROP TABLE #APS_TEMP

    		CREATE TABLE #APS_TEMP(	 SUCCESS						  NVARCHAR(10)
									,EVENTS_ROWS_ID					  NVARCHAR(100)
									,EVENTS_ROWS_RESOURCE_ID		  NVARCHAR(100)
									,EVENTS_ROWS_NAME			      NVARCHAR(100)
									,PLAN_START_TIME			      NUMERIC(30,6)
									,PLAN_END_TIME					  NUMERIC(30,6)
									,PLAN_START_DATE				  NVARCHAR(8)
									,EVENTS_ROWS_START_DATE_OLD	      NVARCHAR(100)
									,EVENTS_ROWS_END_DATE_OLD         NVARCHAR(100)
									,EVENTS_ROWS_ICONCLS			  NVARCHAR(100)
									,RESOURCES_ROWS_ID				  NVARCHAR(100)
									,RESOURCES_ROWS_NAME			  NVARCHAR(100)
									,RESOURCES_ROWS_CATEGORY		  NVARCHAR(100)
									,RESOURCES_ROWS_TYPE			  NVARCHAR(100)
									,PROG_WORK_CODE			          NVARCHAR(10)
									,EQU_CODE						  NVARCHAR(10)
									,ORDER_NUM						  NVARCHAR(20)
									,SEQ							  NVARCHAR(10)
									,WK_PLAN_NUM					  NVARCHAR(20)
									,LOT_NO							  NVARCHAR(20)
									,SCHEDULE_NO					  NVARCHAR(20)
									,LUNCH_START_TIME				  NVARCHAR(20)
									,LUNCH_END_TIME				      NVARCHAR(20)
									,MORNING_REST_START_TIME		  NVARCHAR(20)
									,MORNING_REST_END_TIME			  NVARCHAR(20)
									,AFTERNOON_REST_START_TIME		  NVARCHAR(20)
									,AFTERNOON_REST_END_TIME		  NVARCHAR(20)
									,OVER_REST_START_TIME			  NVARCHAR(20)
									,OVER_REST_END_TIME				  NVARCHAR(20)
									,EVENTS_ROWS_START_DATE			  NVARCHAR(20)
									,EVENTS_ROWS_END_DATE			  NVARCHAR(20)
									,FLAG							  NVARCHAR(10)
									,PLAN_TIME						  NUMERIC(30,6)
									,ACT_SET_M						  NUMERIC(30,6)
									,ACT_OUT_M						  NUMERIC(30,6)
									,ITEM_NAME						  NVARCHAR(100)
				   				);

            INSERT INTO #APS_TEMP
			SELECT  AA.SUCCESS
				   ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY  AA.ORDER_NUM, AA.SEQ))			 											  AS EVENTS_ROWS_ID
				   ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT 1))) + '0'							 					  AS EVENTS_ROWS_RESOURCE_ID
				   ,AA.EVENTS_ROWS_NAME
				   ,AA.PLAN_START_TIME
				   ,AA.PLAN_END_TIME
				   ,AA.PLAN_START_DATE
				   ,AA.EVENTS_ROWS_START_DATE_OLD
				   ,AA.EVENTS_ROWS_END_DATE_OLD
				   ,AA.EVENTS_ROWS_ICONCLS
				   ,AA.RESOURCES_ROWS_ID
				   ,AA.RESOURCES_ROWS_NAME
				   ,AA.RESOURCES_ROWS_CATEGORY
				   ,AA.RESOURCES_ROWS_TYPE
				   ,AA.PROG_WORK_CODE
				   ,AA.EQU_CODE
				   ,AA.ORDER_NUM
				   ,AA.SEQ
				   ,AA.WK_PLAN_NUM
				   ,AA.LOT_NO
				   ,AA.SCHEDULE_NO
				   ,AA.LUNCH_START_TIME
				   ,AA.LUNCH_END_TIME
				   ,AA.MORNING_REST_START_TIME
				   ,AA.MORNING_REST_END_TIME
				   ,AA.AFTERNOON_REST_START_TIME
				   ,AA.AFTERNOON_REST_END_TIME
				   ,AA.OVER_REST_START_TIME
				   ,AA.OVER_REST_END_TIME
				   ,AA.EVENTS_ROWS_START_DATE
				   ,AA.EVENTS_ROWS_END_DATE
				   ,AA.FLAG
				   ,CONVERT(INT,AA.PLAN_TIME)																									AS	PLAN_TIME
				   ,CONVERT(INT,AA.ACT_SET_M)																									AS	ACT_SET_M
				   ,CONVERT(INT,AA.ACT_OUT_M)																									AS	ACT_OUT_M
				   ,AA.ITEM_NAME
			FROM
			(

					SELECT  'true' AS SUCCESS

						 ,A3.ITEM_NAME + '/'
						 + ISNULL(CAST(A4.WK_PLAN_Q AS NVARCHAR),'') + '/'
						 + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),1,4)
						 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),5,2)
						 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),7,2)
						 + '/' + ISNULL(CAST(A.ORDER_Q AS NVARCHAR),'') AS EVENTS_ROWS_NAME
						 ,A.PLAN_START_TIME
						 ,A.PLAN_END_TIME
						 ,A.PLAN_START_DATE
						 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)						  AS EVENTS_ROWS_START_DATE_OLD
						 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)							  AS EVENTS_ROWS_END_DATE_OLD
						 ,'B-FA B-FA-USERS'									 															  AS EVENTS_ROWS_ICONCLS
						 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(B.PROG_WORK_CODE, '')))) + '0'			 		  AS RESOURCES_ROWS_ID
						 ,ISNULL(B.PROG_WORK_CODE, '') + '/' +ISNULL(C.PROG_WORK_NAME, '')  								      	  	  AS RESOURCES_ROWS_NAME
						 ,ISNULL(B.PROG_WORK_CODE, '')							     											  	  	  AS RESOURCES_ROWS_CATEGORY
						 ,ISNULL(D.EQU_NAME, '')	 																  		  			  AS RESOURCES_ROWS_TYPE
						 ,ISNULL(B.PROG_WORK_CODE, '')																					  AS PROG_WORK_CODE
						 ,ISNULL(A.EQU_CODE, '')																						  AS EQU_CODE
						 ,A.ORDER_NUM
						 ,A.SEQ
						 ,A.WK_PLAN_NUM
						 ,A.LOT_NO
						 ,A.SCHEDULE_NO
						 ,E.LUNCH_START_TIME
						 ,E.LUNCH_END_TIME
						 ,E.MORNING_REST_START_TIME
						 ,E.MORNING_REST_END_TIME
						 ,E.AFTERNOON_REST_START_TIME
						 ,E.AFTERNOON_REST_END_TIME
						 ,E.OVER_REST_START_TIME
						 ,E.OVER_REST_END_TIME
						 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
									DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)
							   ELSE
							          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME +  E.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
										  THEN  DATEADD(MI,A.PLAN_START_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   THEN DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + F.CODE_NAME)

											WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + F.CODE_NAME)
										   ELSE ''
									  END
						   END,120)																														AS  EVENTS_ROWS_START_DATE

						,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
										  THEN  DATEADD(MI,A.PLAN_END_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   THEN
											    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
													 THEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME+ E.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
													 ELSE  DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
		                                        END

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>  CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   ELSE ''
									 END,120)																															AS  EVENTS_ROWS_END_DATE
									, '1'																																AS FLAG
									, A.PLAN_TIME
									, A.ACT_SET_M
									, A.ACT_OUT_M
									, A3.ITEM_NAME
				FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM
				LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE     = A4.COMP_CODE
												   AND A.DIV_CODE      = A4.DIV_CODE
												   AND A.WK_PLAN_NUM   = A4.WK_PLAN_NUM
				LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
												  AND A5.OUT_DIV_CODE  = A.DIV_CODE
												  AND A5.ORDER_NUM     = A.ORDER_NUM
												  AND A5.SER_NO        = A.SEQ
				LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
												  AND A1.DIV_CODE      = A5.DIV_CODE
												  AND A1.ORDER_NUM     = A5.ORDER_NUM
				LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
												  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
				LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
												  AND A3.ITEM_CODE     = A.ITEM_CODE
				LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--COMP_CODE, DIV_CODE, EQU_CODE, ITEM_CODE
												 AND  A.DIV_CODE       = B.DIV_CODE
												 AND  A.EQU_CODE       = B.EQU_CODE
												 AND  A.ITEM_CODE      = B.ITEM_CODE
												 --AND  B.USE_YN     = 'Y'
				LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE         --(공정정보)
												 AND C.DIV_CODE        = B.DIV_CODE
												 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
												 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
				LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
												 AND D.DIV_CODE        = A.DIV_CODE
												 AND D.EQU_CODE        = A.EQU_CODE
			    LEFT JOIN (SELECT  COMP_CODE
			    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
											   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
							FROM BSA100T WITH (NOLOCK)
							WHERE MAIN_CODE = 'P202'
							  AND SUB_CODE != '$'
							GROUP BY COMP_CODE) E ON E.COMP_CODE = D.COMP_CODE
					LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = E.COMP_CODE
														AND F.MAIN_CODE    = 'P200'
														AND F.SUB_CODE    != '$'
														AND F.SUB_CODE     = 'A1'
				  WHERE A.COMP_CODE      = #{COMP_CODE}
				  	AND A.DIV_CODE   	 = #{DIV_CODE}
				  <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
				  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
				  </if>

			 	 	AND A.PLAN_START_DATE >= #{FROM_DATE}

				  <if test="@foren.Ognl@isNotEmpty(APS_NO)">
				   AND A.MRP_CONTROL_NUM  = #{APS_NO}
				  </if>
				  AND A.MRP_CONTROL_NUM  = ( SELECT MAX(MRP_CONTROL_NUM)
											 FROM PPL350T
											 WHERE COMP_CODE = A.COMP_CODE
											   AND DIV_CODE  = A.DIV_CODE
											   AND ORDER_NUM = A.ORDER_NUM
											   AND SEQ       = A.SEQ
											)
				   AND A.CONFIRM_YN		 != 'Y'
				   AND A.CONFIRM_YN		 != 'P'
				   AND A.DUMMY_YN != 'Y'

				UNION ALL

				SELECT  'true' AS SUCCESS

						 ,A3.ITEM_NAME + '/'
						 + ISNULL(CAST(A4.WK_PLAN_Q AS NVARCHAR),'') + '/'
						 + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),1,4)
						 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),5,2)
						 + '.' + SUBSTRING(ISNULL(CAST(A5.DVRY_DATE AS NVARCHAR),''),7,2)
						 + '/' + ISNULL(CAST(A.ORDER_Q AS NVARCHAR),'') AS EVENTS_ROWS_NAME
						 ,A.PLAN_START_TIME
						 ,A.PLAN_END_TIME
						 ,A.PLAN_START_DATE
						 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME),120)							  AS EVENTS_ROWS_START_DATE_OLD
						 ,CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE + ' ' + F.CODE_NAME),120)								  AS EVENTS_ROWS_END_DATE_OLD
						 ,'B-FA B-FA-USERS'									 																  AS EVENTS_ROWS_ICONCLS
						 ,CONVERT(NVARCHAR(5),ROW_NUMBER() OVER(ORDER BY (SELECT ISNULL(B.PROG_WORK_CODE, '')))) + '0'			 		  AS RESOURCES_ROWS_ID
						 ,ISNULL(B.PROG_WORK_CODE, 'H120') + '/' +ISNULL(C.PROG_WORK_NAME, '')  								      	  AS RESOURCES_ROWS_NAME
						 ,ISNULL(B.PROG_WORK_CODE, '')							     											  	  		  AS RESOURCES_ROWS_CATEGORY
						 ,ISNULL(D.EQU_NAME, '')	 																  		  AS RESOURCES_ROWS_TYPE
						 ,ISNULL(B.PROG_WORK_CODE, 'H120')																					  AS PROG_WORK_CODE
						 ,ISNULL(A.EQU_CODE, 'M2303')																						  AS EQU_CODE
						 ,A.ORDER_NUM
						 ,A.SEQ
						 ,A.WK_PLAN_NUM
						 ,A.LOT_NO
						 ,A.SCHEDULE_NO
						 ,E.LUNCH_START_TIME
						 ,E.LUNCH_END_TIME
						 ,E.MORNING_REST_START_TIME
						 ,E.MORNING_REST_END_TIME
						 ,E.AFTERNOON_REST_START_TIME
						 ,E.AFTERNOON_REST_END_TIME
						 ,E.OVER_REST_START_TIME
						 ,E.OVER_REST_END_TIME
						 ,CONVERT(NVARCHAR,CASE WHEN A.PLAN_START_TIME = 0 THEN
									DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)
							   ELSE
							          CASE WHEN  DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME +  E.LUNCH_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
										  THEN  DATEADD(MI,A.PLAN_START_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   THEN DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										    WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN  DATEADD(MI,A.PLAN_START_TIME + E.MORNING_REST_TIME , A.PLAN_START_DATE + ' ' + F.CODE_NAME)

											WHEN DATEADD(MI,A.PLAN_START_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>   CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN  DATEADD(MI,A.PLAN_START_TIME  , A.PLAN_START_DATE + ' ' + F.CODE_NAME)
										   ELSE ''
									  END
						   END,120)																																			AS  EVENTS_ROWS_START_DATE
						,CONVERT(NVARCHAR,CASE WHEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
										  THEN  DATEADD(MI,A.PLAN_END_TIME + E.LUNCH_TIME + E.MORNING_REST_TIME + E.AFTERNOON_REST_TIME ,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   AND  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.LUNCH_START_TIME)
										   THEN
											    CASE WHEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.AFTERNOON_REST_START_TIME)
													 THEN DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME+ E.AFTERNOON_REST_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
													 ELSE  DATEADD(MI,A.PLAN_END_TIME + E.MORNING_REST_TIME + E.LUNCH_TIME, A.PLAN_START_DATE + ' ' + F.CODE_NAME)
		                                        END

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME) >= CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN  DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   WHEN DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)  <![CDATA[<]]>  CONVERT(DATETIME, A.PLAN_START_DATE + ' ' + E.MORNING_REST_START_TIME)
										   THEN   DATEADD(MI,A.PLAN_END_TIME,A.PLAN_START_DATE + ' ' + F.CODE_NAME)

										   ELSE ''
									 END,120)																															AS  EVENTS_ROWS_END_DATE
							, '1'																																AS FLAG
							, A.PLAN_TIME
							, A.ACT_SET_M
							, A.ACT_OUT_M
							, A3.ITEM_NAME
				FROM	  PPL350T A  WITH (NOLOCK)									        --COMP_CODE, DIV_CODE, WK_PLAN_NUM
				LEFT JOIN PPL100T A4  WITH (NOLOCK) ON A.COMP_CODE     	   = A4.COMP_CODE
											       AND A.DIV_CODE          = A4.DIV_CODE
											   	   AND A.WK_PLAN_NUM       = A4.WK_PLAN_NUM
											   	   AND A.MRP_CONTROL_NUM   = A4.APS_NO
											   	   AND A.ORDER_NUM         = A4.ORDER_NUM
											   	   AND A.SEQ               = A4.SEQ
											   	   AND A.ITEM_CODE         = A4.ITEM_CODE
				LEFT JOIN SOF110T A5 WITH (NOLOCK) ON A5.COMP_CODE     = A.COMP_CODE
												  AND A5.OUT_DIV_CODE  = A.DIV_CODE
												  AND A5.ORDER_NUM     = A.ORDER_NUM
												  AND A5.SER_NO        = A.SEQ
				LEFT JOIN SOF100T A1 WITH (NOLOCK) ON A1.COMP_CODE     = A5.COMP_CODE
												  AND A1.DIV_CODE      = A5.DIV_CODE
												  AND A1.ORDER_NUM     = A5.ORDER_NUM
				LEFT JOIN BCM100T A2 WITH (NOLOCK) ON A2.COMP_CODE     = A1.COMP_CODE
												  AND A2.CUSTOM_CODE   = A1.CUSTOM_CODE
				LEFT JOIN BPR100T A3 WITH (NOLOCK) ON A3.COMP_CODE     = A.COMP_CODE
												  AND A3.ITEM_CODE     = A.ITEM_CODE
				LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--COMP_CODE, DIV_CODE, EQU_CODE, ITEM_CODE
												 AND  A.DIV_CODE       = B.DIV_CODE
												 AND  A.EQU_CODE       = B.EQU_CODE
												 AND  A.ITEM_CODE      = B.ITEM_CODE
												 --AND  B.USE_YN     = 'Y'
				LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE         --(공정정보)
												 AND C.DIV_CODE        = B.DIV_CODE
												 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
												 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
				LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		  --설비 마스터
												 AND D.DIV_CODE        = A.DIV_CODE
												 AND D.EQU_CODE        = A.EQU_CODE
			    LEFT JOIN (SELECT  COMP_CODE
			    				  ,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END) 			  AS MORNING_REST_START_TIME  	--오전 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END) 			  AS MORNING_REST_END_TIME	  	--오전 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T1' THEN REF_CODE3 ELSE '' END),
											   MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE2 ELSE '' END)) AS MORNING_REST_TIME 			--오전 휴식 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END) 			  AS LUNCH_START_TIME  			--점심 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END) 			  AS LUNCH_END_TIME    			--점심 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T2' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE2 ELSE '' END)) AS LUNCH_TIME 				--점심 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END) 			  AS AFTERNOON_REST_START_TIME  --오후 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END) 			  AS AFTERNOON_REST_END_TIME	--오후 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T3' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE2 ELSE '' END)) AS AFTERNOON_REST_TIME        --오후 휴식 시간

								  ,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END) 			  AS OVER_REST_START_TIME		--야근 전 휴식 시작 시각
								  ,MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END) 			  AS OVER_REST_END_TIME         --야근 전 휴식 종료 시각
								  ,DATEDIFF(MI,MAX(CASE WHEN SUB_CODE = 'T4' THEN REF_CODE3 ELSE '' END),
								               MAX(CASE WHEN SUB_CODE = 'T5' THEN REF_CODE2 ELSE '' END)) AS OVER_REST_TIME             --야근 전 휴식 시간
							FROM BSA100T WITH (NOLOCK)
							WHERE MAIN_CODE = 'P202'
							  AND SUB_CODE != '$'
							GROUP BY COMP_CODE) E ON E.COMP_CODE = D.COMP_CODE
					LEFT JOIN  BSA100T F WITH (NOLOCK)  ON  F.COMP_CODE    = E.COMP_CODE
														AND F.MAIN_CODE    = 'P200'
														AND F.SUB_CODE    != '$'
														AND F.SUB_CODE     = 'A1'
				  WHERE A.COMP_CODE      = #{COMP_CODE}
				  	AND A.DIV_CODE   	 = #{DIV_CODE}
				   <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
				  	AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
				  </if>

				--  AND B.USE_YN = 'Y'
				  	AND A.PLAN_START_DATE >= #{FROM_DATE}
					AND A.DUMMY_YN != 'Y'
				  	AND (A.CONFIRM_YN  = 'Y' OR A.CONFIRM_YN  = 'P')

		     ) AA

				ORDER BY AA.PROG_WORK_CODE, AA.EQU_CODE ,AA.PLAN_START_DATE, AA.PLAN_START_TIME


					SELECT AA.ORDER_NUM
					 , AA.SEQ
					 , aa.DEPENDENCY_ID
					 , aa.FR_ID
					 , aa.TO_ID

				FROM
				(SELECT ROW_NUMBER() OVER (ORDER BY ORDER_NUM,SEQ )  AS DEPENDENCY_ID
					  ,CASE WHEN ROW_NUMBER() OVER (PARTITION BY ORDER_NUM, SEQ ORDER BY ORDER_NUM,SEQ ) = 1 THEN A.EVENTS_ROWS_ID ELSE A.EVENTS_ROWS_ID  END AS FR_ID
					  ,CASE WHEN ROW_NUMBER() OVER (PARTITION BY ORDER_NUM, SEQ ORDER BY ORDER_NUM,SEQ ) = (SELECT COUNT(1)
																											  FROM #APS_TEMP
																											WHERE ORDER_NUM = A.ORDER_NUM
																												AND SEQ		= A.SEQ
																											GROUP BY ORDER_NUM, SEQ)
					  THEN A.EVENTS_ROWS_ID ELSE A.EVENTS_ROWS_ID + 1 END AS TO_ID
					  ,ORDER_NUM
					  ,SEQ
				FROM #APS_TEMP A
				) AA
				--GROUP BY AA.ORDER_NUM, AA.SEQ
				ORDER BY AA.ORDER_NUM, AA.SEQ
	</select>

	<select id="ppl300ukrvServiceImpl.selectDummyDetailList" parameterType="Map" resultType="rMap">
		SELECT  A.SCHEDULE_NO							    -- 스케쥴 번호(PK)
					  , A.ORDER_NUM								    -- 수주번호
					  , A.SEQ									    -- 수주순번
					  , A.WORK_SHOP_CODE						    -- 작업장
					  , '' AS WORK_SHOP_CODE_NM						-- 작업장명
					  , A.EQU_CODE									-- 설비코드
				  	  , D.EQU_NAME									-- 설비명
					  , A.ITEM_CODE									-- 품목코드
					  , CASE WHEN  A.CONFIRM_YN = 'Y'  THEN 'true' ELSE 'false' END CONFIRM_YN -- 확정여부
					  , CASE WHEN  A.CONFIRM_YN = 'P' OR A.CONFIRM_YN = 'Y' THEN 'true' ELSE 'false' END AS FIX_YN     -- 고정여부
					  , 0 AS WKORD_YN									-- 작지여부
					  , A.ORDER_Q									-- 누적계획량
					  , '20210805' AS	DVRY_DATE						-- 납기일
					  , 0 AS WK_PLAN_Q								-- 계획량
					  , A.LOT_Q										-- LOT 분할
					  , A.PLAN_START_DATE							-- 시작일
					  , '' AS PLAN_START_TIME_OLD					    -- 시작시간
					  , A.PLAN_END_DATE								-- 종료일
					  , ''   AS PLAN_END_TIME_OLD							-- 종료시간
					  , A.PLAN_TIME									-- 제조시간
					  , B.SINGLE_PRODT_CT							-- 개별 CT
					  , A.WORK_MEN									-- 작업인원
					  , A.LOT_NO									-- LOT_NO
					  , A.MRP_CONTROL_NUM AS EVIDENCE_NO			-- 실행근거번호
					  , '' AS WKORD_NUM									-- 작지번호
					  , 0  AS WKORD_Q               					-- 지시량
					  , 0  AS PRODT_Q									-- 실적수량
					  , '' AS WK_PLAN_NUM								-- 생산계획번호
					  , 0  AS ACT_SET_M
					  , 0  AS ACT_OUT_M
					  ,A.DUMMY_START_TIME					AS PLAN_START_TIME
					  ,A.DUMMY_END_TIME   			    	AS PLAN_END_TIME
					  ,'' 								    AS PROG_WORK_CODE
					  ,A.DUMMY_YN
			FROM	  PPL350T A  WITH (NOLOCK)						--APS 결과 테이블

			LEFT JOIN PBS410T B  WITH (NOLOCK) ON A.COMP_CODE      = B.COMP_CODE		--설비별 생산 공수 등록 테이블
											 AND  A.DIV_CODE       = B.DIV_CODE
											 AND  A.EQU_CODE       = B.EQU_CODE
											 AND  A.ITEM_CODE      = B.ITEM_CODE
											 --AND  B.USE_YN     = 'Y'
			LEFT JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE      = B.COMP_CODE        --공정 정보
											 AND C.DIV_CODE        = B.DIV_CODE
											 AND C.WORK_SHOP_CODE  = B.WORK_SHOP_CODE
											 AND C.PROG_WORK_CODE  = B.PROG_WORK_CODE
			LEFT JOIN EQU200T D  WITH (NOLOCK) ON D.COMP_CODE	   = A.COMP_CODE		--설비 기준 정보
											 AND  D.DIV_CODE       = A.DIV_CODE
											 AND  D.EQU_CODE       = A.EQU_CODE

			WHERE A.COMP_CODE      = #{S_COMP_CODE}
			  AND A.DIV_CODE   	   = #{DIV_CODE}

			  AND A.DUMMY_YN = 'Y'
	</select>
	<select id="ppl300ukrvServiceImpl.selectApsInputRawDataList" parameterType="Map" resultType="rMap">

			DECLARE @USER_ID   NVARCHAR(10),	 /*  사용자 ID				   */
				@DIV_CODE  NVARCHAR(08),	 /*  사업장코드	  (조회조건)  */


		--		@FROM_DATE NVARCHAR(10),	 /*  요청납기일 FROM (조회조건)  */
		--		@TO_DATE   NVARCHAR(10),	 /*  요청납기일 TO   (조회조건)  */

				@WEEK_NUM_FR    NVARCHAR(07),  -- (필수) 계획주차 FROM
				@WEEK_NUM_TO    NVARCHAR(07),  -- (필수) 계획주차 TO

				@ORDER_NUM  NVARCHAR(20),	 /*  수주번호   (조회조건)  */
				@ITEM_CODE NVARCHAR(20),	 /*  품목코드  */
				@COMP_CODE NVARCHAR(08)	  /*  법인코드		(조회조건)  */

			SET @USER_ID	= 'unilite5'
			SET @DIV_CODE   = #{DIV_CODE}

			SET @ORDER_NUM  = ''


			SET @ITEM_CODE  = ''
			SET @COMP_CODE  = #{S_COMP_CODE}

		 SELECT
				CAST(0 AS BIT) GUBUN
			  , A.PLAN_TYPE
			  , ISNULL(M3.CODE_NAME, '') PLANTYPE_NAME
			  , A.ITEM_CODE
			  , uniLITE.fnItemNameComp(A.COMP_CODE, @USER_ID, A.ITEM_CODE) ITEM_NAME
			  , M1.SPEC
			  , M1.STOCK_UNIT
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.PROD_Q, 'Q_FSET_QS'), 0.0) PROD_Q
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.NOTREF_Q, 'Q_FSET_QS'), 0.0) NOTREF_Q
			  , ISNULL( A.PROD_END_DATE , '') PROD_END_DATE
			  , ISNULL( A.DVRY_DATE		, '') DVRY_DATE
			  , ISNULL( A.ORDER_DATE	, '') ORDER_DATE
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.ORDER_Q,  'Q_FSET_QS'), 0.0) ORDER_Q
			  , M2.CUSTOM_NAME
			  , A.SER_NO
			  , A.WORK_SHOP_CODE
			  , A.ORDER_NUM
			  , A.PROJECT_NO
			  , A.PJT_CODE
			  , M4.USER_NAME
			  , A.INSERT_DB_TIME
			  , A.WEEK_NUM
			  , A.INIT_DVRY_DATE
			  , A.REMARK
			  , A.PO_NUM
		   FROM (SELECT COMP_CODE
					  , PLAN_TYPE
					  , ORDER_NUM
					  , SER_NO
					  , ITEM_CODE
					  , CUSTOM_CODE
					  , WORK_SHOP_CODE
					  , PROJECT_NO
					  , PJT_CODE
					  , ORDER_DATE
					  , DVRY_DATE
					  , PROD_END_DATE
					  , ORDER_Q
					  , PROD_Q
					  , NOTREF_Q
					  , INSERT_DB_USER
					  , INSERT_DB_TIME
					  , WEEK_NUM
					  , INIT_DVRY_DATE
					  , REMARK
					  , PO_NUM
				   FROM SOF110TV1 WITH (NOLOCK)
				  WHERE COMP_CODE		= @COMP_CODE
					AND OUT_DIV_CODE	= @DIV_CODE
					AND ORDER_STATUS 	= 'N'
					AND STATUS	   		= '6'
			) A
											INNER JOIN BPR100T M1 WITH (NOLOCK)
													ON M1.COMP_CODE = A.COMP_CODE
												   AND M1.ITEM_CODE = A.ITEM_CODE
											INNER JOIN BCM100T M2 WITH (NOLOCK)
													ON M2.COMP_CODE   = A.COMP_CODE
												   AND M2.CUSTOM_CODE = A.CUSTOM_CODE
											 LEFT JOIN BSA100T M3 WITH (NOLOCK)
													ON M3.COMP_CODE = A.COMP_CODE
												   AND M3.MAIN_CODE = 'P402'
												   AND M3.SUB_CODE  = A.PLAN_TYPE	/*  생산계획 참조 유형 */
											LEFT JOIN  BSA300T M4 WITH(NOLOCK)
													ON M4.COMP_CODE = A.COMP_CODE
												   AND M4.USER_ID   = A.INSERT_DB_USER
		  WHERE 1=1
		  -- A.NOTREF_Q > 0.0

		  AND A.order_date >= '20210101'

		 -- AND A.ITEM_CODE   = '511800342'
		  AND
		  <foreach collection="ORDER_NUMS" item="item" separator="OR" close=")" open="(">
				   ( A.ORDER_NUM + CONVERT(VARCHAR(3),A.SER_NO) = '${item.ORDER_NUM}')
		  </foreach>
		  ORDER BY A.ORDER_NUM, A.SER_NO

	</select>

	<insert id="ppl300ukrvServiceImpl.insertEstiListPlan" parameterType="Map">
		/*ppl300ukrvServiceImpl.insertEstiListPlan*/
		/* bParam(5) = "S" '영업수주참조  */
		INSERT INTO MRP350T
			 (
			   COMP_CODE			, DIV_CODE				, MRP_CONTROL_NUM		, WORK_SHOP_CODE		, ITEM_CODE
			 , PROD_ITEM_CODE		, BASIS_DATE			, ORDER_PLAN_DATE		, PROD_Q				, ORDER_Q
			 , ORDER_NUM			, ORDER_SEQ				, CUSTOM_NAME			, PLAN_TYPE				, APPLY_TYPE
			 , PROJECT_NO			, PJT_CODE)
		VALUES
			 (
			   #{COMP_CODE}			, #{DIV_CODE}			, #{MRP_CONTROL_NUM}	, #{WORK_SHOP_CODE}		, #{ITEM_CODE}
			 , #{ITEM_CODE}			, #{PROD_END_DATE}		, #{PROD_END_DATE}		, #{ORDER_Q}			, #{ORDER_Q}
			 , #{ORDER_NUM}			, #{SER_NO}				, #{CUSTOM_NAME}		, #{PLAN_TYPE}			, 'P'
			 , #{PROJECT_NO}		, #{PJT_CODE})
 	</insert>

 	<update id="ppl300ukrvServiceImpl.spProdtPlan" parameterType="Map" statementType="CALLABLE">
		{call SP_PRODT_ProductionPlan_APS (
			#{KeyValue,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{PadStockYn, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{LangCode,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc,  mode=OUT,jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	 </update>

	 <select id="ppl300ukrvServiceImpl.selecApsKey" parameterType="Map" resultType="String">
	 	SELECT 'APS'+ LEFT(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR(30), GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '') + RIGHT(N'0000' + CONVERT(NVARCHAR, CONVERT(INT, RAND() * 10000)), 3), 17) AS LOGKEY
	 </select>

	<select id="ppl300ukrvServiceImpl.selectApsInputList" parameterType="Map" resultType="rMap">
		/*ppl300ukrvServiceImpl.selectApsInputList*/
		  SELECT  COMP_CODE
				  , DIV_CODE
				  , WORK_SHOP_CODE
				  , CASE WHEN WORK_SHOP_CODE = 'WSH10' THEN 'H120'
						 WHEN WORK_SHOP_CODE = 'WSH20' THEN 'H210'
						 WHEN WORK_SHOP_CODE = 'WSH30' THEN 'H310'
						 WHEN WORK_SHOP_CODE = 'WSK10' THEN 'K120'
						 WHEN WORK_SHOP_CODE = 'WSK15' THEN 'K150'
						 WHEN WORK_SHOP_CODE = 'WSK20' THEN 'K220'
						 ELSE 'H120'
					END										AS PROG_WORK_CODE
				  , ORDER_NUM
				  , SEQ
		  FROM T_PPL100T WITH (NOLOCK)
		  WHERE SCHEDULE_NUM = #{KeyValue}
		  GROUP BY COMP_CODE, DIV_CODE, WORK_SHOP_CODE, ORDER_NUM, SEQ
		  ORDER BY COMP_CODE, DIV_CODE, WORK_SHOP_CODE, ORDER_NUM, SEQ
	</select>



	<update id="ppl300ukrvServiceImpl.updatePST" parameterType="Map">

UPDATE T SET T.PRODT_END_DATE = ISNULL(TT.PRODT_END_DATE,T.PRODT_END_DATE)
		   , T.PRODT_TIME = ISNULL(TT.PRODT_TIME,T.PRODT_TIME)
FROM T_PPL100T T
INNER JOIN (
		SELECT
			 --MAX(C.BEFORE_END_TIME) AS BEFORE_END_TIME
			  SUBSTRING( MAX(C.BEFORE_END_TIME), 1, 8) AS PRODT_END_DATE
			 , SUBSTRING( MAX(C.BEFORE_END_TIME), 9, 5) AS PRODT_TIME
			 , MAX(A.SCHEDULE_NO) AS SCHEDULE_NO
		FROM    T_PPL100T A WITH(NOLOCK)
		LEFT JOIN MRP350T B WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE
										AND A.DIV_CODE  = B.DIV_CODE
										AND A.ITEM_CODE = B.PROD_ITEM_CODE
										AND A.ORDER_NUM = B.ORDER_NUM
										AND A.SEQ       = B.ORDER_SEQ
										AND B.MRP_CONTROL_NUM = #{MRP_CONTROL_NUM}
		LEFT JOIN (
				   SELECT A.COMP_CODE, A.DIV_CODE, A.ORDER_NUM, A.SEQ, A.ITEM_CODE
						--, MAX(REPLACE(CONVERT(NVARCHAR,DATEADD(MI,A.PLAN_END_TIME,A.PLAN_END_DATE  + ' ' + H.CODE_NAME),120),'-','.')) AS BEFORE_END_TIME
						, MAX(A.PLAN_END_DATE + CAST(FLOOR(A.PLAN_END_TIME) AS CHAR(10))) AS BEFORE_END_TIME
				   FROM       PPL350T A WITH(NOLOCK)
				   LEFT JOIN  BSA100T H WITH (NOLOCK)  ON  H.COMP_CODE    = A.COMP_CODE
													   AND H.MAIN_CODE    = 'P200'
													   AND H.SUB_CODE    != '$'
													   AND H.SUB_CODE     = 'A1'
					WHERE A.COMP_CODE = #{S_COMP_CODE}
					AND   A.DIV_CODE  = #{DIV_CODE}
					AND   A.MRP_CONTROL_NUM = #{APS_KEY}
					AND   A.ORDER_NUM = #{ORDER_NUM}
					AND   A.SEQ = #{SEQ}
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE, A.ORDER_NUM, A.SEQ
				 ) C ON B.COMP_CODE = C.COMP_CODE
					AND B.DIV_CODE  = C.DIV_CODE
					AND B.ORDER_NUM = C.ORDER_NUM
					AND B.ORDER_SEQ = C.SEQ
					AND B.ITEM_CODE = C.ITEM_CODE

		WHERE A.SCHEDULE_NUM = #{MRP_CONTROL_NUM}
		AND   A.ORDER_NUM = #{ORDER_NUM}
		AND   A.SEQ = #{SEQ}
		GROUP BY A.ITEM_CODE
) TT ON TT.SCHEDULE_NO = T.SCHEDULE_NO

	</update>

	<select id="ppl300ukrvServiceImpl.selectApsParameterList" parameterType="Map" resultType="rMap">
		/*ppl300ukrvServiceImpl.selectApsParameterList*/
		SELECT  SUB_CODE   AS CODE
			  , CODE_NAME AS SETTING
			  , REF_CODE1  AS DEFAULT_VALUE
			  , REF_CODE2  AS UNIT
			  , REF_CODE3  AS DESCRIPTION
		FROM  BSA100T WITH (NOLOCK)
		WHERE COMP_CODE = #{S_COMP_CODE}
		 AND  MAIN_CODE = 'P200'
		 AND  SUB_CODE != '$'

		ORDER BY SORT_SEQ
	</select>
	<select id="ppl300ukrvServiceImpl.selectAutoNum" parameterType="Map" resultType="rMap">
		DECLARE     @AUTO_NUM      NVARCHAR(20)
		DECLARE     @todayDate      NVARCHAR(8)
		set @todayDate = CONVERT(NVARCHAR(8), GETDATE(), 112)
	    EXEC SP_GetAutoNumComp #{S_COMP_CODE}, #{DIV_CODE}, #{TABLE}, #{TYPE}, @todayDate, '', @AUTO_NUM OUTPUT

	    IF ISNULL(@AUTO_NUM, '') != ''
	       SELECT @AUTO_NUM AS AUTO_NUM
	    ELSE
	       SELECT TOP 0 '' AS AUTO_NUM
	</select>
	<insert id="ppl300ukrvServiceImpl.insertPpl100tApsData" parameterType="Map" >
		 /*ppl300ukrvServiceImpl.insertPpl100tApsData*/

		 INSERT INTO PPL100T
	             ( COMP_CODE        , DIV_CODE          , WK_PLAN_NUM
	             , WORK_SHOP_CODE   , ITEM_CODE         , WK_PLAN_Q         , PRODT_PLAN_DATE   , PRODT_PLAN_TIME
	             , ORDER_NUM        , SEQ               , ORDER_Q         , PRODT_Q           , PLAN_TYPE        , REMARK
	             , INSERT_DB_USER   , INSERT_DB_TIME    , UPDATE_DB_USER    , UPDATE_DB_TIME
				 , WEEK_NUM
				 , CONFIRM_YN
				 , APS_NO
				 )
	     VALUES (  #{S_COMP_CODE}        , #{DIV_CODE}          , #{WK_PLAN_NUM}
	             , #{WORK_SHOP_CODE}   , #{ITEM_CODE}         , #{LOT_Q}         	 , #{PLAN_START_DATE}   , #{PLAN_TIME}
	             , #{ORDER_NUM}        , #{SEQ}               , #{ORDER_Q}           , 0           , 'S'        , #{REMARK}
	             , #{S_USER_ID}   	   , GETDATE()    		  , #{S_USER_ID}    	 , GETDATE()
				 , #{WEEK_NUM}
				 , 'N'
				 , #{EVIDENCE_NO}
				 )

	</insert>
	<delete id="ppl300ukrvServiceImpl.deletePpl100tApsData" parameterType="Map" >
			/*ppl300ukrvServiceImpl.deletePpl100tApsData*/

			DELETE FROM PPL100T
			WHERE COMP_CODE   = #{S_COMP_CODE}
			  AND DIV_CODE    = #{DIV_CODE}
			  AND WK_PLAN_NUM = #{WK_PLAN_NUM}
			  AND APS_NO      = #{EVIDENCE_NO}

	</delete>
	<update id="ppl300ukrvServiceImpl.updateApsParameterData" parameterType="Map" >
			/*ppl300ukrvServiceImpl.updateApsParameterData*/
			UPDATE BSA100T SET  CODE_NAME = #{SETTING}
							  , REF_CODE1 = #{DEFAULT_VALUE}
							  , REF_CODE2 = #{UNIT}
							  , REF_CODE3 = #{DESCRIPTION}
			WHERE COMP_CODE  = #{S_COMP_CODE}
			  AND MAIN_CODE  = 'P200'
			  AND SUB_CODE	 = #{CODE}
	</update>

	<update id="ppl300ukrvServiceImpl.updateApsFixData" parameterType="Map" >
			/*ppl300ukrvServiceImpl.updateApsFixData*/

			UPDATE PPL350T SET CONFIRM_YN = CASE WHEN #{FIX_YN} = 'true' THEN 'P' ELSE 'N' END
							  ,ORDER_Q    = #{ORDER_Q}
							  ,LOT_Q      = #{LOT_Q}
			WHERE SCHEDULE_NO  = #{SCHEDULE_NO}

	</update>
	<update id="ppl300ukrvServiceImpl.updateApsConfirmData" parameterType="Map" >
			/*ppl300ukrvServiceImpl.updateApsConfirmData*/

			UPDATE PPL350T SET CONFIRM_YN = CASE WHEN #{CONFIRM_YN} = 'true' THEN 'Y' ELSE 'N' END
							  ,ORDER_Q    = #{ORDER_Q}
							  ,LOT_Q      = #{LOT_Q}
			WHERE SCHEDULE_NO  = #{SCHEDULE_NO}

	</update>
	<update id="ppl300ukrvServiceImpl.updateApsWkPlanNum" parameterType="Map" >
			/*ppl300ukrvServiceImpl.updateApsWkPlanNum*/

			UPDATE PPL350T SET WK_PLAN_NUM = #{WK_PLAN_NUM}
			WHERE SCHEDULE_NO  = #{SCHEDULE_NO}

	</update>
	<update id="ppl300ukrvServiceImpl.updateApsDumyUpdate" parameterType="Map" >
			/*ppl300ukrvServiceImpl.updateApsDumyUpdate*/

			DECLARE @PLAN_START_TIME NVARCHAR(20)
			DECLARE @PLAN_END_TIME NVARCHAR(20)
			 SET @PLAN_START_TIME = #{PLAN_START_TIME}
			 SET @PLAN_END_TIME   = #{PLAN_END_TIME}
			UPDATE PPL350T SET DUMMY_START_TIME  = REPLACE(@PLAN_START_TIME,'.','-')
							  ,DUMMY_END_TIME    = REPLACE(@PLAN_END_TIME,'.','-')
							  ,PLAN_START_DATE	 = REPLACE(#{PLAN_START_DATE},'.','')
							  ,PLAN_END_DATE	 = REPLACE(#{PLAN_END_DATE},'.','')
			WHERE SCHEDULE_NO  = #{SCHEDULE_NO}
	</update>
	<select id="ppl300ukrvServiceImpl.selectEstiList" parameterType="Map" resultType="rMap">
		/* ppl300ukrvServiceImpl.selectEstiList  */
		/* ---------------------- 수 주 정 보 참 조 ------------------------*/

		DECLARE @USER_ID   NVARCHAR(10),	 /*  사용자 ID				   */
				@DIV_CODE  NVARCHAR(08),	 /*  사업장코드	  (조회조건)  */


		--		@FROM_DATE NVARCHAR(10),	 /*  요청납기일 FROM (조회조건)  */
		--		@TO_DATE   NVARCHAR(10),	 /*  요청납기일 TO   (조회조건)  */

				@WEEK_NUM_FR    NVARCHAR(07),  -- (필수) 계획주차 FROM
				@WEEK_NUM_TO    NVARCHAR(07),  -- (필수) 계획주차 TO

				@ORDER_NUM  NVARCHAR(20),	 /*  수주번호   (조회조건)  */
				@ITEM_CODE NVARCHAR(20),	 /*  품목코드  */
				@COMP_CODE NVARCHAR(08)	  /*  법인코드		(조회조건)  */

			SET @USER_ID	= #{S_USER_ID}
			SET @DIV_CODE   = #{DIV_CODE}


				SET @WEEK_NUM_FR = #{WEEK_NUM_FR}
				SET @WEEK_NUM_TO = #{WEEK_NUM_TO}



			SET @ORDER_NUM  = #{ORDER_NUM}


			SET @ITEM_CODE  = #{ITEM_CODE}
			SET @COMP_CODE  = #{S_COMP_CODE}

		 SELECT
				CAST(0 AS BIT) GUBUN
			  , A.PLAN_TYPE
			  , ISNULL(M3.CODE_NAME, '') PLANTYPE_NAME
			  , A.ITEM_CODE
			  , uniLITE.fnItemNameComp(A.COMP_CODE, @USER_ID, A.ITEM_CODE) ITEM_NAME
			  , M1.SPEC
			  , M1.STOCK_UNIT
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.PROD_Q, 'Q_FSET_QS'), 0.0) PROD_Q
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.NOTREF_Q, 'Q_FSET_QS'), 0.0) NOTREF_Q
			  , ISNULL(uniLITE.fnGetUserDate(A.COMP_CODE, A.PROD_END_DATE), '') PROD_END_DATE
			  , ISNULL(uniLITE.fnGetUserDate(A.COMP_CODE, A.DVRY_DATE), '') DVRY_DATE
			  , ISNULL(uniLITE.fnGetUserDate(A.COMP_CODE, A.ORDER_DATE), '') ORDER_DATE
			  , ISNULL(uniLITE.fnFormat(A.COMP_CODE, A.ORDER_Q,  'Q_FSET_QS'), 0.0) ORDER_Q
			  , M2.CUSTOM_NAME
			  , A.SER_NO
			  , A.WORK_SHOP_CODE
			  , A.ORDER_NUM
			  , A.PROJECT_NO
			  , A.PJT_CODE
			  , M4.USER_NAME
			  , A.INSERT_DB_TIME
			  , A.WEEK_NUM
			  , A.INIT_DVRY_DATE
			  , A.REMARK
			  , A.PO_NUM
		   FROM (SELECT COMP_CODE
					  , PLAN_TYPE
					  , ORDER_NUM
					  , SER_NO
					  , ITEM_CODE
					  , CUSTOM_CODE
					  , WORK_SHOP_CODE
					  , PROJECT_NO
					  , PJT_CODE
					  , ORDER_DATE
					  , DVRY_DATE
					  , PROD_END_DATE
					  , ORDER_Q
					  , PROD_Q
					  , NOTREF_Q
					  , INSERT_DB_USER
					  , INSERT_DB_TIME
					  , WEEK_NUM
					  , INIT_DVRY_DATE
					  , REMARK
					  , PO_NUM
				   FROM SOF110TV1 WITH (NOLOCK)
				  WHERE COMP_CODE	= @COMP_CODE
					AND OUT_DIV_CODE	 = @DIV_CODE
					AND ORDER_STATUS = 'N'
					AND STATUS	   = '6'
			) A
											INNER JOIN BPR100T M1 WITH (NOLOCK)
													ON M1.COMP_CODE = A.COMP_CODE
												   AND M1.ITEM_CODE = A.ITEM_CODE
											INNER JOIN BCM100T M2 WITH (NOLOCK)
													ON M2.COMP_CODE   = A.COMP_CODE
												   AND M2.CUSTOM_CODE = A.CUSTOM_CODE
											 LEFT JOIN BSA100T M3 WITH (NOLOCK)
													ON M3.COMP_CODE = A.COMP_CODE
												   AND M3.MAIN_CODE = 'P402'
												   AND M3.SUB_CODE  = A.PLAN_TYPE	/*  생산계획 참조 유형 */
											LEFT JOIN  BSA300T M4 WITH(NOLOCK)
													ON M4.COMP_CODE = A.COMP_CODE
												   AND M4.USER_ID   = A.INSERT_DB_USER
		  WHERE 1=1
		    --A.NOTREF_Q	   &gt; 0.0




			AND A.WEEK_NUM &gt;= CASE WHEN ISNULL(@WEEK_NUM_FR, '') = ''
											 THEN A.PROD_END_DATE
											 ELSE @WEEK_NUM_FR
									END
			AND A.WEEK_NUM &lt;= CASE WHEN ISNULL(@WEEK_NUM_TO, '')   = ''
											 THEN A.PROD_END_DATE
											 ELSE @WEEK_NUM_TO
									END



			AND A.ORDER_NUM	 = CASE WHEN ISNULL(@ORDER_NUM, '')  = ''
											 THEN A.ORDER_NUM
											 ELSE @ORDER_NUM
									END

		--	AND A.ITEM_CODE	 = CASE WHEN ISNULL(@ITEM_CODE, '') = ''
		--									 THEN A.ITEM_CODE
		--									 ELSE @ITEM_CODE
		--							END
		AND A.ITEM_CODE IN ('STN0020'
							,'180000485'
							,'180000486'
							,'180000487'
							,'180000488'
							,'180000489'
							,'180000490'
							,'180000491'
							,'180000492'
							,'180000493'
							,'180000494'
							,'51180052'
							,'51180022'
							,'59160052'
							,'170014665'
							,'180000328'
							,'NT1800400'
							,'180000557'
							,'180000558'
							,'180000559'
							,'180000560'
							)
		  ORDER BY A.ORDER_NUM, A.SER_NO
	</select>
</mapper>