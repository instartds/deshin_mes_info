<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pmr210ukrvServiceImpl">

	<select id="pmr210ukrvServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">		<!-- 작업실적등록 조회 -->
		/* pmr210ukrvServiceImpl.selectDetailList */
		BEGIN
			 DECLARE	@COMP_CODE		NVARCHAR(08)	-- 법인코드
					  , @DIV_CODE		NVARCHAR(08)	-- 사업장코드
					  , @WORK_SHOP_CODE	NVARCHAR(08)	-- 작업장
					  , @REF_WKORD_NUM	NVARCHAR(20)	-- 작업지시번호
		
			 SET @COMP_CODE			= #{S_COMP_CODE}
			 SET @DIV_CODE			= #{DIV_CODE}
			 SET @WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
			 SET @REF_WKORD_NUM		= #{REF_WKORD_NUM}
	
			SELECT B.COMP_CODE
				 , B.DIV_CODE
				 , B.OUTSTOCK_NUM
				 , B.REF_WKORD_NUM
				 , B.ITEM_CODE
				 , C.ITEM_NAME
				 , C.SPEC
				 , C.STOCK_UNIT
				 , B.PATH_CODE
				 , B.INOUT_NUM
				 , B.INOUT_SEQ
				 , B.INOUT_TYPE
				 , B.OUTSTOCK_REQ_Q
				 , B.LOT_NO
				 , ISNULL(B.PRODT_Q, 0)								AS OUTSTOCK_Q
--				 , B.OUTSTOCK_Q
				 , E.WH_CODE
				 , ISNULL(B.OUTSTOCK_Q, 0) - ISNULL(B.PRODT_Q, 0)	AS REMAIN_Q
				 , B.REMARK
				 , B.PROJECT_NO
				 , B.PJT_CODE
				 , D.INOUT_DATE
				 , B.PRODT_INOUT_NUM
				 , B.PRODT_INOUT_SEQ
				 , 'Y'												AS QUERY_YN
			  FROM		 PMP100T A WITH(NOLOCK)
			  INNER JOIN PMP350T B WITH(NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
											   AND B.DIV_CODE		= A.DIV_CODE
			  								   AND B.REF_WKORD_NUM	= A.WKORD_NUM
			  INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE		= B.COMP_CODE
			  								   AND C.ITEM_CODE		= B.ITEM_CODE
			  LEFT  JOIN BTR100T D WITH(NOLOCK) ON D.COMP_CODE		= B.COMP_CODE
											   AND D.DIV_CODE		= B.DIV_CODE
											   AND D.INOUT_NUM		= B.INOUT_NUM
											   AND D.INOUT_SEQ		= B.INOUT_SEQ
											   AND D.INOUT_TYPE		= '1'
			  LEFT  JOIN BSA230T E WITH(NOLOCK) ON E.COMP_CODE		= A.COMP_CODE
											   AND E.TREE_CODE		= A.WORK_SHOP_CODE
			 WHERE A.COMP_CODE			= @COMP_CODE
			   AND A.DIV_CODE			= @DIV_CODE
			   AND ((A.TOP_WKORD_NUM = @REF_WKORD_NUM	AND A.WORK_SHOP_CODE = @WORK_SHOP_CODE)
					OR (A.WKORD_NUM = @REF_WKORD_NUM	AND A.WORK_SHOP_CODE = @WORK_SHOP_CODE))
			 ORDER BY B.REF_WKORD_NUM, B.ITEM_CODE, B.LOT_NO
		END
	</select>




	
<!-- 등록 -->	
	<update id="pmr210ukrvServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
		{call SP_GetAutoNumComp (
			#{COMP_CODE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{DIV_CODE,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{TABLE_ID,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{PREFIX,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{BASIS_DATE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{AUTO_TYPE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{KEY_NUMBER,	mode=OUT,	jdbcType=VARCHAR,	javaType=java.lang.String}
		)}
	</update>
	
	<insert id="pmr210ukrvServiceImpl.insertDetail" parameterType="Map">		/* 작업지시별등록 추가 */
		/* pmr210ukrvServiceImpl.insertDetail */
		 DECLARE	@COMP_CODE		NVARCHAR(08)	-- 법인코드
				  , @DIV_CODE		NVARCHAR(08)	-- 사업장코드
				  , @InOutNum		NVARCHAR(20)	-- 수불번호
				  , @InOutSeq		NUMERIC(4 ,0)	-- 수불순번
				  , @ItemCode		NVARCHAR(20)	-- 품목코드
				  , @WhCode			NVARCHAR(08)	-- 창고코드
				  , @InOutDate		NVARCHAR(08)	-- 수불일자
				  , @AllocQ			NUMERIC(30, 6)	-- 수불수량
				  , @MoneyUnit		NVARCHAR(03)	-- 화폐단위
				  , @Remark			NVARCHAR(200)	-- 비고
				  , @ProjectNo		NVARCHAR(20)	-- 관리번호 
				  , @CurLotNo		NVARCHAR(20)	-- Lot No.
				  , @USER_ID		NVARCHAR(100)	-- 입력자
				  , @UpdateDBTime	DATETIME		-- 입력시간
				  , @WorkShopCode	NVARCHAR(08)	-- 작업장
				  , @WKORD_NUM		NVARCHAR(20)	-- 수/발주번호(작업지시번호)
				  , @PRODT_NUM		NVARCHAR(50)	-- 근거번호
	
		 SET @COMP_CODE		= #{S_COMP_CODE}
		 SET @DIV_CODE		= #{DIV_CODE}
		 SET @InOutNum		= #{PRODT_INOUT_NUM}
		 SET @InOutSeq		= #{PRODT_INOUT_SEQ}
		 SET @ItemCode		= #{ITEM_CODE}
		 SET @WhCode		= #{WH_CODE}
		 SET @InOutDate		= #{INOUT_DATE}
		 SET @AllocQ		= #{OUTSTOCK_Q}
		 SET @MoneyUnit		= #{MONEY_UNIT}
		 SET @Remark		= #{REMARK}
		 SET @ProjectNo		= #{PROJECT_NO}
		 SET @CurLotNo		= #{LOT_NO}
		 SET @USER_ID		= #{S_USER_ID}
		 SET @UpdateDBTime	= GETDATE()
		 SET @WorkShopCode	= #{WORK_SHOP_CODE}
		 SET @WKORD_NUM		= #{REF_WKORD_NUM}
		 SET @PRODT_NUM		= #{OUTSTOCK_NUM}
		
		 SELECT @MoneyUnit = A.SUB_CODE 
		   FROM BSA100T A WITH(NOLOCK) 
		  WHERE A.COMP_CODE	= @COMP_CODE
			AND A.MAIN_CODE	= 'B004'
			AND A.REF_CODE1	= 'Y'
			AND A.SUB_CODE != '$'
			AND A.USE_YN	= 'Y'
			
		IF (ISNULL(@MoneyUnit, '') = '')
			SET @MoneyUnit = 'KRW'


		INSERT INTO BTR100T(
				  COMP_CODE,       DIV_CODE,   INOUT_NUM,     INOUT_SEQ,        ITEM_CODE
				, WH_CODE
				, INOUT_DATE
				, INOUT_Q,         INOUT_P,    INOUT_I,       MONEY_UNIT
				, BILL_TYPE,       SALE_TYPE,  SALE_DIV_CODE, SALE_CUSTOM_CODE
				, REMARK,          PROJECT_NO, LOT_NO,        UPDATE_DB_USER,   UPDATE_DB_TIME
				, INOUT_TYPE,      CREATE_LOC, ITEM_STATUS,   INOUT_METH,       INOUT_TYPE_DETAIL
				, INOUT_CODE_TYPE, INOUT_CODE
				, ORDER_NUM,       BASIS_NUM)
		SELECT	  @COMP_CODE AS COMP_CODE,  @DIV_CODE  AS DIV_CODE,          @InOutNum AS INOUT_NUM,       @InOutSeq     AS INOUT_SEQ,        @ItemCode     AS ITEM_CODE
				, @WhCode    AS WH_CODE,    @InOutDate AS INOUT_DATE
				, @AllocQ    AS INOUT_Q,    0          AS INOUT_P,           0         AS INOUT_I,         @MoneyUnit    AS MONEY_UNIT
				, '*'        AS BILL_TYPE,  '*'        AS SALE_TYPE,        '*'        AS SLAE_DIV_CODE,   '*'           AS SALE_CUSTOM_CODE
				, @Remark    AS REMARK,     @ProjectNo AS PROJECT_NO,        @CurLotNo AS LOT_NO,          @USER_ID      AS UPDATE_DB_USER,   @UpdateDBTime AS UPDATE_DB_TIME
				, '2'        AS INOUT_TYPE, '3'        AS CREATE_LOC,        '1'       AS ITEM_STATUS
				, '1'        AS INOUT_METH, '10'       AS INOUT_TYPE_DETAIL, '3'       AS INOUT_CODE_TYPE, @WorkShopCode AS INOUT_CODE
				, @WKORD_NUM AS ORDER_NUM,  @PRODT_NUM AS BASIS_NUM
	</insert>
	
	<update id="pmr210ukrvServiceImpl.updateDetail" parameterType="Map">
		/* pmr210ukrvServiceImpl.updateDetail */
		UPDATE BTR100T
		   SET INOUT_Q		  = #{OUTSTOCK_Q}
			 , UPDATE_DB_USER = #{S_USER_ID}
			 , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND INOUT_NUM	= #{PRODT_INOUT_NUM}
		   AND INOUT_SEQ	= #{PRODT_INOUT_SEQ}
		   AND INOUT_TYPE	= '2'
	</update>
	
	<delete id="pmr210ukrvServiceImpl.deleteDetail" parameterType="Map">
		/* pmr210ukrvServiceImpl.deleteDetail */
		DELETE FROM BTR100T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND INOUT_NUM	= #{PRODT_INOUT_NUM}
		   AND INOUT_SEQ	= #{PRODT_INOUT_SEQ}
		   AND INOUT_TYPE	= '2'
	</delete>	


	<select id="pmr210ukrvServiceImpl.selectB049" parameterType="Map" resultType="rMap">
		/* pmr210ukrvServiceImpl.selectB049 */
		DECLARE @EstimatemMethod	NVARCHAR(1)
		      , @AverageCalcPeriod	NVARCHAR(1)
			  , @COMP_CODE			NVARCHAR(08)               -- 법인코드
	
		SET @COMP_CODE = #{S_COMP_CODE}
		
		-- 단가계산방법
		SELECT TOP 1
			   @EstimatemMethod  = SUB_CODE
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = @COMP_CODE
		   AND MAIN_CODE = 'B049'                -- 단가구분 코드
		   AND ISNULL(REF_CODE1,'') = 'Y'
	
		SET @EstimatemMethod  = CASE WHEN ISNULL(@EstimatemMethod, '')  = '' THEN '1' ELSE @EstimatemMethod  END         -- 재고금액 평가 유형(창고/사업장)
	
		SELECT TOP 1
			   @AverageCalcPeriod = REF_CODE5
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = @COMP_CODE
		   AND MAIN_CODE = 'B049'                -- 단가구분 코드
		   AND SUB_CODE != '$'
		   AND SUB_CODE  = @EstimatemMethod
	
		SET @AverageCalcPeriod  = CASE WHEN ISNULL(@AverageCalcPeriod, '')  = '' THEN '1' ELSE @AverageCalcPeriod  END         -- 재고금액 평가 유형(창고/사업장)
	
	
		SELECT @EstimatemMethod		AS ESTIMATEM_METHOD
			 , @AverageCalcPeriod	AS AVERAGECALC_PERIOD
	</select>

	<update id="pmr210ukrvServiceImpl.SP_STOCK_PeriodicAverage" parameterType="Map" statementType="CALLABLE">
		{call SP_STOCK_PeriodicAverage (
			#{S_COMP_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_INOUT_NUM	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_INOUT_SEQ	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_TYPE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ITEM_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_DATE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{WH_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{S_USER_ID			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT		, jdbcType=VARCHAR		, javaType=java.lang.String}
		)}
	</update>
	
	<update id="pmr210ukrvServiceImpl.SP_STOCK_PeriodicAverageMonthly" parameterType="Map" statementType="CALLABLE">
		{call SP_STOCK_PeriodicAverageMonthly (
			#{S_COMP_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_INOUT_NUM	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_INOUT_SEQ	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_TYPE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ITEM_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_DATE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{WH_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{LOT_NO			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{S_USER_ID			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT		, jdbcType=VARCHAR		, javaType=java.lang.String}
		)}
	</update>

	<update id="pmr210ukrvServiceImpl.updatePMP" parameterType="Map">
		/* pmr210ukrvServiceImpl.updatePMP */
		UPDATE PMP200T
		   SET PRODT_Q		  = #{OUTSTOCK_Q}
			 , UPDATE_DB_USER = #{S_USER_ID}
			 , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND WKORD_NUM	= #{REF_WKORD_NUM}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND PATH_CODE	= #{PATH_CODE}

		UPDATE PMP350T
		   SET PRODT_Q			= #{OUTSTOCK_Q}
			 , PRODT_INOUT_NUM	= #{PRODT_INOUT_NUM}
			 , PRODT_INOUT_SEQ	= #{PRODT_INOUT_SEQ}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND OUTSTOCK_NUM	= #{OUTSTOCK_NUM}
		   AND REF_WKORD_NUM= #{REF_WKORD_NUM}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND PATH_CODE	= #{PATH_CODE}
		   AND INOUT_NUM	= #{INOUT_NUM}
		   AND INOUT_SEQ	= #{INOUT_SEQ}
		   AND INOUT_TYPE	= #{INOUT_TYPE}
	</update>

	<update id="pmr210ukrvServiceImpl.deletePMP" parameterType="Map">
		/* pmr210ukrvServiceImpl.deletePMP */
		UPDATE PMP200T
		   SET PRODT_Q		  = 0
			 , UPDATE_DB_USER = #{S_USER_ID}
			 , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND WKORD_NUM	= #{REF_WKORD_NUM}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND PATH_CODE	= #{PATH_CODE}

		UPDATE PMP350T
		   SET PRODT_Q			= 0
			 , PRODT_INOUT_NUM	= ''
			 , PRODT_INOUT_SEQ	= 0
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND OUTSTOCK_NUM	= #{OUTSTOCK_NUM}
		   AND REF_WKORD_NUM= #{REF_WKORD_NUM}
		   AND ITEM_CODE	= #{ITEM_CODE}
		   AND PATH_CODE	= #{PATH_CODE}
		   AND INOUT_NUM	= #{INOUT_NUM}
		   AND INOUT_SEQ	= #{INOUT_SEQ}
		   AND INOUT_TYPE	= #{INOUT_TYPE}
	</update>



<!-- 작업지시번호 입력 시, PMP350T 데이터 조회 -->
	<select id="pmr210ukrvServiceImpl.getOutstockData" parameterType="Map" resultType="rMap">
		/* pmr210ukrvServiceImpl.getOutstockData */
		BEGIN
			 DECLARE	@COMP_CODE		NVARCHAR(08)	-- 법인코드
					  , @DIV_CODE		NVARCHAR(08)	-- 사업장코드
					  , @WORK_SHOP_CODE	NVARCHAR(08)	-- 작업장
					  , @REF_WKORD_NUM	NVARCHAR(20)	-- 작업지시번호
		
			 SET @COMP_CODE			= #{S_COMP_CODE}
			 SET @DIV_CODE			= #{DIV_CODE}
			 SET @WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
			 SET @REF_WKORD_NUM		= #{REF_WKORD_NUM}
	
			SELECT B.COMP_CODE
				 , B.DIV_CODE
				 , B.OUTSTOCK_NUM
				 , B.REF_WKORD_NUM
				 , B.ITEM_CODE
				 , C.ITEM_NAME
				 , C.SPEC
				 , C.STOCK_UNIT
				 , B.PATH_CODE
				 , B.INOUT_NUM
				 , B.INOUT_SEQ
				 , B.INOUT_TYPE
				 , B.OUTSTOCK_REQ_Q
				 , B.LOT_NO
				 , ISNULL(B.PRODT_Q, 0)								AS OUTSTOCK_Q
--				 , B.OUTSTOCK_Q
				 , E.WH_CODE
				 , ISNULL(B.OUTSTOCK_Q, 0) - ISNULL(B.PRODT_Q, 0)	AS REMAIN_Q
				 , B.REMARK
				 , B.PROJECT_NO
				 , B.PJT_CODE
				 , D.INOUT_DATE
				 , B.PRODT_INOUT_NUM
				 , B.PRODT_INOUT_SEQ
				 , 'Y'												AS QUERY_YN
			  FROM		 PMP100T A WITH(NOLOCK)
			  INNER JOIN PMP350T B WITH(NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
											   AND B.DIV_CODE		= A.DIV_CODE
			  								   AND B.REF_WKORD_NUM	= A.WKORD_NUM
			  INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE		= B.COMP_CODE
			  								   AND C.ITEM_CODE		= B.ITEM_CODE
			  LEFT  JOIN BTR100T D WITH(NOLOCK) ON D.COMP_CODE		= B.COMP_CODE
											   AND D.DIV_CODE		= B.DIV_CODE
											   AND D.INOUT_NUM		= B.INOUT_NUM
											   AND D.INOUT_SEQ		= B.INOUT_SEQ
											   AND D.INOUT_TYPE		= '1'
			  LEFT  JOIN BSA230T E WITH(NOLOCK) ON E.COMP_CODE		= A.COMP_CODE
											   AND E.TREE_CODE		= A.WORK_SHOP_CODE
			 WHERE A.COMP_CODE			= @COMP_CODE
			   AND A.DIV_CODE			= @DIV_CODE
			   AND ((A.TOP_WKORD_NUM = @REF_WKORD_NUM	AND A.WORK_SHOP_CODE = @WORK_SHOP_CODE)
					OR (A.WKORD_NUM = @REF_WKORD_NUM	AND A.WORK_SHOP_CODE = @WORK_SHOP_CODE))
			   AND ISNULL(B.OUTSTOCK_Q, 0) - ISNULL(B.PRODT_Q, 0) &gt; 0
			 --ORDER BY B.REF_WKORD_NUM, B.ITEM_CODE, B.LOT_NO

		UNION ALL
		
			SELECT A.COMP_CODE
				 , A.DIV_CODE
				 , A.BASIS_NUM						AS OUTSTOCK_NUM	 
				 , A.ORDER_NUM						AS REF_WKORD_NUM
				 , A.ITEM_CODE 
				 , G.ITEM_NAME
				 , G.SPEC
				 , G.STOCK_UNIT
				 , '0'								AS PATH_CODE
				 , A.INOUT_NUM
				 , A.INOUT_SEQ
				 , '2'								AS INOUT_TYPE
				 , F.GOOD_WORK_Q					AS OUTSTOCK_REQ_Q
				 , A.LOT_NO
				 , F.GOOD_WORK_Q - C.GOOD_STOCK_Q	AS OUTSTOCK_Q
				 , B.WH_CODE 
				 , C.GOOD_STOCK_Q					AS REMAIN_Q 
				 , A.REMARK
				 , A.PROJECT_NO
				 , A.PJT_CODE
				 , A.INOUT_DATE
				 , H.INOUT_NUM						AS PRODT_INOUT_NUM
				 , H.INOUT_SEQ						AS PRODT_INOUT_SEQ
				 , 'Y'								AS QUERY_YN
			  FROM		BTR100T A WITH(NOLOCK)
			 INNER JOIN BPR100T G WITH(NOLOCK) ON G.COMP_CODE		= A.COMP_CODE 
											  AND G.ITEM_CODE		= A.ITEM_CODE
			 INNER JOIN BSA230T B WITH(NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
											  AND B.TREE_CODE		= @WORK_SHOP_CODE
											  AND B.WH_CODE			= A.WH_CODE
			 INNER JOIN BIV150T C WITH(NOLOCK) ON C.COMP_CODE		= A.COMP_CODE
											  AND C.DIV_CODE		= A.DIV_CODE
											  AND C.ITEM_CODE		= A.ITEM_CODE
											  AND C.WH_CODE			= A.WH_CODE
											  AND C.LOT_NO			= A.LOT_NO
			 INNER JOIN PMP100T E WITH(NOLOCK) ON E.COMP_CODE		= A.COMP_CODE
											  AND E.DIV_CODE		= A.DIV_CODE
--											  AND E.WKORD_NUM		= @REF_WKORD_NUM
											  AND E.TOP_WKORD_NUM		= @REF_WKORD_NUM
--											  AND E.WORK_SHOP_CODE	= 'WC30'
											  AND E.WKORD_NUM		= A.ORDER_NUM
			 INNER JOIN PMR100T F WITH(NOLOCK) ON F.COMP_CODE		= E.COMP_CODE
											  AND F.DIV_CODE		= E.DIV_CODE
											  AND F.WKORD_NUM		= E.WKORD_NUM
			  LEFT JOIN PMP350T D WITH(NOLOCK) ON D.COMP_CODE		= A.COMP_CODE
											  AND D.DIV_CODE		= A.DIV_CODE
											  AND D.INOUT_NUM		= A.INOUT_NUM
											  AND D.INOUT_SEQ		= A.INOUT_SEQ
											  AND D.INOUT_TYPE		= '1'
			  LEFT JOIN BTR100T H WITH(NOLOCK) ON H.COMP_CODE		= A.COMP_CODE
											  AND H.DIV_CODE		= A.DIV_CODE
											  AND H.INOUT_TYPE		= '2'
											  AND H.INOUT_CODE_TYPE	= '3'
											  AND H.INOUT_METH		= '1'
											  AND H.INOUT_TYPE_DETAIL = '10'
--											  AND H.ORDER_NUM		= @REF_WKORD_NUM
											  AND H.ORDER_NUM		= E.WKORD_NUM
											  AND H.BASIS_NUM		= A.INOUT_NUM
			 WHERE A.COMP_CODE			= @COMP_CODE
			   AND A.DIV_CODE			= @DIV_CODE
			   AND A.INOUT_TYPE			= '1'
			   AND A.INOUT_CODE_TYPE	= '3'
			   AND A.LOT_NO				= F.LOT_NO
		END
	</select>

<!-- 작업장 입력 시, 창고 SET하기 위한 데이터 조회 -->
	<select id="pmr210ukrvServiceImpl.getWhCode" parameterType="Map" resultType="rMap">
		/* pmr210ukrvServiceImpl.getWhCode */
		SELECT ISNULL(WH_CODE, '') AS WH_CODE
		  FROM BSA230T WITH (NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND TREE_CODE = #{WORK_SHOP_CODE}
		 ORDER BY TREE_CODE 
	</select>
</mapper>