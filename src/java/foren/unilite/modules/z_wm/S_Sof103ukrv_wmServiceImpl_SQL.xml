<?xml version="1.0" encoding="UTF-8"?><!---->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_sof103ukrv_wmServiceImpl">
<!-- 품목 입력에 대한 옵션 data 정보 -->
	<select id="s_sof103ukrv_wmServiceImpl.getOpt" parameterType="Map" resultType="rMap">
		/* s_sof103ukrv_wmServiceImpl.getOpt */
		SELECT #{ITEM_CODE}                                                 AS PROD_ITEM_CODE
		     , Z1.CHILD_ITEM_CODE                                           AS ITEM_CODE
		     , Z2.ITEM_NAME
		     , Z2.SPEC
		     , Z1.UNIT_Q / Z1.PROD_UNIT_Q                                   AS UNIT_Q
		     , 0                                                            AS UNIT_P
		     , 0                                                            AS UNIT_O 
		     , Z1.CHILD_ITEM_CODE                                           AS OLD_ITEM_CODE
		     , Z2.ITEM_NAME                                                 AS OLD_ITEM_NAME
		     , Z2.SPEC                                                      AS OLD_ITEM_SPEC
		     , Z1.UNIT_Q / Z1.PROD_UNIT_Q                                   AS OLD_UNIT_Q
		     , ''                                                           AS REMARK
		     , Z1.* 
		  FROM       BPR500T Z1 WITH(NOLOCK) 
		  INNER JOIN BPR100T Z2 WITH(NOLOCK) ON Z2.COMP_CODE        = Z1.COMP_CODE
		                                    AND Z2.ITEM_CODE        = Z1.CHILD_ITEM_CODE
		 WHERE Z1.COMP_CODE        = #{S_COMP_CODE}
		   AND Z1.DIV_CODE         = #{DIV_CODE}
		   AND Z1.PROD_ITEM_CODE   = #{ITEM_CODE}
		   AND Z1.CHILD_ITEM_CODE != '$'
		   AND CONVERT(NVARCHAR(08), GETDATE(), 112) BETWEEN Z1.START_DATE AND Z1.STOP_DATE
	</select>



<!-- 조회 쿼리(SOF110T) -->
	<select id="s_sof103ukrv_wmServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_sof103ukrv_wmServiceImpl.selectList */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.ORDER_NUM
		     , A.SER_NO
		     , B.CUSTOM_CODE                AS SITE_CODE
		     , C1.CUSTOM_NAME               AS SITE_NAME
		     , A.ITEM_CODE
		     , C2.ITEM_NAME
		     , C2.SPEC
		     , A.DVRY_DATE
		     , A.DVRY_TIME
		     , A.ORDER_Q
		     , A.ORDER_P
		     , A.ORDER_O                    AS ORDER_PRICE
		     , A.ORDER_TAX_O
		     , A.ORDER_O + A.ORDER_TAX_O    AS SUM_PRICE
		     , A.PRICE_YN
		     , A.TAX_TYPE
		     , A.DISCOUNT_RATE
		     , A.ORDER_UNIT_Q
		     , A.ORDER_UNIT
		     , A.TRANS_RATE
		     , A.HS_NO
		     , A.CLOSE_REMARK
		     , A.CLOSE_ID
		     , A.CLOSE_DATE
		     , A.OUT_DIV_CODE
		     , A.SALE_CUST_CD
		     , A.DVRY_CUST_CD
		     , A.WEEK_NUM
		     , A.INIT_DVRY_DATE
		     , A.ORDER_STATUS
		     , A.DEAD_LINE_STATUS
		     , A.ADVAN_AMOUNT
		     , A.ISSUE_REQ_Q
		     , A.OUTSTOCK_Q
		     , A.RETURN_Q
		     , A.SALE_Q
		     , A.PAB_STOCK_Q
		     , A.BASE_DATE
		     , A.LC_NUM
		     , A.PROD_END_DATE
		     , A.PROD_Q
		     , A.PROD_PLAN_Q
		     , A.PROD_REF_YN
		     , A.MPS_REF_YN
		     , A.ACCOUNT_YNC
		     , A.ESTI_NUM
		     , A.ESTI_SEQ
		     , A.SCM_FLAG_YN
		     , A.PO_NUM
		     , A.PO_SEQ
		     , A.PO_DATE
		     , A.PO_QTY
		     , A.CUSTOM_ITEM_CODE
		     , A.CUSTOM_ITEM_NAME
		     , A.CUSTOM_ITEM_DESC
		     , A.EXP_ISSUE_DATE
		     , A.PREV_ORDER_Q
		     , A.PROJECT_NO
		     , A.PJT_CODE
		     , A.REMARK
		     , A.LOT_NO
		     , A.REASON
		     , A.LAB_NO
		     , A.REQST_ID
		     , A.SAMPLE_KEY
		     , A.SO_NUM
		     , A.SO_SEQ
		     , A.PROMO_NUM
		     , A.SO_TYPE
		     , A.SO_ITEM_SEQ
		     , A.SO_KIND
		     , A.BASIS_P
		     , A.EXTRA_Q
		     , A.BASIS_Q
		     , A.GIFT_KIND
--		     , A.CUSTOMER_ID
		     , A.RECEIVER_ID
		     , A.RECEIVER_NAME
		     , A.TELEPHONE_NUM1
		     , A.TELEPHONE_NUM2
		     , A.FAX_NUM
		     , A.ZIP_NUM
		     , A.ADDRESS1
		     , A.ADDRESS2
		     , A.ITEM_GUBUN
		     , A.PROD_ITEM_CODE
		     , A.INVOICE_NUM
		     , A.PRICE_TYPE
		     , A.WGT_UNIT
		     , A.UNIT_WGT
		     , A.VOL_UNIT
		     , A.UNIT_VOL
		     , A.ORDER_WGT_Q
		     , A.ORDER_WGT_P
		     , A.ORDER_VOL_Q
		     , A.ORDER_VOL_P
		     , A.WH_CODE
		     , A.REASON1
		     , A.REASON2
		     , A.REASON3
		     , A.REASON4
		     , A.MICROBE_DATE
		     , A.EXPECTED_END_DATE
		     , A.PRICE_PER_GRAM
		     , A.PRICE_WEIGHT
		     , A.ORDER_FOR_P
		     , A.ORDER_FOR_O
		     , A.PACK_TYPE
		     , A.INOUT_TYPE_DETAIL
		     , A.REMARK_INTER
		     , A.CLOSE_YN
		     , A.CLOSE_REASON
		     , A.ISSUE_PLAN_NUM
		     , A.ISSUE_REQ_YN
		     , A.UPN_CODE
		     , A.ORD_STATUS
		     , A.DELIV_METHOD
		     , A.DELIV_PRICE
		     , A.ORDER_NAME
		     , A.ORDER_TEL1
		     , A.ORDER_TEL2
		     , A.ORDER_MAIL
		     , A.MSG
		     , A.SENDER_CODE
		     , A.SENDER
		     , A.CUSTOMER_ID2 AS CUSTOMER_ID
		     , A.SHOP_ORD_NO
		     , A.SHOP_SALE_NO
		     , A.SHOP_SALE_NAME
		     , A.SHOP_OPT_NAME
		     , A.UNIQUEID
		     , A.NUMBER
		     , A.BUNDLE_NO
		     , B.TAX_INOUT          --20201202 추가
		     , A.PAY_TIME           --20201229 추가
		     , A.PA_ADDCOL_GROUPING --20210105 추가
		     , B.BILL_TYPE          --20210217 추가
		     , B.CARD_CUSTOM_CODE   --20210223 추가
		     , CASE WHEN E.COMP_CODE IS NOT NULL THEN 'Y'
		            ELSE 'N'
		       END                  AS SRQ_YN   --20210319 추가
		  FROM       SOF110T A  WITH(NOLOCK)
		  INNER JOIN SOF100T B  WITH(NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
		                                    AND B.DIV_CODE       = A.DIV_CODE
		                                    AND B.ORDER_NUM      = A.ORDER_NUM
		  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE     = B.COMP_CODE
		                                    AND C1.CUSTOM_CODE   = B.CUSTOM_CODE
		  INNER JOIN BPR100T C2 WITH(NOLOCK) ON C2.COMP_CODE     = A.COMP_CODE
		                                    AND C2.ITEM_CODE     = A.ITEM_CODE
		<if test="@foren.Ognl@isNotEmpty(KEY_VALUE)">
		  INNER JOIN L_SOF110T_WM ZZ WITH(NOLOCK) ON ZZ.COMP_CODE        = A.COMP_CODE
		                                         AND ZZ.DIV_CODE         = A.DIV_CODE
		                                         AND ZZ.ORDER_NUM        = A.ORDER_NUM
		                                         AND ZZ.SER_NO           = A.SER_NO
		                                         AND ZZ.KEY_VALUE        = #{KEY_VALUE}
		</if>
<!-- 20210201 추가: 조회조건 '출하지시여부' 추가 -->
		  LEFT  JOIN SRQ100T E  WITH(NOLOCK) ON E.COMP_CODE      = A.COMP_CODE
		                                    AND E.ISSUE_DIV_CODE = A.OUT_DIV_CODE
		                                    AND E.ORDER_NUM      = A.ORDER_NUM
		                                    AND E.SER_NO         = A.SER_NO
		 WHERE A.COMP_CODE  = #{S_COMP_CODE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND B.ORDER_PRSN = #{ORDER_PRSN}
		   AND B.ORDER_DATE = #{ORDER_DATE}
		<if test="@foren.Ognl@isNotEmpty(ORDER_NUM)">
<!-- 20201201 API 수신로직 수정 -->
		   AND A.ORDER_NUM  = #{ORDER_NUM}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		   AND C2.ITEM_LEVEL1= #{ITEM_LEVEL1}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		   AND C2.ITEM_LEVEL2= #{ITEM_LEVEL2}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		   AND C2.ITEM_LEVEL3= #{ITEM_LEVEL3}
		</if>
<!-- 20210201 추가: 조회조건 '고객분류', '출하지시여부' 추가 -->
		<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
		   AND C1.AGENT_TYPE = #{AGENT_TYPE}
		</if>
		<if test="rdoSelect == &quot;Y&quot;">
		   AND E.COMP_CODE IS NOT NULL
		</if>
		<if test="rdoSelect == &quot;N&quot;">
		   AND E.COMP_CODE IS NULL
		</if>
<!-- 20210316 추가: 주문조회(WM)에서 넘어오는 데이터 조회 시 필요한 검색 조건 -->
		<if test="@foren.Ognl@isNotEmpty(ORDER_NAME)">
		   AND A.ORDER_NAME = #{ORDER_NAME}
		</if>
	</select>

<!-- 조회 쿼리(S_SOF115T_WM) -->
	<select id="s_sof103ukrv_wmServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* s_sof103ukrv_wmServiceImpl.selectList2 */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , C.UNIQUEID
		     , C.NUMBER
		     , C.BUNDLE_NO        --20201202 추가
		     , C.ORDER_NUM
		     , C.SER_NO
		     , C.SUB_SEQ
		     , C.ITEM_CODE
		     , C1.ITEM_NAME
		     , C1.SPEC
		     , C.UNIT_Q
		     , C.UNIT_P
		     , C.UNIT_O
		     , C.OLD_ITEM_CODE
		     , C2.ITEM_NAME       AS OLD_ITEM_NAME
		     , C2.SPEC            AS OLD_ITEM_SPEC
		     , C.OLD_UNIT_Q
		     , C.REMARK
		     , C.PA_ADDCOL_GROUPING --20210105 추가
		  FROM       SOF110T      A  WITH(NOLOCK)
		  INNER JOIN SOF100T      B  WITH(NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
		                                         AND B.DIV_CODE       = A.DIV_CODE
		                                         AND B.ORDER_NUM      = A.ORDER_NUM
		  INNER JOIN S_SOF115T_WM C  WITH(NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
		                                         AND C.DIV_CODE       = A.DIV_CODE
		                                         AND C.ORDER_NUM      = A.ORDER_NUM
		                                         AND C.SER_NO         = A.SER_NO
		  INNER JOIN BPR100T      C1 WITH(NOLOCK) ON C1.COMP_CODE     = C.COMP_CODE
		                                         AND C1.ITEM_CODE     = C.ITEM_CODE
		  LEFT  JOIN BPR100T      C2 WITH(NOLOCK) ON C2.COMP_CODE     = C.COMP_CODE
		                                         AND C2.ITEM_CODE     = C.OLD_ITEM_CODE
		  INNER JOIN BPR100T      Z2 WITH(NOLOCK) ON Z2.COMP_CODE     = A.COMP_CODE
		                                         AND Z2.ITEM_CODE     = A.ITEM_CODE
<!-- 20210201 추가: 조회조건 '고객분류' 추가 -->
		  INNER JOIN BCM100T      C3 WITH(NOLOCK) ON C3.COMP_CODE     = B.COMP_CODE
		                                         AND C3.CUSTOM_CODE   = B.CUSTOM_CODE
<!-- 20210201 추가: 조회조건 '출하지시여부' 추가 -->
		  LEFT  JOIN SRQ100T      E  WITH(NOLOCK) ON E.COMP_CODE      = A.COMP_CODE
		                                         AND E.ISSUE_DIV_CODE = A.OUT_DIV_CODE
		                                         AND E.ORDER_NUM      = A.ORDER_NUM
		                                         AND E.SER_NO         = A.SER_NO
		 WHERE A.COMP_CODE  = #{S_COMP_CODE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND B.ORDER_PRSN = #{ORDER_PRSN}
		   AND B.ORDER_DATE = #{ORDER_DATE}
		<if test="@foren.Ognl@isNotEmpty(ORDER_NUM)">
<!-- 20201201 API 수신로직 수정 -->
		   AND A.ORDER_NUM  = #{ORDER_NUM}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		   AND Z2.ITEM_LEVEL1= #{ITEM_LEVEL1}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		   AND Z2.ITEM_LEVEL2= #{ITEM_LEVEL2}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		   AND Z2.ITEM_LEVEL3= #{ITEM_LEVEL3}
		</if>
<!-- 20210201 추가: 조회조건 '고객분류', '출하지시여부' 추가 -->
		<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
		   AND C3.AGENT_TYPE = #{AGENT_TYPE}
		</if>
		<if test="rdoSelect == &quot;Y&quot;">
		   AND E.COMP_CODE IS NOT NULL
		</if>
		<if test="rdoSelect == &quot;N&quot;">
		   AND E.COMP_CODE IS NULL
		</if>
<!-- 20210316 추가: 주문조회(WM)에서 넘어오는 데이터 조회 시 필요한 검색 조건 -->
		<if test="@foren.Ognl@isNotEmpty(ORDER_NAME)">
		   AND A.ORDER_NAME = #{ORDER_NAME}
		</if>
	</select>





<!-- 저장 로직(SOF100T, SOF110T) -->
	<insert id="s_sof103ukrv_wmServiceImpl.insertLogDetail" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.insertLogDetail: master Data는 sp에서 생성 */
		INSERT INTO L_SOF110T_WM
		     ( KEY_VALUE        , OPR_FLAG
		     --sof100t 데이터
		     , CUSTOM_CODE
		     , ORDER_PRSN       , ORDER_DATE        , TAX_INOUT    --20201202 추가
		     --sof110t 데이터
		     , COMP_CODE        , DIV_CODE          , ORDER_NUM         , SER_NO
		     , ITEM_CODE
		     , DVRY_DATE
		     , ORDER_Q          , ORDER_P           , ORDER_O
		     , ORDER_TAX_O
		     , PRICE_YN
		     , TAX_TYPE         , INOUT_TYPE_DETAIL
		     , ORDER_UNIT       , TRANS_RATE        , OUT_DIV_CODE      , SALE_CUST_CD      , DVRY_CUST_CD
		     , CUSTOM_ITEM_CODE , CUSTOM_ITEM_NAME  , REMARK            , INVOICE_NUM
		     , UNIQUEID         , NUMBER                                                                         --주문번호, 순번
		     --임시테이블에 컬럼 생성
		     , ORD_STATUS       , SENDER_CODE       , SENDER
		     , SHOP_SALE_NAME   , SHOP_OPT_NAME     , DELIV_METHOD      , DELIV_PRICE       , BUNDLE_NO
		     --주문자
		     , CUSTOMER_ID2     , ORDER_NAME        , ORDER_TEL1        , ORDER_TEL2        , ORDER_MAIL        , MSG
		     , PAY_TIME         --20201229 추가
		     --수령자
		     , RECEIVER_NAME    , TELEPHONE_NUM1    , TELEPHONE_NUM2    , ADDRESS1          , ADDRESS2          , ZIP_NUM
		     , SHOP_ORD_NO      , SHOP_SALE_NO
		     , PA_ADDCOL_GROUPING --20210105 추가
		     , BILL_TYPE          --20210217 추가
		     , CARD_CUSTOM_CODE   --20210223 추가
		     , ACCOUNT_YNC        --20210406 추가
		     , INSERT_DB_USER   , INSERT_DB_TIME    , UPDATE_DB_USER    , UPDATE_DB_TIME
		)
		SELECT
		       #{KEY_VALUE}     , #{OPR_FLAG}
		     --sof100t 데이터
		     , #{SITE_CODE}     --거래처
		     , #{ORDER_PRSN}    , #{ORDER_DATE}     , #{TAX_INOUT}    --20201202 추가
		     --sof110t 데이터
		     , #{S_COMP_CODE}   , #{DIV_CODE}       , #{ORDER_NUM}      , #{SER_NO}
		     , #{ITEM_CODE}
		     , #{DVRY_DATE}
		     , #{ORDER_Q}       , ${ORDER_P}        --20201221 수정: 계산 없이 레코드 값 그대로 저장, {ORDER_PRICE}/{ORDER_Q} -> {ORDER_P}
		     , ${ORDER_PRICE}                       --20201221 수정: 계산 없이 레코드 값 그대로 저장, uniLITE.fnGetTaxCalcWithTaxInout({S_COMP_CODE}, {SITE_CODE}, {ITEM_CODE}, {TAX_INOUT}, {ORDER_PRICE}, '1')    --금액
		     , ${ORDER_TAX_O}                       --20201221 수정: 계산 없이 레코드 값 그대로 저장, uniLITE.fnGetTaxCalcWithTaxInout({S_COMP_CODE}, {SITE_CODE}, {ITEM_CODE}, {TAX_INOUT}, {ORDER_PRICE}, '2')    --세액
		     , '2'  --진단가
		     , B.TAX_TYPE       , '10'  --INOUT_TYPE_DETAIL
		     , C.ORDER_UNIT     , C.TRNS_RATE       , #{DIV_CODE}       , #{SITE_CODE}   , #{DVRY_CUST_CD}
		     , ''               , #{SHOP_SALE_NAME} , ''                , #{INVOICE_NUM}
		     , #{UNIQUEID}      , #{NUMBER}                                                      --주문번호, 순번 (유통) 사용
		     --임시테이블에 컬럼 생성
		     , #{ORD_STATUS}    , #{SENDER_CODE}    , #{SENDER}
		     , #{SHOP_SALE_NAME}, #{SHOP_OPT_NAME}  , #{DELIV_METHOD}   , #{DELIV_PRICE} , #{BUNDLE_NO}
		     --주문자
		     , #{CUSTOMER_ID}   , #{ORDER_NAME}     , #{ORDER_TEL1}     , #{ORDER_TEL2}  , #{ORDER_MAIL}        , #{MSG}
		     , #{PAY_TIME}      --20201229 추가
		     --수령자
		     , #{RECEIVER_NAME} , #{TELEPHONE_NUM1} , #{TELEPHONE_NUM2} , #{ADDRESS1}    , #{ADDRESS2}          , #{ZIP_NUM}
		     , #{SHOP_ORD_NO}   , #{SHOP_SALE_NO}
		     , #{PA_ADDCOL_GROUPING}                --20210105 추가
		     , #{BILL_TYPE}                         --20210217 추가
		     , #{CARD_CUSTOM_CODE}                  --20210223 추가
		     , #{ACCOUNT_YNC}                       --20210406 추가
		     , #{S_USER_ID}     , GETDATE()         , #{S_USER_ID}      , GETDATE()
		  FROM      BCM100T A WITH(NOLOCK)
		  LEFT JOIN BPR100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                  AND B.ITEM_CODE = #{ITEM_CODE}
		  LEFT JOIN BPR200T C WITH(NOLOCK) ON C.COMP_CODE = A.COMP_CODE
		                                  AND C.DIV_CODE  = #{DIV_CODE}
		                                  AND C.ITEM_CODE = #{ITEM_CODE}
		 WHERE A.COMP_CODE   = #{S_COMP_CODE}
		   AND A.CUSTOM_CODE = #{SITE_CODE}
	</insert>

	<update id="spReceiving" parameterType="Map" statementType="CALLABLE">
		{call SP_SALES_SalesOrder_s_sof103ukrv_wm (
			#{KeyValue		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{LangCode		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{SpFlag		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{CompCode		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{DivCode		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{UserId		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{OrderNum		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ErrorDesc		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update>

<!-- 저장 로직(S_SOF115T_WM) -->
	<update id="s_sof103ukrv_wmServiceImpl.insertDetail2" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.insertDetail2 */
		<if test="@foren.Ognl@isNotEmpty(KEY_VALUE)">
		INSERT INTO S_SOF115T_WM (
		       COMP_CODE
		     , DIV_CODE
		     , UNIQUEID
		     , NUMBER
		     , BUNDLE_NO          --20201202 추가
		     , PA_ADDCOL_GROUPING --20210105 추가
		     , ORDER_NUM
		     , SER_NO
		     , SUB_SEQ
		     , ITEM_CODE
		     , UNIT_Q
		     , UNIT_P
		     , UNIT_O
		     , OLD_ITEM_CODE
		     , OLD_UNIT_Q
		     , REMARK
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , INSERT_DB_USER
		     , INSERT_DB_TIME )
		SELECT #{COMP_CODE}
		     , #{DIV_CODE}
		     , CASE WHEN ISNULL(#{ORDER_NUM}, '') = '' THEN ORDER_NUM + RIGHT('000' + CONVERT(NVARCHAR(03), #{SER_NO}), 3)   --20201208 수정: UNIQUEID에 ORDER_NUM + SER_NO(3자리) 입력
		            ELSE #{UNIQUEID}
		       END
		     , #{NUMBER}
		     , CASE WHEN ISNULL(#{ORDER_NUM}, '') = '' THEN ORDER_NUM   --20201208 수정: BUNDLE_NO에 ORDER_NUM 입력
		            ELSE #{BUNDLE_NO}
		       END
		     , #{PA_ADDCOL_GROUPING} --20210105 추가
		     , CASE WHEN ISNULL(#{ORDER_NUM}, '') = '' THEN ORDER_NUM
		            ELSE #{ORDER_NUM}
		       END
		     , #{SER_NO}
		     , #{SUB_SEQ}
		     , #{ITEM_CODE}
		     , #{UNIT_Q}
		     , #{UNIT_P}
		     , #{UNIT_O}
		     , #{OLD_ITEM_CODE}
		     , #{OLD_UNIT_Q}
		     , #{REMARK}
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		  FROM L_SOF110T_WM WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{DIV_CODE}
		   AND SER_NO    = #{SER_NO}
		   AND KEY_VALUE = #{KEY_VALUE}
		</if>
		<if test="@foren.Ognl@isEmpty(KEY_VALUE)">
		INSERT INTO S_SOF115T_WM (
		       COMP_CODE
		     , DIV_CODE
		     , UNIQUEID
		     , NUMBER
		     , BUNDLE_NO          --20201202 추가
		     , PA_ADDCOL_GROUPING --20210105 추가
		     , ORDER_NUM
		     , SER_NO
		     , SUB_SEQ
		     , ITEM_CODE
		     , UNIT_Q
		     , UNIT_P
		     , UNIT_O
		     , OLD_ITEM_CODE
		     , OLD_UNIT_Q
		     , REMARK
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , INSERT_DB_USER
		     , INSERT_DB_TIME )
		SELECT #{COMP_CODE}
		     , #{DIV_CODE}
		     , #{UNIQUEID}
		     , #{NUMBER}
		     , #{BUNDLE_NO}
		     , #{PA_ADDCOL_GROUPING} --20210105 추가
		     , #{ORDER_NUM}
		     , #{SER_NO}
		     , #{SUB_SEQ}
		     , #{ITEM_CODE}
		     , #{UNIT_Q}
		     , #{UNIT_P}
		     , #{UNIT_O}
		     , #{OLD_ITEM_CODE}
		     , #{OLD_UNIT_Q}
		     , #{REMARK}
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		</if>
	</update>
	<update id="s_sof103ukrv_wmServiceImpl.updateDetail2" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.updateDetail2 */
		UPDATE S_SOF115T_WM
		   SET ITEM_CODE      = #{ITEM_CODE}
		     , UNIT_Q         = #{UNIT_Q}
		     , UNIT_P         = #{UNIT_P}
		     , UNIT_O         = #{UNIT_O}
		     , REMARK         = #{REMARK}    --20210316 추가
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{DIV_CODE}
		   AND ORDER_NUM = #{ORDER_NUM}
		   AND SER_NO    = #{SER_NO}
		   AND SUB_SEQ   = #{SUB_SEQ}
	</update>
	<update id="s_sof103ukrv_wmServiceImpl.deleteDetail2" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.deleteDetail2 */
		DELETE FROM S_SOF115T_WM
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{DIV_CODE}
		   AND ORDER_NUM = #{ORDER_NUM}
		   AND SER_NO    = #{SER_NO}
		   AND SUB_SEQ   = #{SUB_SEQ}
	</update>




<!-- 주문데이터 insert -->
	<insert id="s_sof103ukrv_wmServiceImpl.insertOrderList" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.insertOrderList */
		--20210111 추가: 동일데이터 중에 PA_ADDCOL_GROUPING 추가 입력한 경우에는 update로직 필요하여 다시 추가: 동일정보이며, 적용되지 않은 데이터는 UPDATE, 동일정보가 없을 경우 INSERT
		MERGE INTO IF_ORDER_LIST_GET                  A
		USING ( SELECT #{uniq}       AS UNIQ
		             , #{sol_no}     AS SOL_NO
		             , #{ord_status} AS ORD_STATUS )  B  ON B.UNIQ       = A.UNIQ
		                                                AND B.SOL_NO     = A.SOL_NO
		                                                AND B.ORD_STATUS = A.ORD_STATUS
		WHEN MATCHED AND ISNULL(APPLY_FLAG, 'N') = 'N' THEN
		UPDATE 
		   SET UPDATE_DB_USER     = #{S_USER_ID}
		     , UPDATE_DB_TIME     = GETDATE()
		     , ORI_UNIQ           = #{ori_uniq}
		     , BUNDLE_NO          = #{bundle_no}
		     , ORD_STATUS         = #{ord_status}
		     , SKU_CD             = #{sku_cd}
		     , CARR_NO            = #{carr_no}
		     , CARR_NAME          = #{carr_name}
		     , INVOICE_NO         = #{invoice_no}
		     , SHIP_PLAN_DATE     = #{ship_plan_date}
		     , SHOP_CD            = #{shop_cd}
		     , SHOP_NAME          = #{shop_name}
		     , SHOP_ID            = #{shop_id}
		     , SELLER_NICK        = #{seller_nick}
		     , SHOP_ORD_NO        = #{shop_ord_no}
		     , SHOP_SALE_NO       = #{shop_sale_no}
		     , SHOP_SALE_NAME     = #{shop_sale_name}
		     , SHOP_OPT_NAME      = #{shop_opt_name}
		     , SALE_CNT           = #{sale_cnt}
		     , SHOP_ADD_OPT_NAME  = #{shop_add_opt_name}
		     , SHIP_METHOD        = #{ship_method}
		     , OUT_TIME           = #{out_time}
		     , WDATE              = #{wdate}
		     , ORD_TIME           = #{ord_time}
		     , PAY_TIME           = #{pay_time}
		     , ORD_CONFIRM_TIME   = #{ord_confirm_time}
		     , SALES              = #{sales}
		     , SALES_TAX          = #{sales_tax}
		     , SHOP_COST_PRICE    = #{shop_cost_price}
		     , SHOP_SUPPLY_PRICE  = #{shop_supply_price}
		     , SHIP_DELAY_YN      = #{ship_delay_yn}
		     , ORDER_NAME         = #{order_name}
		     , ORDER_ID           = #{order_id}
		     , ORDER_TEL          = #{order_tel}
		     , ORDER_HTEL         = #{order_htel}
		     , ORDER_EMAIL        = #{order_email}
		     , SHIP_MSG           = #{ship_msg}
		     , OUT_ORDER_TIME     = #{out_order_time}
		     , TO_CTRY_CD         = #{to_ctry_cd}
		     , TO_NAME            = #{to_name}
		     , TO_TEL             = #{to_tel}
		     , TO_HTEL            = #{to_htel}
		     , TO_ADDR1           = #{to_addr1}
		     , TO_ADDR2           = #{to_addr2}
		     , TO_ZIPCD           = #{to_zipcd}
		     , SHIP_COST          = #{ship_cost}
		     , C_SALE_CD          = #{c_sale_cd}
		     , ORD_CURR_CD        = #{ord_curr_cd}
		     , GPRIVATE_NO        = #{gprivate_no}
		     , BARCODE            = #{barcode}
		     , DEPOT_NO           = #{depot_no}
		     , DEPOT_NAME         = #{depot_name}
		     , INVOICE_SEND_TIME  = #{invoice_send_time}
		     , GIFT_NAME          = #{gift_name}
		     , GIFT_PROD_NAME     = #{gift_prod_name}
		     , MAP_YN             = #{map_yn}
		     , SHIP_AVAIL_YN      = #{ship_avail_yn}
		     , SHIP_UNABLE_REASON = #{ship_unable_reason}
		     , ORD_STATUS_MSG     = #{ord_status_msg}
		     , EXCHANGE_YN        = #{exchange_yn}
		     , MEMO_YN            = #{memo_yn}
		     , BUNDLE_AVAIL_YN    = #{bundle_avail_yn}
		     , SET_NO             = #{set_no}
		     , SET_PACK_UNIT      = #{set_pack_unit}
		     , SET_NAME           = #{set_name}
		     , PAY_METHOD         = #{pay_method}
		     , MISC1              = #{misc1}
		     , RECORDSTOTAL       = #{recordstotal}
		     , ORD_STATUS_MDATE   = #{ord_status_mdate}
		     , PA_ADDCOL_GROUPING = #{pa_addcol_Grouping}
		     , pack_unit          = #{pack_unit}               --20210416 추가

		WHEN NOT MATCHED THEN
		INSERT (
		       SOL_NO
		     , UNIQ
		     , ORI_UNIQ
		     , BUNDLE_NO
		     , ORD_STATUS
		     , SKU_CD
		     , CARR_NO
		     , CARR_NAME
		     , INVOICE_NO
		     , SHIP_PLAN_DATE
		     , SHOP_CD
		     , SHOP_NAME
		     , SHOP_ID
		     , SELLER_NICK
		     , SHOP_ORD_NO
		     , SHOP_SALE_NO
		     , SHOP_SALE_NAME
		     , SHOP_OPT_NAME
		     , SALE_CNT
		     , SHOP_ADD_OPT_NAME
		     , SHIP_METHOD
		     , OUT_TIME
		     , WDATE
		     , ORD_TIME
		     , PAY_TIME
		     , ORD_CONFIRM_TIME
		     , SALES
		     , SALES_TAX
		     , SHOP_COST_PRICE
		     , SHOP_SUPPLY_PRICE
		     , SHIP_DELAY_YN
		     , ORDER_NAME
		     , ORDER_ID
		     , ORDER_TEL
		     , ORDER_HTEL
		     , ORDER_EMAIL
		     , SHIP_MSG
		     , OUT_ORDER_TIME
		     , TO_CTRY_CD
		     , TO_NAME
		     , TO_TEL
		     , TO_HTEL
		     , TO_ADDR1
		     , TO_ADDR2
		     , TO_ZIPCD
		     , SHIP_COST
		     , C_SALE_CD
		     , ORD_CURR_CD
		     , GPRIVATE_NO
		     , BARCODE
		     , DEPOT_NO
		     , DEPOT_NAME
		     , INVOICE_SEND_TIME
		     , GIFT_NAME
		     , GIFT_PROD_NAME
		     , MAP_YN
		     , SHIP_AVAIL_YN
		     , SHIP_UNABLE_REASON
		     , ORD_STATUS_MSG
		     , EXCHANGE_YN
		     , MEMO_YN
		     , BUNDLE_AVAIL_YN
		     , SET_NO
		     , SET_PACK_UNIT
		     , SET_NAME
		     , PAY_METHOD
		     , MISC1
		     , RECORDSTOTAL
		     , ORD_STATUS_MDATE   --20201202 추가
		     , PA_ADDCOL_GROUPING --20210105 추가
		     , pack_unit          --20210416 추가
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		) VALUES (
		       #{sol_no}
		     , #{uniq}
		     , #{ori_uniq}
		     , #{bundle_no}
		     , #{ord_status}
		     , #{sku_cd}
		     , #{carr_no}
		     , #{carr_name}
		     , #{invoice_no}
		     , #{ship_plan_date}
		     , #{shop_cd}
		     , #{shop_name}
		     , #{shop_id}
		     , #{seller_nick}
		     , #{shop_ord_no}
		     , #{shop_sale_no}
		     , #{shop_sale_name}
		     , #{shop_opt_name}
		     , #{sale_cnt}
		     , #{shop_add_opt_name}
		     , #{ship_method}
		     , #{out_time}
		     , #{wdate}
		     , #{ord_time}
		     , CASE WHEN #{pay_time} = '0001-01-01 00:00:00' THEN CONVERT(NVARCHAR, GETDATE(), 20)   --20210114 수정: 날짜 해당 값 없을 때는 데이터 가져와서 입력한 시간 저장
		            ELSE #{pay_time}
		       END
		     , #{ord_confirm_time}
		     , #{sales}
		     , #{sales_tax}
		     , #{shop_cost_price}
		     , #{shop_supply_price}
		     , #{ship_delay_yn}
		     , #{order_name}
		     , #{order_id}
		     , #{order_tel}
		     , #{order_htel}
		     , #{order_email}
		     , #{ship_msg}
		     , #{out_order_time}
		     , #{to_ctry_cd}
		     , #{to_name}
		     , #{to_tel}
		     , #{to_htel}
		     , #{to_addr1}
		     , #{to_addr2}
		     , #{to_zipcd}
		     , #{ship_cost}
		     , #{c_sale_cd}
		     , #{ord_curr_cd}
		     , #{gprivate_no}
		     , #{barcode}
		     , #{depot_no}
		     , #{depot_name}
		     , #{invoice_send_time}
		     , #{gift_name}
		     , #{gift_prod_name}
		     , #{map_yn}
		     , #{ship_avail_yn}
		     , #{ship_unable_reason}
		     , #{ord_status_msg}
		     , #{exchange_yn}
		     , #{memo_yn}
		     , #{bundle_avail_yn}
		     , #{set_no}
		     , #{set_pack_unit}
		     , #{set_name}
		     , #{pay_method}
		     , #{misc1}
		     , #{recordstotal}
		     , #{ord_status_mdate}   --20201202 추가
		     , #{pa_addcol_Grouping} --20210105 추가
		     , #{pack_unit}          --20210416 추가
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		);
	</insert>

	<update id="s_sof103ukrv_wmServiceImpl.updateOrderProdList" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.updateOrderProdList */
		--20210113 수정: api데이터가 이전에 합의한 형식과 일치하지 않아 로직 수정
<!--		UPDATE IF_ORDER_LIST_GET
		   SET SKU_CD             = {sku_cd}
		 WHERE SOL_NO             = {sol_no}
		   AND UNIQ               = {uniq}
		   AND ISNULL(SKU_CD, '') = ''
-->
		IF EXISTS ( SELECT TOP 1 1
		              FROM IF_ORDER_LIST_GET WITH(NOLOCK)
		             WHERE UNIQ                    = CASE WHEN ${add_opt_yn} = 0 THEN #{uniq}                      --20210121 수정: 체크로직 수정
		                                                  ELSE #{uniq} + '_' + CONVERT(NVARCHAR, #{ord_opt_seq})
		                                             END
		               AND SOL_NO                  = #{sol_no}
		               AND ISNULL(APPLY_FLAG, 'N') = 'N'
		               --AND SHOP_SALE_NAME          = {ord_opt_name}  --20210316 주석
		               --AND ISNULL(SKU_CD, '')      = ''              --20210202 주석
		)
		    BEGIN
		        UPDATE IF_ORDER_LIST_GET
		           SET SKU_CD             = #{sku_cd}
		             , pack_unit          = #{pack_unit}               --20210416 추가
		         WHERE UNIQ                    = CASE WHEN ${add_opt_yn} = 0 THEN #{uniq}                          --20210202 수정
		                                              ELSE #{uniq} + '_' + CONVERT(NVARCHAR, #{ord_opt_seq})
		                                         END
		           AND SOL_NO                  = #{sol_no}
		           AND ISNULL(APPLY_FLAG, 'N') = 'N'
		           --AND SHOP_SALE_NAME          = {ord_opt_name}  --20210316 주석
		           --AND ISNULL(SKU_CD, '')      = ''              --20210202 주석
		           --AND {add_opt_yn}            = 0               --20210202 주석
		    END
		ELSE
		    BEGIN
		        INSERT INTO IF_ORDER_LIST_GET (
		               SOL_NO
		             , UNIQ
		             , ORI_UNIQ
		             , BUNDLE_NO
		             , ORD_STATUS
		             , SKU_CD
		             , CARR_NO
		             , CARR_NAME
		             , INVOICE_NO
		             , SHIP_PLAN_DATE
		             , SHOP_CD
		             , SHOP_NAME
		             , SHOP_ID
		             , SELLER_NICK
		             , SHOP_ORD_NO
		             , SHOP_SALE_NO
		             , SHOP_SALE_NAME
		             , SHOP_OPT_NAME
		             , SALE_CNT
		             , SHOP_ADD_OPT_NAME
		             , SHIP_METHOD
		             , OUT_TIME
		             , WDATE
		             , ORD_TIME
		             , PAY_TIME
		             , ORD_CONFIRM_TIME
		             , SALES
		             , SALES_TAX
		             , SHOP_COST_PRICE
		             , SHOP_SUPPLY_PRICE
		             , SHIP_DELAY_YN
		             , ORDER_NAME
		             , ORDER_ID
		             , ORDER_TEL
		             , ORDER_HTEL
		             , ORDER_EMAIL
		             , SHIP_MSG
		             , OUT_ORDER_TIME
		             , TO_CTRY_CD
		             , TO_NAME
		             , TO_TEL
		             , TO_HTEL
		             , TO_ADDR1
		             , TO_ADDR2
		             , TO_ZIPCD
		             , SHIP_COST
		             , C_SALE_CD
		             , ORD_CURR_CD
		             , GPRIVATE_NO
		             , BARCODE
		             , DEPOT_NO
		             , DEPOT_NAME
		             , INVOICE_SEND_TIME
		             , GIFT_NAME
		             , GIFT_PROD_NAME
		             , MAP_YN
		             , SHIP_AVAIL_YN
		             , SHIP_UNABLE_REASON
		             , ORD_STATUS_MSG
		             , EXCHANGE_YN
		             , MEMO_YN
		             , BUNDLE_AVAIL_YN
		             , SET_NO
		             , SET_PACK_UNIT
		             , SET_NAME
		             , PAY_METHOD
		             , MISC1
		             , RECORDSTOTAL
		             , ORD_STATUS_MDATE   --20201202 추가
		             , PA_ADDCOL_GROUPING --20210105 추가
		             , pack_unit          --20210416 추가
		             , INSERT_DB_USER
		             , INSERT_DB_TIME
		             , UPDATE_DB_USER
		             , UPDATE_DB_TIME
		        )
		        SELECT A.SOL_NO
		             , A.UNIQ + '_' + CONVERT(NVARCHAR, #{ord_opt_seq})
		             , A.ORI_UNIQ
		             , A.BUNDLE_NO
		             , A.ORD_STATUS
		             , #{sku_cd}
		             , A.CARR_NO
		             , A.CARR_NAME
		             , A.INVOICE_NO
		             , A.SHIP_PLAN_DATE
		             , A.SHOP_CD
		             , A.SHOP_NAME
		             , A.SHOP_ID
		             , A.SELLER_NICK
		             , A.SHOP_ORD_NO
		             , A.SHOP_SALE_NO
		             , #{ord_opt_name}
		             , A.SHOP_OPT_NAME
		             , #{opt_sale_cnt}
		             , A.SHOP_ADD_OPT_NAME
		             , A.SHIP_METHOD
		             , A.OUT_TIME
		             , A.WDATE
		             , A.ORD_TIME
		             , A.PAY_TIME
		             , A.ORD_CONFIRM_TIME
		             , 0
		             , 0
		             , 0
		             , 0
		             , A.SHIP_DELAY_YN
		             , A.ORDER_NAME
		             , A.ORDER_ID
		             , A.ORDER_TEL
		             , A.ORDER_HTEL
		             , A.ORDER_EMAIL
		             , A.SHIP_MSG
		             , A.OUT_ORDER_TIME
		             , A.TO_CTRY_CD
		             , A.TO_NAME
		             , A.TO_TEL
		             , A.TO_HTEL
		             , A.TO_ADDR1
		             , A.TO_ADDR2
		             , A.TO_ZIPCD
		             , A.SHIP_COST
		             , A.C_SALE_CD
		             , A.ORD_CURR_CD
		             , A.GPRIVATE_NO
		             , A.BARCODE
		             , A.DEPOT_NO
		             , A.DEPOT_NAME
		             , A.INVOICE_SEND_TIME
		             , A.GIFT_NAME
		             , A.GIFT_PROD_NAME
		             , A.MAP_YN
		             , A.SHIP_AVAIL_YN
		             , A.SHIP_UNABLE_REASON
		             , A.ORD_STATUS_MSG
		             , A.EXCHANGE_YN
		             , A.MEMO_YN
		             , A.BUNDLE_AVAIL_YN
		             , A.SET_NO
		             , A.SET_PACK_UNIT
		             , A.SET_NAME
		             , A.PAY_METHOD
		             , A.MISC1
		             , A.RECORDSTOTAL
		             , A.ORD_STATUS_MDATE
		             , A.PA_ADDCOL_GROUPING
		             , #{pack_unit}          --20210416 추가
		             , A.INSERT_DB_USER
		             , A.INSERT_DB_TIME
		             , A.UPDATE_DB_USER
		             , A.UPDATE_DB_TIME
		          FROM IF_ORDER_LIST_GET A
		         WHERE A.UNIQ                    = #{uniq}
		           AND A.SOL_NO                  = #{sol_no}
		           AND ISNULL(A.APPLY_FLAG, 'N') = 'N'
		           AND ${add_opt_yn}             = 1
		    END
	</update>

<!-- 새로 가져온 데이터 갯수 체크 -->
	<select id="s_sof103ukrv_wmServiceImpl.countNewData" parameterType="Map" resultType="int">
		/* s_sof103ukrv_wmServiceImpl.countNewData */
		SELECT COUNT(*)
		  FROM IF_ORDER_LIST_GET WITH(NOLOCK)
		 WHERE ISNULL(APPLY_FLAG,  'N') = 'N'
	</select>



<!-- IF_ORDER_LIST_GET의 data로 수주상세정보 생성 -->
	<update id="s_sof103ukrv_wmServiceImpl.insertOrderDetail" parameterType="Map" useGeneratedKeys="false">
		/* s_sof103ukrv_wmServiceImpl.insertOrderDetail: master Data는 sp에서 생성 */
		--1. 신규 주문 데이터로 수주상세 데이터 생성
		INSERT INTO L_SOF110T_WM
		     ( KEY_VALUE        , OPR_FLAG
		     --sof100t 데이터
		     , CUSTOM_CODE
		     , ORDER_PRSN       , ORDER_DATE        , TAX_INOUT    --20201202 추가
		     --sof110t 데이터
		     , COMP_CODE        , DIV_CODE          , ORDER_NUM         , SER_NO
		     , ITEM_CODE
		     , DVRY_DATE
		     , ORDER_Q          , ORDER_P
		     , ORDER_O
		     , ORDER_TAX_O
		     , PRICE_YN
		     , TAX_TYPE         , INOUT_TYPE_DETAIL
		     , ORDER_UNIT       , TRANS_RATE        , OUT_DIV_CODE      , SALE_CUST_CD
		     , CUSTOM_ITEM_CODE , CUSTOM_ITEM_NAME  , REMARK            , INVOICE_NUM
		     , UNIQUEID         , NUMBER                                                                         --주문번호, 순번
		     --임시테이블에 컬럼 생성
		     , ORD_STATUS       , SENDER_CODE       , SENDER
		     , SHOP_SALE_NAME   , SHOP_OPT_NAME     , DELIV_METHOD      , DELIV_PRICE       , BUNDLE_NO
		     --주문자
		     , CUSTOMER_ID2     , ORDER_NAME        , ORDER_TEL1        , ORDER_TEL2        , ORDER_MAIL        , MSG
		     , PAY_TIME         --20201229 추가
		     --수령자
		     , RECEIVER_NAME    , TELEPHONE_NUM1    , TELEPHONE_NUM2    , ADDRESS1          , ADDRESS2          , ZIP_NUM
		     , SHOP_ORD_NO      , SHOP_SALE_NO
		     , PA_ADDCOL_GROUPING --20210105 추가
		     , BILL_TYPE          --20210217 추가
		     , ACCOUNT_YNC        --20210406 추가
		     , INSERT_DB_USER   , INSERT_DB_TIME    , UPDATE_DB_USER    , UPDATE_DB_TIME
		)
		SELECT
		       #{KEY_VALUE}     , 'N'
		     --sof100t 데이터
		     , Z.REF_CODE1        --거래처
		     , #{ORDER_PRSN}    , #{ORDER_DATE}     , #{TAX_INOUT}    --20201202 추가
		     --sof110t 데이터
		     , #{S_COMP_CODE}   , #{DIV_CODE}       , ''                , ROW_NUMBER() OVER(PARTITION BY Z.REF_CODE1, Z.CODE_NAME ORDER BY Z.REF_CODE1)
		     , A.SKU_CD
		     , ISNULL(REPLACE(CONVERT(NVARCHAR(10), A.SHIP_PLAN_DATE, 112), '-', ''), #{ORDER_DATE2})
		     , (A.SALE_CNT * ISNULL(A.pack_unit, 1))                                                                                    --20210421 수정: playauto 데이터 가져올 때는 A.SALE_CNT * A.pack_unit 해서 sale_cnt에 insert
		     , (CASE WHEN A.SOL_NO  = '9999' OR A.SOL_NO = '9990'  --20210923 추가:  OR A.SOL_NO = '9990'
		               OR A.SHOP_CD = 'A112'
		               OR A.SHOP_CD = 'A113' THEN A.SHOP_SUPPLY_PRICE                                                                   --20210413 수정: 쇼핑몰 데이터는 SALES 대신 SHOP_SUPPLY_PRICE 사용, 20210625 수정: PLAY_AUTO.11번가 추가
		             ELSE A.SALES
		        END                                 + CASE WHEN ISNULL(X2.COUNT, 0) > 0 THEN ISNULL(X.SALES, 0)
		                                                   ELSE 0
		                                              END) / (A.SALE_CNT * ISNULL(A.pack_unit, 1))                                      --20201224 수정: 동일한 BUNDLE_NO에 제품이 없을 때는 해당품목의 가격 그대로 입력하도록 수정, 20210114 수정, 20210421 수정: playauto 데이터 가져올 때는 A.SALE_CNT * A.pack_unit 해서 sale_cnt에 insert
		     , uniLITE.fnGetTaxCalcWithTaxInout(#{S_COMP_CODE}, Z.REF_CODE1, A.SKU_CD, #{TAX_INOUT}, (CASE WHEN A.SOL_NO  = '9999' OR A.SOL_NO = '9990'  --20210923 추가:  OR A.SOL_NO = '9990'
		                                                                                                     OR A.SHOP_CD = 'A112'
		                                                                                                     OR A.SHOP_CD = 'A113' THEN A.SHOP_SUPPLY_PRICE --20210413 수정: 쇼핑몰 데이터는 SALES 대신 SHOP_SUPPLY_PRICE 사용, 20210625 수정: PLAY_AUTO.11번가 추가
		                                                                                                   ELSE A.SALES
		                                                                                              END     + CASE WHEN ISNULL(X2.COUNT, 0) > 0 THEN ISNULL(X.SALES, 0)
		                                                                                                             ELSE 0
		                                                                                                        END), '1')                                 --금액, 20201224 수정: 동일한 BUNDLE_NO에 제품이 없을 때는 해당품목의 가격 그대로 입력하도록 수정, 20210114 수정
		     , uniLITE.fnGetTaxCalcWithTaxInout(#{S_COMP_CODE}, Z.REF_CODE1, A.SKU_CD, #{TAX_INOUT}, (CASE WHEN A.SOL_NO  = '9999' OR A.SOL_NO = '9990'  --20210923 추가:  OR A.SOL_NO = '9990'
		                                                                                                     OR A.SHOP_CD = 'A112'
		                                                                                                     OR A.SHOP_CD = 'A113' THEN A.SHOP_SUPPLY_PRICE --20210413 수정: 쇼핑몰 데이터는 SALES 대신 SHOP_SUPPLY_PRICE 사용, 20210625 수정: PLAY_AUTO.11번가 추가
		                                                                                                   ELSE A.SALES
		                                                                                              END     + CASE WHEN ISNULL(X2.COUNT, 0) > 0 THEN ISNULL(X.SALES, 0)
		                                                                                                             ELSE 0
		                                                                                                        END), '2')    --세액, 20201224 수정: 동일한 BUNDLE_NO에 제품이 없을 때는 해당품목의 가격 그대로 입력하도록 수정, 20210114 수정
		     , '2'  --진단가
		     , B.TAX_TYPE       , '10'  --INOUT_TYPE_DETAIL
		     , C.ORDER_UNIT     , C.TRNS_RATE       , #{DIV_CODE}       , Z.REF_CODE1           --20210108 수정: A.SHOP_CD -> Z.REF_CODE1
		     , ''               , A.SHOP_SALE_NAME  , ''                , A.INVOICE_NO
		     , A.UNIQ           , A.SOL_NO                                                      --주문번호, 순번 (유통) 사용
		     --임시테이블에 컬럼 생성
		     , A.ORD_STATUS     , A.CARR_NO         , A.CARR_NAME
		     , A.SHOP_SALE_NAME , A.SHOP_OPT_NAME   , CASE WHEN ISNULL(Y.SUB_CODE, '') = '' THEN A.SHIP_METHOD               --20201217 수정: 배송방법 공통코드 화
		                                                   ELSE Y.SUB_CODE
		                                              END               , A.SHIP_COST         , A.BUNDLE_NO
		     --주문자
		     , A.ORDER_ID       , A.ORDER_NAME      , A.ORDER_TEL       , A.ORDER_HTEL        , A.ORDER_EMAIL   , A.SHIP_MSG
		     , CASE WHEN ISNULL(A.PAY_TIME, '') = '' THEN CONVERT(NVARCHAR, GETDATE(), 20)
		            ELSE ISNULL(A.PAY_TIME, '')
		       END              --20201229 추가, 20210201 수정: isnull 처리
		     --수령자
		     , A.TO_NAME        , A.TO_TEL          , A.TO_HTEL         , A.TO_ADDR1          , A.TO_ADDR2      , A.TO_ZIPCD
		     , A.SHOP_ORD_NO    , A.SHOP_SALE_NO
		     , A.PA_ADDCOL_GROUPING                 --20210105 추가
		     , '70'                                 --20210217 추가: 쇼핑몰 데이터는 '기타매출'로 설정
		     --20210406 수정: 로그 테이블에 매출대상여부 INSERT하도록 수정
		     , CASE WHEN ISNULL(uniLITE.fnGetTaxCalcWithTaxInout(#{S_COMP_CODE}, Z.REF_CODE1, A.SKU_CD, #{TAX_INOUT}, (CASE WHEN A.SOL_NO  = '9999' OR A.SOL_NO = '9990'  --20210923 추가:  OR A.SOL_NO = '9990'
		                                                                                                                      OR A.SHOP_CD = 'A112'
		                                                                                                                      OR A.SHOP_CD = 'A113' THEN A.SHOP_SUPPLY_PRICE --20210413 수정: 쇼핑몰 데이터는 SALES 대신 SHOP_SUPPLY_PRICE 사용, 20210625 수정: PLAY_AUTO.11번가 추가
		                                                                                                                    ELSE A.SALES
		                                                                                                                END    + CASE WHEN ISNULL(X2.COUNT, 0) > 0 THEN ISNULL(X.SALES, 0)
		                                                                                                                              ELSE 0
		                                                                                                                         END), '1'), 0) = 0 THEN 'N'
		            ELSE 'Y'
		       END              AS ACCOUNT_YNC
		     , #{S_USER_ID}     , GETDATE()         , #{S_USER_ID}      , GETDATE()
		  FROM      IF_ORDER_LIST_GET A WITH(NOLOCK)
		  --20201208 수정: 거래처 정보 MAPPING으로 변경됨에 따라 수정
		  INNER JOIN BSA100T          Z WITH(NOLOCK) ON Z.COMP_CODE    = #{S_COMP_CODE}
		                                            AND Z.MAIN_CODE    = 'Z006'
		                                            AND Z.SUB_CODE     = A.SHOP_CD
		  INNER JOIN BPR100T          B WITH(NOLOCK) ON B.COMP_CODE    = #{S_COMP_CODE}
		                                            AND B.ITEM_CODE    = A.SKU_CD
		                                            AND B.USE_YN       = 'Y'                        --20210520 추가
		  INNER JOIN BPR200T          C WITH(NOLOCK) ON C.COMP_CODE    = #{S_COMP_CODE}
		                                            AND C.DIV_CODE     = #{DIV_CODE}
		                                            AND C.ITEM_CODE    = A.SKU_CD
		  --SOF110T에 등록한 제품의 경우, 해당 금액에 다른 품목(옵션품목)의 금액까지 더하기 위해 추가
		  LEFT  JOIN ( SELECT BUNDLE_NO
		                    , ISNULL(PA_ADDCOL_GROUPING, '') AS PA_ADDCOL_GROUPING                  --20210114 추가
		                    , CASE WHEN A.SOL_NO  = '9999' OR A.SOL_NO = '9990'  --20210923 추가:  OR A.SOL_NO = '9990'
		                             OR A.SHOP_CD = 'A112'
		                             OR A.SHOP_CD = 'A113' THEN SUM(A.SHOP_SUPPLY_PRICE)             --20210413 수정: 쇼핑몰 데이터는 SALES 대신 SHOP_SUPPLY_PRICE 사용, 20210625 수정: PLAY_AUTO.11번가 추가
		                           ELSE SUM(A.SALES)
		                      END                            AS SALES
		                 FROM       IF_ORDER_LIST_GET A WITH(NOLOCK)
		                 INNER JOIN BPR200T           B WITH(NOLOCK) ON B.COMP_CODE     = #{S_COMP_CODE}
		                                                            AND B.DIV_CODE      = #{DIV_CODE}
		                                                            AND B.ITEM_CODE     = A.SKU_CD
		                                                            AND B.ITEM_ACCOUNT != '10'      --제품 아닌 것
		                WHERE ISNULL(APPLY_FLAG, 'N') = 'N'
		                GROUP BY BUNDLE_NO, A.SOL_NO, ISNULL(PA_ADDCOL_GROUPING, ''), A.SHOP_CD ) X ON X.BUNDLE_NO                      = A.BUNDLE_NO                           --20210625 추가: A.SHOP_CD
		                                                                                           AND ISNULL(X.PA_ADDCOL_GROUPING, '') = ISNULL(A.PA_ADDCOL_GROUPING, '')      --20210114 추가
		  --20201224 추가: 제품인 품목 COUNT - 동일한 BUNDLE_NO에 제품이 없을 경우, 해당 품목 전체를 SOF110T에 등록하기 위해 로직 추가 
		  LEFT  JOIN ( SELECT BUNDLE_NO
		                    , ISNULL(PA_ADDCOL_GROUPING, '') AS PA_ADDCOL_GROUPING                  --20210114 추가
		                    , COUNT(A.BUNDLE_NO)             AS COUNT
		                 FROM       IF_ORDER_LIST_GET A WITH(NOLOCK)
		                 LEFT  JOIN BPR200T           B WITH(NOLOCK) ON B.COMP_CODE     = #{S_COMP_CODE}
		                                                            AND B.DIV_CODE      = #{DIV_CODE}
		                                                            AND B.ITEM_CODE     = A.SKU_CD
		                WHERE ISNULL(APPLY_FLAG, 'N') = 'N'
		                  AND A.ORD_STATUS    = '신규주문'  --20210226 추가
		                  AND B.ITEM_ACCOUNT  = '10'    --제품
		                GROUP BY BUNDLE_NO, ISNULL(PA_ADDCOL_GROUPING, '') ) X2 ON X2.BUNDLE_NO                      = A.BUNDLE_NO
		                                                                       AND ISNULL(X2.PA_ADDCOL_GROUPING, '') = ISNULL(A.PA_ADDCOL_GROUPING, '')      --20210114 추가
		  --20201217 추가: 배송방법 공통코드 화
		  LEFT  JOIN BSA100T          Y WITH(NOLOCK) ON Y.COMP_CODE    = #{S_COMP_CODE}
		                                            AND Y.MAIN_CODE    = 'ZM11'
		                                            AND Y.CODE_NAME    = CASE WHEN A.SHIP_METHOD = '퀵' THEN '퀵배송' --20210308 수정
		                                                                      ELSE A.SHIP_METHOD
		                                                                 END
		  --20210204 추가: 동일한 BUNDLE_NO에 SKU_CD가 없는 데이터가 있으면 등록하지 않음
		  LEFT  JOIN ( SELECT BUNDLE_NO
		                    , COUNT(BUNDLE_NO)  AS COUNT
		                 FROM IF_ORDER_LIST_GET WITH(NOLOCK)
		                WHERE ISNULL(SKU_CD, '') = ''
		                  AND SOL_NO            != '9999'    --20210225 추가: 쇼핑몰 데이터는 등록
		                  AND SOL_NO            != '9990'    --20210923 추가: 쇼핑몰 데이터는 등록
		                GROUP BY BUNDLE_NO ) X3      ON X3.BUNDLE_NO   = A.BUNDLE_NO
		 --20201224 추가: 제품이거나, 제품이 아니고 동일 BUNDLE_NO에 제품이 없는 품목, 20210126 수정: 조건 추가
		 WHERE ((C.ITEM_ACCOUNT  = '10'  AND (ISNULL(X2.COUNT, 0) = 1 OR (ISNULL(X2.COUNT, 0) > 1 AND ISNULL(A.PA_ADDCOL_GROUPING, '') != '')))
		     OR (C.ITEM_ACCOUNT != '10'  AND ISNULL(X2.COUNT, 0) = 0))
		   AND ISNULL(A.APPLY_FLAG, 'N') = 'N'
		   AND A.ORD_STATUS              IN ('신규주문')
		   AND ISNULL(X3.COUNT, 0)       = 0               --20210204 추가: 동일한 BUNDLE_NO에 SKU_CD가 없는 데이터가 있으면 등록하지 않음


		--2. 20210226 - SP로 이동: 삭제 (SOF110T의 CLOSE_YN = 'Y'으로 update: 주문 취소의 경우 다른작업 없이 SOF110T의 CLOSE_YN = 'Y'으로 update)
		--3. 20201229 - SP로 이동: 삭제 (interface data 상태값 update)
	</update>

	<select id="s_sof103ukrv_wmServiceImpl.getNoRegiData" parameterType="Map" resultType="rMap">
		/* s_sof103ukrv_wmServiceImpl.getNoRegiData: 20210126 일괄 수정 */
		SELECT BUNDLE_NO, ORDER_NAME
		  FROM (
		        SELECT CASE WHEN ISNULL(A.SKU_CD, '') = '' AND ISNULL(A.SOL_NO, '') != '9999' AND ISNULL(A.SOL_NO, '') != '9990' THEN A.BUNDLE_NO   --20210313 수정: SKU_CD 체크는 쇼핑몰 제외, 20210923 추가: AND ISNULL(A.SOL_NO, '') != '9990'
		                    ELSE ''
		               END                                                         AS BUNDLE_NO
		             , CASE WHEN C.ITEM_ACCOUNT = '10' AND ISNULL(X2.COUNT, 0) > 1 AND ISNULL(A.PA_ADDCOL_GROUPING, '') = '' THEN ORDER_NAME + '(' + A.BUNDLE_NO + ')'
		                    ELSE ''
		               END                                                         AS ORDER_NAME
		          FROM IF_ORDER_LIST_GET A WITH(NOLOCK)
		          --20210203 수정: ORD_STATUS가 신규주문일 때만.. 체크
		          LEFT  JOIN ( SELECT BUNDLE_NO
		                            , ORD_STATUS
		                            , ISNULL(PA_ADDCOL_GROUPING, '') AS PA_ADDCOL_GROUPING
		                            , COUNT(A.BUNDLE_NO) AS COUNT
		                         FROM       IF_ORDER_LIST_GET A WITH(NOLOCK)
		                         LEFT  JOIN BPR200T           B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
		                                                                    AND B.DIV_CODE  = #{DIV_CODE}
		                                                                    AND B.ITEM_CODE = A.SKU_CD
		                        WHERE ISNULL(APPLY_FLAG, 'N') = 'N'
		                          AND B.ITEM_ACCOUNT          = '10'
		                        GROUP BY BUNDLE_NO, ORD_STATUS, ISNULL(PA_ADDCOL_GROUPING, '') ) X2 ON X2.BUNDLE_NO                      = A.BUNDLE_NO
		                                                                                           AND ISNULL(X2.PA_ADDCOL_GROUPING, '') = ISNULL(A.PA_ADDCOL_GROUPING, '')
		                                                                                           AND X2.ORD_STATUS                     = A.ORD_STATUS
		          LEFT  JOIN BPR200T          C WITH(NOLOCK) ON C.COMP_CODE  = #{S_COMP_CODE}
		                                                    AND C.DIV_CODE   = #{DIV_CODE}
		                                                    AND C.ITEM_CODE  = A.SKU_CD
		         WHERE (ISNULL(A.SKU_CD, '') = ''
		            OR (C.ITEM_ACCOUNT = '10' AND ISNULL(X2.COUNT, 0) > 1 AND ISNULL(A.PA_ADDCOL_GROUPING, '') = ''))
		           AND A.ORD_STATUS IN ('신규주문')
		) A
		GROUP BY BUNDLE_NO, ORDER_NAME
	</select>

<!-- 20201215 추가: 조회 시, 적용된 일자(fr) 공통코드에 update -->
	<update id="s_sof103ukrv_wmServiceImpl.updateSdate" parameterType="Map">
		/* s_sof103ukrv_wmServiceImpl.updateSdate */
		UPDATE BSA100T
		   SET REF_CODE2      = #{SDATE}
		     , UPDATE_DB_TIME = GETDATE()
		     , UPDATE_DB_USER = #{S_USER_ID}
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'ZM10'
		   AND SUB_CODE  = '01'
	</update>
</mapper>