<?xml version="1.0" encoding="UTF-8"?><!---->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_pmp110rkrv_wmServiceImpl">
	<select id="s_pmp110rkrv_wmServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.selectList */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WORK_SHOP_CODE                         --작업장
		     , A.WKORD_NUM                              --작업지시번호
		     , A.PROG_WORK_CODE                         --공정
		     , A.ITEM_CODE
		     , P.ITEM_NAME
		     , C1.SPEC
		     , P.ORDER_UNIT
		     , A.WKORD_Q
		     , A.REMARK
		     , B1.ORDER_Q
		     , B1.ORDER_NUM
		     , B1.SER_NO 
		     , A.CUSTOM_CODE                            --거래처
		     , C2.CUSTOM_NAME                           --거래처
		     , B1.CUSTOMER_ID2          AS CUSTOM_ID    --주문자ID
		     --, B1.ORDER_NAME            AS CUSTOM_PRSN  --주문자명
		     , B1.RECEIVER_NAME         AS CUSTOM_PRSN  --주문자명
		     , A.PRODT_WKORD_DATE                       --작업지시일
		     , A.PRODT_START_DATE                       --착수예정일
		     , A.PRODT_END_DATE                         --완료예정일
		     , A.WKORD_PRSN                             --등록자
		     , A.LINE_END_YN
		     , ISNULL(A.TEMPC_01, 'N')  AS TEMPC_01
		     , B1.DELIV_METHOD                          --20210106 추가
		     , B1.SERVICE_NO                            --20210324 추가
		     , C1.CIR_PERIOD_YN                         --20210324 추가
		     , C1.EXPIRATION_DAY                        --20210324 추가
		  FROM       PMP100T A  WITH(NOLOCK)
		  LEFT  JOIN SOF110T B1 WITH(NOLOCK) ON B1.COMP_CODE     = A.COMP_CODE
		                                    AND B1.DIV_CODE      = A.DIV_CODE
		                                    AND B1.ORDER_NUM     = A.SO_NUM
		                                    AND B1.SER_NO        = A.SO_SEQ
		  LEFT  JOIN SOF100T B2 WITH(NOLOCK) ON B2.COMP_CODE     = B1.COMP_CODE
		                                    AND B2.DIV_CODE      = B1.DIV_CODE
		                                    AND B2.ORDER_NUM     = B1.ORDER_NUM
		  INNER JOIN BPR200T P  WITH(NOLOCK) ON P.COMP_CODE      = A.COMP_CODE
		                                    AND P.DIV_CODE       = A.DIV_CODE
		                                    AND P.ITEM_CODE      = A.ITEM_CODE
		  INNER JOIN BPR100T C1 WITH(NOLOCK) ON C1.COMP_CODE     = A.COMP_CODE
		                                    AND C1.ITEM_CODE     = A.ITEM_CODE
		  LEFT  JOIN BCM100T C2 WITH(NOLOCK) ON C2.COMP_CODE     = A.COMP_CODE
		                                    AND C2.CUSTOM_CODE   = A.CUSTOM_CODE
		 WHERE A.COMP_CODE              = #{S_COMP_CODE}
		   AND A.DIV_CODE               = #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(FR_PRODT_WKORD_DATE)">
		   AND A.PRODT_WKORD_DATE      &gt;= #{FR_PRODT_WKORD_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_PRODT_WKORD_DATE)">
		   AND A.PRODT_WKORD_DATE      &lt;= #{TO_PRODT_WKORD_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(rdoSelect)">
		   AND ISNULL(A.TEMPC_01, 'N')  = #{rdoSelect}
		</if>
		<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		   AND A.WORK_SHOP_CODE         = #{WORK_SHOP_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_PRSN)">
		   AND (B1.RECEIVER_NAME        LIKE #{CUSTOM_PRSN} + '%'
		     OR B1.ORDER_NAME           LIKE #{CUSTOM_PRSN} + '%')
		</if>
		<if test="@foren.Ognl@isNotEmpty(WKORD_NUM)">
		   AND A.WKORD_NUM              LIKE #{WKORD_NUM} + '%'
		</if>
		 ORDER BY A.WKORD_NUM
	</select>


<!-- 20210324 추가: SOF110T.SERVICE_NO update 로직 추가 -->
	<update id="s_pmp110rkrv_wmServiceImpl.updateDetail" parameterType="Map">
		/*s_pmp110rkrv_wmServiceImpl.updateDetail*/
		UPDATE SOF110T
		   SET SERVICE_NO = #{SERVICE_NO}
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND ORDER_NUM  = #{ORDER_NUM}
		   AND SER_NO     = #{SER_NO}
	</update>




<!-- 작업지시서 출력 -->
	<select id="s_pmp110rkrv_wmServiceImpl.printMasterData" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.printMasterData */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WORK_SHOP_CODE                                 --작업장
		     , P1.TREE_NAME                   AS WORK_SHOP_NAME --작업장
		     , A.WKORD_NUM                                      --작업지시번호
		     , A.PROG_WORK_CODE                                 --공정
		     , A.ITEM_CODE
		     , P.ITEM_NAME
		     , C1.SPEC
		     , P.ORDER_UNIT
		     , A.WKORD_Q
		     , A.REMARK
		     , B1.ORDER_Q
		     , B1.ORDER_NUM
		     , B1.SER_NO 
		     , ''                             AS CUSTOM_CODE    --거래처, 20201211 수정: ''으로 수정
		     , ''                             AS CUSTOM_NAME    --거래처, 20201211 수정: ''으로 수정
		     , B1.RECEIVER_ID                 AS CUSTOM_ID      --주문자ID, 20201211 수정
		     , CASE WHEN ISNULL(B1.RECEIVER_NAME, '') = '' THEN A.CUSTOM_NAME
		            ELSE ISNULL(B1.RECEIVER_NAME, '')
		       END                            AS CUSTOM_PRSN    --주문자명, 20201211 수정, 20210127 수정
		     , A.PRODT_WKORD_DATE                               --작업지시일
		     , A.PRODT_START_DATE                               --착수예정일
		     , A.PRODT_END_DATE                                 --완료예정일
		     --, A.WKORD_PRSN                                     --등록자
		     --, P2.CODE_NAME                   AS WKORD_PRSN_NM  --등록자
		     , A.LINE_END_YN
		     , ISNULL(A.TEMPC_01, 'N')        AS TEMPC_01
		     --20201211 추가
		     , ISNULL(B1.BUNDLE_NO, '')       AS BUNDLE_NO
		     , B1.SHOP_OPT_NAME                                 --옵션명
		     --20210622 추가
			 , B1.SHOP_SALE_NAME                                --상품명
		     , A.CUSTOM_CODE                  AS PURCH_CODE     --구매처
		     , C2.CUSTOM_NAME                 AS PURCH_NAME     --구매처
		     , B1.DELIV_METHOD                                  --배송방법
		     --20201223 추가: 배송방법 공통코드로 변경하면서 명 가져오기 위해 추가
		     , Z2.CODE_NAME                   AS DELIV_METHOD_NM --배송방법
		     --20201223 추가: 결재일자, 금액, 배송지, 배송메세지
		     , REPLACE(B1.PAY_TIME, '-', '.') AS PAY_TIME       --결재일자, 20210223 수정: if_order_list_get에서 가져오던 데이터 sof110t에서 가져오도록 수정 - Z1.PAY_TIME -> B1.PAY_TIME
		     , ISNULL(B1.ADDRESS1, '')
		     + ISNULL(B1.ADDRESS2, '')        AS ADDRESS        --배송지
		     , CASE WHEN ISNULL(B1.MSG, '') = ISNULL(A.REMARK, '') THEN ISNULL(B1.MSG, '')
		            ELSE ISNULL(B1.MSG, '') + ' ' + ISNULL(A.REMARK, '')
		       END                            AS MSG              --20210127 수정: 배송메세지, 20210504 수정: ISNULL(B1.MSG, '') + ISNULL(A.REMARK, '')에서 변경
		     , ISNULL(B1.ORDER_O, 0)
		     + ISNULL(B1.ORDER_TAX_O, 0)      AS ORDER_SUM_O    --금액
		     , B2.ORDER_PRSN                                    --20201224 추가: 영업담당
		     , P3.CODE_NAME                   AS ORDER_PRSN_NM  --20201224 추가: 영업담당
		     , A.UPDATE_DB_USER                                 --20201224 추가: 등록자
		     , P2.USER_NAME                   AS WKORD_PRSN_NM  --20201224 추가: 등록자
		     --, CASE WHEN ISNULL(B1.TELEPHONE_NUM1, '') = '' THEN B1.TELEPHONE_NUM2
		     --       ELSE B1.TELEPHONE_NUM1
		     --  END                            AS TELEPHONE_NUM  --20201224 추가: 연락처
		     , ISNULL(B1.TELEPHONE_NUM1, '') + ' / ' + ISNULL(B1.TELEPHONE_NUM2, '')
		                                      AS TELEPHONE_NUM  --20201224 추가: 연락처
		     , ISNULL(X.ISSUE_REQ_NUM, '')    AS ISSUE_REQ_NUM
		  FROM       PMP100T           A  WITH(NOLOCK)
		  LEFT  JOIN SOF110T           B1 WITH(NOLOCK) ON B1.COMP_CODE   = A.COMP_CODE
		                                              AND B1.DIV_CODE    = A.DIV_CODE
		                                              AND B1.ORDER_NUM   = A.SO_NUM
		                                              AND B1.SER_NO      = A.SO_SEQ
		  LEFT  JOIN SOF100T           B2 WITH(NOLOCK) ON B2.COMP_CODE   = B1.COMP_CODE
		                                              AND B2.DIV_CODE    = B1.DIV_CODE
		                                              AND B2.ORDER_NUM   = B1.ORDER_NUM
		  LEFT  JOIN SRQ100T           X  WITH(NOLOCK) ON X.COMP_CODE   = A.COMP_CODE
                                                      AND X.DIV_CODE    = A.DIV_CODE
                                                      AND X.ORDER_NUM   = A.SO_NUM
                                                      AND X.SER_NO      = A.SO_SEQ
		  INNER JOIN BPR200T           P  WITH(NOLOCK) ON P.COMP_CODE    = A.COMP_CODE
		                                              AND P.DIV_CODE     = A.DIV_CODE
		                                              AND P.ITEM_CODE    = A.ITEM_CODE
		  INNER JOIN BPR100T           C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
		                                              AND C1.ITEM_CODE   = A.ITEM_CODE
--		  INNER JOIN BCM100T           C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		  LEFT  JOIN BCM100T           C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                              AND C2.CUSTOM_CODE = A.CUSTOM_CODE
		  INNER JOIN BSA230T           P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
		                                              AND P1.TREE_CODE   = A.WORK_SHOP_CODE
		  --20201224 주석: 아래로직으로 대체
		  --LEFT  JOIN BSA100T           P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
		  --                                            AND P2.MAIN_CODE   = 'P510'
		  --                                            AND P2.SUB_CODE    = A.WKORD_PRSN
		  --20201224 추가: 등록자, 영업담당 가져오기 위해 추가
		  LEFT  JOIN BSA300T           P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
		                                              AND P2.USER_ID     = A.UPDATE_DB_USER
		  LEFT  JOIN BSA100T           P3 WITH(NOLOCK) ON P3.COMP_CODE   = A.COMP_CODE
		                                              AND P3.MAIN_CODE   = 'S010'
		                                              AND P3.SUB_CODE    = B2.ORDER_PRSN
		  --20201223 추가: 결재일자 가져오기 위해 추가, 20210223 주석: if_order_list_get에서 가져오던 데이터 sof110t에서 가져오도록 수정 - Z1.PAY_TIME -> B1.PAY_TIME
		  --LEFT  JOIN IF_ORDER_LIST_GET Z1 WITH(NOLOCK) ON Z1.BUNDLE_NO   = B1.BUNDLE_NO
		  --                                            AND Z1.UNIQ        = B1.UNIQUEID
		  --                                            AND Z1.SOL_NO      = CONVERT(NUMERIC, B1.NUMBER)
		  --20201223 추가: 배송방법 명으로 가져오기 위해 추가
		  LEFT  JOIN BSA100T           Z2 WITH(NOLOCK) ON Z2.COMP_CODE   = B1.COMP_CODE
		                                              AND Z2.MAIN_CODE   = 'ZM11'
		                                              AND Z2.SUB_CODE    = B1.DELIV_METHOD
		 WHERE A.COMP_CODE              = #{S_COMP_CODE}
		   AND A.DIV_CODE               = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.WORK_SHOP_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
		 ORDER BY A.WKORD_NUM    --20210309 추가
	</select>

	<select id="s_pmp110rkrv_wmServiceImpl.printDetailData" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.printDetailData */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WORK_SHOP_CODE                             --작업장
		     , P1.TREE_NAME           AS WORK_SHOP_CODE     --작업장
		     , A.WKORD_NUM                                  --작업지시번호
		     , A.SEQ
		     , A.ITEM_CODE
		     , C1.ITEM_NAME
		     , C1.SPEC
		     , A.ALLOCK_Q
		     , A.REMARK
		     --20201223 추가: 금액 가져오기 위해 추가
		     , SUM(ISNULL(B2.UNIT_O, 0))                    AS ORDER_SUM_O    --금액
			 , MAX(ISNULL(S.TARGET_COUNT, '1'))             AS TARGET_COUNT   --20210325 수정: 본품, 구성품 구분하기 위해 추가(2이면 진하게)
		  FROM       PMP200T      A  WITH(NOLOCK)
		  --20201223 추가: 금액 가져오기 위해 추가
		  INNER JOIN PMP100T      B  WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
		                                         AND B.DIV_CODE     = A.DIV_CODE
		                                         AND B.WKORD_NUM    = A.WKORD_NUM
		                                         AND B.LINE_END_YN  = 'Y'
		  --20201223 추가: 금액 가져오기 위해 추가
		  LEFT  JOIN SOF110T      B1 WITH(NOLOCK) ON B1.COMP_CODE   = B.COMP_CODE
		                                         AND B1.DIV_CODE    = B.DIV_CODE
		                                         AND B1.ORDER_NUM   = B.SO_NUM
		                                         AND B1.SER_NO      = B.SO_SEQ
		  --20201223 추가: 금액 가져오기 위해 추가
		  LEFT  JOIN S_SOF115T_WM B2 WITH(NOLOCK) ON B2.COMP_CODE   = B1.COMP_CODE
		                                         AND B2.DIV_CODE    = B1.DIV_CODE
		                                         AND B2.ORDER_NUM   = B1.ORDER_NUM
		                                         AND B2.SER_NO      = B1.SER_NO
		                                         AND B2.ITEM_CODE   = A.ITEM_CODE
		  INNER JOIN BPR100T      C1 WITH(NOLOCK) ON C1.COMP_CODE = A.COMP_CODE
		                                         AND C1.ITEM_CODE = A.ITEM_CODE
		  INNER JOIN BSA230T      P1 WITH(NOLOCK) ON P1.COMP_CODE = A.COMP_CODE
		                                         AND P1.TREE_CODE = A.WORK_SHOP_CODE
		  --20210325 수정: 본품, 구성품 구분하기 위해 추가
		  LEFT  JOIN BPR000T      S  WITH(NOLOCK) ON S.COMP_CODE = C1.COMP_CODE
		                                         AND S.LEVEL1    = C1.ITEM_LEVEL1
		                                         AND S.LEVEL2    = '*'
		                                         AND S.LEVEL3    = '*'
		 WHERE A.COMP_CODE              = #{S_COMP_CODE}
		   AND A.DIV_CODE               = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.WORK_SHOP_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
		 GROUP BY  A.COMP_CODE, A.DIV_CODE, A.WORK_SHOP_CODE, P1.TREE_NAME, A.WKORD_NUM
		     , A.SEQ, A.ITEM_CODE, C1.ITEM_NAME, C1.SPEC, A.ALLOCK_Q, A.REMARK, C1.ITEM_LEVEL1
		 ORDER BY TARGET_COUNT, C1.ITEM_LEVEL1         --20210325 수정: 본품, 구성품 구분하기 위해 추가
	</select>

<!-- 작업지시서 출력 후, 상태값 update -->
	<update id="s_pmp110rkrv_wmServiceImpl.updatePrintStatus" parameterType="Map">
		/* s_pmp110rkrv_wmServiceImpl.updatePrintStatus */
		UPDATE PMP100T
		   SET TEMPC_01 = 'Y'
		 WHERE COMP_CODE     = #{S_COMP_CODE}
		   AND DIV_CODE      = #{DIV_CODE}
		   AND WKORD_NUM + '/' + WORK_SHOP_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
	</update>



<!-- 라벨 출력: 20201102 추가 -->
	<select id="s_pmp110rkrv_wmServiceImpl.printLabelData" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.printLabelData */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WKORD_Q                                --작업지시번호별 출력매수로 사용
		     , A.WKORD_NUM                              --작업지시번호
		     , 'NO. ' + CONVERT(NVARCHAR, (CONVERT(INT, RIGHT(WKORD_NUM, 3))))
		     + CASE WHEN A.WKORD_Q > 1 THEN ' - ' + CONVERT(NVARCHAR, Z.NUMBER)
		            ELSE ''
		       END                                AS NO --작지번호 순번
		     , A.PRODT_WKORD_DATE                       --작업지시일
		     , C2.CUSTOM_NAME                           --매입사이트
		     --, B1.ORDER_NAME                            --주문자명
		     , B1.RECEIVER_NAME			AS ORDER_NAME     --주문자-->수신자로 변경
		     , ISNULL(B1.BUNDLE_NO, '') AS GROUPKEY                 --주문번호
		  FROM       PMP100T A  WITH(NOLOCK)
		  LEFT  JOIN SOF110T B1 WITH(NOLOCK) ON B1.COMP_CODE   = A.COMP_CODE
		                                    AND B1.DIV_CODE    = A.DIV_CODE
		                                    AND B1.ORDER_NUM   = A.SO_NUM
		                                    AND B1.SER_NO      = A.SO_SEQ
		  LEFT  JOIN SOF100T B2 WITH(NOLOCK) ON B2.COMP_CODE   = B1.COMP_CODE
		                                    AND B2.DIV_CODE    = B1.DIV_CODE
		                                    AND B2.ORDER_NUM   = B1.ORDER_NUM
		  LEFT  JOIN BCM100T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                    AND C2.CUSTOM_CODE = A.CUSTOM_CODE
		  LEFT  JOIN MASTER..spt_values Z    ON Z.TYPE = 'P'
		                                    AND Z.NUMBER BETWEEN 1 AND A.WKORD_Q
		 WHERE A.COMP_CODE              = #{S_COMP_CODE}
		   AND A.DIV_CODE               = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.WORK_SHOP_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
		 ORDER BY A.WKORD_NUM    --20210309 추가
	</select>



<!-- 운송장 출력: 20201112, 20201123 추가 -->
	<select id="s_pmp110rkrv_wmServiceImpl.getData" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.getData: 20210127 일괄 수정 */
		IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#CarriageBill_TBL'))
		    DROP TABLE #CarriageBill_TBL

		CREATE TABLE #CarriageBill_TBL (
		   FLAG            NVARCHAR(1),
		   COMP_CODE       NVARCHAR(08),
		   DIV_CODE        NVARCHAR(08),
		   WKORD_NUM       NVARCHAR(20),   --20210309 추가: 정렬 위해서
		   CUSTOM_CODE     NVARCHAR(08),
		   INVOICE_NUM     NVARCHAR(100),
		   INVOICE_NUM2    NVARCHAR(4000),
		   P_RECEIPT_DATE  NVARCHAR(08),
		   RECEIVER_NAME   NVARCHAR(50),
		   TELEPHONE_NUM1  NVARCHAR(50),
		   TELEPHONE_NUM2  NVARCHAR(50),
		   RCVRADDR        NVARCHAR(200),
		   SENDR           NVARCHAR(122),
		   FRT_DV_CD       NVARCHAR(04),
		   FRT             INT,
		   SENDR_ADDR      NVARCHAR(80),
		   ITEM_NAME       NVARCHAR(200),
		   MSG             NVARCHAR(100),
		   DELIV_PRICE     NUMERIC(30, 6)
		)

		INSERT INTO #CarriageBill_TBL
		SELECT '1'
		     , A.COMP_CODE
		     , A.DIV_CODE
		     , A.WKORD_NUM                                                                             --20210309 추가: 정렬 위해서
		     , A.CUSTOM_CODE
		     , B1.INVOICE_NUM                                                                          --운송장 번호
		     , B1.INVOICE_NUM2                                                                         --운송장 번호2
		     , ISNULL(B3.ISSUE_REQ_DATE, CONVERT(NVARCHAR(08), GETDATE(), 112)) AS P_RECEIPT_DATE      --접수번호
		     , B1.RECEIVER_NAME                                                                        --받는분성명
		     , B1.TELEPHONE_NUM1                                                                       --받는분전화번호
		     , B1.TELEPHONE_NUM2                                                                       --받는분휴대폰번호
		     , ISNULL(B1.ADDRESS1, '') + ISNULL(B1.ADDRESS2, '')                AS RCVRADDR            --받는분주소
		     , B4.DIV_NAME + ' ' + ISNULL(B4.TELEPHON, '')                      AS SENDR               --보내는분 성명 + 전화번호
		     , '선불'                                                            AS FRT_DV_CD           --운임구분코드(01:선불, 02:착불, 03:신용)
		     , 0                                                                AS FRT                 --운임
		     , ISNULL(B4.ADDR, '')                                              AS SENDR_ADDR          --보내는분 주소
		     , C1.ITEM_NAME                                                                            --상품명
		     , B1.MSG                                                                                  --배송메세지
		     , B1.DELIV_PRICE                                                                          --20201218 추가: 배송운임
		  FROM       PMP100T A  WITH(NOLOCK)
		  LEFT  JOIN SOF110T B1 WITH(NOLOCK) ON B1.COMP_CODE   = A.COMP_CODE
		                                    AND B1.DIV_CODE    = A.DIV_CODE
		                                    AND B1.ORDER_NUM   = A.SO_NUM
		                                    AND B1.SER_NO      = A.SO_SEQ
		  LEFT  JOIN SOF100T B2 WITH(NOLOCK) ON B2.COMP_CODE   = B1.COMP_CODE
		                                    AND B2.DIV_CODE    = B1.DIV_CODE
		                                    AND B2.ORDER_NUM   = B1.ORDER_NUM
		  LEFT  JOIN SRQ100T B3 WITH(NOLOCK) ON B3.COMP_CODE   = A.COMP_CODE
		                                    AND B3.DIV_CODE    = A.DIV_CODE
		                                    AND B3.ORDER_NUM   = A.SO_NUM
		                                    AND B3.SER_NO      = A.SO_SEQ
		  LEFT  JOIN BOR120T B4 WITH(NOLOCK) ON B4.COMP_CODE   = A.COMP_CODE
		                                    AND B4.DIV_CODE    = A.DIV_CODE
		  INNER JOIN BPR100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
		                                    AND C1.ITEM_CODE   = A.ITEM_CODE
		  LEFT  JOIN BCM100T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                    AND C2.CUSTOM_CODE = A.CUSTOM_CODE
		 WHERE A.COMP_CODE              = #{S_COMP_CODE}
		   AND A.DIV_CODE               = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.WORK_SHOP_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
		 ORDER BY A.WKORD_NUM    --20210309 추가

		DECLARE @COMP_CODE       NVARCHAR(08)
		      , @DIV_CODE        NVARCHAR(08)
		      , @WKORD_NUM       NVARCHAR(20)     --20210309 추가: 정렬 위해서
		      , @CUSTOM_CODE     NVARCHAR(08)
		      , @INVOICE_NUM     NVARCHAR(100)
		      , @INVOICE_NUM2    NVARCHAR(4000)
		      , @P_RECEIPT_DATE  NVARCHAR(08)
		      , @RECEIVER_NAME   NVARCHAR(50)
		      , @TELEPHONE_NUM1  NVARCHAR(50)
		      , @TELEPHONE_NUM2  NVARCHAR(50)
		      , @RCVRADDR        NVARCHAR(200)
		      , @SENDR           NVARCHAR(122)
		      , @FRT_DV_CD       NVARCHAR(04)
		      , @FRT             INT
		      , @SENDR_ADDR      NVARCHAR(80)
		      , @ITEM_NAME       NVARCHAR(200)
		      , @MSG             NVARCHAR(100)
		      , @DELIV_PRICE     NUMERIC(30, 6)

		DECLARE CarriageBillData CURSOR FOR
		    SELECT COMP_CODE
		         , DIV_CODE
		         , WKORD_NUM             --20210309 추가: 정렬 위해서
		         , CUSTOM_CODE
		         , INVOICE_NUM
		         , INVOICE_NUM2
		         , P_RECEIPT_DATE
		         , RECEIVER_NAME
		         , TELEPHONE_NUM1
		         , TELEPHONE_NUM2
		         , RCVRADDR
		         , SENDR
		         , FRT_DV_CD
		         , FRT
		         , SENDR_ADDR
		         , ITEM_NAME
		         , MSG
		         , DELIV_PRICE
		      FROM #CarriageBill_TBL WITH(NOLOCK)
		     WHERE FLAG = '1'
		OPEN CarriageBillData
		FETCH NEXT FROM CarriageBillData INTO @COMP_CODE, @DIV_CODE, @WKORD_NUM  , @CUSTOM_CODE, @INVOICE_NUM , @INVOICE_NUM2  , @P_RECEIPT_DATE, @RECEIVER_NAME, @TELEPHONE_NUM1, @TELEPHONE_NUM2
		                                    , @RCVRADDR , @SENDR   , @FRT_DV_CD  , @FRT        , @SENDR_ADDR  , @ITEM_NAME     , @MSG           , @DELIV_PRICE

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		    INSERT INTO #CarriageBill_TBL
		    SELECT '2'
		         , @COMP_CODE        AS COMP_CODE
		         , @DIV_CODE         AS DIV_CODE
		         , @WKORD_NUM        AS WKORD_NUM           --20210309 추가: 정렬 위해서
		         , @CUSTOM_CODE      AS CUSTOM_CODE
		         , value             AS INVOICE_NUM
		         , @INVOICE_NUM2     AS INVOICE_NUM2
		         , @P_RECEIPT_DATE   AS P_RECEIPT_DATE
		         , @RECEIVER_NAME    AS RECEIVER_NAME
		         , @TELEPHONE_NUM1   AS TELEPHONE_NUM1
		         , @TELEPHONE_NUM2   AS TELEPHONE_NUM2
		         , @RCVRADDR         AS RCVRADDR
		         , @SENDR            AS SENDR
		         , @FRT_DV_CD        AS FRT_DV_CD
		         , @FRT              AS FRT
		         , @SENDR_ADDR       AS SENDR_ADDR
		         , @ITEM_NAME        AS ITEM_NAME
		         , @MSG              AS MSG
		         , @DELIV_PRICE      AS DELIV_PRICE
		      FROM uniLITE.fnSplit(@INVOICE_NUM2, ',')
		    FETCH NEXT FROM CarriageBillData INTO @COMP_CODE, @DIV_CODE, @WKORD_NUM  , @CUSTOM_CODE, @INVOICE_NUM , @INVOICE_NUM2  , @P_RECEIPT_DATE, @RECEIVER_NAME, @TELEPHONE_NUM1, @TELEPHONE_NUM2
		                                        , @RCVRADDR , @SENDR   , @FRT_DV_CD  , @FRT        , @SENDR_ADDR  , @ITEM_NAME     , @MSG           , @DELIV_PRICE
		END
		CLOSE CarriageBillData
		DEALLOCATE CarriageBillData

		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.CUSTOM_CODE
		     , A.INVOICE_NUM
		     , A.INVOICE_NUM2
		     , A.P_RECEIPT_DATE
		     , A.RECEIVER_NAME
		     , A.TELEPHONE_NUM1
		     , A.TELEPHONE_NUM2
		     , A.RCVRADDR
		     , A.SENDR
		     , A.FRT_DV_CD
		     , A.FRT
		     , A.SENDR_ADDR
		     --20210204 수정: 동일 송장번호일 때, 한장만 출력하기 위해서 수정
		     , SUBSTRING(MIN(B.ITEM_ACCOUNT + B.ITEM_NAME), 3, LEN(MIN(B.ITEM_ACCOUNT + B.ITEM_NAME))) AS ITEM_NAME
		     , A.MSG
		     , A.DELIV_PRICE
		  FROM       #CarriageBill_TBL A WITH(NOLOCK)
		  INNER JOIN BPR200T           B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                             AND B.DIV_CODE  = A.DIV_CODE
		                                             AND B.ITEM_NAME = A.ITEM_NAME
		 WHERE A.FLAG = '2'
		 --20210204 수정: 동일 송장번호일 때, 한장만 출력하기 위해서 수정
		 GROUP BY A.COMP_CODE, A.DIV_CODE, A.WKORD_NUM, A.CUSTOM_CODE, A.INVOICE_NUM, A.INVOICE_NUM2, A.P_RECEIPT_DATE, A.RECEIVER_NAME
		        , A.TELEPHONE_NUM1, A.TELEPHONE_NUM2, A.RCVRADDR, A.SENDR, A.FRT_DV_CD, A.FRT, A.SENDR_ADDR, A.MSG, A.DELIV_PRICE
		 ORDER BY A.WKORD_NUM    --20210309 추가
	</select>
	<select id="s_pmp110rkrv_wmServiceImpl.printCarriageBillData" parameterType="Map" resultType="rMap">
		{call PKG_RVAP_ADDRSEARCH.PR_RVAP_SEARCHADDRESS (
		    #{P_CLNTNUM				, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLNTMGMCUSTCD		, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_PRNGDIVCD			, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CGOSTS				, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{RCVRADDR				, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_ZIPNUM				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_ZIPID				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_OLDADDRESS			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_OLDADDRESSDTL		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_NEWADDRESS			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_NESADDRESSDTL		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_ETCADDR				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_SHORTADDR			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLSFADDR			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLVBRANCD		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLVBRANNM		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLCBRANSHORTNM	, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLVEMPNUM		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLVEMPNM			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLLDLVEMPNICKNM		, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLSFCD				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_CLSFNM				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_SUBCLSFCD			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_RSPSDIV				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_NEWADDRYN			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_ERRORCD				, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String},
		    #{P_ERRORMSG			, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</select>
	<select id="s_pmp110rkrv_wmServiceImpl.printCarriageBillData_back" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.printCarriageBillData */
		DECLARE P_CLNTNUM            VARCHAR2(400) := '30292070';     /* CJ대한통운 고객ID */
		        P_CLNTMGMCUSTCD      VARCHAR2(400) := #{CUSTOM_CODE}; /* 고객관리거래처코드 */
		        P_PRNGDIVCD          VARCHAR2(400) := '01';           /* 예약구분 - 01: 일반, 02: 반품 */
		        P_CGOSTS             VARCHAR2(400) := '91';           /* 상품상태 - 11: 집화, 91: 배달 */
		        P_ADDRESS            VARCHAR2(400) := #{RCVRADDR};    /* 주소 */
		        P_ZIPNUM             VARCHAR2(400);                   /* 우편번호 */
		        P_ZIPID              VARCHAR2(400);                   /* 우편번호ID */
		        P_OLDADDRESS         VARCHAR2(400);                   /* 지번주소 */
		        P_OLDADDRESSDTL      VARCHAR2(400);                   /* 지번주소상세 */
		        P_NEWADDRESS         VARCHAR2(400);                   /* 도로명주소 */
		        P_NESADDRESSDTL      VARCHAR2(400);                   /* 도로명주소상세 */
		        P_ETCADDR            VARCHAR2(400);                   /* 주소약칭 */
		        P_SHORTADDR          VARCHAR2(400);                   /* 기타주소 */
		        P_CLSFADDR           VARCHAR2(400);                   /* 분류주소 */
		        P_CLLDLVBRANCD       VARCHAR2(400);                   /* 집배송점소코드 */
		        P_CLLDLVBRANNM       VARCHAR2(400);                   /* 집배송점소명 */
		        P_CLLDLCBRANSHORTNM  VARCHAR2(400);                   /* 집배송점소약칭 */
		        P_CLLDLVEMPNUM       VARCHAR2(400);                   /* 집배송사원번호 */
		        P_CLLDLVEMPNM        VARCHAR2(400);                   /* 집배송사원명 */
		        P_CLLDLVEMPNICKNM    VARCHAR2(400);                   /* 집배송사원분류코드 */
		        P_CLSFCD             VARCHAR2(400);                   /* 분류터미널코드 */
		        P_CLSFNM             VARCHAR2(400);                   /* 분류터미널명 */
		        P_SUBCLSFCD          VARCHAR2(400);                   /* 소분류코드 */
		        P_RSPSDIV            VARCHAR2(400);                   /* 전담여부 */
		        P_NEWADDRYN          VARCHAR2(400);
		        P_ERRORCD            VARCHAR2(400);
		        P_ERRORMSG           VARCHAR2(400);

		BEGIN
		    PKG_RVAP_ADDRSEARCH.PR_RVAP_SEARCHADDRESS (
		        P_CLNTNUM                 , P_CLNTMGMCUSTCD           , P_PRNGDIVCD               , P_CGOSTS                  , P_ADDRESS                 , P_ZIPNUM                  , P_ZIPID
		      , P_OLDADDRESS              , P_OLDADDRESSDTL           , P_NEWADDRESS              , P_NESADDRESSDTL           , P_ETCADDR                 , P_SHORTADDR               , P_CLSFADDR
		      , P_CLLDLVBRANCD            , P_CLLDLVBRANNM            , P_CLLDLCBRANSHORTNM       , P_CLLDLVEMPNUM            , P_CLLDLVEMPNM             , P_CLLDLVEMPNICKNM         , P_CLSFCD
		      , P_CLSFNM                  , P_SUBCLSFCD               , P_RSPSDIV                 , P_NEWADDRYN               , P_ERRORCD                 , P_ERRORMSG
		    );
<!--		    DBMS_OUTPUT.PUT_LINE('P_CLNTNUM           : ' || NVL(P_CLNTNUM           , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLNTMGMCUSTCD     : ' || NVL(P_CLNTMGMCUSTCD     , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_PRNGDIVCD         : ' || NVL(P_PRNGDIVCD         , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CGOSTS            : ' || NVL(P_CGOSTS            , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ADDRESS           : ' || NVL(P_ADDRESS           , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ZIPNUM            : ' || NVL(P_ZIPNUM            , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ZIPID             : ' || NVL(P_ZIPID             , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_OLDADDRESS        : ' || NVL(P_OLDADDRESS        , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_OLDADDRESSDTL     : ' || NVL(P_OLDADDRESSDTL     , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_NEWADDRESS        : ' || NVL(P_NEWADDRESS        , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_NESADDRESSDTL     : ' || NVL(P_NESADDRESSDTL     , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ETCADDR           : ' || NVL(P_ETCADDR           , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_SHORTADDR         : ' || NVL(P_SHORTADDR         , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLSFADDR          : ' || NVL(P_CLSFADDR          , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLVBRANCD      : ' || NVL(P_CLLDLVBRANCD      , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLVBRANNM      : ' || NVL(P_CLLDLVBRANNM      , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLCBRANSHORTNM : ' || NVL(P_CLLDLCBRANSHORTNM , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLVEMPNUM      : ' || NVL(P_CLLDLVEMPNUM      , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLVEMPNM       : ' || NVL(P_CLLDLVEMPNM       , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLLDLVEMPNICKNM   : ' || NVL(P_CLLDLVEMPNICKNM   , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLSFCD            : ' || NVL(P_CLSFCD            , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_CLSFNM            : ' || NVL(P_CLSFNM            , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_SUBCLSFCD         : ' || NVL(P_SUBCLSFCD         , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_RSPSDIV           : ' || NVL(P_RSPSDIV           , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_NEWADDRYN         : ' || NVL(P_NEWADDRYN         , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ERRORCD           : ' || NVL(P_ERRORCD           , 'NULL'));
		    DBMS_OUTPUT.PUT_LINE('P_ERRORMSG          : ' || NVL(P_ERRORMSG          , 'NULL'));
		EXCEPTION WHEN OTHERS THEN
		    DBMS_OUTPUT.PUT_LINE('CODE : ' || SQLCODE);
		    DBMS_OUTPUT.PUT_LINE('MSG  : ' || SQLERRM);
-->
		END;
	</select>



<!-- 바른서비스 엑셀 다운로드 - 20210322 추가 -->
	<select id="s_pmp110rkrv_wmServiceImpl.getBaseData" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.getBaseData */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WKORD_NUM
		     , B.ITEM_CODE
		     , C.ITEM_NAME
		     , CONVERT(INT, B.ALLOCK_Q)   AS ALLOCK_Q
		  FROM      PMP100T A WITH(NOLOCK)
		  LEFT JOIN PMP200T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                  AND B.DIV_CODE  = A.DIV_CODE
		                                  AND B.WKORD_NUM = A.WKORD_NUM
		  LEFT JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE = B.COMP_CODE
		                                  AND C.ITEM_CODE = B.ITEM_CODE
		 WHERE A.COMP_CODE = #{COMP_CODE}
		   AND A.DIV_CODE  = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.PROG_WORK_CODE = #{WORK_ORDER_INFO}
	</select>
	<update id="s_pmp110rkrv_wmServiceImpl.makeBaseData" parameterType="Map">
		/* s_pmp110rkrv_wmServiceImpl.makeBaseData */
		IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.tables WITH(NOLOCK) WHERE TABLE_SCHEMA = 'UNILITE' AND TABLE_NAME = 'temp_barun')
		    BEGIN
		         CREATE TABLE UNILITE.temp_barun (
		             KEY_VALUE     NVARCHAR(24)
		           , COMP_CODE     NVARCHAR(08)
		           , DIV_CODE      NVARCHAR(08)
		           , WKORD_NUM     NVARCHAR(40)
		           , ITEM_NAME1    NVARCHAR(200)
		           , ITEM_NAME2    NVARCHAR(200)
		           , ITEM_NAME3    NVARCHAR(200)
		           , ITEM_NAME4    NVARCHAR(200)
		           , ITEM_NAME5    NVARCHAR(200)
		           , ITEM_NAME6    NVARCHAR(200)
		           , ITEM_NAME7    NVARCHAR(200)
		           , ITEM_NAME8    NVARCHAR(200)
		           , ITEM_NAME9    NVARCHAR(200)
		           , ITEM_NAME10   NVARCHAR(200)
		           , ITEM_NAME11   NVARCHAR(200)
		           , ITEM_NAME12   NVARCHAR(200)
		           , ITEM_NAME13   NVARCHAR(200)
		           , ITEM_NAME14   NVARCHAR(200)
		           , ITEM_NAME15   NVARCHAR(200)
		           , ITEM_NAME16   NVARCHAR(200)
		           , ITEM_NAME17   NVARCHAR(200)
		           , ITEM_NAME18   NVARCHAR(200)
		           , ITEM_NAME19   NVARCHAR(200)
		           , ITEM_NAME20   NVARCHAR(200)
		           , ALLOCK_Q1     NVARCHAR(20)
		           , ALLOCK_Q2     NVARCHAR(20)
		           , ALLOCK_Q3     NVARCHAR(20)
		           , ALLOCK_Q4     NVARCHAR(20)
		           , ALLOCK_Q5     NVARCHAR(20)
		           , ALLOCK_Q6     NVARCHAR(20)
		           , ALLOCK_Q7     NVARCHAR(20)
		           , ALLOCK_Q8     NVARCHAR(20)
		           , ALLOCK_Q9     NVARCHAR(20)
		           , ALLOCK_Q10    NVARCHAR(20)
		           , ALLOCK_Q11    NVARCHAR(20)
		           , ALLOCK_Q12    NVARCHAR(20)
		           , ALLOCK_Q13    NVARCHAR(20)
		           , ALLOCK_Q14    NVARCHAR(20)
		           , ALLOCK_Q15    NVARCHAR(20)
		           , ALLOCK_Q16    NVARCHAR(20)
		           , ALLOCK_Q17    NVARCHAR(20)
		           , ALLOCK_Q18    NVARCHAR(20)
		           , ALLOCK_Q19    NVARCHAR(20)
		           , ALLOCK_Q20    NVARCHAR(20)
		         )
		    END

		INSERT INTO UNILITE.temp_barun (
		            KEY_VALUE
		          , COMP_CODE
		          , DIV_CODE
		          , WKORD_NUM
		          , ITEM_NAME1
		          , ITEM_NAME2
		          , ITEM_NAME3
		          , ITEM_NAME4
		          , ITEM_NAME5
		          , ITEM_NAME6
		          , ITEM_NAME7
		          , ITEM_NAME8
		          , ITEM_NAME9
		          , ITEM_NAME10
		          , ITEM_NAME11
		          , ITEM_NAME12
		          , ITEM_NAME13
		          , ITEM_NAME14
		          , ITEM_NAME15
		          , ITEM_NAME16
		          , ITEM_NAME17
		          , ITEM_NAME18
		          , ITEM_NAME19
		          , ITEM_NAME20
		          , ALLOCK_Q1
		          , ALLOCK_Q2
		          , ALLOCK_Q3
		          , ALLOCK_Q4
		          , ALLOCK_Q5
		          , ALLOCK_Q6
		          , ALLOCK_Q7
		          , ALLOCK_Q8
		          , ALLOCK_Q9
		          , ALLOCK_Q10
		          , ALLOCK_Q11
		          , ALLOCK_Q12
		          , ALLOCK_Q13
		          , ALLOCK_Q14
		          , ALLOCK_Q15
		          , ALLOCK_Q16
		          , ALLOCK_Q17
		          , ALLOCK_Q18
		          , ALLOCK_Q19
		          , ALLOCK_Q20
		) VALUES (
		            #{KEY_VALUE}
		          , #{COMP_CODE}
		          , #{DIV_CODE}
		          , #{WKORD_NUM}
		          , #{ITEM_NAME1}
		          , #{ITEM_NAME2}
		          , #{ITEM_NAME3}
		          , #{ITEM_NAME4}
		          , #{ITEM_NAME5}
		          , #{ITEM_NAME6}
		          , #{ITEM_NAME7}
		          , #{ITEM_NAME8}
		          , #{ITEM_NAME9}
		          , #{ITEM_NAME10}
		          , #{ITEM_NAME11}
		          , #{ITEM_NAME12}
		          , #{ITEM_NAME13}
		          , #{ITEM_NAME14}
		          , #{ITEM_NAME15}
		          , #{ITEM_NAME16}
		          , #{ITEM_NAME17}
		          , #{ITEM_NAME18}
		          , #{ITEM_NAME19}
		          , #{ITEM_NAME20}
		          , #{ALLOCK_Q1}
		          , #{ALLOCK_Q2}
		          , #{ALLOCK_Q3}
		          , #{ALLOCK_Q4}
		          , #{ALLOCK_Q5}
		          , #{ALLOCK_Q6}
		          , #{ALLOCK_Q7}
		          , #{ALLOCK_Q8}
		          , #{ALLOCK_Q9}
		          , #{ALLOCK_Q10}
		          , #{ALLOCK_Q11}
		          , #{ALLOCK_Q12}
		          , #{ALLOCK_Q13}
		          , #{ALLOCK_Q14}
		          , #{ALLOCK_Q15}
		          , #{ALLOCK_Q16}
		          , #{ALLOCK_Q17}
		          , #{ALLOCK_Q18}
		          , #{ALLOCK_Q19}
		          , #{ALLOCK_Q20}
		)
	</update>
	<select id="s_pmp110rkrv_wmServiceImpl.makeExcel" parameterType="Map" resultType="rMap">
		/* s_pmp110rkrv_wmServiceImpl.makeExcel */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WKORD_NUM
		     , ISNULL(B.SERVICE_NO, '')     AS SERVICE_NO
		     , ISNULL(B.RECEIVER_NAME, '')  AS RECEIVER_NAME
		     , ISNULL(B.TELEPHONE_NUM2, '') AS HANDPHONE_NUM
		     , ISNULL(B.TELEPHONE_NUM1, '') AS TELEPHONE_NUM
		     , ISNULL(B.ZIP_NUM, '')        AS ZIP_NUM
		     , ISNULL(B.ADDRESS1, '')       AS ADDRESS1
		     , CASE WHEN ISNULL(B.ADDRESS2, '') = '' THEN ''
		            ELSE ' ' + ISNULL(B.ADDRESS2, '')
		       END                          AS ADDRESS2
		     , ''                           AS EMAIL
		     , ISNULL(B1.ITEM_NAME  , '')   AS MODEL_NAME
		     , ISNULL(Z1.ITEM_NAME1 , '')   AS ITEM_NAME1
		     , ISNULL(Z1.ALLOCK_Q1  , '')   AS ALLOCK_Q1
		     , ISNULL(Z1.ITEM_NAME2 , '')   AS ITEM_NAME2
		     , ISNULL(Z1.ALLOCK_Q2  , '')   AS ALLOCK_Q2
		     , ISNULL(Z1.ITEM_NAME3 , '')   AS ITEM_NAME3
		     , ISNULL(Z1.ALLOCK_Q3  , '')   AS ALLOCK_Q3
		     , ISNULL(Z1.ITEM_NAME4 , '')   AS ITEM_NAME4
		     , ISNULL(Z1.ALLOCK_Q4  , '')   AS ALLOCK_Q4
		     , ISNULL(Z1.ITEM_NAME5 , '')   AS ITEM_NAME5
		     , ISNULL(Z1.ALLOCK_Q5  , '')   AS ALLOCK_Q5
		     , ISNULL(Z1.ITEM_NAME6 , '')   AS ITEM_NAME6
		     , ISNULL(Z1.ALLOCK_Q6  , '')   AS ALLOCK_Q6
		     , ISNULL(Z1.ITEM_NAME7 , '')   AS ITEM_NAME7
		     , ISNULL(Z1.ALLOCK_Q7  , '')   AS ALLOCK_Q7
		     , ISNULL(Z1.ITEM_NAME8 , '')   AS ITEM_NAME8
		     , ISNULL(Z1.ALLOCK_Q8  , '')   AS ALLOCK_Q8
		     , ISNULL(Z1.ITEM_NAME9 , '')   AS ITEM_NAME9
		     , ISNULL(Z1.ALLOCK_Q9  , '')   AS ALLOCK_Q9
		     , ISNULL(Z1.ITEM_NAME10, '')   AS ITEM_NAME10
		     , ISNULL(Z1.ALLOCK_Q10 , '')   AS ALLOCK_Q10
		     , ISNULL(Z1.ITEM_NAME11, '')   AS ITEM_NAME11
		     , ISNULL(Z1.ALLOCK_Q11 , '')   AS ALLOCK_Q11
		     , ISNULL(Z1.ITEM_NAME12, '')   AS ITEM_NAME12
		     , ISNULL(Z1.ALLOCK_Q12 , '')   AS ALLOCK_Q12
		     , ISNULL(Z1.ITEM_NAME13, '')   AS ITEM_NAME13
		     , ISNULL(Z1.ALLOCK_Q13 , '')   AS ALLOCK_Q13
		     , ISNULL(Z1.ITEM_NAME14, '')   AS ITEM_NAME14
		     , ISNULL(Z1.ALLOCK_Q14 , '')   AS ALLOCK_Q14
		     , ISNULL(Z1.ITEM_NAME15, '')   AS ITEM_NAME15
		     , ISNULL(Z1.ALLOCK_Q15 , '')   AS ALLOCK_Q15
		     , ISNULL(Z1.ITEM_NAME16, '')   AS ITEM_NAME16
		     , ISNULL(Z1.ALLOCK_Q16 , '')   AS ALLOCK_Q16
		     , ISNULL(Z1.ITEM_NAME17, '')   AS ITEM_NAME17
		     , ISNULL(Z1.ALLOCK_Q17 , '')   AS ALLOCK_Q17
		     , ISNULL(Z1.ITEM_NAME18, '')   AS ITEM_NAME18
		     , ISNULL(Z1.ALLOCK_Q18 , '')   AS ALLOCK_Q18
		     , ISNULL(Z1.ITEM_NAME19, '')   AS ITEM_NAME19
		     , ISNULL(Z1.ALLOCK_Q19 , '')   AS ALLOCK_Q19
		     , ISNULL(Z1.ITEM_NAME20, '')   AS ITEM_NAME20
		     , ISNULL(Z1.ALLOCK_Q20 , '')   AS ALLOCK_Q20
		  FROM       PMP100T      A  WITH(NOLOCK)
		  INNER JOIN SOF110T      B  WITH(NOLOCK) ON B.COMP_CODE  = A.COMP_CODE
		                                         AND B.DIV_CODE   = A.DIV_CODE
		                                         AND B.ORDER_NUM  = A.SO_NUM
		                                         AND B.SER_NO     = A.SO_SEQ
		  INNER JOIN BPR100T      B1 WITH(NOLOCK) ON B1.COMP_CODE = B.COMP_CODE
		                                         AND B1.ITEM_CODE = B.ITEM_CODE
		  LEFT  JOIN temp_barun   Z1 WITH(NOLOCK) ON Z1.COMP_CODE = A.COMP_CODE
		                                         AND Z1.DIV_CODE  = A.DIV_CODE
		                                         AND Z1.WKORD_NUM = A.WKORD_NUM
		                                         AND Z1.KEY_VALUE = #{KEY_VALUE}
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.DIV_CODE  = #{DIV_CODE}
		   AND A.WKORD_NUM + '/' + A.PROG_WORK_CODE IN
		<foreach collection="WORK_ORDER_LIST" item="item" separator="," close=")" open="(">
		                            '${item.WORK_ORDER_INFO}'
		</foreach>
		 ORDER BY WKORD_NUM
	</select>
</mapper>