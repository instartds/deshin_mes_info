<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_map110skrv_wmServiceImpl">
	<select id="s_map110skrv_wmServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_map110skrv_wm.Cs_map110skrv_wm[fnmap110q] Query01 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @START_TIME DATETIME
		          , @END_TIME   DATETIME
		          , @DIFF_TIME  NUMERIC(10, 0)

		    SET @START_TIME = GETDATE()

		    DECLARE @CompCode   NVARCHAR(08)	/* 법인코드		*/
		        SET @CompCode = #{S_COMP_CODE}

		    /* 데이터 조회 */
		    SELECT  A.INOUT_CODE
		         , CASE WHEN A.INOUT_CODE_TYPE IN ('4', '5') THEN C.CUSTOM_NAME
		                WHEN A.INOUT_CODE_TYPE = '1'         THEN (SELECT TREE_NAME
		                                                             FROM BSA210T WITH(NOLOCK)
		                                                            WHERE TYPE_LEVEL = A.DIV_CODE
		                                                              AND TREE_CODE  = A.INOUT_CODE
		                                                              AND COMP_CODE  = A.COMP_CODE)
		                WHEN A.INOUT_CODE_TYPE = '3'         THEN (SELECT  TREE_NAME
		                                                             FROM BSA230T WITH(NOLOCK)
		                                                            WHERE TYPE_LEVEL = A.DIV_CODE
		                                                              AND TREE_CODE  = A.INOUT_CODE
		                                                              AND COMP_CODE  = A.COMP_CODE)
		           END				AS CUSTOM_NAME
		         , M.ORDER_TYPE
		         , LEFT(C.COMPANY_NUM, 3) + '-' + SUBSTRING(C.COMPANY_NUM, 4, 2) + '-' + RIGHT(C.COMPANY_NUM, 5) AS COMPANY_NUM
		         , M.BILL_NUM
		         , A.DIV_CODE
		         , M.BILL_DATE											/* 계산서일자	*/
		         , M.CHANGE_BASIS_DATE									/* 매입전표일자	*/
		         , M.ISSUE_EXPECTED_DATE									/* 지급예정일	*/
		         , A.INOUT_DATE											/* 입고일		*/
		         , A.ITEM_CODE
		         , B.ITEM_NAME
		         , B.SPEC
		         , CASE WHEN A.INOUT_TYPE = '1' THEN A.INOUT_Q ELSE A.INOUT_Q *(-1) END AS INOUT_Q
		         , N.BUY_Q
		         , B.STOCK_UNIT
		         , M.MONEY_UNIT
		         , N.AMOUNT_P
		         , N.AMOUNT_I AS AMOUNT_I
		         , N.TAX_I    AS TAX_I
		         , (N.AMOUNT_I + N.TAX_I)  AS TOTAL_I
		         , N.FOR_AMOUNT_O         AS FOR_AMOUNT_O
		         , N.EXCHG_RATE_O
		         , A.INOUT_NUM
		         , G.CODE_NAME AS INOUT_METH
		         , E.TREE_NAME		AS WH_CODE
		         , M.EX_DATE											/* 결의전표일자	*/
		         , M.EX_NUM
		         , M.AC_DATE											/* 회계전표일자 */
		         , M.AC_NUM		AS AC_NUM
		         , M.AGREE_YN		AS AGREE_YN
		         , N.REMARK
		         , N.PROJECT_NO
		          --20210216 추가: CUSTOM_PRSN, PHONE, BANK_NAME, BANK_ACCOUNT, BIRTHDAY, ZIP_CODE, ADDR1
		         , N.CUSTOM_PRSN
		         , N.PHONE

		         --, N.BANK_NAME
		         , CASE WHEN ISNULL(N.BANK_NAME, '') = '' THEN CASE WHEN ISNULL(C3.CUSTOM_NAME, '') = '' THEN C1.CUSTOM_NAME
		                                                            ELSE C3.CUSTOM_NAME
		                                                       END
		                ELSE  N.BANK_NAME 
		           END                                            AS BANK_NAME
		         --, unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')  AS BANK_ACCOUNT    --20210303 수정: 암호화 해제하여 표시
		         , CASE WHEN ISNULL(N.BANK_NAME, '') = '' THEN CASE WHEN ISNULL(C2.CUSTOM_CODE, '') = '' THEN unilite.fnCipherDecrypt(C.BANKBOOK_NUM, '')
		                                                            ELSE unilite.fnCipherDecrypt(C2.BANKBOOK_NUM, '')
		                                                       END 
		                ELSE  unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')
		           END  AS BANK_ACCOUNT
		         , N.BIRTHDAY
		         , N.ZIP_CODE
		         , N.ADDR1
                 , ISNULL(K.ORG_AMT_I, 0) AS ORG_AMT_I                     --20210524 추가 - 발생금액
                 , ISNULL(K.J_AMT_I, 0) AS J_AMT_I                        --20210524 추가 - 반제금액
                 , ISNULL(K.BLN_I, 0) AS BLN_I                          --20210524 추가 - 잔액
		    FROM            BTR100T A WITH (NOLOCK)
		         INNER JOIN BPR100T B WITH (NOLOCK)  ON B.COMP_CODE        = A.COMP_CODE
													AND B.ITEM_CODE        = A.ITEM_CODE
				 INNER JOIN BCM100T C WITH (NOLOCK)  ON C.COMP_CODE		   = A.COMP_CODE
													AND C.CUSTOM_CODE      = A.INOUT_CODE
				 LEFT JOIN BCM100T C1 WITH (NOLOCK)  ON C1.COMP_CODE       = C.COMP_CODE
													AND C1.CUSTOM_CODE     = C.BANK_CODE
				 LEFT JOIN BCM130T C2 WITH (NOLOCK)  ON C2.COMP_CODE       = C.COMP_CODE
													AND C2.CUSTOM_CODE     = C.CUSTOM_CODE
													AND C2.MAIN_BOOK_YN    = 'Y'
				 LEFT JOIN BCM100T C3 WITH (NOLOCK)  ON C3.COMP_CODE       = C2.COMP_CODE
													AND C3.CUSTOM_CODE     = C2.BANK_CODE
				 INNER JOIN MAP200T N WITH (NOLOCK)  ON N.COMP_CODE        = A.COMP_CODE
													AND N.DIV_CODE         = A.DIV_CODE
													AND N.ITEM_CODE        = A.ITEM_CODE
													AND N.INOUT_NUM        = A.INOUT_NUM
													AND N.INOUT_SEQ        = A.INOUT_SEQ
				 INNER JOIN MAP100T M WITH (NOLOCK)  ON M.COMP_CODE        = A.COMP_CODE
													AND M.DIV_CODE         = A.DIV_CODE
													AND N.CHANGE_BASIS_NUM = M.CHANGE_BASIS_NUM
				 LEFT  JOIN BSA220T E WITH (NOLOCK)  ON E.COMP_CODE        = A.COMP_CODE
													AND E.TREE_CODE        = A.WH_CODE
													AND E.TYPE_LEVEL       = A.DIV_CODE
				 LEFT  JOIN BSA100T G WITH (NOLOCK)  ON G.COMP_CODE        = A.COMP_CODE
													AND G.SUB_CODE         = A.INOUT_METH
													AND G.MAIN_CODE        = N'B036'
				 LEFT  JOIN BSA100T J WITH (NOLOCK)  ON J.COMP_CODE        = A.COMP_CODE
													AND J.SUB_CODE         = A.INOUT_CODE_TYPE
													AND J.MAIN_CODE        = N'B005'
				 --20210524 추가
				 LEFT  JOIN AGB300T K WITH (NOLOCK)  ON M.COMP_CODE        = K.COMP_CODE
													AND M.DIV_CODE         = K.DIV_CODE
													AND M.AC_DATE          = K.ORG_AC_DATE
													AND M.AC_NUM           = K.ORG_SLIP_NUM
			WHERE   M.COMP_CODE     = @CompCode
				AND A.INOUT_TYPE    IN (N'1', N'4')
				AND A.ACCOUNT_YNC   = N'Y'
			<if test="@foren.Ognl@isNotEmpty(BILL_DATE_FR)">
				AND M.BILL_DATE     &gt;= #{BILL_DATE_FR}
			</if>
			<if test="@foren.Ognl@isNotEmpty(BILL_DATE_TO)">
				AND M.BILL_DATE     &lt;= #{BILL_DATE_TO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
				AND M.DIV_CODE       = #{DIV_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(IN_WH_CODE)">
				AND A.WH_CODE        = #{IN_WH_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
				AND M.ORDER_TYPE     = #{ORDER_TYPE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CUST_CODE)">
				AND A.INOUT_CODE  LIKE #{CUST_CODE}  + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(BILL_NUM)">
				AND M.BILL_NUM    LIKE #{BILL_NUM} + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(IN_FR_DATE)">
				AND A.INOUT_DATE    &gt;= #{IN_FR_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(IN_TO_DATE)">
				AND A.INOUT_DATE    &lt;= #{IN_TO_DATE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_FR)">
				AND M.ISSUE_EXPECTED_DATE &gt;= #{ISSUE_EXPDT_FR}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_TO)">
				AND M.ISSUE_EXPECTED_DATE &lt;= #{ISSUE_EXPDT_TO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
				AND B.ITEM_LEVEL1   = #{ITEM_LEVEL1}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
				AND B.ITEM_LEVEL2   = #{ITEM_LEVEL2}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
				AND B.ITEM_LEVEL3   = #{ITEM_LEVEL3}
			</if>
			<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
				AND C.AGENT_TYPE   = #{AGENT_TYPE}
			</if>
<!-- 20200218 : 기표여부 조건 추가 -->
			<if test="rdoSelect == &quot;Y&quot;">
				AND ISNULL(M.EX_DATE, '') != ''
			</if>
			<if test="rdoSelect == &quot;N&quot;">
				AND ISNULL(M.EX_DATE, '')  = ''
			</if>
<!-- 20210304 : 전표승인여부 조건 추가 -->
			<if test="rdoSelect2 == &quot;Y&quot;">
				AND ISNULL(M.AC_DATE, '') != ''
			</if>
			<if test="rdoSelect2 == &quot;N&quot;">
				AND ISNULL(M.AC_DATE, '')  = ''
			</if>
<!-- 20210524 추가: 조회조건 '고객명', '지급여부' 추가 -->
			<if test="@foren.Ognl@isNotEmpty(CUSTOM_PRSN)">
				AND ISNULL(N.CUSTOM_PRSN, '') LIKE '%' + #{CUSTOM_PRSN} + '%'
			</if>
			<if test="PROV_YN == &quot;N&quot;">
				AND ( ISNULL(K.BLN_I, 0) &gt; 0 OR ISNULL(M.AC_DATE, '') = '' )
			</if>
			<if test="PROV_YN == &quot;Y&quot;">
				AND ( ISNULL(K.BLN_I, 0) &lt;= 0 AND ISNULL(M.AC_DATE, '') != '' )
			</if>
				/* 선택조건 End	*/
			 ORDER BY A.INOUT_CODE,A.ORDER_TYPE, M.BILL_DATE, M.BILL_NUM, A.INOUT_DATE, A.ITEM_CODE
		
		<!-- SET @END_TIME   = GETDATE()
		
		SET @DIFF_TIME = DATEDIFF(S, @START_TIME, @END_TIME)
		
		EXEC uniLITE.SP_QRY_TIME 's_map110skrv_wm', '외상매입현황 조회', #{BILL_DATE_FR}, #{BILL_DATE_TO}, @DIFF_TIME
		-->
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>

	<select id="s_map110skrv_wmServiceImpl.selectMainReportList" parameterType="Map" resultType="rMap">
		/* s_map110skrv_wmServiceImpl.selectMainReportList */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

			DECLARE @START_TIME DATETIME
			      , @END_TIME   DATETIME
			      , @DIFF_TIME  NUMERIC(10, 0)

			SET @START_TIME = GETDATE()

				DECLARE @CompCode   NVARCHAR(08)	/* 법인코드		*/
			        SET @CompCode =  #{S_COMP_CODE}

				/* 데이터 조회 */
				SELECT  A.INOUT_CODE
					  , CASE WHEN A.INOUT_CODE_TYPE IN ('4', '5') THEN C.CUSTOM_NAME
						     WHEN A.INOUT_CODE_TYPE = '1'         THEN (SELECT  TREE_NAME FROM BSA210T
																	  WHERE TYPE_LEVEL = A.DIV_CODE
																		AND TREE_CODE  = A.INOUT_CODE
																		AND COMP_CODE  = A.COMP_CODE)
						     WHEN A.INOUT_CODE_TYPE = '3' 		THEN (SELECT  TREE_NAME
																		FROM BSA230T
															  	       WHERE TYPE_LEVEL = A.DIV_CODE
																         AND TREE_CODE  = A.INOUT_CODE
																         AND COMP_CODE  = A.COMP_CODE)
					    END				AS CUSTOM_NAME
					  , M.ORDER_TYPE
					  , LEFT(C.COMPANY_NUM, 3) + '-' + SUBSTRING(C.COMPANY_NUM, 4, 2) + '-' + RIGHT(C.COMPANY_NUM, 5) AS COMPANY_NUM
					  , M.BILL_NUM
					  , A.DIV_CODE
					  , M.BILL_DATE											/* 계산서일자	*/
					  , M.CHANGE_BASIS_DATE									/* 매입전표일자	*/
					  , M.ISSUE_EXPECTED_DATE									/* 지급예정일	*/
					  , A.INOUT_DATE											/* 입고일		*/
					  , A.ITEM_CODE
					  , B.ITEM_NAME
					  , B.SPEC
					  , CASE WHEN A.INOUT_TYPE = '1' THEN A.INOUT_Q ELSE A.INOUT_Q *(-1) END AS INOUT_Q
					  , N.BUY_Q
					  , B.STOCK_UNIT
					  , M.MONEY_UNIT
					  , N.AMOUNT_P
					  , N.AMOUNT_I AS AMOUNT_I
					  , N.TAX_I    AS TAX_I
					  , (N.AMOUNT_I + N.TAX_I)  AS TOTAL_I
					  , N.FOR_AMOUNT_O         AS FOR_AMOUNT_O
					  , N.EXCHG_RATE_O
					  , A.INOUT_NUM
					  , G.CODE_NAME AS INOUT_METH
					  , E.TREE_NAME		AS WH_CODE
					  , M.EX_DATE											/* 결의전표일자	*/
					  , M.EX_NUM
					  , M.AC_DATE											/* 회계전표일자 */
					  , M.AC_NUM		AS AC_NUM
					  , M.AGREE_YN		AS AGREE_YN
					  , N.REMARK
					  , N.PROJECT_NO
					  , K.COMP_NAME
					  , K.ADDR
					  , K.TELEPHON
					  , K.FAX_NUM
					  , M4.CUSTOM_NAME AS SOF_CUSTOM_NAME -- 수주처
					  , M5.ITEM_NAME   AS SOF_ITEM_NAME   -- 수주품목
					  , M2.ORDER_Q     AS SOF_Q           -- 수주수량
					  , M1.ORDER_UNIT_Q AS MPO_Q          -- 발주수량
					  , M2.ORDER_NUM AS SOF_NUM
					  , M6.ORDER_DATE AS MPO_DATE  --발주일
				FROM            BTR100T A WITH (NOLOCK)
					 INNER JOIN BPR100T B WITH (NOLOCK)  ON B.COMP_CODE        = A.COMP_CODE
														AND B.ITEM_CODE        = A.ITEM_CODE
					 INNER JOIN BCM100T C WITH (NOLOCK)  ON C.COMP_CODE		   = A.COMP_CODE
														AND C.CUSTOM_CODE      = A.INOUT_CODE
					 INNER JOIN MAP200T N WITH (NOLOCK)  ON N.COMP_CODE        = A.COMP_CODE
														AND N.DIV_CODE         = A.DIV_CODE
														AND N.ITEM_CODE        = A.ITEM_CODE
														AND N.INOUT_NUM        = A.INOUT_NUM
														AND N.INOUT_SEQ        = A.INOUT_SEQ
					 INNER JOIN MAP100T M WITH (NOLOCK)  ON M.COMP_CODE        = A.COMP_CODE
														AND M.DIV_CODE         = A.DIV_CODE
														AND N.CHANGE_BASIS_NUM = M.CHANGE_BASIS_NUM
					 LEFT JOIN MPO200T M1 WITH (NOLOCK)  ON M1.COMP_CODE	   = N.COMP_CODE
														AND M1.ORDER_NUM       = N.ORDER_NUM
														AND M1.ORDER_SEQ       = N.ORDER_SEQ
				      LEFT JOIN MPO100T M6 WITH (NOLOCK)  ON M6.COMP_CODE	   = M1.COMP_CODE
														AND M6.DIV_CODE       = M1.DIV_CODE
														AND M6.ORDER_NUM   = M1.ORDER_NUM
					 LEFT JOIN SOF110T M2 WITH (NOLOCK)  ON M2.COMP_CODE       = M1.COMP_CODE
														AND M2.ORDER_NUM	   = M1.SO_NUM
														AND M2.SER_NO          = M1.SO_SEQ
					 LEFT JOIN SOF100T M3 WITH (NOLOCK)  ON M3.COMP_CODE	   = M2.COMP_CODE
														AND M3.DIV_CODE        = M2.DIV_CODE
														AND M3.ORDER_NUM       = M2.ORDER_NUM
					 LEFT JOIN BCM100T M4 WITH (NOLOCK)  ON M4.COMP_CODE	   = M3.COMP_CODE
														AND M4.CUSTOM_CODE     = M3.CUSTOM_CODE
					 LEFT JOIN BPR100T M5 WITH (NOLOCK)  ON M5.COMP_CODE       = M2.COMP_CODE
														AND M5.ITEM_CODE	   = M2.ITEM_CODE
					 LEFT  JOIN BSA220T E WITH (NOLOCK)  ON E.COMP_CODE        = A.COMP_CODE
														AND E.TREE_CODE        = A.WH_CODE
														AND E.TYPE_LEVEL       = A.DIV_CODE
					 LEFT  JOIN BSA100T G WITH (NOLOCK)  ON G.COMP_CODE        = A.COMP_CODE
														AND G.SUB_CODE         = A.INOUT_METH
														AND G.MAIN_CODE        = N'B036'
					 LEFT  JOIN BSA100T J WITH (NOLOCK)  ON J.COMP_CODE        = A.COMP_CODE
														AND J.SUB_CODE         = A.INOUT_CODE_TYPE
														AND J.MAIN_CODE        = N'B005'
					 LEFT  JOIN BOR100T K WITH (NOLOCK)  ON K.COMP_CODE        = A.COMP_CODE

				WHERE   M.COMP_CODE     = @CompCode
					AND A.INOUT_TYPE    IN (N'1', N'4')
					AND A.ACCOUNT_YNC   = N'Y'
				<if test="@foren.Ognl@isNotEmpty(BILL_DATE_FR)">
					AND M.BILL_DATE     &gt;= #{BILL_DATE_FR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(BILL_DATE_TO)">
					AND M.BILL_DATE     &lt;= #{BILL_DATE_TO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
					AND M.DIV_CODE       = #{DIV_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(IN_WH_CODE)">
					AND A.WH_CODE        = #{IN_WH_CODE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
					AND M.ORDER_TYPE     = #{ORDER_TYPE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(CUST_CODE)">
					AND A.INOUT_CODE  LIKE #{CUST_CODE}  + '%'
				</if>
				<if test="@foren.Ognl@isNotEmpty(BILL_NUM)">
					AND M.BILL_NUM    LIKE #{BILL_NUM} + '%'
				</if>
				<if test="@foren.Ognl@isNotEmpty(IN_FR_DATE)">
					AND A.INOUT_DATE    &gt;= #{IN_FR_DATE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(IN_TO_DATE)">
					AND A.INOUT_DATE    &lt;= #{IN_TO_DATE}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_FR)">
					AND M.ISSUE_EXPECTED_DATE &gt;= #{ISSUE_EXPDT_FR}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_TO)">
					AND M.ISSUE_EXPECTED_DATE &lt;= #{ISSUE_EXPDT_TO}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
					AND B.ITEM_LEVEL1   = #{ITEM_LEVEL1}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
					AND B.ITEM_LEVEL2   = #{ITEM_LEVEL2}
				</if>
				<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
					AND B.ITEM_LEVEL3   = #{ITEM_LEVEL3}
				</if>
				<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
					AND C.AGENT_TYPE   = #{AGENT_TYPE}
				</if>
<!-- 20200218 : 기표여부 조건 추가 -->
				<if test="rdoSelect == &quot;Y&quot;">
					AND ISNULL(M.EX_DATE, '') != ''
				</if>
				<if test="rdoSelect == &quot;N&quot;">
					AND ISNULL(M.EX_DATE, '')  = ''
				</if>
				 ORDER BY A.INOUT_CODE,A.ORDER_TYPE, M.BILL_DATE, M.BILL_NUM, A.INOUT_DATE, A.ITEM_CODE

			    SET NOCOUNT OFF
			    SET ARITHABORT OFF
			END
	</select>



<!-- 계좌이체리스트 조회 쿼리 - 20210304 추가 -->
	<select id="s_map110skrv_wmServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* s_map110skrv_wmServiceImpl.selectList2 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @START_TIME DATETIME
		          , @END_TIME   DATETIME
		          , @DIFF_TIME  NUMERIC(10, 0)

		    SET @START_TIME = GETDATE()

		    DECLARE @CompCode   NVARCHAR(08)    /* 법인코드 */
		        SET @CompCode = #{S_COMP_CODE}

		    /* 데이터 조회 */
		    SELECT A.INOUT_CODE
		         , CASE WHEN A.INOUT_CODE_TYPE IN ('4', '5') THEN C.CUSTOM_NAME
		                WHEN A.INOUT_CODE_TYPE = '1'         THEN (SELECT TREE_NAME
		                                                             FROM BSA210T WITH(NOLOCK)
		                                                            WHERE TYPE_LEVEL = A.DIV_CODE
		                                                              AND TREE_CODE  = A.INOUT_CODE
		                                                              AND COMP_CODE  = A.COMP_CODE)
		                WHEN A.INOUT_CODE_TYPE = '3'         THEN (SELECT  TREE_NAME
		                                                             FROM BSA230T WITH(NOLOCK)
		                                                            WHERE TYPE_LEVEL = A.DIV_CODE
		                                                              AND TREE_CODE  = A.INOUT_CODE
		                                                              AND COMP_CODE  = A.COMP_CODE)
		           END                     AS CUSTOM_NAME
		         , SUM(ISNULL(N.AMOUNT_I, 0) + ISNULL(N.TAX_I, 0))   AS TOTAL_I
		         
		         --, CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN N.CUSTOM_PRSN
		         --        ELSE C.BANKBOOK_NAME
		         --   END                                               AS CUSTOM_PRSN
				 , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN N.CUSTOM_PRSN
						ELSE 
							 CASE WHEN MAX(unilite.fnCipherDecrypt(C2.BANKBOOK_NUM, '')) != ''THEN MAX(C2.BANKBOOK_NAME)
		                 ELSE MAX(C.BANKBOOK_NAME) END
		            END                                               AS CUSTOM_PRSN

		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.PHONE)
		                ELSE C.TELEPHON
		           END                                               AS PHONE

		         --, CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.BANK_NAME)
		         --       ELSE D.CUSTOM_NAME
		         --  END                                               AS BANK_NAME
		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.BANK_NAME)
					ELSE 
							 CASE WHEN MAX(unilite.fnCipherDecrypt(C2.BANKBOOK_NUM, '')) != '' THEN MAX(C3.CUSTOM_NAME)
					ELSE     D.CUSTOM_NAME   END
		           END                                               AS BANK_NAME


		         --, CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, ''))
		         --       ELSE unilite.fnCipherDecrypt(C.BANKBOOK_NUM, '')
		         --  END                                               AS BANK_ACCOUNT
		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, ''))
					ELSE 
							 CASE WHEN MAX(unilite.fnCipherDecrypt(C2.BANKBOOK_NUM, '')) != '' THEN MAX(unilite.fnCipherDecrypt(C2.BANKBOOK_NUM, ''))
					
		                ELSE unilite.fnCipherDecrypt(C.BANKBOOK_NUM, '') END
		           END                                               AS BANK_ACCOUNT

		         
		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.BIRTHDAY)
		                ELSE ''
		           END                                               AS BIRTHDAY
		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.ZIP_CODE)
		                ELSE C.ZIP_CODE
		           END                                               AS ZIP_CODE
		         
		         , CASE WHEN MAX(unilite.fnCipherDecrypt(N.BANK_ACCOUNT, '')) != '' THEN MAX(N.ADDR1)
		                ELSE ISNULL(C.ADDR1, '') + CASE WHEN ISNULL(C.ADDR2, '') = '' THEN ''
		                                                ELSE ' ' + C.ADDR2
		                                           END
		           END                                               AS ADDR1
		      FROM       BTR100T A WITH (NOLOCK)
		      INNER JOIN BPR100T B WITH (NOLOCK)  ON B.COMP_CODE        = A.COMP_CODE
		                                         AND B.ITEM_CODE        = A.ITEM_CODE
		      INNER JOIN BCM100T C WITH (NOLOCK)  ON C.COMP_CODE        = A.COMP_CODE
		                                         AND C.CUSTOM_CODE      = A.INOUT_CODE
		      LEFT  JOIN BCM100T D WITH (NOLOCK)  ON D.COMP_CODE        = C.COMP_CODE
		                                         AND D.CUSTOM_CODE      = C.BANK_CODE

			LEFT JOIN BCM130T C2 WITH (NOLOCK)  ON C2.COMP_CODE		   = C.COMP_CODE
											AND C2.CUSTOM_CODE      = C.CUSTOM_CODE
											AND C2.MAIN_BOOK_YN = 'Y'
			LEFT JOIN BCM100T C3 WITH (NOLOCK)  ON C3.COMP_CODE		   = C2.COMP_CODE
													AND C3.CUSTOM_CODE      = C2.BANK_CODE

		      INNER JOIN MAP200T N WITH (NOLOCK)  ON N.COMP_CODE        = A.COMP_CODE
		                                         AND N.DIV_CODE         = A.DIV_CODE
		                                         AND N.ITEM_CODE        = A.ITEM_CODE
		                                         AND N.INOUT_NUM        = A.INOUT_NUM
		                                         AND N.INOUT_SEQ        = A.INOUT_SEQ
		      INNER JOIN MAP100T M WITH (NOLOCK)  ON M.COMP_CODE        = N.COMP_CODE
		                                         AND M.DIV_CODE         = N.DIV_CODE
		                                         AND M.CHANGE_BASIS_NUM = N.CHANGE_BASIS_NUM
		     WHERE M.COMP_CODE   = @CompCode
		       AND A.INOUT_TYPE    IN (N'1', N'4')
		       AND A.ACCOUNT_YNC   = N'Y'
		    <if test="@foren.Ognl@isNotEmpty(BILL_DATE_FR)">
		       AND M.BILL_DATE     &gt;= #{BILL_DATE_FR}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BILL_DATE_TO)">
		       AND M.BILL_DATE     &lt;= #{BILL_DATE_TO}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		       AND M.DIV_CODE       = #{DIV_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(IN_WH_CODE)">
		       AND A.WH_CODE        = #{IN_WH_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
		       AND M.ORDER_TYPE     = #{ORDER_TYPE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(CUST_CODE)">
		       AND A.INOUT_CODE  LIKE #{CUST_CODE}  + '%'
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BILL_NUM)">
		       AND M.BILL_NUM    LIKE #{BILL_NUM} + '%'
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(IN_FR_DATE)">
		       AND A.INOUT_DATE    &gt;= #{IN_FR_DATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(IN_TO_DATE)">
		       AND A.INOUT_DATE    &lt;= #{IN_TO_DATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_FR)">
		       AND M.ISSUE_EXPECTED_DATE &gt;= #{ISSUE_EXPDT_FR}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ISSUE_EXPDT_TO)">
		       AND M.ISSUE_EXPECTED_DATE &lt;= #{ISSUE_EXPDT_TO}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		       AND B.ITEM_LEVEL1   = #{ITEM_LEVEL1}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		       AND B.ITEM_LEVEL2   = #{ITEM_LEVEL2}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		       AND B.ITEM_LEVEL3   = #{ITEM_LEVEL3}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
		       AND C.AGENT_TYPE   = #{AGENT_TYPE}
		    </if>
<!-- 20200218 : 기표여부 조건 추가 -->
		    <if test="rdoSelect == &quot;Y&quot;">
		       AND ISNULL(M.EX_DATE, '') != ''
		    </if>
		    <if test="rdoSelect == &quot;N&quot;">
		       AND ISNULL(M.EX_DATE, '')  = ''
		    </if>
<!-- 20210304 : 전표승인여부 조건 추가 -->
		    <if test="rdoSelect2 == &quot;Y&quot;">
		       AND ISNULL(M.AC_DATE, '') != ''
		    </if>
		    <if test="rdoSelect2 == &quot;N&quot;">
		       AND ISNULL(M.AC_DATE, '')  = ''
		    </if>
		     GROUP BY A.COMP_CODE
		            , A.DIV_CODE
		            , A.INOUT_CODE
		            , A.INOUT_CODE_TYPE
		            , C.CUSTOM_NAME
		            , N.CUSTOM_PRSN
		            , C.BANKBOOK_NAME
		            , C.TELEPHON
		            , D.CUSTOM_NAME
		            , C.BANKBOOK_NUM
		            , C.ZIP_CODE
		            , C.ADDR1
		            , C.ADDR2
		            , N.PHONE <!-- 20210812 동일 거래처,이름이면 데이터 합쳐져서 나와서 송금시 어려움으로 인한 요청으로 수정 (김세정님 요청) -->
		     ORDER BY A.INOUT_CODE
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
</mapper>