<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_pmp112ukrv_mitServiceImpl">
<select id="s_pmp112ukrv_mitServiceImpl.tab1SelectList" parameterType="Map" resultType="rMap">
/*s_pmp112ukrv_mit Query01*/
SET NOCOUNT ON
IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE ID=OBJECT_ID('tempdb..#TMP_WKORDER'))
	DROP TABLE #TMP_WKORDER	
DECLARE @WKORD_DATE NVARCHAR(8)
    SET @WKORD_DATE = CONVERT(NVARCHAR(8),GETDATE(),112)
    SELECT  A.COMP_CODE
            , A.DIV_CODE
            , A.CUSTOM_CODE
            , M2.CUSTOM_NAME
            , M2.NATION_CODE
            , B.ITEM_CODE
            , M3.ITEM_NAME
            , M3.SPEC
            , B.DVRY_DATE
            , B.ORDER_UNIT_Q
            , @WKORD_DATE AS PRODT_WKORD_DATE
			--, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE),112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE),112) END AS PRODT_START_DATE	--191127
			--, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE),112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE),112) END AS PRODT_END_DATE	--191127
			, (
				SELECT MAX(CAL_DATE)
				FROM BCM400T WITH (NOLOCK)
				WHERE COMP_CODE=A.COMP_CODE
				AND CAL_TYPE='4' 
				AND HOLY_TYPE='2'
				AND CAL_DATE &lt;= CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE), 112)
			) AS PRODT_START_DATE	--워킹데이 기준으로 변경 20200131
			, (
				SELECT MAX(CAL_DATE)
				FROM BCM400T WITH (NOLOCK)
				WHERE COMP_CODE=A.COMP_CODE
				AND CAL_TYPE='4' 
				AND HOLY_TYPE='2'
				AND CAL_DATE &lt;= CONVERT(VARCHAR(8), DATEADD(DAY, -4, B.DVRY_DATE), 112)
			) AS PRODT_END_DATE		--워킹데이 기준으로 변경 20200131
			
			--20210217 가용재고의미없어 주석
            --, (SELECT  CASE WHEN pab_stock_q &lt; 0 THEN 0 ELSE pab_stock_q END FROM fnGetPABStock(A.COMP_CODE, A.DIV_CODE, @WKORD_DATE, B.ITEM_CODE, B.ITEM_CODE, '')) AS STOCK_Q
            , 0 AS STOCK_Q	
            --, B.ORDER_UNIT_Q AS WKORD_Q
			, B.ORDER_UNIT_Q - ISNULL(M1.ALLOT_Q,0) AS WKORD_Q
            , ISNULL(M5.REF_CODE1, 4) AS SPLIT_CNT
            , B.ORDER_NUM
            , B.SER_NO    AS ORDER_SEQ
            , '' AS LOT_NO
			, 'Y' AS SEMI_ITEM_YN
			, CASE WHEN (SELECT COUNT(1) FROM BPR500T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND PROD_ITEM_CODE=B.ITEM_CODE) &gt; 1 THEN 'Y' ELSE 'N' END AS BOM_YN
			, CONVERT(NVARCHAR(20),'') AS STANT_CODE			--스탠트코드
			, CONVERT(NUMERIC(30,6), 0) AS STANT_STOCK_Q		--스탠트재고
			, CONVERT(NUMERIC(30,6), 0) AS RESERVE_Q			--스탠트예약량
			, CONVERT(NVARCHAR(20),'N') AS STANT_CHKECK_YN		--체크YN
			, CONVERT(NUMERIC(30,6), 0) AS STANT_REMAIN_Q		--스텐트 잔량
			, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -12, B.DVRY_DATE), 112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -12, B.DVRY_DATE), 112) END AS STANT_DATE	--엮기일
			, CONVERT(NVARCHAR(20),'') AS COAT_STANT_CODE			--코팅스탠트코드
			, CONVERT(NUMERIC(30,6), 0) AS COAT_STANT_STOCK_Q		--코팅스탠트재고
			, CONVERT(NUMERIC(30,6), 0) AS COAT_RESERVE_Q			--코팅스탠트예약량
			, CONVERT(NVARCHAR(20),'N') AS COAT_STANT_CHKECK_YN		--코팅체크YN
			, CONVERT(NUMERIC(30,6), 0) AS COAT_STANT_REMAIN_Q		--코팅스텐트 잔량
			, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -8, B.DVRY_DATE), 112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -8, B.DVRY_DATE), 112) END AS COAT_DATE		--코팅일
			, CONVERT(NVARCHAR(8),'') AS ISSUE_DATE		--출고예정일
			, ROW_NUMBER() OVER (ORDER BY B.ORDER_NUM, B.SER_NO) AS SEQ
			, 'A' AS WKORD_TYPE	--오더작업지시
			, CONVERT(VARCHAR(20), '') AS OLD_WKORD_NUM
			, ISNULL(B.PO_NUM,'') AS PO_NUM
			, B.REMARK AS REMARK		--영업비고 M6.REMARK
			, B.REMARK AS SALES_REMARK
			, B.REMARK_INTER AS SALES_REMARK_INTER	
			, A.ORDER_DATE
			, #{WORK_SHOP_CODE} AS WORK_SHOP_CODE
	INTO #TMP_WKORDER
    FROM SOF100T A WITH (NOLOCK)
         INNER JOIN SOF110T        B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE 
                                                  AND A.DIV_CODE =B.DIV_CODE 
                                                  AND A.ORDER_NUM=B.ORDER_NUM
         LEFT  JOIN (
						SELECT COMP_CODE, DIV_CODE, ORDER_NUM, ORDER_SEQ, CONFIRM_YN, SUM(ALLOT_Q) AS ALLOT_Q
						FROM S_SOF120T_MIT  WITH (NOLOCK)
						WHERE COMP_CODE = #{S_COMP_CODE}
						AND   DIV_CODE = #{DIV_CODE}
						AND   CONFIRM_YN = 'Y'
						GROUP BY COMP_CODE, DIV_CODE, ORDER_NUM, ORDER_SEQ, CONFIRM_YN 
		 
					) M1 						   ON B.COMP_CODE=M1.COMP_CODE 
                                                  AND B.DIV_CODE =M1.DIV_CODE 
                                                  AND B.ORDER_NUM=M1.ORDER_NUM 
                                                  AND B.SER_NO   =M1.ORDER_SEQ 
                                                  AND B.SER_NO   =M1.ORDER_SEQ 
         LEFT  JOIN BCM100T       M2 WITH (NOLOCK) ON A.COMP_CODE=M2.COMP_CODE 
                                                  AND A.CUSTOM_CODE=M2.CUSTOM_CODE
         INNER JOIN BPR100T       M3 WITH (NOLOCK) ON B.COMP_CODE=M3.COMP_CODE 
                                                  AND B.ITEM_CODE=M3.ITEM_CODE
         INNER JOIN BPR200T       M4 WITH (NOLOCK) ON B.COMP_CODE=M4.COMP_CODE  
                                                  AND B.DIV_CODE=M4.DIV_CODE 
                                                  AND B.ITEM_CODE=M4.ITEM_CODE
         LEFT  JOIN BSA100T       M5 WITH (NOLOCK) ON A.COMP_CODE=M5.COMP_CODE 
                                                  AND M5.MAIN_CODE='Z020' 
												  AND M5.REF_CODE2=ISNULL(M3.ITEM_LEVEL1,'') + ISNULL(M3.ITEM_LEVEL2,'')
		 LEFT  JOIN (
						SELECT  COMP_CODE, DIV_CODE, ITEM_CODE, SO_NUM, SO_SEQ, SUM(WKORD_Q) WKORD_Q, MAX(REMARK) AS REMARK
						FROM PMP100T WITH (NOLOCK)
						WHERE COMP_CODE=#{S_COMP_CODE}
						AND DIV_CODE=#{DIV_CODE}
						AND LINE_END_YN='Y'
						GROUP BY COMP_CODE, DIV_CODE, ITEM_CODE, SO_NUM, SO_SEQ
		 )		  M6  ON B.COMP_CODE=M6.COMP_CODE AND B.DIV_CODE=M6.DIV_CODE AND B.ORDER_NUM=M6.SO_NUM AND B.SER_NO=M6.SO_SEQ AND B.ITEM_CODE=M6.ITEM_CODE
    WHERE A.COMP_CODE = #{S_COMP_CODE}
    AND A.DIV_CODE = #{DIV_CODE}
    AND B.DVRY_DATE &gt;= #{FR_DVRY_DATE}
    AND B.DVRY_DATE &lt;= #{TO_DVRY_DATE}
	AND B.ORDER_STATUS != 'Y'
    <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
    AND M4.ITEM_ACCOUNT = '10'
    </if>
    --AND ISNULL(M1.LOT_NO,'') =  ''
	AND (    B.ORDER_Q - ISNULL(M1.ALLOT_Q,0) &gt; 0 
		 AND B.ORDER_Q - ISNULL(M6.WKORD_Q,0) &gt; 0
		 AND ISNULL(M1.CONFIRM_YN,'') = 'Y' 
		 )
	AND B.ORDER_Q - B.OUTSTOCK_Q &gt; 0
<!-- 20200225 추가: custom_code, custom_name, item_code, item_name, spec -->	
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
	  AND A.CUSTOM_CODE LIKE #{CUSTOM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
	  AND M2.CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	  AND B.ITEM_CODE LIKE #{ITEM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
	  AND M3.ITEM_NAME LIKE #{ITEM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(SPEC)">
	  AND M3.SPEC LIKE #{SPEC} +'%'
	</if>
	/* 제품불량에 대한 재 작업지시 */
	INSERT INTO #TMP_WKORDER (COMP_CODE, DIV_CODE, CUSTOM_CODE, CUSTOM_NAME, NATION_CODE, ITEM_CODE, ITEM_NAME, SPEC, DVRY_DATE, ORDER_UNIT_Q, PRODT_WKORD_DATE, PRODT_START_DATE, PRODT_END_DATE, STOCK_Q, WKORD_Q
							, SPLIT_CNT, ORDER_NUM, ORDER_SEQ, LOT_NO, SEMI_ITEM_YN, BOM_YN
							, STANT_CODE, STANT_STOCK_Q, RESERVE_Q, STANT_CHKECK_YN, STANT_REMAIN_Q, STANT_DATE
							, COAT_STANT_CODE, COAT_STANT_STOCK_Q, COAT_RESERVE_Q, COAT_STANT_CHKECK_YN, COAT_STANT_REMAIN_Q, COAT_DATE
							, ISSUE_DATE, SEQ, WKORD_TYPE, OLD_WKORD_NUM, PO_NUM
							,REMARK, SALES_REMARK, SALES_REMARK_INTER, ORDER_DATE, WORK_SHOP_CODE)
	SELECT A.COMP_CODE, A.DIV_CODE, A.CUSTOM_CODE, M2.CUSTOM_NAME, M2.NATION_CODE, A.ITEM_CODE, M3.ITEM_NAME, M3.SPEC
		, M1.DVRY_DATE
		, A.WKORD_Q-B.GOOD_WORK_Q AS ORDER_UNIT_Q
		, @WKORD_DATE AS PRODT_WKORD_DATE
		, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -4, M1.DVRY_DATE),112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -4, M1.DVRY_DATE),112) END AS PRODT_START_DATE	--191127
		, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -4, M1.DVRY_DATE),112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -4, M1.DVRY_DATE),112) END AS PRODT_END_DATE	--191127
		, 0 AS STOCK_Q
		, A.WKORD_Q-B.GOOD_WORK_Q AS WKORD_Q
		, ISNULL(M5.REF_CODE1, 4) AS SPLIT_CNT
		, A.SO_NUM AS ORDER_NUM
		, A.SO_SEQ AS ORDER_SEQ
		, '' AS LOT_NO
		, 'N' AS SEMI_ITEM_YN
		, CASE WHEN (SELECT COUNT(1) FROM BPR500T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND PROD_ITEM_CODE=A.ITEM_CODE) > 2 THEN 'Y' ELSE 'N' END AS BOM_YN
		, CONVERT(NVARCHAR(20),'') AS STANT_CODE			--스탠트코드
		, CONVERT(NUMERIC(30,6), 0) AS STANT_STOCK_Q		--스탠트재고
		, CONVERT(NUMERIC(30,6), 0) AS RESERVE_Q			--스탠트예약량
		, CONVERT(NVARCHAR(20),'N') AS STANT_CHKECK_YN		--체크YN
		, CONVERT(NUMERIC(30,6), 0) AS STANT_REMAIN_Q		--스텐트 잔량
		, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -12, M1.DVRY_DATE), 112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -12, M1.DVRY_DATE), 112) END AS STANT_DATE	--엮기일
		, CONVERT(NVARCHAR(20),'') AS COAT_STANT_CODE			--코팅스탠트코드
		, CONVERT(NUMERIC(30,6), 0) AS COAT_STANT_STOCK_Q		--코팅스탠트재고
		, CONVERT(NUMERIC(30,6), 0) AS COAT_RESERVE_Q			--코팅스탠트예약량
		, CONVERT(NVARCHAR(20),'N') AS COAT_STANT_CHKECK_YN		--코팅체크YN
		, CONVERT(NUMERIC(30,6), 0) AS COAT_STANT_REMAIN_Q		--코팅스텐트 잔량
		, CASE WHEN CONVERT(VARCHAR(8), DATEADD(DAY, -8, M1.DVRY_DATE), 112) &lt; @WKORD_DATE THEN @WKORD_DATE ELSE CONVERT(VARCHAR(8), DATEADD(DAY, -8, M1.DVRY_DATE), 112) END AS COAT_DATE		--코팅일
		, CONVERT(NVARCHAR(8),'') AS ISSUE_DATE		--출고예정일
		, 9999 AS SEQ
		, 'B' AS WKORD_TYPE	--불량 재작업지시
		, A.WKORD_NUM AS OLD_WKORD_NUM
		, ISNULL(M1.PO_NUM,'') AS PO_NUM
		,A.REMARK
		, M1.REMARK AS SALES_REMARK
		, M1.REMARK_INTER AS SALES_REMARK_INTER
		, (SELECT TOP 1 ORDER_DATE FROM SOF100T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND ORDER_NUM=A.SO_NUM) AS ORDER_DATE
		, #{WORK_SHOP_CODE} AS WORK_SHOP_CODE
	FROM PMP100T A WITH (NOLOCK)
			INNER JOIN PMR100T		 B  WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.WKORD_NUM=B.WKORD_NUM
			LEFT  JOIN SOF110T		 M1 WITH (NOLOCK) ON A.COMP_CODE=M1.COMP_CODE AND A.DIV_CODE=M1.DIV_CODE AND A.SO_NUM=M1.ORDER_NUM AND A.SO_SEQ=M1.SER_NO
			LEFT  JOIN BCM100T       M2 WITH (NOLOCK) ON A.COMP_CODE=M2.COMP_CODE 
													AND A.CUSTOM_CODE=M2.CUSTOM_CODE
			INNER JOIN BPR100T       M3 WITH (NOLOCK) ON A.COMP_CODE=M3.COMP_CODE 
													AND A.ITEM_CODE=M3.ITEM_CODE
			INNER JOIN BPR200T       M4 WITH (NOLOCK) ON A.COMP_CODE=M4.COMP_CODE  
													AND A.DIV_CODE=M4.DIV_CODE 
													AND A.ITEM_CODE=M4.ITEM_CODE
			LEFT  JOIN BSA100T       M5 WITH (NOLOCK) ON A.COMP_CODE=M5.COMP_CODE 
													AND M5.MAIN_CODE='Z020' 
													AND M5.REF_CODE2=ISNULL(M3.ITEM_LEVEL1,'') + ISNULL(M3.ITEM_LEVEL2,'')
			LEFT  JOIN PMP100T		 M6 WITH(NOLOCK) ON M6.COMP_CODE=A.COMP_CODE AND M6.DIV_CODE=A.DIV_CODE AND ISNULL(M6.TEMPC_01,'')=A.WKORD_NUM AND M6.PROG_WORK_CODE=A.PROG_WORK_CODE AND M6.WORK_SHOP_CODE=A.WORK_SHOP_CODE													
	WHERE A.COMP_CODE=#{S_COMP_CODE}
	AND A.DIV_CODE=#{DIV_CODE}
	AND A.LINE_END_YN = 'Y'
	AND M4.ITEM_ACCOUNT = '10'
	AND M1.COMP_CODE IS NOT NULL
	AND B.BAD_WORK_Q &gt; 0
	AND A.WKORD_Q-B.GOOD_WORK_Q &gt; 0
	AND M6.COMP_CODE IS NULL
	--AND NOT EXISTS (SELECT TOP 1 1 FROM PMP100T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND ISNULL(TEMPC_01,'')=A.WKORD_NUM AND PROG_WORK_CODE=A.PROG_WORK_CODE AND WORK_SHOP_CODE=A.WORK_SHOP_CODE)
<!-- 20200225 추가: custom_code, custom_name, item_code, item_name, spec -->	
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
	  AND A.CUSTOM_CODE LIKE #{CUSTOM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
	  AND M2.CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	  AND A.ITEM_CODE LIKE #{ITEM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
	  AND M3.ITEM_NAME LIKE #{ITEM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(SPEC)">
	  AND M3.SPEC LIKE #{SPEC} +'%'
	</if>
	DECLARE @BARE_STANT_CODE NVARCHAR(20), @COAT_STANT_CODE NVARCHAR(20), @CUR_SEQ INT, @CUR_ITEM_CODE NVARCHAR(20)
	DECLARE CUR1 CURSOR FOR
	
		SELECT SEQ, ITEM_CODE
		FROM #TMP_WKORDER A
	
	OPEN CUR1
	FETCH NEXT FROM CUR1 INTO @CUR_SEQ, @CUR_ITEM_CODE
	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE M SET STANT_CODE=N.BARE_STANT_CODE
				   , STANT_STOCK_Q=N.BARE_STOCK_Q
				   , RESERVE_Q=N.RESERVE_Q
				   , COAT_STANT_CODE=N.COAT_STANT_CODE
				   , COAT_STANT_STOCK_Q=N.COAT_STOCK_Q
				   , COAT_RESERVE_Q=N.COAT_RESERVE_Q
		FROM #TMP_WKORDER M
			 INNER JOIN (
							SELECT X.comp_code, X.div_code, X.BARE_STANT_CODE, X.COAT_STANT_CODE, ISNULL(Y.STOCK_Q,0) AS BARE_STOCK_Q, ISNULL(Z.STOCK_Q,0) AS COAT_STOCK_Q
									, ISNULL(Q.RESERVE_Q,0) AS RESERVE_Q, ISNULL(Q.COAT_RESERVE_Q,0) AS COAT_RESERVE_Q
							FROM (
									SELECT  A.COMP_CODE, A.DIV_CODE
											, MAX(CASE WHEN B.ITEM_LEVEL3 = '161' THEN A.item_code ELSE '' END) AS BARE_STANT_CODE
											, MAX(CASE WHEN B.ITEM_LEVEL3 = '162' THEN A.item_code ELSE '' END) AS COAT_STANT_CODE
									FROM UNILITE.[fnBOMExplosion](#{S_COMP_CODE}, #{DIV_CODE}, @CUR_ITEM_CODE, @WKORD_DATE, '', '1') A  
										 INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.ITEM_CODE=B.ITEM_CODE
									WHERE A.COMP_CODE=#{S_COMP_CODE}
									AND A.DIV_CODE=#{DIV_CODE}
									AND B.ITEM_LEVEL1='100'
									AND B.ITEM_LEVEL2='160'
									AND B.ITEM_LEVEL3 IN ('161','162')
									GROUP BY A.COMP_CODE, A.DIV_CODE
								 ) X
								 LEFT JOIN (
									SELECT  COMP_CODE, DIV_CODE, ITEM_CODE, SUM(GOOD_STOCK_Q) AS STOCK_Q
									FROM BIV150TV A
									GROUP BY COMP_CODE, DIV_CODE, ITEM_CODE
								 ) Y ON X.COMP_CODE=Y.COMP_CODE AND X.DIV_CODE=Y.DIV_CODE AND X.BARE_STANT_CODE=Y.ITEM_CODE
								 LEFT JOIN (
									SELECT  COMP_CODE, DIV_CODE, ITEM_CODE, SUM(GOOD_STOCK_Q) AS STOCK_Q
									FROM BIV150TV
									GROUP BY COMP_CODE, DIV_CODE, ITEM_CODE
								 ) Z ON X.COMP_CODE=Z.COMP_CODE AND X.DIV_CODE=Z.DIV_CODE AND X.COAT_STANT_CODE=Z.ITEM_CODE
								 LEFT JOIN (
									SELECT A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE
											, MAX(CASE WHEN C.ITEM_LEVEL3 = '161' THEN A.item_code ELSE '' END) AS BARE_STANT_CODE
											, MAX(CASE WHEN C.ITEM_LEVEL3 = '162' THEN A.item_code ELSE '' END) AS COAT_STANT_CODE
											, SUM(CASE WHEN C.ITEM_LEVEL3 = '161' THEN A.ALLOCK_Q ELSE 0 END)  AS RESERVE_Q
											, SUM(CASE WHEN C.ITEM_LEVEL3 = '162' THEN A.ALLOCK_Q ELSE 0 END)  AS COAT_RESERVE_Q
									FROM PMP200T A WITH (NOLOCK)
										 INNER JOIN PMP100T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.WKORD_NUM=B.WKORD_NUM AND A.WORK_SHOP_CODE=B.WORK_SHOP_CODE
										 INNER JOIN BPR100T C WITH (NOLOCK) ON A.COMP_CODE=C.COMP_CODE AND A.ITEM_CODE=C.ITEM_CODE
									WHERE A.COMP_CODE=#{S_COMP_CODE}
									AND A.DIV_CODE=#{DIV_CODE}
									AND B.LINE_END_YN='Y'
									AND B.WKORD_STATUS='2'
									AND C.ITEM_LEVEL1='100'
									AND C.ITEM_LEVEL2='160'
									AND C.ITEM_LEVEL3 IN ('161','162')
									GROUP BY A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE								 
								 
								 ) Q ON X.comp_code=Q.COMP_CODE AND X.div_code=Q.DIV_CODE AND (X.BARE_STANT_CODE=Q.ITEM_CODE OR X.COAT_STANT_CODE=Q.ITEM_CODE)
						 ) N ON M.COMP_CODE=N.comp_code AND M.DIV_CODE=N.DIV_CODE  
		WHERE SEQ = @CUR_SEQ
		
		FETCH NEXT FROM CUR1 INTO @CUR_SEQ, @CUR_ITEM_CODE
	END
	CLOSE CUR1
	DEALLOCATE CUR1
	--스텐트 반제품작업지시 자동 발행 중지(200122)
	UPDATE A SET STANT_REMAIN_Q=B.STANT_STOCK_Q-(B.RESERVE_Q+B.WKORD_Q), STANT_CHKECK_YN='N'	--CASE WHEN B.STANT_STOCK_Q-(B.RESERVE_Q+B.WKORD_Q) &lt;= 0 THEN 'Y' ELSE 'N' END
	FROM #TMP_WKORDER A
		 INNER JOIN (
					SELECT COMP_CODE, DIV_CODE, STANT_CODE, MAX(STANT_STOCK_Q) AS STANT_STOCK_Q, SUM(RESERVE_Q) RESERVE_Q,  COAT_STANT_CODE, MAX(COAT_STANT_STOCK_Q) AS COAT_STANT_STOCK_Q, SUM(COAT_RESERVE_Q) COAT_RESERVE_Q, SUM(WKORD_Q) WKORD_Q
					FROM #TMP_WKORDER
					GROUP BY COMP_CODE, DIV_CODE, STANT_CODE, COAT_STANT_CODE
					) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.STANT_CODE=B.STANT_CODE --OR A.COAT_STANT_CODE=B.COAT_STANT_CODE)
	WHERE A.STANT_CODE != ''
	--코팅 반제품작업지시 자동 발행 중지(201021)
	UPDATE A SET COAT_STANT_REMAIN_Q=B.COAT_STANT_STOCK_Q-(B.COAT_RESERVE_Q+B.WKORD_Q), COAT_STANT_CHKECK_YN='N'	--CASE WHEN B.COAT_STANT_STOCK_Q-(B.COAT_RESERVE_Q+B.WKORD_Q) &lt;= 0 THEN 'Y' ELSE 'N' END
	FROM #TMP_WKORDER A
		 INNER JOIN (
					SELECT COMP_CODE, DIV_CODE, STANT_CODE, MAX(STANT_STOCK_Q) AS STANT_STOCK_Q, SUM(RESERVE_Q) RESERVE_Q,  COAT_STANT_CODE, MAX(COAT_STANT_STOCK_Q) AS COAT_STANT_STOCK_Q, SUM(COAT_RESERVE_Q) COAT_RESERVE_Q, SUM(WKORD_Q) WKORD_Q
					FROM #TMP_WKORDER
					GROUP BY COMP_CODE, DIV_CODE, STANT_CODE, COAT_STANT_CODE
					) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.COAT_STANT_CODE=B.COAT_STANT_CODE
	WHERE A.COAT_STANT_CODE != ''
	SET NOCOUNT OFF
	SELECT * 
	FROM #TMP_WKORDER 
	WHERE 1 = 1
<!-- 20200225 조회조건 추가: ORDER_NUM, CUSTOM_CODE, CUSTOM_NAME, ITEM_CODE, ITEM_NAME, SPEC -->
	<if test="@foren.Ognl@isNotEmpty(ORDER_NUM)">
	  AND ORDER_NUM LIKE #{ORDER_NUM} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
	  AND CUSTOM_CODE LIKE #{CUSTOM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
	  AND CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	  AND ITEM_CODE LIKE #{ITEM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
	  AND ITEM_NAME LIKE #{ITEM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(SPEC)">
	  AND SPEC LIKE #{SPEC} +'%'
	</if>
	ORDER BY ORDER_NUM, ORDER_SEQ
	 
	 
</select>
<select id="s_pmp112ukrv_mitServiceImpl.tab2SelectList" parameterType="Map" resultType="rMap">
	SELECT
		A.COMP_CODE
		,A.DIV_CODE
		,M1.TREE_NAME AS WORK_SHOP_CODE
		,A.WKORD_NUM
		,A.ITEM_CODE
		,B.ITEM_NAME
		,C.SPEC
		,A.PRODT_WKORD_DATE--작업지시일
		,A.LOT_NO--LOT NO
		,A.PRODT_START_DATE--착수예정일
		,A.PRODT_END_DATE--완료예정일
	
		,A.WKORD_Q--작업지시량
		,A.ORDER_NUM
		,A.SER_NO
		,A.CUSTOM_CODE
		,D.CUSTOM_NAME
		,(SELECT SUM(ORDER_Q) FROM SOF110T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND ORDER_NUM=A.ORDER_NUM AND SER_NO=A.SER_NO) AS ORDER_Q
		, A.WKORD_TYPE
		, A.TEMPC_01 AS OLD_WKORD_NUM
		, A.REMARK
		, E.DVRY_DATE
		, E.REMARK AS SALES_REMARK
		, E.REMARK_INTER AS SALES_REMARK_INTER
		, ISNULL(E.PO_NUM,'') AS PO_NUM
		--20200225 추가
		, (SELECT TOP 1 ORDER_DATE FROM SOF100T WITH (NOLOCK) WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND ORDER_NUM=A.SO_NUM) AS ORDER_DATE
		--20200305추가
		, B.INSERT_APPR_TYPE
	  FROM PMP100T A WITH(NOLOCK)
			INNER JOIN BPR200T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
											 AND B.DIV_CODE = A.DIV_CODE
											 AND B.ITEM_CODE = A.ITEM_CODE
			INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE = B.COMP_CODE
											 AND C.ITEM_CODE = B.ITEM_CODE
			LEFT  JOIN BCM100T D WITH(NOLOCK) ON D.COMP_CODE=A.COMP_CODE AND D.CUSTOM_CODE=A.CUSTOM_CODE										 
			LEFT  JOIN SOF110T E WITH (NOLOCK) ON A.COMP_CODE=E.COMP_CODE AND A.DIV_CODE=E.DIV_CODE AND A.SO_NUM=E.ORDER_NUM AND A.SO_SEQ=E.SER_NO		
			LEFT  JOIN BSA230T M1 ON A.COMP_CODE=M1.COMP_CODE AND A.DIV_CODE=M1.TYPE_LEVEL AND A.WORK_SHOP_CODE=M1.TREE_CODE			
	WHERE A.COMP_CODE = #{S_COMP_CODE}
	  AND A.DIV_CODE = #{DIV_CODE}
	  AND A.WORK_SHOP_CODE IN ('W40','W50')	--작업장은 W40, W50 고정하여 표시
	  AND A.PRODT_END_DATE &gt;= #{FR_PRODT_WKORD_DATE}		/* 완료예정일로 변경 200203 */
	  AND A.PRODT_END_DATE &lt;= #{TO_PRODT_WKORD_DATE}
	  AND A.LINE_END_YN = 'Y'
	<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
	  AND B.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	  AND C.ITEM_LEVEL1 = #{ITEM_LEVEL1}
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	  AND C.ITEM_LEVEL2 = #{ITEM_LEVEL2}
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	  AND C.ITEM_LEVEL3 = #{ITEM_LEVEL3}
	</if>
	<!-- 20200107: 상태 관련 조회조건 추가 -->
	<if test="CLOSE_YN == &quot;2&quot;">
	  AND A.WKORD_STATUS IN ('2','3')
	</if>
	<if test="CLOSE_YN == &quot;8&quot;">
	  AND A.WKORD_STATUS IN ('8', '9')
	</if>
<!-- 20200225 조회조건 추가: ORDER_NUM, CUSTOM_CODE, CUSTOM_NAME, ITEM_CODE, ITEM_NAME, SPEC -->
	<if test="@foren.Ognl@isNotEmpty(ORDER_NUM)">
	  AND A.SO_NUM LIKE #{ORDER_NUM} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
	  AND A.CUSTOM_CODE LIKE #{CUSTOM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
	  AND D.CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	  AND A.ITEM_CODE LIKE #{ITEM_CODE} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
	  AND B.ITEM_NAME LIKE #{ITEM_NAME} +'%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(SPEC)">
	  AND C.SPEC LIKE #{SPEC} +'%'
	</if>
<!-- 20200225 조회조건 추가: LOT_no -->
	<if test="@foren.Ognl@isNotEmpty(LOT_NO)">
	  AND A.LOT_NO LIKE #{LOT_NO} +'%'
	</if>
</select>
<insert id="s_pmp112ukrv_mitServiceImpl.insertTab1" parameterType="Map">
    INSERT INTO PMP112T_MIT_LOG
         ( KEY_VALUE            
         , SEQ             , COMP_CODE         , DIV_CODE           , CUSTOM_CODE       , CUSTOM_NAME
         , NATION_CODE     , WORK_SHOP_CODE    , ITEM_CODE          , PRODT_WKORD_DATE  , PRODT_START_DATE
         , PRODT_END_DATE  , WORK_USER         , WKORD_Q            , SPLIT_CNT         , ORDER_NUM			, SEMI_ITEM_YN, LOT_NO 
         , ORDER_SEQ       
		, STANT_CODE		, STANT_STOCK_Q		, RESERVE_Q			, STANT_CHKECK_YN		, STANT_REMAIN_Q		, STANT_DATE		
		, COAT_STANT_CODE	, COAT_STANT_STOCK_Q, COAT_RESERVE_Q	, COAT_STANT_CHKECK_YN	, COAT_STANT_REMAIN_Q	, COAT_DATE		
		, WKORD_TYPE		, OLD_WKORD_NUM
		 , INSERT_DB_USER    , INSERT_DB_TIME     , UPDATE_DB_USER    , UPDATE_DB_TIME
         , TEMPC_01        , TEMPC_02          , TEMPC_03           , TEMPN_01          , TEMPN_02
         , TEMPN_03      
         , REMARK 
         )
    VALUES
         (    #{KEY_VALUE}            
            , #{SEQ}             , #{S_COMP_CODE}       , #{DIV_CODE}           , #{CUSTOM_CODE}       , #{CUSTOM_NAME}
            , #{NATION_CODE}     , #{WORK_SHOP_CODE}    , #{ITEM_CODE}          , #{PRODT_WKORD_DATE}  , #{PRODT_START_DATE}
            , #{PRODT_END_DATE}  , #{WORK_USER}         , #{WKORD_Q}            , #{SPLIT_CNT}         , #{ORDER_NUM} , #{SEMI_ITEM_YN} , #{LOT_NO} 
            , #{ORDER_SEQ}       
			, #{STANT_CODE}		 ,  #{STANT_STOCK_Q}		, #{RESERVE_Q}		, #{STANT_CHKECK_YN}		, #{STANT_REMAIN_Q}		, #{STANT_DATE}		
			, #{COAT_STANT_CODE} ,  #{COAT_STANT_STOCK_Q}	, #{COAT_RESERVE_Q}	, #{COAT_STANT_CHKECK_YN}	, #{COAT_STANT_REMAIN_Q}, #{COAT_DATE}	
			, #{WKORD_TYPE}    	 , #{OLD_WKORD_NUM}
			, #{S_USER_ID}       , GETDATE()             	, #{S_USER_ID}      , GETDATE()
            , #{TEMPC_01}        , #{TEMPC_02}          	, #{TEMPC_03}       , #{TEMPN_01}          , #{TEMPN_02}
            , #{TEMPN_03}   
            , #{REMARK} 
         )
</insert>
<update id="s_pmp112ukrv_mitServiceImpl.spCallTab1" parameterType="Map" statementType="CALLABLE">
    {call uniLITE.USP_PRODT_S_PMP112UKRV_MIT  (
        #{KeyValue,      mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{ErrorDesc,     mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
    )}
</update>
<update id="s_pmp112ukrv_mitServiceImpl.deleteS_sof120t_mit" parameterType="Map" statementType="CALLABLE">
	DECLARE @KEY_VALUE NVARCHAR(50)
	SET @KEY_VALUE = #{KeyValue}
	
	/* 수주번호 별 배정된 lot 삭제 */
	DELETE X
	FROM S_SOF120T_MIT X
		 INNER JOIN (
						SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, CASE WHEN CHARINDEX('-', A.LOT_NO) > 0 THEN LEFT(A.LOT_NO, CHARINDEX('-', A.LOT_NO)-1) ELSE A.LOT_NO END AS LOT_NO
						FROM PMP100T A
							 INNER JOIN (
											SELECT COMP_CODE, DIV_CODE, WKORD_NUM
											FROM L_PMP100T WITH (NOLOCK)
											WHERE KEY_VALUE=@KEY_VALUE
											AND OPR_FLAG='D'
											GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM	 
							 ) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.WKORD_NUM=B.WKORD_NUM 
						WHERE A.LINE_END_YN='Y'
					) Y ON X.COMP_CODE=Y.COMP_CODE AND X.DIV_CODE=Y.DIV_CODE AND X.ORDER_NUM=Y.SO_NUM AND X.ORDER_SEQ=Y.SO_SEQ AND Y.LOT_NO=CASE WHEN CHARINDEX('-', X.LOT_NO) > 0 THEN LEFT(X.LOT_NO, CHARINDEX('-', X.LOT_NO)-1) ELSE X.LOT_NO END
 
 
	INSERT INTO S_SOF120T_MIT (COMP_CODE, DIV_CODE, ORDER_NUM, ORDER_SEQ, LOT_NO, ITEM_CODE, ALLOT_Q, CONFIRM_YN, INSERT_DB_USER, UPDATE_DB_USER)
	SELECT TOP 1 A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, '*' LOT_NO, A.ITEM_CODE, 0, 'Y', A.UPDATE_DB_USER, A.UPDATE_DB_USER
	FROM PMP100T A
			INNER JOIN (
						SELECT COMP_CODE, DIV_CODE, WKORD_NUM
						FROM L_PMP100T WITH (NOLOCK)
						WHERE KEY_VALUE=@KEY_VALUE
						AND OPR_FLAG='D'
						GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM	 
			) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.WKORD_NUM=B.WKORD_NUM 
	WHERE A.LINE_END_YN='Y'
	
	/* 제품작업지시 삭제시 같이 발행된 삽입기구반제품 작업지시도 같이 삭제 */
	DELETE A
	FROM PMP200T A
		 INNER JOIN PMP100T A2 ON A.COMP_CODE=A2.COMP_CODE AND A.DIV_CODE=A2.DIV_CODE AND A.WKORD_NUM=A2.WKORD_NUM AND A2.LINE_END_YN='Y'
		 INNER JOIN (
						SELECT COMP_CODE, DIV_CODE, WKORD_NUM
						FROM L_PMP100T WITH (NOLOCK)
						WHERE KEY_VALUE=@KEY_VALUE
						AND OPR_FLAG='D'
						GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM	 
		 ) B ON A2.COMP_CODE=B.COMP_CODE AND A2.DIV_CODE=B.DIV_CODE AND A2.TOP_WKORD_NUM=B.WKORD_NUM 
		 
	DELETE A
	FROM PMP100T A
		 INNER JOIN (
						SELECT COMP_CODE, DIV_CODE, WKORD_NUM
						FROM L_PMP100T WITH (NOLOCK)
						WHERE KEY_VALUE=@KEY_VALUE
						AND OPR_FLAG='D'
						GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM	 
		 ) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.TOP_WKORD_NUM=B.WKORD_NUM 
		 
/*	 
    DELETE A 
      FROM S_SOF120T_MIT A 
    INNER JOIN PMP100T B ON A.COMP_CODE=B.COMP_CODE 
                        AND A.DIV_CODE=B.DIV_CODE 
                        AND A.ORDER_NUM=B.SO_NUM 
                        AND A.ORDER_SEQ=B.SO_SEQ
                        AND B.LINE_END_YN='Y' 
    INNER JOIN L_PMP100T C ON B.COMP_CODE=C.COMP_CODE 
                          AND B.DIV_CODE=C.DIV_CODE 
                          AND B.WKORD_NUM=C.WKORD_NUM 
                          AND B.PROG_WORK_CODE=C.PROG_WORK_CODE 
    WHERE C.KEY_VALUE= @KEY_VALUE
    AND 1=2		
*/	
</update>
<select id="s_pmp112ukrv_mitServiceImpl.progWorkCodeList" parameterType="Map" resultType="rMap">
SELECT 
	PROG_WORK_CODE 
  FROM PMP100T 
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND DIV_CODE = #{DIV_CODE}
   AND WKORD_NUM = #{WKORD_NUM}
</select>
	<insert id="s_pmp112ukrv_mitServiceImpl.insertLogMaster" parameterType="Map">
        /*pmp110ukrvServiceImpl.insertLogMaster*/
        INSERT INTO L_PMP100T
             ( KEY_VALUE            , OPR_FLAG
             , LINE_SEQ             , PROG_WORK_CODE            , PROG_UNIT_Q           , WKORD_Q               , PROG_UNIT
             , DIV_CODE             , WKORD_NUM                 , WORK_SHOP_CODE        , PRODT_START_DATE      , PRODT_END_DATE
             , PRODT_WKORD_DATE     , ITEM_CODE                 , REMARK                , PROJECT_NO            , LOT_NO 
             , REWORK_YN            , STOCK_EXCHG_TYPE          , COMP_CODE             , EQUIP_CODE            , MOLD_CODE
             , WK_PLAN_NUM          
		     --20180705추가
		     , PRODT_PRSN			, PRODT_MACH				, PRODT_TIME			, DAY_NIGHT
             , INSERT_DB_USER       , INSERT_DB_TIME            , UPDATE_DB_USER        , UPDATE_DB_TIME 
             , CAVIT_BASE_Q         , CAPA_HR_Q                 , CAPA_DAY_Q			, WKORD_PRSN
			 --20190123 추가(PMP100T.CUSTOM_NAME 저장할 데이터)
             , CUSTOM_NAME
             , CUSTOM_CODE
             , PRODT_DATE	, EXPIRATION_DATE
             )
        VALUES
             ( #{KEY_VALUE}         , #{OPR_FLAG}
             , #{LINE_SEQ}          , #{PROG_WORK_CODE}         , #{PROG_UNIT_Q}        , #{WKORD_Q}            , #{PROG_UNIT}
             , #{DIV_CODE}          , #{WKORD_NUM}              , #{WORK_SHOP_CODE}     , #{PRODT_START_DATE}   , #{PRODT_END_DATE}
             , #{PRODT_WKORD_DATE}  , #{ITEM_CODE}              , #{REMARK}             , #{PROJECT_NO}         , #{LOT_NO} 
             , #{REWORK_YN}         , #{STOCK_EXCHG_TYPE}       , #{COMP_CODE}          , #{EQUIP_CODE}         , #{MOLD_CODE}
             , #{WK_PLAN_NUM}       
		     --20180705추가
		     , #{PRODT_PRSN}		, #{PRODT_MACH}				, #{PRODT_TIME}			, #{DAY_NIGHT}
             , #{S_USER_ID}         , GETDATE()                 , #{S_USER_ID}          , GETDATE()
             , #{CAVIT_BASE_Q}      , #{CAPA_HR}                , #{CAPA_DAY}			, #{WKORD_PRSN}
 			 --20190123 추가(PMP100T.CUSTOM_NAME 저장할 데이터)
 			 , #{CUSTOM_NAME}
 			 , #{CUSTOM_CODE}
 			 , #{PRODT_DATE}	, #{EXPIRATION_DATE}
            )
    </insert>  
    
    <update id="s_pmp112ukrv_mitServiceImpl.USP_PRODT_Pmp100ukr" parameterType="Map" statementType="CALLABLE">
        {call USP_PRODT_Pmp100ukr (
            #{KeyValue,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{WKORD_NUM,    mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String},
            #{LOT_NO,       mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String},
            #{ErrorDesc,    mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
        )}
    </update>
<!-- 20200225 수정로직 추가 -->
	<update id="s_pmp112ukrv_mitServiceImpl.tab2UpdateDetail" parameterType="Map">
		/*s_pmp112ukrv_mitServiceImpl.tab2UpdateDetail*/
		UPDATE PMP100T
		   SET PRODT_START_DATE = #{PRODT_START_DATE}
		     , PRODT_END_DATE   = #{PRODT_END_DATE}
			 , REMARK   		= #{REMARK}
		     , UPDATE_DB_USER   = #{S_USER_ID}
		     , UPDATE_DB_TIME   = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND DIV_CODE       = #{DIV_CODE}
		   AND WKORD_NUM      = #{WKORD_NUM}
	</update>
</mapper>