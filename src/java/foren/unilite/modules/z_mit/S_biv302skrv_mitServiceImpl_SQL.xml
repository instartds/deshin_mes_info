<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_biv302skrv_mitServiceImpl">
	<select id="s_biv302skrv_mitServiceImpl.selectMasterList" parameterType="Map" resultType="rMap">		/* 품목별 */
        --s_biv302skrv_mit.Cs_biv302skrv_mit[fnBiv300QSt1] Query03
        /*
        현재고 현황 조회(품목/창고별)
        */
        BEGIN
            DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                          , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장코드

                          , @SUBCON_FLAG        NVARCHAR(02)                -- 외주재고 포함 여부(Y/N)
                          , @QUERY_TYPE         NVARCHAR(02)                -- 조회유형 (1: 품목별,  2: 창고별)
                          , @USER_ID            NVARCHAR(100)                -- (필수) USER ID

            SET NOCOUNT ON
            SET ARITHABORT ON

            SET @COMP_CODE       = #{COMP_CODE}
            SET @DIV_CODE        = #{DIV_CODE}

            SET @SUBCON_FLAG     = #{SUBCON_FLAG}   -- 외주재고 포함 여부(1: 미포함, 2: 포함)
            SET @QUERY_TYPE      = #{QUERY_TYPE}   -- 조회유형          (1: 품목별, 2: 창고별)
            SET @USER_ID         = #{S_USER_ID}

            SET @QUERY_TYPE      = CASE WHEN @QUERY_TYPE  = ''  THEN '1' ELSE SUBSTRING(@QUERY_TYPE, 1, 1) END
            SET @SUBCON_FLAG     = CASE WHEN @SUBCON_FLAG = ''  THEN '1'
                                        WHEN @QUERY_TYPE  = '2' THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'N'  THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'Y'  THEN '2'
                                        ELSE SUBSTRING(@SUBCON_FLAG, 1, 1)
                                   END  -- 창고별 조회일 경우, 외주재고는 제외 처리함.

        -----------------------------------------------------------------------------------------------------------------------
            DECLARE @RefItem            NVARCHAR(01)

            SELECT TOP 1 @RefItem = REF_ITEM
            FROM   BSA300T WITH (NOLOCK)
            WHERE  USER_ID = @USER_ID

            SET @RefItem = ISNULL(@RefItem, '')

        -----------------------------------------------------------------------------------------------------------------------

            SELECT
                   CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT_NAME
                        WHEN @QUERY_TYPE = '2' THEN A.WH_NAME
                        ELSE ''
                   END                                                                                                  AS ITEM_ACCOUNT
                 , CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT
                        WHEN @QUERY_TYPE = '2' THEN A.WH_CODE
                        ELSE ''
                   END                                                                                                  AS ACCOUNT1
                 , A.DIV_CODE                                                                                           AS DIV_CODE
                 , A.ITEM_CODE                                                                                          AS ITEM_CODE
                 , A.ITEM_NAME                                                                                          AS ITEM_NAME
                 , A.SPEC                                                                                               AS SPEC
                 , A.STOCK_UNIT                                                                                         AS STOCK_UNIT
                 , CASE WHEN SUM(ISNULL(STOCK_Q, 0)) = 0 THEN 0
                        ELSE SUM(ROUND(ISNULL(STOCK_AMT, 0), 5)) / SUM(ISNULL(STOCK_Q, 0))
                   END                                                                                                  AS STOCK_P
                 , SUM(ISNULL(STOCK_Q, 0))                                                                              AS STOCK_Q
                 , SUM(ISNULL(STOCK_AMT, 0))                                                                  AS STOCK_AMT
                 , SUM(ISNULL(GOOD_STOCK_Q, 0))                                                                         AS GOOD_STOCK_Q
                 , SUM(ISNULL(GOOD_STOCK_AMT, 0))                                                             AS GOOD_STOCK_AMT
                 , SUM(ISNULL(BAD_STOCK_Q, 0))                                                                          AS BAD_STOCK_Q
                 , SUM(ISNULL(BAD_STOCK_AMT, 0))                                                              AS BAD_STOCK_AMT
                 , ISNULL(LOCATION, '')                                                                                 AS LOCATION
                 , ISNULL(CUSTOM_CODE, '')                                                                              AS CUSTOM_CODE
                 , ISNULL(CUSTOM_NAME, '')                                                                              AS CUSTOM_NAME
				 , ISNULL(RECEIPT_DATE, '')																				AS RECEIPT_DATE
            FROM   (
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE A.WH_CODE    END                                     AS WH_CODE
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE D1.TREE_NAME END                                     AS WH_NAME


        -- 입고+(1), 출고-(2), 반품+(3)
                        , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2') OR SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) IN ('1', '2'))    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0)
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               WHEN ISNULL(M4.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2') AND SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) NOT IN ('1', '2'))
                               		THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
 							   ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2') OR SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) IN ('1', '2'))
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              -- -- ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2') AND SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) NOT IN ('1', '2'))
                          	  	 THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2') OR SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) IN ('1', '2'))
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0) -
                               ----     CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND ( SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2') AND SUBSTRING(ISNULL(M2.REF_CODE3, ''), 1, 1) NOT IN ('1', '2'))
 								THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
 							  ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))

                          END                                                                                           AS BAD_STOCK_AMT


                         , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                   		, M5.RECEIPT_DATE																				AS RECEIPT_DATE
                   FROM              BIV100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             -- 품목
                                                              AND C1.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             -- 사업장 품목
                                                              AND C2.DIV_CODE   = A.DIV_CODE
                                                              AND C2.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE  = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE= C2.CUSTOM_CODE
                          LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             -- 창고
                                                              AND D1.TYPE_LEVEL = A.DIV_CODE
                                                              AND D1.TREE_CODE  = A.WH_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M4 WITH (NOLOCK) ON M4.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M4.MAIN_CODE   = 'B069'
                                                              AND M4.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M4.REF_CODE2   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE  = C2.COMP_CODE
                                                              AND M2.MAIN_CODE  = 'B020'                                                  -- 계정구분
                                                              AND M2.SUB_CODE   = C2.ITEM_ACCOUNT
                          LEFT  JOIN (SELECT COMP_CODE, DIV_CODE, ITEM_CODE, MAX(ISNULL(RECEIPT_DATE, '')) AS RECEIPT_DATE
										FROM QMS100T WITH (NOLOCK) 
										GROUP BY COMP_CODE, DIV_CODE, ITEM_CODE) M5 ON M5.COMP_CODE  = A.COMP_CODE
																				   AND M5.DIV_CODE   = A.DIV_CODE           -- 최종점수일
																				   AND M5.ITEM_CODE  = A.ITEM_CODE
                   WHERE  A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                   AND A.WH_CODE = #{WH_CODE}							     

				  <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT_LIST)">
					   AND C2.ITEM_ACCOUNT IN  (${ITEM_ACCOUNT_LIST})					 -- 계정
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
                   AND  A.ITEM_CODE   LIKE #{ITEM_CODE} + '%'         -- 품목
                  </if>
                  <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
                   AND  (
                         (C1.ITEM_NAME  LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '0')
                   OR    (C1.ITEM_NAME1 LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '1')
                   OR    (C1.ITEM_NAME2 LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '2')
                         ) 
                 </if>
                   UNION ALL  -- 외주처 현재고
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , ''                                                                                            AS WH_CODE
                        , ''                                                                                            AS WH_NAME

        -- 입고+(1), 출고-(2), 반품+(3)
                        , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS BAD_STOCK_AMT
                        , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                        , ''																							AS RECEIPT_DATE
                   FROM              BIZ100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE                                            -- 품목
                                                              AND C1.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE                                            -- 사업장 품목
                                                              AND C2.DIV_CODE    = A.DIV_CODE
                                                              AND C2.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE   = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE = C2.CUSTOM_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                            -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                    -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE   = C2.COMP_CODE
                                                              AND M2.MAIN_CODE   = 'B020'                                                 -- 계정구분
                                                              AND M2.SUB_CODE    = C2.ITEM_ACCOUNT
                   WHERE  @SUBCON_FLAG     = '2'
                   AND    A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                   <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT_LIST)">
					   AND C2.ITEM_ACCOUNT IN (${ITEM_ACCOUNT_LIST})					 -- 계정
					</if>
				   <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
                   AND  A.ITEM_CODE   LIKE #{ITEM_CODE} + '%'        -- 품목
                  </if>
                  <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
                   AND  (
                         (C1.ITEM_NAME  LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '0')
                   OR    (C1.ITEM_NAME1 LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '1')
                   OR    (C1.ITEM_NAME2 LIKE '%' + #{ITEM_NAME} + '%' AND @RefItem      = '2')
                        ) 
                  </if>
                   ) A
             WHERE 1=1
                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.LOCATION
                          , A.ITEM_ACCOUNT, A.ITEM_ACCOUNT_NAME, A.WH_CODE, A.WH_NAME
                          , A.ITEM_CODE, A.ITEM_NAME, A.SPEC, A.STOCK_UNIT, A.CUSTOM_CODE, A.CUSTOM_NAME, A.RECEIPT_DATE
                   ORDER BY ITEM_ACCOUNT, A.ITEM_CODE

            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END
	</select>
	<select id="s_biv302skrv_mitServiceImpl.selectDivCode" parameterType="Map" resultType="comboItem">
		SELECT  REF_CODE1  as 'value'
		       ,REF_CODE2  as 'text'
		       ,REF_CODE1 + REF_CODE2  as search
		       ,SUB_CODE   AS 'option'
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'B267'
		   AND SUB_CODE != '$'
		   AND USE_YN   = 'Y'
		  ORDER BY SORT_SEQ, SUB_CODE
	</select>
	<select id="s_biv302skrv_mitServiceImpl.selectWhCode" parameterType="Map" resultType="comboItem">
		SELECT  REF_CODE3  as 'value'
		       ,REF_CODE4  as 'text'
		       ,REF_CODE3 + REF_CODE4  as search
		       ,REF_CODE1   AS 'option'
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'B267'
		   AND SUB_CODE != '$'
		   AND USE_YN   = 'Y'
		  ORDER BY SORT_SEQ, SUB_CODE
	</select>
</mapper>