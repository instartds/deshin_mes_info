<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_pmr100ukrv_mitServiceImpl">

<select id="s_pmr100ukrv_mitServiceImpl.selectWhCode" parameterType="Map" resultType="rMap">
	SELECT 
		REF_CODE1 AS GOOD_WH_CODE
		,REF_CODE2 AS GOOD_WH_CELL_CODE
		,REF_CODE3 AS GOOD_PRSN
		,REF_CODE4 AS BAD_WH_CODE
		,REF_CODE5 AS BAD_WH_CELL_CODE
		,REF_CODE6 AS BAD_PRSN
	  FROM BSA100T
	 WHERE COMP_CODE = #{S_COMP_CODE}
	   AND MAIN_CODE = 'Z022'
	   AND SUB_CODE = #{DIV_CODE}
	
</select>
	
	
<select id="s_pmr100ukrv_mitServiceImpl.selectBadcodes" parameterType="String" resultType="rMap">

  /* s_pmr100ukrv_mitServiceImpl.selectBadcodes */
 SELECT SUB_CODE
		  ,CODE_NAME
	FROM BSA100T WITH (NOLOCK)
	WHERE COMP_CODE =  #{S_COMP_CODE}
	AND MAIN_CODE = 'P003'
	AND SUB_CODE != '$'
</select>	
<select id="s_pmr100ukrv_mitServiceImpl.checkWorkEnd" parameterType="Map" resultType="rMap">
	SELECT ISNULL(WORK_END_YN,'N') AS WORK_END_YN
	  FROM PMP100T WITH(NOLOCK)
	 WHERE COMP_CODE = #{S_COMP_CODE}
	   AND DIV_CODE = #{DIV_CODE}
	   AND WKORD_NUM = #{WKORD_NUM}
	   AND PROG_WORK_CODE = #{PROG_WORK_CODE}
</select>
	<select id="s_pmr100ukrv_mitServiceImpl.selectList" parameterType="Map" resultType="rMap">
		SELECT
		       A.WKORD_NUM
		     , A.WORK_SHOP_CODE
		     , A.ITEM_CODE
		     , R1.ITEM_NAME
		     , R1.SPEC
		     , UNILITE.FNGETUSERDATECOMP(A.COMP_CODE, A.PRODT_END_DATE) AS PRODT_END_DATE
		     , A.PRODT_PRSN
		     , A.LINE_SEQ AS SEQ
		     , A.DIV_CODE
		     , A.PROG_WORK_CODE
		     , C1.PROG_WORK_NAME
		     , C1.PROG_UNIT
		     , UNILITE.FNFORMAT(A.COMP_CODE, A.WKORD_Q, 'P_FSET_QS') AS PROG_WKORD_Q
		     , UNILITE.FNFORMAT(A.COMP_CODE, A.WORK_Q, 'P_FSET_QS') AS SUM_Q
		     , UNILITE.FNGETUSERDATECOMP(A.COMP_CODE, CONVERT(NVARCHAR(10), GETDATE(), 112)) AS PRODT_DATE
		     , 0 AS PASS_Q
		     , 0 AS GOOD_WORK_Q
		     , 0 AS BAD_WORK_Q
		     , '1' AS DAY_NIGHT
		     , ISNULL(R2.MAN_HOUR,0) AS MAN_HOUR
		     , UNILITE.FNFORMAT(A.COMP_CODE, A.WKORD_Q - ISNULL(M2.WORK_Q,0), 'P_FSET_QS') AS JAN_Q
		     , 0 AS WORK_Q
		     , A.WKORD_NUM
		     , A.LINE_END_YN
		     , A.WK_PLAN_NUM
		     --, A.LOT_NO
		     ,  CASE WHEN A.DIV_CODE='02' THEN 'XXX' + M1.REF_CODE2 ELSE A.LOT_NO END AS LOT_NO		/* 02 사업장 LOT NO는 장비 시리얼번호로 강제 지정 */
		     , '' AS PRODT_NUM
		     --, '' AS CONTROL_STATUS
		     , ISNULL(A.WKORD_STATUS, '2') AS CONTROL_STATUS
		     , '' AS FR_SERIAL_NO
		     , '' AS TO_SERIAL_NO
		     , '' AS REMARK
		     , '' AS UPDATE_DB_USER
		     , '' AS UPDATE_DB_TIME
		     , A.COMP_CODE
		     , A.MOLD_CODE
		     , A.CAVIT_BASE_Q
		     , A.EQUIP_CODE
		     , C2.EQU_NAME AS EQUIP_NAME
		     , A.PRODT_PRSN
		     --, A.EXPIRATION_DATE
			 , CASE WHEN R2.ITEM_ACCOUNT='10' AND ISNULL(R1.CIR_PERIOD_YN,'N')='Y' THEN CONVERT(VARCHAR(8), DATEADD(DAY, -1, DATEADD(MONTH, (CASE WHEN R1.EXPIRATION_DAY=0 THEN 36 ELSE R1.EXPIRATION_DAY END), A.PRODT_END_DATE)), 112) 
					ELSE A.EXPIRATION_DATE 
			   END AS EXPIRATION_DATE			 
		     , '1' AS LUNCH_CHK
		     ,'' AS FR_TIME
		     ,'' AS TO_TIME
		     ,0 AS BOX_TRNS_RATE
		     , R2.RESULT_YN
		     --20200317 추가: 완성율, 완성일(기본값 오늘)
		     , ISNULL(B1.WORK_PROGRESS, 0) AS WORK_PROGRESS
		     , GETDATE()                   AS DUE_DATE
		     , B1.MAN_HOUR                 AS MAN_HOUR_150
		  FROM       PMP100T A  WITH (NOLOCK)
		  --20200317 추가: 완성율 가져오기 위해 추가
		  LEFT  JOIN PMP150T B1 WITH (NOLOCK) ON B1.COMP_CODE      = A.COMP_CODE
		                                     AND B1.DIV_CODE       = A.DIV_CODE
		                                     AND B1.WORK_SHOP_CODE = A.WORK_SHOP_CODE
		                                     AND B1.WKORD_NUM      = A.WKORD_NUM
		                                     AND B1.WORK_MONTH     = ( SELECT MAX(WORK_MONTH)
		                                                                 FROM PMP150T WITH(NOLOCK)
		                                                                WHERE COMP_CODE      = A.COMP_CODE
		                                                                  AND DIV_CODE       = A.DIV_CODE
		                                                                  AND WORK_SHOP_CODE = A.WORK_SHOP_CODE
		                                                                  AND WKORD_NUM      = A.WKORD_NUM
		                                                                GROUP BY COMP_CODE, DIV_CODE, WORK_SHOP_CODE, WKORD_NUM)
		LEFT JOIN PBS200T C1 WITH (NOLOCK) ON C1.COMP_CODE = A.COMP_CODE
		                                  AND C1.DIV_CODE = A.DIV_CODE
		                                  AND C1.WORK_SHOP_CODE = A.WORK_SHOP_CODE
		                                  AND C1.PROG_WORK_CODE = A.PROG_WORK_CODE
		LEFT JOIN EQU200T C2 WITH (NOLOCK) ON C2.COMP_CODE = A.COMP_CODE
										  AND C2.DIV_CODE = A.DIV_CODE
										  AND C2.EQU_CODE = A.EQUIP_CODE
		LEFT JOIN BPR100T R1 WITH (NOLOCK) ON R1.COMP_CODE = A.COMP_CODE
										  AND R1.ITEM_CODE = A.ITEM_CODE
		LEFT JOIN BPR200T R2 WITH (NOLOCK) ON R2.COMP_CODE = A.COMP_CODE
		                                  AND R2.DIV_CODE = A.DIV_CODE
		                                  AND R2.ITEM_CODE = A.ITEM_CODE
		LEFT JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE=A.COMP_CODE AND M1.MAIN_CODE='Z021' AND SUB_CODE=R1.ITEM_LEVEL2 AND R1.ITEM_LEVEL1='500'
		LEFT JOIN (
					SELECT COMP_CODE, DIV_CODE, WKORD_NUM, SUM(WORK_Q) WORK_Q, SUM(GOOD_WORK_Q) GOOD_WORK_Q, SUM(BAD_WORK_Q) BAD_WORK_Q
					FROM PMR100T A WITH (NOLOCK)
					WHERE COMP_CODE = #{S_COMP_CODE}
					  AND DIV_CODE = #{DIV_CODE}
					GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM
		) M2 ON A.COMP_CODE=M2.COMP_CODE AND A.DIV_CODE=M2.DIV_CODE AND A.WKORD_NUM=M2.WKORD_NUM 
		    WHERE A.COMP_CODE = #{S_COMP_CODE}
		      AND A.DIV_CODE = #{DIV_CODE}
		      AND A.LINE_END_YN = 'Y'
			  AND ISNULL(R1.STOCK_CARE_YN, '') = 'Y'
		<if test="@foren.Ognl@isNotEmpty(PRODT_END_DATE_FR)">
		      AND A.PRODT_END_DATE &gt;= #{PRODT_END_DATE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PRODT_END_DATE_TO)">
		      AND A.PRODT_END_DATE &lt;= #{PRODT_END_DATE_TO}
		</if>
		<if test="@foren.Ognl@isNotEmpty(WKORD_NUM)">
		      AND A.WKORD_NUM = #{WKORD_NUM}
		</if>
		<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		      AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		</if>
		<if test="CONTROL_STATUS != &quot;1&quot;">
		    <if test="@foren.Ognl@isNotEmpty(CONTROL_STATUS)">
			  AND ISNULL(A.WKORD_STATUS, '2') = (CASE WHEN #{CONTROL_STATUS} = '3' THEN '2' ELSE #{CONTROL_STATUS} END)
		    </if>
		</if>
		    ORDER BY RIGHT('00000' + A.LINE_SEQ, 5)
	</select>

<select id="s_pmr100ukrv_mitServiceImpl.selectListTab2" parameterType="Map" resultType="rMap">
	 /* s_pmr100ukrv_mitServiceImpl.selectListTab2 특이사항 */
     SELECT
           A.DIV_CODE
         , A.WORK_SHOP_CODE
         , A.WKORD_NUM
         , A.PROG_WORK_CODE
         , B.PROG_WORK_NAME
         , uniLITE.fnGetUserDateComp(A.comp_code, A.prodt_date) AS PRODT_DATE
         , A.CTL_CD1
         , A.TROUBLE_TIME
         , A.TROUBLE
         , A.TROUBLE_CS
         , A.ANSWER
         , A.SEQ
         , A.UPDATE_DB_USER
         , A.UPDATE_DB_TIME
         , A.COMP_CODE
         , CASE WHEN ISNULL(FR_TIME,'') = '' THEN '' ELSE CAST('2008-01-01 ' + FR_TIME AS smalldatetime)  END  AS FR_TIME --기본값 세팅시 2008/1/1로 해야 셀 클릭시 변경된 날짜로 인식을 안 함
         , CASE WHEN ISNULL(TO_TIME,'') = '' THEN '' ELSE CAST('2008-01-01 ' + TO_TIME AS smalldatetime) END  AS TO_TIME
     FROM             PMR400T A WITH (NOLOCK)
           INNER JOIN PBS200T B WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
                                             AND B.DIV_CODE       = A.DIV_CODE
                                             AND B.WORK_SHOP_CODE = A.WORK_SHOP_CODE
                                             AND B.PROG_WORK_CODE = A.PROG_WORK_CODE
           INNER JOIN BSA100T C WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
                                             AND C.MAIN_CODE      = 'P002'
                                             AND C.sub_code       = A.CTL_CD1
     WHERE A.COMP_CODE      = #{S_COMP_CODE}
     AND   A.DIV_CODE       = #{DIV_CODE}
     AND   A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
     AND   A.WKORD_NUM      = #{WKORD_NUM}
     ORDER BY A.PRODT_DATE, A.PROG_WORK_CODE, A.CTL_CD1
	</select>
<select id="s_pmr100ukrv_mitServiceImpl.selectDetailList10" parameterType="Map" resultType="rMap">		<!--자재불량내역 조회 -->
		/* s_pmr100ukrv_mitServiceImpl.selectDetailList10 */

		DECLARE         @CompCode          NVARCHAR(08)
                          , @DivCode           NVARCHAR(08)
                          , @WkordNum          NVARCHAR(20)
        				  , @UserId            NVARCHAR(100) /* 사용자ID */
                  		  , @RefItem           NVARCHAR(01) /* 명칭 참조 유형  */


            SET @CompCode  = #{S_COMP_CODE}
            SET @DivCode  	= #{DIV_CODE}
            SET @WkordNum = #{WKORD_NUM}
            SET @UserId   	= #{S_USER_ID}

            SELECT TOP 1 @RefItem = REF_ITEM
            FROM   BSA300T WITH (NOLOCK)
            WHERE  USER_ID = @UserId

            SET @RefItem = ISNULL(@RefItem, '')

			SELECT A.COMP_CODE
					  ,A.DIV_CODE
					  ,A.ITEM_CODE
					  ,CASE WHEN @RefItem = '0' THEN B.ITEM_NAME
				                             WHEN @RefItem = '1' THEN B.ITEM_NAME1
				                             WHEN @RefItem = '2' THEN B.ITEM_NAME2
				               ELSE B.ITEM_NAME
				        END                         AS ITEM_NAME
			       	  , B.SPEC
					  , B.STOCK_UNIT
					  , A.WKORD_NUM
					  , A1.WORK_SHOP_CODE
					  , B1.CUSTOM_CODE
					  , B2.CUSTOM_NAME
					  <foreach collection="badQtyArray" item="item" separator="" close="" open="">
			 		  ,0 AS BAD_${item}
					  </foreach>
					  ,'' AS PRODT_NUM
					  ,A.SEQ
					  ,'N' AS SAVE_FLAG
			FROM PMP200T A
			LEFT JOIN PMP100T A1 ON A.COMP_CODE    = A1.COMP_CODE
										  AND A.DIV_CODE	    = A1.DIV_CODE
										  AND A.WKORD_NUM	= A1.WKORD_NUM
										  AND A1.LINE_END_YN = 'Y'
			INNER JOIN BPR100T B ON A.COMP_CODE		= B.COMP_CODE
										AND A.ITEM_CODE		= B.ITEM_CODE
			INNER JOIN BPR200T B1 ON A.COMP_CODE	= B1.COMP_CODE
								  		AND A.DIV_CODE	= B1.DIV_CODE
								  		AND A.ITEM_CODE	= B1.ITEM_CODE
			LEFT JOIN BCM100T B2 ON B1.COMP_CODE = B2.COMP_CODE
											AND B1.CUSTOM_CODE = B2.CUSTOM_CODE
			LEFT JOIN BSA100T C  ON A.COMP_CODE = C.COMP_CODE
										 AND C.MAIN_CODE = 'B020'
										 AND C.SUB_CODE	 != '$'
										 AND C.SUB_CODE  = B1.ITEM_ACCOUNT
			WHERE A.COMP_CODE = @CompCode
			  	AND A.DIV_CODE = @DivCode
			  	AND A.WKORD_NUM = @WkordNum
			  	AND ((CASE WHEN ISNULL(C.REF_CODE3,'') = '' THEN B1.ITEM_ACCOUNT 
					 ELSE C.REF_CODE3 
					END) IN ('40','50'))
			 ORDER BY A.COMP_CODE, A.DIV_CODE, A.SEQ, A.ITEM_CODE

    </select>
    
  
    
    <select id="s_pmr100ukrv_mitServiceImpl.selectDetailList5" parameterType="Map" resultType="rMap">		<!-- 불량내역등록 조회 -->
SELECT 
#{WKORD_NUM} AS WKORD_NUM, 
A.PROG_WORK_CODE, 
A.PROG_WORK_NAME, 
ISNULL(C.PRODT_DATE, CONVERT(VARCHAR(8), GETDATE(), 112)) AS PRODT_DATE, 
B.SUB_CODE AS BAD_CODE, 
B.CODE_NAME AS BAD_NAME, 
C.BAD_Q, 
C.REMARK,
A.COMP_CODE,
A.DIV_CODE,
A.WORK_SHOP_CODE,
ISNULL(C.ITEM_CODE, D.ITEM_CODE) AS ITEM_CODE

FROM PBS200T A
	 INNER JOIN BSA100T B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.REF_CODE1 AND A.PROG_WORK_CODE=B.REF_CODE2 AND B.MAIN_CODE='P003'
	 LEFT  JOIN PMR300T C ON A.COMP_CODE=C.COMP_CODE AND A.DIV_CODE=C.DIV_CODE AND A.PROG_WORK_CODE=C.PROG_WORK_CODE AND B.SUB_CODE=C.BAD_CODE AND C.WKORD_NUM = #{WKORD_NUM}
	 LEFT  JOIN PMP100T D ON A.COMP_CODE=D.COMP_CODE AND A.DIV_CODE=D.DIV_CODE AND A.PROG_WORK_CODE=D.PROG_WORK_CODE AND A.WORK_SHOP_CODE=D.WORK_SHOP_CODE AND D.WKORD_NUM = #{WKORD_NUM} 
WHERE A.COMP_CODE	 = #{S_COMP_CODE}
AND A.DIV_CODE		 = #{DIV_CODE}
AND A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
ORDER BY A.PROG_WORK_CODE, B.SORT_SEQ
	 </select>
  
    
<select id="s_pmr100ukrv_mitServiceImpl.selectDetailList4" parameterType="Map" resultType="rMap">
	/* s_pmr100ukrv_mitServiceImpl.selectDetailList4 생산현황 */

        DECLARE    @COMP_CODE             NVARCHAR(08)        -- (필수 4.) 법인코드
                 , @DIV_CODE              NVARCHAR(08)        -- (필수 1.) 사업장코드
                 , @WORK_SHOP_CODE        NVARCHAR(08)        -- (필수 2.) 작업장코드
                 , @PROG_WORK_CODE        NVARCHAR(08)        -- (필수 2.) 공정코드
                 , @WKORD_NUM             NVARCHAR(20)        -- (선택 3.) 작업지시 번호

        SET @COMP_CODE      = #{S_COMP_CODE}
        SET @DIV_CODE       = #{DIV_CODE}
        SET @WORK_SHOP_CODE = #{WORK_SHOP_CODE}
        SET @PROG_WORK_CODE = #{PROG_WORK_CODE}
        SET @WKORD_NUM      = #{WKORD_NUM}

            SELECT
                   A.DIV_CODE
                 , A.PRODT_NUM
                 , uniLITE.fnGetUserDateComp(A.comp_code, A.prodt_date) AS PRODT_DATE
                 , uniLITE.fnFormat(A.comp_code, ISNULL(A.work_q, 0),      'P_FSET_QS') AS WORK_Q
                 , uniLITE.fnFormat(A.comp_code, ISNULL(A.good_work_q, 0), 'P_FSET_QS') AS GOOD_WORK_Q
                 , uniLITE.fnFormat(A.comp_code, ISNULL(A.bad_work_q, 0),  'P_FSET_QS') AS BAD_WORK_Q
                 , A.DAY_NIGHT
                 , A.MAN_HOUR
                 , CAST('2008-01-01 ' + A.FR_TIME AS smalldatetime)                   AS FR_TIME
                 , CAST('2008-01-01 ' + A.TO_TIME AS smalldatetime)                   AS TO_TIME
                 , uniLITE.fnFormat(A.comp_code, ISNULL(A.prog_wkord_q, 0),'P_FSET_QS') AS PROG_WKORD_Q
                 , uniLITE.fnFormat(A.comp_code, ISNULL(B.in_stock_q, 0),  'P_FSET_QS') AS IN_STOCK_Q
                 , uniLITE.fnFormat(A.comp_code, ISNULL(A.pass_q, 0),      'P_FSET_QS') AS PASS_Q
                 , A.PROG_WORK_CODE, A.WKORD_NUM, A.WK_PLAN_NUM, A.LINE_END_YN
                 , CASE WHEN A.line_end_yn = 'Y' THEN ISNULL(B.lot_no, '')       ELSE '' END AS LOT_NO
                 , CASE WHEN A.line_end_yn = 'Y' THEN ISNULL(B.fr_serial_no, '') ELSE '' END AS FR_SERIAL_NO
                 , CASE WHEN A.line_end_yn = 'Y' THEN ISNULL(B.to_serial_no, '') ELSE '' END AS TO_SERIAL_NO
                 , A.REMARK
                 , '' AS UPDATE_DB_USER
                 , '' AS UPDATE_DB_TIME
                 , A.COMP_CODE
                 , ISNULL(BOX_TRNS_RATE,1) AS BOX_TRNS_RATE
                 , BOX_Q
                 , SAVING_Q
                 , MAN_CNT
                 , CASE WHEN HAZARD_CHECK = 'Y' THEN 1 ELSE 0 END AS HAZARD_CHECK
                 , CASE WHEN MICROBE_CHECK = 'Y' THEN 1 ELSE 0 END AS MICROBE_CHECK
                 , A.PIECE
                 , A.EXPIRATION_DATE
                 , A.YIELD
                 , A.LOSS_Q
                 , A.BOX_TRNS_RATE
                 , A.ETC_Q
                 , A.PRODT_PRSN
				 , A.EQUIP_CODE
				 , C.EQU_NAME AS EQUIP_NAME

            FROM              PMR100T  A  WITH (NOLOCK)
                   LEFT  JOIN PMR200T  B  WITH (NOLOCK) ON B.comp_code  = A.comp_code
                                                       AND B.div_code   = A.div_code
                                                       AND B.wkord_num  = A.wkord_num
                                                       AND B.prodt_num  = A.prodt_num
                                                       AND B.prodt_date = A.prodt_date
				    LEFT JOIN EQU200T C WITH (NOLOCK)  ON C.COMP_CODE	= A.COMP_CODE
													  AND C.DIV_CODE	= A.DIV_CODE
													  AND C.EQU_CODE	= A.EQUIP_CODE
            WHERE  A.comp_code      = @COMP_CODE
            AND    A.div_code       = @DIV_CODE
            AND    A.prog_work_code = @PROG_WORK_CODE
            AND    A.wkord_num      = @WKORD_NUM
            ORDER BY A.prodt_date, A.prodt_num
    
	</select>








<update id="s_pmr100ukrv_mitServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
    {call SP_GetAutoNumComp (
        #{COMP_CODE,    mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{DIV_CODE,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{TABLE_ID,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{PREFIX,       mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{BASIS_DATE,   mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{AUTO_TYPE,    mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
        #{KEY_NUMBER,   mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
    )}
</update>
<update id="s_pmr100ukrv_mitServiceImpl.updateMoldPlus" parameterType="Map">
        /* s_pmr100ukrv_mitServiceImpl.updateMold */
        UPDATE EQU200T
           SET WORK_Q     = WORK_Q + CEILING(${PASS_Q} / ${CAVIT_BASE_Q})

             , UPDATE_DB_USER = #{S_USER_ID}
             , UPDATE_DB_TIME = GETDATE()
         WHERE COMP_CODE      = #{S_COMP_CODE}
           AND DIV_CODE       = #{DIV_CODE}
           AND EQU_CODE      = #{MOLD_CODE}
    </update>
	<update id="s_pmr100ukrv_mitServiceImpl.updateMoldMinus" parameterType="Map">
        /* s_pmr100ukrv_mitServiceImpl.updateMold */
        UPDATE EQU200T
           SET WORK_Q     = (CASE WHEN WORK_Q - CEILING(${PASS_Q} / ${CAVIT_BASE_Q}) &lt; 0 THEN 0
            					 ELSE WORK_Q - CEILING(${PASS_Q} / ${CAVIT_BASE_Q})
            				END)
             , UPDATE_DB_USER = #{S_USER_ID}
             , UPDATE_DB_TIME = GETDATE()
         WHERE COMP_CODE      = #{S_COMP_CODE}
           AND DIV_CODE       = #{DIV_CODE}
           AND EQU_CODE      = #{MOLD_CODE}
    </update>    
	<insert id="s_pmr100ukrv_mitServiceImpl.insertDetail" parameterType="Map">
	--pmr100ukrv.Cpmr100ukrv[fnPmr100Sav1] Query3
	INSERT INTO PMR100T
	     ( COMP_CODE
	     , DIV_CODE
	     , PRODT_NUM
	     , PRODT_DATE
	     , PROG_WORK_CODE
	     , PROG_WKORD_Q
	     , WORK_Q
	     , PASS_Q
	     , GOOD_WORK_Q
	     , BAD_WORK_Q
	     , DAY_NIGHT
	     , WKORD_NUM
	     , LINE_END_YN
	     , WK_PLAN_NUM
	     , CONTROL_STATUS
	     , MAN_HOUR
	     , REMARK
	     , PROJECT_NO
	     , PJT_CODE, LOT_NO
	     , FR_SERIAL_NO
	     , TO_SERIAL_NO
	     , INSERT_DB_USER
	     , INSERT_DB_TIME
	     , UPDATE_DB_USER
	     , UPDATE_DB_TIME
	     , FR_TIME
	     , TO_TIME
	     , EQUIP_CODE
	     , PRODT_PRSN
	     , BOX_TRNS_RATE
		 , BOX_Q
		 , SAVING_Q
		 , MAN_CNT
		 , HAZARD_CHECK
		 , MICROBE_CHECK
		 , PIECE
		 , EXPIRATION_DATE
		 , YIELD
		 , LOSS_Q
		 , ETC_Q
	     )
	VALUES
	     ( #{S_COMP_CODE}
	     , #{DIV_CODE}
	     , #{PRODT_NUM}
	     , #{PRODT_DATE}
	     , #{PROG_WORK_CODE}
	     , #{PROG_WKORD_Q}
	     , #{WORK_Q}
	     , #{GOOD_WORK_Q}
	     , #{GOOD_WORK_Q}
	     , #{BAD_WORK_Q}
	     , #{DAY_NIGHT}
	     , #{WKORD_NUM}
	     , #{LINE_END_YN}
	     , #{WK_PLAN_NUM}
	     , #{CONTROL_STATUS}
	     , #{MAN_HOUR}
	     , #{REMARK}
	     , #{PROJECT_NO}
	     , #{PJT_CODE}
	     , #{LOT_NO}
	     , #{FR_SERIAL_NO}
	     , #{TO_SERIAL_NO}
	     , #{S_USER_ID}
	     , getDate()
	     , #{S_USER_ID}
	     , getDate()
	     , (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{FR_TIME} AS smalldatetime), 108),1,8))
	     , (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{TO_TIME} AS smalldatetime), 108),1,8))
	     , #{EQUIP_CODE}
	     , #{PRODT_PRSN}
	     , #{BOX_TRNS_RATE}
		 , #{BOX_Q}
		 , #{SAVING_Q}
		 , #{MAN_CNT}
		 , CASE WHEN #{HAZARD_CHECK} = '1' THEN 'Y' ELSE 'N' END
		 , CASE WHEN #{MICROBE_CHECK}= '1' THEN 'Y' ELSE 'N' END
		 ,  #{PIECE}
		 ,  #{EXPIRATION_DATE}
		 ,  #{YIELD}
		 ,  #{LOSS_Q}
		 ,  #{ETC_Q}
	     )
	</insert>

	<update id="s_pmr100ukrv_mitServiceImpl.updateDetail" parameterType="Map">
        --pmr100ukrv.Cpmr100ukrv[fnPmr100Sav1] Query2
        UPDATE PMR100T
           SET PRODT_DATE     = #{PRODT_DATE}
             , PROG_WORK_CODE = #{PROG_WORK_CODE}
             , PROG_WKORD_Q   = #{PROG_WKORD_Q}
             , WORK_Q         = #{WORK_Q}
             , PASS_Q         = #{PASS_Q}
             , GOOD_WORK_Q    = #{GOOD_WORK_Q}
             , BAD_WORK_Q     = #{BAD_WORK_Q}
             , DAY_NIGHT      = #{DAY_NIGHT}
             , WKORD_NUM      = #{WKORD_NUM}
             , LINE_END_YN    = #{LINE_END_YN}
             , WK_PLAN_NUM    = #{WK_PLAN_NUM}
             , CONTROL_STATUS = #{CONTROL_STATUS}
             , MAN_HOUR       = #{MAN_HOUR}
             , REMARK         = #{REMARK}
             , PROJECT_NO     = #{PROJECT_NO}
             , PJT_CODE       = #{PJT_CODE}
             , LOT_NO         = #{LOT_NO}
             , MOLD_CODE      = #{MOLD_CODE}
             , EQUIP_CODE     = #{EQUIP_CODE}
             , FR_SERIAL_NO   = #{FR_SERIAL_NO}
             , TO_SERIAL_NO   = #{TO_SERIAL_NO}
             , UPDATE_DB_USER = #{S_USER_ID}
             , UPDATE_DB_TIME = GETDATE()
             , FR_TIME		  = (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{FR_TIME} AS smalldatetime), 108),1,8))
             , TO_TIME		  = (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{TO_TIME} AS smalldatetime), 108),1,8))
             , EQUIP_CODE  = #{EQUIP_CODE}
             , PRODT_PRSN  = #{PRODT_PRSN}
             , BOX_TRNS_RATE   = #{BOX_TRNS_RATE}
             , BOX_Q           		= #{BOX_Q}
             , SAVING_Q       		= #{SAVING_Q}
             , MAN_CNT        		= #{MAN_CNT}
             , HAZARD_CHECK    = CASE WHEN #{HAZARD_CHECK} = '1' THEN 'Y' ELSE 'N' END
             , MICROBE_CHECK   = CASE WHEN #{MICROBE_CHECK}= '1' THEN 'Y' ELSE 'N' END
             , PIECE				    = #{PIECE}
             , EXPIRATION_DATE	= #{EXPIRATION_DATE}
             , YIELD				    = #{YIELD}
             , LOSS_Q				= #{LOSS_Q}
         WHERE COMP_CODE     = #{S_COMP_CODE}
           AND DIV_CODE          = #{DIV_CODE}
           AND PRODT_NUM       = #{PRODT_NUM}
    </update>

	<delete id="s_pmr100ukrv_mitServiceImpl.deleteDetail" parameterType="Map">
		--pmr100ukrv.Cpmr100ukrv[fnPmr100Sav1] Query1
        DELETE FROM PMR100T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND DIV_CODE  = #{DIV_CODE}
           AND PRODT_NUM = #{PRODT_NUM}
	</delete>


<update id="s_pmr100ukrv_mitServiceImpl.spReceiving" parameterType="Map" statementType="CALLABLE">
        {call SP_PRODT_ProductionResult (
            #{COMP_CODE          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{DIV_CODE           ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{PRODT_NUM          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{WKORD_NUM          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_WH_CODE       ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_WH_CELL_CODE  ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_PRSN          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_Q             ,     mode=IN,    jdbcType=NUMERIC,   javaType=double},
            #{BAD_WH_CODE        ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_WH_CELL_CODE   ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_PRSN           ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_Q              ,     mode=IN,    jdbcType=NUMERIC,   javaType=double},
            #{CONTROL_STATUS     ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{PRODT_TYPE         ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{STATUS             ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{USER_ID            ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{ERROR_DESC         ,     mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
        )}
    </update>
    
    
    <insert id="s_pmr100ukrv_mitServiceImpl.insertTab2" parameterType="Map">		/* 특이사항등록 추가 */
    /* s_pmr100ukrv_mitServiceImpl.insertTab2 */
	INSERT INTO PMR400T
	     ( DIV_CODE
		 , WORK_SHOP_CODE
		 , WKORD_NUM
		 , PROG_WORK_CODE
		 , PRODT_DATE
		 , CTL_CD1
		 , TROUBLE_TIME
		 , TROUBLE
		 , TROUBLE_CS
		 , ANSWER
		 , SEQ
		 , UPDATE_DB_USER
		 , UPDATE_DB_TIME
		 , COMP_CODE
		 , FR_TIME
		 , TO_TIME)
	VALUES
	     ( #{DIV_CODE}
		 , #{WORK_SHOP_CODE}
		 , #{WKORD_NUM}
		 , #{PROG_WORK_CODE}
		 , #{PRODT_DATE}
		 , #{CTL_CD1}
		 , #{TROUBLE_TIME}
		 , #{TROUBLE}
		 , #{TROUBLE_CS}
		 , #{ANSWER}
		 , #{SEQ}
		 , #{S_USER_ID}
		 , getDate()
		 , #{S_COMP_CODE}
		 , (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{FR_TIME} AS smalldatetime), 108),1,8))
	     , (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{TO_TIME} AS smalldatetime), 108),1,8)))
	</insert>

	<update id="s_pmr100ukrv_mitServiceImpl.updateTab2" parameterType="Map">        /* 특이사항등록 수정 */
         /* s_pmr100ukrv_mitServiceImpl.updateTab2 */
         UPDATE PMR400T
            SET WORK_SHOP_CODE = #{WORK_SHOP_CODE}
              , CTL_CD1        			= #{CTL_CD1}
              , TROUBLE_TIME   		= #{TROUBLE_TIME}
              , TROUBLE        			= #{TROUBLE}
              , TROUBLE_CS     		= #{TROUBLE_CS}
              , ANSWER         		= #{ANSWER}
              , UPDATE_DB_USER 	= #{S_USER_ID}
              , UPDATE_DB_TIME 	= GETDATE()
              , FR_TIME 				= (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{FR_TIME} AS smalldatetime), 108),1,8))
              , TO_TIME 				= (SELECT SUBSTRING(CONVERT(VARCHAR(8), CAST(#{TO_TIME} AS smalldatetime), 108),1,8))

          WHERE DIV_CODE       = #{DIV_CODE}
            AND WKORD_NUM      = #{WKORD_NUM}
            AND WORK_SHOP_CODE = #{WORK_SHOP_CODE}
            AND PROG_WORK_CODE = #{PROG_WORK_CODE}
            AND PRODT_DATE     = #{PRODT_DATE}
            AND SEQ            = #{SEQ}
            AND COMP_CODE      = #{S_COMP_CODE}
    </update>

	<delete id="s_pmr100ukrv_mitServiceImpl.deleteTab2" parameterType="Map">        /* 특이사항등록 삭제 */
        /* s_pmr100ukrv_mitServiceImpl.deleteTab2 */
        DELETE FROM PMR400T
         WHERE DIV_CODE       = #{DIV_CODE}
           AND WKORD_NUM      = #{WKORD_NUM}
           AND WORK_SHOP_CODE = #{WORK_SHOP_CODE}
           AND PROG_WORK_CODE = #{PROG_WORK_CODE}
           AND PRODT_DATE     = #{PRODT_DATE}
           AND SEQ            = #{SEQ}
           AND COMP_CODE      = #{S_COMP_CODE}
	</delete>
    
	<insert id="s_pmr100ukrv_mitServiceImpl.insertDetail5" parameterType="Map">		/* 불량내역등록 추가 */
	INSERT INTO PMR300T
	     ( DIV_CODE
		 , WORK_SHOP_CODE
		 , WKORD_NUM
		 , PROG_WORK_CODE
		 , PRODT_DATE
		 , ITEM_CODE
		 , BAD_CODE
		 , BAD_Q
		 , REMARK
		 , UPDATE_DB_USER
		 , UPDATE_DB_TIME
		 , COMP_CODE )
	VALUES
	     ( #{DIV_CODE}
		 , #{WORK_SHOP_CODE}
		 , #{WKORD_NUM}
		 , #{PROG_WORK_CODE}
		 , #{PRODT_DATE}
		 , #{ITEM_CODE}
		 , #{BAD_CODE}
		 , #{BAD_Q}
		 , #{REMARK}
		 , #{S_USER_ID}
		 , getDate()
		 , #{S_COMP_CODE} )
	</insert>

	<update id="s_pmr100ukrv_mitServiceImpl.updateDetail5" parameterType="Map">        /* 불량내역등록 수정 */

--해당 작업지시의 작업장에 해당되는 모든 불량코드 표시하고 불량유형, 수량만 입력하여 pmr300t에 있으면 UPDATE 없으면 INSERT 하도록 변경함
IF EXISTS (
	SELECT TOP 1 COMP_CODE
	  FROM PMR300T  
	 WHERE DIV_CODE       = #{DIV_CODE}
	    AND WKORD_NUM      = #{WKORD_NUM}
	    AND PROG_WORK_CODE = #{PROG_WORK_CODE}
	    AND PRODT_DATE     = #{PRODT_DATE}
	    AND BAD_CODE       = #{BAD_CODE}
	    AND COMP_CODE      = #{S_COMP_CODE}
)
	BEGIN
         
         UPDATE PMR300T
            SET WORK_SHOP_CODE = #{WORK_SHOP_CODE}
              , ITEM_CODE      = #{ITEM_CODE}
              , BAD_Q          = #{BAD_Q}
              , REMARK         = #{REMARK}
              , UPDATE_DB_USER = #{S_USER_ID}
              , UPDATE_DB_TIME = GETDATE()

          WHERE DIV_CODE       = #{DIV_CODE}
            AND WKORD_NUM      = #{WKORD_NUM}
            AND PROG_WORK_CODE = #{PROG_WORK_CODE}
            AND PRODT_DATE     = #{PRODT_DATE}
            AND BAD_CODE       = #{BAD_CODE}
            AND COMP_CODE      = #{S_COMP_CODE}
	END            
ELSE
	BEGIN            
    INSERT INTO PMR300T
	     ( DIV_CODE
		 , WORK_SHOP_CODE
		 , WKORD_NUM
		 , PROG_WORK_CODE
		 , PRODT_DATE
		 , ITEM_CODE
		 , BAD_CODE
		 , BAD_Q
		 , REMARK
		 , UPDATE_DB_USER
		 , UPDATE_DB_TIME
		 , COMP_CODE )
	VALUES
	     ( #{DIV_CODE}
		 , #{WORK_SHOP_CODE}
		 , #{WKORD_NUM}
		 , #{PROG_WORK_CODE}
		 , #{PRODT_DATE}
		 , #{ITEM_CODE}
		 , #{BAD_CODE}
		 , #{BAD_Q}
		 , #{REMARK}
		 , #{S_USER_ID}
		 , getDate()
		 , #{S_COMP_CODE} )
	END
            
	</update>

	<delete id="s_pmr100ukrv_mitServiceImpl.deleteDetail5" parameterType="Map">        /* 불량내역등록 삭제 */
        --pmr100ukrv.Cpmr100ukrv[fnPmr100Sav2] Query1
        DELETE FROM PMR300T
         WHERE DIV_CODE       = #{DIV_CODE}
           AND WKORD_NUM      = #{WKORD_NUM}
           AND PROG_WORK_CODE = #{PROG_WORK_CODE}
           AND PRODT_DATE     = #{PRODT_DATE}
           AND BAD_CODE       = #{BAD_CODE}
           AND COMP_CODE      = #{S_COMP_CODE}
	</delete>





<!-- 진척율 저장: 20200317 추가 -->
	<update id="s_pmr100ukrv_mitServiceImpl.updatePmp150" parameterType="Map">
		/* s_pmr100ukrv_mitServiceImpl.updatePmp150 */
		DECLARE @WORK_PROGRESS  NUMERIC(30, 6)

		    SET @WORK_PROGRESS = #{WORK_PROGRESS}
		    SET @WORK_PROGRESS = ISNULL(@WORK_PROGRESS, 0)

		MERGE INTO PMP150T  A
		USING ( SELECT #{S_COMP_CODE}               AS COMP_CODE
		             , #{DIV_CODE}                  AS DIV_CODE
		             , #{WORK_SHOP_CODE}            AS WORK_SHOP_CODE
		             , #{WKORD_NUM}                 AS WKORD_NUM
		             , SUBSTRING(#{DUE_DATE}, 1, 6) AS WORK_MONTH
		      )                                              B
		                                                            ON A.COMP_CODE      = B.COMP_CODE
		                                                           AND A.DIV_CODE       = B.DIV_CODE
		                                                           AND A.WORK_SHOP_CODE = B.WORK_SHOP_CODE
		                                                           AND A.WKORD_NUM      = B.WKORD_NUM
		                                                           AND A.WORK_MONTH     = B.WORK_MONTH

		WHEN MATCHED THEN
		    UPDATE SET
		          WORK_PROGRESS   = @WORK_PROGRESS
		        , WORK_MONTH      = B.WORK_MONTH
		        , MAN_HOUR        = #{MAN_HOUR}
		        , UPDATE_DB_USER  = #{S_USER_ID}
		        , UPDATE_DB_TIME  = GETDATE()

		WHEN NOT MATCHED THEN
		    INSERT (
		          COMP_CODE
		        , DIV_CODE
		        , WORK_SHOP_CODE
		        , WKORD_NUM
		        , WORK_MONTH
		        , WORK_PROGRESS
		        , MAN_HOUR
		        , UPDATE_DB_USER
		        , UPDATE_DB_TIME
		        , INSERT_DB_USER
		        , INSERT_DB_TIME
		    ) VALUES (
		          B.COMP_CODE
		        , B.DIV_CODE
		        , B.WORK_SHOP_CODE
		        , B.WKORD_NUM
		        , B.WORK_MONTH
		        , @WORK_PROGRESS
		        , #{MAN_HOUR}
		        , #{S_USER_ID}
		        , GETDATE()
		        , #{S_USER_ID}
		        , GETDATE()
		        );
	</update>

<!-- 진척이력 조회 / 저장: 20200317 추가 -->
	<select id="s_pmr100ukrv_mitServiceImpl.selectWorkProgressList" parameterType="Map" resultType="rMap">
		/* s_pmr100ukrv_mitServiceImpl.selectWorkProgressList */
		SELECT COMP_CODE
		     , DIV_CODE
		     , WORK_SHOP_CODE
		     , WKORD_NUM
		     , SUBSTRING(WORK_MONTH, 1, 4) + '.' + SUBSTRING(WORK_MONTH, 5, 2)       AS WORK_MONTH
		     , WORK_PROGRESS
		     , WKORD_STATUS
		     , MAN_HOUR
		  -- COMP_CODE, DIV_CODE, WORK_SHOP_CODE, WKORD_NUM, WORK_MONTH
		  FROM PMP150T WITH(NOLOCK)
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND DIV_CODE       = #{DIV_CODE}
		   AND WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		   AND WKORD_NUM      = #{WKORD_NUM}
	</select>
	<update id="s_pmr100ukrv_mitServiceImpl.updateWorkProgress" parameterType="Map">
		/* s_pmr100ukrv_mitServiceImpl.updateWorkProgress */
		UPDATE PMP150T
		   SET WORK_PROGRESS   = #{WORK_PROGRESS}
		     , MAN_HOUR        = #{MAN_HOUR}
		     , UPDATE_DB_USER  = #{S_USER_ID}
		     , UPDATE_DB_TIME  = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND DIV_CODE       = #{DIV_CODE}
		   AND WORK_SHOP_CODE = #{WORK_SHOP_CODE}
		   AND WKORD_NUM      = #{WKORD_NUM}
		   AND WORK_MONTH     = REPLACE(#{WORK_MONTH},  '.', '')
	</update>
</mapper>