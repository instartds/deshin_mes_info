<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_out200ukrv_mitServiceImpl">

	<select id="s_out200ukrv_mitServiceImpl.selectList" parameterType="Map" resultType="rMap">
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON 

		    DECLARE @CompCode       NVARCHAR(08)   /* 법인코드            */
		          , @DivCode        NVARCHAR(08)   /* 사업장코드          */
		          , @baseYm         NVARCHAR(06)   /* 기준월            */
				  
				  
		          , @UserId         NVARCHAR(100)  /* 사용자ID            */
		          , @RefItem        NVARCHAR(01)   /* 명칭 참조 유형      */
		
		    SET @CompCode    = #{S_COMP_CODE}
		    SET @DivCode     = #{DIV_CODE}
		    SET @baseYm      = #{BASIS_YYYYMM}
		    SET @UserId      = #{S_USER_ID}
		
		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		      FROM BSA300T WITH (NOLOCK)
		     WHERE USER_ID = @UserId
		
		    SET @RefItem = ISNULL(@RefItem, N'0')
		
		    /* 조회 */
		    SELECT   COMP_CODE
		           , DIV_CODE
		           , BASIS_YYYYMM
		           , ITEM_CODE
		           , ITEM_NAME
		           , SPEC
		           , ITEM_P
		           , RNK
		    FROM (
				    SELECT 	  A.COMP_CODE                                      
							, A.DIV_CODE                                --사업장코드
		              		, LEFT(A.BASIS_YYYYMM, 4)+'.'+RIGHT(A.BASIS_YYYYMM, 2) AS BASIS_YYYYMM   --기준월
							, A.ITEM_CODE                               --품목코드
							, CASE WHEN @RefItem = '1' THEN C1.ITEM_NAME1
						           WHEN @RefItem = '2' THEN C1.ITEM_NAME2
						                               ELSE C1.ITEM_NAME
						      END AS ITEM_NAME                        -- 품목명  
						    , C1.SPEC        
							, A.ITEM_P                                  --외주단가
							, RANK() OVER (PARTITION BY A.COMP_CODE , A.DIV_CODE , A.ITEM_CODE  ORDER BY A.BASIS_YYYYMM DESC ) AS RNK
				      FROM       S_OUT200T_MIT A WITH (NOLOCK)
				      INNER JOIN BPR100T      C1 WITH(NOLOCK) ON C1.COMP_CODE	= A.COMP_CODE
					  									     AND C1.ITEM_CODE	= A.ITEM_CODE
				      
				     WHERE A.COMP_CODE     = @CompCode   
				       AND A.DIV_CODE      = @DivCode    
				       AND A.BASIS_YYYYMM  &lt;= @baseYm
					   <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
				       AND A.ITEM_CODE       = #{ITEM_CODE}
				       </if>
				       <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
				       AND C1.ITEM_NAME       LIKE '%' + #{ITEM_NAME} +'%'
				       </if>
		       ) AS T
		        <if test="SEARCH != &quot;A&quot;">
		       WHERE T.RNK = 1
		       </if>
		     ORDER BY ITEM_CODE

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
	<update  id="s_out200ukrv_mitServiceImpl.insertList" parameterType="Map">
	   		INSERT INTO S_OUT200T_MIT
			(
				  COMP_CODE                               --법인
				, DIV_CODE                                --사업장코드
				, BASIS_YYYYMM                            --기준월	
				, ITEM_CODE                               --품목코드
				, ITEM_P                                  --외주단가
				, INSERT_DB_USER                          --
				, INSERT_DB_TIME                          --
				, UPDATE_DB_USER                          --
				, UPDATE_DB_TIME                          --
			) VALUES (
				  #{S_COMP_CODE}
				, #{DIV_CODE}
				, LEFT(REPLACE(#{BASIS_YYYYMM}, '.',''), 6)
				, #{ITEM_CODE}
				, #{ITEM_P}
				, #{S_USER_ID}
				, GETDATE()
				, #{S_USER_ID}
				, GETDATE()
			)
	</update>
	<update  id="s_out200ukrv_mitServiceImpl.updateList" parameterType="Map">
		UPDATE  S_OUT200T_MIT
		   SET    ITEM_P                      = #{ITEM_P}
				, UPDATE_DB_USER              = #{S_USER_ID}
				, UPDATE_DB_TIME              = GETDATE()
	    WHERE   COMP_CODE                     = #{S_COMP_CODE}
	      AND  DIV_CODE                       = #{DIV_CODE}
		  AND  BASIS_YYYYMM                   = LEFT(REPLACE(#{BASIS_YYYYMM}, '.',''), 6)
		  AND  ITEM_CODE                      = #{ITEM_CODE}
	</update>
	<update id="s_out200ukrv_mitServiceImpl.deleteList" parameterType="Map">
		DELETE  FROM   S_OUT200T_MIT
	    WHERE   COMP_CODE                     = #{S_COMP_CODE}
		  AND  DIV_CODE                       = #{DIV_CODE}
		  AND  BASIS_YYYYMM                   = LEFT(REPLACE(#{BASIS_YYYYMM}, '.',''), 6)
		  AND  ITEM_CODE                      = #{ITEM_CODE}
	</update>
	<insert id="s_out200ukrv_mitServiceImpl.insertExcel" parameterType="Map">
		/* s_out200ukrv_mitServiceImpl.insertExcel */

		INSERT INTO L_S_OUT200T_XLS (
			   _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_HAS_ERROR
		     , _EXCEL_ERROR_MSG
			 , COMP_CODE
			 , DIV_CODE	
			 , BASIS_YYYYMM	
			 , ITEM_CODE         
			 , ITEM_P           
			 , INSERT_DB_USER                          --
			 , INSERT_DB_TIME                          --
		) VALUES (
			   #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		     , #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}
		     , #{_EXCEL_ERROR_MSG,jdbcType=VARCHAR}
			 , #{S_COMP_CODE}
			 , #{DIV_CODE}
			 , left(replace(#{BASIS_YYYYMM}, '.',''), 6)
			 , #{ITEM_CODE}
			 , #{ITEM_P}
			 , #{S_USER_ID}
			 , GETDATE()
		)
	</insert>
	<update id="s_out200ukrv_mitServiceImpl.excelValidate" parameterType="Map">
		/* s_out200ukrv_mitServiceImpl.insertExcel */
		UPDATE A
		   SET  _EXCEL_HAS_ERROR = CASE WHEN ISNULL(B.ITEM_CODE, '') = '' THEN 'Y'
		                                ELSE 'N'
		                           END
			   ,_EXCEL_ERROR_MSG = CASE WHEN ISNULL(B.ITEM_CODE, '') = '' THEN '등록된 품목이 없습니다.'
		                                ELSE ''
		                           END
		       , A.ITEM_NAME = B.ITEM_NAME
			   , A.SPEC      = B.SPEC
		 FROM L_S_OUT200T_XLS A 
		      LEFT JOIN BPR100T B ON B.COMP_CODE = A.COMP_CODE
		      					 AND B.ITEM_CODE = A.ITEM_CODE    					 
		WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		
		UPDATE A
		   SET  _EXCEL_HAS_ERROR = 'Y'
			   ,_EXCEL_ERROR_MSG = '외주 단가가 이미 등록되어 있습니다.'
		 FROM L_S_OUT200T_XLS A 
		 INNER JOIN S_OUT200T_MIT B ON B.COMP_CODE = A.COMP_CODE
		      					       AND B.DIV_CODE = A.DIV_CODE   
		      					       AND B.BASIS_YYYYMM = A.BASIS_YYYYMM   
		      					       AND B.ITEM_CODE = A.ITEM_CODE    					 
		WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		
		/*  S_OUT200T_MIT 에 직접입력 */
		INSERT INTO S_OUT200T_MIT
			(
				  COMP_CODE                               --법인
				, DIV_CODE                                --사업장코드
				, BASIS_YYYYMM                            --기준월	
				, ITEM_CODE                               --품목코드
				, ITEM_P                                  --외주단가
				, INSERT_DB_USER                          --
				, INSERT_DB_TIME                          --
				, UPDATE_DB_USER                          --
				, UPDATE_DB_TIME                          --
			)
		SELECT   COMP_CODE
			    , DIV_CODE                                --사업장코드
				, BASIS_YYYYMM                            --기준월	
				, ITEM_CODE                               --품목코드
				, ITEM_P                                  --외주단가
				, #{S_USER_ID}
				, GETDATE()
				, #{S_USER_ID}
				, GETDATE()
		 FROM  L_S_OUT200T_XLS
		WHERE  _EXCEL_JOBID = #{_EXCEL_JOBID}  
		  AND  _EXCEL_HAS_ERROR = 'N'
	</update>
	<select id="s_out200ukrv_mitServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
		SELECT
                _EXCEL_JOBID
              , _EXCEL_ROWNUM
              , _EXCEL_HAS_ERROR
              , _EXCEL_ERROR_MSG
              , A.DIV_CODE
              , LEFT(A.BASIS_YYYYMM, 4)+'.'+RIGHT(A.BASIS_YYYYMM, 2) AS BASIS_YYYYMM
              , A.ITEM_CODE
              , B.ITEM_NAME
              , B.SPEC
              , A.ITEM_P
		FROM  S_OUT200T_MIT A WITH (NOLOCK)
		LEFT JOIN L_S_OUT200T_XLS B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                          AND B.DIV_CODE  = A.DIV_CODE
		                                          AND B.ITEM_CODE = A.ITEM_CODE
		                                          AND B.BASIS_YYYYMM = A.BASIS_YYYYMM
		WHERE B._EXCEL_JOBID = #{_EXCEL_JOBID}  
	</select>
</mapper>