<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hat500ukr_mitServiceImpl"> 
	
	<select id="s_hat500ukr_mitServiceImpl.getDutyRule" parameterType="String" resultType="String">
	/* s_hat500ukr_mitServiceImpl.getDutyRule */
	SELECT DUTY_INPUT_RULE
      FROM HBS400T
     WHERE COMP_CODE = #{S_COMP_CODE}
	</select>
	
	<select id="s_hat500ukr_mitServiceImpl.getDutycodeTime" parameterType="rMap" resultType="rMap">
    /* s_hat500ukr_mitServiceImpl.getDutycodeTime */
    SELECT DUTY_FR_H
          ,DUTY_FR_M
          ,DUTY_TO_H
          ,DUTY_TO_M
      FROM HAT100T
     WHERE COMP_CODE = #{S_COMP_CODE}
       AND WORK_TEAM = #{WORK_TEAM}
       AND HOLY_TYPE = '2'
    </select>
	
	<select id="s_hat500ukr_mitServiceImpl.getAllDutycode" parameterType="rMap" resultType="rMap">
	/* s_hat500ukr_mitServiceImpl.getAllDutycode */
	SELECT DISTINCT B.SUB_CODE
          , B.CODE_NAME 
       FROM HBS100T A
                    INNER JOIN BSA100T B 
                            ON A.COMP_CODE = B.COMP_CODE
                           AND A.DUTY_CODE = B.SUB_CODE 
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        AND B.MAIN_CODE = 'H033' 
        AND B.SUB_CODE &lt;&gt; '$' 
        <if test='DUTY_RULE.equals("Y")'> 
		AND A.COTR_TYPE = '2'
		</if>
		<if test='DUTY_RULE.equals("N")'> 
		AND A.COTR_TYPE = '1'
		</if>
	</select>
	
	<select id="s_hat500ukr_mitServiceImpl.getDutycode" parameterType="rMap" resultType="rMap">
	/* s_hat500ukr_mitServiceImpl.getDutyCode */
	SELECT B.SUB_CODE
          , B.CODE_NAME 
       FROM HBS100T A
                    INNER JOIN BSA100T B 
                            ON A.COMP_CODE = B.COMP_CODE
                           AND A.DUTY_CODE = B.SUB_CODE 
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        AND B.MAIN_CODE = 'H033' 
        AND B.SUB_CODE &lt;&gt; '$' 
        AND A.PAY_CODE  = #{PAY_CODE}
        <if test='DUTY_RULE.equals("Y")'> 
		AND A.COTR_TYPE = '2'
		</if>
		<if test='DUTY_RULE.equals("N")'> 
		AND A.COTR_TYPE = '1'
		</if>
    ORDER BY B.REF_CODE2, B.SUB_CODE
	</select>
	
	<select id="s_hat500ukr_mitServiceImpl.getComboList" parameterType="rMap" resultType="rMap">
		/* s_hat500ukr_mitServiceImpl.getComboList */
		SELECT B.SUB_CODE
	         , B.CODE_NAME 
	      FROM HBS100T A 
	                   INNER JOIN BSA100T B 
	                           ON A.COMP_CODE = B.COMP_CODE
	                          AND A.DUTY_CODE = B.SUB_CODE 
	     WHERE A.COMP_CODE = #{S_COMP_CODE}
	       AND B.MAIN_CODE = 'H033' 
	       AND B.USE_YN = 'Y'
	       AND B.SUB_CODE &lt;&gt; '$' 
	       <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
	       AND A.PAY_CODE  = #{PAY_CODE} 
	       </if>
	       AND A.COTR_TYPE = '2' 
	     ORDER BY B.REF_CODE2, B.SUB_CODE
	</select>
	
	<select id="s_hat500ukr_mitServiceImpl.getComboList2" parameterType="rMap" resultType="rMap">
		/* s_hat500ukr_mitServiceImpl.getComboList2 */
		SELECT B.SUB_CODE as value
	         , B.CODE_NAME as text
	      FROM HBS100T A 
	                   INNER JOIN BSA100T B 
	                           ON A.COMP_CODE = B.COMP_CODE
	                          AND A.DUTY_CODE = B.SUB_CODE 
	     WHERE A.COMP_CODE = #{S_COMP_CODE}
	       AND B.MAIN_CODE = 'H033' 
	       AND B.USE_YN = 'Y'
	       AND B.SUB_CODE &lt;&gt; '$' 
	       <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
	       AND A.PAY_CODE  = #{PAY_CODE} 
	       </if>
	       <if test="@foren.Ognl@isEmpty(PAY_CODE)">
	       AND A.PAY_CODE  = '1' 
	       </if>
	       AND A.COTR_TYPE = '2' 
	     ORDER BY B.REF_CODE2, B.SUB_CODE
	</select>
	
	<select id="s_hat500ukr_mitServiceImpl.selectList" parameterType="Map" resultType="rMap">		
	/* s_hat500ukr_mitServiceImpl.selectList */
	
	SELECT ISNULL(D.WORK_TEAM, '1') AS WORK_TEAM
	     , A.DIV_CODE
 		 , CASE WHEN ISNULL(D.COMP_CODE, '') = ''
		        THEN 'Y'
				ELSE 'N'
			END AS FLAG
		 , CASE WHEN ISNULL(D.COMP_CODE, '') = ''
		        THEN '미적용'
				ELSE '적용'
			END AS APPLY_YN
		 , C.WORK_DATE AS DUTY_YYYYMMDD
		 , A.DEPT_NAME
		 , A.POST_CODE
		 , A.NAME
		 , A.PERSON_NUMB
	
		 , MAX(C.REQUST_SRAL_NO) AS REQUST_SRAL_NO
		 , C.USER_ID
		 --, C.ERP_APLY_YN
		 --, C.ERP_APLY_TIME
	
		 , CASE WHEN MAX(C.WORK_TYPE) = 'VACATION'	--연차
				THEN '22' 
				ELSE ''
			END AS DUTY_CODE
	
		 --출근시간X, 퇴근시간X 일 경우 
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN REPLACE(C.WORK_DATE, '-', '') 
				ELSE CONVERT(NVARCHAR(08), MIN(C.IN_TIME), 112) 
			END                                                       AS DUTY_FR_D
		 --출근시간X, 퇴근시간X 일 경우 
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN '00'
				 --출근시간O, 퇴근시간X 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') != '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
				THEN LEFT(CONVERT(NVARCHAR(08), MIN(C.IN_TIME), 24), 2) 
				 --출근시간X, 퇴근시간O 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') != ''
				THEN '00'
				ELSE LEFT(CONVERT(NVARCHAR(08), MIN(C.IN_TIME), 24), 2) 
			END															AS DUTY_FR_H 
	
	
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN '00'
				 --출근시간O, 퇴근시간X 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') != '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
				THEN SUBSTRING(CONVERT(NVARCHAR(08), MIN(C.IN_TIME), 24), 4, 2) 
				 --출근시간X, 퇴근시간O 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') != ''
				THEN '00'
				ELSE SUBSTRING(CONVERT(NVARCHAR(08), MIN(C.IN_TIME), 24), 4, 2) 
			END															AS DUTY_FR_M 
	
	
		 --출근시간X, 퇴근시간X 일 경우 
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN REPLACE(C.WORK_DATE, '-', '') 
		        ELSE CONVERT(NVARCHAR(08), MAX(C.OUT_TIME), 112) 
		    END															AS DUTY_TO_D
	
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN '00'
				--출근시간O, 퇴근시간X 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') != '' AND ISNULL(MAX(C.OUT_TIME), '') = ''  
				THEN '00'
				 --출근시간X, 퇴근시간O 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') != ''
		        THEN LEFT(CONVERT(NVARCHAR(08), MAX(C.OUT_TIME), 24), 2)
				ELSE LEFT(CONVERT(NVARCHAR(08), MAX(C.OUT_TIME), 24), 2)
			END															AS DUTY_TO_H 
	
	
		 , CASE WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
		        THEN '00'
				 --출근시간O, 퇴근시간X 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') != '' AND ISNULL(MAX(C.OUT_TIME), '') = ''
				THEN '00'
				--출근시간X, 퇴근시간O 일 경우 
				WHEN ISNULL(MIN(C.IN_TIME), '') = '' AND ISNULL(MAX(C.OUT_TIME), '') != ''
				THEN SUBSTRING(CONVERT(NVARCHAR(08), MAX(C.OUT_TIME), 24), 4, 2) 
				ELSE SUBSTRING(CONVERT(NVARCHAR(08), MAX(C.OUT_TIME), 24), 4, 2) 
			END															AS DUTY_TO_M 
	
	
		 
	   FROM      HUM100T A WITH(NOLOCK)
	  INNER JOIN SYNERGY_HUB..BK_USER_INTRFC_RV_SDW     B ON RIGHT(B.EMP_NO, 10) = A.PERSON_NUMB
	  INNER JOIN SYNERGY_HUB..BK_WORKTIME_INTRFC_RV_SDW C ON C.USER_ID = B.USER_ID
	                                                     AND C.ORG_ID  = B.ORG_ID
	  LEFT JOIN HAT500T D WITH (NOLOCK) ON D.COMP_CODE     = A.COMP_CODE
			                           AND D.PERSON_NUMB   = A.PERSON_NUMB
			                           AND D.DUTY_YYYYMMDD  = REPLACE(C.WORK_DATE, '-', '')
			                           
	 WHERE A.COMP_CODE = #{S_COMP_CODE}
	   AND B.ORG_ID    = '56'
	   AND REPLACE(C.WORK_DATE, '-', '') = #{FR_DATE}
	   --AND C.ERP_APLY_YN = 'N' 
	   
      <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">		 AND A.DIV_CODE= #{DIV_CODE}</if>
      <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">		 AND A.DEPT_CODE &gt;= #{DEPT_CODE}</if>
  	  <if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">	 AND A.DEPT_CODE &lt;= #{DEPT_CODE2}</if>
	  <if test="@foren.Ognl@isNotEmpty(WORK_TEAM)">  	 AND D.WORK_TEAM = #{WORK_TEAM} </if>
	  <if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">  AND A.PAY_PROV_FLAG = #{PAY_PROV_FLAG} </if>
	  <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">    	 AND A.PAY_GUBUN = #{PAY_GUBUN} </if>
	  <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">    AND A.PERSON_NUMB = #{PERSON_NUMB} </if>
	  <if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">    AND A.EMPLOY_TYPE = #{EMPLOY_TYPE} </if>
		<if test="@foren.Ognl@isNotEmpty(DEPTS)">
		   AND A.DEPT_CODE IN
			<foreach collection="DEPTS" item="item" separator="," close=")" open="(">
				#{item}
			</foreach>
		</if>
	  
	   
	  GROUP BY  A.DIV_CODE, D.WORK_TEAM, C.USER_ID, C.WORK_DATE, A.DEPT_NAME
		       , A.POST_CODE, A.PERSON_NUMB, A.NAME
		       , D.COMP_CODE
		       --, C.ERP_APLY_YN
		       --, C.ERP_APLY_TIME
		       
		          
	  ORDER BY ISNULL(D.WORK_TEAM, '1'), A.DIV_CODE, A.DEPT_NAME, A.POST_CODE, A.NAME, A.PERSON_NUMB 
	
		       
	</select>
	
	<update id="s_hat500ukr_mitServiceImpl.insertList_DutyRule_Y"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.insertList_DutyRule_Y */
		BEGIN
			INSERT INTO HAT500T
	           (COMP_CODE
	           ,PERSON_NUMB
	           ,DUTY_YYYYMMDD
	           ,DUTY_FR_D
	           ,DUTY_FR_H
	           ,DUTY_FR_M
	           ,DUTY_TO_D
	           ,DUTY_TO_H
	           ,DUTY_TO_M
	           ,DUTY_CODE
	           ,WORK_TEAM
	           ,UPDATE_DB_USER
	           ,UPDATE_DB_TIME
	           ,INSERT_DB_USER
	           ,INSERT_DB_TIME)
	     	VALUES
	           (#{S_COMP_CODE}
	           ,#{PERSON_NUMB}
	           ,#{DUTY_YYYYMMDD}
	           ,#{DUTY_FR_D}
	           ,#{DUTY_FR_H}
	           ,#{DUTY_FR_M}
	           ,#{DUTY_TO_D}
	           ,#{DUTY_TO_H}
	           ,#{DUTY_TO_M}
	           ,#{DUTY_CODE}
	           ,#{WORK_TEAM}
	           ,#{S_USER_ID}
	           ,GETDATE()
	           ,#{S_USER_ID}
	           ,GETDATE())
     	 
		     UPDATE SYNERGY_HUB..BK_WORKTIME_INTRFC_RV_SDW
			    SET ERP_APLY_YN   = 'Y'
			      , ERP_APLY_TIME = GETDATE()
			  WHERE REQUST_SRAL_NO = #{REQUST_SRAL_NO}
		 END 
	</update>
	
	<update id="s_hat500ukr_mitServiceImpl.updateList_DutyRule_Y"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.updateList_DutyRule_Y */
		UPDATE HAT500T
               SET DUTY_CODE = #{DUTY_CODE}
                 , DUTY_FR_D = #{DUTY_FR_D}
                 , DUTY_FR_H = #{DUTY_FR_H}
                 , DUTY_FR_M = #{DUTY_FR_M}
                 , DUTY_TO_D = #{DUTY_TO_D}
                 , DUTY_TO_H = #{DUTY_TO_H}
                 , DUTY_TO_M = #{DUTY_TO_M}
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND PERSON_NUMB = #{PERSON_NUMB}
               AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
	</update>
	
	<delete id="s_hat500ukr_mitServiceImpl.deleteList_DutyRule_Y"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.deleteList_DutyRule_Y */
		DELETE FROM HAT500T
        WHERE COMP_CODE = #{S_COMP_CODE}
               AND PERSON_NUMB = #{PERSON_NUMB}
               AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
     
     UPDATE SYNERGY_HUB..BK_WORKTIME_INTRFC_RV_SDW
	    SET ERP_APLY_YN   = 'N'
	      , ERP_APLY_TIME = NULL
	  WHERE REQUST_SRAL_NO = #{REQUST_SRAL_NO}
	</delete>
	
	<insert id="s_hat500ukr_mitServiceImpl.insertList_DutyRule_N01"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.insertList_DutyRule_N01 */
		INSERT INTO HAT600T
		     ( DUTY_YYYYMMDD
		     , PERSON_NUMB
		     , WORK_TEAM
		     , DUTY_CODE
		     , DUTY_NUM
		     , DUTY_TIME
		     , DUTY_MINU
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , COMP_CODE
		     ) 
		VALUES
		     ( #{DUTY_YYYYMMDD}
		     , #{PERSON_NUMB}
		     , #{WORK_TEAM}
		     , #{DUTY_CODE}
		     , #{DUTY_NUM}
		     , #{DUTY_TIME}
		     , #{DUTY_MINU}
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_COMP_CODE}
		     )
	</insert>
		
	<insert id="s_hat500ukr_mitServiceImpl.insertList_DutyRule_N02"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.insertList_DutyRule_N02 */
		INSERT INTO HAT600T
               (PERSON_NUMB
              , DUTY_YYYYMMDD
              , DUTY_CODE
              , DUTY_NUM
              , DUTY_TIME
              , DUTY_MINU
              , WORK_TEAM
              , UPDATE_DB_USER
              , UPDATE_DB_TIME
              , COMP_CODE)
        SELECT B.PERSON_NUMB
             , #{DUTY_YYYYMMDD}
             , A.SUB_CODE
             , 0, 0, 0, #{WORK_TEAM}
             , #{S_USER_ID}
             , GETDATE()
             , B.COMP_CODE
          FROM BSA100T A
                       INNER JOIN HUM100T B
                               ON A.COMP_CODE = B.COMP_CODE
                       INNER JOIN HBS100T C
                               ON A.COMP_CODE = C.COMP_CODE
                              AND A.SUB_CODE  = C.DUTY_CODE
                              AND B.PAY_CODE  = C.PAY_CODE
         WHERE A.COMP_CODE = #{S_COMP_CODE} 
           AND MAIN_CODE = 'H033'
           AND SUB_CODE &lt;&gt; '$'
           AND B.PERSON_NUMB =  #{PERSON_NUMB} 
           AND SUB_CODE NOT IN (SELECT DUTY_CODE
                                  FROM HAT600T
                                 WHERE COMP_CODE     = #{S_COMP_CODE}
                                   AND PERSON_NUMB   = #{PERSON_NUMB} 
                                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD})
	</insert>
	
	<update id="s_hat500ukr_mitServiceImpl.updateList_DutyRule_N"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.updateList_DutyRule_N */
		UPDATE HAT600T
               SET DUTY_NUM = '1'
           		, UPDATE_DB_USER = #{S_USER_ID}
		     	, UPDATE_DB_TIME = GETDATE()
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND PERSON_NUMB = #{PERSON_NUMB}
               AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
               AND DUTY_CODE = #{NUMC}
	</update>
	
	<delete id="s_hat500ukr_mitServiceImpl.deleteList_DutyRule_N"  parameterType="rMap">
		/* s_hat500ukr_mitServiceImpl.deleteList_DutyRule_N */
		DELETE FROM HAT600T
        WHERE COMP_CODE = #{S_COMP_CODE}
               AND PERSON_NUMB = #{PERSON_NUMB}
               AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
	</delete>
	
</mapper>