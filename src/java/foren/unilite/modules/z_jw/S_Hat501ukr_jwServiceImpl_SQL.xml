<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hat501ukr_jwServiceImpl">

    <select id="s_hat501ukr_jwServiceImpl.getDutyRule" parameterType="String" resultType="String">
        /* s_hat501ukr_jwServiceImpl.getDutyRule */
        SELECT  DUTY_INPUT_RULE
        FROM    HBS400T
        WHERE   COMP_CODE = #{S_COMP_CODE}
    </select>

    <select id="s_hat501ukr_jwServiceImpl.getAllDutycode" parameterType="rMap" resultType="rMap">
        /* s_hat501ukr_jwServiceImpl.getAllDutycode */
        SELECT  DISTINCT B.SUB_CODE
             ,  B.CODE_NAME
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033'
        AND     B.SUB_CODE &lt;&gt; '$'
        <if test='DUTY_RULE.equals("Y")'>
        AND     A.COTR_TYPE = '2'
        </if>
        <if test='DUTY_RULE.equals("N")'>
        AND     A.COTR_TYPE = '1'
        </if>
    </select>

    <select id="s_hat501ukr_jwServiceImpl.getDutycode" parameterType="rMap" resultType="rMap">
        /* s_hat501ukr_jwServiceImpl.getDutyCode */
        SELECT  B.SUB_CODE
             ,  B.CODE_NAME
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033'
        AND     B.SUB_CODE &lt;&gt; '$'
        AND     A.PAY_CODE  = #{PAY_CODE}
        <if test='DUTY_RULE.equals("Y")'>
        AND     A.COTR_TYPE = '2'
        </if>
        <if test='DUTY_RULE.equals("N")'>
        AND     A.COTR_TYPE = '1'
        </if>
        ORDER   BY B.REF_CODE2, B.SUB_CODE

    </select>

    <select id="s_hat501ukr_jwServiceImpl.getComboList" parameterType="rMap" resultType="rMap">
        /* s_hat501ukr_jwServiceImpl.getComboList */
        SELECT  B.SUB_CODE
             ,  B.CODE_NAME
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033'
        AND     B.USE_YN = 'Y'
        AND     B.SUB_CODE &lt;&gt; '$'
        <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
        AND     A.PAY_CODE  = #{PAY_CODE}
        </if>
        AND     A.COTR_TYPE = '2'
        ORDER   BY B.REF_CODE2, B.SUB_CODE
    </select>

    <select id="s_hat501ukr_jwServiceImpl.selectList" parameterType="Map" resultType="rMap">
        /* s_hat501ukr_jwServiceImpl.selectList */
        SELECT  ISNULL(D.DUTY_YYYYMMDD,#{DUTY_DATE})  AS DUTY_DATE         -- 20170621 : 박재범 (D.DUTY_DATE)
             , C.WEEK_DAY                                                             -- 요일
             , M1.CODE_NAME                    AS DAY_NAME                            -- 요일명
             , C.HOLY_TYPE                                                            -- 평일/휴일코드
             , M2.CODE_NAME                    AS HOLY_NAME                           -- 평일/휴일명
             , A.DEPT_CODE                                                            -- 부서코드
             , A.DEPT_NAME                                                            -- 부서명
             , A.PERSON_NUMB                                                          -- 사원번호
             , A.NAME                                                                 -- 성명
             , B.WORK_TEAM                                                            -- 근무조
             , M3.CODE_NAME                    AS WORK_TEAM_NAME                      -- 근무조명
             , D.DUTY_CODE                     AS DUTY_CODE                           -- 근태코드
             
             , CASE WHEN ISNULL(D.DUTY_FR_D, '') = '' THEN '' ELSE ISNULL(D.DUTY_FR_D, '') END AS DUTY_FR_D     -- 출근일
             , CASE WHEN ISNULL(D.DUTY_FR_H,  0) = 0  THEN 0  ELSE ISNULL(D.DUTY_FR_H,  0) END AS DUTY_FR_H     -- 출근시
             , CASE WHEN ISNULL(D.DUTY_FR_M,  0) = 0  THEN 0  ELSE ISNULL(D.DUTY_FR_M,  0) END AS DUTY_FR_M     -- 출근분
             , CASE WHEN ISNULL(D.DUTY_TO_D, '') = '' THEN '' ELSE ISNULL(D.DUTY_TO_D, '') END AS DUTY_TO_D     -- 퇴근일
             , CASE WHEN ISNULL(D.DUTY_TO_H,  0) = 0  THEN 0  ELSE ISNULL(D.DUTY_TO_H,  0) END AS DUTY_TO_H     -- 퇴근시
             , CASE WHEN ISNULL(D.DUTY_TO_M,  0) = 0  THEN 0  ELSE ISNULL(D.DUTY_TO_M,  0) END AS DUTY_TO_M     -- 퇴근분
             
              
             , CASE WHEN ISNULL(D.DUTY_CHK1_YN, 'N') = 'N' THEN 'false' ELSE 'true' END AS DUTY_CHK1_YN  -- 조출여부
             , ISNULL(D.DUTY_CHK1_H, 0)      AS DUTY_CHK1_H   -- 조출반영 시간
             , ISNULL(D.DUTY_CHK1_M, 0)      AS DUTY_CHK1_M   -- 조출반영 분
             , ISNULL(D.LATENESS_H, 0)         AS LATENESS_H    -- 지각             시간
             , ISNULL(D.LATENESS_M, 0)         AS LATENESS_M    -- 지각             분
             , ISNULL(D.EARLY_H, 0)            AS EARLY_H       -- 조퇴             시간
             , ISNULL(D.EARLY_M, 0)            AS EARLY_M       -- 조퇴             분
             , ISNULL(D.OUT_H, 0)              AS OUT_H         -- 외출             시간
             , ISNULL(D.OUT_M, 0)              AS OUT_M         -- 외출             분
             , ISNULL(D.OVERTIME_1_H, 0)       AS OVERTIME_1_H  -- 주간조-잔업(150%)    시간
             , ISNULL(D.OVERTIME_1_M, 0)       AS OVERTIME_1_M  -- 주간조-잔업(150%)    분
             , ISNULL(D.OVERTIME_2_H, 0)       AS OVERTIME_2_H  -- 주간조-잔업(210%)     시간
             , ISNULL(D.OVERTIME_2_M, 0)       AS OVERTIME_2_M  -- 주간조-잔업(210%)     분
             , ISNULL(D.OVERTIME_3_H, 0)       AS OVERTIME_3_H  -- 주간조-일요일야간근무(200%)    시간
             , ISNULL(D.OVERTIME_3_M, 0)       AS OVERTIME_3_M  -- 주간조-일요일야간근무(200%)   분
             , ISNULL(D.OVERTIME_4_H, 0)       AS OVERTIME_4_H  -- 야간조-평일 야간근무(100%)   시간
             , ISNULL(D.OVERTIME_4_M, 0)       AS OVERTIME_4_M  -- 야간조-평일 야간근무(100%)  분
             , ISNULL(D.OVERTIME_5_H, 0)       AS OVERTIME_5_H  -- 야간조-평일 야간근무(130%)  시간
             , ISNULL(D.OVERTIME_5_M, 0)       AS OVERTIME_5_M  -- 야간조-평일 야간근무(130%)  분
             , ISNULL(D.OVERTIME_6_H, 0)       AS OVERTIME_6_H  -- 야간조-평일 잔업(200%) 시간
             , ISNULL(D.OVERTIME_6_M, 0)       AS OVERTIME_6_M  -- 야간조-평일 잔업(200%) 분
             , ISNULL(D.OVERTIME_7_H, 0)       AS OVERTIME_7_H  -- 야간조-일요일근무(270%) 시간
             , ISNULL(D.OVERTIME_7_M, 0)       AS OVERTIME_7_M  -- 야간조-일요일근무(270%) 분
             , ISNULL(D.OVERTIME_8_H, 0)       AS OVERTIME_8_H  -- 주간조-공휴일주간특근(300%) 시간
             , ISNULL(D.OVERTIME_8_M, 0)       AS OVERTIME_8_M  -- 주간조-공휴일주간특근(300%) 분
             , ISNULL(D.OVERTIME_9_H, 0)       AS OVERTIME_9_H  -- 야간조-공휴일야간특근(390%) 시간
             , ISNULL(D.OVERTIME_9_M, 0)       AS OVERTIME_9_M  -- 야간조-공휴일야간특근(390%) 분
                         
             , A.DIV_CODE                    AS DIV_CODE      -- 사업장
             , D.REMARK                      AS REMARK        -- 비고

        FROM               HUM100T A  WITH (NOLOCK)
                LEFT  JOIN HAT400T B  WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
                                                   AND B.PERSON_NUMB    = A.PERSON_NUMB
                                                   AND B.DUTY_YYYYMMDD  =  (SELECT  MAX(C.DUTY_YYYYMMDD)
                                                                            FROM    HAT400T C WITH (NOLOCK)
                                                                            WHERE   C.COMP_CODE       = A.COMP_CODE
                                                                            AND     C.PERSON_NUMB     = A.PERSON_NUMB
                                                                            AND     C.DUTY_YYYYMMDD &lt;= #{DUTY_DATE})
                LEFT  JOIN HBS600T C  WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
                                                   AND C.CAL_DATE       = #{DUTY_DATE}
                LEFT  JOIN HAT500T D  WITH (NOLOCK) ON D.COMP_CODE      = A.COMP_CODE
                                                   AND D.PERSON_NUMB    = A.PERSON_NUMB
                LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE     = A.COMP_CODE
                                                   AND M1.MAIN_CODE     = 'H001'
                                                   AND M1.SUB_CODE      = CONVERT(VARCHAR(2),C.WEEK_DAY)
                LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE
                                                   AND M2.MAIN_CODE     = 'B011'
                                                   AND M2.SUB_CODE      = C.HOLY_TYPE
                LEFT  JOIN BSA100T M3 WITH (NOLOCK) ON M3.COMP_CODE     = A.COMP_CODE
                                                   AND M3.MAIN_CODE     = 'H004'
                                                   AND M3.SUB_CODE      = B.WORK_TEAM
        WHERE   A.COMP_CODE     = #{S_COMP_CODE}
        AND     (A.RETR_DATE    = '00000000' OR (ISNULL(A.RETR_DATE,'' ) &gt;= #{DUTY_DATE}))
        AND     A.DIV_CODE      = #{DIV_CODE}
        AND     D.DUTY_YYYYMMDD = #{DUTY_DATE}
     <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND     A.PERSON_NUMB   = #{PERSON_NUMB}
     </if>
        ORDER   BY A.DEPT_CODE, A.PERSON_NUMB

    </select>

    <insert id="s_hat501ukr_jwServiceImpl.insertList"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.insertList */
        INSERT INTO HAT500T
        (
            COMP_CODE
        ,   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   WEEK_DAY
        ,   CODE_NAME
        ,   HOLY_TYPE
        ,   CODE_NAME
        ,   DEPT_CODE
        ,   DEPT_NAME
        ,   NAME
        ,   WORK_TEAM
        ,   CODE_NAME
        ,   DUTY_CODE
        ,   DUTY_FR_D
        ,   DUTY_FR_H
        ,   DUTY_FR_M
        ,   DUTY_TO_D
        ,   DUTY_TO_H
        ,   DUTY_TO_M
        ,   DUTY_CHK1_YN 
        ,   DUTY_CHK1_H  
        ,   DUTY_CHK1_M  
        ,   LATENESS_H   
        ,   LATENESS_M 
        ,   EARLY_H   
        ,   EARLY_M 
        ,   OUT_H   
        ,   OUT_M   
        ,   OVERTIME_1_H 
        ,   OVERTIME_1_M 
        ,   OVERTIME_2_H 
        ,   OVERTIME_2_M 
        ,   OVERTIME_3_H 
        ,   OVERTIME_3_M 
        ,   OVERTIME_4_H 
        ,   OVERTIME_4_M 
        ,   OVERTIME_5_H 
        ,   OVERTIME_5_M 
        ,   OVERTIME_6_H 
        ,   OVERTIME_6_M 
        ,   OVERTIME_7_H 
        ,   OVERTIME_7_M
        ,   OVERTIME_8_H
        ,   OVERTIME_8_M
        ,   OVERTIME_9_H
        ,   OVERTIME_9_M
        ,   DIV_CODE     
        ,   REMARK       


        ,   INSERT_DB_USER
        ,   INSERT_DB_TIME
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   TEMPC_01
        ,   TEMPC_02
        ,   TEMPC_03
        ,   TEMPN_01
        ,   TEMPN_02
        ,   TEMPN_03
        )
        VALUES
        (
            #{S_COMP_CODE}
        ,   #{PERSON_NUMB}
        ,   #{DUTY_DATE}

        ,   #{WEEK_DAY}
        ,   #{CODE_NAME}
        ,   #{HOLY_TYPE}
        ,   #{CODE_NAME}
        ,   #{DEPT_CODE}
        ,   #{DEPT_NAME}
        ,   #{NAME}
        ,   #{WORK_TEAM}
        ,   #{CODE_NAME}
        ,   #{DUTY_CODE}
        ,   #{DUTY_FR_D}
        ,   #{DUTY_FR_H}
        ,   #{DUTY_FR_M}
        ,   #{DUTY_TO_D}
        ,   #{DUTY_TO_H}
        ,   #{DUTY_TO_M}
        ,   CASE WHEN #{DUTY_CHK1_YN} = 'true' THEN 'Y' ELSE 'N' END
        ,   #{DUTY_CHK1_H} 
        ,   #{DUTY_CHK1_M} 
        ,   #{LATENESS_H} 
        ,   #{LATENESS_M}
        ,   #{EARLY_H} 
        ,   #{EARLY_M} 
        ,   #{OUT_H} 
        ,   #{OUT_M}  
        ,   #{OVERTIME_1_H} 
        ,   #{OVERTIME_1_M} 
        ,   #{OVERTIME_2_H} 
        ,   #{OVERTIME_2_M} 
        ,   #{OVERTIME_3_H} 
        ,   #{OVERTIME_3_M} 
        ,   #{OVERTIME_4_H} 
        ,   #{OVERTIME_4_M} 
        ,   #{OVERTIME_5_H} 
        ,   #{OVERTIME_5_M} 
        ,   #{OVERTIME_6_H} 
        ,   #{OVERTIME_6_M} 
        ,   #{OVERTIME_7_H} 
        ,   #{OVERTIME_7_M}
        ,   #{OVERTIME_8_H} 
        ,   #{OVERTIME_8_M}
        ,   #{OVERTIME_9_H} 
        ,   #{OVERTIME_9_M}
       
        ,   #{DIV_CODE} 
        ,   #{REMARK} 

        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{TEMPC_01}
        ,   #{TEMPC_02}
        ,   #{TEMPC_03}
        ,   #{TEMPN_01}
        ,   #{TEMPN_02}
        ,   #{TEMPN_03}
        )
    </insert>



    <insert id="s_hat501ukr_jwServiceImpl.insertList_DutyRule_Y"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.insertList_DutyRule_Y */
        INSERT INTO HAT500T
        (   COMP_CODE
        ,   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   DUTY_FR_D
        ,   DUTY_FR_H
        ,   DUTY_FR_M
        ,   DUTY_TO_D
        ,   DUTY_TO_H
        ,   DUTY_TO_M
        ,   DUTY_CODE
        ,   WORK_TEAM
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   INSERT_DB_USER
        ,   INSERT_DB_TIME
        )
        VALUES
        (   #{S_COMP_CODE}
        ,   #{PERSON_NUMB}
        ,   #{DUTY_DATE}
        ,   #{DUTY_FR_D}
        ,   #{DUTY_FR_H}
        ,   #{DUTY_FR_M}
        ,   #{DUTY_TO_D}
        ,   #{DUTY_TO_H}
        ,   #{DUTY_TO_M}
        ,   #{DUTY_CODE}
        ,   #{WORK_TEAM}
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_USER_ID}
        ,   GETDATE()
        )
    </insert>


    <update id="s_hat501ukr_jwServiceImpl.updateList"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.updateList */
        UPDATE  HAT500T
        SET     DUTY_CODE       = #{DUTY_CODE}
          ,     DUTY_FR_D       = #{DUTY_FR_D}
          ,     DUTY_FR_H       = REPLICATE(0, 2 - LEN(#{DUTY_FR_H})) + #{DUTY_FR_H}
          ,     DUTY_FR_M       = REPLICATE(0, 2 - LEN(#{DUTY_FR_M})) + #{DUTY_FR_M}
          ,     DUTY_TO_D       = #{DUTY_TO_D}
          ,     DUTY_TO_H       = REPLICATE(0, 2 - LEN(#{DUTY_TO_H})) + #{DUTY_TO_H}
          ,     DUTY_TO_M       = REPLICATE(0, 2 - LEN(#{DUTY_TO_M})) + #{DUTY_TO_M}
          
          ,     DUTY_CHK1_YN    = CASE WHEN #{DUTY_CHK1_YN} = 'true' THEN 'Y' ELSE 'N' END
          ,     DUTY_CHK1_H     = REPLICATE(0, 2 - LEN(#{DUTY_CHK1_H})) + #{DUTY_CHK1_H}
          ,     DUTY_CHK1_M     = #{DUTY_CHK1_M}
          ,     LATENESS_H      = CONVERT(INT,#{LATENESS_M})
          ,     LATENESS_M      = #{LATENESS_M}
          ,     EARLY_H         = CONVERT(INT,#{EARLY_M})
          ,     EARLY_M         = #{EARLY_M}
          ,     OUT_H           = CONVERT(INT,#{OUT_M})
          ,     OUT_M           = #{OUT_M}
          ,     OVERTIME_1_H    = CONVERT(INT,#{OVERTIME_1_M})
          ,     OVERTIME_1_M    = #{OVERTIME_1_M}
          ,     OVERTIME_2_H    = CONVERT(INT,#{OVERTIME_2_M})
          ,     OVERTIME_2_M    = #{OVERTIME_2_M}
          ,     OVERTIME_3_H    = CONVERT(INT,#{OVERTIME_3_M})
          ,     OVERTIME_3_M    = #{OVERTIME_3_M}
          ,     OVERTIME_4_H    = CONVERT(INT,#{OVERTIME_4_M})
          ,     OVERTIME_4_M    = #{OVERTIME_4_M}
          ,     OVERTIME_5_H    = CONVERT(INT,#{OVERTIME_5_M})
          ,     OVERTIME_5_M    = #{OVERTIME_5_M}
          ,     OVERTIME_6_H    = CONVERT(INT,#{OVERTIME_6_H})
          ,     OVERTIME_6_M    = #{OVERTIME_6_H}
          ,     OVERTIME_7_H    = CONVERT(INT,#{OVERTIME_7_M})
          ,     OVERTIME_7_M    = #{OVERTIME_7_M}
          ,     OVERTIME_8_H    = CONVERT(INT,#{OVERTIME_8_M})
          ,     OVERTIME_8_M    = #{OVERTIME_8_M}
          ,     OVERTIME_9_H    = CONVERT(INT,#{OVERTIME_9_M})
          ,     OVERTIME_9_M    = #{OVERTIME_9_M}
          ,     REMARK          = #{REMARK}

        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_DATE}
    </update>


    <update id="s_hat501ukr_jwServiceImpl.updateList_DutyRule_Y"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.updateList_DutyRule_Y */
        UPDATE  HAT500T
        SET     DUTY_CODE = #{DUTY_CODE}
          ,     DUTY_FR_D = #{DUTY_FR_D}
          ,     DUTY_FR_H = REPLICATE(0, 2 - LEN(#{DUTY_FR_H})) + #{DUTY_FR_H}
          ,     DUTY_FR_M = #{DUTY_FR_M}
          ,     DUTY_TO_D = #{DUTY_TO_D}
          ,     DUTY_TO_H = REPLICATE(0, 2 - LEN(#{DUTY_TO_H})) + #{DUTY_TO_H}
          ,     DUTY_TO_M = #{DUTY_TO_M}
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_DATE}
    </update>

    <delete id="s_hat501ukr_jwServiceImpl.deleteList_DutyRule_Y"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.deleteList_DutyRule_Y */
        DELETE  FROM HAT500T
        WHERE   COMP_CODE = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD = #{DUTY_DATE}
    </delete>

    <insert id="s_hat501ukr_jwServiceImpl.insertList_DutyRule_N01"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.insertList_DutyRule_N01 */
        INSERT INTO HAT600T
        (   DUTY_YYYYMMDD
        ,   PERSON_NUMB
        ,   WORK_TEAM
        ,   DUTY_CODE
        ,   DUTY_NUM
        ,   DUTY_TIME
        ,   DUTY_MINU
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   COMP_CODE
        )
        VALUES
        (   #{DUTY_DATE}
        ,   #{PERSON_NUMB}
        ,   #{WORK_TEAM}
        ,   #{DUTY_CODE}
        ,   #{DUTY_NUM}
        ,   #{DUTY_TIME}
        ,   #{DUTY_MINU}
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_COMP_CODE}
        )
    </insert>

    <insert id="s_hat501ukr_jwServiceImpl.insertList_DutyRule_N02"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.insertList_DutyRule_N02 */
        INSERT INTO HAT600T
        (   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   DUTY_CODE
        ,   DUTY_NUM
        ,   DUTY_TIME
        ,   DUTY_MINU
        ,   WORK_TEAM
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   COMP_CODE
        )
        SELECT  B.PERSON_NUMB
             ,  #{DUTY_DATE}
             ,  A.SUB_CODE
             ,  0, 0, 0, #{WORK_TEAM}
             ,  #{S_USER_ID}
             ,  GETDATE()
             ,  B.COMP_CODE
        FROM               BSA100T A WITH (NOLOCK)
                INNER JOIN HUM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                INNER JOIN HBS100T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE
                                                  AND A.SUB_CODE  = C.DUTY_CODE
                                                  AND B.PAY_CODE  = C.PAY_CODE
        WHERE   A.COMP_CODE     = #{S_COMP_CODE}
        AND     A.MAIN_CODE     = 'H033'
        AND     A.SUB_CODE &lt;&gt; '$'
        AND     B.PERSON_NUMB   =  #{PERSON_NUMB}
        AND     A.SUB_CODE NOT IN ( SELECT  DUTY_CODE
                                    FROM    HAT600T
                                    WHERE   COMP_CODE   = #{S_COMP_CODE}
                                    AND     PERSON_NUMB = #{PERSON_NUMB}
                                    AND     DUTY_YYYYMMDD   = #{DUTY_DATE})
    </insert>

    <update id="s_hat501ukr_jwServiceImpl.updateList_DutyRule_N"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.updateList_DutyRule_N */
        UPDATE  HAT600T
        SET     DUTY_NUM = '1'
          ,     UPDATE_DB_USER = #{S_USER_ID}
          ,     UPDATE_DB_TIME = GETDATE()
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_DATE}
        AND     DUTY_CODE   = #{NUMC}
    </update>

    <delete id="s_hat501ukr_jwServiceImpl.deleteList_DutyRule_N"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.deleteList_DutyRule_N */
        DELETE  FROM HAT600T
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_DATE}
    </delete>


    <delete id="s_hat501ukr_jwServiceImpl.deleteList"  parameterType="rMap">
        /* s_hat501ukr_jwServiceImpl.deleteList */
        DELETE  FROM HAT550T
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_DATE   = #{DUTY_DATE}
    </delete>

    <insert id="s_hat501ukr_jwServiceImpl.insertHAT" parameterType="Map" useGeneratedKeys="false">

        DBCC CHECKIDENT( L_HAT505T , RESEED, 0 )

        INSERT INTO L_HAT505T
        (
            KEY_VALUE
        ,   COMP_CODE
        ,   WORK_GUBUN
        ,   CARD_NUM
        ,   DUTY_DATE
        ,   DUTY_TIME
        ,   DUTY_GUBUN1
        ,   DUTY_GUBUN2
        ,   DUTY_GUBUN3
        ,   INSERT_DB_USER
        ,   INSERT_DB_TIME
        )
        SELECT  COL09
             ,  #{S_COMP_CODE}
             ,  COL01
             ,  COL02
             ,  COL03
             ,  COL04
             ,  COL05
             ,  COL06
             ,  COL07
             ,  #{S_USER_ID}
             ,  GETDATE()
        FROM    TMP_CSV_30
        WHERE   COL09 = #{KEY_VALUE}

    </insert>

    <select id="s_hat501ukr_jwServiceImpl.insertSP" parameterType="Map" resultType="rMap">
        DECLARE @COMP_CODE  NVARCHAR(08)
              , @WORK_DATE  NVARCHAR(08)
              , @KEY_VALUE  NVARCHAR(30)
              , @LOGIN_ID  NVARCHAR(100)
              , @LANG_TYPE   NVARCHAR(02)
              , @ERROR_DESC NVARCHAR(2000)

        SET @COMP_CODE  = #{COMP_CODE}
        SET @WORK_DATE  = #{WORK_DATE}
        SET @KEY_VALUE  = #{KEY_VALUE}
        SET @LANG_TYPE  = #{LANG_TYPE}
        SET @LOGIN_ID   = #{LOGIN_ID}

        EXEC unilite.USP_HUMAN_HAT500TUKR_fnInsert_VI @COMP_CODE, @WORK_DATE, @KEY_VALUE, @LANG_TYPE, @LOGIN_ID, @ERROR_DESC OUTPUT

        IF ISNULL(@ERROR_DESC, '') != ''
        BEGIN
            SELECT ISNULL(@ERROR_DESC, '')  AS errorDesc
        END
    </select>

    <update id="s_hat501ukr_jwServiceImpl.procSP" parameterType="Map" statementType="CALLABLE">
        {call USP_HUMAN_HAT505TUKR_fnSetData (
            #{COMP_CODE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{DUTY_DATE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{LOGIN_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{LANG_TYPE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{RE_TRY,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{ERROR_CODE, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
    </update>
    <!-- Excel Upload-->
    <update id="s_hat501ukr_jwServiceImpl.insertExcelUpload" parameterType="Map">
        /* s_hat501ukr_jwServiceImpl.insertExcelUpload */
        /* temp Table에 insert */
        INSERT INTO L_HAT500T_CAPS
            (
               _EXCEL_JOBID
             , _EXCEL_ROWNUM
             , _EXCEL_HAS_ERROR
             , _EXCEL_ERROR_MSG
            
             , KEY_VALUE
             , COMP_CODE
             , DUTY_DATE
             , PERSON_NUMB
             , IN_DUTY_TIME
             , OUT_DUTY_TIME

             , INSERT_DB_USER
             , INSERT_DB_TIME
        )
        VALUES (
               #{_EXCEL_JOBID}
             , #{_EXCEL_ROWNUM}
             , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR}
             , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
             
             , #{_EXCEL_JOBID}
             , #{S_COMP_CODE}
             , CASE WHEN CHARINDEX('/',#{DUTY_DATE}) != 0 THEN REPLACE(#{DUTY_DATE},'/','')
                    ELSE REPLACE(#{DUTY_DATE},'-','')
               END     
             , #{PERSON_NUMB}
             , ISNULL(#{IN_DUTY_TIME},0)
             , ISNULL(#{OUT_DUTY_TIME},0)
             , #{S_USER_ID}
             , GETDATE()
        )
    </update>


    <select id="s_hat501ukr_jwServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="String">
        /* s_hat501ukr_jwServiceImpl.selectExcelUploadSheet1 */
        SELECT TOP 1 DUTY_DATE
          FROM       L_HAT500T_CAPS
         WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
         ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>
    
    <select id="s_hat501ukr_jwServiceImpl.selectExcelUploadSheet2" parameterType="Map" resultType="String">
        /* s_hat501ukr_jwServiceImpl.selectExcelUploadSheet2 */
        SELECT TOP 1 _EXCEL_JOBID
          FROM       L_HAT500T_CAPS
         WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
         ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>



    <!-- 임시 테이블에 insert된 데이터 조회 -->
    <select id="s_hat501ukr_jwServiceImpl.getData" parameterType="Map" resultType="rMap">
        SELECT  * FROM L_HAT500T_CAPS WITH(NOLOCK)
         WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
    </select>


    <!-- 에러메세지 insert -->
    <update id="s_hat501ukr_jwServiceImpl.insertErrorMsg">
        /* s_hat501ukr_jwServiceImpl.insertErrorMsg */
        UPDATE L_HAT500T_CAPS
           SET _EXCEL_ERROR_MSG = #{MSG}
             , _EXCEL_HAS_ERROR = 'Y'
         WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
           AND _EXCEL_ROWNUM    = #{ROWNUM}
    </update>

	<select id="s_hat501ukr_jwServiceImpl.selectDutycode" parameterType="String" resultType="rMap">
		SELECT  SUB_CODE
			  		,CODE_NAME
		FROM 	BSA100T
		WHERE COMP_CODE = #{S_COMP_CODE}
		AND MAIN_CODE = 'H033'
		AND USE_YN = 'Y'
		AND REF_CODE5 = 'Y'
	</select>
</mapper>