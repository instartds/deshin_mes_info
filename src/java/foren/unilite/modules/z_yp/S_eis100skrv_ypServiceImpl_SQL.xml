<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_eis100skrv_ypServiceImpl">
   
	<select id="s_eis100skrv_ypServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_eis000skrv_ypServiceImpl.selectList */
		DECLARE @COMP_CODE		NVARCHAR(08)
			  , @DIV_CODE		NVARCHAR(08)
			  , @QUERY_YEAR		NVARCHAR(04)
			  , @QUERY_MONTH	NVARCHAR(06)
			  , @AMOUNT_UNIT	INT
 
		SET @COMP_CODE		= #{S_COMP_CODE}
		SET @DIV_CODE		= #{DIV_CODE}
		SET @QUERY_MONTH	= #{QUERY_MONTH}
		SET @QUERY_YEAR		= SUBSTRING(@QUERY_MONTH, 1, 4)
		
		--입력된 금액단위로 보여줌
		SELECT @AMOUNT_UNIT	= REF_CODE1
		  FROM BSA100T WITH(NOLOCK)
		 WHERE MAIN_CODE	= 'B042'
		   AND SUB_CODE		= #{MONEY_UNIT}
		   
		SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 1000000)


		--품목구분을 구하기 위한 로직(품목 대분류만)
		SELECT A.COMP_CODE
			 , A.LEVEL_NAME														AS GUBUN
			--전체 누적 데이터
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_SUM_BUY_Q		, 0))					, 'S_FSET_QS')			AS TOT_SUM_BUY_Q
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_SUM_AMOUNT_I	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS TOT_SUM_AMOUNT_I
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_IN_BUY_Q		, 0))					, 'S_FSET_QS')			AS TOT_IN_BUY_Q
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_IN_AMOUNT_I		, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS TOT_IN_AMOUNT_I
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_OUT_BUY_Q		, 0))					, 'S_FSET_QS')			AS TOT_OUT_BUY_Q
			 ,unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.TOT_OUT_AMOUNT_I	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS TOT_OUT_AMOUNT_I
			--월별 누적 데이터
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_SUM_BUY_Q		, 0))					, 'S_FSET_QS')			AS MON_SUM_BUY_Q
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_SUM_AMOUNT_I	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS MON_SUM_AMOUNT_I
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_IN_BUY_Q		, 0))					, 'S_FSET_QS')			AS MON_IN_BUY_Q
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_IN_AMOUNT_I	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS MON_IN_AMOUNT_I
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_OUT_BUY_Q		, 0))					, 'S_FSET_QS')			AS MON_OUT_BUY_Q
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.MON_OUT_AMOUNT_I	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')			AS MON_OUT_AMOUNT_I
			<foreach collection="MONTH" item="item" index="index">
			--월별 데이터
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.SUM_BUY_Q${index + 1}		, 0))					, 'S_FSET_QS')	AS SUM_BUY_Q${index + 1}
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.SUM_AMOUNT_I${index + 1}	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')	AS SUM_AMOUNT_I${index + 1}
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.IN_BUY_Q${index + 1}		, 0))					, 'S_FSET_QS')	AS IN_BUY_Q${index + 1}
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.IN_AMOUNT_I${index + 1}	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')	AS IN_AMOUNT_I${index + 1}
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.OUT_BUY_Q${index + 1}		, 0))					, 'S_FSET_QS')	AS OUT_BUY_Q${index + 1}
			 , unilite.fnFormatComp(@COMP_CODE, SUM(ISNULL(Z.OUT_AMOUNT_I${index + 1}	, 0))	/ @AMOUNT_UNIT	, 'S_FSET_PS')	AS OUT_AMOUNT_I${index + 1}
			</foreach>

			 --, A.LEVEL1
			 --, A.LEVEL2
			 --, A.LEVEL3
			 --, A.USE_YN
			 --, Z.*
		  FROM BPR000T A WITH (NOLOCK)
		  LEFT JOIN (
					--매입현황 조회
					--누적
					SELECT A.COMP_CODE
						 , A.ITEM_CODE
						 , CASE WHEN ISNULL(ITEM_LEVEL1, '') = '' THEN '*'
								ELSE ITEM_LEVEL1
						   END													AS ITEM_LEVEL1
						 , ISNULL(D.AREA_TYPE, '')								AS AREA_TYPE			--관내/외 구분을 위한 지역구분
						--전체 누적
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR THEN A.BUY_Q
								ELSE 0
						   END													AS TOT_SUM_BUY_Q		--(전체)누적매입액 합계용 수량
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR THEN A.AMOUNT_I
								ELSE 0
						   END													AS TOT_SUM_AMOUNT_I		--(전체)누적매입액 합계용 금액
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.BUY_Q
								ELSE 0
						   END													AS TOT_IN_BUY_Q			--(전체)누적매입액 관내용 수량
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.AMOUNT_I
								ELSE 0
						   END													AS TOT_IN_AMOUNT_I		--(전체)누적매입액 관내용 금액
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.BUY_Q
								ELSE 0
						   END													AS TOT_OUT_BUY_Q		--(전체)누적매입액 관외용 수량
						 , CASE WHEN SUBSTRING(B.CHANGE_BASIS_DATE,1, 4) = @QUERY_YEAR AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.AMOUNT_I
								ELSE 0
						   END													AS TOT_OUT_AMOUNT_I		--(전체)누적매입액 관외용 금액

						--월별 누적
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) THEN A.BUY_Q
								ELSE 0
						   END													AS MON_SUM_BUY_Q		--(월별)누적매입액 합계용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) THEN A.AMOUNT_I
								ELSE 0
						   END													AS MON_SUM_AMOUNT_I		--(월별)누적매입액 합계용 금액
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.BUY_Q
								ELSE 0
						   END													AS MON_IN_BUY_Q			--(월별)누적매입액 관내용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.AMOUNT_I
								ELSE 0
						   END													AS MON_IN_AMOUNT_I		--(월별)누적매입액 관내용 금액
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.BUY_Q
								ELSE 0
						   END													AS MON_OUT_BUY_Q		--(월별)누적매입액 관외용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH) AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.AMOUNT_I
								ELSE 0
						   END													AS MON_OUT_AMOUNT_I		--(월별)누적매입액 관외용 금액

						--월별 데이터
			<foreach collection="MONTH" item="item" index="index">
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) THEN A.BUY_Q
								ELSE 0
						   END													AS SUM_BUY_Q${index + 1}			--(월별)매입액 합계용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) THEN A.AMOUNT_I
								ELSE 0
						   END													AS SUM_AMOUNT_I${index + 1}			--(월별)매입액 합계용 금액
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.BUY_Q
								ELSE 0
						   END													AS IN_BUY_Q${index + 1}				--(월별)매입액 관내용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) AND ISNULL(E.REF_CODE2, '') = 'Y' THEN A.AMOUNT_I
								ELSE 0
						   END													AS IN_AMOUNT_I${index + 1}			--(월별)매입액 관내용 금액
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.BUY_Q
								ELSE 0
						   END													AS OUT_BUY_Q${index + 1}			--(월별)매입액 관외용 수량
						 , CASE WHEN (SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) = @QUERY_YEAR + #{item}) AND ISNULL(E.REF_CODE2, '') = 'N' THEN A.AMOUNT_I
								ELSE 0
						   END													AS OUT_AMOUNT_I${index + 1}			--(월별)매입액 관외용 금액
			</foreach>

					  FROM		MAP200T A WITH(NOLOCK)
					 INNER JOIN MAP100T B WITH(NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
													  AND B.DIV_CODE		= A.DIV_CODE
													  AND B.BILL_DIV_CODE	= A.BILL_DIV_CODE
													  AND B.CUSTOM_CODE		= A.CUSTOM_CODE
													  AND B.CHANGE_BASIS_NUM= A.CHANGE_BASIS_NUM
													  --AND SUBSTRING(B.CHANGE_BASIS_DATE,1, 6) BETWEEN @QUERY_YEAR + '01' AND @QUERY_MONTH
					 INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE		= A.COMP_CODE
													  AND C.ITEM_CODE		= A.ITEM_CODE
					 INNER JOIN BCM100T D WITH(NOLOCK) ON D.COMP_CODE		= A.COMP_CODE
													  AND D.CUSTOM_CODE		= A.CUSTOM_CODE
					  LEFT JOIN BSA100T E WITH(NOLOCK) ON E.COMP_CODE		= D.COMP_CODE
													  AND E.MAIN_CODE		= 'B056'
													  AND E.SUB_CODE		= D.AREA_TYPE
													  AND ( E.REF_CODE2 = 'Y' OR E.REF_CODE2 = 'N' )

					 WHERE A.COMP_CODE	= @COMP_CODE
					   AND A.DIV_CODE	= @DIV_CODE
		  ) Z																									ON Z.COMP_CODE		= A.COMP_CODE
																											   AND Z.ITEM_LEVEL1	= A.LEVEL1
		 WHERE A.COMP_CODE	= @COMP_CODE
		   AND A.LEVEL2		= '*'
		   AND A.LEVEL3		= '*'
		   AND A.USE_YN		= 'Y'
		 GROUP BY A.COMP_CODE, A.LEVEL_NAME
		 --ORDER BY A.LEVEL1, A.LEVEL2, A.LEVEL3 



/*
		SELECT SUM(BUY_Q), SUM(AMOUNT_I) FROM MAP200T

		--관내/외 구분을 위한 로직
		SELECT CASE WHEN REF_CODE2 = 'Y' THEN '관내'
					WHEN REF_CODE2 = 'N' THEN '관외'
					ELSE ''
			   END
			 , * 
		  FROM BSA100T WITH(NOLOCK)
		 WHERE COMP_CODE	= 'MASTER'
		   AND MAIN_CODE	= 'B056'



		SELECT CASE WHEN B.REF_CODE2 = 'Y' THEN '관내'
					WHEN B.REF_CODE2 = 'N' THEN '관외'
					ELSE ''
			   END
			 , AREA_TYPE, * 
		  FROM		 BCM100T A WITH(NOLOCK)
		  LEFT JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
										   AND B.MAIN_CODE	= 'B056'
										   AND B.SUB_CODE	= A.AREA_TYPE
										   AND ( B.REF_CODE2 = 'Y' OR B.REF_CODE2 = 'N')
		 WHERE ISNULL(A.AREA_TYPE, '') != ''
*/
	</select>
</mapper>