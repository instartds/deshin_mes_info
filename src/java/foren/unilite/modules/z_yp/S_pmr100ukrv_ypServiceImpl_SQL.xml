<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_pmr100ukrv_ypServiceImpl">

	<!--작업지시 조회 -->
	<select id="s_pmr100ukrv_ypServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">		<!-- 작업실적등록 조회 -->
		/* s_pmr100ukrv_ypServiceImpl.selectDetailList */
		 BEGIN
			 DECLARE	@COMP_CODE			NVARCHAR(08)		-- (필수 9.) 법인코드
					  , @DIV_CODE			NVARCHAR(08)		-- (필수 0.) 사업장코드
					  , @WORK_SHOP_CODE		NVARCHAR(08)		-- (필수 1.) 작업장코드
					  , @FROM_PRODT			NVARCHAR(08)		-- (선택 2.) From 착수예정일
					  , @TO_PRODT			NVARCHAR(08)		-- (선택 3.) To 착수예정일
					  , @ITEM_CODE			NVARCHAR(20)		-- (선택 4.) 품목코드
					  , @CONTROL_STATUS		NVARCHAR(01)		-- (선택 5.) 작업실적 상태
					  , @CONTROL_STATUS1	NVARCHAR(01)		-- (선택10.) 작업실적 상태
					  , @CONTROL_STATUS2	NVARCHAR(01)		-- (선택11.) 작업실적 상태
					  , @TOP_WKORD_NUM		NVARCHAR(20)		-- (선택 8.) (통합)작업지시 번호
					  , @WKORD_NUM			NVARCHAR(20)		-- (선택 8.) 작업지시 번호
					  , @USER_ID			NVARCHAR(100)		-- (선택 7.) User ID
					  , @ORDER_TYPE         NVARCHAR(08)        -- (선택 7.) 판매유형

			 SET @COMP_CODE			= #{S_COMP_CODE}
			 SET @DIV_CODE			= #{DIV_CODE}
			 SET @WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
			 SET @FROM_PRODT		= #{PRODT_START_DATE_FR}
			 SET @TO_PRODT			= #{PRODT_START_DATE_TO}
			 SET @ITEM_CODE			= #{ITEM_CODE}
			 SET @CONTROL_STATUS	= #{CONTROL_STATUS}
			 SET @CONTROL_STATUS1	= #{CONTROL_STATUS}
			 SET @CONTROL_STATUS2	= #{CONTROL_STATUS}
			 SET @TOP_WKORD_NUM		= #{TOP_WKORD_NUM}
			 SET @WKORD_NUM			= #{WKORD_NUM}
			 SET @USER_ID			= #{S_USER_ID}
			 SET @ORDER_TYPE        = #{ORDER_TYPE}

			 -- s_pmr100ukrv_yp.Cs_pmr100ukrv_yp[fnPmr100QStd] Query1
			 SELECT
					A.*
			 FROM   (
					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , ISNULL(A.WKORD_STATUS, '2') AS CONTROL_STATUS
						 , A.TOP_WKORD_NUM
						 , A.WKORD_NUM
						 , A.PROG_WORK_CODE
						 , A.WORK_SHOP_CODE
						 , A.ITEM_CODE
						 , UNILITE.FNITEMNAMECOMP(A.COMP_CODE, @USER_ID, A.ITEM_CODE)	AS ITEM_NAME
						 , C1.SPEC
						 , C1.STOCK_UNIT
						 , uniLITE.fnFormat(A.COMP_CODE, A.WKORD_Q, 'P_FSET_QS')		AS WKORD_Q
						 , uniLITE.fnFormat(A.COMP_CODE, A.WORK_Q,  'P_FSET_QS')		AS WORK_Q
						 , uniLITE.fnFormat(A.COMP_CODE, A.PRODT_Q, 'P_FSET_QS')		AS PRODT_Q
						 , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PRODT_START_DATE)	AS PRODT_START_DATE
						 , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PRODT_END_DATE)		AS PRODT_END_DATE
						 , A.REMARK
						 , A.WK_PLAN_NUM
						 , A.LINE_END_YN
						 , A.WORK_END_YN
						 , A.LINE_SEQ
						 , A.PROG_UNIT
						 , uniLITE.fnFormat(A.COMP_CODE, A.PROG_UNIT_Q, 'P_FSET_QS')	AS PROG_UNIT_Q
						 , C2.OUT_METH
						 , '' AS AB
						 , A.PROJECT_NO
						 , A.LOT_NO
						 , CASE WHEN ISNULL(C2.RESULT_YN, '') = '' THEN '2'
						 		ELSE ISNULL(C2.RESULT_YN, '')
						   END															AS RESULT_YN	-- 생산실적시 영업 자동입고 방법
						 , C2.INSPEC_YN																	-- 생산실적시 영업 출하검사 방법
						 , C2.WH_CODE																	-- 기준창고
						 , ISNULL(C2.BASIS_P, 0) AS BASIS_P												-- 재고금액
					FROM			  PMP100TV1 A  WITH (NOLOCK)
						   INNER JOIN BPR100T   C1 WITH (NOLOCK) ON C1.COMP_CODE = A.COMP_CODE
																AND C1.ITEM_CODE = A.ITEM_CODE
						   INNER JOIN BPR200T   C2 WITH (NOLOCK) ON C2.COMP_CODE = A.COMP_CODE
																AND C2.DIV_CODE  = A.DIV_CODE
																AND C2.ITEM_CODE = A.ITEM_CODE

						   INNER JOIN PMP100T   D WITH  (NOLOCK) ON D.COMP_CODE	     = A.COMP_CODE
															    AND D.DIV_CODE	     = A.DIV_CODE
															  --AND D.ITEM_CODE	     = A.ITEM_CODE
															    AND D.WORK_SHOP_CODE = A.WORK_SHOP_CODE
															    AND D.WKORD_NUM      = A.WKORD_NUM
						   LEFT JOIN SOF110T    E WITH (NOLOCK)  ON E.COMP_CODE    = A.COMP_CODE
                                                                AND E.OUT_DIV_CODE = A.DIV_CODE
                                                                AND E.ORDER_NUM    = A.ORDER_NUM
                                                                AND E.SER_NO       = A.SER_NO
                           LEFT JOIN SOF100T    F WITH (NOLOCK)  ON F.COMP_CODE    = E.COMP_CODE
                                                                AND F.DIV_CODE     = E.DIV_CODE
                                                                AND F.ORDER_NUM    = E.ORDER_NUM
<!-- 		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
						   INNER JOIN PMP100T   D  WITH (NOLOCK) ON D.COMP_CODE		= @COMP_CODE
																AND D.DIV_CODE		= @DIV_CODE
																AND D.ITEM_CODE		= @ITEM_CODE
																AND D.WORK_SHOP_CODE= @WORK_SHOP_CODE
	 															AND D.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN D.PRODT_START_DATE
																									ELSE @FROM_PRODT
																							   END
																AND D.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT		= ''  THEN D.PRODT_START_DATE
																									ELSE @TO_PRODT
																							   END
		</if> -->
					WHERE A.COMP_CODE		= @COMP_CODE
					  AND A.DIV_CODE		= @DIV_CODE
					  AND A.WORK_SHOP_CODE	= @WORK_SHOP_CODE
					  AND A.LINE_END_YN		= 'Y'
					  AND A.WORK_END_YN		= CASE WHEN @CONTROL_STATUS != '8' THEN A.WORK_END_YN
					  														   ELSE 'Y'
					  						  END
					  AND A.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN A.PRODT_START_DATE
														ELSE @FROM_PRODT
												   END
					  AND A.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT		= ''  THEN A.PRODT_START_DATE
														ELSE @TO_PRODT
												   END
					  AND (A.ITEM_CODE		LIKE CASE WHEN @ITEM_CODE		= ''  THEN A.ITEM_CODE
													  ELSE @ITEM_CODE
												 END + '%'
				<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
							AND
						   A.TOP_WKORD_NUM = D.TOP_WKORD_NUM
				</if>
						  )
					<if test="@foren.Ognl@isNotEmpty(TOP_WKORD_NUM)">
					  AND A.TOP_WKORD_NUM	= @TOP_WKORD_NUM
					</if>
					<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
                      AND F.ORDER_TYPE   = @ORDER_TYPE
                    </if>
					) A
			 WHERE  (
					(@CONTROL_STATUS = '') OR (@CONTROL_STATUS  != ''  AND A.CONTROL_STATUS  = @CONTROL_STATUS )
										   OR (@CONTROL_STATUS1 != ''  AND A.CONTROL_STATUS  = @CONTROL_STATUS1)
										   OR (@CONTROL_STATUS2 != ''  AND A.CONTROL_STATUS  = @CONTROL_STATUS2)
					)
		 ORDER BY A.COMP_CODE, A.DIV_CODE, A.TOP_WKORD_NUM, A.WKORD_NUM
		 END
	</select>

	<select id="s_pmr100ukrv_ypServiceImpl.autoNum" parameterType="Map" resultType="rMap">
		--UBFuncKrv.CBFuncKr[fnAutoNo] Query01
		BEGIN
			DECLARE	 @AUTO_NUM	  NVARCHAR(20),
						@REGDATE	   NVARCHAR(8)
			SET @REGDATE = CONVERT(NVARCHAR(8), GETDATE(), 112)
			EXEC SP_GetAutoNumComp #{S_COMP_CODE}, #{DIV_CODE}, 'PMR100T', 'P', @REGDATE, '', @AUTO_NUM OUTPUT

			IF ISNULL(@AUTO_NUM, '') != ''
			   SELECT @AUTO_NUM AS PRODT_NUM
			ELSE
			   SELECT TOP 0 '' AS PRODT_NUM

		END
	</select>

	<!-- 생산내역 조회 -->
	<select id="s_pmr100ukrv_ypServiceImpl.selectDetailList2" parameterType="Map" resultType="rMap">		<!-- 제품 조회 -->
		/* s_pmr100ukrv_ypServiceImpl.selectDetailList2 */
		BEGIN
			DECLARE @COMP_CODE			NVARCHAR(08)		-- (필수 1.) 법인코드
				  , @DIV_CODE			NVARCHAR(08)		-- (필수 2.) 사업장코드
				  , @WORK_SHOP_CODE		NVARCHAR(08)		-- (필수 3.) 작업장코드
				  , @USER_ID			NVARCHAR(100)		-- (필수 5.) User ID
				  , @TOP_WKORD_NUM		NVARCHAR(20)		-- (선택 1.) 작업지시 번호 (통합)
				  , @FROM_PRODT			NVARCHAR(08)		-- (선택 2.) From 착수예정일
				  , @TO_PRODT			NVARCHAR(08)		-- (선택 3.) To 착수예정일
				  , @ITEM_CODE			NVARCHAR(20)		-- (선택 4.) 품목코드
				  , @CONTROL_STATUS		NVARCHAR(01)		-- (선택 5.) 작업실적 상태
				  , @CONTROL_STATUS1	NVARCHAR(01)		-- (선택10.) 작업실적 상태
				  , @CONTROL_STATUS2	NVARCHAR(01)		-- (선택11.) 작업실적 상태

			SET @COMP_CODE			= #{S_COMP_CODE}
			SET @DIV_CODE			= #{DIV_CODE}
			SET @WORK_SHOP_CODE		= #{WORK_SHOP_CODE}
			SET @TOP_WKORD_NUM		= #{TOP_WKORD_NUM}
			SET @FROM_PRODT			= #{PRODT_START_DATE_FR}
			SET @TO_PRODT			= #{PRODT_START_DATE_TO}
			SET @ITEM_CODE			= #{ITEM_CODE}
			SET @CONTROL_STATUS		= #{CONTROL_STATUS}
			SET @CONTROL_STATUS1	= #{CONTROL_STATUS}
			SET @CONTROL_STATUS2	= #{CONTROL_STATUS}
			SET @USER_ID			= #{S_USER_ID}

			SELECT
				   A.LINE_SEQ																		AS SEQ
				 , A.TOP_WKORD_NUM
				 , A.DIV_CODE
				 , A.ITEM_CODE
				 , A.WORK_SHOP_CODE
				 , uniLITE.fnItemNameComp(A.COMP_CODE, @USER_ID, A.ITEM_CODE) AS ITEM_NAME
				 , B.SPEC
				 , A.PROG_WORK_CODE
				 , C1.PROG_WORK_NAME
				 , C1.PROG_UNIT
				 , UNILITE.fnFormat(A.COMP_CODE, A.WKORD_Q, 'P_FSET_QS')							AS PROG_WKORD_Q
				 , UNILITE.fnFormat(A.COMP_CODE, A.PRODT_Q, 'P_FSET_QS')							AS SUM_Q
--				 , UNILITE.fnGetUserdateComp(A.COMP_CODE, CONVERT(NVARCHAR(10), GETDATE(), 112))	AS PRODT_DATE
				-- , A.PRODT_START_DATE																AS PRODT_DATE
				 , CASE WHEN ISNULL(F.PRODT_DATE, '') = '' THEN UNILITE.fnGetUserdateComp(A.COMP_CODE, CONVERT(NVARCHAR(10), GETDATE(), 112))
				 		ELSE ISNULL(F.PRODT_DATE, '')
				   END																				AS PRODT_DATE
				 , SUM(F.PASS_Q)																	AS PASS_Q
				 , SUM(F.GOOD_WORK_Q)																AS GOOD_WORK_Q
				 , SUM(F.BAD_WORK_Q)																AS BAD_WORK_Q
				 , CASE WHEN UNILITE.fnFormat(A.COMP_CODE, A.WKORD_Q - A.PRODT_Q, 'P_FSET_QS') &lt; 0 THEN 0
						ELSE UNILITE.fnFormat(A.COMP_CODE, A.WKORD_Q - A.PRODT_Q, 'P_FSET_QS')
				   END																				AS JAN_Q
				 , uniLITE.fnFormat(A.COMP_CODE, ISNULL(A.IN_STOCK_Q, 0), 'P_FSET_QS')				AS IN_STOCK_Q
				 , 1																				AS MAN_HOUR
				 , 0																				AS WORK_Q
				 , A.WKORD_NUM
				 , A.LINE_END_YN
				 , A.WK_PLAN_NUM
				-- , F.PRODT_NUM																		AS PRODT_NUM
				 , A.WKORD_STATUS																	AS CONTROL_STATUS
				-- , CASE WHEN A.LINE_END_YN = 'Y' THEN A.LOT_NO ELSE '' END						AS LOT_NO
				 , ''																				AS FR_SERIAL_NO
				 , ''																				AS TO_SERIAL_NO
				 , ''																				AS REMARK
				 , ''																				AS UPDATE_DB_USER
				 , ''																				AS UPDATE_DB_TIME
				 , A.COMP_CODE
				 , CASE WHEN ISNULL(C2.RESULT_YN, '') = '' THEN '2'
				 		ELSE ISNULL(C2.RESULT_YN, '')
				   END																				AS RESULT_YN		-- 생산실적시 영업 자동입고 방법
				 -- 임시
				 , C2.WH_CODE																		AS GOOD_WH_CODE		-- 양품창고
				 , CASE WHEN ISNULL(C2.WH_PRSN, '') = '' THEN (SELECT MIN(SUB_CODE) FROM BSA100T
																WHERE MAIN_CODE = 'B024'
																  AND SUB_CODE != '$')
														  ELSE C2.WH_PRSN
				   END																				AS GOOD_PRSN		-- 양품창고 담당
				 , C2.WH_CODE																		AS BAD_WH_CODE		-- 불량창고
				 , CASE WHEN ISNULL(C2.WH_PRSN, '') = '' THEN (SELECT MIN(SUB_CODE) FROM BSA100T
																WHERE MAIN_CODE = 'B024'
																  AND SUB_CODE != '$')
														  ELSE C2.WH_PRSN
				   END																				AS BAD_PRSN			-- 양품창고 담당
				 , A.LOT_NO
				 , F.PRODT_NUM
			FROM			  PMP100TV1 A WITH (NOLOCK)
				   INNER JOIN BPR100T	B WITH (NOLOCK) ON B.COMP_CODE			= A.COMP_CODE
													   AND B.ITEM_CODE			= A.ITEM_CODE
				   LEFT  JOIN PBS200T  C1 WITH (NOLOCK) ON C1.COMP_CODE			= A.COMP_CODE
													   AND C1.DIV_CODE			= A.DIV_CODE
													   AND C1.WORK_SHOP_CODE	= A.WORK_SHOP_CODE
													   AND C1.PROG_WORK_CODE	= A.PROG_WORK_CODE
				   INNER JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE = A.COMP_CODE
													   AND C2.DIV_CODE  = A.DIV_CODE
													   AND C2.ITEM_CODE = A.ITEM_CODE
				   LEFT  JOIN PMR100T	F WITH (NOLOCK) ON F.COMP_CODE		= A.COMP_CODE
													   AND F.DIV_CODE		= A.DIV_CODE
													   AND F.PROG_WORK_CODE	= A.PROG_WORK_CODE
													   AND F.WKORD_NUM		= A.WKORD_NUM
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
				   INNER JOIN PMP100T   D  WITH (NOLOCK) ON D.COMP_CODE		= @COMP_CODE
														AND D.DIV_CODE		= @DIV_CODE
														AND D.ITEM_CODE		= @ITEM_CODE
														AND D.WORK_SHOP_CODE= @WORK_SHOP_CODE
														AND D.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN D.PRODT_START_DATE
																							ELSE @FROM_PRODT
																					   END
														AND D.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT		= ''  THEN D.PRODT_START_DATE
																							ELSE @TO_PRODT
																					   END
		</if>
			WHERE A.COMP_CODE		= @COMP_CODE
			  AND A.DIV_CODE		= @DIV_CODE
		<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
			  AND A.WORK_SHOP_CODE	= @WORK_SHOP_CODE
		</if>
		<if test="@foren.Ognl@isNotEmpty(TOP_WKORD_NUM)">
			  AND A.TOP_WKORD_NUM	= @TOP_WKORD_NUM
		</if>
		<if test="@foren.Ognl@isNotEmpty(FROM_PRODT)">
			  AND A.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN A.PRODT_START_DATE
			  									ELSE @FROM_PRODT
			  							   END
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_PRODT)">
			  AND A.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT	= ''  THEN A.PRODT_START_DATE
			  									ELSE @TO_PRODT
			  							   END
		</if>
			  AND (A.ITEM_CODE		LIKE CASE WHEN @ITEM_CODE		= ''  THEN A.ITEM_CODE
											  ELSE @ITEM_CODE
										 END + '%'
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
					OR
				   A.TOP_WKORD_NUM = D.TOP_WKORD_NUM
		</if>
				  )
			  --AND ISNULL(A.WKORD_STATUS, '2') = 2
			  AND ((@CONTROL_STATUS = '') OR (@CONTROL_STATUS  != ''  AND A.WKORD_STATUS  = @CONTROL_STATUS )
										  OR (@CONTROL_STATUS1 != ''  AND A.WKORD_STATUS  = @CONTROL_STATUS1)
										  OR (@CONTROL_STATUS2 != ''  AND A.WKORD_STATUS  = @CONTROL_STATUS2))
		GROUP BY  A.LINE_SEQ
				, A.TOP_WKORD_NUM
				, A.WKORD_NUM
				, A.DIV_CODE
				, A.ITEM_CODE
				, A.WORK_SHOP_CODE
				, A.COMP_CODE
				, B.SPEC
				, A.PROG_WORK_CODE
				, A.PRODT_START_DATE
				, C1.PROG_WORK_NAME
				, C1.PROG_UNIT
				, A.WKORD_Q
				, A.PRODT_Q
				, A.IN_STOCK_Q
				, A.LINE_END_YN
				, A.WK_PLAN_NUM
				, A.LOT_NO
				, A.WKORD_STATUS
				, C2.RESULT_YN
				, C2.WH_CODE
				, C2.WH_PRSN
				, F.PRODT_NUM
				, F.PRODT_DATE
		 ORDER BY A.COMP_CODE, A.DIV_CODE, A.TOP_WKORD_NUM, A.WKORD_NUM
		END
	</select>

	<!-- 원재료 조회 -->
	<select id="s_pmr100ukrv_ypServiceImpl.selectDetailList3" parameterType="Map" resultType="rMap">		<!-- 원재료 조회 -->
		/* s_pmr100ukrv_ypServiceImpl.selectDetailList3 */
		BEGIN
			DECLARE @COMP_CODE			NVARCHAR(08)		-- (필수 4.) 법인코드
				  , @DIV_CODE			NVARCHAR(08)		-- (필수 1.) 사업장코드
				  , @WORK_SHOP_CODE		NVARCHAR(08)		-- (필수 2.) 작업장코드
				  , @TOP_WKORD_NUM		NVARCHAR(20)		-- (선택 3.) 작업지시 번호(통합)
				  , @ITEM_CODE			NVARCHAR(20)		-- (선택 4.) 품목코드
				  , @USER_ID			NVARCHAR(100)		-- (선택 7.) User ID

			SET @COMP_CODE		= #{S_COMP_CODE}
			SET @DIV_CODE		= #{DIV_CODE}
			SET @WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
			SET @TOP_WKORD_NUM	= #{TOP_WKORD_NUM}
			SET @ITEM_CODE		= #{ITEM_CODE}
			SET @USER_ID		= #{S_USER_ID}

		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.WORK_SHOP_CODE
			 , A.TOP_WKORD_NUM
			 --, A.WKORD_NUM
			 , A.REF_TYPE
			 , A.PATH_CODE
			 , A.ITEM_CODE
			 , B.ITEM_NAME
			 , B.SPEC
			 , B.STOCK_UNIT
--			 , unilite.fnFormat(A.COMP_CODE, SUM(A.ALLOCK_Q) - SUM(C.PRODT_Q), 'P_FSET_QS')								AS PRODT_Q
	<if test="CONTROL_STATUS == &quot;2&quot;">
			 , CASE WHEN unilite.fnFormat(A.COMP_CODE, SUM(A.ALLOCK_Q) - SUM(A.PRODT_Q), 'P_FSET_QS') = 0 THEN 0
					ELSE unilite.fnFormat(A.COMP_CODE, SUM(A.ALLOCK_Q) - SUM(A.PRODT_Q), 'P_FSET_QS')
			   END																										AS PRODT_Q
	</if>
	<if test="CONTROL_STATUS != &quot;2&quot;">
             --, unilite.fnFormat(A.COMP_CODE, SUM(C.PRODT_Q * A.UNIT_Q), 'P_FSET_QS')   AS PRODT_Q
             , SUM(A.ALLOCK_Q)  AS PRODT_Q
	</if>
			 , SUM(A.ALLOCK_Q)		AS ALLOCK_Q
			 , A.LOT_NO
			 --, A.LABEL_Q
			 , A.ONHAND_Q
			 , A.PRODT_YEAR
			 , A.EXP_DATE
			 , C.WKORD_STATUS		AS CONTROL_STATUS
             , SUM(D.INOUT_Q)       AS INOUT_Q
		  FROM		 PMP200T A WITH(NOLOCK)
		  INNER JOIN BPR100T B ON B.COMP_CODE = A.COMP_CODE
							  AND B.ITEM_CODE = A.ITEM_CODE
		  LEFT  JOIN PMP100T C WITH (NOLOCK)  ON C.COMP_CODE		= A.COMP_CODE
											 AND C.DIV_CODE			= A.DIV_CODE
											 AND C.WKORD_NUM		= A.WKORD_NUM
											 AND C.WORK_SHOP_CODE	= A.WORK_SHOP_CODE
          LEFT JOIN BTR100T D WITH (NOLOCK) ON A.COMP_CODE = D.COMP_CODE
                                            AND A.DIV_CODE  = D.DIV_CODE
                                            AND A.WKORD_NUM  = D.ORDER_NUM
                                            AND A.ITEM_CODE  = D.ITEM_CODE  
                                            AND A.LOT_NO     = D.LOT_NO                             
                                            AND D.INOUT_TYPE = '2'
		 WHERE A.COMP_CODE		= @COMP_CODE
		   AND A.DIV_CODE		= @DIV_CODE
		   AND A.WORK_SHOP_CODE	= @WORK_SHOP_CODE
		   AND A.TOP_WKORD_NUM	= @TOP_WKORD_NUM
	<if test="CONTROL_STATUS == &quot;2&quot;">
		   AND ISNULL(C.WKORD_STATUS, '2') = 2
	</if>
	<if test="CONTROL_STATUS == &quot;8&quot;">
		   AND ISNULL(C.WKORD_STATUS, '2') = 8
	</if>
	<if test="CONTROL_STATUS == &quot;9&quot;">
		   AND ISNULL(C.WKORD_STATUS, '2') = 9
	</if>
		   --
		 GROUP BY A.COMP_CODE, A.DIV_CODE, A.WORK_SHOP_CODE, A.TOP_WKORD_NUM,A.REF_TYPE, A.PATH_CODE, A.ITEM_CODE, B.ITEM_NAME
				, B.SPEC, B.STOCK_UNIT, A.LOT_NO, A.ONHAND_Q, A.PRODT_YEAR, A.EXP_DATE, C.WKORD_STATUS
			--, A.LABEL_Q, A.WKORD_NUM
		 ORDER BY A.COMP_CODE, A.DIV_CODE, A.TOP_WKORD_NUM
		END
	</select>

	<!-- 부산물 조회  -->
	<select id="s_pmr100ukrv_ypServiceImpl.selectDetailList4" parameterType="Map" resultType="rMap">		<!-- 부산물 조회 -->
		/* s_pmr100ukrv_ypServiceImpl.selectDetailList4 */
		 SELECT A.COMP_CODE
			  , A.DIV_CODE
			  , A.PRODT_SEQ
			  , A.WORK_SHOP_CODE
			  , A.TOP_WKORD_NUM
			  , A.WKORD_NUM
			  , A.ITEM_CODE
			  , B.ITEM_NAME
			  , B.SPEC
			  , B.STOCK_UNIT
			  , A.PRODT_DATE
			  , A.PRODT_Q
			  , A.GOOD_PRODT_Q
			  , A.BAD_PRODT_Q
			  , A.CONTROL_STATUS
			  , A.IN_STOCK_Q
			  , A.REMARK
			  , A.WH_CODE
			  , A.PROJECT_NO
			  , A.PJT_CODE
			  , A.LOT_NO
			  , A.FR_SERIAL_NO
			  , A.TO_SERIAL_NO
			  , A.INOUT_NUM
			  , A.INOUT_SEQ
		   FROM		  PMR111T A WITH(NOLOCK)
		   INNER JOIN BPR100T B WITH(NOLOCK)	ON B.COMP_CODE	= A.COMP_CODE
											   AND B.ITEM_CODE	= A.ITEM_CODE
		  WHERE A.COMP_CODE		= #{S_COMP_CODE}
			AND A.DIV_CODE		= #{DIV_CODE}
			AND A.TOP_WKORD_NUM	= #{TOP_WKORD_NUM}
	</select>

	<!-- 원재료(작업지시) 조회 -->
	<select id="s_pmr100ukrv_ypServiceImpl.selectDetailList5" parameterType="Map" resultType="rMap">		<!-- 원재료 detail 조회 -->
		/* s_pmr100ukrv_ypServiceImpl.selectDetailList5 */
			DECLARE @COMP_CODE			NVARCHAR(08)		-- (필수 1.) 법인코드
				  , @DIV_CODE			NVARCHAR(08)		-- (필수 2.) 사업장코드
				  , @WORK_SHOP_CODE		NVARCHAR(08)		-- (필수 3.) 작업장코드
				  , @USER_ID			NVARCHAR(100)		-- (필수 5.) User ID
				  , @TOP_WKORD_NUM		NVARCHAR(20)		-- (선택 1.) 작업지시 번호
				  , @WKORD_NUM			NVARCHAR(20)		-- (선택 1.) 작업지시 번호
				  , @FROM_PRODT			NVARCHAR(08)		-- (선택 2.) From 착수예정일
				  , @TO_PRODT			NVARCHAR(08)		-- (선택 3.) To 착수예정일
				  , @ITEM_CODE			NVARCHAR(20)		-- (선택 4.) 품목코드
				  , @CONTROL_STATUS		NVARCHAR(01)		-- (선택 5.) 작업실적 상태
				  , @CONTROL_STATUS1	NVARCHAR(01)		-- (선택10.) 작업실적 상태
				  , @CONTROL_STATUS2	NVARCHAR(01)		-- (선택11.) 작업실적 상태

			SET @COMP_CODE			= #{S_COMP_CODE}
			SET @DIV_CODE			= #{DIV_CODE}
			SET @WORK_SHOP_CODE		= #{WORK_SHOP_CODE}
			SET @TOP_WKORD_NUM		= #{TOP_WKORD_NUM}
			SET @WKORD_NUM			= #{WKORD_NUM}
			SET @FROM_PRODT			= #{PRODT_START_DATE_FR}
			SET @TO_PRODT			= #{PRODT_START_DATE_TO}
			SET @ITEM_CODE			= #{ITEM_CODE}
			SET @CONTROL_STATUS		= #{CONTROL_STATUS}
			SET @CONTROL_STATUS1	= #{CONTROL_STATUS}
			SET @CONTROL_STATUS2	= #{CONTROL_STATUS}
			SET @USER_ID			= #{S_USER_ID}

		SELECT
			   A.COMP_CODE
			 , A.DIV_CODE
			 , A.TOP_WKORD_NUM
			 , A.WKORD_NUM
			 , A.ITEM_CODE
			 , B.ITEM_NAME
			 , B.SPEC
			 , B.STOCK_UNIT
			 , A.REF_TYPE
			 , A.PATH_CODE
			 , A.WORK_SHOP_CODE
			 , A.ALLOCK_Q
			 , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.OUTSTOCK_REQ_DATE)		AS OUTSTOCK_REQ_DATE
			 , unilite.fnFormat(A.COMP_CODE, A.OUTSTOCK_REQ_Q, 'P_FSET_QS')		AS OUTSTOCK_REQ_Q
			 , unilite.fnFormat(A.COMP_CODE, A.UNIT_Q, 'P_FSET_QS')				AS UNIT_Q
			 , A.LOSS_RATE
			 , A.OUTSTOCK_NUM
			 , A.OUT_METH
			 , A.REF_ITEM_CODE
			 , A.EXCHG_YN
			 , A.REMARK
			 , A.PROJECT_NO
			 , A.PJT_CODE
			 , A.LOT_NO
			 , A.GRANT_TYPE
			 , CASE WHEN ISNULL(A.WH_CODE, '') = '' THEN X.WH_CODE
			 		ELSE A.WH_CODE
			   END																AS WH_CODE
			 , C.WKORD_STATUS													AS CONTROL_STATUS
			<!--  , CASE WHEN unilite.fnFormat(A.COMP_CODE, (C.WKORD_Q - C.PRODT_Q) * A.UNIT_Q, 'P_FSET_QS') &lt; 0 THEN 0
			 		ELSE unilite.fnFormat(A.COMP_CODE, (C.WKORD_Q - C.PRODT_Q) * A.UNIT_Q, 'P_FSET_QS')
			   END																AS PRODT_Q -->
			 , A.ALLOCK_Q - A.PRODT_Q AS PRODT_Q
			 , unilite.fnFormat(A.COMP_CODE, Z.STOCK_Q, 'P_FSET_QS')			AS ONHAND_Q
			 --, unilite.fnFormat(A.COMP_CODE, A.ONHAND_Q, 'P_FSET_QS')			AS ONHAND_Q
			 , unilite.fnFormat(A.COMP_CODE, A.IN_PLAN_Q, 'P_FSET_QS')			AS IN_PLAN_Q
			 , unilite.fnFormat(A.COMP_CODE, A.OUT_PLAN_Q, 'P_FSET_QS')			AS OUT_PLAN_Q
			 --, unilite.fnFormat(A.COMP_CODE, A.PREV_ALLOCK_Q, 'P_FSET_QS')	AS PREV_ALLOCK_Q
			 --, A.PRODT_YEAR
			 --, A.EXP_DATE
	<if test="CONTROL_STATUS == &quot;2&quot;">
			 , UNILITE.fnGetUserdateComp(A.COMP_CODE, CONVERT(NVARCHAR(10), GETDATE(), 112))	AS INOUT_DATE
	</if>
	<if test="CONTROL_STATUS != &quot;2&quot;">
			 , C.PRODT_START_DATE																AS INOUT_DATE
	</if>
			 , A.UNIT_Q

		 FROM			 PMP200T A WITH (NOLOCK)
			  INNER JOIN BPR100T B WITH (NOLOCK)  ON B.COMP_CODE		= A.COMP_CODE
												 AND B.ITEM_CODE		= A.ITEM_CODE
			  INNER JOIN BPR200T X WITH (NOLOCK)  ON X.COMP_CODE		= A.COMP_CODE
												 AND X.DIV_CODE			= A.DIV_CODE
												 AND X.ITEM_CODE		= A.ITEM_CODE
			  LEFT  JOIN PMP100T C WITH (NOLOCK)  ON C.COMP_CODE		= A.COMP_CODE
												 AND C.DIV_CODE			= A.DIV_CODE
												 AND C.WKORD_NUM		= A.WKORD_NUM
												 AND C.WORK_SHOP_CODE	= A.WORK_SHOP_CODE
			  LEFT  JOIN BIV100T Z WITH (NOLOCK)  ON Z.COMP_CODE		= A.COMP_CODE
												 AND Z.DIV_CODE			= A.DIV_CODE
												 AND Z.WH_CODE			= X.WH_CODE
												 AND Z.ITEM_CODE		= A.ITEM_CODE
<!-- 	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			  INNER JOIN PMP100T D WITH (NOLOCK) ON D.COMP_CODE		= @COMP_CODE
												AND D.DIV_CODE		= @DIV_CODE
												AND D.ITEM_CODE		= @ITEM_CODE
												AND D.WORK_SHOP_CODE= @WORK_SHOP_CODE
												AND D.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN D.PRODT_START_DATE
																					ELSE @FROM_PRODT
																			   END
												AND D.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT		= ''  THEN D.PRODT_START_DATE
																					ELSE @TO_PRODT
																			   END
	</if> -->
			  INNER JOIN PMP100T D WITH (NOLOCK) ON D.COMP_CODE		= A.COMP_CODE
												AND D.DIV_CODE		= A.DIV_CODE
											--	AND D.ITEM_CODE		= A.ITEM_CODE
												AND D.WORK_SHOP_CODE= A.WORK_SHOP_CODE
												AND D.WKORD_NUM = A.WKORD_NUM

		WHERE A.COMP_CODE		= @COMP_CODE
		  AND A.DIV_CODE		= @DIV_CODE
	<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		  AND A.WORK_SHOP_CODE	= @WORK_SHOP_CODE
	</if>
	<if test="@foren.Ognl@isNotEmpty(TOP_WKORD_NUM)">
		  AND A.TOP_WKORD_NUM	= @TOP_WKORD_NUM
	</if>
	<if test="@foren.Ognl@isNotEmpty(PRODT_START_DATE_FR)">
		  AND D.PRODT_START_DATE &gt;= CASE WHEN @FROM_PRODT	= ''  THEN D.PRODT_START_DATE
		  									ELSE @FROM_PRODT
		  							   END
	</if>
	<if test="@foren.Ognl@isNotEmpty(PRODT_START_DATE_TO)">
		  AND D.PRODT_START_DATE &lt;= CASE WHEN @TO_PRODT	= ''  THEN D.PRODT_START_DATE
		  									ELSE @TO_PRODT
		  							   END
	</if>
		  AND (C.ITEM_CODE		LIKE CASE WHEN @ITEM_CODE		= ''  THEN C.ITEM_CODE
										  ELSE @ITEM_CODE
									 END + '%'
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
				OR
			   A.TOP_WKORD_NUM = D.TOP_WKORD_NUM
	</if>
			  )
		  --AND ISNULL(C.WKORD_STATUS, '2') = 2
		  AND ((@CONTROL_STATUS = '')
				OR (@CONTROL_STATUS  != ''  AND C.WKORD_STATUS  = @CONTROL_STATUS )
				OR (@CONTROL_STATUS1 != ''  AND C.WKORD_STATUS  = @CONTROL_STATUS1)
				OR (@CONTROL_STATUS2 != ''  AND C.WKORD_STATUS  = @CONTROL_STATUS2)
			  )
		 ORDER BY A.COMP_CODE, A.DIV_CODE, A.TOP_WKORD_NUM, A.WKORD_NUM
	 </select>




	<update id="s_pmr100ukrv_ypServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
		{call SP_GetAutoNumComp (
			#{COMP_CODE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{DIV_CODE,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{TABLE_ID,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{PREFIX,		mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{BASIS_DATE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{AUTO_TYPE,	mode=IN,	jdbcType=VARCHAR,	javaType=java.lang.String},
			#{KEY_NUMBER,	mode=OUT,	jdbcType=VARCHAR,	javaType=java.lang.String}
		)}
	</update>

	<update id="s_pmr100ukrv_ypServiceImpl.SP_PRODT_ProductionResult_YP" parameterType="Map" statementType="CALLABLE">
		{call SP_PRODT_ProductionResult_YP (
			#{COMP_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_NUM			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{WKORD_NUM			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{GOOD_WH_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{GOOD_WH_CELL_CODE	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{GOOD_PRSN			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{GOOD_WORK_Q		, mode=IN		, jdbcType=NUMERIC		, javaType=java.lang.Double},
			#{BAD_WH_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{BAD_WH_CELL_CODE	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{BAD_PRSN			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{BAD_WORK_Q		, mode=IN		, jdbcType=NUMERIC		, javaType=java.lang.Double},
			#{CONTROL_STATUS	, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_TYPE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{STATUS			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{KEY_VALUE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{USER_ID			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT		, jdbcType=VARCHAR		, javaType=java.lang.String}
		)}
	</update>





	<!-- 제품관련 쿼리(생산량, 양/불량량) -->
	<insert id="s_pmr100ukrv_ypServiceImpl.insertList2" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.insertDetail2 (제품정보 추가) */
		INSERT INTO PMR110T
			  (COMP_CODE		, DIV_CODE			, PRODT_NUM			, WORK_SHOP_CODE	, WKORD_NUM
			 , ITEM_CODE		, PRODT_DATE		, PRODT_Q			, GOOD_PRODT_Q		, BAD_PRODT_Q
			 , CONTROL_STATUS	, MAN_HOUR			, REMARK			, PROJECT_NO		, LOT_NO
			 , FR_SERIAL_NO		, TO_SERIAL_NO
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		values
			  (#{S_COMP_CODE}	, #{DIV_CODE}		, #{PRODT_NUM}		, #{WORK_SHOP_CODE}	, #{WKORD_NUM}
			 , #{ITEM_CODE}		, #{PRODT_DATE}		, #{SUM_Q}			, #{GOOD_WORK_Q}	, #{BAD_WORK_Q}
			 , #{CONTROL_STATUS}, #{MAN_HOUR}		, #{REMARK}			, #{PROJECT_NO}		, #{LOT_NO}
			 , #{FR_SERIAL_NO}	, #{TO_SERIAL_NO}
			 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()	)
	</insert>

	<!-- 아직 사용 안 함 -->
	<update id="s_pmr100ukrv_ypServiceImpl.updateList2" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.updateDetail2 (제품정보 수정) */
		UPDATE PMR110T
		   SET WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
			 , WKORD_NUM		= #{WKORD_NUM}
			 , ITEM_CODE		= #{ITEM_CODE}
			 , PRODT_DATE		= #{PRODT_DATE}
			 , PRODT_Q			= PRODT_Q + #{SUM_Q}
			 , GOOD_PRODT_Q		= GOOD_PRODT_Q + #{GOOD_PRODT_Q}
			 , BAD_PRODT_Q		= BAD_PRODT_Q + #{BAD_PRODT_Q}
			 , CONTROL_STATUS	= #{CONTROL_STATUS}
			 , MAN_HOUR			= #{MAN_HOUR}
			 , REMARK			= #{REMARK}
			 , PROJECT_NO		= #{PROJECT_NO}
			 , PJT_CODE			= #{PJT_CODE}
			 , LOT_NO			= #{LOT_NO}
			 , FR_SERIAL_NO		= #{FR_SERIAL_NO}
			 , TO_SERIAL_NO		= #{TO_SERIAL_NO}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND PRODT_NUM		= #{PRODT_NUM}
	</update>

	<delete id="s_pmr100ukrv_ypServiceImpl.deleteList2" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.deleteDetail2 (제품정보 삭제) */
		DELETE FROM PMR110T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND PRODT_NUM	= #{PRODT_NUM}
	</delete>


	<!-- 원재료 관련 쿼리(사용 안 함) -->
	<insert id="s_pmr100ukrv_ypServiceImpl.insertList3" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.insertList3 (원재료정보 추가) */
	</insert>

	<update id="s_pmr100ukrv_ypServiceImpl.updateDetail3" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.updateDetail3 */
	</update>


	<!-- 부산물 관련 쿼리 -->
	<insert id="s_pmr100ukrv_ypServiceImpl.insertDetail4" parameterType="Map" useGeneratedKeys="false">
		/* s_pmr100ukrv_ypServiceImpl.insertDetail4 (부산물 추가) */
		INSERT INTO PMR111T
			  ( COMP_CODE
			  , DIV_CODE
			  , PRODT_SEQ
			  , WORK_SHOP_CODE
			  , TOP_WKORD_NUM
		<if test="@foren.Ognl@isNotEmpty(WKORD_NUM)">
			  , WKORD_NUM
		</if>
			  , ITEM_CODE
			  , PRODT_DATE
			  , PRODT_Q
			  , GOOD_PRODT_Q
			  , BAD_PRODT_Q
			  , CONTROL_STATUS
			  , IN_STOCK_Q
		<if test="@foren.Ognl@isNotEmpty(REMARK)">
			  , REMARK
		</if>
			  , WH_CODE
		<if test="@foren.Ognl@isNotEmpty(PROJECT_NO)">
			  , PROJECT_NO
		</if>
		<if test="@foren.Ognl@isNotEmpty(PJT_CODE)">
			  , PJT_CODE
		</if>
			  , LOT_NO
		<if test="@foren.Ognl@isNotEmpty(FR_SERIAL_NO)">
			  , FR_SERIAL_NO
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_SERIAL_NO)">
			  , TO_SERIAL_NO
		</if>
			  , INOUT_NUM
			  , INOUT_SEQ
			  , INSERT_DB_USER
			  , INSERT_DB_TIME
			  , UPDATE_DB_USER
			  , UPDATE_DB_TIME
			  )
		 VALUES
			  ( #{S_COMP_CODE}
			  , #{DIV_CODE}
			  , #{PRODT_SEQ}
			  , #{WORK_SHOP_CODE}
			  , #{TOP_WKORD_NUM}
		<if test="@foren.Ognl@isNotEmpty(WKORD_NUM)">
			  , #{WKORD_NUM}
		</if>
			  , #{ITEM_CODE}
			  , #{PRODT_DATE}
			  , #{PRODT_Q}
			  , #{GOOD_PRODT_Q}
			  , #{BAD_PRODT_Q}
			  , #{CONTROL_STATUS}
			  , #{IN_STOCK_Q}
		<if test="@foren.Ognl@isNotEmpty(REMARK)">
			  , #{REMARK}
		</if>
			  , #{WH_CODE}
		<if test="@foren.Ognl@isNotEmpty(PROJECT_NO)">
			  , #{PROJECT_NO}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PJT_CODE)">
			  , #{PJT_CODE}
		</if>
			  , #{LOT_NO}
		<if test="@foren.Ognl@isNotEmpty(FR_SERIAL_NO)">
			  , #{FR_SERIAL_NO}
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_SERIAL_NO)">
			  , #{TO_SERIAL_NO}
		</if>
			  , #{INOUT_NUM}
			  , #{INOUT_SEQ}
			  , #{S_USER_ID}
			  , GETDATE()
			  , #{S_USER_ID}
			  , GETDATE()
			  )


		/* BTR100T INSERT */
		DECLARE @MONEY_UNIT NVARCHAR(3)

		 SELECT @MONEY_UNIT  = A.SUB_CODE
		   FROM BSA100T A WITH(NOLOCK)
		  WHERE A.COMP_CODE	 = #{S_COMP_CODE}
			AND A.MAIN_CODE	 = 'B004'
			AND A.REF_CODE1	 = 'Y'
			AND A.SUB_CODE  != '$'
			AND A.USE_YN	 = 'Y'

		IF (ISNULL(@MONEY_UNIT, '') = '')
			SET @MONEY_UNIT = 'KRW'

		INSERT INTO BTR100T( COMP_CODE,		DIV_CODE,		INOUT_NUM,		INOUT_SEQ,		ITEM_CODE,		WH_CODE,			INOUT_DATE
						   , INOUT_Q,		INOUT_P,		INOUT_I,		MONEY_UNIT
						   , BILL_TYPE,		SALE_TYPE,		SALE_DIV_CODE,	SALE_CUSTOM_CODE
						   , INOUT_PRSN,	TO_DIV_CODE,	REMARK,			PROJECT_NO,		LOT_NO,			UPDATE_DB_USER,		UPDATE_DB_TIME
						   , INOUT_TYPE,	CREATE_LOC,		ITEM_STATUS,	INOUT_METH,		INOUT_TYPE_DETAIL
						   , INOUT_CODE_TYPE
						   , INOUT_CODE
						   --, ORDER_NUM,	BASIS_NUM
						)
		SELECT #{S_COMP_CODE}	AS COMP_CODE,		#{DIV_CODE}		AS DIV_CODE,		#{INOUT_NUM}	AS INOUT_NUM,		#{INOUT_SEQ}	AS INOUT_SEQ,		#{ITEM_CODE}	 AS ITEM_CODE,		#{WH_CODE}	AS WH_CODE,		#{PRODT_DATE} AS INOUT_DATE
			 , #{PRODT_Q}		AS INOUT_Q,			0				AS INOUT_P,			0				AS INOUT_I,			@MONEY_UNIT		AS MONEY_UNIT
			 , '*'				AS BILL_TYPE,		'*'				AS SALE_TYPE,		'*'				AS SLAE_DIV_CODE,	'*'				AS SALE_CUSTOM_CODE
			 , ''				AS INOUT_PRSN,		#{DIV_CODE}		AS TO_DIV_CODE
			 , #{REMARK}		AS REMARK,			#{PROJECT_NO}	AS PROJECT_NO,		#{LOT_NO}		AS LOT_NO,			#{S_USER_ID}	AS UPDATE_DB_USER,	GETDATE()		AS UPDATE_DB_TIME
			 , #{INOUT_TYPE}	AS INOUT_TYPE,		'3'				AS CREATE_LOC,		'1'				AS ITEM_STATUS,		'1'				AS INOUT_METH,		'10'			AS INOUT_TYPE_DETAIL
			 , '3'				AS INOUT_CODE_TYPE
			 , #{WORK_SHOP_CODE}	AS INOUT_CODE
			 --, @WKORD_NUM		AS ORDER_NUM,		@PRODT_NUM		AS BASIS_NUM
	</insert>

	<update id="s_pmr100ukrv_ypServiceImpl.updateDetail4" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.updateDetail4 (부산물 수정) */
		 UPDATE PMR111T
			SET PRODT_Q			= #{PRODT_Q}
			  , WH_CODE			= #{WH_CODE}
			  , UPDATE_DB_USER	= #{S_USER_ID}
			  , UPDATE_DB_TIME	= GETDATE()

		  WHERE COMP_CODE		= #{S_COMP_CODE}
			AND DIV_CODE		= #{DIV_CODE}
			AND TOP_WKORD_NUM	= #{TOP_WKORD_NUM}
			AND PRODT_SEQ		= #{PRODT_SEQ}

		/* BTR100T UPDATE */
		 UPDATE BTR100T
			SET INOUT_Q			= #{PRODT_Q}
			  , WH_CODE			= #{WH_CODE}
			  , UPDATE_DB_USER	= #{S_USER_ID}
			  , UPDATE_DB_TIME	= GETDATE()

		  WHERE COMP_CODE		= #{S_COMP_CODE}
			AND DIV_CODE		= #{DIV_CODE}
			AND INOUT_NUM		= #{INOUT_NUM}
			AND INOUT_SEQ		= #{INOUT_SEQ}
			AND INOUT_TYPE		= #{INOUT_TYPE}
	</update>

	<delete id="s_pmr100ukrv_ypServiceImpl.deleteDetail4" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.deleteDetail4 (부산물 삭제) */
		DELETE FROM PMR111T
		  WHERE COMP_CODE		= #{S_COMP_CODE}
			AND DIV_CODE		= #{DIV_CODE}
			AND TOP_WKORD_NUM	= #{TOP_WKORD_NUM}
			AND PRODT_SEQ		= #{PRODT_SEQ}

		/* BTR100T DELETE */
		 DELETE FROM BTR100T
		  WHERE COMP_CODE		= #{S_COMP_CODE}
			AND DIV_CODE		= #{DIV_CODE}
			AND INOUT_NUM		= #{INOUT_NUM}
			AND INOUT_SEQ		= #{INOUT_SEQ}
			AND INOUT_TYPE		= #{INOUT_TYPE}
	</delete>

	<update id="s_pmr100ukrv_ypServiceImpl.SP_STOCK_PeriodicAverage" parameterType="Map" statementType="CALLABLE">
		{call SP_STOCK_PeriodicAverage (
			#{S_COMP_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_NUM			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_SEQ			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{INOUT_TYPE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ITEM_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{PRODT_DATE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{WH_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{S_USER_ID			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT		, jdbcType=VARCHAR		, javaType=java.lang.String}
		)}
	</update>


	<!-- 원재료 detail 관련 쿼리 -->
	<update id="s_pmr100ukrv_ypServiceImpl.updateDetail5" parameterType="Map">
		/* s_pmr100ukrv_ypServiceImpl.updateDetail5 */
		DECLARE @MONEY_UNIT NVARCHAR(3)

		 SELECT @MONEY_UNIT  = A.SUB_CODE
		   FROM BSA100T A WITH(NOLOCK)
		  WHERE A.COMP_CODE	 = #{S_COMP_CODE}
			AND A.MAIN_CODE	 = 'B004'
			AND A.REF_CODE1	 = 'Y'
			AND A.SUB_CODE  != '$'
			AND A.USE_YN	 = 'Y'

		IF (ISNULL(@MONEY_UNIT, '') = '')
			SET @MONEY_UNIT = 'KRW'

		INSERT INTO L_PMP200T (
			   KEY_VALUE,		OPR_FLAG,		COMP_CODE,			DIV_CODE,			WKORD_NUM,		ITEM_CODE,	REF_TYPE
			 , PATH_CODE,		WORK_SHOP_CODE,	ALLOCK_Q,			OUTSTOCK_REQ_DATE,	OUTSTOCK_REQ_Q,	UNIT_Q,		LOSS_RATE
			 , OUTSTOCK_NUM,	OUT_METH,		REF_ITEM_CODE,		EXCHG_YN,			REMARK,			PROJECT_NO,	PJT_CODE
			 , LOT_NO,			GRANT_TYPE,		WH_CODE, 			PRODT_Q,			ONHAND_Q,		IN_PLAN_Q,	OUT_PLAN_Q
			 , INSERT_DB_USER,	INSERT_DB_TIME,	UPDATE_DB_USER,		UPDATE_DB_TIME
		)
		SELECT #{KEY_VALUE},	#{OPR_FLAG},	COMP_CODE,			DIV_CODE,			WKORD_NUM,		ITEM_CODE,	REF_TYPE
			 , PATH_CODE,		WORK_SHOP_CODE,	ALLOCK_Q,			OUTSTOCK_REQ_DATE,	OUTSTOCK_REQ_Q,	#{UNIT_Q},	LOSS_RATE
			 , OUTSTOCK_NUM,	OUT_METH,		REF_ITEM_CODE,		EXCHG_YN,			REMARK,			PROJECT_NO,	PJT_CODE
			 , LOT_NO,			GRANT_TYPE,		#{WH_CODE},			#{PRODT_Q},			ONHAND_Q,		IN_PLAN_Q,	OUT_PLAN_Q
			 , #{S_USER_ID},	GETDATE(),		#{S_USER_ID},		GETDATE()
		  FROM PMP200T WITH(NOLOCK)
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND WKORD_NUM	= #{WKORD_NUM}
		   AND LOT_NO = #{LOT_NO}
	</update>
















	<update id="s_pmr100ukrv_ypServiceImpl.updateDetail5_BACKUP" parameterType="Map">
		 /* s_pmr100ukrv_ypServiceImpl.updateDetail5 (원재료 (자재예약)의 UNIT_Q 수정)*/
		UPDATE A
		   SET A.UNIT_Q = #{PRODT_Q} / B.WKORD_Q
		  FROM		 PMP200T A WITH(NOLOCK)
		  INNER JOIN PMP100T B WITH(NOLOCK)
								 ON B.COMP_CODE	= A.COMP_CODE
								AND B.DIV_CODE	= A.DIV_CODE
								AND B.WKORD_NUM	= A.WKORD_NUM
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.ITEM_CODE	= #{ITEM_CODE}
		   AND A.WKORD_NUM	= #{WKORD_NUM}


		/* BTR100T INSERT */
		DECLARE @MONEY_UNIT NVARCHAR(3)

		 SELECT @MONEY_UNIT  = A.SUB_CODE
		   FROM BSA100T A WITH(NOLOCK)
		  WHERE A.COMP_CODE	 = #{S_COMP_CODE}
			AND A.MAIN_CODE	 = 'B004'
			AND A.REF_CODE1	 = 'Y'
			AND A.SUB_CODE  != '$'
			AND A.USE_YN	 = 'Y'

		IF (ISNULL(@MONEY_UNIT, '') = '')
			SET @MONEY_UNIT = 'KRW'

		INSERT INTO BTR100T( COMP_CODE,		DIV_CODE,		INOUT_NUM,		INOUT_SEQ,		ITEM_CODE,		WH_CODE,			INOUT_DATE
						   , INOUT_Q,		INOUT_P,		INOUT_I,		MONEY_UNIT
						   , BILL_TYPE,		SALE_TYPE,		SALE_DIV_CODE,	SALE_CUSTOM_CODE
						   , INOUT_PRSN,	TO_DIV_CODE,	REMARK,			PROJECT_NO,		LOT_NO,			UPDATE_DB_USER,		UPDATE_DB_TIME
						   , INOUT_TYPE,	CREATE_LOC,		ITEM_STATUS,	INOUT_METH,		INOUT_TYPE_DETAIL
						   , INOUT_CODE_TYPE
						   , INOUT_CODE
						   , ORDER_NUM
						   --,	BASIS_NUM
						)
		SELECT #{S_COMP_CODE}		AS COMP_CODE,		#{DIV_CODE}		AS DIV_CODE,		#{INOUT_NUM}	AS INOUT_NUM,		#{INOUT_SEQ}	AS INOUT_SEQ,		#{ITEM_CODE}	 AS ITEM_CODE,		#{WH_CODE}	AS WH_CODE,		#{INOUT_DATE} AS INOUT_DATE
			 , #{PRODT_Q}			AS INOUT_Q,			0				AS INOUT_P,			0				AS INOUT_I,			@MONEY_UNIT		AS MONEY_UNIT
			 , '*'					AS BILL_TYPE,		'*'				AS SALE_TYPE,		'*'				AS SLAE_DIV_CODE,	'*'				AS SALE_CUSTOM_CODE
			 , #{S_USER_ID}			AS INOUT_PRSN,		#{DIV_CODE}		AS TO_DIV_CODE
			 , ''					AS REMARK,			#{PROJECT_NO}	AS PROJECT_NO,		#{LOT_NO}		AS LOT_NO,			#{S_USER_ID}	AS UPDATE_DB_USER,	GETDATE()		AS UPDATE_DB_TIME
			 , #{INOUT_TYPE}		AS INOUT_TYPE,		'3'				AS CREATE_LOC,		'1'				AS ITEM_STATUS,		'1'				AS INOUT_METH,		'10'			AS INOUT_TYPE_DETAIL
			 , '3'					AS INOUT_CODE_TYPE
			 , #{WORK_SHOP_CODE}	AS INOUT_CODE
			 , #{WKORD_NUM}			AS ORDER_NUM
			 , PRODT_NUM			AS BASIS_NUM
		  FROM PMR110T WITH(NOLOCK)
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND WKORD_NUM	= #{WKORD_NUM}
	</update>
</mapper>