<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_scl100ukrv_ypServiceImpl">
	<!-- 데이터 조회 -->
	<select id="s_scl100ukrv_ypServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">
		/* s_scl100ukrv_ypServiceImpl.selectDetailList */
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , B.RECEIPT_DATE
			 , A.CLAIM_NO
			 , A.CLAIM_SEQ
			 , B.CUSTOM_CODE
			 , C.CUSTOM_NAME
			 , B.RECEIPT_PRSN
			 , A.ITEM_CODE
			 , D.ITEM_NAME
			 , D.SPEC
			 , A.ORDER_UNIT
			 , A.ORDER_UNIT_Q
			 , A.CLAIM_QTY
			 , A.SALE_P
			 , A.SALE_AMT
			 , A.VAT_AMT
			 , ISNULL(A.SALE_AMT, 0) + ISNULL(A.VAT_AMT, 0)		AS SUM_O
			 , A.CLAIM_AMT
			 , A.CLAIM_TYPE
			 , A.CLAIM_ACT
			 , A.CLAIM_STATUS
			 , A.CLAIM_REMARK
			 , C.AGENT_TYPE
			 , C.WON_CALC_BAS
			 , A.LOT_NO
			 , A.SUPPLIER_YN
			 , A.SUPPLIER_DEDUCT_AMT
			 , A.RETURN_QTY
			 , A.WH_CODE
			 , A.CLAIM_REMARK
			 , A.PREV_INOUT_NUM
			 , A.PREV_INOUT_SEQ
			 , A.PREV_ORDER_NUM
			 , A.PREV_ORDER_SEQ
			 , A.TAX_TYPE

			 , A.INOUT_NUM
			 , A.INOUT_SEQ
			 , A.ORDER_NUM
			 , A.ORDER_SEQ
		  FROM 		SCL110T A WITH(NOLOCK)
		 INNER JOIN SCL100T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
		 								  AND B.DIV_CODE	= A.DIV_CODE
		 								  AND B.CLAIM_NO	= A.CLAIM_NO
		 INNER JOIN BCM100T C WITH(NOLOCK) ON C.COMP_CODE	= B.COMP_CODE
		 								  AND C.CUSTOM_CODE	= B.CUSTOM_CODE
		 INNER JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE	= A.COMP_CODE
		 								  AND D.ITEM_CODE	= A.ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.CLAIM_NO	= #{CLAIM_NO}
		 ORDER BY A.CLAIM_SEQ
	</select>



	<!-- 클레임 정보 팝업 조회 쿼리 -->
	<select id="s_scl100ukrv_ypServiceImpl.selectClaimNoMasterList" parameterType="Map" resultType="rMap">
		/* s_scl100ukrv_ypServiceImpl.selectClaimNoMasterList */
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.RECEIPT_DATE
			 , A.CLAIM_NO
			 , A.CUSTOM_CODE
			 , B.CUSTOM_NAME
			 , A.RECEIPT_PRSN
			 , A.REMARK
			 , B.AGENT_TYPE
			 , B.WON_CALC_BAS
		  FROM 		SCL100T A WITH(NOLOCK)
		 INNER JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
		 								  AND B.CUSTOM_CODE	= A.CUSTOM_CODE 
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		  <if test="@foren.Ognl@isNotEmpty(FR_RECEIPT_DATE)">
		   AND A.RECEIPT_DATE	&gt;= #{FR_RECEIPT_DATE} 
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(TO_RECEIPT_DATE)">  
		   AND A.RECEIPT_DATE	&lt;= #{TO_RECEIPT_DATE} 
		  </if>	
		  <if test="@foren.Ognl@isNotEmpty(RECEIPT_PRSN)">
		   AND A.RECEIPT_PRSN	 = #{RECEIPT_PRSN}   
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		   AND A.CUSTOM_CODE LIKE #{CUSTOM_CODE} + '%'  
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		   AND B.CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'   
		  </if>  
		 ORDER BY A.CUSTOM_CODE, A.RECEIPT_DATE, A.CLAIM_NO
	</select>
	
	<select id="s_scl100ukrv_ypServiceImpl.selectClaimNoDetailList" parameterType="Map" resultType="rMap">
		/* s_scl100ukrv_ypServiceImpl.selectClaimNoDetailList */
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , B.RECEIPT_DATE
			 , A.CLAIM_NO
			 , A.CLAIM_SEQ
			 , B.CUSTOM_CODE
			 , C.CUSTOM_NAME
			 , B.RECEIPT_PRSN
			 , A.ITEM_CODE
			 , D.ITEM_NAME
			 , A.ORDER_UNIT
			 , A.ORDER_UNIT_Q
			 , A.CLAIM_QTY
			 , A.SALE_P
			 , A.SALE_AMT
			 , A.VAT_AMT
			 , A.CLAIM_AMT
			 , A.CLAIM_TYPE
			 , A.CLAIM_ACT
			 , A.CLAIM_STATUS
			 , A.CLAIM_REMARK
			 , C.AGENT_TYPE
			 , C.WON_CALC_BAS
		  FROM 		SCL110T A WITH(NOLOCK)
		 INNER JOIN SCL100T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
		 								  AND B.DIV_CODE	= A.DIV_CODE
		 								  AND B.CLAIM_NO	= A.CLAIM_NO
		 INNER JOIN BCM100T C WITH(NOLOCK) ON C.COMP_CODE	= B.COMP_CODE
		 								  AND C.CUSTOM_CODE	= B.CUSTOM_CODE
		 INNER JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE	= A.COMP_CODE
		 								  AND D.ITEM_CODE	= A.ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		  <if test="@foren.Ognl@isNotEmpty(FR_RECEIPT_DATE)">
		   AND B.RECEIPT_DATE	&gt;= #{FR_RECEIPT_DATE} 
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(TO_RECEIPT_DATE)">  
		   AND B.RECEIPT_DATE	&lt;= #{TO_RECEIPT_DATE} 
		  </if>	
		  <if test="@foren.Ognl@isNotEmpty(RECEIPT_PRSN)">
		   AND B.RECEIPT_PRSN	 = #{RECEIPT_PRSN}   
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		   AND B.CUSTOM_CODE LIKE #{CUSTOM_CODE} + '%'  
		  </if>  
		  <if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		   AND C.CUSTOM_NAME LIKE #{CUSTOM_NAME} +'%'   
		  </if>  
		 ORDER BY B.CUSTOM_CODE, B.RECEIPT_DATE, A.CLAIM_NO
	</select>

	<!-- 출고 참조 -->
	<select id="s_scl100ukrv_ypServiceImpl.selectSaleReferList" parameterType="Map" resultType="rMap">
		BEGIN
			DECLARE @COMP_CODE			NVARCHAR(08)		-- (필수) 법인코드
				  , @FR_INOUT_DATE		NVARCHAR(08)		-- (필수) From 수불일
				  , @TO_INOUT_DATE		NVARCHAR(08)		-- (필수) To 수불일
				  , @ITEM_CODE			NVARCHAR(20)		-- (선택) 품목코드
				  , @ITEM_NAME			NVARCHAR(200)		-- (선택) 품목명
				  , @DIV_CODE			NVARCHAR(08)		-- (선택) 사업장코드
				  , @INOUT_CODE			NVARCHAR(20)		-- (선택) 출고처
				  , @INOUT_CODE_NAME	NVARCHAR(40)		-- (선택) 출고처명
				  , @USER_ID			NVARCHAR(100)		-- (필수) 사용자 ID
		
			SET NOCOUNT ON
			SET ARITHABORT ON
		
			SET @COMP_CODE			= #{S_COMP_CODE}
			SET @DIV_CODE			= #{DIV_CODE}
			SET @FR_INOUT_DATE		= #{FR_INOUT_DATE}
			SET @TO_INOUT_DATE		= #{TO_INOUT_DATE}
			SET @ITEM_CODE			= #{ITEM_CODE}
			SET @ITEM_NAME			= #{ITEM_NAME}
			SET @INOUT_CODE			= #{CUSTOM_CODE}
			SET @INOUT_CODE_NAME	= #{CUSTOM_NAME}
			
			SET @USER_ID		   = #{S_USER_ID}
		
		--  [ 명칭 참조 유형 ] ------------------------------------------------------------------------------------------------
			DECLARE @RefItem			NVARCHAR(01)
		
			SELECT  TOP 1 @RefItem = REF_ITEM
			FROM	BSA300T WITH (NOLOCK)
			WHERE   USER_ID = @USER_ID
		
			SET @RefItem = ISNULL(@RefItem, N'0')
		
		--  [ 날짜 포맷 유형 설정 ] -------------------------------------------------------------------------------------------
			DECLARE @DateFormat		 NVARCHAR(10)
		
			SELECT  TOP 1 @DateFormat = CODE_NAME
			FROM	BSA100T WITH (NOLOCK)
			WHERE   COMP_CODE = @COMP_CODE
			AND	 MAIN_CODE = N'B044'
			AND	 REF_CODE1 = N'Y'
		
			SET @DateFormat = ISNULL(@DateFormat, N'YYYY.MM.DD')
			
		--  [ 시분초 필드 처리여부 설정 ] -------------------------------------------------------------------------------------
			DECLARE @TimeSI			 NVARCHAR(01)
				  , @TimeSR			 NVARCHAR(01)
				  , @TimeSS			 NVARCHAR(01)
		
			SELECT  @TimeSI = MAX(CASE WHEN SUB_CODE = 'SI' THEN REF_CODE1 ELSE '' END)
				 ,  @TimeSR = MAX(CASE WHEN SUB_CODE = 'SR' THEN REF_CODE1 ELSE '' END)
				 ,  @TimeSS = MAX(CASE WHEN SUB_CODE = 'SS' THEN REF_CODE1 ELSE '' END)
			FROM	BSA100T WITH (NOLOCK)
			WHERE   COMP_CODE = @COMP_CODE
			AND	 MAIN_CODE = N'S048'
			AND	 SUB_CODE IN (N'SI', N'SR', N'SS')
		
			SET @TimeSI = ISNULL(@TimeSI, N'N')
			SET @TimeSR = ISNULL(@TimeSR, N'N')
			SET @TimeSS = ISNULL(@TimeSS, N'N')
		
		--  [ 데이터 조회 ] ---------------------------------------------------------------------------------------------------
			SELECT  CAST(0 AS BIT)																  AS CHOICE
				 ,  A.SALE_CUSTOM_CODE															  AS CUSTOM_CODE
				 ,  A.CUSTOM_NAME																   AS CUSTOM_NAME
				 ,  A.INOUT_DATE
				 ,  A.ITEM_CODE
				 ,  A.ITEM_NAME
				 ,  A.SPEC
				 ,  A.INOUT_Q		   --출고량
				 ,  A.ORDER_UNIT		--단위
				 ,  A.LOT_NO
				 ,  A.TRNS_RATE		 --입수
				 ,  A.ORDER_UNIT_Q	  --출고량(재고단위)
				 ,  A.MONEY_UNIT
				 ,  A.INOUT_P
				 ,  A.INOUT_I
				 ,  A.INOUT_TYPE_DETAIL
				 ,  A.WH_CODE
				 ,  A.ACCOUNT_YNC
				 ,  A.INOUT_NUM
				 ,  A.INOUT_SEQ
				 ,  A.PRICE_YN
				 ,  A.SALE_DIV_CODE
				 ,  A.SALE_CUSTOM_CODE
				 ,  A.TAX_TYPE
				 ,  A.DISCOUNT_RATE
				 ,  A.DVRY_CUST_CD
				 ,  A.DVRY_CUST_NM
				 ,  A.ORDER_NUM
				 ,  A.ORDER_SEQ
				 ,  A.PROJECT_NO
				 ,  A.STOCK_CARE_YN
				 ,  A.SALE_PRSN
				 ,  A.BILL_TYPE
				 ,  A.ORDER_TYPE
				 ,  A.AGENT_TYPE
				 ,  A.DEPT_CODE
				 ,  A.DIV_CODE
				 ,  A.ENRETURN_Q
				 ,  A.INOUT_TAX_AMT
			FROM	(
					SELECT  A.COMP_CODE
						 ,  A.DIV_CODE
						 ,  A.ITEM_CODE
						 ,  CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
								 WHEN @RefItem = '1' THEN C1.ITEM_NAME1
								 WHEN @RefItem = '2' THEN C1.ITEM_NAME2
								 ELSE ''
							END																					 AS ITEM_NAME
						 ,  C1.SPEC
						 ,  A.ORDER_UNIT
						 , (CASE WHEN A.CREATE_LOC = '1' THEN A.ORDER_UNIT_Q
								 WHEN A.CREATE_LOC = '5' THEN A.INOUT_Q / ISNULL(A.TRNS_RATE, 1)
								 ELSE 0 END) * (CASE WHEN A.INOUT_TYPE = '3' THEN -1 ELSE 1 END)				   AS ORDER_UNIT_Q
						 ,  A.ORDER_UNIT_P
						 ,  A.TRNS_RATE
						 ,  C1.STOCK_UNIT
						 ,  A.INOUT_Q		 * (CASE WHEN A.INOUT_TYPE = '3' THEN -1 ELSE 1 END)				   AS INOUT_Q
						 ,  A.INOUT_P
						 ,  A.MONEY_UNIT
						 ,  A.EXCHG_RATE_O
						 ,  A.INOUT_FOR_O	 * (CASE WHEN A.INOUT_TYPE = '3' THEN -1 ELSE 1 END)				   AS INOUT_FOR_O
						 ,  A.INOUT_I		 * (CASE WHEN A.INOUT_TYPE = '3' THEN -1 ELSE 1 END)				   AS INOUT_I
						 ,  A.INOUT_TYPE_DETAIL
						 ,  A.INOUT_CODE_TYPE
						 ,  CASE WHEN A.CREATE_LOC = '1'  THEN A.SALE_CUSTOM_CODE
								 WHEN A.CREATE_LOC = '5'  THEN A.INOUT_CODE
								 ELSE A.SALE_CUSTOM_CODE
							END																					AS INOUT_CODE
						 ,  CASE WHEN A.CREATE_LOC	  = '1' THEN CASE WHEN  @RefItem = '1' THEN ISNULL(D1.CUSTOM_NAME1, '')
																		WHEN  @RefItem = '2' THEN ISNULL(D1.CUSTOM_NAME2, '')
																		ELSE  ISNULL(D1.CUSTOM_NAME, '') END
								 WHEN A.INOUT_CODE_TYPE = '3' THEN ISNULL(C4.TREE_NAME, '')
								 WHEN A.INOUT_CODE_TYPE = '4' THEN CASE WHEN  @RefItem = '1' THEN ISNULL(D1.CUSTOM_NAME1, '')
																		WHEN  @RefItem = '2' THEN ISNULL(D1.CUSTOM_NAME2, '')
																		ELSE  ISNULL(D1.CUSTOM_NAME, '') END
								 ELSE ''
							END																					 AS INOUT_NAME
						 ,  CONVERT(NVARCHAR(10),
							REPLACE(
							REPLACE(
							REPLACE(@DateFormat, N'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
											   , N'MM',   SUBSTRING(A.INOUT_DATE, 5, 2))
											   , N'DD',   SUBSTRING(A.INOUT_DATE, 7, 2)))						   AS INOUT_DATE
						 ,  D2.DVRY_CUST_NM																		 AS DVRY_CUST_NAME
						 ,  M1.CODE_NAME																			AS DOM_FORIGN
						 ,  A.WH_CODE
						 ,  A.INOUT_PRSN
						 ,  CONVERT(NVARCHAR(10),
							REPLACE(
							REPLACE(
							REPLACE(@DateFormat, N'YYYY', SUBSTRING(D3.ISSUE_DATE, 1, 4))
											   , N'MM',   SUBSTRING(D3.ISSUE_DATE, 5, 2))
											   , N'DD',   SUBSTRING(D3.ISSUE_DATE, 7, 2)))						  AS ISSUE_DATE
						 ,  RTRIM(' ' + CASE @TimeSR WHEN 'Y' THEN ISNULL(D3.DELIVERY_TIME,'')
													 ELSE ''
										 END)																	   AS ISSUE_TIME
						 ,  A.ISSUE_REQ_NUM
						 ,  A.ACCOUNT_YNC
						 ,  A.ORDER_NUM
						 ,  A.ORDER_SEQ
						 ,  CONVERT(NVARCHAR(10),
							REPLACE(
							REPLACE(
							REPLACE(@DateFormat, N'YYYY', SUBSTRING(D4.DVRY_DATE, 1, 4))
											   , N'MM',   SUBSTRING(D4.DVRY_DATE, 5, 2))
											   , N'DD',   SUBSTRING(D4.DVRY_DATE, 7, 2)))						   AS DVRY_DATE
						 ,  RTRIM(' ' + CASE @TimeSS WHEN 'Y' THEN ISNULL(D4.DVRY_TIME,'')
													 ELSE ''
										 END)																	   AS DVRY_TIME
						 ,  CONVERT(NVARCHAR(10),
							REPLACE(
							REPLACE(
							REPLACE(@DateFormat, N'YYYY', SUBSTRING(A.DELIVERY_DATE, 1, 4))
											   , N'MM',   SUBSTRING(A.DELIVERY_DATE, 5, 2))
											   , N'DD',   SUBSTRING(A.DELIVERY_DATE, 7, 2)))						AS DELIVERY_DATE
						 ,  RTRIM(' ' + CASE @TimeSI WHEN 'Y' THEN ISNULL(A.DELIVERY_TIME,'')
													 ELSE ''
										 END)																	   AS DELIVERY_TIME
						 ,  (CASE WHEN A.CREATE_LOC = '1' THEN A.ACCOUNT_Q
								  WHEN A.CREATE_LOC = '5' THEN (ISNULL(E1.LLC_ACCOUNT_Q, 0) + ISNULL(E2.MLC_ACCOUNT_Q, 0)) / A.TRNS_RATE
								 
								  ELSE 0 END) * (CASE WHEN A.INOUT_TYPE = '3' THEN -1 ELSE 1 END)				   AS ACCOUNT_Q
						 ,  A.LC_NUM
						 ,  A.INOUT_NUM
						 ,  D4.PO_NUM
						 ,  D4.PO_SEQ
						 ,  A.INOUT_SEQ
						 ,  A.INOUT_METH
						 ,  ISNULL(B.EVAL_INOUT_P, 0)															   AS EVAL_INOUT_P
						 ,  RTRIM(A.INOUT_NUM) + RTRIM(CONVERT(VARCHAR(4), A.INOUT_SEQ))							AS SORT_KEY
						 ,  A.UPDATE_DB_TIME
						 ,  A.SALE_CUSTOM_CODE
						 ,  CASE WHEN @RefItem = '0' THEN D1.CUSTOM_NAME
								 WHEN @RefItem = '1' THEN D1.CUSTOM_NAME1
								 WHEN @RefItem = '2' THEN D1.CUSTOM_NAME2
								 ELSE ''
							END																					 AS CUSTOM_NAME
						 ,  A.DVRY_CUST_CD
						 ,  D2.DVRY_CUST_NM
						 ,  A.LOT_NO
						 ,  A.REMARK
						 ,  A.PRICE_YN
						 ,  A.SALE_DIV_CODE
						 ,  A.TAX_TYPE
						 ,  A.DISCOUNT_RATE
						 ,  A.PROJECT_NO
						 ,  C1.STOCK_CARE_YN
						 ,  A.SALE_PRSN
						 ,  A.BILL_TYPE
						 ,  A.ORDER_TYPE
						 ,  A.AGENT_TYPE
						 ,  A.DEPT_CODE
						 ,  ISNULL(A.ORDER_UNIT_Q, 0) - ISNULL(D4.RETURN_Q, 0) AS ENRETURN_Q
						 ,  A.INOUT_TAX_AMT
					FROM				BTR100T A  WITH (NOLOCK, INDEX(BTR100T_IDX02))
							LEFT  JOIN  BIV600T B  WITH (NOLOCK) ON B.COMP_CODE	   = A.COMP_CODE
																AND B.INOUT_NUM	   = A.INOUT_NUM
																AND B.INOUT_SEQ	   = A.INOUT_SEQ
																AND B.SPLIT_SEQ	   = 0
																AND B.INOUT_TYPE	  = A.INOUT_TYPE
																AND B.DIV_CODE		= A.DIV_CODE
																AND B.DEL_FLAG		= 'N'
							LEFT  JOIN  BPR100T C1 WITH (NOLOCK) ON C1.COMP_CODE	  = A.COMP_CODE
																AND C1.ITEM_CODE	  = A.ITEM_CODE
							LEFT  JOIN  BPR200T C2 WITH (NOLOCK) ON C2.COMP_CODE	  = A.COMP_CODE
																AND C2.DIV_CODE	   = A.DIV_CODE
																AND C2.ITEM_CODE	  = A.ITEM_CODE
							LEFT  JOIN  BPR100T C3 WITH (NOLOCK) ON C3.COMP_CODE	  = C1.COMP_CODE
																AND C3.ITEM_CODE	  = C1.ITEM_GROUP
							LEFT  JOIN  BSA230T C4 WITH (NOLOCK) ON C4.COMP_CODE	  = A.COMP_CODE
																AND C4.TYPE_LEVEL	 = A.DIV_CODE
																AND C4.TREE_CODE	  = A.INOUT_CODE
							LEFT  JOIN  BCM100T D1 WITH (NOLOCK) ON D1.COMP_CODE	  = A.COMP_CODE
																AND D1.CUSTOM_CODE	= A.SALE_CUSTOM_CODE
							LEFT  JOIN  SCM100T D2 WITH (NOLOCK) ON D2.COMP_CODE	  = A.COMP_CODE
																AND D2.CUSTOM_CODE	= A.INOUT_CODE
																AND A.DVRY_CUST_CD	= CONVERT(NVARCHAR(08), D2.DVRY_CUST_SEQ)
							LEFT  JOIN  SRQ100T D3 WITH (NOLOCK) ON D3.COMP_CODE	  = A.COMP_CODE
																AND D3.DIV_CODE	   = A.DIV_CODE
																AND D3.ISSUE_REQ_NUM  = A.ISSUE_REQ_NUM
																AND D3.ISSUE_REQ_SEQ  = A.ISSUE_REQ_SEQ
							LEFT  JOIN  SOF110T D4 WITH (NOLOCK) ON D4.COMP_CODE	  = A.COMP_CODE
																AND D4.DIV_CODE	   = A.DIV_CODE
																AND D4.ORDER_NUM	  = A.ORDER_NUM
																AND D4.SER_NO		 = A.ORDER_SEQ
							LEFT  JOIN  BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE	  = A.COMP_CODE
																AND M1.MAIN_CODE	  = 'B019'
																AND M1.SUB_CODE	   = CASE WHEN A.CREATE_LOC = '1' THEN '1' ELSE '2' END
							LEFT  JOIN  (
										SELECT  COMP_CODE, DIV_CODE, LLC_SER_NO, LLC_AMEND_SEQ, SUM(QTY*ISNULL(TRANS_RATE,1)) AS LLC_ACCOUNT_Q
										FROM	TEC130T WITH (NOLOCK)
										WHERE   COMP_CODE   = @COMP_CODE
										GROUP   BY COMP_CODE, DIV_CODE, LLC_SER_NO, LLC_AMEND_SEQ
										) E1					 ON E1.COMP_CODE	  = A.COMP_CODE
																AND E1.DIV_CODE	   = A.DIV_CODE
																AND E1.LLC_SER_NO	 = A.LC_NUM
																AND E1.LLC_AMEND_SEQ  = A.LC_AMEND_SEQ
																AND A.CREATE_LOC	  = '5'
																AND A.TRADE_LOC	   = '2'
							LEFT  JOIN  (
										SELECT  A.COMP_CODE, A.DIV_CODE, A.SO_SER, A.SO_SER_NO, SUM(A.QTY*ISNULL(B.TRANS_RATE, 1)) AS MLC_ACCOUNT_Q
										FROM				TED110T A  WITH (NOLOCK)
												LEFT  JOIN  TEC110T B  WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
																					AND B.PASS_SER	= A.PASS_SER
																					AND B.PASS_SER_NO = A.PASS_SER_NO
										WHERE   A.COMP_CODE = @COMP_CODE
										GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_SER, A.SO_SER_NO
										) E2					 ON E2.COMP_CODE	  = A.COMP_CODE
																AND E2.DIV_CODE	   = A.DIV_CODE
																AND E2.SO_SER_NO	  = A.ORDER_NUM
																AND E2.SO_SER		 = A.ORDER_SEQ
																AND A.CREATE_LOC	  = '5'
																AND A.TRADE_LOC	  != '2'
					WHERE   A.COMP_CODE			= @COMP_CODE
					AND	 A.DIV_CODE			 = @DIV_CODE
					AND	 A.INOUT_DATE	   &gt;= @FR_INOUT_DATE
					AND	 A.INOUT_DATE	   &lt;= @TO_INOUT_DATE
					AND	 A.CREATE_LOC		  IN ('1', '5')
					AND	 A.INOUT_TYPE		= '2'
					-- 품목코드
					AND   ((A.ITEM_CODE		LIKE @ITEM_CODE + '%'	   AND @ITEM_CODE		 != '') OR (@ITEM_CODE		 = ''))
					AND   ((
						   (C1.ITEM_NAME	   LIKE @ITEM_NAME + '%'	   AND @ITEM_NAME		 != '' AND @RefItem = '0')
					OR	 (C1.ITEM_NAME1	  LIKE @ITEM_NAME + '%'	   AND @ITEM_NAME		 != '' AND @RefItem = '1')
					OR	 (C1.ITEM_NAME2	  LIKE @ITEM_NAME + '%'	   AND @ITEM_NAME		 != '' AND @RefItem = '2')
						   ) OR (@ITEM_NAME	   = ''))
					-- 출고처
					AND   ((A.SALE_CUSTOM_CODE LIKE @INOUT_CODE + '%'	  AND @INOUT_CODE		!= '') OR (@INOUT_CODE		= ''))
					AND   ((
						   (D1.CUSTOM_NAME	 LIKE @INOUT_CODE_NAME + '%' AND @INOUT_CODE_NAME   != '' AND @RefItem = '0')
					OR	 (D1.CUSTOM_NAME1	LIKE @INOUT_CODE_NAME + '%' AND @INOUT_CODE_NAME   != '' AND @RefItem = '1')
					OR	 (D1.CUSTOM_NAME2	LIKE @INOUT_CODE_NAME + '%' AND @INOUT_CODE_NAME   != '' AND @RefItem = '2')
						   ) OR (@INOUT_CODE_NAME	 = ''))
					AND	 CASE WHEN ISNULL(D4.ORDER_NUM, '') != ''
								 THEN ISNULL(A.ORDER_UNIT_Q, 0) - ISNULL(D4.RETURN_Q, 0)
								 ELSE 1
							END > 0					
					) A
			ORDER   BY 1, A.INOUT_TYPE_DETAIL, A.INOUT_CODE_TYPE, A.INOUT_CODE, A.INOUT_DATE, A.INOUT_NUM, A.INOUT_SEQ
		
			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END 
	</select>	
	
	
	
	
	
	<!-- CLAIM_NO 채번 -->
	<select id="s_scl100ukrv_ypServiceImpl.autoNum" parameterType="Map" resultType="rMap">
		DECLARE	@AUTO_NUM	NVARCHAR(20),
				@REGDATE	NVARCHAR(8)
		SET @REGDATE = CONVERT(NVARCHAR(8), GETDATE(), 112)
		EXEC SP_GetAutoNumComp #{S_COMP_CODE}, #{DIV_CODE}, #{TABLE_NAME}, 'S', @REGDATE, '', @AUTO_NUM OUTPUT
		
		SELECT  @AUTO_NUM AS CLAIM_NO
	</select>


	<!-- masterData 저장 -->
	<insert id="s_scl100ukrv_ypServiceImpl.insertMaster" parameterType="Map">
		/*s_scl100ukrv_ypServiceImpl.insertMaster*/
		INSERT INTO SCL100T (
			COMP_CODE
		  , DIV_CODE
		  , CLAIM_NO
		  , CUSTOM_CODE
		  , RECEIPT_DATE
		  , RECEIPT_PRSN
		  , REMARK
		  , INSERT_DB_USER
		  , INSERT_DB_TIME
		  , UPDATE_DB_USER
		  , UPDATE_DB_TIME
		) VALUES (
	 		#{S_COMP_CODE}
		  , #{DIV_CODE}
		  , #{CLAIM_NO}
		  , #{CUSTOM_CODE}
		  , #{RECEIPT_DATE}
		  , #{RECEIPT_PRSN}
		  , #{REMARK}
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		)
	</insert>
	<update id="s_scl100ukrv_ypServiceImpl.updateMaster" parameterType="Map">
		/*s_scl100ukrv_ypServiceImpl.updateMaster*/
	</update>
	<update id="s_scl100ukrv_ypServiceImpl.deleteMaster" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.deleteMaster */
		DELETE FROM SCL100T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND CLAIM_NO		= #{CLAIM_NO}
	</update>


	<!-- detailData 저장 -->
	<insert id="s_scl100ukrv_ypServiceImpl.insertDetail" parameterType="Map">
		/*s_scl100ukrv_ypServiceImpl.insertDetail*/
		INSERT INTO SCL110T (
			COMP_CODE
		  , DIV_CODE
		  , CLAIM_NO
		  , CLAIM_SEQ
		  , ITEM_CODE
		  , ORDER_UNIT
		  , ORDER_UNIT_Q
		  , CLAIM_QTY
		  , LOT_NO
		  , SALE_P
		  , SALE_AMT
		  , VAT_AMT
		  , CLAIM_TYPE
		  , CLAIM_ACT
		  , CLAIM_STATUS
		  , CLAIM_AMT
		  , SUPPLIER_YN
		  , SUPPLIER_DEDUCT_AMT
		  , RETURN_QTY
		  , WH_CODE
		  , CLAIM_REMARK
		  , PREV_INOUT_NUM
		  , PREV_INOUT_SEQ
		  , PREV_ORDER_NUM
		  , PREV_ORDER_SEQ
		  , TAX_TYPE
		  , INSERT_DB_USER
		  , INSERT_DB_TIME
		  , UPDATE_DB_USER
		  , UPDATE_DB_TIME
		) VALUES (
	 		#{S_COMP_CODE}
		  , #{DIV_CODE}
		  , #{CLAIM_NO}
		  , #{CLAIM_SEQ}
		  , #{ITEM_CODE}
		  , #{ORDER_UNIT}
		  , #{ORDER_UNIT_Q}
		  , #{CLAIM_QTY}
		  , #{LOT_NO}
		  , #{SALE_P}
		  , #{SALE_AMT}
		  , #{VAT_AMT}
		  , #{CLAIM_TYPE}
		  , #{CLAIM_ACT}
		  , #{CLAIM_STATUS}
		  , #{CLAIM_AMT}
		  , #{SUPPLIER_YN}
		  , #{SUPPLIER_DEDUCT_AMT}
		  , #{RETURN_QTY}
		  , #{WH_CODE}
		  , #{CLAIM_REMARK}
		  , #{PREV_INOUT_NUM}
		  , #{PREV_INOUT_SEQ}
		  , #{PREV_ORDER_NUM}
		  , #{PREV_ORDER_SEQ}
		  , #{TAX_TYPE}
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		)
	</insert>
	<!-- 수정가능 데이터 확인하여 추가 필요 -->
	<update id="s_scl100ukrv_ypServiceImpl.updateDetail" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.updateDetail */
		UPDATE A
		   SET A.PREV_CLAIM_QTY			= A.CLAIM_QTY
			 , A.CLAIM_QTY				= #{CLAIM_QTY}
			 , A.SALE_AMT				= #{SALE_AMT}
			 , A.TAX_TYPE				= #{TAX_TYPE}
			 , A.VAT_AMT				= #{VAT_AMT}
			 , A.CLAIM_TYPE				= #{CLAIM_TYPE}
			 , A.CLAIM_ACT				= #{CLAIM_ACT}
			 , A.CLAIM_STATUS			= #{CLAIM_STATUS}
			 , A.CLAIM_AMT				= #{CLAIM_AMT}
			 , A.SUPPLIER_YN			= #{SUPPLIER_YN}
			 , A.SUPPLIER_DEDUCT_AMT	= #{SUPPLIER_DEDUCT_AMT}
			 , A.RETURN_QTY				= #{RETURN_QTY}
			 , A.WH_CODE				= #{WH_CODE}
			 , A.CLAIM_REMARK			= #{CLAIM_REMARK}
			 , A.UPDATE_DB_USER			= #{S_USER_ID}
			 , A.UPDATE_DB_TIME			= GETDATE()
		  FROM SCL110T A
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.CLAIM_NO	= #{CLAIM_NO}
		   AND A.CLAIM_SEQ	= #{CLAIM_SEQ}
	</update>
	<select id="s_scl100ukrv_ypServiceImpl.deleteDetail" parameterType="Map" resultType="rMap">
		/* s_scl100ukrv_ypServiceImpl.deleteDetail */
		DELETE FROM SCL110T						   
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND CLAIM_NO		= #{CLAIM_NO}
		   AND CLAIM_SEQ	= #{CLAIM_SEQ}
		 
		SELECT COUNT(COMP_CODE) AS COUNT
		  FROM SCL110T WITH(NOLOCK)
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND CLAIM_NO		= #{CLAIM_NO}
	</select>
	
	

	<!-- 추가 작업 SP 호출 -->
	<update id="s_scl100ukrv_ypServiceImpl.SP_Sales_Claim" parameterType="Map" statementType="CALLABLE">
		{call SP_Sales_Claim (
			#{S_COMP_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{FLAG				, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{CUSTOM_CODE		, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{CLAIM_NO			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{CLAIM_SEQ			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.Integer},
			#{S_USER_ID			, mode=IN		, jdbcType=VARCHAR		, javaType=java.lang.String},
			#{ERROR_DESC		, mode=OUT		, jdbcType=VARCHAR		, javaType=java.lang.String}
		)}
	</update>

	
	
	
	<!-- 첨부파일 조회 -->	
	<select id="s_scl100ukrv_ypServiceImpl.getFileList" parameterType="Map" resultType="rMap">
		/* s_scl100ukrv_ypServiceImpl.getFileList */
		SELECT A.FID AS id
			 , A.FID AS fid
			 , A.ORIGINAL_FILE_NAME AS name
			 , B.SIZE as size
			 , '6' AS status 
		  FROM		BDC101T A WITH (NOLOCK) 
		 INNER JOIN BFL200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
										   AND A.FID		= B.FID
		 WHERE A.COMP_CODE	= #{S_COMP_CODE} 
		   AND A.DOC_NO		= #{DOC_NO}
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 반품관련 로직 (SP로 대체) -->
	<!-- 1.BTR100T UPDATE(기존 수불정보 입력) -->
	<update id="s_scl100ukrv_ypServiceImpl.updateBTR100T" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.updateBTR100T */
		UPDATE BTR100T
		   SET CLAIM_QTY		= #{RETURN_QTY}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND INOUT_NUM	= #{PREV_INOUT_NUM}
		   AND INOUT_SEQ	= #{PREV_INOUT_SEQ}
		   AND INOUT_TYPE	= '2'
	</update>
	
	<!-- 2.BTR100T INSERT(신규 수불정보 입력) -->
	<update id="s_scl100ukrv_ypServiceImpl.insertBTR100T" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.insertBTR100T */
		DECLARE @MONEY_UNIT NVARCHAR(3)
		
		 SELECT @MONEY_UNIT  = A.SUB_CODE 
		   FROM BSA100T A WITH(NOLOCK) 
		  WHERE A.COMP_CODE	 = #{S_COMP_CODE}
			AND A.MAIN_CODE	 = 'B004'
			AND A.REF_CODE1	 = 'Y'
			AND A.SUB_CODE  != '$'
			AND A.USE_YN	 = 'Y'
			
		IF (ISNULL(@MONEY_UNIT, '') = '')
			SET @MONEY_UNIT = 'KRW'

		MERGE INTO BTR100T 									A
		USING ( SELECT #{S_COMP_CODE}	AS COMP_CODE
					 , #{DIV_CODE}		AS DIV_CODE
					 , #{INOUT_NUM}		AS INOUT_NUM
					 , 1				AS INOUT_SEQ
					 , '3'				AS INOUT_TYPE
			  )												B		ON B.COMP_CODE	= A.COMP_CODE
																   AND B.DIV_CODE	= A.DIV_CODE
																   AND B.INOUT_NUM	= A.INOUT_NUM
																   AND B.INOUT_SEQ	= A.INOUT_SEQ
																   AND B.INOUT_TYPE	= A.INOUT_TYPE
							   
		WHEN MATCHED AND #{RETURN_QTY} != 0 THEN
			UPDATE SET
				   INOUT_Q			= #{RETURN_QTY}
				 , UPDATE_DB_USER	= #{S_USER_ID}
				 , UPDATE_DB_TIME	= GETDATE()

		WHEN MATCHED AND #{RETURN_QTY} = 0 THEN
			DELETE
				
		WHEN NOT MATCHED THEN
			INSERT (
					 COMP_CODE,		DIV_CODE,		INOUT_NUM,		INOUT_SEQ,		ITEM_CODE,		WH_CODE,		INOUT_DATE
				   , INOUT_Q,		INOUT_P,		INOUT_I,		MONEY_UNIT
				   , BILL_TYPE,		SALE_TYPE,		SALE_DIV_CODE,	SALE_CUSTOM_CODE
				   , INOUT_PRSN,	TO_DIV_CODE,	REMARK,			PROJECT_NO,		LOT_NO
				   , INOUT_TYPE,	CREATE_LOC,		ITEM_STATUS,	INOUT_METH,		INOUT_TYPE_DETAIL
				   , INOUT_CODE_TYPE
				   , INOUT_CODE
				   , UPDATE_DB_USER, UPDATE_DB_TIME, INSERT_DB_USER, INSERT_DB_TIME
			) VALUES(
					#{S_COMP_CODE},	#{DIV_CODE},	#{INOUT_NUM},	1,				#{ITEM_CODE},	#{WH_CODE},		CONVERT(NVARCHAR(08), GETDATE(), 112)
				  , #{RETURN_QTY},	0,				0,				@MONEY_UNIT
				  , '*',			'*',			'*',			'*'
				  , #{S_USER_ID},	#{DIV_CODE},	'',				'',				#{LOT_NO}
				  , '3',			'3',			'1',			'1',			'10'
				  , '4'
				  , #{CUSTOM_CODE}
				  , #{S_USER_ID},	GETDATE(),		#{S_USER_ID},	GETDATE()
			);
	</update>
	
	<!-- 3.SCL110T UPDATE -->
	<update id="s_scl100ukrv_ypServiceImpl.updateSCL110T" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.updateSCL110T */
		UPDATE SCL110T
		   SET INOUT_NUM	= #{INOUT_NUM}
			 , INOUT_SEQ	= 1
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND CLAIM_NO		= #{CLAIM_NO}
		   AND CLAIM_SEQ	= #{CLAIM_SEQ}
	</update>
	<update id="s_scl100ukrv_ypServiceImpl.updateSCL110T_2" parameterType="Map">
		/* s_scl100ukrv_ypServiceImpl.updateSCL110T_2 */
		UPDATE SCL110T
		   SET INOUT_NUM	= ''
			 , INOUT_SEQ	= 0
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND CLAIM_NO		= #{CLAIM_NO}
		   AND CLAIM_SEQ	= #{CLAIM_SEQ}
	</update>

</mapper>