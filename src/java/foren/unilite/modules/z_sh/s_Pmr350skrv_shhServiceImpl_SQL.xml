<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_pmr350skrv_shServiceImpl">

	<select id="s_pmr350skrv_shServiceImpl.selectColumns" parameterType="Map" resultType="rMap">
		SELECT A.SUB_CODE, A.CODE_NAME
		  FROM BSA100T A WITH(NOLOCK)
		 WHERE COMP_CODE	 = '${compCode}'
		   AND MAIN_CODE	 = 'P003'
		   AND SUB_CODE		!= '$'
		   AND USE_YN		 = 'Y'
		  ORDER BY A.SORT_SEQ, A.SUB_CODE
	</select>




	<!-- 공정계, 일자계, 작업장계 -->
	<select id="s_pmr350skrv_shServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/*pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY011 */
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON
			
			DECLARE @CompCode	NVARCHAR(08)	/* 법인코드 */
				  , @UserId		NVARCHAR(100)	/* 사용자ID */
				  , @LangType	NVARCHAR(02)	/* 언어구분 */
				  , @RefItem	NVARCHAR(01)	/* 명칭 참조 유형  */
				  , @DateFormat	NVARCHAR(10)	/* 날짜 포맷 유형 설정  */
				  , @SysDate	NVARCHAR(08)	/* 시스템일자  */ 
		
			SET @CompCode	= #{S_COMP_CODE}
			SET @UserId		= #{S_USER_ID}
			SET @LangType	= #{S_LANG_CODE}
			SET @SysDate	= CONVERT(NVARCHAR(08), GETDATE(), 112)
		    
		    IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#TMP_BADTYPE_RPT2'))         
            
            DROP TABLE #TMP_BADTYPE_RPT2
            
			/* 명칭 참조 유형  */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE USER_ID = @UserId
			
			SET @RefItem = ISNULL(@RefItem, N'0')
			
			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'
			
			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
			SELECT
					 '1'                                    AS GRP_CD
                    , A.B_GRP_CD                            AS B_GRP_CD
                    , A.DIV_CODE
					, MAX(A.WKORD_NUM)						AS WKORD_NUM
					, MAX(A.EQUIP_CODE)						AS EQUIP_CODE
					, MAX(A.MOLD_CODE)						AS MOLD_CODE
                    , A.WORK_SHOP_CODE
                    , A.WORK_SHOP_NAME                      AS WORK_SHOP_NAME
                    , A.PRODT_DATE
                    , A.PROG_WORK_CODE
                    , A.PROG_WORK_NAME
                    , A.ITEM_CODE
                    , A.ITEM_NAME
                    , A.SPEC
                    , MAX(ISNULL(A.PASS_Q,  0))             AS PASS_Q
                    , MAX(ISNULL(A.GOOD_WORK_Q,0))          AS GOOD_WORK_Q
                    , MAX(ISNULL(A.BAD_WORK_Q, 0))          AS BAD_WORK_Q
                    , SUM(ISNULL(B1.BAD_Q,0))               AS BAD_Q
				  
				  
				  
			<if test="GUBUN == &quot;A&quot;">
				  , CASE WHEN MAX(ISNULL(A.PASS_Q,  0)) = 0 THEN 0
				         ELSE MAX(ISNULL(A.BAD_WORK_Q, 0)) / MAX(ISNULL(A.PASS_Q,  0)) * 1000000
				    END 										AS BAD_RATE		-- PPM
			</if> 
			<if test="GUBUN == &quot;B&quot;"> 
				  , CASE WHEN MAX(ISNULL(A.PASS_Q,  0)) = 0 THEN 0
				         ELSE MAX(ISNULL(A.BAD_WORK_Q, 0)) / MAX(ISNULL(A.PASS_Q,  0)) * 100
				    END 										AS BAD_RATE		-- 백분율
			</if>   
				    
				   , CASE (SELECT TOP 1 SUB_CODE
                             FROM BSA100T WITH(NOLOCK)
                             WHERE COMP_CODE = 'MASTER'
                             AND   MAIN_CODE ='B069'
                             AND   REF_CODE1 ='Y') WHEN '1' THEN ISNULL(SUM(ISNULL(B1.BAD_Q,0)) * MAX(ISNULL(B3.BASIS_P,0)),0)
                                                   ELSE ISNULL(SUM(ISNULL(B1.BAD_Q,0)) * MAX(ISNULL(B3.COST_PRICE,0)),0)
                       END                                          AS BAD_AMT
               
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				  , SUM(CASE B1.BAD_CODE WHEN SUBSTRING('${item}', 5, 4) THEN B1.BAD_Q
									 ELSE 0
					END)											AS ${item}
			</foreach>

			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY03 */
			  INTO		#TMP_BADTYPE_RPT2
			  FROM(
			         SELECT
                            '1'                                         AS GRP_CD
							, MAX(A.WKORD_NUM)							AS WKORD_NUM
							, MAX(BA.EQUIP_CODE)						AS EQUIP_CODE
							, MAX(BA.MOLD_CODE)							AS MOLD_CODE
                          , BA.WORK_SHOP_CODE
                           + A.PRODT_DATE
                           + A.PROG_WORK_CODE                           AS B_GRP_CD
                          , A.DIV_CODE
                          , BA.WORK_SHOP_CODE
                          , B4.TREE_NAME                                AS WORK_SHOP_NAME
                          , A.PRODT_DATE
                          , A.PROG_WORK_CODE
                          , C.PROG_WORK_NAME
                          , BA.ITEM_CODE
                          , B2.ITEM_NAME
                          , B2.SPEC
                          , SUM(ISNULL(A.PASS_Q,  0))                   AS PASS_Q
                          , SUM(ISNULL(A.GOOD_WORK_Q,0))                AS GOOD_WORK_Q
                          , SUM(ISNULL(A.BAD_WORK_Q, 0))                AS BAD_WORK_Q
        			  FROM		PMR100T A  WITH (NOLOCK)
        			 INNER JOIN PMP100T BA WITH (NOLOCK) ON BA.COMP_CODE	    = @CompCode
        												AND A.DIV_CODE		    = BA.DIV_CODE
        												AND A.WKORD_NUM		    = BA.WKORD_NUM
                									    AND A.PROG_WORK_CODE    = BA.PROG_WORK_CODE
        			 INNER JOIN BPR100T B2 WITH (NOLOCK) ON B2.COMP_CODE		= @CompCode
        												AND BA.ITEM_CODE		= B2.ITEM_CODE
        			 INNER JOIN BPR200T B3 WITH (NOLOCK) ON B3.COMP_CODE		= @CompCode
        												AND A.DIV_CODE			= B3.DIV_CODE
        												AND BA.ITEM_CODE		= B3.ITEM_CODE
        			 INNER JOIN BSA230T B4 WITH (NOLOCK) ON B4.COMP_CODE		= @CompCode
        			 									AND BA.WORK_SHOP_CODE	= B4.TREE_CODE
        			 INNER JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE			= @CompCode
        												AND A.DIV_CODE			= C.DIV_CODE
        												AND BA.WORK_SHOP_CODE	= C.WORK_SHOP_CODE
        												AND A.PROG_WORK_CODE	= C.PROG_WORK_CODE
        			/*분류코드*/
        			 INNER JOIN (SELECT AA.ITEM_CODE
        							  , AA.ITEM_NAME
        							  , AA.SPEC
        							  , AA.STOCK_UNIT
        							  , BB.ITEM_GROUP
        							  , BB.GROUP_NAME
        							  , AA.ITEM_LEVEL1
        							  , AA.ITEM_LEVEL2
        							  , AA.ITEM_LEVEL3
        						  FROM BPR100T AA WITH (NOLOCK)
        						  LEFT OUTER JOIN (SELECT DISTINCT  X.ITEM_GROUP
        												,			Y.ITEM_NAME		AS GROUP_NAME
        											 FROM BPR100T X WITH (NOLOCK)
        												, BPR100T Y WITH (NOLOCK)
        											WHERE X.COMP_CODE	= @CompCode
        											  AND Y.COMP_CODE	= @CompCode
        											  AND X.ITEM_GROUP	IS NOT NULL
        											  AND X.USE_YN		= 'Y'
        											  AND X.ITEM_GROUP	= Y.ITEM_CODE) BB ON AA.ITEM_CODE = BB.ITEM_GROUP
        						 WHERE AA.COMP_CODE = @CompCode) M1		ON BA.ITEM_CODE = M1.ITEM_CODE
        			 WHERE 1 = 1
        			   AND A.COMP_CODE = @CompCode
        			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
        			   AND A.DIV_CODE			= #{DIV_CODE}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_FR)">
        			   AND A.PRODT_DATE		&gt;= #{ORDER_DATE_FR}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_TO)">
        			   AND A.PRODT_DATE		&lt;= #{ORDER_DATE_TO}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
        			   AND BA.WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
        			   AND BA.ITEM_CODE			= #{ITEM_CODE}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
        			   AND B2.ITEM_NAME			= #{ITEM_NAME}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
        			   AND M1.ITEM_LEVEL1		= #{TXTLV_L1}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
        			   AND M1.ITEM_LEVEL2		= #{TXTLV_L2}
        			</if>
        			<if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
        			   AND M1.ITEM_LEVEL3		= #{TXTLV_L3}
        			</if>
        			  GROUP BY BA.WORK_SHOP_CODE + A.PRODT_DATE + A.PROG_WORK_CODE, A.DIV_CODE, BA.WORK_SHOP_CODE, B4.TREE_NAME
        			          , A.PRODT_DATE, A.PROG_WORK_CODE, C.PROG_WORK_NAME, BA.ITEM_CODE, B2.ITEM_NAME, B2.SPEC

        ) A
            LEFT  JOIN (
                            SELECT A.DIV_CODE
								 , B.ITEM_CODE
								 , B.PROG_WORK_CODE
								 , A.INSPEC_DATE					 AS PRODT_DATE
								 , A.WORK_SHOP_CODE
								 , A.BAD_INSPEC_CODE				 AS BAD_CODE
								 , SUM(ISNULL(A.BAD_INSPEC_Q, 0))	 AS BAD_Q
							  FROM QMS460T A WITH(NOLOCK)
							  LEFT JOIN PMP100T B WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE
															  AND A.DIV_CODE  = B.DIV_CODE
															  AND A.WKORD_NUM = B.WKORD_NUM
							WHERE A.COMP_CODE = @CompCode
							GROUP BY A.DIV_CODE, B.ITEM_CODE, B.PROG_WORK_CODE, A.INSPEC_DATE, A.WORK_SHOP_CODE, A.BAD_INSPEC_CODE
                        ) B1                     ON A.DIV_CODE          = B1.DIV_CODE
                                                AND A.ITEM_CODE         = B1.ITEM_CODE
                                                AND A.PROG_WORK_CODE    = B1.PROG_WORK_CODE
                                                AND A.PRODT_DATE        = B1.PRODT_DATE
                                                AND A.WORK_SHOP_CODE    = B1.WORK_SHOP_CODE
            LEFT JOIN BPR200T B3 WITH (NOLOCK) ON B3.COMP_CODE = @CompCode --A.COMP_CODE
                                              AND B3.DIV_CODE  = A.DIV_CODE
                                              AND B3.ITEM_CODE = A.ITEM_CODE
                                              
            GROUP BY A.B_GRP_CD, A.DIV_CODE, A.WORK_SHOP_CODE, A.WORK_SHOP_NAME, A.PRODT_DATE, A.PROG_WORK_CODE, A.PROG_WORK_NAME, A.ITEM_CODE, A.ITEM_NAME, A.SPEC
            
			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY04 */
			/* 공정별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WKORD_NUM
			  , EQUIP_CODE
			  , MOLD_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				  'Z'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , ''
				 , ''
				 , ''
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , PROG_WORK_CODE
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , PASS_Q
				 , GOOD_WORK_Q
				 , MAX(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (PASS_Q+SUM(BAD_Q)) WHEN 0 THEN 0
											ELSE SUM(BAD_Q) / (PASS_Q+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE
				 , PASS_Q, GOOD_WORK_Q, ITEM_CODE
				 --, BAD_Q, BAD_WORK_Q


			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WKORD_NUM
			  , EQUIP_CODE
              , MOLD_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '2'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , ''
				 , ''
				 , ''
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , ''
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE


			DELETE #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'


			 /* 날짜별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WKORD_NUM
			  , EQUIP_CODE
			  , MOLD_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '3'
				 , WORK_SHOP_CODE+PRODT_DATE + 'XXX'
				 , DIV_CODE
				 , ''
				 , ''
				 , ''
				 , WORK_SHOP_CODE
				 , ''
				 , unilite.fnGetTxt('P0018')
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0  THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '2'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PRODT_DATE


			 /*작업장별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WKORD_NUM
			  , EQUIP_CODE
              , MOLD_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '4'
				 , WORK_SHOP_CODE+'ZZZ'
				 , DIV_CODE
				 , ''
				 , ''
				 , ''
				 , WORK_SHOP_CODE
				 , unilite.fnGetTxt('P0019')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '3'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE


			 /*총계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WKORD_NUM
			  , EQUIP_CODE
              , MOLD_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '5'
				 , '99999999'
				 , DIV_CODE
				 , ''
				 , ''
				 , ''
				 , 'ZZ'
				 , unilite.fnGetTxt('P0020')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '3'
			 GROUP BY DIV_CODE



			/* 실제 데이터 조회 */
			SELECT
				   A.GRP_CD
				 , A.B_GRP_CD
				 , A.DIV_CODE
				 , MAX(A.WKORD_NUM)						AS WKORD_NUM
				 , MAX(B.EQU_NAME)						AS EQUIP_NAME
				 , MAX(A.MOLD_CODE)						AS MOLD_CODE 
				 , A.WORK_SHOP_CODE
				 , A.WORK_SHOP_NAME
				 , unilite.fnGetUserDate(@CompCode, A.PRODT_DATE)				AS PRODT_DATE
				 , MAX(A.PROG_WORK_CODE)										AS PROG_WORK_CODE
				 , MAX(A.PROG_WORK_NAME)										AS PROG_WORK_NAME
				 , A.ITEM_CODE
				 , A.ITEM_NAME
				 , A.SPEC
				 --, CASE PASS_Q	WHEN 0 THEN NULL 
				--					ELSE PASS_Q
				 --  END														AS PASS_Q
				   
				 , ISNULL(GOOD_WORK_Q,0) + ISNULL(BAD_WORK_Q,0) 			AS  PASS_Q

				 , ISNULL(GOOD_WORK_Q,0)									AS GOOD_WORK_Q
				 , ISNULL(BAD_WORK_Q,0)										AS BAD_WORK_Q
				 , CASE SUM(BAD_Q) WHEN 0 THEN NULL
								   ELSE SUM(BAD_Q)
				   END														AS BAD_Q
				 -- , CASE (SUM(PASS_Q) + ISNULL(SUM(BAD_Q),0)) WHEN 0 THEN 0
					--									   ELSE ISNULL(ISNULL(SUM(BAD_Q),0) / (SUM(SUM(PASS_Q)) + ISNULL(SUM(BAD_Q),0)) * 100,0)
					--END														AS BAD_RATE
			<if test="GUBUN == &quot;A&quot;">
				  , CASE WHEN ISNULL(GOOD_WORK_Q,0) + ISNULL(BAD_WORK_Q,0) = 0 THEN 0
				         ELSE (ISNULL(A.BAD_WORK_Q, 0)) / (ISNULL(GOOD_WORK_Q,0) + ISNULL(BAD_WORK_Q,0)) * 1000000
				    END 										AS BAD_RATE		-- PPM
			</if> 
			<if test="GUBUN == &quot;B&quot;"> 
				  , CASE WHEN ISNULL(GOOD_WORK_Q,0) + ISNULL(BAD_WORK_Q,0) = 0 THEN 0
				         ELSE (ISNULL(A.BAD_WORK_Q, 0)) / (ISNULL(GOOD_WORK_Q,0) + ISNULL(BAD_WORK_Q,0)) * 100
				    END 										AS BAD_RATE		-- 백분율
			</if>   
				-- , CASE AVG(BAD_RATE) WHEN 0 THEN NULL
				--				 ELSE AVG(BAD_RATE)
				--   END														AS BAD_RATE
				 , CASE SUM(BAD_AMT) WHEN 0 THEN NULL
									 ELSE SUM(BAD_AMT)
				   END														AS BAD_AMT
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , CASE SUM(${item}) WHEN 0 THEN NULL
									 ELSE SUM(${item})
				   END														AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2 A
			       LEFT JOIN EQU200T B WITH(NOLOCK) ON A.DIV_CODE = B.DIV_CODE
				                                   AND A.EQUIP_CODE = B.EQU_CODE
												   AND B.EQU_CODE_TYPE = '2'
			 GROUP BY GRP_CD, B_GRP_CD, A.DIV_CODE, A.WORK_SHOP_CODE, WORK_SHOP_NAME, A.PRODT_DATE
				 , A.PROG_WORK_CODE, A.PRODT_DATE, A.ITEM_CODE, ITEM_NAME, SPEC
				 --20190128 수정
				 , PASS_Q, GOOD_WORK_Q, BAD_WORK_Q
			 ORDER BY A.WORK_SHOP_CODE, B_GRP_CD, GRP_CD, EQUIP_NAME
			 
			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END
	</select>





	<!-- 2. 일자계, 품목계(?) -->
	<select id="s_pmr350skrv_shServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/*pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY012 */
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON
			
			DECLARE @CompCode	NVARCHAR(08)	/* 법인코드 */
				  , @UserId		NVARCHAR(100)	/* 사용자ID */
				  , @LangType	NVARCHAR(02)	/* 언어구분 */
				  , @RefItem	NVARCHAR(01)	/* 명칭 참조 유형  */
				  , @DateFormat	NVARCHAR(10)	/* 날짜 포맷 유형 설정  */
				  , @SysDate	NVARCHAR(08)	/* 시스템일자  */ 
		
			SET @CompCode	= #{S_COMP_CODE}
			SET @UserId		= #{S_USER_ID}
			SET @LangType	= #{S_LANG_CODE}
			SET @SysDate	= CONVERT(NVARCHAR(08), GETDATE(), 112)
		
			/* 명칭 참조 유형  */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE USER_ID = @UserId
			
			SET @RefItem = ISNULL(@RefItem, N'0')
			
			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'
			
			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
			SELECT
					'1'											AS GRP_CD
				  , BA.WORK_SHOP_CODE
				   + A.PRODT_DATE
				   + A.PROG_WORK_CODE							AS B_GRP_CD
				  , A.DIV_CODE
				  , BA.WORK_SHOP_CODE
				  , B4.TREE_NAME								AS WORK_SHOP_NAME
				  , A.PRODT_DATE
				  , A.PROG_WORK_CODE
				  , C.PROG_WORK_NAME
				  , BA.ITEM_CODE
				  , B2.ITEM_NAME
				  , SUM(ISNULL(A.PASS_Q,  0))					AS PASS_Q
				  , SUM(ISNULL(A.GOOD_WORK_Q,0))				AS GOOD_WORK_Q
				  , SUM(ISNULL(A.BAD_WORK_Q, 0))				AS BAD_WORK_Q
				  , ISNULL(B1.BAD_Q,0)							AS BAD_Q
				  , CASE (SUM(A.PASS_Q) + ISNULL(B1.BAD_Q,0)) WHEN 0 THEN 0
															  ELSE ISNULL(ISNULL(B1.BAD_Q,0) / (SUM(A.PASS_Q) + ISNULL(B1.BAD_Q,0)) * 100,0)
					END											AS BAD_RATE
				  , CASE (SELECT TOP 1 SUB_CODE
							FROM BSA100T WITH(NOLOCK)
						   WHERE COMP_CODE = @CompCode
							 AND MAIN_CODE ='B069'
							 AND REF_CODE1 ='Y') WHEN '1' THEN ISNULL(ISNULL(B1.BAD_Q,0) * MAX(ISNULL(B3.BASIS_P,0)),0)
												 ELSE ISNULL(ISNULL(B1.BAD_Q,0) * MAX(ISNULL(B3.COST_PRICE,0)),0)
					END											AS BAD_AMT
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				  , CASE B1.BAD_CODE WHEN SUBSTRING('${item}', 5, 4) THEN B1.BAD_Q
									 ELSE 0
					END											AS ${item}
			</foreach>

			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY03 */
			  INTO		#TMP_BADTYPE_RPT2
			  FROM		PMR100T A  WITH (NOLOCK)
			 INNER JOIN PMP100T BA WITH (NOLOCK) ON BA.COMP_CODE	= @CompCode
												AND A.DIV_CODE		= BA.DIV_CODE
												AND A.WKORD_NUM		= BA.WKORD_NUM
												AND A.PROG_WORK_CODE= BA.PROG_WORK_CODE
			 LEFT  JOIN (SELECT DIV_CODE
							  , WKORD_NUM
							  , PROG_WORK_CODE
							  , PRODT_DATE
							  , WORK_SHOP_CODE
							  , BAD_CODE
							  , SUM(ISNULL(BAD_Q,0)) BAD_Q
						   FROM PMR300T WITH (NOLOCK)
						  WHERE COMP_CODE = @CompCode
						  GROUP BY DIV_CODE, WKORD_NUM, PROG_WORK_CODE, PRODT_DATE, WORK_SHOP_CODE, BAD_CODE
						) B1					 ON A.DIV_CODE			= B1.DIV_CODE
												AND A.WKORD_NUM			= B1.WKORD_NUM
												AND A.PROG_WORK_CODE	= B1.PROG_WORK_CODE
												AND A.PRODT_DATE		= B1.PRODT_DATE
												AND BA.WORK_SHOP_CODE	= B1.WORK_SHOP_CODE
			 INNER JOIN BPR100T B2 WITH (NOLOCK) ON B2.COMP_CODE		= @CompCode
												AND BA.ITEM_CODE		= B2.ITEM_CODE
			 INNER JOIN BPR200T B3 WITH (NOLOCK) ON B3.COMP_CODE		= @CompCode
												AND A.DIV_CODE			= B3.DIV_CODE
												AND BA.ITEM_CODE		= B3.ITEM_CODE
			 INNER JOIN BSA230T B4 WITH (NOLOCK) ON B4.COMP_CODE		= @CompCode
			 									AND BA.WORK_SHOP_CODE	= B4.TREE_CODE
			 INNER JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE			= @CompCode
												AND A.DIV_CODE			= C.DIV_CODE
												AND BA.WORK_SHOP_CODE	= C.WORK_SHOP_CODE
												AND A.PROG_WORK_CODE	= C.PROG_WORK_CODE
			/*분류코드*/
			 INNER JOIN (SELECT AA.ITEM_CODE
							  , AA.ITEM_NAME
							  , AA.SPEC
							  , AA.STOCK_UNIT
							  , BB.ITEM_GROUP
							  , BB.GROUP_NAME
							  , AA.ITEM_LEVEL1
							  , AA.ITEM_LEVEL2
							  , AA.ITEM_LEVEL3
						  FROM BPR100T AA WITH (NOLOCK)
						  LEFT OUTER JOIN (SELECT DISTINCT  X.ITEM_GROUP
												,			Y.ITEM_NAME		AS GROUP_NAME
											 FROM BPR100T X WITH (NOLOCK)
												, BPR100T Y WITH (NOLOCK)
											WHERE X.COMP_CODE	= @CompCode
											  AND Y.COMP_CODE	= @CompCode
											  AND X.ITEM_GROUP	IS NOT NULL
											  AND X.USE_YN		= 'Y'
											  AND X.ITEM_GROUP	= Y.ITEM_CODE) BB ON AA.ITEM_CODE = BB.ITEM_GROUP
						 WHERE AA.COMP_CODE = @CompCode) M1		ON BA.ITEM_CODE = M1.ITEM_CODE
			 WHERE 1 = 1
			   AND A.COMP_CODE = @CompCode
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
			   AND A.DIV_CODE			= #{DIV_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_FR)">
			   AND A.PRODT_DATE		&gt;= #{ORDER_DATE_FR}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_TO)">
			   AND A.PRODT_DATE		&lt;= #{ORDER_DATE_TO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(WKOR_SHOP_CODE)">
			   AND BA.WORK_SHOP_CODE	= #{WKOR_SHOP_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			   AND BA.ITEM_CODE			= #{ITEM_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			   AND B2.ITEM_NAME			= #{ITEM_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
			   AND M1.ITEM_LEVEL1		= #{TXTLV_L1}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
			   AND M1.ITEM_LEVEL2		= #{TXTLV_L2}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
			   AND M1.ITEM_LEVEL3		= #{TXTLV_L3}
			</if>
			 GROUP BY A.DIV_CODE, A.PRODT_DATE, BA.WORK_SHOP_CODE, B4.TREE_NAME, A.PROG_WORK_CODE
				 , C.PROG_WORK_NAME, BA.ITEM_CODE, B2.ITEM_NAME, B1.BAD_CODE, B1.BAD_Q


			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY04 */
			/* 공정별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				  'Z'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , PROG_WORK_CODE
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , PASS_Q
				 , GOOD_WORK_Q
				 , BAD_WORK_Q
				 , BAD_Q
				 --, SUM(BAD_Q)
				 , CASE (PASS_Q+SUM(BAD_Q)) WHEN 0 THEN 0
											ELSE SUM(BAD_Q) / (PASS_Q+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE
				 , PASS_Q, GOOD_WORK_Q, BAD_WORK_Q, ITEM_CODE, BAD_Q


			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '2'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , ''
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE


			DELETE #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'


			 /* 날짜별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '3'
				 , WORK_SHOP_CODE+PRODT_DATE + 'XXX'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , unilite.fnGetTxt('P0018')
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0  THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '2'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PRODT_DATE


			 /*작업장별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '4'
				 , WORK_SHOP_CODE+'ZZZ'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , unilite.fnGetTxt('P0019')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '3'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE


			 /*총계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
			  , ${item}
			</foreach>
			)
			SELECT
				   '5'
				 , '99999999'
				 , DIV_CODE
				 , 'ZZ'
				 , unilite.fnGetTxt('P0020')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , SUM(${item})	AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '3'
			 GROUP BY DIV_CODE



			/* 실제 데이터 조회 */
			SELECT
				   GRP_CD
				 , B_GRP_CD
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , WORK_SHOP_NAME
				 , unilite.fnGetUserDate(@CompCode, PRODT_DATE)				AS PRODT_DATE
				 , MAX(PROG_WORK_CODE)										AS PROG_WORK_CODE
				 , MAX(PROG_WORK_NAME)										AS PROG_WORK_NAME
				 , ITEM_CODE
				 , ITEM_NAME
				 , CASE SUM(PASS_Q)	WHEN 0 THEN NULL 
									ELSE SUM(PASS_Q) 
				   END														AS PASS_Q
				 , CASE SUM(GOOD_WORK_Q) WHEN 0 THEN NULL
										 ELSE SUM(GOOD_WORK_Q)
				   END														AS GOOD_WORK_Q
				 , CASE SUM(BAD_WORK_Q) WHEN 0 THEN NULL
										ELSE SUM(BAD_WORK_Q)
				   END														AS BAD_WORK_Q
				 , CASE SUM(BAD_Q) WHEN 0 THEN NULL
								   ELSE SUM(BAD_Q)
				   END														AS BAD_Q
				 -- , CASE (SUM(PASS_Q) + ISNULL(SUM(BAD_Q),0)) WHEN 0 THEN 0
					--									   ELSE ISNULL(ISNULL(SUM(BAD_Q),0) / (SUM(SUM(PASS_Q)) + ISNULL(SUM(BAD_Q),0)) * 100,0)
					--END														AS BAD_RATE
				 , CASE AVG(BAD_RATE) WHEN 0 THEN NULL
								 ELSE AVG(BAD_RATE)
				   END														AS BAD_RATE
				 , CASE SUM(BAD_AMT) WHEN 0 THEN NULL
									 ELSE SUM(BAD_AMT)
				   END														AS BAD_AMT
				 
			<foreach collection="badQtyArray" item="item" separator="" close="" open="">
				 , CASE SUM(${item}) WHEN 0 THEN NULL
									 ELSE SUM(${item})
				   END														AS ${item}
			</foreach>
			  FROM #TMP_BADTYPE_RPT2 A
			 GROUP BY GRP_CD, B_GRP_CD, DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PRODT_DATE
				 , PROG_WORK_CODE, PRODT_DATE, ITEM_CODE, ITEM_NAME
			 ORDER BY WORK_SHOP_CODE, B_GRP_CD, GRP_CD
			 
			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END
	</select>








	<!-- 기존 쿼리 백업 -->
	<select id="s_pmr350skrv_shServiceImpl.selectList_BACKUP" parameterType="Map" resultType="rMap">
		/*pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY013 */
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON
			
			DECLARE @CompCode	NVARCHAR(08)	/* 법인코드 */
				  , @UserId		NVARCHAR(100)	/* 사용자ID */
				  , @LangType	NVARCHAR(02)	/* 언어구분 */
				  , @RefItem	NVARCHAR(01)	/* 명칭 참조 유형  */
				  , @DateFormat	NVARCHAR(10)	/* 날짜 포맷 유형 설정  */
				  , @SysDate	NVARCHAR(08)	/* 시스템일자  */ 
		
			SET @CompCode	= #{S_COMP_CODE}
			SET @UserId		= #{S_USER_ID}
			SET @LangType	= #{S_LANG_CODE}
			SET @SysDate	= CONVERT(NVARCHAR(08), GETDATE(), 112)
		
			/* 명칭 참조 유형  */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE USER_ID = @UserId
			
			SET @RefItem = ISNULL(@RefItem, N'0')
			
			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'
			
			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
			SELECT
					'1'											AS GRP_CD
				  , BA.WORK_SHOP_CODE
				   + A.PRODT_DATE
				   + A.PROG_WORK_CODE							AS B_GRP_CD
				  , A.DIV_CODE
				  , BA.WORK_SHOP_CODE
				  , B4.TREE_NAME								AS WORK_SHOP_NAME
				  , A.PRODT_DATE
				  , A.PROG_WORK_CODE
				  , C.PROG_WORK_NAME
				  , BA.ITEM_CODE
				  , B2.ITEM_NAME
				  , SUM(ISNULL(A.PASS_Q,  0))					AS PASS_Q
				  , SUM(ISNULL(A.GOOD_WORK_Q,0))				AS GOOD_WORK_Q
				  , SUM(ISNULL(A.BAD_WORK_Q, 0))				AS BAD_WORK_Q
				  , ISNULL(B1.BAD_Q,0)							AS BAD_Q
				  , CASE (SUM(A.PASS_Q) + ISNULL(B1.BAD_Q,0)) WHEN 0 THEN 0
															  ELSE ISNULL(ISNULL(B1.BAD_Q,0) / (SUM(A.PASS_Q) + ISNULL(B1.BAD_Q,0)) * 100,0)
					END											AS BAD_RATE
				  , CASE (SELECT TOP 1 SUB_CODE
							FROM BSA100T WITH(NOLOCK)
						   WHERE COMP_CODE = @CompCode
							 AND MAIN_CODE ='B069'
							 AND REF_CODE1 ='Y') WHEN '1' THEN ISNULL(ISNULL(B1.BAD_Q,0) * MAX(ISNULL(B3.BASIS_P,0)),0)
												 ELSE ISNULL(ISNULL(B1.BAD_Q,0) * MAX(ISNULL(B3.COST_PRICE,0)),0)
					END											AS BAD_AMT
				  , CASE B1.BAD_CODE WHEN N'1000' THEN B1.BAD_Q
									 ELSE 0
					END											AS BAD_1000
				  , CASE B1.BAD_CODE WHEN N'1010' THEN B1.BAD_Q
									  ELSE 0
					END											AS BAD_1010
				  , CASE B1.BAD_CODE WHEN N'1020' THEN B1.BAD_Q
									 ELSE 0
					END											AS BAD_1020
				  , CASE B1.BAD_CODE WHEN N'1030' THEN B1.BAD_Q
									 ELSE 0
					END											AS BAD_1030

			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY03 */
			  INTO		#TMP_BADTYPE_RPT2
			  FROM		PMR100T A  WITH (NOLOCK)
			 INNER JOIN PMP100T BA WITH (NOLOCK) ON BA.COMP_CODE = @CompCode
												AND A.DIV_CODE= BA.DIV_CODE
												AND A.WKORD_NUM  = BA.WKORD_NUM
												AND A.PROG_WORK_CODE = BA.PROG_WORK_CODE
			 LEFT  JOIN (SELECT DIV_CODE
							  , WKORD_NUM
							  , PROG_WORK_CODE
							  , PRODT_DATE
							  , WORK_SHOP_CODE
							  , BAD_CODE
							  , SUM(ISNULL(BAD_Q,0)) BAD_Q
						   FROM PMR300T WITH (NOLOCK)
						  WHERE COMP_CODE = @CompCode
						  GROUP BY DIV_CODE, WKORD_NUM, PROG_WORK_CODE, PRODT_DATE, WORK_SHOP_CODE, BAD_CODE
						) B1					 ON A.DIV_CODE			= B1.DIV_CODE
												AND A.WKORD_NUM			= B1.WKORD_NUM
												AND A.PROG_WORK_CODE	= B1.PROG_WORK_CODE
												AND A.PRODT_DATE		= B1.PRODT_DATE
												AND BA.WORK_SHOP_CODE	= B1.WORK_SHOP_CODE
			 INNER JOIN BPR100T B2 WITH (NOLOCK) ON B2.COMP_CODE	= @CompCode
												AND BA.ITEM_CODE	= B2.ITEM_CODE
			 INNER JOIN BPR200T B3 WITH (NOLOCK) ON B3.COMP_CODE	= @CompCode
												AND A.DIV_CODE		= B3.DIV_CODE
												AND BA.ITEM_CODE	= B3.ITEM_CODE
			 INNER JOIN BSA230T B4 WITH (NOLOCK) ON B4.COMP_CODE= @CompCode
			 									AND BA.WORK_SHOP_CODE = B4.TREE_CODE
			 INNER JOIN PBS200T C  WITH (NOLOCK) ON C.COMP_CODE = @CompCode
												AND A.DIV_CODE  = C.DIV_CODE
												AND BA.WORK_SHOP_CODE = C.WORK_SHOP_CODE
												AND A.PROG_WORK_CODE  = C.PROG_WORK_CODE
			/*분류코드*/
			 INNER JOIN (SELECT AA.ITEM_CODE
							  , AA.ITEM_NAME
							  , AA.SPEC
							  , AA.STOCK_UNIT
							  , BB.ITEM_GROUP
							  , BB.GROUP_NAME
							  , AA.ITEM_LEVEL1
							  , AA.ITEM_LEVEL2
							  , AA.ITEM_LEVEL3
						  FROM BPR100T AA WITH (NOLOCK)
						  LEFT OUTER JOIN (SELECT DISTINCT  X.ITEM_GROUP
												,			Y.ITEM_NAME		AS GROUP_NAME
											 FROM BPR100T X WITH (NOLOCK)
												, BPR100T Y WITH (NOLOCK)
											WHERE X.COMP_CODE	= @CompCode
											  AND Y.COMP_CODE	= @CompCode
											  AND X.ITEM_GROUP	IS NOT NULL
											  AND X.USE_YN		= 'Y'
											  AND X.ITEM_GROUP = Y.ITEM_CODE) BB ON AA.ITEM_CODE = BB.ITEM_GROUP
						 WHERE AA.COMP_CODE = @CompCode) M1		ON BA.ITEM_CODE = M1.ITEM_CODE
			 WHERE 1 = 1
			   AND A.COMP_CODE = @CompCode
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
			   AND A.DIV_CODE			= #{DIV_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_FR)">
			   AND A.PRODT_DATE		&gt;= #{ORDER_DATE_FR}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_TO)">
			   AND A.PRODT_DATE		&lt;= #{ORDER_DATE_TO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(WKOR_SHOP_CODE)">
			   AND BA.WORK_SHOP_CODE	= #{WKOR_SHOP_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			   AND BA.ITEM_CODE			= #{ITEM_CODE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			   AND B2.ITEM_NAME			= #{ITEM_NAME}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
			   AND M1.ITEM_LEVEL1		= #{TXTLV_L1}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
			   AND M1.ITEM_LEVEL2		= #{TXTLV_L2}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
			   AND M1.ITEM_LEVEL3		= #{TXTLV_L3}
			</if>
			 GROUP BY A.DIV_CODE, A.PRODT_DATE, BA.WORK_SHOP_CODE, B4.TREE_NAME, A.PROG_WORK_CODE
				 , C.PROG_WORK_NAME, BA.ITEM_CODE, B2.ITEM_NAME, B1.BAD_CODE, B1.BAD_Q


			/* pmr350skrv.Cpmr350skrv SetPmr350Kr[Pmr350q] fnPmr350QStd QUERY04 */
			/* 공정별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			  , BAD_1000
			  , BAD_1010
			  , BAD_1020
			  , BAD_1030
			)
			SELECT
				  'Z'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , PROG_WORK_CODE
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , PASS_Q
				 , GOOD_WORK_Q
				 , BAD_WORK_Q
				 , SUM(BAD_Q)
				 , CASE (PASS_Q+SUM(BAD_Q)) WHEN 0 THEN 0
											ELSE SUM(BAD_Q) / (PASS_Q+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 , SUM(BAD_1000) AS BAD_1000
				 , SUM(BAD_1010) AS BAD_1010
				 , SUM(BAD_1020) AS BAD_1020
				 , SUM(BAD_1030) AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE
				 , PASS_Q, GOOD_WORK_Q, BAD_WORK_Q, ITEM_CODE


			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  , BAD_1000
			  , BAD_1010
			  , BAD_1020
			  , BAD_1030
			)
			SELECT
				   '2'
				 , WORK_SHOP_CODE+PRODT_DATE + PROG_WORK_CODE + 'X'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , PRODT_DATE
				 , ''
				 , unilite.fnGetTxt('P0017')
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
				 , SUM(BAD_1000) AS BAD_1000
				 , SUM(BAD_1010) AS BAD_1010
				 , SUM(BAD_1020) AS BAD_1020
				 , SUM(BAD_1030) AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PROG_WORK_CODE, PRODT_DATE


			DELETE #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = 'Z'

			 /* 날짜별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			  , BAD_1000
			  , BAD_1010
			  , BAD_1020
			  , BAD_1030
			)
			SELECT
				   '3'
				 , WORK_SHOP_CODE+PRODT_DATE + 'XXX'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , ''
				 , unilite.fnGetTxt('P0018')
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0  THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
				 , SUM(BAD_1000) AS BAD_1000
				 , SUM(BAD_1010) AS BAD_1010
				 , SUM(BAD_1020) AS BAD_1020
				 , SUM(BAD_1030) AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '2'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE, WORK_SHOP_NAME, PRODT_DATE


			 /*작업장별 소계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  
			  , BAD_1000
			  , BAD_1010
			  , BAD_1020
			  , BAD_1030
			)
			SELECT
				   '4'
				 , WORK_SHOP_CODE+'ZZZ'
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , unilite.fnGetTxt('P0019')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 
				 , SUM(BAD_1000) AS BAD_1000
				 , SUM(BAD_1010) AS BAD_1010
				 , SUM(BAD_1020) AS BAD_1020
				 , SUM(BAD_1030) AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD = '3'
			 GROUP BY DIV_CODE, WORK_SHOP_CODE


			 /*총계 */
			INSERT INTO #TMP_BADTYPE_RPT2 (
				GRP_CD
			  , B_GRP_CD
			  , DIV_CODE
			  , WORK_SHOP_CODE
			  , WORK_SHOP_NAME
			  , PRODT_DATE
			  , PROG_WORK_CODE
			  , PROG_WORK_NAME
			  , ITEM_CODE
			  , ITEM_NAME
			  , PASS_Q
			  , GOOD_WORK_Q
			  , BAD_WORK_Q
			  , BAD_Q
			  , BAD_RATE
			  , BAD_AMT
			  , BAD_1000
			  , BAD_1010
			  , BAD_1020
			  , BAD_1030
			)
			SELECT
				   '5'
				 , '99999999'
				 , unilite.fnGetTxt('P0020')
				 , 'ZZ'
				 , unilite.fnGetTxt('P0020')
				 , ''
				 , ''
				 , ''
				 , ''
				 , ''
				 , SUM(PASS_Q)
				 , SUM(GOOD_WORK_Q)
				 , SUM(BAD_WORK_Q)
				 , SUM(BAD_Q)
				 , CASE (SUM(PASS_Q)+SUM(BAD_Q)) WHEN 0 THEN 0
												 ELSE SUM(BAD_Q) / (SUM(PASS_Q)+SUM(BAD_Q)) * 100
				   END
				 , SUM(BAD_AMT)
				 , SUM(BAD_1000) AS BAD_1000
				 , SUM(BAD_1010) AS BAD_1010
				 , SUM(BAD_1020) AS BAD_1020
				 , SUM(BAD_1030) AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2
			 WHERE GRP_CD='3'
			 GROUP BY DIV_CODE
			 
			/* 실제 데이터 조회 */
			SELECT
				   GRP_CD
				 , B_GRP_CD
				 , DIV_CODE
				 , WORK_SHOP_CODE
				 , WORK_SHOP_NAME
				 , unilite.fnGetUserDate(@CompCode, PRODT_DATE)				AS PRODT_DATE
				 , PROG_WORK_CODE
				 , PROG_WORK_NAME
				 , ITEM_CODE
				 , ITEM_NAME
				 , CASE PASS_Q WHEN 0 THEN NULL ELSE PASS_Q END				AS PASS_Q
				 , CASE GOOD_WORK_Q WHEN 0 THEN NULL ELSE GOOD_WORK_Q END	AS GOOD_WORK_Q
				 , CASE BAD_WORK_Q  WHEN 0 THEN NULL ELSE BAD_WORK_Q  END	AS BAD_WORK_Q
				 , CASE BAD_Q WHEN 0 THEN NULL ELSE BAD_Q END				AS BAD_Q
				 , CASE BAD_RATE WHEN 0 THEN NULL ELSE BAD_RATE END			AS BAD_RATE
				 , CASE BAD_AMT  WHEN 0 THEN NULL ELSE BAD_AMT  END			AS BAD_AMT
				 
				 , CASE BAD_1000 WHEN 0 THEN NULL
								 ELSE BAD_1000
				   END														AS BAD_1000
				 , CASE BAD_1010 WHEN 0 THEN NULL
								 ELSE BAD_1010
				   END														AS BAD_1010
				 , CASE BAD_1020 WHEN 0 THEN NULL
								 ELSE BAD_1020
				   END														AS BAD_1020
				 , CASE BAD_1030 WHEN 0 THEN NULL
								 ELSE BAD_1030
				   END														AS BAD_1030
			  FROM #TMP_BADTYPE_RPT2 A
			 ORDER BY WORK_SHOP_CODE, B_GRP_CD, GRP_CD
			 
			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END
	</select>
</mapper>