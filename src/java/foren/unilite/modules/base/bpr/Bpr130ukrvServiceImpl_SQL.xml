<?xml version="1.0" encoding="UTF-8"?><!---->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bpr130ukrvServiceImpl">

<!-- 거래처 마스터정보 업로드 -->
	<!-- Excel -->
	<update id="bpr130ukrvServiceImpl.insertExcelBpr130ukrvupload1" parameterType="Map">
		DECLARE @COMPANY_NUM  NVARCHAR(13)
		      , @ZIP_CODE     NVARCHAR(06)

		    SET @COMPANY_NUM = #{COMPANY_NUM}
		    SET @COMPANY_NUM = REPLACE(@COMPANY_NUM, '-', '')
		    SET @ZIP_CODE    = #{ZIP_CODE}
		    SET @ZIP_CODE    = REPLACE(@ZIP_CODE, '-', '')

		--엑셀 파일에 있는 데이터를 임시테이블에 insert
		INSERT INTO BPR130T_1_XLS
		    (
		       _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
		     , _EXCEL_HAS_ERROR
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR)">
		     , _EXCEL_ERROR_MSG
		    </if>
		     , COMP_CODE
		     , CUSTOM_CODE
		     , CUSTOM_NAME
		    <if test="@foren.Ognl@isNotEmpty(USE_YN)">
		     , USE_YN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(COMPANY_NUM)">
		     , COMPANY_NUM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOP_NAME)">
		     , TOP_NAME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TELEPHON)">
		     , TELEPHON
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(FAX_NUM)">
		     , FAX_NUM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ZIP_CODE)">
		     , ZIP_CODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ADDR1)">
		     , ADDR1
		    </if>
		     , CUSTOM_TYPE
		    <if test="@foren.Ognl@isNotEmpty(COMP_TYPE)">
		     , COMP_TYPE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(COMP_CLASS)">
		     , COMP_CLASS
		    </if>
		    , INSERT_DB_USER
		    , INSERT_DB_TIME
		) VALUES (
		       #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
		     , #{_EXCEL_HAS_ERROR	,jdbcType=VARCHAR}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR)">
		     , #{_EXCEL_ERROR		,jdbcType=VARCHAR}
		    </if>
		     , #{S_COMP_CODE}
		     , #{CUSTOM_CODE}
		     , #{CUSTOM_NAME}
		    <if test="@foren.Ognl@isNotEmpty(USE_YN)">
		     , CASE WHEN #{USE_YN} = '거래'
		            THEN 'Y'
		            ELSE 'N'
		       END
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(COMPANY_NUM)">
		     , @COMPANY_NUM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOP_NAME)">
		     , #{TOP_NAME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TELEPHON)">
		     , #{TELEPHON}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(FAX_NUM)">
		     , #{FAX_NUM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ZIP_CODE)">
		     , @ZIP_CODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ADDR1)">
		     , #{ADDR1}
		    </if>
		     , CASE #{CUSTOM_TYPE}
		            WHEN '발주업체'  THEN '2'
		            WHEN '수발주업체' THEN '1'
		            WHEN '수주업체'  THEN '3'
		            ELSE '1'
		       END
		    <if test="@foren.Ognl@isNotEmpty(COMP_TYPE)">
		     , #{COMP_TYPE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(COMP_CLASS)">
		     , #{COMP_CLASS}
		    </if>
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<!-- 데이터 체크 -->
	<select id="bpr130ukrvServiceImpl.beforeExcelCheck1" parameterType="Map" resultType="string">
		SELECT MAX(_EXCEL_ERROR_MSG) AS ERROR_MSG
		  FROM BPR130T_1_XLS WITH (NOLOCK)
		 WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>

	<select id="bpr130ukrvServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
		/*bpr130ukrvServiceImpl.selectExcelUploadSheet1*/
		SELECT A._EXCEL_JOBID
		     , A._EXCEL_ROWNUM
		     , A._EXCEL_HAS_ERROR
		     , A._EXCEL_ERROR_MSG
		     , A.COMP_CODE
		     , A.CUSTOM_CODE
		     , A.CUSTOM_NAME
		     , A.COMPANY_NUM
		     , A.TOP_NAME
		     , A.CUSTOM_TYPE
		     , A.COMP_TYPE
		     , A.USE_YN
		  FROM BPR130T_1_XLS A WITH(NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>

	<!-- 업로드 된 데이터 가져오기 -->
	<select id="bpr130ukrvServiceImpl.getData1" parameterType="Map" resultType="rMap">
		SELECT  * FROM BPR130T_1_XLS WITH(NOLOCK)
		 WHERE _EXCEL_JOBID	 = #{_EXCEL_JOBID}
	</select>

	<!-- 에러메세지 update -->
	<update id="bpr130ukrvServiceImpl.insertErrorMsg1">
		UPDATE BPR130T_1_XLS
		   SET _EXCEL_ERROR_MSG = #{MSG}
		     , _EXCEL_HAS_ERROR = 'Y'
		 WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
		   AND _EXCEL_ROWNUM = #{ROWNUM}
	</update>

	<!-- 사업자번호가 주민등록번호일(개인사업자) 경우, 주민등록번호 update -->
	<update id="bpr130ukrvServiceImpl.updateTopNum">
		UPDATE BPR130T_1_XLS
		   SET COMPANY_NUM   = #{COMPANY_NUM}
		 WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
		   AND _EXCEL_ROWNUM = #{ROWNUM}
	</update>

	<update id="bpr130ukrvServiceImpl.excelValidate1" >
		/* 임시테이블에 있는 데이터를 BCM100T에 INSERT 또는 UPDATE */
		MERGE INTO BCM100T  A
		USING BPR130T_1_XLS B
		                      ON B.COMP_CODE   = A.COMP_CODE
		                     AND B.CUSTOM_CODE = A.CUSTOM_CODE

		WHEN MATCHED AND B._EXCEL_JOBID	= #{_EXCEL_JOBID} THEN
		    UPDATE SET
		          CUSTOM_NAME     = B.CUSTOM_NAME
		        , CUSTOM_FULL_NAME= B.CUSTOM_NAME
		        , USE_YN          = B.USE_YN
		        , COMPANY_NUM     = B.COMPANY_NUM
		        , TOP_NAME        = B.TOP_NAME
		        , TELEPHON        = B.TELEPHON
		        , FAX_NUM         = B.FAX_NUM
		        , ZIP_CODE        = B.ZIP_CODE
		        , ADDR1           = B.ADDR1
		        , CUSTOM_TYPE     = B.CUSTOM_TYPE
		        , COMP_TYPE       = B.COMP_TYPE
		        , COMP_CLASS      = B.COMP_CLASS
		        , UPDATE_DB_USER  = B.INSERT_DB_USER
		        , UPDATE_DB_TIME  = B.INSERT_DB_TIME

		WHEN NOT MATCHED AND B._EXCEL_JOBID	= #{_EXCEL_JOBID} THEN
		    INSERT (
		          COMP_CODE
		        , CUSTOM_CODE
		        , CUSTOM_TYPE
		        , CUSTOM_FULL_NAME
		        , CUSTOM_NAME
		        , CUSTOM_NAME1
		        , CUSTOM_NAME2
		        , NATION_CODE
		        , COMPANY_NUM
		        , TOP_NAME
		        , TOP_NUM
		        , BUSINESS_TYPE
		        , USE_YN
		        , COMP_CLASS
		        , COMP_TYPE
		        , ZIP_CODE
		        , ADDR1
		        , ADDR2
		        , TELEPHON
		        , FAX_NUM
		        , MAIL_ID
		        , WON_CALC_BAS
		        , START_DATE
		        , STOP_DATE
		        , TO_ADDRESS
		        , TAX_CALC_TYPE
		        , TRANS_CLOSE_DAY
		        , RECEIPT_DAY
		        , MONEY_UNIT
		        , TAX_TYPE
		        , BILL_TYPE
		        , SET_METH
		        , VAT_RATE
		        , MANAGE_CUSTOM
		        , AGENT_TYPE
		        , AREA_TYPE
		        , CREDIT_YN
		        , TOT_CREDIT_AMT
		        , CREDIT_AMT
		        , CREDIT_YMD
		        , RESULT_CARE_YN
		        , HTTP_ADDR
		        , BANK_CODE
		        , BANKBOOK_NUM
		        , BANKBOOK_NAME
		        , COLLECTOR_CP
		        , COLLECT_CARE
		        , BUSI_PRSN
		        , CAL_TYPE
		        , REMARK
		        , COLLECT_DAY
		        , HAND_PHON
		        , PURCHASE_BANK
		        , BILL_PRSN
		        , BILL_MAIL_ID
		        , BILL_MEM_TYPE
		        , UPDATE_DB_USER
		        , UPDATE_DB_TIME
		        , INSERT_DB_USER
		        , INSERT_DB_TIME
		    ) VALUES (
		          #{S_COMP_CODE}
		        , B.CUSTOM_CODE
		        , B.CUSTOM_TYPE
		        , B.CUSTOM_NAME
		        , B.CUSTOM_NAME
		        , NULL                                  --CUSTOM_NAME1
		        , NULL                                  --CUSTOM_NAME2
		        , 'KR'                                  --NATION_CODE
		        , B.COMPANY_NUM
		        , B.TOP_NAME
		        , NULL                                  --TOP_NUM
		        , NULL                                  --BUSINESS_TYPE
		        , B.USE_YN
		        , B.COMP_CLASS
		        , B.COMP_TYPE
		        , B.ZIP_CODE
		        , B.ADDR1
		        , NULL                                  --ADDR2
		        , B.TELEPHON
		        , B.FAX_NUM
		        , NULL                                  --MAIL_ID
		        , '3'                                   --WON_CALC_BAS
		        , CONVERT(VARCHAR(8), GETDATE(), 112)	--START_DATE
		        , NULL                                  --STOP_DATE
		        , NULL                                  --TO_ADDRESS
		        , NULL                                  --TAX_CALC_TYPE
		        , NULL                                  --TRANS_CLOSE_DAY
		        , NULL                                  --RECEIPT_DAY
		        , 'KRW'                                 --MONEY_UNIT
		        , '1'                                   --TAX_TYPE
		        , NULL                                  --BILL_TYPE
		        , NULL                                  --SET_METH
		        , 10                                    --VAT_RATE
		        , NULL                                  --MANAGE_CUSTOM
		        , '1'                                   --AGENT_TYPE
		        , NULL                                  --AREA_TYPE
		        , NULL                                  --CREDIT_YN
		        , NULL                                  --TOT_CREDIT_AMT
		        , NULL                                  --CREDIT_AMT
		        , NULL                                  --CREDIT_YMD
		        , NULL                                  --RESULT_CARE_YN
		        , NULL                                  --HTTP_ADDR
		        , NULL                                  --BANK_CODE
		        , NULL                                  --BANKBOOK_NUM
		        , NULL                                  --BANKBOOK_NAME
		        , NULL                                  --COLLECTOR_CP
		        , '1'                                   --COLLECT_CARE
		        , NULL                                  --BUSI_PRSN
		        , NULL                                  --CAL_TYPE
		        , NULL                                  --REMARK
		        , NULL                                  --COLLECT_DAY
		        , NULL                                  --HAND_PHON
		        , NULL                                  --PURCHASE_BANK
		        , NULL                                  --BILL_PRSN
		        , NULL                                  --BILL_MAIL_ID
		        , NULL                                  --BILL_MEM_TYPE
		        , B.INSERT_DB_USER
		        , B.INSERT_DB_TIME
		        , B.INSERT_DB_USER
		        , B.INSERT_DB_TIME
		        );
	</update>

	<!-- 에러메세지 조회 -->
	<select id="bpr130ukrvServiceImpl.getErrMsg1" parameterType="Map" resultType="String">
		SELECT MAX(_EXCEL_ERROR_MSG)  AS ERR_MSG
		  FROM BPR130T_1_XLS
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>





<!-- 품목 마스터정보 업로드 -->
	<!-- Excel -->
	<update id="bpr130ukrvServiceImpl.insertExcelBpr130ukrvupload2" parameterType="Map">
		 /* 1) 엑셀 파일에 있는 데이터를 임시테이블에 insert */
		DECLARE @USE_YN  NVARCHAR(01)

		    SET @USE_YN = #{USE_YN}
		    SET @USE_YN = ISNULL(@USE_YN, 'Y')

		INSERT INTO BPR130T_2_XLS
		    (
		       _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
		     , _EXCEL_HAS_ERROR
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR)">
		     , _EXCEL_ERROR_MSG
		    </if>
		     , COMP_CODE
		     , ITEM_CODE
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
		     , ITEM_NAME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME1)">
		     , ITEM_NAME1
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME2)">
		     , ITEM_NAME2
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SPEC)">
		     , SPEC
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		     , ITEM_LEVEL1
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		     , ITEM_LEVEL2
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		     , ITEM_LEVEL3
		    </if>
		     , STOCK_UNIT
		    <if test="@foren.Ognl@isNotEmpty(UNIT_WGT)">
		     , UNIT_WGT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WGT_UNIT)">
		     , WGT_UNIT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_VOL)">
		     , UNIT_VOL
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(VOL_UNIT)">
		     , VOL_UNIT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REIM)">
		     , REIM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(START_DATE)">
		     , START_DATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STOP_DATE)">
		     , STOP_DATE
		    </if>
		     , USE_YN
		    <if test="@foren.Ognl@isNotEmpty(SPEC_NUM)">
		     , SPEC_NUM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_MAKER)">
		     , ITEM_MAKER
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_MAKER_PN)">
		     , ITEM_MAKER_PN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_NO)">
		     , HS_NO
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_NAME)">
		     , HS_NAME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_UNIT)">
		     , HS_UNIT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_GROUP)">
		     , ITEM_GROUP
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_COLOR)">
		     , ITEM_COLOR
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_SIZE)">
		     , ITEM_SIZE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BARCODE)">
		     , BARCODE
		    </if>
		     , SALE_UNIT
		    <if test="@foren.Ognl@isNotEmpty(TRNS_RATE_F29)">
		     , TRNS_RATE_F29
		    </if>
		     , TAX_TYPE
		    <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE_F31)">
		     , CUSTOM_CODE_F31
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SALE_BASIS_P)">
		     , SALE_BASIS_P
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DOM_FORIGN)">
		     , DOM_FORIGN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STOCK_CARE_YN)">
		     , STOCK_CARE_YN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOTAL_ITEM)">
		     , TOTAL_ITEM
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOTAL_TRAN_RATE)">
		     , TOTAL_TRAN_RATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(EXCESS_RATE)">
		     , EXCESS_RATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(USE_BY_DATE)">
		     , USE_BY_DATE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(CIR_PERIOD_YN)">
		     , CIR_PERIOD_YN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK1)">
		     , REMARK1
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK2)">
		     , REMARK2
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK3)">
		     , REMARK3
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SQUARE_FT)">
		     , SQUARE_FT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BIG_BOX_BARCODE)">
		     , BIG_BOX_BARCODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SMALL_BOX_BARCODE)">
		     , SMALL_BOX_BARCODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
		     , ITEM_ACCOUNT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SUPPLY_TYPE)">
		     , SUPPLY_TYPE
		    </if>
		     , ORDER_UNIT
		    <if test="@foren.Ognl@isNotEmpty(TRNS_RATE_F49)">
		     , TRNS_RATE_F49
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE_F50)">
		     , CUSTOM_CODE_F50
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
		     , WH_CODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LOCATION)">
		     , LOCATION
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_PLAN)">
		     , ORDER_PLAN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MATRL_PRESENT_DAY)">
		     , MATRL_PRESENT_DAY
		    </if>
		     , APLY_START_DATE
		    <if test="@foren.Ognl@isNotEmpty(PURCHASE_BASE_P)">
		     , PURCHASE_BASE_P
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_PRSN)">
		     , ORDER_PRSN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_KIND)">
		     , ORDER_KIND
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SAFE_STOCK_Q)">
		     , SAFE_STOCK_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MINI_PURCH_Q)">
		     , MINI_PURCH_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAX_PURCH_Q)">
		     , MAX_PURCH_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(NEED_Q_PRESENT_Q)">
		     , NEED_Q_PRESENT_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PURCH_LDTIME)">
		     , PURCH_LDTIME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BASIS_P)">
		     , BASIS_P
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MINI_PACK_Q)">
		     , MINI_PACK_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(OUT_METH)">
		     , OUT_METH
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(RESULT_YN)">
		     , RESULT_YN
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PRODUCT_LDTIME)">
		     , PRODUCT_LDTIME
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ROUT_TYPE)">
		     , ROUT_TYPE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		     , WORK_SHOP_CODE
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAX_PRODT_Q)">
		     , MAX_PRODT_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STAN_PRODT_Q)">
		     , STAN_PRODT_Q
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PACK_QTY)">
		     , PACK_QTY
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ARRAY_CNT)">
		     , ARRAY_CNT
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_MODEL)">
		     , ITEM_MODEL
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_WIDTH)">
		     , ITEM_WIDTH
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LOT_YN)">
             , LOT_YN
            </if>
            <if test="@foren.Ognl@isNotEmpty(MAN_HOUR)">
             , MAN_HOUR
            </if>
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		) VALUES (
		       #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
		     , #{_EXCEL_HAS_ERROR	,jdbcType=VARCHAR}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR)">
		     , #{_EXCEL_ERROR		,jdbcType=VARCHAR}
		    </if>
		     , #{S_COMP_CODE}
		     , REPLACE(#{ITEM_CODE}, ' ', '')
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
		     , #{ITEM_NAME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME1)">
		     , #{ITEM_NAME1}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_NAME2)">
		     , #{ITEM_NAME2}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SPEC)">
		     , #{SPEC}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		     , #{ITEM_LEVEL1}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		     , #{ITEM_LEVEL2}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		     , #{ITEM_LEVEL3}
		    </if>
		     , UPPER(#{STOCK_UNIT})
		    <if test="@foren.Ognl@isNotEmpty(UNIT_WGT)">
		     , #{UNIT_WGT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WGT_UNIT)">
		     , #{WGT_UNIT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_VOL)">
		     , #{UNIT_VOL}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(VOL_UNIT)">
		     , #{VOL_UNIT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REIM)">
		     , #{REIM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(START_DATE)">
		     , #{START_DATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STOP_DATE)">
		     , #{STOP_DATE}
		    </if>
		     , @USE_YN
		    <if test="@foren.Ognl@isNotEmpty(SPEC_NUM)">
		     , #{SPEC_NUM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_MAKER)">
		     , #{ITEM_MAKER}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_MAKER_PN)">
		     , #{ITEM_MAKER_PN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_NO)">
		     , #{HS_NO}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_NAME)">
		     , #{HS_NAME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(HS_UNIT)">
		     , #{HS_UNIT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_GROUP)">
		     , #{ITEM_GROUP}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_COLOR)">
		     , #{ITEM_COLOR}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_SIZE)">
		     , #{ITEM_SIZE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BARCODE)">
		     , #{BARCODE}
		    </if>
		     , UPPER(#{SALE_UNIT})
		    <if test="@foren.Ognl@isNotEmpty(TRNS_RATE_F29)">
		     , #{TRNS_RATE_F29}
		    </if>
		     , #{TAX_TYPE}
		    <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE_F31)">
		     , #{CUSTOM_CODE_F31}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SALE_BASIS_P)">
		     , #{SALE_BASIS_P}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DOM_FORIGN)">
		     , #{DOM_FORIGN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STOCK_CARE_YN)">
		     , #{STOCK_CARE_YN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOTAL_ITEM)">
		     , #{TOTAL_ITEM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TOTAL_TRAN_RATE)">
		     , #{TOTAL_TRAN_RATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(EXCESS_RATE)">
		     , #{EXCESS_RATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(USE_BY_DATE)">
		     , #{USE_BY_DATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(CIR_PERIOD_YN)">
		     , #{CIR_PERIOD_YN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK1)">
		     , #{REMARK1}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK2)">
		     , #{REMARK2}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK3)">
		     , #{REMARK3}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SQUARE_FT)">
		     , #{SQUARE_FT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BIG_BOX_BARCODE)">
		     , #{BIG_BOX_BARCODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SMALL_BOX_BARCODE)">
		     , #{SMALL_BOX_BARCODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
		     , #{ITEM_ACCOUNT}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SUPPLY_TYPE)">
		     , #{SUPPLY_TYPE}
		    </if>
		     , UPPER(#{ORDER_UNIT})
		    <if test="@foren.Ognl@isNotEmpty(TRNS_RATE_F49)">
		     , #{TRNS_RATE_F49}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE_F50)">
		     , #{CUSTOM_CODE_F50}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
		     , #{WH_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LOCATION)">
		     , #{LOCATION}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_PLAN)">
		     , #{ORDER_PLAN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MATRL_PRESENT_DAY)">
		     , #{MATRL_PRESENT_DAY}
		    </if>
		     , #{APLY_START_DATE}
		    <if test="@foren.Ognl@isNotEmpty(PURCHASE_BASE_P)">
		     , #{PURCHASE_BASE_P}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_PRSN)">
		     , #{ORDER_PRSN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ORDER_KIND)">
		     , #{ORDER_KIND}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SAFE_STOCK_Q)">
		     , #{SAFE_STOCK_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MINI_PURCH_Q)">
		     , #{MINI_PURCH_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAX_PURCH_Q)">
		     , #{MAX_PURCH_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(NEED_Q_PRESENT_Q)">
		     , #{NEED_Q_PRESENT_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PURCH_LDTIME)">
		     , #{PURCH_LDTIME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(BASIS_P)">
		     , #{BASIS_P}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MINI_PACK_Q)">
		     , #{MINI_PACK_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(OUT_METH)">
		     , #{OUT_METH}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(RESULT_YN)">
		     , #{RESULT_YN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PRODUCT_LDTIME)">
		     , #{PRODUCT_LDTIME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ROUT_TYPE)">
		     , #{ROUT_TYPE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		     , #{WORK_SHOP_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAX_PRODT_Q)">
		     , #{MAX_PRODT_Q}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(STAN_PRODT_Q)">
		     , #{STAN_PRODT_Q}
		    </if>
		     <if test="@foren.Ognl@isNotEmpty(PACK_QTY)">
		     , #{PACK_QTY}
		    </if>
		     <if test="@foren.Ognl@isNotEmpty(ARRAY_CNT)">
		     , #{ARRAY_CNT}
		    </if>
		     <if test="@foren.Ognl@isNotEmpty(ITEM_MODEL)">
		     , #{ITEM_MODEL}
		    </if>
		     <if test="@foren.Ognl@isNotEmpty(ITEM_WIDTH)">
		     , #{ITEM_WIDTH}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LOT_YN)">
             , #{LOT_YN}
            </if>
            <if test="@foren.Ognl@isNotEmpty(MAN_HOUR)">
             , #{MAN_HOUR}
            </if>
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<!-- 데이터 체크 -->
	<select id="bpr130ukrvServiceImpl.beforeExcelCheck2-1" parameterType="Map" resultType="string">
		/* 2) 업로드 데이터내에 품목코드 null 삭제 체크 */
		DELETE FROM BPR130T_2_XLS
		 WHERE ITEM_CODE IS NULL

 		/* 2-1) 업로드 데이터내에 품목코드 중복여부 체크 */
 		DECLARE @dualItemCode   NVARCHAR(20)  --업로드 파일 내에 중복 기재 된 ITEM_CODE
 		      , @unregiItemCode NVARCHAR(20)  --미 등록 된 ITEM_CODE

		IF EXISTS ( SELECT ITEM_CODE
		              FROM BPR130T_2_XLS WITH (NOLOCK)
		             WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		             GROUP BY ITEM_CODE
		            HAVING COUNT(1) > 1 )
		    BEGIN
		        SELECT @dualItemCode = ITEM_CODE
		          FROM BPR130T_2_XLS WITH (NOLOCK)
		         WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		           AND ITEM_CODE    = #{ITEM_CODE}
		         GROUP BY ITEM_CODE
		        HAVING COUNT(1) > 1

		        UPDATE BPR130T_2_XLS
		           SET _EXCEL_HAS_ERROR = 'Y'
		             , _EXCEL_ERROR_MSG = '품번 ('  + @dualItemCode + ')(이)가 중복 되었습니다.'
		         WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
		           AND ITEM_CODE        = @dualItemCode
		    END

		ELSE
		    BEGIN
		        /* 2-2) 업로드 데이터내에 미등록 품목정보 체크 */
		        IF EXISTS ( SELECT A.ITEM_CODE
		                      FROM (SELECT ITEM_CODE, ITEM_NAME
		                              FROM BPR130T_2_XLS WITH (NOLOCK)
		                             WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		                               AND ISNULL(ITEM_NAME, '') = '')       AS A
		                      LEFT JOIN (SELECT ITEM_CODE
		                                   FROM BPR100T  WITH (NOLOCK)
		                                  WHERE COMP_CODE = #{S_COMP_CODE})  AS B ON B.ITEM_CODE = A.ITEM_CODE
		                     WHERE ISNULL(B.ITEM_CODE, '') = ''
		        )
		        BEGIN
		            SELECT @unregiItemCode = A.ITEM_CODE
		              FROM (SELECT ITEM_CODE, ITEM_NAME
		                      FROM BPR130T_2_XLS WITH (NOLOCK)
		                     WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		                       AND ISNULL(ITEM_NAME, '') = '')       AS A
		              LEFT JOIN (SELECT ITEM_CODE
		                           FROM BPR100T  WITH (NOLOCK)
		                          WHERE COMP_CODE = #{S_COMP_CODE})  AS B ON B.ITEM_CODE = A.ITEM_CODE
		             WHERE ISNULL(B.ITEM_CODE, '') = ''

		            UPDATE BPR130T_2_XLS
		               SET _EXCEL_HAS_ERROR = 'Y'
		                 , _EXCEL_ERROR_MSG = '품번 ('  + @dualItemCode + ')(이)가 등록되지 않은 품목코드입니다.'
		             WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
		               AND ITEM_CODE        = @unregiItemCode
		        END
		    END
	</select>

	<select id="bpr130ukrvServiceImpl.selectExcelUploadSheet2" parameterType="Map" resultType="rMap">
		/*bpr130ukrvServiceImpl.selectExcelUploadSheet2*/
		SELECT A._EXCEL_JOBID
		     , A._EXCEL_ROWNUM
		     , A._EXCEL_HAS_ERROR
		     , A._EXCEL_ERROR_MSG
		     , A.COMP_CODE
		     , A.ITEM_CODE
		     , A.ITEM_NAME
		     , A.APLY_START_DATE
		     , A.STOCK_UNIT
		     , A.SALE_UNIT
		     , A.TAX_TYPE
		     , A.USE_YN
		  FROM BPR130T_2_XLS A WITH(NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>

	<select id="bpr130ukrvServiceImpl.beforeExcelCheck2-2" parameterType="Map" resultType="string">
		SELECT MAX(_EXCEL_ERROR_MSG)     AS ERROR_MSG
		  FROM BPR130T_2_XLS WITH (NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>

	<!-- 업로드 된 데이터 가져오기 -->
	<select id="bpr130ukrvServiceImpl.getData2" parameterType="Map" resultType="rMap">
		SELECT  * FROM BPR130T_2_XLS WITH(NOLOCK)
		 WHERE _EXCEL_JOBID	 = #{_EXCEL_JOBID}
	</select>

	<!-- 에러메세지 update -->
	<update id="bpr130ukrvServiceImpl.insertErrorMsg2">
		INSERT BPR130T_2_XLS
		   (   _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_ERROR_MSG
		     , _EXCEL_HAS_ERROR
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		) VALUES (
		       #{_EXCEL_JOBID}
		     , 0
		     , #{MSG}
		     , 'Y'
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<select id="bpr130ukrvServiceImpl.excelValidate2-1" parameterType="Map" resultType="rMap">
		DECLARE @JSON_PARAM NVARCHAR(2000), @ERROR_DESC NVARCHAR(2000)
		  --※ 주의 : Json 파람조건에 엔터키 값 없이 해야함.
		  SET @JSON_PARAM = '{"COMP_CODE":"${S_COMP_CODE}","DIV_CODE":"${DIV_CODE}","FILE_NO":"${_EXCEL_JOBID}","USER_ID":"${S_USER_ID}"}'
		  exec uniLITE.SP_INTERFACE_ITEM_OMEGAPLUS @JSON_PARAM, @ERROR_DESC OUTPUT

		  SELECT @ERROR_DESC AS ERROR_DESC
	</select>

	<select id="bpr130ukrvServiceImpl.excelValidate2-2" parameterType="Map" resultType="rMap">
		DECLARE @JSON_PARAM NVARCHAR(2000), @ERROR_DESC NVARCHAR(2000)
		  --※ 주의 : Json 파람조건에 엔터키 값 없이 해야함.
		  SET @JSON_PARAM = '{"COMP_CODE":"${S_COMP_CODE}","DIV_CODE":"${DIV_CODE}","FILE_NO":"${_EXCEL_JOBID}","USER_ID":"${S_USER_ID}"}'
		  exec uniLITE.SP_INTERFACE_ITEM_BPR400T_OMEGAPLUS @JSON_PARAM, @ERROR_DESC OUTPUT

		  SELECT @ERROR_DESC AS ERROR_DESC
	</select>

	<!-- 에러메세지 조회 -->
	<select id="bpr130ukrvServiceImpl.getErrMsg2" parameterType="Map" resultType="String">
		SELECT MAX(_EXCEL_ERROR_MSG)  AS ERR_MSG
		  FROM BPR130T_2_XLS
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>





<!-- BOM 정보 업로드 -->
	<!-- Excel -->
	<update id="bpr130ukrvServiceImpl.insertExcelBpr130ukrvupload3" parameterType="Map">
		/* 1) 엑셀 파일에 있는 BOM 데이터를 임시테이블에 insert */
		INSERT INTO BPR500T_XLS_2
		    (
		       _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_HAS_ERROR
		     , _EXCEL_ERROR_MSG
		     , COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , EXCHG_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		    <if test="@foren.Ognl@isNotEmpty(UNIT_Q)">
		     , UNIT_Q
		    </if>
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P1)">
		     , UNIT_P1
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P2)">
		     , UNIT_P2
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P3)">
		     , UNIT_P3
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAN_HOUR)">
		     , MAN_HOUR
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SET_QTY)">
		     , SET_QTY
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK)">
		     , REMARK
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PROC_DRAW)">
		     , PROC_DRAW
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LAB_NO)">
		     , LAB_NO
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REQST_ID)">
		     , REQST_ID
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SAMPLE_KEY)">
		     , SAMPLE_KEY
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(GROUP_CODE)">
		     , GROUP_CODE
		    </if>
		     , SALE_CUSTOM_CODE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		)
		VALUES (
		       #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		     , #{_EXCEL_HAS_ERROR	,jdbcType=VARCHAR}
		     , #{_EXCEL_ERROR		,jdbcType=VARCHAR}
		     , #{S_COMP_CODE}
		     , #{DIV_CODE}
		     , #{PROD_ITEM_CODE}
		     , #{CHILD_ITEM_CODE}
		     , ''                        --EXCHG_ITEM_CODE
		     , #{START_DATE}
		     , #{PATH_CODE}
		     , #{SEQ}
		     , #{GRANT_TYPE}
		    <if test="@foren.Ognl@isNotEmpty(UNIT_Q)">
		     , CONVERT(NUMERIC(30, 6), ${UNIT_Q})
		    </if>
		     , CONVERT(NUMERIC(30, 6), ${PROD_UNIT_Q})
		     , CONVERT(NUMERIC(30, 6), ${LOSS_RATE})
		     , #{USE_YN}
		     , #{BOM_YN}
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P1)">
		     , CONVERT(NUMERIC(30, 6), ${UNIT_P1})
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P2)">
		     , CONVERT(NUMERIC(30, 6), ${UNIT_P2})
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(UNIT_P3)">
		     , CONVERT(NUMERIC(30, 6), ${UNIT_P3})
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(MAN_HOUR)">
		     , CONVERT(NUMERIC(30, 6), ${MAN_HOUR})
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SET_QTY)">
		     , CONVERT(NUMERIC(30, 6), ${SET_QTY})
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK)">
		     , #{REMARK}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PROC_DRAW)">
		     , #{PROC_DRAW}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(LAB_NO)">
		     , #{LAB_NO}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REQST_ID)">
		     , #{REQST_ID}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SAMPLE_KEY)">
		     , #{SAMPLE_KEY}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(GROUP_CODE)">
		     , #{GROUP_CODE}
		    </if>
		     , ''                    --SALE_CUSTOM_CODE
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<!-- 데이터 체크 -->
	<select id="bpr130ukrvServiceImpl.beforeExcelCheck3-1" parameterType="Map" resultType="string">
		/* 업로드 데이터내에 미등록 품목정보 체크 */
		UPDATE A
		   SET A._EXCEL_HAS_ERROR = 'Y'
		     , A._EXCEL_ERROR_MSG = CASE WHEN ISNULL(B1.ITEM_CODE, '') = '' THEN '품번 ('  + A.PROD_ITEM_CODE + ')(이)가 등록되지 않은 품목코드입니다.'
		                                 WHEN ISNULL(B2.ITEM_CODE, '') = '' THEN '품번 ('  + A.CHILD_ITEM_CODE + ')(이)가 등록되지 않은 품목코드입니다.'
		                                 ELSE ''
		                            END
		  FROM       BPR500T_XLS_2 AS A
		  LEFT JOIN (SELECT ITEM_CODE
		               FROM BPR100T  WITH (NOLOCK)
		              WHERE COMP_CODE = #{S_COMP_CODE})  AS B1 ON B1.ITEM_CODE = A.PROD_ITEM_CODE
		  LEFT JOIN (SELECT ITEM_CODE
		               FROM BPR100T  WITH (NOLOCK)
		              WHERE COMP_CODE = #{S_COMP_CODE})  AS B2 ON B2.ITEM_CODE = A.CHILD_ITEM_CODE
		 WHERE _EXCEL_JOBID            = #{_EXCEL_JOBID}
		   AND (ISNULL(B1.ITEM_CODE, '') = ''
		     OR (ISNULL(B2.ITEM_CODE, '') = '' AND A.CHILD_ITEM_CODE != '$'))
	</select>

	<select id="bpr130ukrvServiceImpl.selectExcelUploadSheet3" parameterType="Map" resultType="rMap">
		/*bpr130ukrvServiceImpl.selectExcelUploadSheet3*/
		SELECT _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_HAS_ERROR
		     , _EXCEL_ERROR_MSG
		     , COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		  FROM BPR500T_XLS_2 WITH(NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>

	<select id="bpr130ukrvServiceImpl.beforeExcelCheck3-2" parameterType="Map" resultType="string">
		SELECT MAX(_EXCEL_ERROR_MSG)     AS ERROR_MSG
		  FROM BPR500T_XLS_2 WITH (NOLOCK)
		 WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>

	<!-- 업로드 된 데이터 가져오기 -->
	<select id="bpr130ukrvServiceImpl.getData3" parameterType="Map" resultType="rMap">
		SELECT  * FROM BPR500T_XLS_2 WITH(NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
	</select>

	<!-- 에러메세지 update -->
	<update id="bpr130ukrvServiceImpl.insertErrorMsg3">
		INSERT BPR500T_XLS_2
		   (   _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_ERROR_MSG
		     , COMP_CODE
		     , _EXCEL_HAS_ERROR
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		) VALUES (
		       #{_EXCEL_JOBID}
		     , 0
		     , #{MSG}
		     , #{S_COMP_CODE}
		     , 'Y'
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<select id="bpr130ukrvServiceImpl.excelValidate3-1" parameterType="Map" resultType="rMap">
		-- 0. 백업
		DECLARE @TEM_TABLE_NAME NVARCHAR(50)
		      , @SQL            NVARCHAR(1024)
		    SET @TEM_TABLE_NAME = 'BPR500T_'+CONVERT(NVARCHAR(08), GETDATE(), 112) + REPLACE(CONVERT(NVARCHAR(08), GETDATE(), 108), ':', '')
		    SET	@SQL = 'SELECT * INTO ' + @TEM_TABLE_NAME + ' FROM BPR500T'
		   EXEC(@SQL)

		DECLARE @BASIS_PROD_ITEM_CODE NVARCHAR(20)
		DECLARE @BASIS_START_DATE     NVARCHAR(08)

		-- 1-1. 동일한 모품목 등록되어 있을 경우1: 모품목을 기준으로 기존 데이터의 적용시작일이 신규 데이터의 적용시작일과 같거나 이후일 경우 삭제
		IF EXISTS ( SELECT TOP 1 1
		              FROM       BPR500T       A WITH(NOLOCK)
		              INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                            FROM BPR500T_XLS_2 WITH(NOLOCK)
		                           WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                             AND CHILD_ITEM_CODE = '$'
		                          ) B  ON B.COMP_CODE       = A.COMP_CODE
		                              AND B.DIV_CODE        = A.DIV_CODE
		                              AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                              AND B.CHILD_ITEM_CODE = A.CHILD_ITEM_CODE
		                              AND B.PATH_CODE       = A.PATH_CODE
		                              AND B.START_DATE     &lt;= A.START_DATE
		)
		    BEGIN
		        DELETE A
		          FROM BPR500T A
		         WHERE A.COMP_CODE      = #{S_COMP_CODE}
		           AND A.DIV_CODE       = #{DIV_CODE}
		           AND A.PROD_ITEM_CODE + A.START_DATE IN  ( SELECT  B.PROD_ITEM_CODE + B.START_DATE
		                                                       FROM  BPR500T       A WITH(NOLOCK)
		                                                      INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                                                                    FROM BPR500T_XLS_2 WITH(NOLOCK)
		                                                                   WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                                                                     AND CHILD_ITEM_CODE = '$'
		                                                                  ) B  ON B.COMP_CODE       = A.COMP_CODE
		                                                                      AND B.DIV_CODE        = A.DIV_CODE
		                                                                      AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                                                                      AND B.CHILD_ITEM_CODE = A.CHILD_ITEM_CODE
		                                                                      AND B.PATH_CODE       = A.PATH_CODE
		                                                                      AND B.START_DATE     &lt;= A.START_DATE )
		    END

		-- 1-2. 동일한 모품목 등록되어 있을 경우2: 기존 데이터의 적용시작일이 신규 데이터의 적용시작일보다 빠르고 기존 데이터의 적용완료일이 신규 데이터의 시작일보다 느린경우 기존데이터의 적용완료일 UPDATE
		IF EXISTS ( SELECT TOP 1 1
		              FROM       BPR500T       A WITH(NOLOCK)
		              INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                            FROM BPR500T_XLS_2 WITH(NOLOCK)
		                           WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                             AND CHILD_ITEM_CODE = '$'
		                          ) B  ON B.COMP_CODE       = A.COMP_CODE
		                              AND B.DIV_CODE        = A.DIV_CODE
		                              AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                              AND B.CHILD_ITEM_CODE = A.CHILD_ITEM_CODE
		                              AND B.PATH_CODE       = A.PATH_CODE
		                              AND B.START_DATE      &gt; A.START_DATE
		                              AND B.START_DATE     &lt;= A.STOP_DATE
		)
		    BEGIN
		      <!-- SELECT @BASIS_PROD_ITEM_CODE = B.PROD_ITEM_CODE
		             , @BASIS_START_DATE     = B.START_DATE
		          FROM       BPR500T       A WITH(NOLOCK)
		          INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                        FROM BPR500T_XLS_2 WITH(NOLOCK)
		                       WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                         AND CHILD_ITEM_CODE = '$'
		                      ) B  ON B.COMP_CODE       = A.COMP_CODE
		                          AND B.DIV_CODE        = A.DIV_CODE
		                          AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                          AND B.CHILD_ITEM_CODE = A.CHILD_ITEM_CODE
		                          AND B.PATH_CODE       = A.PATH_CODE
		                          AND B.START_DATE      &gt; A.START_DATE
		                          AND B.START_DATE     &lt;= A.STOP_DATE
		         -->

		            UPDATE A
		               SET A.STOP_DATE      = CONVERT(NVARCHAR(08), DATEADD(DD, -1, B.START_DATE), 112)
		                 , A.UPDATE_DB_USER = #{S_USER_ID}
		                 , A.UPDATE_DB_TIME = GETDATE()
		              FROM BPR500T A JOIN
		              (SELECT COMP_CODE
		                    , DIV_CODE
		                    , PROD_ITEM_CODE
		                    , CHILD_ITEM_CODE
		                    , PATH_CODE
		                    , START_DATE
		                    ,_EXCEL_JOBID
		                 FROM BPR500T_XLS_2 WITH(NOLOCK)
		                WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                  AND CHILD_ITEM_CODE = '$') B ON A.COMP_CODE = B.COMP_CODE
		                                              AND A.DIV_CODE  = B.DIV_CODE
		                                              AND A.PROD_ITEM_CODE = B.PROD_ITEM_CODE
		                                              --AND A.CHILD_ITEM_CODE = B.CHILD_ITEM_CODE
		                                              AND A.PATH_CODE = B.PATH_CODE
		                                              AND ISNULL(A.START_DATE, '19000101') <![CDATA[<=]]> B.START_DATE
		                                              AND  A.STOP_DATE >= B.START_DATE
		    END

		-- 2. 데이터 입력
		INSERT INTO BPR500T
		     ( COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		     , UNIT_P1
		     , UNIT_P2
		     , UNIT_P3
		     , MAN_HOUR
		     , SET_QTY
		     , REMARK
		     , PROC_DRAW
		     , LAB_NO
		     , REQST_ID
		     , SAMPLE_KEY
		     , GROUP_CODE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		)
		SELECT COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		     , UNIT_P1
		     , UNIT_P2
		     , UNIT_P3
		     , MAN_HOUR
		     , SET_QTY
		     , REMARK
		     , PROC_DRAW
		     , LAB_NO
		     , REQST_ID
		     , SAMPLE_KEY
		     , GROUP_CODE
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		  FROM BPR500T_XLS_2
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND PROD_ITEM_CODE + START_DATE NOT IN  ( SELECT  A.PROD_ITEM_CODE + A.START_DATE
		                                               FROM   BPR500T A WITH(NOLOCK)
		                                               INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                                                             FROM BPR500T_XLS_2 WITH(NOLOCK)
		                                                            WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                                                              AND CHILD_ITEM_CODE = '$'
		                                                           ) B  ON B.COMP_CODE       = A.COMP_CODE
		                                                               AND B.DIV_CODE        = A.DIV_CODE
		                                                               AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                                                               AND B.CHILD_ITEM_CODE = A.CHILD_ITEM_CODE
		                                                               AND B.PATH_CODE       = A.PATH_CODE
		                                                               AND B.START_DATE  >= A.START_DATE
		                                                               AND B.START_DATE  >= A.STOP_DATE )
	</select>

	<select id="bpr130ukrvServiceImpl.excelValidate3-2" parameterType="Map" resultType="rMap">
		/* bpr130ukrvServiceImpl.excelValidate3-2 */
		-- 1-1. 동일한 모품목 등록되어 있을 경우: 모품목을 기준으로 기존 데이터 삭제
		IF EXISTS ( SELECT TOP 1 1
		              FROM       BPR500T       A WITH(NOLOCK)
		              INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                            FROM BPR500T_XLS_2 WITH(NOLOCK)
		                           WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                             AND CHILD_ITEM_CODE = '$'
		                          ) B  ON B.COMP_CODE       = A.COMP_CODE
		                              AND B.DIV_CODE        = A.DIV_CODE
		                              AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                              AND B.PATH_CODE       = A.PATH_CODE
		                              --AND B.START_DATE     lt;= A.START_DATE
		)
		    BEGIN
		        DELETE A
		          FROM BPR500T A
		          INNER JOIN (SELECT COMP_CODE, DIV_CODE, PROD_ITEM_CODE, CHILD_ITEM_CODE, PATH_CODE, START_DATE,_EXCEL_JOBID
		                        FROM BPR500T_XLS_2 WITH(NOLOCK)
		                       WHERE _EXCEL_JOBID    = #{_EXCEL_JOBID}
		                         AND CHILD_ITEM_CODE = '$'
		                      ) B  ON B.COMP_CODE       = A.COMP_CODE
		                          AND B.DIV_CODE        = A.DIV_CODE
		                          AND B.PROD_ITEM_CODE  = A.PROD_ITEM_CODE
		                          AND B.PATH_CODE       = A.PATH_CODE
		         WHERE A.COMP_CODE      = B.COMP_CODE
		           AND A.DIV_CODE       = B.DIV_CODE
		           AND A.PROD_ITEM_CODE = B.PROD_ITEM_CODE
		           AND A.PATH_CODE      = B.PATH_CODE
		    END

		-- 2. 데이터 입력
		INSERT INTO BPR500T
		     ( COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		     , UNIT_P1
		     , UNIT_P2
		     , UNIT_P3
		     , MAN_HOUR
		     , SET_QTY
		     , REMARK
		     , PROC_DRAW
		     , LAB_NO
		     , REQST_ID
		     , SAMPLE_KEY
		     , GROUP_CODE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		)
		SELECT COMP_CODE
		     , DIV_CODE
		     , PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		     , UNIT_P1
		     , UNIT_P2
		     , UNIT_P3
		     , MAN_HOUR
		     , SET_QTY
		     , REMARK
		     , PROC_DRAW
		     , LAB_NO
		     , REQST_ID
		     , SAMPLE_KEY
		     , GROUP_CODE
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		  FROM BPR500T_XLS_2
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
	</select>

	<!-- 에러메세지 조회 -->
	<select id="bpr130ukrvServiceImpl.getErrMsg3" parameterType="Map" resultType="String">
		SELECT MAX(_EXCEL_ERROR_MSG)  AS ERR_MSG
		  FROM BPR500T_XLS_2
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND _EXCEL_HAS_ERROR = 'Y'
	</select>



<!-- 전체 BOM Data 다운로드-->
	<select id="bpr130ukrvServiceImpl.selectBOMList" parameterType="Map" resultType="rMap">
		/*bpr130ukrvServiceImpl.selectBOMList*/
		SELECT PROD_ITEM_CODE
		     , CHILD_ITEM_CODE
		     , START_DATE
		     , PATH_CODE
		     , SEQ
		     , GRANT_TYPE
		     , UNIT_Q
		     , PROD_UNIT_Q
		     , LOSS_RATE
		     , USE_YN
		     , BOM_YN
		     , UNIT_P1
		     , UNIT_P2
		     , UNIT_P3
		     , MAN_HOUR
		     , SET_QTY
		     , REMARK
		     , PROC_DRAW
		     , LAB_NO
		     , REQST_ID
		     , SAMPLE_KEY
		     , GROUP_CODE
		  FROM BPR500T
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{DIV_CODE}
		 ORDER BY PROD_ITEM_CODE, SEQ, CHILD_ITEM_CODE
	</select>

	<!-- 중복 체크-->
	<select id="bpr130ukrvServiceImpl.excelValidateDuplicationChk" parameterType="Map" resultType="rMap">
		/*bpr130ukrvServiceImpl.excelValidateDuplicationChk*/
		SELECT TOP 1 DIV_CODE
		           , PROD_ITEM_CODE
		           , CHILD_ITEM_CODE
		           , START_DATE
		           , PATH_CODE
--		           , COUNT(1)
		  FROM BPR500T_XLS_2 WITH(NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 GROUP BY COMP_CODE
		        , DIV_CODE
		        , PROD_ITEM_CODE
		        , CHILD_ITEM_CODE
		        , START_DATE
		        , PATH_CODE
		HAVING COUNT(1) >= 2
	</select>

	<!-- 백업
	<select id="bpr130ukrvServiceImpl.excelValidate2" parameterType="Map" resultType="rMap">
		/**********************************************************************************************************************
		 품목 업로드 처리
		**********************************************************************************************************************/
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		/*  1. 변수 처리 */
		    BEGIN
		/*	  1-1. 입력 변수 정의 */
		    	DECLARE		 @COMP_CODE		  NVARCHAR(08)		    	/* (필수) 법인코드 */
		    		    	  , @DIV_CODE		   NVARCHAR(08)		    	/* (필수) 사업장 */
		    		    	  , @FILE_NO		    NVARCHAR(50)		    	/* (필수) key값 */
		    		    	  , @USER_ID		    NVARCHAR(10)		    	/* (필수) 사용자ID */
		    		    	  , @ERROR_DESC		 NVARCHAR(1000)		      /* (필수) SP OutPut 변수 */

		    	SET @COMP_CODE		  = #{S_COMP_CODE}
		    	SET @DIV_CODE		   = #{DIV_CODE}
		    	SET @FILE_NO		    = #{_EXCEL_JOBID}
		    	SET @USER_ID		    = #{S_USER_ID}

		/*	  1-2. 일반 변수 정의 */
		    	DECLARE		@ItemCode		    NVARCHAR(20)		    	/* 품목코드 */
		    		    	 , @ItemName		    NVARCHAR(50)		    	/* 품목명 */

		    	DECLARE		@ErrorCode		   NVARCHAR(20)		    	/* Error Code */
		    		    	 , @ErrorDesc		   NVARCHAR(1000)		      /* Error Description */

		    END	/*  End of [1. 변수 처리] */
		/********************************************************************************************************************** */

		/*  2. 품목 업로드 처리 */
		    BEGIN
		    	EXEC uniLITE.SP_INTERFACE_ITEM_OMEGAPLUS_TEST @COMP_CODE, @DIV_CODE, @FILE_NO, @USER_ID, @ERROR_DESC OUTPUT

		    	IF CHARINDEX(';', @ERROR_DESC) > 0
		    	BEGIN
		    		SET @ErrorCode  = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ErrordESC  = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ItemCode   = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ItemName   = @ERROR_DESC

		    		GOTO ERROR_HANDLER
		    	END
		    END	/*  End of [2. 품목 업로드 처리] */
		/********************************************************************************************************************** */

		    BEGIN
		    	EXEC uniLITE.SP_INTERFACE_ITEM_BPR400T_OMEGAPLUS @COMP_CODE, @DIV_CODE, @FILE_NO, @USER_ID, @ERROR_DESC OUTPUT

		    	IF CHARINDEX(';', @ERROR_DESC) > 0
		    	BEGIN
		    		SET @ErrorCode  = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ErrordESC  = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ItemCode   = SUBSTRING(@ERROR_DESC, 1, CHARINDEX(';', @ERROR_DESC) - 1)
		    		SET @ERROR_DESC = SUBSTRING(@ERROR_DESC, CHARINDEX(';', @ERROR_DESC) + 1, LEN(@ERROR_DESC))
		    		SET @ItemName   = @ERROR_DESC

		    		GOTO ERROR_HANDLER
		    	END
		    END	/*  End of [3. 판매단가] */
		/********************************************************************************************************************** */

		/*  3. Error Handler 처리 */
		ERROR_HANDLER:
		    SELECT TOP 1
		    	   ISNULL(@ErrorCode,  '')  AS ERROR_CODE,	  ISNULL(@ErrorDesc,  '')  AS ERROR_DESC
		    	 , ISNULL(@ItemCode,   '')  AS ITEM_CODE,	   ISNULL(@ItemName,   '')  AS ITEM_NAME

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END	/* End Of [품목 업로드 처리] */
	</select>
		-->
</mapper>