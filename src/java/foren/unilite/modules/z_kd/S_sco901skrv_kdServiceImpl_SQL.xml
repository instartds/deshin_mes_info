<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_sco901skrv_kdService">
    <select id="s_sco901skrv_kdService.selectList" parameterType="Map" resultType="rMap">
<![CDATA[    

      -- 미수금현황 (s_sco901skrv_kd)
      --수정시 월별거래처별미수금집계(s_ssa912rkrv_kd의 그룹웨어 연계SP USP_GW_S_SSA912RKRV_KD) 도 같이 확인할것
    	BEGIN
        SET NOCOUNT ON
        SET ARITHABORT ON



            DECLARE @COMP_CODE       NVARCHAR(10)
                  , @DIV_CODE        NVARCHAR(10)
                  , @CUSTOM_CODE     NVARCHAR(10)
                  , @CUSTOM_NAME     NVARCHAR(100)

                  , @FROM_DATE		NVARCHAR(08)
				  , @BASIS_DATE     NVARCHAR(08) --기초잔액 반영월
                  , @BASIS_YYYYMM   NVARCHAR(06)

/*    
            SET @COMP_CODE       = 'MASTER'
            SET @DIV_CODE        = '01'
 			SET @BASIS_YYYYMM = '202107'       ---기준년월
            SET @CUSTOM_CODE     = '11117'
            SET @CUSTOM_NAME     = ''
  */      
		
		SET @COMP_CODE    = #{S_COMP_CODE}   ---법인
        SET @DIV_CODE     = #{DIV_CODE}      ---사업장
        SET @BASIS_YYYYMM = #{YYYY_MM}       ---기준년월
        SET @CUSTOM_CODE  = #{CUSTOM_CODE}   ---거래처코드
  

 
        DECLARE @UNCOLLECT_AMT NUMERIC(30, 6)
			, @BALANCE_AMT NUMERIC(30, 6), @BALANCE_AMT_05 NUMERIC(30, 6), @BALANCE_AMT_04 NUMERIC(30, 6), @BALANCE_AMT_03 NUMERIC(30, 6), @BALANCE_AMT_02 NUMERIC(30, 6), @BALANCE_AMT_01 NUMERIC(30, 6), @BALANCE_AMT_00 NUMERIC(30, 6)
			, @BALANCE_AMT_TOT NUMERIC(30, 6)
			, @REMAIN_AMT NUMERIC(30, 6), @REMAIN_AMT_05 NUMERIC(30, 6), @REMAIN_AMT_04 NUMERIC(30, 6), @REMAIN_AMT_03 NUMERIC(30, 6), @REMAIN_AMT_02 NUMERIC(30, 6), @REMAIN_AMT_01 NUMERIC(30, 6), @REMAIN_AMT_00 NUMERIC(30, 6)
			, @COLLECT_AMT NUMERIC(30, 6)
			

            IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE ID=OBJECT_ID('tempdb..#TMP_SCO901'))
                DROP TABLE #TMP_SCO901

				SELECT @BASIS_DATE = BASIS_YYYYMM + '01'	--기초잔액반영월
				FROM SAR000T 
				WHERE COMP_CODE =  @COMP_CODE
					AND DIV_CODE = @DIV_CODE
		
		SET @FROM_DATE =   CONVERT(VARCHAR(6), DATEADD(MONTH, -5, @BASIS_YYYYMM + '01'), 112) + '01'
		
		SET @FROM_DATE = CASE WHEN @FROM_DATE  <= @BASIS_DATE THEN @BASIS_DATE ELSE @FROM_DATE END 



		--SELECT @FROM_DATE , @BASIS_DATE

            CREATE TABLE #TMP_SCO901 (
                SEQ           INT IDENTITY (1, 1) NOT NULL,
                COMP_CODE     NVARCHAR(08),					--법인코드
                DIV_CODE      NVARCHAR(08),					--사업장
                CUSTOM_CODE   NVARCHAR(08),					--거래처
                MONEY_UNIT    NVARCHAR(03),					--화폐
                BALANCE_AMT		NUMERIC(30, 6),		--이월
                BALANCE_AMT_05   NUMERIC(30, 6),	--미수잔액5
                BALANCE_AMT_04   NUMERIC(30, 6),	--미수잔액4
                BALANCE_AMT_03   NUMERIC(30, 6),	--미수잔액3
                BALANCE_AMT_02   NUMERIC(30, 6),	--미수잔액2
                BALANCE_AMT_01   NUMERIC(30, 6),	--미수잔액1
                BALANCE_AMT_00   NUMERIC(30, 6),	--미수잔액0

                BALANCE_AMT_TOT   NUMERIC(30, 6),	--미수잔액
                COLLECT_AMT_TOT   NUMERIC(30, 6),	--수금액

                REMARK        NVARCHAR(1000)
            )


            --1. 이월금액 임시테이블에 INSERT
			INSERT INTO #TMP_SCO901
				
SELECT X.COMP_CODE, X.DIV_CODE, X.CUSTOM_CODE, X.MONEY_UNIT
	,  SUM(X.SALE_AMT) AS SALE_AMT 
	,  SUM(X.SALE_AMT_05) AS SALE_AMT_05 
	,  SUM(X.SALE_AMT_04) AS SALE_AMT_04 
	,  SUM(X.SALE_AMT_03) AS SALE_AMT_03 
	,  SUM(X.SALE_AMT_02) AS SALE_AMT_02 
	,  SUM(X.SALE_AMT_01) AS SALE_AMT_01 
	,  SUM(X.SALE_AMT_00) AS SALE_AMT_00 
	,  SUM(X.SALE_AMT_TOT) AS SALE_AMT_TOT
	,  SUM(ISNULL(X.COLLECT_AMT, 0)) AS COLLECT_AMT
	, '' AS REMARK
FROM (
				-- 기초잔액
			SELECT COMP_CODE
				, DIV_CODE
				, CUSTOM_CODE
				, MONEY_UNIT
				, ISNULL(BASIS_AMT_O, 0)	AS SALE_AMT		
				, 0							AS SALE_AMT_05 
				, 0							AS SALE_AMT_04 
				, 0							AS SALE_AMT_03 
				, 0							AS SALE_AMT_02 
				, 0							AS SALE_AMT_01 
				, 0							AS SALE_AMT_00 
				, 0							AS SALE_AMT_TOT                
				, 0							AS COLLECT_AMT
				, '기초' AS REMARK
				
			FROM SAR100T WITH(NOLOCK)
			WHERE COMP_CODE   = @COMP_CODE
               AND DIV_CODE    = @DIV_CODE
               AND ( ( CUSTOM_CODE = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )

			UNION ALL

				--이월 세금계산서 발행금액
			SELECT COMP_CODE
				, SALE_DIV_CODE				AS DIV_CODE
				, CUSTOM_CODE
				, ISNULL(MONEY_UNIT, 'KRW') AS MONEY_UNIT
				--, MONEY_UNIT AS MONEY_UNIT
				, SUM(ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0))	AS SALE_AMT		
				, 0													AS SALE_AMT_05 
				, 0													AS SALE_AMT_04 
				, 0													AS SALE_AMT_03 
				, 0													AS SALE_AMT_02 
				, 0													AS SALE_AMT_01 
				, 0													AS SALE_AMT_00 
				, 0													AS SALE_AMT_TOT                
				, 0													AS COLLECT_AMT
				, '이월계산서'										AS REMARK

              FROM STB100T WITH(NOLOCK)
             WHERE COMP_CODE     = @COMP_CODE
				   AND SALE_DIV_CODE = @DIV_CODE
				   AND ( ( CUSTOM_CODE = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
				   AND BILL_DATE     >= @BASIS_DATE
				   AND BILL_DATE     < @FROM_DATE

             GROUP BY COMP_CODE, SALE_DIV_CODE, CUSTOM_CODE, ISNULL(MONEY_UNIT, 'KRW')

		UNION ALL
				-- 
			SELECT COMP_CODE
				, DIV_CODE					AS DIV_CODE
				, IMPORTER					AS CUSTOM_CODE
				, AMT_UNIT					AS MONEY_UNIT
				, SUM(ISNULL(BL_AMT, 0))	AS SALE_AMT		
				, 0													AS SALE_AMT_05 
				, 0													AS SALE_AMT_04 
				, 0													AS SALE_AMT_03 
				, 0													AS SALE_AMT_02 
				, 0													AS SALE_AMT_01 
				, 0													AS SALE_AMT_00 
				, 0													AS SALE_AMT_TOT                
				, 0													AS COLLECT_AMT
				, '이월선적'						AS REMARK

			FROM TED100T WITH(NOLOCK)
			WHERE COMP_CODE     = @COMP_CODE
				   AND DIV_CODE = @DIV_CODE
				   AND ( ( IMPORTER = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
				   AND  BL_DATE >= @BASIS_DATE 
				   AND  BL_DATE < @FROM_DATE 

			GROUP BY COMP_CODE, DIV_CODE, IMPORTER, AMT_UNIT

			UNION ALL
            
			SELECT A.COMP_CODE
                 , A.DIV_CODE
                 , A.CUSTOM_CODE
                 , A.MONEY_UNIT
				, (-1) * SUM(ISNULL(A.COLLECT_AMT, 0) )		AS SALE_AMT		
				, 0											AS SALE_AMT_05 
				, 0											AS SALE_AMT_04 
				, 0											AS SALE_AMT_03 
				, 0											AS SALE_AMT_02 
				, 0											AS SALE_AMT_01 
				, 0											AS SALE_AMT_00 
				, 0											AS SALE_AMT_TOT                
				, 0											AS COLLECT_AMT
				, '이월수금'								AS REMARK

              FROM      SCO100T A WITH(NOLOCK)
              LEFT JOIN SCO200T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                              AND B.DIV_CODE    = A.DIV_CODE
                                              AND B.CUSTOM_CODE = A.CUSTOM_CODE
                                              AND B.MONEY_UNIT  = A.MONEY_UNIT
             WHERE A.COMP_CODE   = @COMP_CODE
				AND A.DIV_CODE    = @DIV_CODE
				AND ( ( A.CUSTOM_CODE = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
				AND A.COLLECT_DATE >= @BASIS_DATE
				AND A.COLLECT_DATE  <  @FROM_DATE
             GROUP BY A.COMP_CODE, A.DIV_CODE, A.CUSTOM_CODE, A.MONEY_UNIT

		UNION ALL
				-- 세금계산서 발행금액
			SELECT COMP_CODE
				, SALE_DIV_CODE				AS DIV_CODE
				, CUSTOM_CODE
				, ISNULL(MONEY_UNIT, 'KRW') AS MONEY_UNIT
				, 0							AS SALE_AMT		

				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -5, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_05 
				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -4, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_04 
				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -3, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_03 
				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -2, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_02 
				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -1, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_01 
				, SUM(CASE WHEN SUBSTRING(BILL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -0, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(SALE_AMT_O, 0) + ISNULL(TAX_AMT_O, 0)) ELSE 0 END)	AS SALE_AMT_00 
				, 0									AS SALE_AMT_TOT                
				, 0									AS COLLECT_AMT
				, '계산서발행'						AS REMARK

			FROM STB100T WITH(NOLOCK)
			WHERE COMP_CODE     = @COMP_CODE
				   AND SALE_DIV_CODE = @DIV_CODE
				   AND ( ( CUSTOM_CODE = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
				   AND ( BILL_DATE >= @FROM_DATE AND BILL_DATE     <= @BASIS_YYYYMM  + '31' )-- @FROM_DATE

			GROUP BY COMP_CODE, SALE_DIV_CODE, CUSTOM_CODE, ISNULL(MONEY_UNIT, 'KRW')--, SUBSTRING(BILL_DATE, 1, 6)

		UNION ALL
				-- 수출선적 금액
			SELECT COMP_CODE
				, DIV_CODE					AS DIV_CODE
				, IMPORTER					AS CUSTOM_CODE
				, AMT_UNIT					AS MONEY_UNIT
				, 0							AS SALE_AMT		

				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -5, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_05 
				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -4, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_04 
				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -3, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_03 
				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -2, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_02 
				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -1, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_01 
				, SUM(CASE WHEN SUBSTRING(BL_DATE, 1, 6) = CONVERT(VARCHAR(6), DATEADD(MONTH, -0, @BASIS_YYYYMM + '01'), 112) THEN (ISNULL(BL_AMT, 0) ) ELSE 0 END)	AS SALE_AMT_00 
				, 0									AS SALE_AMT_TOT                
				, 0									AS COLLECT_AMT
				, '무역선적'						AS REMARK

			FROM TED100T WITH(NOLOCK)
			WHERE COMP_CODE     = @COMP_CODE
				   AND DIV_CODE = @DIV_CODE
				   AND ( ( IMPORTER = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
				   AND ( BL_DATE >= @FROM_DATE AND BL_DATE     <= @BASIS_YYYYMM  + '31' )-- @FROM_DATE

			GROUP BY COMP_CODE, DIV_CODE, IMPORTER, AMT_UNIT

				UNION ALL

				SELECT A.COMP_CODE
					 , A.DIV_CODE
					 , A.CUSTOM_CODE
					 , A.MONEY_UNIT
					, 0											AS SALE_AMT		
					, 0											AS SALE_AMT_05 
					, 0											AS SALE_AMT_04 
					, 0											AS SALE_AMT_03 
					, 0											AS SALE_AMT_02 
					, 0											AS SALE_AMT_01 
					, 0											AS SALE_AMT_00 
					, 0											AS SALE_AMT_TOT                
   				 , SUM(ISNULL(A.COLLECT_AMT, 0) / A.EXCHANGE_RATE ) AS COLLECT_AMT        --조회기간 FROM 이전 수금 금액

					 , '수금액' AS REMARK
				  FROM      SCO100T A WITH(NOLOCK)
				  LEFT JOIN SCO200T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
												  AND B.DIV_CODE    = A.DIV_CODE
												  AND B.CUSTOM_CODE = A.CUSTOM_CODE
												  AND B.MONEY_UNIT  = A.MONEY_UNIT
				 WHERE A.COMP_CODE   = @COMP_CODE
					AND A.DIV_CODE    = @DIV_CODE
 					AND ( ( A.CUSTOM_CODE = @CUSTOM_CODE AND @CUSTOM_CODE != '') OR  @CUSTOM_CODE = '' )
					AND A.COLLECT_DATE >=  @FROM_DATE
					AND A.COLLECT_DATE <= @BASIS_YYYYMM  + '31'
				 GROUP BY A.COMP_CODE, A.DIV_CODE, A.CUSTOM_CODE, A.MONEY_UNIT



	) X

				GROUP BY X.COMP_CODE, X.DIV_CODE, X.CUSTOM_CODE, X.MONEY_UNIT

          	--SELECT *  FROM #TMP_SCO901


	UPDATE A SET @COLLECT_AMT = A.COLLECT_AMT_TOT
			, @BALANCE_AMT = A.BALANCE_AMT

	, @REMAIN_AMT = CASE WHEN @COLLECT_AMT  - @BALANCE_AMT > 0 THEN @COLLECT_AMT - A.BALANCE_AMT ELSE 0 END 
   , @BALANCE_AMT = CASE WHEN @BALANCE_AMT - @COLLECT_AMT  > 0 THEN A.BALANCE_AMT - @COLLECT_AMT ELSE 0 END    
          
    , @REMAIN_AMT_05 =  CASE WHEN @REMAIN_AMT  - A.BALANCE_AMT_05 > 0 THEN @REMAIN_AMT - A.BALANCE_AMT_05 ELSE 0 END
   , @BALANCE_AMT_05 = CASE WHEN A.BALANCE_AMT_05 - @REMAIN_AMT > 0 THEN A.BALANCE_AMT_05 - @REMAIN_AMT ELSE 0 END    
          
   , @REMAIN_AMT_04 =  CASE WHEN @REMAIN_AMT_05  - A.BALANCE_AMT_04 > 0 THEN @REMAIN_AMT_05 - A.BALANCE_AMT_04 ELSE 0 END     
   , @BALANCE_AMT_04 = CASE WHEN A.BALANCE_AMT_04 - @REMAIN_AMT_05 > 0 THEN A.BALANCE_AMT_04 - @REMAIN_AMT_05 ELSE 0 END    
 
   , @REMAIN_AMT_03 =  CASE WHEN @REMAIN_AMT_04  - A.BALANCE_AMT_03 > 0 THEN @REMAIN_AMT_04 - A.BALANCE_AMT_03 ELSE 0 END     
   , @BALANCE_AMT_03 = CASE WHEN A.BALANCE_AMT_03 - @REMAIN_AMT_04 > 0 THEN A.BALANCE_AMT_03 - @REMAIN_AMT_04 ELSE 0 END    
     
   , @REMAIN_AMT_02 =  CASE WHEN @REMAIN_AMT_03  - A.BALANCE_AMT_02 > 0 THEN @REMAIN_AMT_03 - A.BALANCE_AMT_02 ELSE 0 END     
   , @BALANCE_AMT_02 = CASE WHEN A.BALANCE_AMT_02 - @REMAIN_AMT_03 > 0 THEN A.BALANCE_AMT_02 - @REMAIN_AMT_03 ELSE 0 END    
     
   , @REMAIN_AMT_01 =  CASE WHEN @REMAIN_AMT_02  - A.BALANCE_AMT_01 > 0 THEN @REMAIN_AMT_02 - A.BALANCE_AMT_01 ELSE 0 END     
   , @BALANCE_AMT_01 = CASE WHEN A.BALANCE_AMT_01 - @REMAIN_AMT_02 > 0 THEN A.BALANCE_AMT_01 - @REMAIN_AMT_02 ELSE 0 END    

   , @REMAIN_AMT_00 =  CASE WHEN @REMAIN_AMT_01  - A.BALANCE_AMT_00 > 0 THEN @REMAIN_AMT_01 - A.BALANCE_AMT_00 ELSE 0 END       
   , @BALANCE_AMT_00 = CASE WHEN A.BALANCE_AMT_00 - @REMAIN_AMT_01 > 0 THEN A.BALANCE_AMT_00 - @REMAIN_AMT_01 ELSE 0 END 	

			, @BALANCE_AMT_TOT =  ( @BALANCE_AMT + @BALANCE_AMT_05 + @BALANCE_AMT_04 + @BALANCE_AMT_03 + @BALANCE_AMT_02 + @BALANCE_AMT_01 + @BALANCE_AMT_00) - @REMAIN_AMT_00

			, BALANCE_AMT = @BALANCE_AMT			--
			, BALANCE_AMT_05 = @BALANCE_AMT_05		--
			, BALANCE_AMT_04 = @BALANCE_AMT_04		--
			, BALANCE_AMT_03 = @BALANCE_AMT_03		--
			, BALANCE_AMT_02 = @BALANCE_AMT_02		--
			, BALANCE_AMT_01 = @BALANCE_AMT_01		--
			, BALANCE_AMT_00 = @BALANCE_AMT_00		--
			, BALANCE_AMT_TOT = @BALANCE_AMT_TOT	--

	FROM #TMP_SCO901 A

	 --SELECT @COLLECT_AMT AS COLLECT_AMT,  @REMAIN_AMT AS REMAIN_AMT, @REMAIN_AMT_00  AS REMAIN_AMT_00 

 
 
 -- 9. 조회
             SELECT A.COMP_CODE
					, A.DIV_CODE
					, A.CUSTOM_CODE
					, B.CUSTOM_NAME
					, A.MONEY_UNIT
					, A.COLLECT_AMT_TOT AS TOT_COLLECT_AMT
					, A.BALANCE_AMT		AS LONG_BLAN_AMT
					, A.BALANCE_AMT_05	AS M5_BLAN_AMT
					, A.BALANCE_AMT_04	AS M4_BLAN_AMT
					, A.BALANCE_AMT_03	AS M3_BLAN_AMT
					, A.BALANCE_AMT_02	AS M2_BLAN_AMT
					, A.BALANCE_AMT_01	AS M1_BLAN_AMT
					, A.BALANCE_AMT_00	AS M0_BLAN_AMT
					, A.BALANCE_AMT_TOT AS TOT_BLAN_AMT
               FROM #TMP_SCO901 A
			   INNER JOIN BCM100T B ON B.COMP_CODE = A.COMP_CODE
									AND B.CUSTOM_CODE = A.CUSTOM_CODE
               WHERE A.BALANCE_AMT_TOT <> 0 



        SET NOCOUNT OFF
        SET ARITHABORT OFF
 END
 
]]>         
	</select>
</mapper>