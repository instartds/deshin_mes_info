<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eip110skrvServiceImpl">


	<select id="eip110skrvServiceImpl.selectList" parameterType="Map" resultType="rMap">

		/* eip110skrvServiceImpl.selectList */
		 DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
			SET @UserId     = #{USER_ID}
		    SET @LangType   = #{S_LANG_CODE}
			SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 1000)
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON

			DECLARE @RefItem		NVARCHAR(01)
				  , @DateFormat		NVARCHAR(10)



			/* 명칭 참조 유형 */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND USER_ID   = @UserId

			SET @RefItem = ISNULL(@RefItem, N'0')

			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'

			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD');

		     /*기준년도 월별 실적데이터 임시테이블로 생성 */
		WITH TEMP_TABLE AS (

			SELECT A1.COMP_CODE
			     , SUM(ISNULL(A1.MONTH_1, 0)) AS MONTH_1
				 , SUM(ISNULL(A1.MONTH_2, 0)) AS MONTH_2
				 , SUM(ISNULL(A1.MONTH_3, 0)) AS MONTH_3
				 , SUM(ISNULL(A1.MONTH_4, 0)) AS MONTH_4
				 , SUM(ISNULL(A1.MONTH_5, 0)) AS MONTH_5
				 , SUM(ISNULL(A1.MONTH_6, 0)) AS MONTH_6
				 , SUM(ISNULL(A1.MONTH_7, 0)) AS MONTH_7
				 , SUM(ISNULL(A1.MONTH_8, 0)) AS MONTH_8
				 , SUM(ISNULL(A1.MONTH_9, 0)) AS MONTH_9
				 , SUM(ISNULL(A1.MONTH_10, 0)) AS MONTH_10
				 , SUM(ISNULL(A1.MONTH_11, 0)) AS MONTH_11
				 , SUM(ISNULL(A1.MONTH_12, 0)) AS MONTH_12
			     , SUM(ISNULL(A1.TOT_DATA, 0)) AS TOT_DATA
				 , '1' AS GUBUN
			  FROM (
					SELECT  A.COMP_CODE
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '01' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_1
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '02' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_2
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '03' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_3
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '04' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_4
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '05' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_5
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '06' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_6
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '07' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_7
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '08' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_8
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '09' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_9
						   , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '10' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_10
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '11' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_11
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '12' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_12
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '01' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '02' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '03' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '04' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '05' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '06' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '07' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '08' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '09' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '10' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '11' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						  CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '12' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS TOT_DATA

					  FROM			PMR200T A WITH(NOLOCK)
					 WHERE A.COMP_CODE			= @CompCode


					   AND LEFT(A.PRODT_DATE,4)= @BasisYear							/*기준년*/

					 GROUP BY A.COMP_CODE,A.PRODT_DATE
				) AS A1
				GROUP BY A1.COMP_CODE

				UNION ALL

					SELECT B.COMP_CODE
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '01' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_1  --2020년 실적 금액
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '02' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_2
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '03' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_3
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '04' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_4
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '05' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_5
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '06' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_6
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '07' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_7
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '08' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_8
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '09' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_9
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '10' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_10
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '11' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_11
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '12' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)/ @AMOUNT_UNIT AS MONTH_12
						,( SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '01' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '02' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '03' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '04' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '05' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '06' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '07' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '08' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '09' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '10' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '11' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END)
						+ SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '12' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) ) / @AMOUNT_UNIT AS TOT_DATA
						, '2' AS GUBUN
					FROM  BTR100T AS B WITH (NOLOCK)
					WHERE B.COMP_CODE=@CompCode
					  AND B.INOUT_TYPE  = '1'
					  AND B.CREATE_LOC  = '1'
					  AND B.INOUT_CODE_TYPE = '3'
			          AND EXISTS(SELECT S1.PRODT_NUM FROM PMR100T S1 WITH(NOLOCK) WHERE S1.PRODT_NUM = B.BASIS_NUM )
					AND LEFT(B.INOUT_DATE,4) = @BasisYear
					GROUP BY B.COMP_CODE

					UNION ALL

					SELECT	 A.COMP_CODE
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '01' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_1
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '02' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_2
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '03' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_3
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '04' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_4
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '05' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_5
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '06' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_6
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '07' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_7
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '08' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_8
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '09' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_9
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '10' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_10
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '11' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_11
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '12' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_12
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '01' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '02' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '03' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '04' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '05' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '06' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '07' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '08' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '09' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '10' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '11' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)
							 + SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '12' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END) AS TOT_DATA
							 , '3' AS GUBUN

				         FROM	(	SELECT  A.COMP_CODE
											, A.DIV_CODE
											, A.WKORD_NUM
											, A.PRODT_DATE
											FROM PMR200T A WITH(NOLOCK)
											WHERE A.COMP_CODE			= @CompCode
											  AND LEFT(A.PRODT_DATE,4)  = @BasisYear							/*기준년*/
							) A
							INNER JOIN (SELECT   COMP_CODE
												, DIV_CODE
												, WKORD_NUM
												, SUM(ISNULL(MAN_HOUR, 0)) AS MAN_HOUR
											 FROM PMR100T WITH(NOLOCK)
											WHERE COMP_CODE = @CompCode
											GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM) AS E ON E.COMP_CODE  = A.COMP_CODE
																						 AND E.DIV_CODE   = A.DIV_CODE
																						 AND E.WKORD_NUM  = A.WKORD_NUM
						  GROUP BY A.COMP_CODE

		), TEMP_TABLE2 AS (	SELECT 1 AS GUBUN
							     ,@CompCode AS COMP_CODE
 							UNION ALL
							 SELECT GUBUN + 1
								   ,@CompCode    AS COMP_CODE
							 FROM TEMP_TABLE2
							 WHERE GUBUN <![CDATA[<=]]> 4 )





			SELECT AA.COMP_CODE
			     , AA.GUBUN
			     , CASE WHEN AA.GUBUN = '1' THEN '생산실적(개)'
			     		WHEN AA.GUBUN = '2' THEN '생산금액(천원)'
			     		WHEN AA.GUBUN = '3' THEN '투입MH [인-시간]'
			     		WHEN AA.GUBUN = '4' THEN 'UPH [개/인-시간]'
			     		WHEN AA.GUBUN = '5' THEN 'PPH [원/인-시간]'
						ELSE ''
				   END															   AS GUBUN_NM
				 , CASE WHEN AA.GUBUN = '1' THEN DD.INSTOCK_Q
						WHEN AA.GUBUN = '2' THEN DD.INSTOCK_I / @AMOUNT_UNIT
						WHEN AA.GUBUN = '3' THEN DD.MAN_HOUR
						WHEN AA.GUBUN = '4' THEN DD.INSTOCK_Q / DD.MAN_HOUR
						WHEN AA.GUBUN = '5' THEN DD.INSTOCK_I / DD.MAN_HOUR
				   ELSE 0
				   END																AS PREV_DATA
				 , CASE WHEN AA.GUBUN = '1' THEN CC.PREV_SUM_QTY_ALL
					    WHEN AA.GUBUN = '2' THEN CC.PREV_SUM_AMT_ALL / @AMOUNT_UNIT
						ELSE 0
					END																AS PLAN_DATA

				 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_1
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_1 = 0 THEN 0 ELSE EE.MONTH_1 / GG.MONTH_1 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_1 = 0 THEN 0 ELSE FF.MONTH_1 / GG.MONTH_1 END
						ELSE 0
                   END																AS MONTH_1
				 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_2
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_2 = 0 THEN 0 ELSE EE.MONTH_2 / GG.MONTH_2 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_2 = 0 THEN 0 ELSE FF.MONTH_2 / GG.MONTH_2 END
						ELSE 0
                   END																AS MONTH_2
                , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_3
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_3 = 0 THEN 0 ELSE EE.MONTH_3 / GG.MONTH_3 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_3 = 0 THEN 0 ELSE FF.MONTH_3 / GG.MONTH_3 END
						ELSE 0
                   END																AS MONTH_3
                , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_4
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_4 = 0 THEN 0 ELSE EE.MONTH_4 / GG.MONTH_4 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_4 = 0 THEN 0 ELSE FF.MONTH_4 / GG.MONTH_4 END
						ELSE 0
                   END																AS MONTH_4
                 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_5
						WHEN AA.GUBUN = '4' THEN  CASE WHEN GG.MONTH_5 = 0 THEN 0 ELSE EE.MONTH_5 / GG.MONTH_5 END
						WHEN AA.GUBUN = '5' THEN  CASE WHEN GG.MONTH_5 = 0 THEN 0 ELSE FF.MONTH_5 / GG.MONTH_5 END
						ELSE 0
                   END																AS MONTH_5
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_6
						WHEN AA.GUBUN = '4' THEN  CASE WHEN GG.MONTH_6 = 0 THEN 0 ELSE EE.MONTH_1 / GG.MONTH_6 END
						WHEN AA.GUBUN = '5' THEN  CASE WHEN GG.MONTH_6 = 0 THEN 0 ELSE FF.MONTH_1 / GG.MONTH_6 END
						ELSE 0
                   END																AS MONTH_6
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_7
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_7 = 0 THEN 0 ELSE EE.MONTH_7 / GG.MONTH_7 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_7 = 0 THEN 0 ELSE FF.MONTH_7 / GG.MONTH_7 END
						ELSE 0
                   END																AS MONTH_7
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_8
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_8 = 0 THEN 0 ELSE EE.MONTH_8 / GG.MONTH_8 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_8 = 0 THEN 0 ELSE FF.MONTH_8 / GG.MONTH_8 END
						ELSE 0
                   END																AS MONTH_1
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_9
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_9 = 0 THEN 0 ELSE EE.MONTH_9 / GG.MONTH_9 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_9 = 0 THEN 0 ELSE FF.MONTH_9 / GG.MONTH_9 END
						ELSE 0
                   END																AS MONTH_9
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_10
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_10 = 0 THEN 0 ELSE EE.MONTH_10 / GG.MONTH_10 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_10 = 0 THEN 0 ELSE FF.MONTH_10 / GG.MONTH_10 END
						ELSE 0
                   END																AS MONTH_10
                  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_11
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_11 = 0 THEN 0 ELSE EE.MONTH_11 / GG.MONTH_11 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_11 = 0 THEN 0 ELSE FF.MONTH_11 / GG.MONTH_11 END
						ELSE 0
                   END																AS MONTH_11
                   , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_12
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_12 = 0 THEN 0 ELSE EE.MONTH_12 / GG.MONTH_12 END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_12 = 0 THEN 0 ELSE FF.MONTH_12 / GG.MONTH_12 END
						ELSE 0
                   END																AS MONTH_12
				   , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.TOT_DATA
						WHEN AA.GUBUN = '4' THEN CASE WHEN GG.TOT_DATA = 0 THEN 0 ELSE EE.TOT_DATA / GG.TOT_DATA END
						WHEN AA.GUBUN = '5' THEN CASE WHEN GG.TOT_DATA = 0 THEN 0 ELSE FF.TOT_DATA / GG.TOT_DATA END
						ELSE 0
                   END																AS TOT_DATA
				   , CASE WHEN  CASE WHEN AA.GUBUN = '1' THEN CC.PREV_SUM_QTY_ALL
					  				  WHEN AA.GUBUN = '2' THEN CC.PREV_SUM_AMT_ALL
									  ELSE 0
								 END = 0 THEN 0
                          ELSE   CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.TOT_DATA
									 WHEN AA.GUBUN = '4' THEN CASE WHEN GG.TOT_DATA = 0 THEN 0 ELSE EE.TOT_DATA / GG.TOT_DATA END
									 WHEN AA.GUBUN = '5' THEN CASE WHEN GG.TOT_DATA = 0 THEN 0 ELSE FF.TOT_DATA / GG.TOT_DATA END
									 ELSE 0
								 END /
								 CASE WHEN AA.GUBUN = '1' THEN CC.PREV_SUM_QTY_ALL
					  				  WHEN AA.GUBUN = '2' THEN CC.PREV_SUM_AMT_ALL
									  ELSE 0
								 END * 100
					 END																			AS GOAL_RATE

			FROM TEMP_TABLE2 AA
			LEFT JOIN TEMP_TABLE  BB ON AA.COMP_CODE = BB.COMP_CODE
									AND AA.GUBUN     = BB.GUBUN
		    LEFT JOIN ( SELECT A.COMP_CODE
						, SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q1,0) > 0  THEN A.MOD_PLAN_Q1  ELSE ISNULL(A.PLAN_QTY1,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q2,0) > 0  THEN A.MOD_PLAN_Q2  ELSE ISNULL(A.PLAN_QTY2,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q3,0) > 0  THEN A.MOD_PLAN_Q3  ELSE ISNULL(A.PLAN_QTY3,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q4,0) > 0  THEN A.MOD_PLAN_Q4  ELSE ISNULL(A.PLAN_QTY4,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q5,0) > 0  THEN A.MOD_PLAN_Q5  ELSE ISNULL(A.PLAN_QTY5,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q6,0) > 0  THEN A.MOD_PLAN_Q6  ELSE ISNULL(A.PLAN_QTY6,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q7,0) > 0  THEN A.MOD_PLAN_Q7  ELSE ISNULL(A.PLAN_QTY7,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q8,0) > 0  THEN A.MOD_PLAN_Q8  ELSE ISNULL(A.PLAN_QTY8,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q9,0) > 0  THEN A.MOD_PLAN_Q9  ELSE ISNULL(A.PLAN_QTY9,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q10,0) > 0 THEN A.MOD_PLAN_Q10 ELSE ISNULL(A.PLAN_QTY10,0) END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q11,0) > 0 THEN A.MOD_PLAN_Q11 ELSE ISNULL(A.PLAN_QTY11,0) END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_Q12,0) > 0 THEN A.MOD_PLAN_Q12 ELSE ISNULL(A.PLAN_QTY12,0) END) AS PREV_SUM_QTY_ALL

						, SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT1,0) > 0  THEN A.MOD_PLAN_AMT1  ELSE ISNULL(A.PLAN_AMT1,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT2,0) > 0  THEN A.MOD_PLAN_AMT2  ELSE ISNULL(A.PLAN_AMT2,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT3,0) > 0  THEN A.MOD_PLAN_AMT3  ELSE ISNULL(A.PLAN_AMT3,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT4,0) > 0  THEN A.MOD_PLAN_AMT4  ELSE ISNULL(A.PLAN_AMT4,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT5,0) > 0  THEN A.MOD_PLAN_AMT5  ELSE ISNULL(A.PLAN_AMT5,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT6,0) > 0  THEN A.MOD_PLAN_AMT6  ELSE ISNULL(A.PLAN_AMT6,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT7,0) > 0  THEN A.MOD_PLAN_AMT7  ELSE ISNULL(A.PLAN_AMT7,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT8,0) > 0  THEN A.MOD_PLAN_AMT8  ELSE ISNULL(A.PLAN_AMT8,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT9,0) > 0  THEN A.MOD_PLAN_AMT9  ELSE ISNULL(A.PLAN_AMT9,0)  END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT10,0) > 0 THEN A.MOD_PLAN_AMT10 ELSE ISNULL(A.PLAN_AMT10,0) END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT11,0) > 0 THEN A.MOD_PLAN_AMT11 ELSE ISNULL(A.PLAN_AMT11,0) END)
						+ SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT12,0) > 0 THEN A.MOD_PLAN_AMT12 ELSE ISNULL(A.PLAN_AMT12,0) END) AS PREV_SUM_AMT_ALL
						FROM S_SSP100T_KD A WITH(NOLOCK)

						WHERE A.COMP_CODE = @CompCode
							AND A.PLAN_TYPE2 = '6'	--품목별
							AND A.PLAN_YEAR  = CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))

						GROUP BY A.COMP_CODE ) CC ON AA.COMP_CODE = CC.COMP_CODE   --기준년도 목표데이터

			LEFT JOIN (	SELECT A1.INSTOCK_Q  --전년 실적수량
							 , A1.INSTOCK_I  --전년 실적금액
							 , C1.MAN_HOUR   --전년 M/H
							 , A1.COMP_CODE
						FROM
						( SELECT B.COMP_CODE
								, 0 AS NOW_PLAN_Q
								, 0 AS BASIS_Q
								, SUM(B.INOUT_Q)	AS INSTOCK_Q  --2018년 실적수량
								, SUM(B.INOUT_I)	AS INSTOCK_I  --2018년 실적금액
								, 0 AS OUTSTOCK_Q
								, 0 AS OUTSTOCK_I
								, 0 AS STOCK_Q
								, 0 AS STOCK_I
							FROM  BTR100T AS B WITH (NOLOCK)
							WHERE B.COMP_CODE=@CompCode
							  AND B.INOUT_TYPE  = '1'
							  AND B.CREATE_LOC  = '1'
							  AND B.INOUT_CODE_TYPE = '3'
							  AND EXISTS(SELECT S1.PRODT_NUM FROM PMR100T S1 WITH(NOLOCK) WHERE S1.PRODT_NUM = B.BASIS_NUM )
							AND LEFT(B.INOUT_DATE,4) = CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))  --전년도
							GROUP BY B.COMP_CODE

						   ) A1

						   LEFT JOIN ( --투입공수 및 인원수
									 SELECT A.COMP_CODE
										  , SUM(ISNULL(A.MAN_HOUR,0)) MAN_HOUR
										--  , SUM(ISNULL(C.TOTAL_MAN,0)-ISNULL(C.HOLIDAY_MAN,0)-ISNULL(C.ABSENCE_MAN,0)-ISNULL(C.PERCEP_MAN ,0)-ISNULL(C.SEND_MAN ,0)-ISNULL(C.SUPPORT_MAN ,0)) MAN_CNT
										, SUM(A.MAN_CNT) AS MAN_CNT
									   FROM PMR100T A WITH(NOLOCK)
											INNER JOIN PMP100T B WITH(NOLOCK)
													ON A.COMP_CODE = B.COMP_CODE
												   AND A.DIV_CODE  = B.DIV_CODE
												   AND A.WKORD_NUM = B.WKORD_NUM
											 LEFT JOIN PMR600T C WITH(NOLOCK)
													ON A.COMP_CODE = C.COMP_CODE
												   AND A.DIV_CODE  = C.DIV_CODE
												   AND C.WORK_SHOP_CODE = C.WORK_SHOP_CODE
												   AND A.PRODT_DATE  = C.PRODT_DATE
									 WHERE A.COMP_CODE=@CompCode
              									 AND LEFT(A.PRODT_DATE,4) = CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) --전년도
									 GROUP BY A.COMP_CODE
									 ) C1
								  ON A1.COMP_CODE      = C1.COMP_CODE
					) DD ON AA.COMP_CODE = DD.COMP_CODE									--전년도 데이터
					LEFT JOIN (SELECT COMP_CODE
									,MONTH_1
									,MONTH_2
									,MONTH_3
									,MONTH_4
									,MONTH_5
									,MONTH_6
									,MONTH_7
									,MONTH_8
									,MONTH_9
									,MONTH_10
									,MONTH_11
									,MONTH_12
									,TOT_DATA
					            FROM TEMP_TABLE
								WHERE GUBUN = '1'
					) AS EE ON AA.COMP_CODE = EE.COMP_CODE --기준년도 실적개수 데이터

					LEFT JOIN (SELECT COMP_CODE
									,MONTH_1
									,MONTH_2
									,MONTH_3
									,MONTH_4
									,MONTH_5
									,MONTH_6
									,MONTH_7
									,MONTH_8
									,MONTH_9
									,MONTH_10
									,MONTH_11
									,MONTH_12
									,TOT_DATA
					            FROM TEMP_TABLE
								WHERE GUBUN = '2'
				    ) AS FF ON AA.COMP_CODE = FF.COMP_CODE --기준년도 실적금액 데이터

				  LEFT JOIN (SELECT COMP_CODE
									,MONTH_1
									,MONTH_2
									,MONTH_3
									,MONTH_4
									,MONTH_5
									,MONTH_6
									,MONTH_7
									,MONTH_8
									,MONTH_9
									,MONTH_10
									,MONTH_11
									,MONTH_12
									,TOT_DATA
					            FROM TEMP_TABLE
								WHERE GUBUN = '3'   --기준년도 M/H 데이터
					) AS GG ON AA.COMP_CODE = GG.COMP_CODE


			SET ARITHABORT OFF
			SET NOCOUNT OFF
		END
	</select>


	<select id="eip110skrvServiceImpl.selectChart" parameterType="Map" resultType="rMap">
		/*eip110skrvServiceImpl.selectChart*/

		 DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
			SET @UserId     = NULL
		    SET @LangType   = 'ko'
		    SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 1000)
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON

			DECLARE @RefItem		NVARCHAR(01)
				  , @DateFormat		NVARCHAR(10)


			/* 명칭 참조 유형 */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND USER_ID   = @UserId

			SET @RefItem = ISNULL(@RefItem, N'0')

			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'

			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD');
		IF OBJECT_ID('tempdb..#TEMP1') IS NOT NULL
			DROP TABLE #TEMP1

			CREATE TABLE #TEMP1
			(
					COMP_CODE        NVARCHAR(10) NULL
				,   GUBUN			 NVARCHAR(5) NULL
				,   GUBUN_NM	     NVARCHAR(30) NULL
				,   MONTH_1			 NUMERIC(30, 6) NULL
				,   MONTH_2			 NUMERIC(30, 6) NULL
				,   MONTH_3			 NUMERIC(30, 6) NULL
				,   MONTH_4			 NUMERIC(30, 6) NULL
				,   MONTH_5			 NUMERIC(30, 6) NULL
				,   MONTH_6			 NUMERIC(30, 6) NULL
				,   MONTH_7			 NUMERIC(30, 6) NULL
				,   MONTH_8			 NUMERIC(30, 6) NULL
				,   MONTH_9			 NUMERIC(30, 6) NULL
				,   MONTH_10		 NUMERIC(30, 6) NULL
				,   MONTH_11		 NUMERIC(30, 6) NULL
				,   MONTH_12		 NUMERIC(30, 6) NULL

			) ;


		     /*기준년도 월별 실적데이터 임시테이블로 생성 */
		WITH TEMP_TABLE AS (

			SELECT A1.COMP_CODE
			     , SUM(ISNULL(A1.MONTH_1, 0)) AS MONTH_1
				 , SUM(ISNULL(A1.MONTH_2, 0)) AS MONTH_2
				 , SUM(ISNULL(A1.MONTH_3, 0)) AS MONTH_3
				 , SUM(ISNULL(A1.MONTH_4, 0)) AS MONTH_4
				 , SUM(ISNULL(A1.MONTH_5, 0)) AS MONTH_5
				 , SUM(ISNULL(A1.MONTH_6, 0)) AS MONTH_6
				 , SUM(ISNULL(A1.MONTH_7, 0)) AS MONTH_7
				 , SUM(ISNULL(A1.MONTH_8, 0)) AS MONTH_8
				 , SUM(ISNULL(A1.MONTH_9, 0)) AS MONTH_9
				 , SUM(ISNULL(A1.MONTH_10, 0)) AS MONTH_10
				 , SUM(ISNULL(A1.MONTH_11, 0)) AS MONTH_11
				 , SUM(ISNULL(A1.MONTH_12, 0)) AS MONTH_12
				 , '1' AS GUBUN
			  FROM (
					SELECT  A.COMP_CODE
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '01' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_1
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '02' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_2
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '03' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_3
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '04' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_4
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '05' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_5
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '06' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_6
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '07' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_7
						 , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '08' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_8
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '09' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_9
						   , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '10' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_10
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '11' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_11
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '12' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS MONTH_12
						  , CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '01' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '02' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '03' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '04' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '05' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '06' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '07' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						   CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '08' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '09' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '10' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						    CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '11' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END +
						  CASE WHEN LEFT(A.PRODT_DATE, 6) = @BasisYear + '12' THEN SUM(ISNULL(A.GOOD_PRODT_Q, 0))
								ELSE 0
							END AS TOT_DATA

					  FROM			PMR200T A WITH(NOLOCK)
					 WHERE A.COMP_CODE			= @CompCode


					   AND LEFT(A.PRODT_DATE,4)= @BasisYear							/*기준년*/

					 GROUP BY A.COMP_CODE,A.PRODT_DATE
				) AS A1
				GROUP BY A1.COMP_CODE

				UNION ALL

					SELECT B.COMP_CODE
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '01' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_1  --2020년 실적 금액
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '02' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_2
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '03' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_3
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '04' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_4
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '05' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_5
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '06' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_6
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '07' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_7
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '08' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_8
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '09' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_9
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '10' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_10
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '11' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_11
						, SUM(CASE WHEN LEFT(INOUT_DATE,6) = @BasisYear + '12' THEN ISNULL(B.INOUT_I,0)	ELSE 0 END) AS MONTH_12
						, '2' AS GUBUN
					FROM  BTR100T AS B WITH (NOLOCK)
					WHERE B.COMP_CODE=@CompCode
					  AND B.INOUT_TYPE  = '1'
					  AND B.CREATE_LOC  = '1'
					  AND B.INOUT_CODE_TYPE = '3'
			          AND EXISTS(SELECT S1.PRODT_NUM FROM PMR100T S1 WITH(NOLOCK) WHERE S1.PRODT_NUM = B.BASIS_NUM )
					AND LEFT(B.INOUT_DATE,4) = @BasisYear
					GROUP BY B.COMP_CODE

					UNION ALL

					SELECT	 A.COMP_CODE
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '01' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_1
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '02' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_2
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '03' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_3
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '04' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_4
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '05' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_5
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '06' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_6
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '07' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_7
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '08' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_8
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '09' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_9
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '10' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_10
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '11' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_11
							,SUM(CASE WHEN LEFT(A.PRODT_DATE,6) = @BasisYear + '12' THEN ISNULL(E.MAN_HOUR, 0) ELSE 0 END)	AS MONTH_12
							, '3' AS GUBUN

				         FROM	(	SELECT  A.COMP_CODE
											, A.DIV_CODE
											, A.WKORD_NUM
											, A.PRODT_DATE
											FROM PMR200T A WITH(NOLOCK)
											WHERE A.COMP_CODE			= @CompCode
											  AND LEFT(A.PRODT_DATE,4)  = @BasisYear							/*기준년*/
							) A
							INNER JOIN (SELECT   COMP_CODE
												, DIV_CODE
												, WKORD_NUM
												, SUM(ISNULL(MAN_HOUR, 0)) AS MAN_HOUR
											 FROM PMR100T WITH(NOLOCK)
											WHERE COMP_CODE = @CompCode
											GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM) AS E ON E.COMP_CODE  = A.COMP_CODE
																						 AND E.DIV_CODE   = A.DIV_CODE
																						 AND E.WKORD_NUM  = A.WKORD_NUM
						  GROUP BY A.COMP_CODE

		), TEMP_TABLE2 AS (	SELECT 4 AS GUBUN
							     ,@CompCode AS COMP_CODE
 							UNION ALL
							 SELECT GUBUN + 1
								   ,@CompCode    AS COMP_CODE
							 FROM TEMP_TABLE2
							 WHERE GUBUN  <![CDATA[<=]]>  4 )

			INSERT INTO #TEMP1
			SELECT AAA.COMP_CODE
				  ,AAA.GUBUN
				  ,AAA.GUBUN_NM
				  ,AAA.MONTH_1
				  ,AAA.MONTH_2
				  ,AAA.MONTH_3
				  ,AAA.MONTH_4
				  ,AAA.MONTH_5
				  ,AAA.MONTH_6
				  ,AAA.MONTH_7
				  ,AAA.MONTH_8
				  ,AAA.MONTH_9
				  ,AAA.MONTH_10
				  ,AAA.MONTH_11
				  ,AAA.MONTH_12
			FROM
			(	SELECT AA.COMP_CODE
					 , AA.GUBUN
					 , CASE WHEN AA.GUBUN = '1' THEN '생산실적(개)'
			     			WHEN AA.GUBUN = '2' THEN '생산금액(천원)'
			     			WHEN AA.GUBUN = '3' THEN '투입MH [인-시간]'
			     			WHEN AA.GUBUN = '4' THEN 'UPH [개/인-시간]'
			     			WHEN AA.GUBUN = '5' THEN 'PPH [원/인-시간]'
							ELSE ''
					   END															   AS GUBUN_NM

					 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_1
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_1 = 0 THEN 0 ELSE EE.MONTH_1 / GG.MONTH_1 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_1 = 0 THEN 0 ELSE FF.MONTH_1 / GG.MONTH_1 END
							ELSE 0
					   END																AS MONTH_1
					 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_2
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_2 = 0 THEN 0 ELSE EE.MONTH_2 / GG.MONTH_2 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_2 = 0 THEN 0 ELSE FF.MONTH_2 / GG.MONTH_2 END
							ELSE 0
					   END																AS MONTH_2
					, CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_3
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_3 = 0 THEN 0 ELSE EE.MONTH_3 / GG.MONTH_3 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_3 = 0 THEN 0 ELSE FF.MONTH_3 / GG.MONTH_3 END
							ELSE 0
					   END																AS MONTH_3
					, CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_4
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_4 = 0 THEN 0 ELSE EE.MONTH_4 / GG.MONTH_4 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_4 = 0 THEN 0 ELSE FF.MONTH_4 / GG.MONTH_4 END
							ELSE 0
					   END																AS MONTH_4
					 , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_5
							WHEN AA.GUBUN = '4' THEN  CASE WHEN GG.MONTH_5 = 0 THEN 0 ELSE EE.MONTH_5 / GG.MONTH_5 END
							WHEN AA.GUBUN = '5' THEN  CASE WHEN GG.MONTH_5 = 0 THEN 0 ELSE FF.MONTH_5 / GG.MONTH_5 END
							ELSE 0
					   END																AS MONTH_5
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_6
							WHEN AA.GUBUN = '4' THEN  CASE WHEN GG.MONTH_6 = 0 THEN 0 ELSE EE.MONTH_1 / GG.MONTH_6 END
							WHEN AA.GUBUN = '5' THEN  CASE WHEN GG.MONTH_6 = 0 THEN 0 ELSE FF.MONTH_1 / GG.MONTH_6 END
							ELSE 0
					   END																AS MONTH_6
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_7
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_7 = 0 THEN 0 ELSE EE.MONTH_7 / GG.MONTH_7 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_7 = 0 THEN 0 ELSE FF.MONTH_7 / GG.MONTH_7 END
							ELSE 0
					   END																AS MONTH_7
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_8
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_8 = 0 THEN 0 ELSE EE.MONTH_8 / GG.MONTH_8 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_8 = 0 THEN 0 ELSE FF.MONTH_8 / GG.MONTH_8 END
							ELSE 0
					   END																AS MONTH_8
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_9
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_9 = 0 THEN 0 ELSE EE.MONTH_9 / GG.MONTH_9 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_9 = 0 THEN 0 ELSE FF.MONTH_9 / GG.MONTH_9 END
							ELSE 0
					   END																AS MONTH_9
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_10
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_10 = 0 THEN 0 ELSE EE.MONTH_10 / GG.MONTH_10 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_10 = 0 THEN 0 ELSE FF.MONTH_10 / GG.MONTH_10 END
							ELSE 0
					   END																AS MONTH_10
					  , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_11
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_11 = 0 THEN 0 ELSE EE.MONTH_11 / GG.MONTH_11 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_11 = 0 THEN 0 ELSE FF.MONTH_11 / GG.MONTH_11 END
							ELSE 0
					   END																AS MONTH_11
					   , CASE WHEN AA.GUBUN = '1' OR AA.GUBUN = '2' OR AA.GUBUN = '3' THEN BB.MONTH_12
							WHEN AA.GUBUN = '4' THEN CASE WHEN GG.MONTH_12 = 0 THEN 0 ELSE EE.MONTH_12 / GG.MONTH_12 END
							WHEN AA.GUBUN = '5' THEN CASE WHEN GG.MONTH_12 = 0 THEN 0 ELSE FF.MONTH_12 / GG.MONTH_12 END
							ELSE 0
					   END																AS MONTH_12


				FROM TEMP_TABLE2 AA
				LEFT JOIN TEMP_TABLE  BB ON AA.COMP_CODE = BB.COMP_CODE
										AND AA.GUBUN     = BB.GUBUN
						LEFT JOIN (SELECT COMP_CODE
										,MONTH_1
										,MONTH_2
										,MONTH_3
										,MONTH_4
										,MONTH_5
										,MONTH_6
										,MONTH_7
										,MONTH_8
										,MONTH_9
										,MONTH_10
										,MONTH_11
										,MONTH_12
									FROM TEMP_TABLE
									WHERE GUBUN = '1'
						) AS EE ON AA.COMP_CODE = EE.COMP_CODE --기준년도 실적개수 데이터

						LEFT JOIN (SELECT COMP_CODE
										,MONTH_1
										,MONTH_2
										,MONTH_3
										,MONTH_4
										,MONTH_5
										,MONTH_6
										,MONTH_7
										,MONTH_8
										,MONTH_9
										,MONTH_10
										,MONTH_11
										,MONTH_12
									FROM TEMP_TABLE
									WHERE GUBUN = '2'
						) AS FF ON AA.COMP_CODE = FF.COMP_CODE --기준년도 실적금액 데이터

					  LEFT JOIN (SELECT COMP_CODE
										,MONTH_1
										,MONTH_2
										,MONTH_3
										,MONTH_4
										,MONTH_5
										,MONTH_6
										,MONTH_7
										,MONTH_8
										,MONTH_9
										,MONTH_10
										,MONTH_11
										,MONTH_12
									FROM TEMP_TABLE
									WHERE GUBUN = '3'   --기준년도 M/H 데이터
						) AS GG ON AA.COMP_CODE = GG.COMP_CODE
			) AAA

			SELECT A.COMP_CODE
				 , CASE WHEN A.MONTH_NM = 'MONTH_1'  THEN '1월'
				 		WHEN A.MONTH_NM = 'MONTH_2'  THEN '2월'
				 		WHEN A.MONTH_NM = 'MONTH_3'  THEN '3월'
				 		WHEN A.MONTH_NM = 'MONTH_4'  THEN '4월'
				 		WHEN A.MONTH_NM = 'MONTH_5'  THEN '5월'
				 		WHEN A.MONTH_NM = 'MONTH_6'  THEN '6월'
				 		WHEN A.MONTH_NM = 'MONTH_7'  THEN '7월'
				 		WHEN A.MONTH_NM = 'MONTH_8'  THEN '8월'
				 		WHEN A.MONTH_NM = 'MONTH_9'  THEN '9월'
				 		WHEN A.MONTH_NM = 'MONTH_10' THEN '10월'
				 		WHEN A.MONTH_NM = 'MONTH_11' THEN '11월'
				 		WHEN A.MONTH_NM = 'MONTH_12' THEN '12월'
				   		ELSE ''
				   END										AS MONTH_NM
				 , A.UPH, B.PPH
			FROM
				(SELECT COMP_CODE, GUBUN, GUBUN_NM, UPH, MONTH_NM
				FROM	#TEMP1
				UNPIVOT( [UPH] FOR MONTH_NM IN ([MONTH_1],[MONTH_2],[MONTH_3],[MONTH_4],[MONTH_5],[MONTH_6],[MONTH_7],[MONTH_8],[MONTH_9],[MONTH_10],[MONTH_11],[MONTH_12])) AS UNPVT
				WHERE GUBUN = '4') A INNER JOIN
				(SELECT COMP_CODE, GUBUN, GUBUN_NM, PPH / @AMOUNT_UNIT AS PPH, MONTH_NM
				FROM	#TEMP1
				UNPIVOT( [PPH] FOR MONTH_NM IN ([MONTH_1],[MONTH_2],[MONTH_3],[MONTH_4],[MONTH_5],[MONTH_6],[MONTH_7],[MONTH_8],[MONTH_9],[MONTH_10],[MONTH_11],[MONTH_12])) AS UNPVT
				WHERE GUBUN = '5')  B  ON A.COMP_CODE = B.COMP_CODE AND A.MONTH_NM = B.MONTH_NM

			SET ARITHABORT OFF
			SET NOCOUNT OFF
		END

	</select>
</mapper>