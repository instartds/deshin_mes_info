<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_qbs200ukrv_mekServiceImpl">
	
	<select id="s_qbs200ukrv_mekServiceImpl.getWsList" parameterType="Map" resultType="comboItem">
		/*	s_qbs200ukrv_mekServiceImpl.getWsList	*/
		SELECT TREE_CODE				AS 'value'
			 , TREE_NAME				AS 'text'
			 , TYPE_LEVEL				AS 'option'
			 , TREE_CODE + TREE_NAME	AS 'search'
		  FROM BSA230T		WITH (NOLOCK)
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND INSPEC_TYPE	= '1'
		 ORDER BY TREE_CODE
	</select>
	
	<select id="s_qbs200ukrv_mekServiceImpl.selectList1" parameterType="Map" resultType="rMap">
		/*	s_qbs200ukrv_mekServiceImpl.selectList1	*/
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.INSPECT_NO
			 , A.ITEM_CODE
			 , B.ITEM_NAME
			 , A.MODEL
			 , C.MODEL_NAME
			 , A.REV_NO
			 , A.STATUS
			 , A.WKORD_NUM
		  FROM					S_QBS200T_MEK A	WITH (NOLOCK)
				LEFT OUTER JOIN	BPR100T B		WITH (NOLOCK)
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.ITEM_CODE		= B.ITEM_CODE
				LEFT OUTER JOIN	S_BMD100T_MEK C	WITH (NOLOCK)
							 ON A.COMP_CODE		= C.COMP_CODE
							AND A.MODEL			= C.MODEL_UNI_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.WORK_DATE &gt;= #{WORK_DATE_FR}
		   AND A.WORK_DATE &lt;= #{WORK_DATE_TO}
		<if test="@foren.Ognl@isNotEmpty(INSPECT_NO)">
		   AND A.INSPECT_NO	= #{INSPECT_NO}
		</if>
		<if test="STATUS == &quot;R&quot;">
		   AND A.STATUS	   IN ('QN', 'RC')
		</if>
		<if test="STATUS == &quot;Q&quot;">
		   AND A.STATUS		= 'QY'
		</if>
		
		UNION ALL
		
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.LOT_NO		AS INSPECT_NO
			 , A.ITEM_CODE
			 , B.ITEM_NAME
			 , B.ITEM_MODEL	AS MODEL
			 , C.MODEL_NAME
			 , D.REV_NO
			 , 'QN'			AS STATUS
			 , A.WKORD_NUM
		  FROM					PMR200T A		WITH (NOLOCK)
				LEFT OUTER JOIN	BPR100T B		WITH (NOLOCK)
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.ITEM_CODE		= B.ITEM_CODE
				LEFT OUTER JOIN	S_BMD100T_MEK C	WITH (NOLOCK)
							 ON B.COMP_CODE		= C.COMP_CODE
							AND B.ITEM_MODEL	= C.MODEL_UNI_CODE
				LEFT OUTER JOIN	S_QBS110T_MEK D	WITH (NOLOCK)
							 ON B.COMP_CODE		= D.COMP_CODE
							AND B.ITEM_MODEL	= D.MODEL
							AND D.END_DATE		= '99991231'
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		   AND A.PRODT_DATE	   &gt;= #{WORK_DATE_FR}
		   AND A.PRODT_DATE	   &lt;= #{WORK_DATE_TO}
		<if test="@foren.Ognl@isNotEmpty(INSPECT_NO)">
		   AND A.LOT_NO			= #{INSPECT_NO}
		</if>
		<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		   AND A.WORK_SHOP_CODE	= #{WORK_SHOP_CODE}
		</if>
		   AND NOT EXISTS (	SELECT 'X'
							  FROM S_QBS200T_MEK X
							 WHERE X.COMP_CODE	= A.COMP_CODE
							   AND X.DIV_CODE	= A.DIV_CODE
							   AND X.ITEM_CODE	= A.ITEM_CODE
							   AND X.WKORD_NUM	= A.WKORD_NUM	)
		 ORDER BY A.COMP_CODE
			 , A.DIV_CODE
			 , INSPECT_NO
			 , A.ITEM_CODE
			 , A.STATUS
	</select>
	
	<select id="s_qbs200ukrv_mekServiceImpl.selectListMach" parameterType="Map" resultType="rMap">
		/*	s_qbs200ukrv_mekServiceImpl.selectListMach	*/
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.SEQ
			 , A.MODEL
			 , A.WORK_DATE
			 , ROW_NUMBER() OVER(ORDER BY A.SEQ)	AS SORT_ORDER
			 , A.MACHINE_CODE
			 , B.EQU_NAME							AS MACHINE_NAME
			 , A.WORK_USER
			 , A.USE_YN
		  FROM					S_QBS250T_MEK A	WITH (NOLOCK)
				LEFT OUTER JOIN	EQU200T B		WITH (NOLOCK)
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.DIV_CODE		= B.DIV_CODE
							AND A.MACHINE_CODE	= B.EQU_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.DIV_CODE	= #{DIV_CODE}
		   AND A.MODEL		= #{MODEL}
		   AND A.WORK_DATE	= #{WORK_DATE}
		<if test="@foren.Ognl@isNotEmpty(WORK_USER)">
		   AND A.WORK_USER	= #{WORK_USER}
		</if>
		   AND A.USE_YN		= 'Y'
		 ORDER BY A.COMP_CODE
			 , A.DIV_CODE
			 , A.WORK_DATE
			 , A.SEQ
	</select>
	
	<insert id="s_qbs200ukrv_mekServiceImpl.insertMach" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.insertMach	*/
		INSERT INTO S_QBS250T_MEK
			 ( COMP_CODE		, DIV_CODE			, MODEL				, WORK_DATE
			 , MACHINE_CODE		, WORK_USER			, USE_YN
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		VALUES
			 ( #{S_COMP_CODE}	, #{DIV_CODE}		, #{MODEL}			, #{WORK_DATE}
			 , #{MACHINE_CODE}	, #{WORK_USER}		, 'Y'
			 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()	)
	</insert>
	
	<update id="s_qbs200ukrv_mekServiceImpl.deleteMach" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.deleteMach	*/
		UPDATE S_QBS250T_MEK
		   SET USE_YN			= 'N'
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND SEQ				= #{SEQ}
	</update>
	
	<select id="s_qbs200ukrv_mekServiceImpl.selectListBad" parameterType="Map" resultType="rMap">
		/*	s_qbs200ukrv_mekServiceImpl.selectListBad	*/
		SELECT B.COMP_CODE
			 , B.DIV_CODE
			 , A.SUB_CODE			AS BAD_CODE
			 , A.CODE_NAME			AS BAD_NAME
			 , B.INSPECT_NO
			 , B.INSPECT_TYPE
			 , B.INSPECT_DATE
			 , ISNULL(B.BAD_Q, 0)	AS BAD_Q
			 , B.REASON
			 , B.INSPECT_VALUE
		  FROM					BSA100T A	WITH (NOLOCK)
				LEFT OUTER JOIN	S_QBS300T_MEK B	WITH (NOLOCK)
							 ON A.COMP_CODE		= B.COMP_CODE
							AND B.DIV_CODE		= #{DIV_CODE}
							AND B.INSPECT_NO	= #{INSPECT_NO}
							AND A.SUB_CODE		= B.BAD_CODE
							AND B.INSPECT_TYPE	= 'L'
							AND B.SUBJECT_CODE	= '02'
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.MAIN_CODE	= 'P003'
		   AND A.REF_CODE5	= '12'
		 ORDER BY A.COMP_CODE
			 , LEN(A.SUB_CODE)
			 , A.SUB_CODE
	</select>
	
	<update id="s_qbs200ukrv_mekServiceImpl.insertBad" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.insertBad	*/
		INSERT INTO S_QBS300T_MEK
			 ( COMP_CODE		, DIV_CODE			, BAD_CODE
			 , INSPECT_NO		, INSPECT_TYPE		, SUBJECT_CODE
			 , INSPECT_DATE		, BAD_Q				, REASON			, INSPECT_VALUE
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		VALUES
			 ( #{S_COMP_CODE}	, #{DIV_CODE}		, #{BAD_CODE}
			 , #{INSPECT_NO}	, 'L'				, '02'
			 , #{INSPECT_DATE}	, #{BAD_Q}			, #{REASON}			, #{INSPECT_VALUE}
			 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()	)
	</update>
	
	<update id="s_qbs200ukrv_mekServiceImpl.updateBad" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.updateBad	*/
		UPDATE S_QBS300T_MEK
		   SET BAD_Q			= #{BAD_Q}
			 , REASON			= #{REASON}
			 , INSPECT_VALUE	= #{INSPECT_VALUE}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND INSPECT_NO		= #{INSPECT_NO}
		   AND BAD_CODE			= #{BAD_CODE}
	</update>
	
	<update id="s_qbs200ukrv_mekServiceImpl.deleteBad" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.deleteBad	*/
		DELETE
		  FROM S_QBS300T_MEK
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND INSPECT_NO		= #{INSPECT_NO}
		   AND BAD_Q			= 0
	</update>
	
	<select id="s_qbs200ukrv_mekServiceImpl.selectListResult" parameterType="Map" resultType="rMap">
		/*	s_qbs200ukrv_mekServiceImpl.selectListResult	*/
		SELECT A.COMP_CODE
			 , B.DIV_CODE
			 , A.MODEL
			 , A.REV_NO
			 , A.ITEM_NO
			 , A.INSPECT_TYPE
			 , A.SUBJECT_CODE
			 , A.SUBJECT_TITLE
			 , A.TITLE_TYPE
			 , B.INSPECT_NO
			 , A.NO
			 , A.ITEMS
			 , A.CHECK_POINT
			 , A.STANDARD
			 , B.INSPECT_NO		AS LOTNO
			 , B.MEASURE_VALUE	AS NUM_VALUE
			 , A.SPEC
			 , B.MEASURE_VALUE
			 , B.MEASURE_VALUE	AS RE_MEASURE_VALUE
			 , A.FIRST_CAL
			 , A.FACTORY_TOL
			 , A.UNIT
			 , B.INSPECT_RESULT
			 , B.RE_INSPECT_RESULT
			 , A.SORT_SEQ
			 , A.MEASURE_VAR
			 , A.INSPECT_RESULT	AS INSPECT_RESULT_TYPE
		  FROM					S_QBS100T_MEK A	WITH (NOLOCK)
				LEFT OUTER JOIN	S_QBS210T_MEK B	WITH (NOLOCK)
							 ON A.COMP_CODE		= B.COMP_CODE
							AND A.MODEL			= B.MODEL
							AND A.REV_NO		= B.REV_NO
							AND A.ITEM_NO		= B.ITEM_NO
							AND B.DIV_CODE		= #{DIV_CODE}
							AND B.INSPECT_NO	= #{INSPECT_NO}
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.MODEL			= #{MODEL}
		   AND A.REV_NO			= #{REV_NO}
		   AND A.INSPECT_TYPE	= 'L'
		   AND A.SUBJECT_CODE	= '02'
		 ORDER BY A.COMP_CODE
			 , A.MODEL
			 , A.REV_NO
			 , A.INSPECT_TYPE
			 , A.SUBJECT_CODE
			 , A.SORT_SEQ
	</select>
	
	<insert id="s_qbs200ukrv_mekServiceImpl.insertResultDetail" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.insertResultDetail	*/
		INSERT INTO S_QBS210T_MEK
			 ( COMP_CODE		, DIV_CODE			, MODEL
			 , REV_NO			, INSPECT_NO		, ITEM_NO
			 , MEASURE_VALUE	, INSPECT_RESULT	, RE_INSPECT_RESULT
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		VALUES
			 ( #{S_COMP_CODE}	, #{DIV_CODE}		, #{MODEL}
			 , #{REV_NO}		, #{INSPECT_NO}		, #{ITEM_NO}
			 , #{MEASURE_VALUE}	, #{INSPECT_RESULT}	, #{RE_INSPECT_RESULT}
			 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()	)
	</insert>
	
	<update id="s_qbs200ukrv_mekServiceImpl.updateResultDetail" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.updateResultDetail	*/
		UPDATE S_QBS210T_MEK
		   SET MEASURE_VALUE		= #{MEASURE_VALUE}
			 , INSPECT_RESULT		= #{INSPECT_RESULT}
			 , RE_INSPECT_RESULT	= #{RE_INSPECT_RESULT}
			 , UPDATE_DB_USER		= #{S_USER_ID}
			 , UPDATE_DB_TIME		= GETDATE()
		 WHERE COMP_CODE			= #{S_COMP_CODE}
		   AND DIV_CODE				= #{DIV_CODE}
		   AND MODEL				= #{MODEL}
		   AND REV_NO				= #{REV_NO}
		   AND INSPECT_NO			= #{INSPECT_NO}
		   AND ITEM_NO				= #{ITEM_NO}
	</update>
	
	<delete id="s_qbs200ukrv_mekServiceImpl.deleteResultDetail" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.deleteResultDetail	*/
		DELETE
		  FROM S_QBS210T_MEK
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND MODEL			= #{MODEL}
		   AND REV_NO			= #{REV_NO}
		   AND INSPECT_NO		= #{INSPECT_NO}
		<if test="@foren.Ognl@isNotEmpty(ITEM_NO)">
		   AND ITEM_NO			= #{ITEM_NO}
		</if>
	</delete>
	
	<select id="s_qbs200ukrv_mekServiceImpl.deleteResultMaster" parameterType="Map" resultType="integer">
		/*	s_qbs200ukrv_mekServiceImpl.deleteResultMaster	*/
		DELETE
		  FROM S_QBS200T_MEK
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND MODEL			= #{MODEL}
		   AND REV_NO			= #{REV_NO}
		   AND INSPECT_NO		= #{INSPECT_NO}
	</select>
	
	<select id="s_qbs200ukrv_mekServiceImpl.checkResultMaster" parameterType="Map" resultType="integer">
		/*	s_qbs200ukrv_mekServiceImpl.checkResultMaster	*/
		SELECT COUNT(*)	AS CNT_RESULT_MASTER
		  FROM					S_QBS200T_MEK A	WITH (NOLOCK)
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		   AND A.MODEL			= #{MODEL}
		   AND A.REV_NO			= #{REV_NO}
		   AND A.INSPECT_NO		= #{INSPECT_NO}
	</select>
	
	<insert id="s_qbs200ukrv_mekServiceImpl.insertResultMaster" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.insertResultMaster	*/
		INSERT INTO S_QBS200T_MEK
			 ( COMP_CODE		, DIV_CODE			, MODEL
			 , REV_NO			, INSPECT_NO		, WKORD_NUM
			 , ITEM_CODE		, WORK_USER			, WORK_DATE
			 , STATUS			, REMARK
			 , MACHINE_CODE1	, MACHINE_CODE2		, MACHINE_CODE3
			 , MACHINE_CODE4	, MACHINE_CODE5		, MACHINE_CODE6
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		SELECT ISNULL(A.COMP_CODE	, #{S_COMP_CODE})	AS COMP_CODE
			 , ISNULL(A.DIV_CODE	, #{DIV_CODE})		AS DIV_CODE
			 , ISNULL(A.MODEL		, #{MODEL})			AS MODEL
			 , #{REV_NO}								AS REV_NO
			 , #{INSPECT_NO}							AS INSPECT_NO
			 , #{WKORD_NUM}								AS WKORD_NUM
			 , #{ITEM_CODE}								AS ITEM_CODE
			 , ISNULL(A.WORK_USER	, #{WORK_USER})		AS WORK_USER
			 , ISNULL(A.WORK_DATE	, #{WORK_DATE})		AS WORK_DATE
			 , 'QY'										AS STATUS
			 , ''										AS REMARK
			 , MAX(CASE WHEN A.IDX = 1 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE1
			 , MAX(CASE WHEN A.IDX = 2 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE2
			 , MAX(CASE WHEN A.IDX = 3 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE3
			 , MAX(CASE WHEN A.IDX = 4 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE4
			 , MAX(CASE WHEN A.IDX = 5 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE5
			 , MAX(CASE WHEN A.IDX = 6 THEN A.MACHINE_CODE ELSE '' END)	AS MACHINE_CODE6
			 , #{S_USER_ID}								AS INSERT_DB_USER
			 , GETDATE()								AS INSERT_DB_TIME
			 , #{S_USER_ID}								AS UPDATE_DB_USER
			 , GETDATE()								AS UPDATE_DB_TIME
		  FROM (
				SELECT A.COMP_CODE
					 , A.DIV_CODE
					 , A.MODEL
					 , A.WORK_DATE
					 , A.WORK_USER
					 , A.MACHINE_CODE
					 , ROW_NUMBER() OVER(ORDER BY A.SEQ)	AS IDX
				  FROM S_QBS250T_MEK A
				 WHERE A.COMP_CODE	= #{S_COMP_CODE}
				   AND A.DIV_CODE	= #{DIV_CODE}
				   AND A.MODEL		= #{MODEL}
				   AND A.WORK_DATE	= #{WORK_DATE}
				   AND A.WORK_USER	= #{WORK_USER}
				   AND A.USE_YN		= 'Y'
			   ) A
		GROUP BY A.COMP_CODE
			 , A.DIV_CODE
			 , A.MODEL
			 , A.WORK_DATE
			 , A.WORK_USER
	</insert>
	
	<select id="s_qbs200ukrv_mekServiceImpl.checkRepair" parameterType="Map" resultType="integer">
		/*	s_qbs200ukrv_mekServiceImpl.checkRepair	*/
		SELECT COUNT(*)	AS CNT_REPAIR
		  FROM					S_QBS400T_MEK A	WITH (NOLOCK)
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		   AND A.INSPECT_NO		= #{INSPECT_NO}
		   AND A.STATUS		   IN ('0', '1')
	</select>
	
	<select id="s_qbs200ukrv_mekServiceImpl.selectMaxRepairNum" parameterType="Map" resultType="rMap">
		/*	s_qbs200ukrv_mekServiceImpl.selectMaxRepairNum	*/
		SELECT ISNULL(MAX(A.REPAIR_NUM), 0) + 1	AS REPAIR_NUM
		  FROM					S_QBS400T_MEK A	WITH (NOLOCK)
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
	</select>
	
	<update id="s_qbs200ukrv_mekServiceImpl.spSP_GetAutoNumComp" parameterType="Map" statementType="CALLABLE">
		{call SP_GetAutoNumComp (
			#{COMP_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{DIV_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{TABLE_ID			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{PREFIX			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{BASIS_DATE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{AUTO_TYPE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{REPAIR_NUM		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update>

	<insert id="s_qbs200ukrv_mekServiceImpl.insertRepair" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.insertRepair	*/
		INSERT INTO S_QBS400T_MEK
			 ( COMP_CODE		, DIV_CODE			, REPAIR_NUM
			 , INSPECT_NO		, INSPECT_TYPE		, REQ_DATE			, STATUS
			 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
		VALUES
			 ( #{S_COMP_CODE}	, #{DIV_CODE}		, #{REPAIR_NUM}
			 , #{INSPECT_NO}	, #{INSPECT_TYPE}	, #{REQ_DATE}		, '0'
			 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()	)
	</insert>
	
	<update id="s_qbs200ukrv_mekServiceImpl.updateResultStatus" parameterType="Map">
		/*	s_qbs200ukrv_mekServiceImpl.updateResultStatus	*/
		UPDATE S_QBS200T_MEK
		   SET STATUS			= 'RR'
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND DIV_CODE			= #{DIV_CODE}
		   AND MODEL			= #{MODEL}
		   AND REV_NO			= #{REV_NO}
		   AND INSPECT_NO		= #{INSPECT_NO}
	</update>
	
</mapper>