<?xml version="1.0" encoding="UTF-8"?><!---->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_bmd110ukrv_mekService">
	
	<select id="s_bmd110ukrv_mekService.selectMasterList" parameterType="Map" resultType="rMap">
		/* s_bmd110ukrv_mekService.selectMasterList */
		/* s_bmd110ukrv_mek.Cs_bmd110ukrv_mek[fnBcm500QStd] Query01 */
		SELECT B.CODE_NAME
			 , A.MODEL_ID
			 , A.MODEL_NAME
			 , A.MODEL_CODE
			 , A.MODEL_UNI_CODE
			 , CASE WHEN (SELECT TOP 1 1 
			 				FROM S_BMD110T_MEK WITH (NOLOCK)
			 			   WHERE COMP_CODE			= A.COMP_CODE 
			 				 AND MODEL_UNI_CODE		= A.MODEL_UNI_CODE) IS NULL THEN 'N' ELSE 'Y' END AS REG_YN
  		  FROM S_BMD100T_MEK A WITH (NOLOCK)
  	INNER JOIN BSA100T B WITH (NOLOCK) ON B.COMP_CODE		= A.COMP_CODE 
  									  AND B.SUB_CODE		= A.MODEL_ID
  									  AND B.MAIN_CODE		= 'ZP01'
		<if test="@foren.Ognl@isNotEmpty(MODEL_ID)">
  		 WHERE A.MODEL_ID		= #{MODEL_ID}
  		</if>
	</select>
	
	<select id="s_bmd110ukrv_mekService.selectDetailList" parameterType="Map" resultType="rMap">
		/* s_bmd110ukrv_mekService.selectDetailList */
		/* s_bmd110ukrv_mek.Cs_bmd110ukrv_mek[fnBcm500QStd] Query02 */
		SELECT '1' AS SORT
			 , A.SUB_CODE AS PART_CODE
			 , A.CODE_NAME AS PART_NAME
--			 , B.MODEL_UNI_CODE + B.PART_CODE AS PART_UNI_CODE
			 , B.PART_UNI_CODE
			 , B.MODEL_UNI_CODE
			 , B.PART_CODE
		 	 , B.ITEM_CODE
			 , C.ITEM_NAME
		  FROM BSA100T A WITH (NOLOCK)
		  INNER JOIN S_BMD110T_MEK B WITH (NOLOCK) ON B.COMP_CODE 	= A.COMP_CODE
												  AND B.PART_CODE	= A.SUB_CODE
  		   LEFT JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE 		= C.COMP_CODE
										    AND B.ITEM_CODE 		= C.ITEM_CODE
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.MAIN_CODE		= 'ZP02'
		   AND B.MODEL_UNI_CODE = #{MODEL_UNI_CODE}
		 UNION
		SELECT '2' AS SORT
			 , A.SUB_CODE AS PART_CODE
			 , A.CODE_NAME AS PART_NAME
			 , '' AS PART_UNI_CODE
			 , '' AS MODEL_UNI_CODE
			 , B.PART_CODE
 			 , B.ITEM_CODE
			 , C.ITEM_NAME
		  FROM BSA100T A WITH (NOLOCK)
		  LEFT JOIN S_BMD110T_MEK B WITH (NOLOCK)  ON B.COMP_CODE	= A.COMP_CODE
												  AND B.PART_CODE	= A.SUB_CODE
												  AND B.MODEL_UNI_CODE = #{MODEL_UNI_CODE}
  		  LEFT JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE 		= C.COMP_CODE
		 								   AND B.ITEM_CODE 		= C.ITEM_CODE
		 WHERE A.COMP_CODE	= #{S_COMP_CODE}
		   AND A.MAIN_CODE	= 'ZP02'
		   AND B.COMP_CODE IS NULL
		   AND A.SUB_CODE  != '$'
   	  ORDER BY SORT, B.PART_CODE
	</select>

	<update id="s_bmd110ukrv_mekService.updateDetail" parameterType="Map">
		MERGE INTO S_BMD110T_MEK                         A
		USING ( SELECT #{S_COMP_CODE}        AS COMP_CODE
		             , #{MODEL_UNI_CODE}     AS MODEL_UNI_CODE
		             , #{PART_CODE}          AS PART_CODE
		      )                                         B   ON B.COMP_CODE      = A.COMP_CODE
		                                                   AND B.MODEL_UNI_CODE = A.MODEL_UNI_CODE
		                                                   AND B.PART_CODE      = A.PART_CODE
		WHEN MATCHED THEN
		UPDATE 
		   SET MODEL_UNI_CODE = #{MODEL_UNI_CODE}
		     , PART_CODE      = #{PART_CODE}
		     , ITEM_CODE	  = #{ITEM_CODE}
		     , PART_UNI_CODE  = #{PART_UNI_CODE}

		WHEN NOT MATCHED THEN
		INSERT (
		          COMP_CODE
		        , MODEL_UNI_CODE
		        , PART_CODE
		        , PART_UNI_CODE
		        , ITEM_CODE
		        , INSERT_DB_USER
		        , INSERT_DB_TIME
		        , UPDATE_DB_USER
		        , UPDATE_DB_TIME
		) VALUES (
		          #{S_COMP_CODE}
		        , #{NEW_MODEL_UNI_CODE}
		        , #{PART_CODE}
		        , #{PART_UNI_CODE}
		        , #{ITEM_CODE}
		        , #{S_USER_ID}
		        , GETDATE()
		        , #{S_USER_ID}
		        , GETDATE()
		);
	</update>

	<delete id="s_bmd110ukrv_mekService.deleteDetail" parameterType="Map">
		DELETE S_BMD110T_MEK
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND MODEL_UNI_CODE = #{MODEL_UNI_CODE}
		   AND PART_CODE      = #{PART_CODE}
	</delete>
</mapper>