<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mrt200ukrvServiceImpl">
					
	<select id="mrt200ukrvServiceImpl.selectinoutNoMasterList" parameterType="Map" resultType="rMap">
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

	SELECT 
		A.COMP_CODE,
		A.DIV_CODE,
		A.RETURN_NUM,
		A.CUSTOM_CODE,
		C.CUSTOM_NAME AS CUSTOM_NAME,
		A.RETURN_CODE,
		A.RETURN_DATE,
		A.DEPT_CODE,
		B.TREE_NAME		AS DEPT_NAME,
		A.WH_CODE,
		A.INOUT_PRSN,
		A.REMARK,
		CASE WHEN C.MONEY_UNIT IS NULL OR C.MONEY_UNIT = '' THEN D.SUB_CODE
		ELSE C.MONEY_UNIT
		END MONEY_UNIT,
		SUM(A2.RETURN_Q) AS	SUM_ORDER_UNIT_Q,
		SUM(A2.RETURN_O) AS	SUM_ORDER_UNIT_FOR_O 	
		
	FROM		MRT100T A WITH(NOLOCK) 
	INNER JOIN  MRT200T A2 WITH(NOLOCK) ON A2.COMP_CODE  = A.COMP_CODE
									   AND A2.DIV_CODE   = A.DIV_CODE
									   AND A2.RETURN_NUM = A.RETURN_NUM  
	
	INNER JOIN  BSA210T B WITH(NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
 								      AND B.TYPE_LEVEL  = A.DIV_CODE
 									  AND B.TREE_CODE	= A.DEPT_CODE
	INNER JOIN BCM100T C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                      AND C.CUSTOM_CODE = A.CUSTOM_CODE
    LEFT JOIN BSA100T D WITH (NOLOCK)  ON D.COMP_CODE   = A.COMP_CODE
                                      AND D.MAIN_CODE   = N'B004'
                                      AND D.SUB_CODE   != '$'
                                      AND D.REF_CODE1   = 'Y'                                 
     
	WHERE A.COMP_CODE = #{S_COMP_CODE}
	AND   A.DIV_CODE  = #{DIV_CODE}
	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">		/*부서*/
	AND   B.TREE_LEVEL  LIKE  (SELECT TREE_LEVEL FROM BSA210T WITH(NOLOCK) WHERE COMP_CODE =B.COMP_CODE AND TYPE_LEVEL=B.TYPE_LEVEL AND TREE_CODE = #{DEPT_CODE}) + '%'
	</if> 
	
	<if test="@foren.Ognl@isNotEmpty(WH_CODE)">
	AND	  A.WH_CODE     = #{WH_CODE}
	</if>
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
	AND	  A.CUSTOM_CODE = #{CUSTOM_CODE}
	</if>
	<if test="@foren.Ognl@isNotEmpty(RETURN_DATE_FR)">
	AND   A.RETURN_DATE &gt;= #{RETURN_DATE_FR}
	</if>
	<if test="@foren.Ognl@isNotEmpty(RETURN_DATE_TO)"> 	
	AND   A.RETURN_DATE &lt;= #{RETURN_DATE_TO}
	</if>
	<if test="@foren.Ognl@isNotEmpty(INOUT_PRSN)"> 
	AND   A.INOUT_PRSN  = #{INOUT_PRSN}
	</if>

	GROUP BY A.COMP_CODE,
		A.DIV_CODE,
		A.RETURN_NUM,
		A.CUSTOM_CODE,
		C.CUSTOM_NAME,
		A.RETURN_CODE,
		A.RETURN_DATE,
		A.DEPT_CODE,
		B.TREE_NAME,
		A.WH_CODE,
		A.INOUT_PRSN,
		A.REMARK,
		C.MONEY_UNIT,
		D.SUB_CODE
    SET ARITHABORT OFF
    SET NOCOUNT OFF
END
	</select>
<select id="mrt200ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

	SELECT 
		A.COMP_CODE,
		A.DIV_CODE,
		A.RETURN_NUM,
		A.RETURN_SEQ,
		A.ITEM_CODE,
		B.ITEM_NAME,
		A.LOT_NO,
		A.LOT_ASSIGNED_YN,
		A.PURCHASE_TYPE,
		A.SALES_TYPE,
		B1.STOCK_Q  AS  GOOD_STOCK_Q,
		A.SALE_P			AS SALE_BASIS_P,
		A.PURCHASE_RATE,
		A.PURCHASE_P		AS ORDER_UNIT_FOR_P,
		A.RETURN_Q			AS ORDER_UNIT_Q,
		A.INOUT_Q			AS RETURN_CONFIRM_Q,
		A.RETURN_O 		AS ORDER_UNIT_FOR_O,
		A.REMARK,
		A2.WH_CODE,
		A.CLOSE_YN,
	    A.SORT_SEQ,
	    
	    CASE WHEN D.CNT > 1 THEN '복수'
	    	 ELSE '단수' 
	    	 END CNT ,

		A.LOT_ASSIGNED_YN AS LOT_ASSIGNED_YN_DUMMY,
		A.PURCHASE_P AS ORDER_UNIT_FOR_P_DUMMY,
		A.SALES_TYPE AS SALES_TYPE_DUMMY,
		A.PURCHASE_TYPE AS PURCHASE_TYPE_DUMMY,
		A.RETURN_O AS ORDER_UNIT_FOR_O_DUMMY



       	
  
    

	  --  D.CNT --1보다 클경우 복수매입
		
		
		
	FROM		MRT200T A WITH (NOLOCK)
	 INNER JOIN MRT100T A2 WITH(NOLOCK) ON A2.COMP_CODE  = A.COMP_CODE
	 								   AND A2.DIV_CODE   = A.DIV_CODE
	 								   AND A2.RETURN_NUM = A.RETURN_NUM  
	 INNER JOIN BPR100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                       AND B.ITEM_CODE = A.ITEM_CODE    
     LEFT  JOIN BIV100T C WITH (NOLOCK) ON C.COMP_CODE = A2.COMP_CODE    
                                       AND C.DIV_CODE  = A2.DIV_CODE    
                                       AND C.WH_CODE   = A2.WH_CODE    
                                       AND C.ITEM_CODE = A.ITEM_CODE 
     LEFT JOIN (
           SELECT 
           X.COMP_CODE, X.ITEM_CODE,X.WH_CODE, SUM(X.STOCK_Q) AS STOCK_Q
           FROM
           (
           SELECT COMP_CODE, ITEM_CODE,STOCK_Q,WH_CODE
		   FROM BIV150T WITH(NOLOCK)
           WHERE  COMP_CODE =  #{S_COMP_CODE}
             AND  DIV_CODE  =  #{DIV_CODE}
               
           UNION ALL
         
		   SELECT COMP_CODE, ITEM_CODE, STOCK_Q,WH_CODE
		   FROM UNILITE.VGetDailyStock WITH(NOLOCK)
           WHERE  COMP_CODE =  #{S_COMP_CODE}
             AND  DIV_CODE  =  #{DIV_CODE}
           ) X GROUP BY COMP_CODE, ITEM_CODE, WH_CODE      
   
   		)  B1 
             ON A.ITEM_CODE = B1.ITEM_CODE 
            AND A.COMP_CODE = B1.COMP_CODE  
            AND B1.WH_CODE  = A2.WH_CODE                             
 --추가

LEFT OUTER JOIN ( SELECT COMP_CODE, DIV_CODE , ITEM_CODE, PURCHASE_TYPE, SALES_TYPE, COUNT(*) AS CNT
         FROM BPR400T         
         GROUP BY COMP_CODE, DIV_CODE , ITEM_CODE, PURCHASE_TYPE, SALES_TYPE
       ) D ON A.COMP_CODE  = D.COMP_CODE
          AND A.DIV_CODE  = D.DIV_CODE
          AND A.ITEM_CODE  = D.ITEM_CODE
          AND A.SALES_TYPE  = D.SALES_TYPE
          AND A.PURCHASE_TYPE  = D.PURCHASE_TYPE     
  
  

--추가 끝
	WHERE A.COMP_CODE = #{S_COMP_CODE}
	<if test="@foren.Ognl@isNotEmpty(RETURN_NUM)"> 
	AND   A.RETURN_NUM  = #{RETURN_NUM}
	</if>
	ORDER BY A.SORT_SEQ
    SET ARITHABORT OFF
    SET NOCOUNT OFF
END
	</select>


<select id="mrt200ukrvServiceImpl.fnOrderPrice" parameterType="Map" resultType="rMap">

SELECT A.COMP_CODE, 
		A.TYPE, 
		A.DIV_CODE, 
		A.ITEM_CODE, 
		A.CUSTOM_CODE, 
		A.MONEY_UNIT,
		A.ORDER_UNIT, 
		A.PURCHASE_TYPE, 
		A.SALES_TYPE,
		A.ORDER_RATE,
		A.PURCHASE_RATE,
		ISNULL(A.ITEM_P, C.PURCHASE_BASE_P) AS ORDER_P,
		A.APLY_START_DATE
 FROM uniLITE.BPR400T A
 INNER JOIN
   (SELECT COMP_CODE, TYPE, DIV_CODE, ITEM_CODE, CUSTOM_CODE, MONEY_UNIT, ORDER_UNIT, MAX(APLY_START_DATE) AS APLY_START_DATE
    FROM uniLITE.BPR400T
    WHERE APLY_START_DATE &lt;=#{RETURN_DATE}
    GROUP BY COMP_CODE, TYPE, DIV_CODE, ITEM_CODE, CUSTOM_CODE, MONEY_UNIT, ORDER_UNIT
    ) B ON A.COMP_CODE = B.COMP_CODE
       AND A.TYPE                 = B.TYPE
       AND A.DIV_CODE             = B.DIV_CODE                          
       AND A.CUSTOM_CODE          = B.CUSTOM_CODE
       AND A.ITEM_CODE            = B.ITEM_CODE 
       AND A.MONEY_UNIT           = B.MONEY_UNIT
       AND A.ORDER_UNIT           = B.ORDER_UNIT
       AND A.APLY_START_DATE      = B.APLY_START_DATE                          
 INNER JOIN unilite.BPR200T C ON A.COMP_CODE = C.COMP_CODE
                             AND A.DIV_CODE  = C.DIV_CODE
                             AND A.ITEM_CODE = C.ITEM_CODE
WHERE A.ITEM_CODE	= #{ITEM_CODE}
	AND A.CUSTOM_CODE       = #{CUSTOM_CODE}
	AND A.COMP_CODE	        = #{S_COMP_CODE}
	AND A.DIV_CODE	        = #{DIV_CODE}
	AND A.TYPE		        = N'1'			
	AND A.MONEY_UNIT	    = #{MONEY_UNIT}
	AND A.ORDER_UNIT		= #{ORDER_UNIT}
</select>
<select id="mrt200ukrvServiceImpl.userWhcode" parameterType="Map" resultType="rMap">
SELECT
	A.WH_CODE
FROM BSA210T A WITH(NOLOCK)
	LEFT JOIN BSA300T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
									AND B.DEPT_CODE = A.TREE_CODE
WHERE A.COMP_CODE = #{S_COMP_CODE}
AND B.USER_ID = #{S_USER_ID}

</select>
<select id="mrt200ukrvServiceImpl.fnSaleBasisP" parameterType="Map" resultType="rMap">
BEGIN
DECLARE    
	 			@ITEM_CODE			NVARCHAR(20)
	 		,	@COMP_CODE			NVARCHAR(08)

        SET     @ITEM_CODE	        = #{ITEM_CODE}
        SET     @COMP_CODE	        = #{S_COMP_CODE}	

SELECT 
      SALE_BASIS_P
      FROM BPR100T WITH (NOLOCK)
      
      WHERE	COMP_CODE = @COMP_CODE 
      AND ITEM_CODE	=	@ITEM_CODE
END 
</select>
<select id="mrt200ukrvServiceImpl.fnGetCalcTaxAmt" parameterType="Map" resultType="rMap">
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		SELECT INOUT_I,
				INOUT_TAX_AMT,
				INOUT_TOTAL_I 
			FROM uniLITE.fnGetCalcTaxAmt( #{COMP_CODE}
			                          , #{CUSTOM_CODE}
			                          , #{ITEM_CODE}
			                          , #{ORDER_UNIT_Q} 
			                          , #{ORDER_UNIT_P} )
</select>

	  

	  	
<insert id="mrt200ukrvServiceImpl.insertLogMaster" parameterType="Map">    	
 	INSERT INTO L_MRT100T
           (KEY_VALUE
           ,OPR_FLAG
           ,COMP_CODE
           ,DIV_CODE
           ,RETURN_NUM
           ,CUSTOM_CODE
           ,RETURN_CODE
           ,RETURN_DATE
           ,DEPT_CODE
           ,WH_CODE
           ,INOUT_PRSN
           ,REMARK
           ,INSERT_DB_USER
           ,INSERT_DB_TIME
           ,UPDATE_DB_USER
           ,UPDATE_DB_TIME
		   )
     VALUES
           (#{KEY_VALUE}
           ,#{OPR_FLAG}
           ,#{COMP_CODE}
           ,#{DIV_CODE}
           ,#{RETURN_NUM}
           ,#{CUSTOM_CODE}
           ,#{RETURN_CODE}
           ,#{RETURN_DATE}
           ,#{DEPT_CODE}
           ,#{WH_CODE}
           ,#{INOUT_PRSN}
           ,#{REMARK}
           , #{S_USER_ID}     	
           , GETDATE()	       
           , #{S_USER_ID}     	
           , GETDATE()
           ) 
</insert>	  	
<insert id="mrt200ukrvServiceImpl.insertLogDetail" parameterType="Map">    	
INSERT INTO L_MRT200T
           (KEY_VALUE
           ,OPR_FLAG
           ,COMP_CODE
           ,DIV_CODE
           ,RETURN_NUM
           ,RETURN_SEQ
           ,ITEM_CODE
           ,LOT_NO
           ,LOT_ASSIGNED_YN
           ,PURCHASE_TYPE
           ,SALES_TYPE
           ,SALE_P
           ,PURCHASE_RATE
           ,PURCHASE_P
           ,RETURN_Q
           ,INOUT_Q
           ,RETURN_O
           ,REMARK
           ,CLOSE_YN
           ,SORT_SEQ
           ,INSERT_DB_USER
           ,INSERT_DB_TIME
           ,UPDATE_DB_USER
           ,UPDATE_DB_TIME
		   )
     VALUES
           (#{KEY_VALUE}
           ,#{OPR_FLAG}
           ,#{COMP_CODE}
           ,#{DIV_CODE}
           ,#{RETURN_NUM}
           ,#{RETURN_SEQ}
           ,#{ITEM_CODE}
           ,#{LOT_NO}
           ,#{LOT_ASSIGNED_YN}
           ,#{PURCHASE_TYPE}
           ,#{SALES_TYPE}
           ,#{SALE_BASIS_P}
           ,#{PURCHASE_RATE}
           ,#{ORDER_UNIT_FOR_P}
           ,#{ORDER_UNIT_Q}
           ,#{RETURN_CONFIRM_Q}
           ,#{ORDER_UNIT_FOR_O}
           ,#{REMARK}
           ,#{CLOSE_YN}
           ,#{SORT_SEQ}
		   , #{S_USER_ID}     	
           , GETDATE()	       
           , #{S_USER_ID}     	
           , GETDATE()
		   )
</insert>	  		  
<update id="spReturningReceipt" parameterType="Map" statementType="CALLABLE">
	{call SP_MATRL_ReturningReceipt (
		#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ReturnNum, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}
</update>	
</mapper>