<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mpo310ukrvService">

	<select id="mpo310ukrvService.selectSub1" parameterType="Map" resultType="rMap">
SELECT 
	INOUT_DATE
	,INOUT_Q
  FROM BTR100T 
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND DIV_CODE = #{DIV_CODE}
   AND INOUT_TYPE = '1'
   AND ITEM_STATUS = '1'	--양품만 
   AND ORDER_NUM = #{M_ORDER_NUM}
   AND ORDER_SEQ = #{M_ORDER_SEQ}
ORDER BY INOUT_DATE ASC
	</select>
	<select id="mpo310ukrvService.selectSub2" parameterType="Map" resultType="rMap">
SELECT 
INOUT_DATE
,INOUT_Q
  FROM BTR100T 
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND DIV_CODE = #{DIV_CODE}
   AND INOUT_TYPE = '2'
   AND ORDER_NUM = #{M_ORDER_NUM}
   AND ORDER_SEQ = #{M_ORDER_SEQ}
  AND ITEM_CODE = #{CITEM_CODE}
ORDER BY INOUT_DATE ASC
   
	</select>
	<select id="mpo310ukrvService.selectMaster" parameterType="Map" resultType="rMap">

		
		/* mpo310ukrvService.selectMaster */
		BEGIN
		    SET NOCOUNT ON

		    DECLARE @RTN_TBL TABLE (
				    TYPE				NVARCHAR(01)
		          , WK_PLAN_NUM			NVARCHAR(20)
		          , ORDER_NUM			NVARCHAR(20)
		          , ORDER_SEQ			NUMERIC(5)
		          , PROG_WORK_CODE		NVARCHAR(20)
		          , CONFM_YN			NVARCHAR(20)
		          , DVRY_ESTI_DATE		NVARCHAR(10)
		          , INIT_DVRY_DATE		NVARCHAR(10)			-- 최초납기일
		          , REASON				NVARCHAR(1000)			-- 계획현황
		          , CUSTOM_CODE			NVARCHAR(08)
		          , CLASSFICATION		NVARCHAR(100)
		          , ITEM_CODE			NVARCHAR(20)
		          , ITEM_NAME			NVARCHAR(1000)
		          , SPEC				NVARCHAR(1000)
		          , ORDER_UNIT			NVARCHAR(05)
		          , ORDER_DATE			NVARCHAR(10)
		          , DUE_DATE			NVARCHAR(10)
		          , ORDER_Q				NVARCHAR(30)
		          , INSTOCK_Q			NVARCHAR(30)
		          , BAL_Q				NVARCHAR(30)
		          , REMARK				NVARCHAR(1000)
		          , INSERT_DB_USER		NVARCHAR(50)
		          , UPDATE_DB_USER		NVARCHAR(50)
		          , COMP_CODE			NVARCHAR(08)
		          , DIV_CODE			NVARCHAR(08)
		          , SO_NUM				NVARCHAR(20)
		          , SO_SEQ				NUMERIC(5)
		          , STATUS				NVARCHAR(100)
				  , M_ORDER_PRSN	NVARCHAR(10)
				  , SALE_CUSTOM_CODE	NVARCHAR(08)
				  , PROD_ITEM_CODE		NVARCHAR(20)
				  , S_ORDER_DATE		NVARCHAR(10)
				  , DVRY_DATE			NVARCHAR(10)
				  , DVRY_CUST_NM		NVARCHAR(100)
		          , OUT_DIV_CODE			NVARCHAR(08)
		          , LEVEL             INT
		    )

		    DECLARE @sCOMP_CODE        NVARCHAR(08)
		          , @sDIV_CODE         NVARCHAR(08)
		          , @sORDER_NUM        NVARCHAR(20)
		          , @sSER_NO           NUMERIC(5)
		          , @sSALE_CUSTOM_CODE NUMERIC(20)
		          , @sORDER_Q          NUMERIC(30, 6)
		          , @sORDER_DATE       NVARCHAR(08)
		          , @sINSERT_DATE      NVARCHAR(08)
		          , @sDVRY_DATE        NVARCHAR(08)
		          , @sPROD_ITEM_CODE   NVARCHAR(20)
		          , @sDVRY_CUST_NM     NVARCHAR(100)
		          , @sOUT_DIV_CODE         NVARCHAR(08)

		    DECLARE Cur1 CURSOR FOR
		    -- 커서에 사용할 SELECT 문장
		        -- 제품기준의 BOM
		        SELECT L.COMP_CODE, L.DIV_CODE, L.ORDER_NUM, L.SER_NO, A.CUSTOM_CODE, L.ORDER_Q, A.ORDER_DATE, CONVERT(NVARCHAR, L.INSERT_DB_TIME, 112) AS INSERT_DATE, L.DVRY_DATE, L.ITEM_CODE, D.DVRY_CUST_NM,L.OUT_DIV_CODE
		          FROM       SOF110T L WITH(NOLOCK)
		          INNER JOIN SOF100T A WITH(NOLOCK) ON A.COMP_CODE   = L.COMP_CODE
		                                           AND A.DIV_CODE    = L.DIV_CODE
		                                           AND A.ORDER_NUM   = L.ORDER_NUM
		          INNER JOIN BPR200T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                           AND B.DIV_CODE    = A.DIV_CODE
		                                           AND B.ITEM_CODE   = L.ITEM_CODE
		          INNER JOIN BCM100T C WITH(NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
		                                           AND C.CUSTOM_CODE = A.CUSTOM_CODE
				   LEFT JOIN SCM100T D WITH(NOLOCK) ON L.COMP_CODE      = D.COMP_CODE
                                                   AND A.CUSTOM_CODE    = D.CUSTOM_CODE
                                                   AND L.DVRY_CUST_CD   = CAST(D.DVRY_CUST_SEQ AS NVARCHAR(80))
		  
				  
				    WHERE L.COMP_CODE   = #{S_COMP_CODE}
		           AND L.DIV_CODE    = #{DIV_CODE}
		           
				 <if test="@foren.Ognl@isNotEmpty(ORDER_NUM)">
				   AND A.ORDER_NUM = #{ORDER_NUM}
				 </if>
				 <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
				   AND A.CUSTOM_CODE = #{CUSTOM_CODE}
				 </if>
				   AND A.ORDER_DATE    &gt;= #{ORDER_DATE_FR}
		           AND A.ORDER_DATE    &lt;= #{ORDER_DATE_TO}
		         	       
			       <if test="@foren.Ognl@isNotEmpty(DVRY_DATE_FR)">
			       AND L.DVRY_DATE   &gt;= #{DVRY_DATE_FR}				/* 납기일(FR) */
			       </if>
			       <if test="@foren.Ognl@isNotEmpty(DVRY_DATE_TO)">
			       AND L.DVRY_DATE   &lt;= #{DVRY_DATE_TO}				/* 납기일(TO) */
			       </if>
			       <if test="@foren.Ognl@isNotEmpty(ORDER_PRSN)">
			       AND A.ORDER_PRSN = #{ORDER_PRSN}							/* 담당자 */
			       </if>
			       
				  <if test="RDO_SELECT != &quot;1&quot;"> 
			      AND (ISNULL(L.ORDER_Q, 0) - ISNULL(L.OUTSTOCK_Q, 0) + ISNULL(L.RETURN_Q, 0)) &gt; 0
				  </if>
				  
			      <if test="@foren.Ognl@isNotEmpty(ORDER_STATUS)">
			      AND L.ORDER_STATUS   = #{ORDER_STATUS}    /* 마감여부 */
			      </if>
				  
				  
				  
				  
				  
				  
			       
		      
		         ORDER BY L.COMP_CODE, L.DIV_CODE, L.ORDER_NUM, L.SER_NO

		    OPEN Cur1
		    FETCH NEXT FROM Cur1 INTO @sCOMP_CODE, @sDIV_CODE, @sORDER_NUM, @sSER_NO, @sSALE_CUSTOM_CODE, @sORDER_Q, @sORDER_DATE, @sINSERT_DATE, @sDVRY_DATE, @sPROD_ITEM_CODE,@sDVRY_CUST_NM,@sOUT_DIV_CODE
		    WHILE @@FETCH_STATUS = 0
		    BEGIN
		    -- 처리로직 Start
  		        INSERT @RTN_TBL (
		                 TYPE	--작업지시
		               , WK_PLAN_NUM
		               , ORDER_NUM
		               , ORDER_SEQ
		               , PROG_WORK_CODE
		               , CONFM_YN
		               , DVRY_ESTI_DATE
		               , INIT_DVRY_DATE -- 최초납기일
		               , REASON -- 계획현황
		               , CUSTOM_CODE
		               , CLASSFICATION
		               , ITEM_CODE
		               , ITEM_NAME
		               , SPEC
		               , ORDER_UNIT
		               , ORDER_DATE
		               , DUE_DATE
		               , ORDER_Q
		               , INSTOCK_Q
		               , BAL_Q
		               , REMARK
		               , INSERT_DB_USER
		               , UPDATE_DB_USER
		               , COMP_CODE
		               , DIV_CODE
		               , SO_NUM
		               , SO_SEQ
		               , STATUS
					   , M_ORDER_PRSN
					   , SALE_CUSTOM_CODE
					   , PROD_ITEM_CODE
					   , S_ORDER_DATE
					   , DVRY_DATE
					   , DVRY_CUST_NM
					   , OUT_DIV_CODE
					   ,LEVEL
		        )        
				SELECT 	Z.*, @sSALE_CUSTOM_CODE, @sPROD_ITEM_CODE, @sORDER_DATE, @sDVRY_DATE, @sDVRY_CUST_NM,@sOUT_DIV_CODE,Z6.level

				FROM
		        (
		          SELECT '1'                                                        AS TYPE	--작업지시
		               , A.WK_PLAN_NUM
		               , B.WKORD_NUM                                                    AS ORDER_NUM
		               , 0                                                              AS ORDER_SEQ
		               , B.PROG_WORK_CODE
		               , ''														    	AS CONFM_YN
		               , ''																AS DVRY_ESTI_DATE
		               , '' AS INIT_DVRY_DATE -- 최초납기일
		               , B.Progrs_Kind_Cd AS REASON -- 계획현황
		               , B.WORK_SHOP_CODE                                               AS CUSTOM_CODE
		               , M3.tree_name                                                   AS CLASSFICATION
		               , B.ITEM_CODE
		               , uniLITE.fnItemNameComp(B.COMP_CODE, #{S_USER_ID}, B.item_code) AS ITEM_NAME
		               , M2.SPEC
		               , B.PROG_UNIT                                                    AS ORDER_UNIT
		               , uniLITE.fnGetUserDate( #{S_COMP_CODE},B.PRODT_WKORD_DATE)       AS ORDER_DATE
		               , B.prodt_end_date         AS DUE_DATE
		               , CASE ISNULL(B.wkord_q, 0.0)                          WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, B.wkord_q), '') END AS ORDER_Q
		               , CASE ISNULL(B.prodt_q, 0.0)                          WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, B.prodt_q), '') END AS INSTOCK_Q
		               , CASE ISNULL(B.wkord_q, 0.0) - ISNULL(B.prodt_q, 0.0) WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, ISNULL(B.wkord_q, 0.0) - ISNULL(B.prodt_q, 0.0)), '') END AS BAL_Q
		               , B.REMARK                                                        AS REMARK
		               , Z1.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, B.INSERT_DB_TIME, 121), 0, 17)	AS INSERT_DB_USER
		               , Z2.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, B.UPDATE_DB_TIME, 121), 0, 17)	AS UPDATE_DB_USER
		               , A.COMP_CODE
		               , A.DIV_CODE
		               , A.ORDER_NUM                                                    AS SO_NUM
		               , A.SEQ                                                          AS SO_SEQ
		               , R1.CODE_NAME AS STATUS
					   , '' AS M_ORDER_PRSN
		           FROM PPL100T A   WITH (NOLOCK)
		                INNER JOIN  PMP100T B   WITH (NOLOCK)   ON  B.wk_plan_num    = A.WK_PLAN_NUM
		                                                       AND  B.COMP_CODE      = A.COMP_CODE
		                LEFT  JOIN  PBS200T M1  WITH (NOLOCK)   ON  M1.div_code       = B.DIV_CODE
		                                                       AND  M1.work_shop_code = B.WORK_SHOP_CODE
		                                                       AND  M1.prog_work_code = B.PROG_WORK_CODE
		                                                       AND  M1.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BPR100T M2  WITH (NOLOCK)   ON  M2.item_code      = B.ITEM_CODE
		                                                       AND  M2.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BSA230T M3  WITH (NOLOCK)   ON  M3.type_level     = B.DIV_CODE
		                                                       AND  M3.tree_code      = B.WORK_SHOP_CODE
		                                                       AND  M3.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BSA300T Z1  WITH (NOLOCK)   ON Z1.COMP_CODE = B.COMP_CODE
		                                                       AND Z1.USER_ID   = B.INSERT_DB_USER
		                LEFT  JOIN  BSA300T Z2  WITH (NOLOCK)   ON Z2.COMP_CODE = B.COMP_CODE
		                                                       AND Z2.USER_ID   = B.UPDATE_DB_USER
						LEFT JOIN BSA100T R1 WITH(NOLOCK) ON R1.COMP_CODE = B.COMP_CODE
														 AND R1.MAIN_CODE = 'P001'
														 AND R1.SUB_CODE = B.WKORD_STATUS
		              WHERE   1 + 1 = 2
		               
		              AND     A.COMP_CODE   =  #{S_COMP_CODE}
		               AND     A.DIV_CODE   = #{DIV_CODE}
					   AND   A.ORDER_NUM = @sORDER_NUM
					   AND   A.SEQ = @sSER_NO
		      
		          --긴급작업지시 등록으로 진행한 데이터 조회
		          UNION ALL

		          SELECT '1'                                                        AS TYPE	--작업지시
		               , B.WK_PLAN_NUM
		               , B.WKORD_NUM                                                    AS ORDER_NUM
		               , 0                                                              AS ORDER_SEQ
		               , B.PROG_WORK_CODE
		               , ''														    	AS CONFM_YN
		               , ''																AS DVRY_ESTI_DATE
		               , '' AS INIT_DVRY_DATE -- 최초납기일
		               , B.Progrs_Kind_Cd AS REASON -- 계획현황
		               , B.WORK_SHOP_CODE                                               AS CUSTOM_CODE
		               , M3.tree_name                                                   AS CLASSFICATION
		               , B.ITEM_CODE
		               , uniLITE.fnItemNameComp(B.COMP_CODE, #{S_USER_ID}, B.item_code) AS ITEM_NAME
		               , M2.SPEC
		               , B.PROG_UNIT                                                    AS ORDER_UNIT
		               , uniLITE.fnGetUserDate( #{S_COMP_CODE},B.PRODT_WKORD_DATE)       AS ORDER_DATE
		               , B.prodt_end_date         AS DUE_DATE
		               , CASE ISNULL(B.wkord_q, 0.0)                          WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, B.wkord_q), '') END AS ORDER_Q
		               , CASE ISNULL(B.prodt_q, 0.0)                          WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, B.prodt_q), '') END AS INSTOCK_Q
		               , CASE ISNULL(B.wkord_q, 0.0) - ISNULL(B.prodt_q, 0.0) WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, ISNULL(B.wkord_q, 0.0) - ISNULL(B.prodt_q, 0.0)), '') END AS BAL_Q
		               , B.REMARK                                                        AS REMARK
		               , Z1.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, B.INSERT_DB_TIME, 121), 0, 17)	AS INSERT_DB_USER
		               , Z2.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, B.UPDATE_DB_TIME, 121), 0, 17)	AS UPDATE_DB_USER
		               , B.COMP_CODE
		               , B.DIV_CODE
		               , B.SO_NUM                                                    AS SO_NUM
		               , B.SO_SEQ                                                       AS SO_SEQ
		               , R1.CODE_NAME AS STATUS
					   , '' AS M_ORDER_PRSN
		           FROM PMP100T B   WITH (NOLOCK)
		                LEFT  JOIN  PPL100T A   WITH (NOLOCK)   ON  B.wk_plan_num    = A.WK_PLAN_NUM
		                                                       AND  B.COMP_CODE      = A.COMP_CODE
		                LEFT  JOIN  PBS200T M1  WITH (NOLOCK)   ON  M1.div_code       = B.DIV_CODE
		                                                       AND  M1.work_shop_code = B.WORK_SHOP_CODE
		                                                       AND  M1.prog_work_code = B.PROG_WORK_CODE
		                                                       AND  M1.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BPR100T M2  WITH (NOLOCK)   ON  M2.item_code      = B.ITEM_CODE
		                                                       AND  M2.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BSA230T M3  WITH (NOLOCK)   ON  M3.type_level     = B.DIV_CODE
		                                                       AND  M3.tree_code      = B.WORK_SHOP_CODE
		                                                       AND  M3.COMP_CODE      = B.COMP_CODE
		                LEFT  JOIN  BSA300T Z1  WITH (NOLOCK)   ON Z1.COMP_CODE = B.COMP_CODE
		                                                       AND Z1.USER_ID   = B.INSERT_DB_USER
		                LEFT  JOIN  BSA300T Z2  WITH (NOLOCK)   ON Z2.COMP_CODE = B.COMP_CODE
		                                                       AND Z2.USER_ID   = B.UPDATE_DB_USER
						LEFT JOIN BSA100T R1 WITH(NOLOCK) ON R1.COMP_CODE = B.COMP_CODE
														 AND R1.MAIN_CODE = 'P001'
														 AND R1.SUB_CODE = B.WKORD_STATUS
		              WHERE   1 + 1 = 2
		              AND     A.COMP_CODE IS NULL
		               
		              AND     B.COMP_CODE   =  #{S_COMP_CODE}
 					  AND     B.DIV_CODE   = #{DIV_CODE}
		              AND     B.SO_NUM      = @sORDER_NUM 
		              AND     B.SO_SEQ      = @sSER_NO
		          UNION ALL

		          SELECT '2'                                                        AS TYPE	--외주/내수
		               , B.WK_PLAN_NUM
		               , C.ORDER_NUM                                                     AS ORDER_NUM
		               , C.ORDER_SEQ                                                     AS ORDER_SEQ
		               , '' AS PROG_WORK_CODE
		               , CASE ISNULL(C.IF_YN, 'N') WHEN 'Y' THEN '확인' ELSE '미확인'	END  AS CONFM_YN
		               , C.DVRY_ESTI_DATE
		               , C.INIT_DVRY_DATE AS INIT_DVRY_DATE -- 최초납기일
		               , C.REASON AS REASON -- 계획현황
		               , D.CUSTOM_CODE
		               , M1.CUSTOM_NAME                                                  AS CLASSFICATION
		               , C.ITEM_CODE
		               , uniLITE.fnItemNameComp(C.COMP_CODE, #{S_USER_ID}, C.ITEM_CODE)  AS ITEM_NAME
		               , M2.SPEC
		               , C.ORDER_UNIT                                                    AS ORDER_UNIT
		               , uniLITE.fnGetUserDate( #{S_COMP_CODE},D.ORDER_DATE)              AS ORDER_DATE
		               , C.DVRY_DATE               AS DUE_DATE
		               , CASE ISNULL(C.ORDER_Q, 0.0)                          WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, C.ORDER_Q), '')   END AS ORDER_Q
		               , CASE ISNULL(C.INSTOCK_Q, 0.0)                        WHEN 0.0 THEN '' ELSE ISNULL(CONVERT(NVARCHAR, C.INSTOCK_Q), '') END AS INSTOCK_Q
		               , CASE ISNULL(C.ORDER_Q, 0.0) - ISNULL(C.INSTOCK_Q, 0.0)
		                      WHEN 0.0 THEN ''
		                      ELSE ISNULL(CONVERT(NVARCHAR, ISNULL(C.ORDER_Q, 0.0) - ISNULL(C.INSTOCK_Q, 0.0)), '')
		                 END                                                             AS BAL_Q
		               , C.REMARK                                                        AS REMARK
		             --  , D.ORDER_TYPE
		             --  , M3.CODE_NAME                                        AS ORDERTYPE_NAME
		               , Z1.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, C.INSERT_DB_TIME, 121), 0, 17)	AS INSERT_DB_USER
		               , Z2.USER_NAME + ' / ' + SUBSTRING(CONVERT(NVARCHAR, C.UPDATE_DB_TIME, 121), 0, 17)	AS UPDATE_DB_USER
		               , C.COMP_CODE
		               , C.DIV_CODE
		               , C.SO_NUM
		               , C.SO_SEQ
		               
		               , R1.CODE_NAME AS STATUS
					   ,D.ORDER_PRSN AS M_ORDER_PRSN
		            FROM        MPO200T C   WITH (NOLOCK)
		            LEFT  JOIN  MRP400T B   WITH (NOLOCK)   ON C.ORDER_REQ_NUM = B.ORDER_REQ_NUM
		                                                   AND C.COMP_CODE     = B.COMP_CODE
		            INNER JOIN  MPO100T D   WITH (NOLOCK)   ON D.DIV_CODE      = C.DIV_CODE
		                                                   AND D.ORDER_NUM     = C.ORDER_NUM
		                                                   AND D.COMP_CODE     = C.COMP_CODE
		                                                   AND D.AGREE_STATUS  = '2'
		            LEFT  JOIN  BCM100T M1  WITH (NOLOCK)   ON M1.CUSTOM_CODE  = D.CUSTOM_CODE
		                                                   AND M1.COMP_CODE    = D.COMP_CODE
		            LEFT  JOIN  BPR100T M2  WITH (NOLOCK)   ON M2.ITEM_CODE    = C.ITEM_CODE
		                                                   AND M2.COMP_CODE    = C.COMP_CODE
		            LEFT  JOIN  BSA100T M3  WITH (NOLOCK)   ON M3.MAIN_CODE    = 'M001'
		                                                   AND M3.SUB_CODE     = D.ORDER_TYPE
		                                                   AND M3.COMP_CODE    = D.COMP_CODE
		            LEFT  JOIN  BSA300T Z1  WITH (NOLOCK)   ON Z1.COMP_CODE = C.COMP_CODE
		                                                   AND Z1.USER_ID   = C.INSERT_DB_USER
		            LEFT  JOIN  BSA300T Z2  WITH (NOLOCK)   ON Z2.COMP_CODE = C.COMP_CODE
		                                                   AND Z2.USER_ID   = C.UPDATE_DB_USER
					LEFT JOIN BSA100T R1 WITH(NOLOCK) ON R1.COMP_CODE = C.COMP_CODE
													 AND R1.MAIN_CODE = 'M002'
													 AND R1.SUB_CODE = C.CONTROL_STATUS		                                                   
		           WHERE   C.COMP_CODE   =  #{S_COMP_CODE}
					AND     C.DIV_CODE   = #{DIV_CODE}
				    AND   C.SO_NUM   = @sORDER_NUM
		            AND   C.SO_SEQ   =  @sSER_NO
			       
		        ) Z 				
			    LEFT  JOIN (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS num_row, *
				  FROM fnBOMExplosion4( #{S_COMP_CODE}, #{DIV_CODE}, @sPROD_ITEM_CODE, 1, CONVERT(NVARCHAR, GETDATE(), 112), #{S_USER_ID}, '')) Z6 ON Z6.COMP_CODE   = Z.COMP_CODE
																																	         AND Z6.ITEM_CODE   = Z.ITEM_CODE
			ORDER BY Z6.num_row
			-------------
			          
		    -- 처리로직 End

		    FETCH NEXT FROM Cur1 INTO @sCOMP_CODE, @sDIV_CODE, @sORDER_NUM, @sSER_NO, @sSALE_CUSTOM_CODE, @sORDER_Q, @sORDER_DATE, @sINSERT_DATE, @sDVRY_DATE, @sPROD_ITEM_CODE,@sDVRY_CUST_NM,@sOUT_DIV_CODE
		    END

		    -- 열린 커서 닫음
		    CLOSE Cur1
		    DEALLOCATE Cur1

			SELECT A.COMP_CODE
		         , A.DIV_CODE
		         , A.SO_NUM									   AS ORDER_NUM			-- 수주번호
		         , A.SO_SEQ									   AS SER_NO				-- 순번
		         , A.SALE_CUSTOM_CODE   
		         , E.CUSTOM_NAME                               AS SALE_CUSTOM_NAME  -- 발주처
		         , ISNULL(B3.ITEM_MODEL, '')                   AS MODEL_COL
		         , A.S_ORDER_DATE							
		         , A.DVRY_DATE
				 , A.DVRY_CUST_NM
		         , ''										   AS LEVEL_COL
		         , C.CODE_NAME                                 AS ITEM_ACCOUNT
		         , A.ITEM_CODE									
		         , B1.ITEM_NAME									-- 품명
		         , B1.SPEC										-- 규격
		         
		         , R1.CODE_NAME								   AS   PROC_NAME  --가공
		         , ''										   AS T_IDX
		   -- 추가사항
				   , A.TYPE
				   , A.ORDER_NUM  AS M_ORDER_NUM
				   , A.ORDER_SEQ	AS M_ORDER_SEQ
				   , A.PROG_WORK_CODE
				   , A.CUSTOM_CODE						
				   , A.CLASSFICATION							-- 가공업체
				   , A.ORDER_Q									-- 발주량
				   , A.ORDER_DATE								-- 발주일
				   , A.DUE_DATE									-- 납기일/생산완료예정일 (입력필드)

				  	, Z1.ITEM_CODE                                                            AS CITEM_CODE
					, Z2.ITEM_NAME                                                            AS CITEM_NAME
					, Z1.ORDER_DATE                                                           AS REQ_DATE     --출고일
					, uniLITE.fnFormat(Z1.COMP_CODE, Z1.OUTSTOCK_Q             , 'S_FSET_Q')  AS OUTSTOCK_Q   -- 출고량
				   , A.CONFM_YN									-- 접수확인
				   , A.DVRY_ESTI_DATE							-- 납품예정일
	               , A.INIT_DVRY_DATE 		-- 최초납기일
	               , A.REASON 				-- 계획현황
				   , A.REMARK
				   , A.STATUS 
				   , Z3.IN_DATE								-- 입고일
				   , Z3.INSTOCK_Q								-- 입고수량
				   , Z3.LOSS_Q								-- 로스수량
				   , ISNULL(A.ORDER_Q,0) -  ISNULL(Z3.INSTOCK_Q,0) - ISNULL(Z3.LOSS_Q,0) AS JAN_Q	-- 잔량
				   
				   ,A.M_ORDER_PRSN AS M_ORDER_PRSN
				   ,R2.CODE_NAME AS M_ORDER_PRSN_NAME
				   
				   
				   , G.INOUT_DATE	AS ISSUE_DATE
		           , ISNULL(G.INOUT_Q, 0)       AS ISSUE_Q
		     FROM @RTN_TBL A	
		       LEFT JOIN ( SELECT A.COMP_CODE, A.DIV_CODE, A.CUSTOM_CODE, A.ORDER_NUM, A.ORDER_SEQ, A.ITEM_CODE
		                        , MAX(B.INOUT_DATE)       AS ORDER_DATE
		                        , MAX(A.NEED_Q)         AS NEED_Q
		                        , MAX(A.ALLOC_Q)        AS ALLOC_Q
		                        , SUM(B.INOUT_Q)     AS OUTSTOCK_Q
		                     FROM MCL200T_SH A WITH(NOLOCK)
							      LEFT JOIN BTR100T B  WITH(NOLOCK) ON B.COMP_CODE =  #{S_COMP_CODE}
																   AND B.DIV_CODE = #{DIV_CODE}
																   AND B.INOUT_TYPE = '2'
																   AND B.ORDER_NUM = A.ORDER_NUM
																   AND B.ORDER_SEQ = A.ORDER_SEQ
																   AND B.ITEM_CODE = A.ITEM_CODE

		                    WHERE A.COMP_CODE =   #{S_COMP_CODE}
		                      AND A.DIV_CODE  = #{DIV_CODE}
		                    GROUP BY A.COMP_CODE, A.DIV_CODE, A.CUSTOM_CODE, A.ORDER_NUM, A.ORDER_SEQ, A.ITEM_CODE, A.PATH_CODE
		                    
		                 ) Z1                      ON Z1.COMP_CODE   = A.COMP_CODE
		                                          AND Z1.DIV_CODE    = A.DIV_CODE
		                                          AND Z1.CUSTOM_CODE = A.CUSTOM_CODE
		                                          AND Z1.ORDER_NUM   = A.ORDER_NUM
		                                          AND Z1.ORDER_SEQ   = A.ORDER_SEQ
		       LEFT  JOIN BPR100T  Z2 WITH(NOLOCK) ON Z2.COMP_CODE   = Z1.COMP_CODE
		                                          AND Z2.ITEM_CODE   = Z1.ITEM_CODE
		       LEFT JOIN ( SELECT COMP_CODE, DIV_CODE, INOUT_CODE, ORDER_NUM, ORDER_SEQ
		                        , MAX(INOUT_DATE)       AS IN_DATE
		                        , SUM(INOUT_Q)         AS INSTOCK_Q
		                        , SUM(LOSS_Q)        AS LOSS_Q
		                        
		                     FROM BTR100T WITH(NOLOCK)
		                    WHERE COMP_CODE =   #{S_COMP_CODE}
		                      AND DIV_CODE  = #{DIV_CODE}
							  AND INOUT_TYPE = '1'
		                    GROUP BY COMP_CODE, DIV_CODE, INOUT_CODE, ORDER_NUM, ORDER_SEQ, ITEM_CODE, PATH_CODE
		                 ) Z3                      ON Z3.COMP_CODE   = A.COMP_CODE
		                                          AND Z3.DIV_CODE    = A.DIV_CODE
		                                          AND Z3.INOUT_CODE  = A.CUSTOM_CODE
		                                          AND Z3.ORDER_NUM   = A.ORDER_NUM
		                                          AND Z3.ORDER_SEQ   = A.ORDER_SEQ
		     INNER JOIN BPR100T B1 ON B1.COMP_CODE = A.COMP_CODE
		                          AND B1.ITEM_CODE = A.ITEM_CODE
		     INNER JOIN BPR200T B2 ON B2.COMP_CODE = @sCOMP_CODE
		                          AND B2.DIV_CODE  = @sDIV_CODE
		                          AND B2.ITEM_CODE = B1.ITEM_CODE
		     LEFT JOIN BPR100T B3 ON B3.COMP_CODE = @sCOMP_CODE
		                          AND B3.ITEM_CODE = A.PROD_ITEM_CODE
		     LEFT JOIN BSA100T C  ON C.COMP_CODE  = B2.COMP_CODE
		                          AND C.MAIN_CODE  = 'B020'
		                          AND C.SUB_CODE   = B2.ITEM_ACCOUNT
								  AND C.REF_CODE3  != '40'    -- 원료는 제외
		     LEFT JOIN (
		                SELECT COMP_CODE, ITEM_CODE, AVG(ORDER_P) AS ORDER_P
		                  FROM MPO200T WITH(NOLOCK)
		                 WHERE COMP_CODE = @sCOMP_CODE
		                 GROUP BY COMP_CODE, ITEM_CODE
		                ) D ON D.COMP_CODE = A.COMP_CODE
		                   AND D.ITEM_CODE = A.ITEM_CODE
		     LEFT JOIN BCM100T E   ON E.COMP_CODE   = A.COMP_CODE
		                          AND E.CUSTOM_CODE = A.SALE_CUSTOM_CODE
		     LEFT JOIN BCM100T F   ON F.COMP_CODE   = B2.COMP_CODE
		                          AND F.CUSTOM_CODE = B2.CUSTOM_CODE
			 
			 LEFT JOIN BSA100T R1 ON R1.COMP_CODE = A.COMP_CODE
			 				     AND R1.MAIN_CODE = 'Z040'
			 				     AND R1.SUB_CODE = SUBSTRING(A.ITEM_CODE,(CHARINDEX('-', A.ITEM_CODE)+3),1)
			 				     
			LEFT JOIN BSA100T R2 ON R2.COMP_CODE = A.COMP_CODE
								AND R2.MAIN_CODE = 'M201'			
								AND R2.SUB_CODE = A.M_ORDER_PRSN 	
								
			LEFT  JOIN  (
                SELECT  comp_code
                      , div_code
                      , order_num
                      , order_seq
                      , item_code
					  , MAX(INOUT_DATE)	AS INOUT_DATE
                      , ISNULL(SUM(inout_q), 0.0) AS inout_q
                FROM    BTR100T WITH (NOLOCK)
                WHERE   inout_type  = '2'
                  AND   comp_code   = #{S_COMP_CODE}
                  AND   create_loc  = '1'
                GROUP BY comp_code, div_code, order_num, order_seq, item_code
                ) G ON  G.div_code  = A.OUT_DIV_CODE  
                   AND  G.order_num = A.SO_NUM
                   AND  G.order_seq = A.SO_SEQ
                   AND  G.comp_code = A.comp_code
                   AND  G.item_code = A.item_code					
								
									    
			WHERE 1=1
		      <if test="@foren.Ognl@isNotEmpty(M_ORDER_PRSN)">
		      AND A.M_ORDER_PRSN = #{M_ORDER_PRSN}	
		      </if>

			  <if test="RDO_SELECT2 != &quot;1&quot;"> 
		      AND ISNULL(A.LEVEL,0) = 0
			  </if>
			        
		       <if test="@foren.Ognl@isNotEmpty(M_DVRY_DATE_FR)">
		       AND A.DUE_DATE   &gt;= #{M_DVRY_DATE_FR}				/* 발주(작지enddate포함)납기일(FR) */
		       </if>
		       <if test="@foren.Ognl@isNotEmpty(M_DVRY_DATE_TO)">
		       AND A.DUE_DATE   &lt;= #{M_DVRY_DATE_TO}				/* 발주(작지enddate포함)납기일(TO) */
		       </if>
			  
			  
		       <if test="@foren.Ognl@isNotEmpty(M_CUSTOM_CODE)">
			  AND A.CUSTOM_CODE = #{M_CUSTOM_CODE}
			  </if>
		       <if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
			  AND A.CUSTOM_CODE = #{WORK_SHOP_CODE}
		       </if>
		       
		       <if test="@foren.Ognl@isNotEmpty(MODEL_COL)">
		      AND ISNULL(B3.ITEM_MODEL, '') LIKE '%' + #{MODEL_COL} + '%'
		       </if>
		    ORDER BY A.SO_NUM, A.SO_SEQ, A.LEVEL
		    SET NOCOUNT OFF
		END 
		
    </select>

    <update id="mpo310ukrvService.updateMaster" parameterType="Map">
    	
	  <if test="TYPE == &quot;1&quot;"> 
	  UPDATE PMP100T
           SET REMARK = #{REMARK}
            ,Progrs_Kind_Cd = #{REASON}
			,UPDATE_DB_USER = #{S_USER_ID}
			,UPDATE_DB_TIME = GETDATE()

        WHERE COMP_CODE = #{S_COMP_CODE}
          AND DIV_CODE = #{DIV_CODE}
          AND WKORD_NUM = #{M_ORDER_NUM}
          AND PROG_WORK_CODE = #{PROG_WORK_CODE} 
	  </if>
	  <if test="TYPE == &quot;2&quot;"> 
        UPDATE MPO200T
           SET DVRY_DATE = #{DUE_DATE}
			,REMARK = #{REMARK}
			,REASON = #{REASON}
			,UPDATE_DB_USER = #{S_USER_ID}
			,UPDATE_DB_TIME = GETDATE()

        WHERE COMP_CODE = #{S_COMP_CODE}
          AND DIV_CODE = #{DIV_CODE}
          AND ORDER_NUM = #{M_ORDER_NUM}
          AND ORDER_SEQ = #{M_ORDER_SEQ}
	  </if>
    </update>

    <insert id="mpo310ukrvService.insertMaster" parameterType="Map">
	
    </insert>


    <delete id="mpo310ukrvService.deleteMaster" parameterType="Map">
      
    </delete>
	
	

</mapper>