<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biz300skrvServiceImpl">
	<select id="biz300skrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* biz300skrv.Cbiz300skrv[fnQms100q]Query01    */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON
		        
		    DECLARE @CompCode       NVARCHAR(08)    /* 법인코드        */
		          , @UserId         NVARCHAR(100)   /* 사용자ID        */
		          , @LangType       NVARCHAR(2)     /* 언어구분        */
		          , @RefItem        NVARCHAR(01)
		          , @DateFormat     NVARCHAR(10)
		          , @Type           NVARCHAR(02)
		        
		    SET @CompCode = #{S_COMP_CODE}
		    SET @UserId   = #{S_USER_ID}
		    SET @LangType = #{S_LANG_CODE}
		    SET @Type     = #{TYPE}
		            
		    SELECT @RefItem = ISNULL(REF_ITEM, '1')
		      FROM BSA300T
		     WHERE USER_ID   = #{S_USER_ID}
		       AND COMP_CODE = #{S_COMP_CODE}
		            
		    IF(@Type='1')
		        BEGIN
		            /* 현재고 현황 조회(품목별) */
		            SELECT ISNULL(ACCOUNT1    , ' ')    AS ITEM_ACCOUNTCODE
		                 , ISNULL(ITEM_ACCOUNT, ' ')    AS ITEM_ACCOUNTNAME
		                 , ISNULL(DIV_CODE    , ' ')    AS DIV_CODE 
		                 , ISNULL(ITEM_CODE   , ' ')    AS ITEM_CODE 
		                 , uniLITE.fnItemNameComp(N'MASTER', N'UNILITE5', ITEM_CODE)   AS ITEM_NAME
		                 , isnull(SPEC        , ' ')    AS SPEC
		                 , ISNULL(STOCK_UNIT  , ' ')    AS STOCK_UNIT 
		                 , ISNULL(STOCK_Q      , 0)     AS STOCK_Q
		                 , ISNULL(GOOD_STOCK_Q  , 0)    AS GOOD_STOCK_Q
		                 , ISNULL(BAD_STOCK_Q   , 0)    AS BAD_STOCK_Q
		                 , ISNULL(STOCK_I      , 0)     AS STOCK_I
		                 , ISNULL(GOOD_STOCK_I  , 0)    AS GOOD_STOCK_I
		                 , ISNULL(BAD_STOCK_I   , 0)    AS BAD_STOCK_I
		                 , SEQ
		              FROM (SELECT '1' AS SEQ
		                         , (SELECT CODE_NAME
		                              FROM BSA100T
		                             WHERE COMP_CODE = K.COMP_CODE
		                               AND MAIN_CODE = 'B020'
		                               AND SUB_CODE  = K.ITEM_ACCOUNT) AS ITEM_ACCOUNT
		                         , K.ITEM_ACCOUNT AS ACCOUNT1
		                         , K.DIV_CODE
		                         , K.ITEM_CODE
		                         , K.ITEM_NAME
		                         , K.SPEC
		                         , K.STOCK_UNIT
		                         , SUM(K.STOCK_Q)      AS STOCK_Q
		                         , SUM(K.GOOD_STOCK_Q) AS GOOD_STOCK_Q
		                         , SUM(K.BAD_STOCK_Q)  AS BAD_STOCK_Q
		                         , SUM(K.STOCK_I)      AS STOCK_I
		                         , SUM(K.GOOD_STOCK_I) AS GOOD_STOCK_I
		                         , SUM(K.BAD_STOCK_I)  AS BAD_STOCK_I
		                      FROM (SELECT C.ITEM_ACCOUNT
		                                 , A.COMP_CODE
		                                 , A.DIV_CODE
		                                 , A.ITEM_CODE
		                                 , B.ITEM_NAME
		                                 , B.SPEC
		                                 , B.STOCK_UNIT        AS STOCK_UNIT
		                                 , SUM(A.STOCK_Q)      AS STOCK_Q
		                                 , SUM(A.GOOD_STOCK_Q) AS GOOD_STOCK_Q
		                                 , SUM(A.BAD_STOCK_Q)  AS BAD_STOCK_Q
		                                 , SUM(CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) * (A.STOCK_Q) 
		                                            ELSE (A.STOCK_I)
		                                       END) AS STOCK_I
		                                 , SUM(CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) * (A.GOOD_STOCK_Q) 
		                                            ELSE (A.STOCK_I) - ((A.AVERAGE_P) * (A.BAD_STOCK_Q))
		                                       END) AS GOOD_STOCK_I
		                                 , SUM((CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) 
		                                             ELSE (AVERAGE_P)
		                                       END) * (A.BAD_STOCK_Q )) AS BAD_STOCK_I
		                              FROM       BIZ100T A WITH (NOLOCK)
		                              INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE AND A.ITEM_CODE = B.ITEM_CODE
		                              INNER JOIN BPR200T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE AND A.DIV_CODE  = C.DIV_CODE   AND A.ITEM_CODE = C.ITEM_CODE
		                             WHERE A.COMP_CODE       = #{S_COMP_CODE}
		                               <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
		                               AND C.ITEM_ACCOUNT LIKE '%'+#{ITEM_ACCOUNT}+'%' 
		                               </if>
		                               AND A.DIV_CODE        = #{DIV_CODE}
		                               <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		                               AND A.CUSTOM_CODE  LIKE '%'+#{CUSTOM_CODE}+'%' 
		                               </if>
		                               <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
		                               AND A.ITEM_CODE    LIKE '%'+#{ITEM_CODE}+'%'    
		                               </if>
		                       <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
		                           <choose>
		                               <when test="S_REF_ITEM == '0'.toString()">AND B.ITEM_NAME    LIKE #{ITEM_NAME}+'%' </when>
		                               <when test="S_REF_ITEM == '1'.toString()">AND B.ITEM_NAME1   LIKE #{ITEM_NAME}+'%' </when>
		                               <otherwise>AND B.ITEM_NAME2   LIKE '%'+#{ITEM_NAME}+'%'     </otherwise>
		                           </choose>                    
		                       </if>
		                             GROUP BY A.COMP_CODE, A.DIV_CODE,  C.ITEM_ACCOUNT, A.ITEM_CODE, B.ITEM_NAME
		                                     , B.SPEC     , B.STOCK_UNIT
		                             HAVING SUM(A.STOCK_Q) &lt;&gt; 0) K
		                     GROUP BY K.COMP_CODE, K.DIV_CODE,  K.ITEM_ACCOUNT, K.ITEM_CODE, K.ITEM_NAME
		                            , K.SPEC     , K.STOCK_UNIT
		                    
		                ) M
		            ORDER BY ACCOUNT1, DIV_CODE, ITEM_CODE, SEQ   
		        END
		    ELSE
		        BEGIN
		            /* 현재고 현황 조회(외주처별) */
		            SELECT ISNULL(CUSTOM_CODE, ' ')                                                      AS CUSTOM_CODE
		                 , uniLITE.fnCustNameComp(N'MASTER', N'UNILITE5', CUSTOM_CODE) AS CUSTOM_NAME
		                 , ISNULL(ITEM_CODE, ' ')                                                        AS ITEM_CODE
		                 , uniLITE.fnItemNameComp(N'MASTER', N'UNILITE5', ITEM_CODE)   AS ITEM_NAME
		                 , ISNULL(SPEC      , ' ')      AS SPEC
		                 , ISNULL(STOCK_UNIT, ' ')      AS STOCK_UNIT
		                 , (STOCK_Q)      AS STOCK_Q
		                 , (GOOD_STOCK_Q) AS GOOD_STOCK_Q
		                 , (BAD_STOCK_Q)  AS BAD_STOCK_Q
		                 , (STOCK_I)      AS STOCK_I
		                 , (GOOD_STOCK_I) AS GOOD_STOCK_I
		                 , (BAD_STOCK_I)  AS BAD_STOCK_I
		                 , ISNULL(DIV_CODE  , ' ')      AS DIV_CODE
		                 , SEQ
		              FROM (SELECT '1' SEQ
		                         , (SELECT CUSTOM_NAME 
		                             FROM BCM100T BCM 
		                             WHERE BCM.COMP_CODE   = A.COMP_CODE
		                             AND BCM.CUSTOM_CODE = A.CUSTOM_CODE) AS CUSTOM_NAME
		                         , A.CUSTOM_CODE
		                         , A.DIV_CODE
		                         , A.ITEM_CODE
		                         , B.ITEM_NAME
		                         , B.SPEC
		                         , B.STOCK_UNIT
		                         , SUM(A.STOCK_Q)      AS STOCK_Q
		                         , SUM(A.GOOD_STOCK_Q) AS GOOD_STOCK_Q
		                         , SUM(A.BAD_STOCK_Q)  As BAD_STOCK_Q
		                         , SUM(CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) * (A.STOCK_Q) 
		                                    ELSE (A.STOCK_I)
		                               END) AS STOCK_I
		                         , SUM(CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) * (A.GOOD_STOCK_Q) 
		                                    ELSE (A.STOCK_I) - ((A.AVERAGE_P) * (A.BAD_STOCK_Q))
		                               END) AS GOOD_STOCK_I
		                         , SUM((CASE WHEN LEFT(C.ITEM_ACCOUNT,1) IN ('1','2') THEN (C.BASIS_P) 
		                                     ELSE (AVERAGE_P)
		                               END) * (A.BAD_STOCK_Q )) AS BAD_STOCK_I
		                     FROM BIZ100T A WITH (NOLOCK)
		                     INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE AND A.ITEM_CODE = B.ITEM_CODE
		                     INNER JOIN BPR200T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE AND A.DIV_CODE  = C.DIV_CODE AND A.ITEM_CODE = C.ITEM_CODE
		                    WHERE A.COMP_CODE       = #{S_COMP_CODE}
		                      AND C.ITEM_ACCOUNT LIKE '%'+#{ITEM_ACCOUNT}+'%'
		                      AND A.DIV_CODE        = #{DIV_CODE}
		                      AND A.CUSTOM_CODE  LIKE '%'+#{CUSTOM_CODE}+'%'
		                      AND A.ITEM_CODE    LIKE '%'+#{ITEM_CODE}+'%'
		              <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
		                  <choose>
		                      <when test="S_REF_ITEM == '0'.toString()">AND B.ITEM_NAME    LIKE '%'+#{ITEM_NAME}+'%' </when>
		                      <when test="S_REF_ITEM == '1'.toString()">AND B.ITEM_NAME1   LIKE '%'+#{ITEM_NAME}+'%' </when>
		                      <otherwise>AND B.ITEM_NAME2   LIKE '%'+#{ITEM_NAME}+'%'     </otherwise>
		                  </choose>                    
		              </if>
		                     GROUP BY A.CUSTOM_CODE, C.ITEM_ACCOUNT, A.COMP_CODE, A.DIV_CODE, A.ITEM_CODE
		                             , B.ITEM_NAME  , B.SPEC        , B.STOCK_UNIT
		                     HAVING SUM(A.STOCK_Q) &lt;&gt; 0
		                     
		                 ) M
		            ORDER BY CUSTOM_CODE, DIV_CODE, ITEM_CODE, ITEM_NAME, SEQ
		        END
		
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
</mapper>