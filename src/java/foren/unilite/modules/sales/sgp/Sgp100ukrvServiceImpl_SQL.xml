<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sgp100ukrvService">

    <select id="sgp100ukrvService.gsType" parameterType="Map" resultType="rMap">
    /* bsa100ukrvService.selectDetailCodeList */
            SELECT SUB_CODE
                 , REF_CODE1 
              FROM BSA100T WITH (NOLOCK)
             WHERE COMP_CODE     = #{S_COMP_CODE}
               AND SUB_CODE     != N'$'
               AND MAIN_CODE     = 'S022' 
             order by SORT_SEQ, SUB_CODE 
    </select>	
	
	<select id="sgp100ukrvService.customSelectList" parameterType="Map" resultType="rMap">
		/* gp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 */ 
		SELECT    A.DIV_CODE 
		     , A.PLAN_YEAR
		     , A.PLAN_TYPE1
		     , A.PLAN_TYPE2
		     , A.PLAN_TYPE2_CODE
		     , A.LEVEL_KIND
		     , A.MONEY_UNIT
		     , A.ENT_MONEY_UNIT
		     , A.CONFIRM_YN
		     , B.CUSTOM_CODE AS CUSTOM_CODE
		     , uniLITE.fnCustNameComp(B.COMP_CODE, N'UNILITE5', B.CUSTOM_CODE) AS CUSTOM_NAME    
		     , (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12) AS PLAN_SUM 
		     , (A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) AS MOD_PLAN_SUM 
		        
		,CASE ISNULL(A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ((A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) - (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12)) * 100 / ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0)
		                END  
		 END  AS A_D_RATE_SUM, 
		        A.PLAN_AMT1 AS PLAN1,
		        A.MOD_PLAN_AMT1 AS MOD_PLAN1,
		        
		CASE ISNULL(A.MOD_PLAN_AMT1, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT1, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT1 - A.PLAN_AMT1 ) * 100 / A.PLAN_AMT1
		                END  
		 END  AS A_D_RATE1, 
		        A.PLAN_AMT2 AS PLAN2,
		        A.MOD_PLAN_AMT2 AS MOD_PLAN2,
		        
		CASE ISNULL(A.MOD_PLAN_AMT2, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT2, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT2 - A.PLAN_AMT2 ) * 100 / A.PLAN_AMT2
		                END  
		 END  AS A_D_RATE2,
		        A.PLAN_AMT3 AS PLAN3,
		        A.MOD_PLAN_AMT3 AS MOD_PLAN3,
		        
		CASE ISNULL(A.MOD_PLAN_AMT3, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT3, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT3 - A.PLAN_AMT3 ) * 100 / A.PLAN_AMT3
		                END  
		 END  AS A_D_RATE3,
		        A.PLAN_AMT4 AS PLAN4,
		        A.MOD_PLAN_AMT4 AS MOD_PLAN4,
		        
		CASE ISNULL(A.MOD_PLAN_AMT4, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT4, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT4 - A.PLAN_AMT4 ) * 100 / A.PLAN_AMT4
		                END  
		 END  AS A_D_RATE4,
		        A.PLAN_AMT5 AS PLAN5,
		        A.MOD_PLAN_AMT5 AS MOD_PLAN5,
		        
		CASE ISNULL(A.MOD_PLAN_AMT5, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT5, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT5 - A.PLAN_AMT5 ) * 100 / A.PLAN_AMT5
		                END  
		 END  AS A_D_RATE5,
		        A.PLAN_AMT6 AS PLAN6,
		        A.MOD_PLAN_AMT6 AS MOD_PLAN6,
		        
		CASE ISNULL(A.MOD_PLAN_AMT6, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT6, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT6 - A.PLAN_AMT6 ) * 100 / A.PLAN_AMT6
		                END  
		 END  AS A_D_RATE6,
		        A.PLAN_AMT7 AS PLAN7,
		        A.MOD_PLAN_AMT7 AS MOD_PLAN7,
		        
		CASE ISNULL(A.MOD_PLAN_AMT7, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT7, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT7 - A.PLAN_AMT7 ) * 100 / A.PLAN_AMT7
		                END  
		 END  AS A_D_RATE7,
		        A.PLAN_AMT8 AS PLAN8,
		        A.MOD_PLAN_AMT8 AS MOD_PLAN8,
		        
		CASE ISNULL(A.MOD_PLAN_AMT8, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT8, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT8 - A.PLAN_AMT8 ) * 100 / A.PLAN_AMT8
		                END  
		 END  AS A_D_RATE8,
		        A.PLAN_AMT9 AS PLAN9,
		        A.MOD_PLAN_AMT9 AS MOD_PLAN9,
		        
		CASE ISNULL(A.MOD_PLAN_AMT9, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT9, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT9 - A.PLAN_AMT9 ) * 100 / A.PLAN_AMT9
		                END  
		 END  AS A_D_RATE9,
		        A.PLAN_AMT10 AS PLAN10,
		        A.MOD_PLAN_AMT10 AS MOD_PLAN10,
		        
		CASE ISNULL(A.MOD_PLAN_AMT10, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT10, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT10 - A.PLAN_AMT10 ) * 100 / A.PLAN_AMT10
		                END  
		 END  AS A_D_RATE10,
		        A.PLAN_AMT11 AS PLAN11,
		        A.MOD_PLAN_AMT11 AS MOD_PLAN11,
		        
		CASE ISNULL(A.MOD_PLAN_AMT11, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT11, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT11 - A.PLAN_AMT11 ) * 100 / A.PLAN_AMT11
		                END  
		 END  AS A_D_RATE11,
		        A.PLAN_AMT12 AS PLAN12,
		        A.MOD_PLAN_AMT12 AS MOD_PLAN12,
		        
		CASE ISNULL(A.MOD_PLAN_AMT12, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT12, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT12 - A.PLAN_AMT12 ) * 100 / A.PLAN_AMT12
		                END  
		 END  AS A_D_RATE12,
		                A.UPDATE_DB_USER,
		                A.UPDATE_DB_TIME,
		                A.COMP_CODE
		  FROM SSP100T A WITH (NOLOCK)
		               LEFT OUTER JOIN BCM100T B WITH (NOLOCK)
		                            ON A.COMP_CODE = B.COMP_CODE
		                           AND A.PLAN_TYPE2_CODE = B.CUSTOM_CODE 
		                           AND B.USE_YN = 'Y' 
		                           AND B.CUSTOM_TYPE IN ('1','3')
		                           
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.PLAN_TYPE2 = '2'
		   AND B.AGENT_TYPE = #{AGENT_TYPE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.PLAN_YEAR  = #{PLAN_YEAR}
		   AND A.PLAN_TYPE1 = #{ORDER_TYPE}
		   AND A.MONEY_UNIT = #{MONEY_UNIT}
		 ORDER BY CUSTOM_CODE
	</select>
	
	<insert id="sgp100ukrvService.insertExcelSgp100ukrv1" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG
	    , CUSTOM_CODE
	    , CUSTOM_NAME  
	    , S_CODE
	    , S_NAME 
     	, S_CODE1
	    , S_CODE2
	    , S_CODE3 
	    , PLAN1
	    , PLAN2
	    , PLAN3
	    , PLAN4
	    , PLAN5
	    , PLAN6
	    , PLAN7
	    , PLAN8
	    , PLAN9
	    , PLAN10
	    , PLAN11
	    , PLAN12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , #{CUSTOM_CODE}
	    , #{CUSTOM_NAME} 
	    , ''
	    , ''  
	 	, ''
	    , ''
	    , ''
	    , #{PLAN1}
	    , #{PLAN2}
	    , #{PLAN3}
	    , #{PLAN4}
	    , #{PLAN5}
	    , #{PLAN6}
	    , #{PLAN7}
	    , #{PLAN8}
	    , #{PLAN9}
	    , #{PLAN10}
	    , #{PLAN11}
	    , #{PLAN12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
    
	<update id="excelValidate1" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 거래처입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END),
            A.CUSTOM_NAME  = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN ''
                                  ELSE B.CUSTOM_NAME
                                  END)
                                 
    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
         LEFT JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE    = #{S_COMP_CODE}
								          AND B.CUSTOM_CODE = A.CUSTOM_CODE								         
                                          AND B.USE_YN      = 'Y' 
                                          AND B.CUSTOM_TYPE IN ('1','3')								         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = #{ORDER_TYPE}
										AND B.PLAN_TYPE2 = '2'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = A.CUSTOM_CODE


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG	

	    , A.CUSTOM_CODE
	    , A.CUSTOM_NAME
        , ( ISNULL(A.PLAN1, 0) + ISNULL(A.PLAN2, 0) + ISNULL(A.PLAN3, 0) + ISNULL(A.PLAN4, 0) + ISNULL(A.PLAN5, 0) + ISNULL(A.PLAN6, 0) 
          + ISNULL(A.PLAN7, 0) + ISNULL(A.PLAN8, 0) + ISNULL(A.PLAN9, 0) + ISNULL(A.PLAN10, 0) + ISNULL(A.PLAN11, 0) + ISNULL(A.PLAN12, 0)) AS PLAN_SUM  
	    , A.PLAN1
	    , A.PLAN2
	    , A.PLAN3
	    , A.PLAN4
	    , A.PLAN5
	    , A.PLAN6
	    , A.PLAN7
	    , A.PLAN8
	    , A.PLAN9
	    , A.PLAN10
	    , A.PLAN11
	    , A.PLAN12	
	    
	      FROM SGP100UKRV_EXCEL A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select> 
		
	
	<update id="sgp100ukrvService.insertDetail" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}
					   )

		BEGIN  			
		
	        INSERT INTO SSP100T
	             ( DIV_CODE
	             , PLAN_YEAR
	             , PLAN_TYPE1
	             , PLAN_TYPE2
	             , PLAN_TYPE2_CODE
	             , LEVEL_KIND
	             , MONEY_UNIT
	             , ENT_MONEY_UNIT
	             , CONFIRM_YN
	             , PLAN_AMT1
	             , MOD_PLAN_AMT1
	             , PLAN_AMT2
	             , MOD_PLAN_AMT2
	             , PLAN_AMT3
	             , MOD_PLAN_AMT3
	             , PLAN_AMT4
	             , MOD_PLAN_AMT4
	             , PLAN_AMT5
	             , MOD_PLAN_AMT5
	             , PLAN_AMT6
	             , MOD_PLAN_AMT6
	             , PLAN_AMT7
	             , MOD_PLAN_AMT7
	             , PLAN_AMT8
	             , MOD_PLAN_AMT8
	             , PLAN_AMT9
	             , MOD_PLAN_AMT9
	             , PLAN_AMT10
	             , MOD_PLAN_AMT10
	             , PLAN_AMT11
	             , MOD_PLAN_AMT11
	             , PLAN_AMT12
	             , MOD_PLAN_AMT12
	             , UPDATE_DB_USER
	             , UPDATE_DB_TIME
	             , COMP_CODE
	             ) 
	        VALUES
	             ( #{DIV_CODE}           
	             , #{PLAN_YEAR}          
	             , #{PLAN_TYPE1}         
	             , #{PLAN_TYPE2}         
	             , #{PLAN_TYPE2_CODE}    
	             , #{LEVEL_KIND}         
	             , #{MONEY_UNIT}         
	             , #{ENT_MONEY_UNIT}     
	             , #{CONFIRM_YN}         
	             , #{PLAN1}          
	             , #{MOD_PLAN1}     
	             , #{PLAN2}     
	             , #{MOD_PLAN2}     
	             , #{PLAN3}    
	             , #{MOD_PLAN3}    
	             , #{PLAN4}     
	             , #{MOD_PLAN4}     
	             , #{PLAN5}    
	             , #{MOD_PLAN5}   
	             , #{PLAN6}    
	             , #{MOD_PLAN6}
	             , #{PLAN7}    
	             , #{MOD_PLAN7}
	             , #{PLAN8}    
	             , #{MOD_PLAN8}
	             , #{PLAN9}    
	             , #{MOD_PLAN9}
	             , #{PLAN10}    
	             , #{MOD_PLAN10}
	             , #{PLAN11}     
	             , #{MOD_PLAN11} 
	             , #{PLAN12}     
	             , #{MOD_PLAN12} 
	             , #{S_USER_ID}     
	             , GETDATE()   
	             , #{S_COMP_CODE}          
	             )
		END             
	ELSE
		BEGIN 
		    UPDATE SSP100T
	           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
	             , CONFIRM_YN      = #{CONFIRM_YN}    
	             , PLAN_AMT1       = #{PLAN1}     
	             , MOD_PLAN_AMT1   = #{MOD_PLAN1} 
	             , PLAN_AMT2       = #{PLAN2}     
	             , MOD_PLAN_AMT2   = #{MOD_PLAN2} 
	             , PLAN_AMT3       = #{PLAN3}     
	             , MOD_PLAN_AMT3   = #{MOD_PLAN3} 
	             , PLAN_AMT4       = #{PLAN4}     
	             , MOD_PLAN_AMT4   = #{MOD_PLAN4} 
	             , PLAN_AMT5       = #{PLAN5}     
	             , MOD_PLAN_AMT5   = #{MOD_PLAN5} 
	             , PLAN_AMT6       = #{PLAN6}     
	             , MOD_PLAN_AMT6   = #{MOD_PLAN6}
	             , PLAN_AMT7       = #{PLAN7}     
	             , MOD_PLAN_AMT7   = #{MOD_PLAN7} 
	             , PLAN_AMT8       = #{PLAN8}     
	             , MOD_PLAN_AMT8   = #{MOD_PLAN8} 
	             , PLAN_AMT9       = #{PLAN9}     
	             , MOD_PLAN_AMT9   = #{MOD_PLAN9} 
	             , PLAN_AMT10      = #{PLAN10}    
	             , MOD_PLAN_AMT10  = #{MOD_PLAN10}
	             , PLAN_AMT11      = #{PLAN11}    
	             , MOD_PLAN_AMT11  = #{MOD_PLAN11}
	             , PLAN_AMT12      = #{PLAN12}    
	             , MOD_PLAN_AMT12  = #{MOD_PLAN12}
	             , UPDATE_DB_USER  = #{S_USER_ID}
	             , UPDATE_DB_TIME  = GETDATE()                
		                                                        
	         WHERE DIV_CODE        = #{DIV_CODE}       
	           AND PLAN_YEAR       = #{PLAN_YEAR}      
	           AND PLAN_TYPE1      = #{PLAN_TYPE1}     
	           AND PLAN_TYPE2      = #{PLAN_TYPE2}     
	           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
	           AND LEVEL_KIND      = #{LEVEL_KIND}     
	           AND MONEY_UNIT      = #{MONEY_UNIT}     
	           AND COMP_CODE       = #{S_COMP_CODE} 
	    END	             
    </update>
    
    <update id="sgp100ukrvService.updateDetail" parameterType="Map">
        UPDATE SSP100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}    
             , PLAN_AMT1       = #{PLAN1}     
             , MOD_PLAN_AMT1   = #{MOD_PLAN1} 
             , PLAN_AMT2       = #{PLAN2}     
             , MOD_PLAN_AMT2   = #{MOD_PLAN2} 
             , PLAN_AMT3       = #{PLAN3}     
             , MOD_PLAN_AMT3   = #{MOD_PLAN3} 
             , PLAN_AMT4       = #{PLAN4}     
             , MOD_PLAN_AMT4   = #{MOD_PLAN4} 
             , PLAN_AMT5       = #{PLAN5}     
             , MOD_PLAN_AMT5   = #{MOD_PLAN5} 
             , PLAN_AMT6       = #{PLAN6}     
             , MOD_PLAN_AMT6   = #{MOD_PLAN6}
             , PLAN_AMT7       = #{PLAN7}     
             , MOD_PLAN_AMT7   = #{MOD_PLAN7} 
             , PLAN_AMT8       = #{PLAN8}     
             , MOD_PLAN_AMT8   = #{MOD_PLAN8} 
             , PLAN_AMT9       = #{PLAN9}     
             , MOD_PLAN_AMT9   = #{MOD_PLAN9} 
             , PLAN_AMT10      = #{PLAN10}    
             , MOD_PLAN_AMT10  = #{MOD_PLAN10}
             , PLAN_AMT11      = #{PLAN11}    
             , MOD_PLAN_AMT11  = #{MOD_PLAN11}
             , PLAN_AMT12      = #{PLAN12}    
             , MOD_PLAN_AMT12  = #{MOD_PLAN12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}       
           AND PLAN_YEAR       = #{PLAN_YEAR}      
           AND PLAN_TYPE1      = #{PLAN_TYPE1}     
           AND PLAN_TYPE2      = #{PLAN_TYPE2}     
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}     
           AND MONEY_UNIT      = #{MONEY_UNIT}     
           AND COMP_CODE       = #{S_COMP_CODE} 
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail" parameterType="Map">
        DELETE FROM SSP100T 
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
    </delete>   
    
     	
	<insert id="sgp100ukrvService.insertExcelSgp100ukrv2" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG
	    , CUSTOM_CODE
	    , CUSTOM_NAME  
	    , S_CODE
	    , S_NAME 
     	, S_CODE1
	    , S_CODE2
	    , S_CODE3 
	    , PLAN1
	    , PLAN2
	    , PLAN3
	    , PLAN4
	    , PLAN5
	    , PLAN6
	    , PLAN7
	    , PLAN8
	    , PLAN9
	    , PLAN10
	    , PLAN11
	    , PLAN12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , ''
	    , ''
	    , #{S_CODE}
	    , ''  
	 	, ''
	    , ''
	    , ''
	    , #{PLAN1}
	    , #{PLAN2}
	    , #{PLAN3}
	    , #{PLAN4}
	    , #{PLAN5}
	    , #{PLAN6}
	    , #{PLAN7}
	    , #{PLAN8}
	    , #{PLAN9}
	    , #{PLAN10}
	    , #{PLAN11}
	    , #{PLAN12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
    
	<update id="excelValidate2" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.SUB_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.SUB_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 영업담당입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END)
                                 
    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
         LEFT JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE  = #{S_COMP_CODE}
								          AND B.MAIN_CODE = 'S010'	
								          AND B.REF_CODE1 = #{DIV_CODE}							         
                                          AND B.USE_YN    = 'Y' 
                                          AND B.SUB_CODE  = A.S_CODE							         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = #{ORDER_TYPE}
										AND B.PLAN_TYPE2 = '1'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = A.S_CODE


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet2" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG	

	    , A.S_CODE
        , ( ISNULL(A.PLAN1, 0) + ISNULL(A.PLAN2, 0) + ISNULL(A.PLAN3, 0) + ISNULL(A.PLAN4, 0) + ISNULL(A.PLAN5, 0) + ISNULL(A.PLAN6, 0) 
          + ISNULL(A.PLAN7, 0) + ISNULL(A.PLAN8, 0) + ISNULL(A.PLAN9, 0) + ISNULL(A.PLAN10, 0) + ISNULL(A.PLAN11, 0) + ISNULL(A.PLAN12, 0)) AS PLAN_SUM  
	    , A.PLAN1
	    , A.PLAN2
	    , A.PLAN3
	    , A.PLAN4
	    , A.PLAN5
	    , A.PLAN6
	    , A.PLAN7
	    , A.PLAN8
	    , A.PLAN9
	    , A.PLAN10
	    , A.PLAN11
	    , A.PLAN12	
	    
	      FROM SGP100UKRV_EXCEL A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select> 
	
	<select id="sgp100ukrvService.salePrsnSelectList" parameterType="Map" resultType="rMap">		
		/* sgp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 */ 
		SELECT A.DIV_CODE 
		     , A.PLAN_YEAR
		     , A.PLAN_TYPE1
		     , A.PLAN_TYPE2
		     , A.PLAN_TYPE2_CODE
		     , A.LEVEL_KIND
		     , A.MONEY_UNIT
		     , A.ENT_MONEY_UNIT
		     , A.CONFIRM_YN
		     , B.SUB_CODE AS S_CODE
		     , B.CODE_NAME AS S_NAME,     A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12 AS PLAN_SUM, 
		        A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12 AS MOD_PLAN_SUM, 
		        
		CASE ISNULL(A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ((A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) - (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12)) * 100 / ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0)
		                END  
		 END  AS A_D_RATE_SUM, 
		        A.PLAN_AMT1 AS PLAN1,
		        A.MOD_PLAN_AMT1 AS MOD_PLAN1,
		        
		CASE ISNULL(A.MOD_PLAN_AMT1, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT1, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT1 - A.PLAN_AMT1 ) * 100 / A.PLAN_AMT1
		                END  
		 END  AS A_D_RATE1,
		        A.PLAN_AMT2 AS PLAN2,
		        A.MOD_PLAN_AMT2 AS MOD_PLAN2,
		        
		CASE ISNULL(A.MOD_PLAN_AMT2, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT2, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT2 - A.PLAN_AMT2 ) * 100 / A.PLAN_AMT2
		                END  
		 END  AS A_D_RATE2,
		        A.PLAN_AMT3 AS PLAN3,
		        A.MOD_PLAN_AMT3 AS MOD_PLAN3,
		        
		CASE ISNULL(A.MOD_PLAN_AMT3, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT3, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT3 - A.PLAN_AMT3 ) * 100 / A.PLAN_AMT3
		                END  
		 END  AS A_D_RATE3,
		        A.PLAN_AMT4 AS PLAN4,
		        A.MOD_PLAN_AMT4 AS MOD_PLAN4,
		        
		CASE ISNULL(A.MOD_PLAN_AMT4, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT4, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT4 - A.PLAN_AMT4 ) * 100 / A.PLAN_AMT4
		                END  
		 END  AS A_D_RATE4,
		        A.PLAN_AMT5 AS PLAN5,
		        A.MOD_PLAN_AMT5 AS MOD_PLAN5,
		        
		CASE ISNULL(A.MOD_PLAN_AMT5, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT5, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT5 - A.PLAN_AMT5 ) * 100 / A.PLAN_AMT5
		                END  
		 END  AS A_D_RATE5,
		        A.PLAN_AMT6 AS PLAN6,
		        A.MOD_PLAN_AMT6 AS MOD_PLAN6,
		        
		CASE ISNULL(A.MOD_PLAN_AMT6, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT6, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT6 - A.PLAN_AMT6 ) * 100 / A.PLAN_AMT6
		                END  
		 END  AS A_D_RATE6,
		        A.PLAN_AMT7 AS PLAN7,
		        A.MOD_PLAN_AMT7 AS MOD_PLAN7,
		        
		CASE ISNULL(A.MOD_PLAN_AMT7, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT7, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT7 - A.PLAN_AMT7 ) * 100 / A.PLAN_AMT7
		                END  
		 END  AS A_D_RATE7,
		        A.PLAN_AMT8 AS PLAN8,
		        A.MOD_PLAN_AMT8 AS MOD_PLAN8,
		        
		CASE ISNULL(A.MOD_PLAN_AMT8, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT8, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT8 - A.PLAN_AMT8 ) * 100 / A.PLAN_AMT8
		                END  
		 END  AS A_D_RATE8,
		        A.PLAN_AMT9 AS PLAN9,
		        A.MOD_PLAN_AMT9 AS MOD_PLAN9,
		        
		CASE ISNULL(A.MOD_PLAN_AMT9, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT9, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT9 - A.PLAN_AMT9 ) * 100 / A.PLAN_AMT9
		                END  
		 END  AS A_D_RATE9,
		        A.PLAN_AMT10 AS PLAN10,
		        A.MOD_PLAN_AMT10 AS MOD_PLAN10,
		        
		CASE ISNULL(A.MOD_PLAN_AMT10, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT10, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT10 - A.PLAN_AMT10 ) * 100 / A.PLAN_AMT10
		                END  
		 END  AS A_D_RATE10,
		        A.PLAN_AMT11 AS PLAN11,
		        A.MOD_PLAN_AMT11 AS MOD_PLAN11,
		        
		CASE ISNULL(A.MOD_PLAN_AMT11, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT11, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT11 - A.PLAN_AMT11 ) * 100 / A.PLAN_AMT11
		                END  
		 END  AS A_D_RATE11,
		        A.PLAN_AMT12 AS PLAN12,
		        A.MOD_PLAN_AMT12 AS MOD_PLAN12,
		        
		CASE ISNULL(A.MOD_PLAN_AMT12, 0) 
		     WHEN 0 
		          THEN 0 
		          ELSE CASE ISNULL(A.PLAN_AMT12, 0) 
		                    WHEN 0
		                         THEN 0 
		                         ELSE ( A.MOD_PLAN_AMT12 - A.PLAN_AMT12 ) * 100 / A.PLAN_AMT12
		                END  
		 END  AS A_D_RATE12,
		                A.UPDATE_DB_USER,
		                A.UPDATE_DB_TIME,
		                A.COMP_CODE
		  FROM SSP100T A WITH (NOLOCK)
		               LEFT OUTER JOIN BSA100T B WITH (NOLOCK)
		                            ON A.COMP_CODE       = B.COMP_CODE
		                           AND A.PLAN_TYPE2_CODE = B.SUB_CODE 
		                           AND B.COMP_CODE       = #{S_COMP_CODE}
		                           AND B.MAIN_CODE       ='S010' 
		                           AND B.SUB_CODE       != '$'
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.PLAN_TYPE2 = '1'
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.PLAN_YEAR  = #{PLAN_YEAR}
		   AND A.PLAN_TYPE1 = #{ORDER_TYPE}
		   AND A.MONEY_UNIT = #{MONEY_UNIT}
		 ORDER BY S_CODE
	</select>
	
	<update id="sgp100ukrvService.insertDetail2" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}           				       
					   )

		BEGIN  			
				
        INSERT INTO SSP100T
             ( DIV_CODE
             , PLAN_YEAR
             , PLAN_TYPE1
             , PLAN_TYPE2
             , PLAN_TYPE2_CODE
             , LEVEL_KIND
             , MONEY_UNIT
             , ENT_MONEY_UNIT
             , CONFIRM_YN
             , PLAN_AMT1
             , MOD_PLAN_AMT1
             , PLAN_AMT2
             , MOD_PLAN_AMT2
             , PLAN_AMT3
             , MOD_PLAN_AMT3
             , PLAN_AMT4
             , MOD_PLAN_AMT4
             , PLAN_AMT5
             , MOD_PLAN_AMT5
             , PLAN_AMT6
             , MOD_PLAN_AMT6
             , PLAN_AMT7
             , MOD_PLAN_AMT7
             , PLAN_AMT8
             , MOD_PLAN_AMT8
             , PLAN_AMT9
             , MOD_PLAN_AMT9
             , PLAN_AMT10
             , MOD_PLAN_AMT10
             , PLAN_AMT11
             , MOD_PLAN_AMT11
             , PLAN_AMT12
             , MOD_PLAN_AMT12
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
             , COMP_CODE
             ) 
        VALUES
             ( #{DIV_CODE}          
             , #{PLAN_YEAR}         
             , #{PLAN_TYPE1}        
             , #{PLAN_TYPE2}        
             , #{S_CODE}   
             , #{LEVEL_KIND}        
             , #{MONEY_UNIT}        
             , #{ENT_MONEY_UNIT}    
             , #{CONFIRM_YN}        
             , #{PLAN1}          
             , #{MOD_PLAN1}     
             , #{PLAN2}     
             , #{MOD_PLAN2}     
             , #{PLAN3}    
             , #{MOD_PLAN3}    
             , #{PLAN4}     
             , #{MOD_PLAN4}     
             , #{PLAN5}    
             , #{MOD_PLAN5}   
             , #{PLAN6}    
             , #{MOD_PLAN6}
             , #{PLAN7}    
             , #{MOD_PLAN7}
             , #{PLAN8}    
             , #{MOD_PLAN8}
             , #{PLAN9}    
             , #{MOD_PLAN9}
             , #{PLAN10}    
             , #{MOD_PLAN10}
             , #{PLAN11}     
             , #{MOD_PLAN11} 
             , #{PLAN12}     
             , #{MOD_PLAN12}     
             , #{S_USER_ID}    
             , GETDATE()   
             , #{S_COMP_CODE}        
             )
      END
      
      ELSE
      
      BEGIN
        UPDATE SSP100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_AMT1       = #{PLAN1}     
             , MOD_PLAN_AMT1   = #{MOD_PLAN1} 
             , PLAN_AMT2       = #{PLAN2}     
             , MOD_PLAN_AMT2   = #{MOD_PLAN2} 
             , PLAN_AMT3       = #{PLAN3}     
             , MOD_PLAN_AMT3   = #{MOD_PLAN3} 
             , PLAN_AMT4       = #{PLAN4}     
             , MOD_PLAN_AMT4   = #{MOD_PLAN4} 
             , PLAN_AMT5       = #{PLAN5}     
             , MOD_PLAN_AMT5   = #{MOD_PLAN5} 
             , PLAN_AMT6       = #{PLAN6}     
             , MOD_PLAN_AMT6   = #{MOD_PLAN6} 
             , PLAN_AMT7       = #{PLAN7}     
             , MOD_PLAN_AMT7   = #{MOD_PLAN7} 
             , PLAN_AMT8       = #{PLAN8}     
             , MOD_PLAN_AMT8   = #{MOD_PLAN8} 
             , PLAN_AMT9       = #{PLAN9}     
             , MOD_PLAN_AMT9   = #{MOD_PLAN9} 
             , PLAN_AMT10      = #{PLAN10}    
             , MOD_PLAN_AMT10  = #{MOD_PLAN10}
             , PLAN_AMT11      = #{PLAN11}    
             , MOD_PLAN_AMT11  = #{MOD_PLAN11}
             , PLAN_AMT12      = #{PLAN12}    
             , MOD_PLAN_AMT12  = #{MOD_PLAN12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE() 
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}      
      
      END

      
    </update>
    
    <update id="sgp100ukrvService.updateDetail2" parameterType="Map">
        UPDATE SSP100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_AMT1       = #{PLAN1}     
             , MOD_PLAN_AMT1   = #{MOD_PLAN1} 
             , PLAN_AMT2       = #{PLAN2}     
             , MOD_PLAN_AMT2   = #{MOD_PLAN2} 
             , PLAN_AMT3       = #{PLAN3}     
             , MOD_PLAN_AMT3   = #{MOD_PLAN3} 
             , PLAN_AMT4       = #{PLAN4}     
             , MOD_PLAN_AMT4   = #{MOD_PLAN4} 
             , PLAN_AMT5       = #{PLAN5}     
             , MOD_PLAN_AMT5   = #{MOD_PLAN5} 
             , PLAN_AMT6       = #{PLAN6}     
             , MOD_PLAN_AMT6   = #{MOD_PLAN6} 
             , PLAN_AMT7       = #{PLAN7}     
             , MOD_PLAN_AMT7   = #{MOD_PLAN7} 
             , PLAN_AMT8       = #{PLAN8}     
             , MOD_PLAN_AMT8   = #{MOD_PLAN8} 
             , PLAN_AMT9       = #{PLAN9}     
             , MOD_PLAN_AMT9   = #{MOD_PLAN9} 
             , PLAN_AMT10      = #{PLAN10}    
             , MOD_PLAN_AMT10  = #{MOD_PLAN10}
             , PLAN_AMT11      = #{PLAN11}    
             , MOD_PLAN_AMT11  = #{MOD_PLAN11}
             , PLAN_AMT12      = #{PLAN12}    
             , MOD_PLAN_AMT12  = #{MOD_PLAN12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
          
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail2" parameterType="Map">
        DELETE FROM ssp100T 
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
    </delete>  
    

    
	<select id="sgp100ukrvService.itemSelectList" parameterType="Map" resultType="rMap">		
		/* sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ] Query16 */
		SELECT    A.DIV_CODE
		     , A.PLAN_YEAR
		     , A.PLAN_TYPE1
		     , A.PLAN_TYPE2
		     , A.PLAN_TYPE2_CODE
		     , A.LEVEL_KIND
		     , A.MONEY_UNIT
		     , A.ENT_MONEY_UNIT
		     , A.CONFIRM_YN
		     , ISNULL(B.SALE_BASIS_P,0) As SALE_BASIS_P
		     , B.ITEM_CODE AS ITEM_CODE
		     , uniLITE.fnItemNameComp(#{S_COMP_CODE}, N'UNILITE5',B.ITEM_CODE) AS ITEM_NAME 
		     , B.SPEC AS S_OTHER1,--sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ]Query14
		         ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q, 
		         ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT, 
		         ISNULL(A.MOD_PLAN_Q1,0) + ISNULL(A.MOD_PLAN_Q2,0) + ISNULL(A.MOD_PLAN_Q3,0) + ISNULL(A.MOD_PLAN_Q4,0) + ISNULL(A.MOD_PLAN_Q5,0) + ISNULL(A.MOD_PLAN_Q6,0) + ISNULL(A.MOD_PLAN_Q7,0) + ISNULL(A.MOD_PLAN_Q8,0) + ISNULL(A.MOD_PLAN_Q9,0) + ISNULL(A.MOD_PLAN_Q10,0) + ISNULL(A.MOD_PLAN_Q11,0) + ISNULL(A.MOD_PLAN_Q12,0)  AS MOD_PLAN_SUM_Q, 
		         ISNULL(A.MOD_PLAN_AMT1,0) + ISNULL(A.MOD_PLAN_AMT2,0) + ISNULL(A.MOD_PLAN_AMT3,0) + ISNULL(A.MOD_PLAN_AMT4,0) + ISNULL(A.MOD_PLAN_AMT5,0) + ISNULL(A.MOD_PLAN_AMT6,0) + ISNULL(A.MOD_PLAN_AMT7,0) + ISNULL(A.MOD_PLAN_AMT8,0) + ISNULL(A.MOD_PLAN_AMT9,0) + ISNULL(A.MOD_PLAN_AMT10,0) + ISNULL(A.MOD_PLAN_AMT11,0) + ISNULL(A.MOD_PLAN_AMT12,0)  AS MOD_PLAN_SUM_AMT, 
		        ISNULL(A.PLAN_QTY1,0) AS PLAN_QTY1,
		        ISNULL(A.PLAN_AMT1,0) AS PLAN_AMT1,
		        ISNULL(A.MOD_PLAN_Q1,0) AS MOD_PLAN_Q1,
		        ISNULL(A.MOD_PLAN_AMT1,0) AS MOD_PLAN_AMT1,
		        ISNULL(A.PLAN_QTY2,0) AS PLAN_QTY2,
		        ISNULL(A.PLAN_AMT2,0) AS PLAN_AMT2,
		        ISNULL(A.MOD_PLAN_Q2,0) AS MOD_PLAN_Q2,
		        ISNULL(A.MOD_PLAN_AMT2,0) AS MOD_PLAN_AMT2,
		        ISNULL(A.PLAN_QTY3,0) AS PLAN_QTY3,
		        ISNULL(A.PLAN_AMT3,0) AS PLAN_AMT3,
		        ISNULL(A.MOD_PLAN_Q3,0) AS MOD_PLAN_Q3,
		        ISNULL(A.MOD_PLAN_AMT3,0) AS MOD_PLAN_AMT3,
		        ISNULL(A.PLAN_QTY4,0) AS PLAN_QTY4,
		        ISNULL(A.PLAN_AMT4,0) AS PLAN_AMT4,
		        ISNULL(A.MOD_PLAN_Q4,0) AS MOD_PLAN_Q4,
		        ISNULL(A.MOD_PLAN_AMT4,0) AS MOD_PLAN_AMT4,
		        ISNULL(A.PLAN_QTY5,0) AS PLAN_QTY5,
		        ISNULL(A.PLAN_AMT5,0) AS PLAN_AMT5,
		        ISNULL(A.MOD_PLAN_Q5,0) AS MOD_PLAN_Q5,
		        ISNULL(A.MOD_PLAN_AMT5,0) AS MOD_PLAN_AMT5,
		        ISNULL(A.PLAN_QTY6,0) AS PLAN_QTY6,
		        ISNULL(A.PLAN_AMT6,0) AS PLAN_AMT6,
		        ISNULL(A.MOD_PLAN_Q6,0) AS MOD_PLAN_Q6,
		        ISNULL(A.MOD_PLAN_AMT6,0) AS MOD_PLAN_AMT6,
		        ISNULL(A.PLAN_QTY7,0) AS PLAN_QTY7,
		        ISNULL(A.PLAN_AMT7,0) AS PLAN_AMT7,
		        ISNULL(A.MOD_PLAN_Q7,0) AS MOD_PLAN_Q7,
		        ISNULL(A.MOD_PLAN_AMT7,0) AS MOD_PLAN_AMT7,
		        ISNULL(A.PLAN_QTY8,0) AS PLAN_QTY8,
		        ISNULL(A.PLAN_AMT8,0) AS PLAN_AMT8,
		        ISNULL(A.MOD_PLAN_Q8,0) AS MOD_PLAN_Q8,
		        ISNULL(A.MOD_PLAN_AMT8,0) AS MOD_PLAN_AMT8,
		        ISNULL(A.PLAN_QTY9,0) AS PLAN_QTY9,
		        ISNULL(A.PLAN_AMT9,0) AS PLAN_AMT9,
		        ISNULL(A.MOD_PLAN_Q9,0) AS MOD_PLAN_Q9,
		        ISNULL(A.MOD_PLAN_AMT9,0) AS MOD_PLAN_AMT9,
		        ISNULL(A.PLAN_QTY10,0) AS PLAN_QTY10,
		        ISNULL(A.PLAN_AMT10,0) AS PLAN_AMT10,
		        ISNULL(A.MOD_PLAN_Q10,0) AS MOD_PLAN_Q10,
		        ISNULL(A.MOD_PLAN_AMT10,0) AS MOD_PLAN_AMT10,
		        ISNULL(A.PLAN_QTY11,0) AS PLAN_QTY11,
		        ISNULL(A.PLAN_AMT11,0) AS PLAN_AMT11,
		        ISNULL(A.MOD_PLAN_Q11,0) AS MOD_PLAN_Q11,
		        ISNULL(A.MOD_PLAN_AMT11,0) AS MOD_PLAN_AMT11,
		        ISNULL(A.PLAN_QTY12,0) AS PLAN_QTY12,
		        ISNULL(A.PLAN_AMT12,0) AS PLAN_AMT12,
		        ISNULL(A.MOD_PLAN_Q12,0) AS MOD_PLAN_Q12,
		        ISNULL(A.MOD_PLAN_AMT12,0) AS MOD_PLAN_AMT12,
		                A.UPDATE_DB_USER,
		                A.UPDATE_DB_TIME,
		                A.COMP_CODE
		FROM            SSP100T A WITH (NOLOCK)
		       INNER JOIN BPR100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                         AND B.ITEM_CODE = A.PLAN_TYPE2_CODE
		                                         AND B.USE_YN    = 'Y'
		       INNER JOIN BPR200T C WITH (NOLOCK) ON C.COMP_CODE = A.COMP_CODE
		                                         AND C.DIV_CODE  = A.DIV_CODE
		                                         AND C.ITEM_CODE = A.PLAN_TYPE2_CODE
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.PLAN_TYPE2 = '3'
		   AND C.ITEM_ACCOUNT = #{ITEM_ACCOUNT}	/*sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ] Query15*/
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.PLAN_YEAR  = #{PLAN_YEAR}
		   AND A.PLAN_TYPE1 = #{ORDER_TYPE}
		   AND A.MONEY_UNIT = #{MONEY_UNIT}
		 ORDER BY ITEM_CODE
	</select>
	
 	<insert id="sgp100ukrvService.insertExcelSgp100ukrv3" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL_QTY(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG 
	    , CUSTOM_CODE
	    , CUSTOM_NAME
	    , ITEM_CODE
	    , ITEM_NAME
	    , PLAN_QTY1
	    , PLAN_AMT1
	    , PLAN_QTY2
	    , PLAN_AMT2
	    , PLAN_QTY3
	    , PLAN_AMT3
	    , PLAN_QTY4
	    , PLAN_AMT4
	    , PLAN_QTY5
	    , PLAN_AMT5
	    , PLAN_QTY6
	    , PLAN_AMT6
	    , PLAN_QTY7
	    , PLAN_AMT7
	    , PLAN_QTY8
	    , PLAN_AMT8
	    , PLAN_QTY9
	    , PLAN_AMT9
	    , PLAN_QTY10
	    , PLAN_AMT10
	    , PLAN_QTY11
	    , PLAN_AMT11
	    , PLAN_QTY12
	    , PLAN_AMT12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , ''
	    , ''
    	, #{ITEM_CODE}
	    , #{ITEM_NAME} 
	    , #{PLAN_QTY1}
	    , #{PLAN_AMT1}
	    , #{PLAN_QTY2}
	    , #{PLAN_AMT2}
	    , #{PLAN_QTY3}
	    , #{PLAN_AMT3}
	    , #{PLAN_QTY4}
	    , #{PLAN_AMT4}
	    , #{PLAN_QTY5}
	    , #{PLAN_AMT5}
	    , #{PLAN_QTY6}
	    , #{PLAN_AMT6}
	    , #{PLAN_QTY7}
	    , #{PLAN_AMT7}
	    , #{PLAN_QTY8}
	    , #{PLAN_AMT8}
	    , #{PLAN_QTY9}
	    , #{PLAN_AMT9}
	    , #{PLAN_QTY10}
	    , #{PLAN_AMT10}
	    , #{PLAN_QTY11}
	    , #{PLAN_AMT11}
	    , #{PLAN_QTY12}
	    , #{PLAN_AMT12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
       
    
	<update id="excelValidate3" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.ITEM_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 품목입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END),
            A.ITEM_NAME  = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ''
                                  ELSE B.ITEM_NAME
                                  END)
                                 
    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
		       LEFT JOIN BPR200T B WITH (NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
		                                        AND B.DIV_CODE  = #{DIV_CODE}
		                                        AND B.ITEM_CODE = A.ITEM_CODE							         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = #{ORDER_TYPE}
										AND B.PLAN_TYPE2 = '3'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = A.ITEM_CODE


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet3" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG
	    , A.ITEM_CODE
	    , A.ITEM_NAME
        , ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q 
        , ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT  
	    , A.PLAN_QTY1
	    , A.PLAN_AMT1
	    , A.PLAN_QTY2
	    , A.PLAN_AMT2
	    , A.PLAN_QTY3
	    , A.PLAN_AMT3
	    , A.PLAN_QTY4
	    , A.PLAN_AMT4
	    , A.PLAN_QTY5
	    , A.PLAN_AMT5
	    , A.PLAN_QTY6
	    , A.PLAN_AMT6
	    , A.PLAN_QTY7
	    , A.PLAN_AMT7
	    , A.PLAN_QTY8
	    , A.PLAN_AMT8
	    , A.PLAN_QTY9
	    , A.PLAN_AMT9
	    , A.PLAN_QTY10
	    , A.PLAN_AMT10
	    , A.PLAN_QTY11
	    , A.PLAN_AMT11
	    , A.PLAN_QTY12
	    , A.PLAN_AMT12	    
	      FROM SGP100UKRV_EXCEL_QTY A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select>    
    	
	
	<update id="sgp100ukrvService.insertDetail3" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}           				       
					   )

		BEGIN  		
		
        INSERT INTO SSP100T
             ( DIV_CODE
             , PLAN_YEAR
             , PLAN_TYPE1
             , PLAN_TYPE2
             , PLAN_TYPE2_CODE
             , LEVEL_KIND
             , MONEY_UNIT
             , ENT_MONEY_UNIT
             , CONFIRM_YN
             , PLAN_QTY1
             , PLAN_AMT1
             , MOD_PLAN_Q1
             , MOD_PLAN_AMT1
             , PLAN_QTY2
             , PLAN_AMT2
             , MOD_PLAN_Q2
             , MOD_PLAN_AMT2
             , PLAN_QTY3
             , PLAN_AMT3
             , MOD_PLAN_Q3
             , MOD_PLAN_AMT3
             , PLAN_QTY4
             , PLAN_AMT4
             , MOD_PLAN_Q4
             , MOD_PLAN_AMT4
             , PLAN_QTY5
             , PLAN_AMT5
             , MOD_PLAN_Q5
             , MOD_PLAN_AMT5
             , PLAN_QTY6
             , PLAN_AMT6
             , MOD_PLAN_Q6
             , MOD_PLAN_AMT6
             , PLAN_QTY7
             , PLAN_AMT7
             , MOD_PLAN_Q7
             , MOD_PLAN_AMT7
             , PLAN_QTY8
             , PLAN_AMT8
             , MOD_PLAN_Q8
             , MOD_PLAN_AMT8
             , PLAN_QTY9
             , PLAN_AMT9
             , MOD_PLAN_Q9
             , MOD_PLAN_AMT9
             , PLAN_QTY10
             , PLAN_AMT10
             , MOD_PLAN_Q10
             , MOD_PLAN_AMT10
             , PLAN_QTY11
             , PLAN_AMT11
             , MOD_PLAN_Q11
             , MOD_PLAN_AMT11
             , PLAN_QTY12
             , PLAN_AMT12
             , MOD_PLAN_Q12
             , MOD_PLAN_AMT12
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
             , COMP_CODE
             ) 
        VALUES
             ( #{DIV_CODE}         
             , #{PLAN_YEAR}        
             , #{PLAN_TYPE1}       
             , #{PLAN_TYPE2}       
             , #{PLAN_TYPE2_CODE}  
             , #{LEVEL_KIND}       
             , #{MONEY_UNIT}       
             , #{ENT_MONEY_UNIT}   
             , #{CONFIRM_YN}       
             , #{PLAN_QTY1}        
             , #{PLAN_AMT1}        
             , #{MOD_PLAN_Q1}      
             , #{MOD_PLAN_AMT1}    
             , #{PLAN_QTY2}        
             , #{PLAN_AMT2}        
             , #{MOD_PLAN_Q2}      
             , #{MOD_PLAN_AMT2}    
             , #{PLAN_QTY3}        
             , #{PLAN_AMT3}        
             , #{MOD_PLAN_Q3}      
             , #{MOD_PLAN_AMT3}    
             , #{PLAN_QTY4}        
             , #{PLAN_AMT4}        
             , #{MOD_PLAN_Q4}      
             , #{MOD_PLAN_AMT4}    
             , #{PLAN_QTY5}        
             , #{PLAN_AMT5}        
             , #{MOD_PLAN_Q5}      
             , #{MOD_PLAN_AMT5}    
             , #{PLAN_QTY6}        
             , #{PLAN_AMT6}        
             , #{MOD_PLAN_Q6}      
             , #{MOD_PLAN_AMT6}    
             , #{PLAN_QTY7}        
             , #{PLAN_AMT7}        
             , #{MOD_PLAN_Q7}      
             , #{MOD_PLAN_AMT7}    
             , #{PLAN_QTY8}        
             , #{PLAN_AMT8}        
             , #{MOD_PLAN_Q8}      
             , #{MOD_PLAN_AMT8}    
             , #{PLAN_QTY9}        
             , #{PLAN_AMT9}        
             , #{MOD_PLAN_Q9}      
             , #{MOD_PLAN_AMT9}    
             , #{PLAN_QTY10}       
             , #{PLAN_AMT10}       
             , #{MOD_PLAN_Q10}     
             , #{MOD_PLAN_AMT10}   
             , #{PLAN_QTY11}       
             , #{PLAN_AMT11}       
             , #{MOD_PLAN_Q11}     
             , #{MOD_PLAN_AMT11}   
             , #{PLAN_QTY12}       
             , #{PLAN_AMT12}       
             , #{MOD_PLAN_Q12}     
             , #{MOD_PLAN_AMT12}   
             , #{S_USER_ID}   
             , GETDATE()   
             , #{S_COMP_CODE}        
             )
     END
     ELSE
     BEGIN
        UPDATE ssp100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_QTY1       = #{PLAN_QTY1}
             , PLAN_AMT1       = #{PLAN_AMT1}
             , MOD_PLAN_Q1     = #{MOD_PLAN_Q1}
             , MOD_PLAN_AMT1   = #{MOD_PLAN_AMT1}
             , PLAN_QTY2       = #{PLAN_QTY2}
             , PLAN_AMT2       = #{PLAN_AMT2}
             , MOD_PLAN_Q2     = #{MOD_PLAN_Q2}
             , MOD_PLAN_AMT2   = #{MOD_PLAN_AMT2}
             , PLAN_QTY3       = #{PLAN_QTY3}
             , PLAN_AMT3       = #{PLAN_AMT3}
             , MOD_PLAN_Q3     = #{MOD_PLAN_Q3}
             , MOD_PLAN_AMT3   = #{MOD_PLAN_AMT3}
             , PLAN_QTY4       = #{PLAN_QTY4}
             , PLAN_AMT4       = #{PLAN_AMT4}
             , MOD_PLAN_Q4     = #{MOD_PLAN_Q4}
             , MOD_PLAN_AMT4   = #{MOD_PLAN_AMT4}
             , PLAN_QTY5       = #{PLAN_QTY5}
             , PLAN_AMT5       = #{PLAN_AMT5}
             , MOD_PLAN_Q5     = #{MOD_PLAN_Q5}
             , MOD_PLAN_AMT5   = #{MOD_PLAN_AMT5}
             , PLAN_QTY6       = #{PLAN_QTY6}
             , PLAN_AMT6       = #{PLAN_AMT6}
             , MOD_PLAN_Q6     = #{MOD_PLAN_Q6}
             , MOD_PLAN_AMT6   = #{MOD_PLAN_AMT6}
             , PLAN_QTY7       = #{PLAN_QTY7}
             , PLAN_AMT7       = #{PLAN_AMT7}
             , MOD_PLAN_Q7     = #{MOD_PLAN_Q7}
             , MOD_PLAN_AMT7   = #{MOD_PLAN_AMT7}
             , PLAN_QTY8       = #{PLAN_QTY8}
             , PLAN_AMT8       = #{PLAN_AMT8}
             , MOD_PLAN_Q8     = #{MOD_PLAN_Q8}
             , MOD_PLAN_AMT8   = #{MOD_PLAN_AMT8}
             , PLAN_QTY9       = #{PLAN_QTY9}
             , PLAN_AMT9       = #{PLAN_AMT9}
             , MOD_PLAN_Q9     = #{MOD_PLAN_Q9}
             , MOD_PLAN_AMT9   = #{MOD_PLAN_AMT9}
             , PLAN_QTY10      = #{PLAN_QTY10}
             , PLAN_AMT10      = #{PLAN_AMT10}
             , MOD_PLAN_Q10    = #{MOD_PLAN_Q10}
             , MOD_PLAN_AMT10  = #{MOD_PLAN_AMT10}
             , PLAN_QTY11      = #{PLAN_QTY11}
             , PLAN_AMT11      = #{PLAN_AMT11}
             , MOD_PLAN_Q11    = #{MOD_PLAN_Q11}
             , MOD_PLAN_AMT11  = #{MOD_PLAN_AMT11}
             , PLAN_QTY12      = #{PLAN_QTY12}
             , PLAN_AMT12      = #{PLAN_AMT12}
             , MOD_PLAN_Q12    = #{MOD_PLAN_Q12}
             , MOD_PLAN_AMT12  = #{MOD_PLAN_AMT12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}     
     
     END
    </update>
    
    <update id="sgp100ukrvService.updateDetail3" parameterType="Map">
        UPDATE ssp100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_QTY1       = #{PLAN_QTY1}
             , PLAN_AMT1       = #{PLAN_AMT1}
             , MOD_PLAN_Q1     = #{MOD_PLAN_Q1}
             , MOD_PLAN_AMT1   = #{MOD_PLAN_AMT1}
             , PLAN_QTY2       = #{PLAN_QTY2}
             , PLAN_AMT2       = #{PLAN_AMT2}
             , MOD_PLAN_Q2     = #{MOD_PLAN_Q2}
             , MOD_PLAN_AMT2   = #{MOD_PLAN_AMT2}
             , PLAN_QTY3       = #{PLAN_QTY3}
             , PLAN_AMT3       = #{PLAN_AMT3}
             , MOD_PLAN_Q3     = #{MOD_PLAN_Q3}
             , MOD_PLAN_AMT3   = #{MOD_PLAN_AMT3}
             , PLAN_QTY4       = #{PLAN_QTY4}
             , PLAN_AMT4       = #{PLAN_AMT4}
             , MOD_PLAN_Q4     = #{MOD_PLAN_Q4}
             , MOD_PLAN_AMT4   = #{MOD_PLAN_AMT4}
             , PLAN_QTY5       = #{PLAN_QTY5}
             , PLAN_AMT5       = #{PLAN_AMT5}
             , MOD_PLAN_Q5     = #{MOD_PLAN_Q5}
             , MOD_PLAN_AMT5   = #{MOD_PLAN_AMT5}
             , PLAN_QTY6       = #{PLAN_QTY6}
             , PLAN_AMT6       = #{PLAN_AMT6}
             , MOD_PLAN_Q6     = #{MOD_PLAN_Q6}
             , MOD_PLAN_AMT6   = #{MOD_PLAN_AMT6}
             , PLAN_QTY7       = #{PLAN_QTY7}
             , PLAN_AMT7       = #{PLAN_AMT7}
             , MOD_PLAN_Q7     = #{MOD_PLAN_Q7}
             , MOD_PLAN_AMT7   = #{MOD_PLAN_AMT7}
             , PLAN_QTY8       = #{PLAN_QTY8}
             , PLAN_AMT8       = #{PLAN_AMT8}
             , MOD_PLAN_Q8     = #{MOD_PLAN_Q8}
             , MOD_PLAN_AMT8   = #{MOD_PLAN_AMT8}
             , PLAN_QTY9       = #{PLAN_QTY9}
             , PLAN_AMT9       = #{PLAN_AMT9}
             , MOD_PLAN_Q9     = #{MOD_PLAN_Q9}
             , MOD_PLAN_AMT9   = #{MOD_PLAN_AMT9}
             , PLAN_QTY10      = #{PLAN_QTY10}
             , PLAN_AMT10      = #{PLAN_AMT10}
             , MOD_PLAN_Q10    = #{MOD_PLAN_Q10}
             , MOD_PLAN_AMT10  = #{MOD_PLAN_AMT10}
             , PLAN_QTY11      = #{PLAN_QTY11}
             , PLAN_AMT11      = #{PLAN_AMT11}
             , MOD_PLAN_Q11    = #{MOD_PLAN_Q11}
             , MOD_PLAN_AMT11  = #{MOD_PLAN_AMT11}
             , PLAN_QTY12      = #{PLAN_QTY12}
             , PLAN_AMT12      = #{PLAN_AMT12}
             , MOD_PLAN_Q12    = #{MOD_PLAN_Q12}
             , MOD_PLAN_AMT12  = #{MOD_PLAN_AMT12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail3" parameterType="Map">
        DELETE FROM SSP100T 
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}      
    </delete>
    
    <select id="sgp100ukrvService.itemSortSelectList" parameterType="Map" resultType="rMap">        
    --sgp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 
    SELECT A.DIV_CODE 
         , A.PLAN_YEAR
         , A.PLAN_TYPE1
         , A.PLAN_TYPE2
         , A.PLAN_TYPE2_CODE
         , A.LEVEL_KIND
         , A.MONEY_UNIT
         , A.ENT_MONEY_UNIT
         , A.CONFIRM_YN
     <if test="ITEM_LEVEL == &quot;1&quot;">         
         , B.LEVEL1       AS S_CODE1
         , B.LEVEL_NAME   AS S_NAME1
     </if>
     <if test="ITEM_LEVEL == &quot;2&quot;">    
     	 , B.LEVEL2       AS S_CODE2
     	 , B.LEVEL_NAME   AS S_NAME2
     </if>
     <if test="ITEM_LEVEL == &quot;3&quot;">    
         , B.LEVEL3       AS S_CODE3
         , B.LEVEL_NAME   AS S_NAME3
     </if> 
         , A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12 AS PLAN_SUM, 
            A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12 AS MOD_PLAN_SUM, 
            
    CASE ISNULL(A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ((A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) - (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12)) * 100 / ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0)
                    END  
     END  AS A_D_RATE_SUM, 
            A.PLAN_AMT1 AS PLAN1,
            A.MOD_PLAN_AMT1 AS MOD_PLAN1,
            
    CASE ISNULL(A.MOD_PLAN_AMT1, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT1, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT1 - A.PLAN_AMT1 ) * 100 / A.PLAN_AMT1
                    END  
     END  AS A_D_RATE1,
            A.PLAN_AMT2 AS PLAN2,
            A.MOD_PLAN_AMT2 AS MOD_PLAN2,
            
    CASE ISNULL(A.MOD_PLAN_AMT2, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT2, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT2 - A.PLAN_AMT2 ) * 100 / A.PLAN_AMT2
                    END  
     END  AS A_D_RATE2,
            A.PLAN_AMT3 AS PLAN3,
            A.MOD_PLAN_AMT3 AS MOD_PLAN3,
            
    CASE ISNULL(A.MOD_PLAN_AMT3, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT3, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT3 - A.PLAN_AMT3 ) * 100 / A.PLAN_AMT3
                    END  
     END  AS A_D_RATE3,
            A.PLAN_AMT4 AS PLAN4,
            A.MOD_PLAN_AMT4 AS MOD_PLAN4,
            
    CASE ISNULL(A.MOD_PLAN_AMT4, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT4, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT4 - A.PLAN_AMT4 ) * 100 / A.PLAN_AMT4
                    END  
     END  AS A_D_RATE4,
            A.PLAN_AMT5 AS PLAN5,
            A.MOD_PLAN_AMT5 AS MOD_PLAN5,
            
    CASE ISNULL(A.MOD_PLAN_AMT5, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT5, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT5 - A.PLAN_AMT5 ) * 100 / A.PLAN_AMT5
                    END  
     END  AS A_D_RATE5,
            A.PLAN_AMT6 AS PLAN6,
            A.MOD_PLAN_AMT6 AS MOD_PLAN6,
            
    CASE ISNULL(A.MOD_PLAN_AMT6, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT6, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT6 - A.PLAN_AMT6 ) * 100 / A.PLAN_AMT6
                    END  
     END  AS A_D_RATE6,
            A.PLAN_AMT7 AS PLAN7,
            A.MOD_PLAN_AMT7 AS MOD_PLAN7,
            
    CASE ISNULL(A.MOD_PLAN_AMT7, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT7, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT7 - A.PLAN_AMT7 ) * 100 / A.PLAN_AMT7
                    END  
     END  AS A_D_RATE7,
            A.PLAN_AMT8 AS PLAN8,
            A.MOD_PLAN_AMT8 AS MOD_PLAN8,
            
    CASE ISNULL(A.MOD_PLAN_AMT8, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT8, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT8 - A.PLAN_AMT8 ) * 100 / A.PLAN_AMT8
                    END  
     END  AS A_D_RATE8,
            A.PLAN_AMT9 AS PLAN9,
            A.MOD_PLAN_AMT9 AS MOD_PLAN9,
            
    CASE ISNULL(A.MOD_PLAN_AMT9, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT9, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT9 - A.PLAN_AMT9 ) * 100 / A.PLAN_AMT9
                    END  
     END  AS A_D_RATE9,
            A.PLAN_AMT10 AS PLAN10,
            A.MOD_PLAN_AMT10 AS MOD_PLAN10,
            
    CASE ISNULL(A.MOD_PLAN_AMT10, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT10, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT10 - A.PLAN_AMT10 ) * 100 / A.PLAN_AMT10
                    END  
     END  AS A_D_RATE10,
            A.PLAN_AMT11 AS PLAN11,
            A.MOD_PLAN_AMT11 AS MOD_PLAN11,
            
    CASE ISNULL(A.MOD_PLAN_AMT11, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT11, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT11 - A.PLAN_AMT11 ) * 100 / A.PLAN_AMT11
                    END  
     END  AS A_D_RATE11,
            A.PLAN_AMT12 AS PLAN12,
            A.MOD_PLAN_AMT12 AS MOD_PLAN12,
            
    CASE ISNULL(A.MOD_PLAN_AMT12, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT12, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT12 - A.PLAN_AMT12 ) * 100 / A.PLAN_AMT12
                    END  
     END  AS A_D_RATE12,
                    A.UPDATE_DB_USER,
                    A.UPDATE_DB_TIME,
                    A.COMP_CODE
      <if test="ITEM_LEVEL == &quot;1&quot;">              
          FROM SSP100T A WITH (NOLOCK)
                   LEFT OUTER JOIN (SELECT COMP_CODE
                                         , LEVEL1, MAX(LEVEL_NAME) AS LEVEL_NAME
                                      FROM BPR000T
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
                                     GROUP BY LEVEL1, COMP_CODE) B 
                                ON A.COMP_CODE = B.COMP_CODE
                               AND A.PLAN_TYPE2_CODE = B.LEVEL1 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = '4'
           AND A.LEVEL_KIND = '1'  
      </if>
      <if test="ITEM_LEVEL == &quot;2&quot;"> 
          FROM SSP100T A WITH (NOLOCK)
                 LEFT OUTER JOIN (SELECT COMP_CODE
                                       , LEVEL2, MAX(LEVEL_NAME) AS LEVEL_NAME
                                    FROM BPR000T 
                                   WHERE COMP_CODE = #{S_COMP_CODE}
                                     AND LEVEL1 != '*' 
                                     AND LEVEL2 != '*' 
                                     AND LEVEL3 = '*'
                                   GROUP BY LEVEL2, COMP_CODE) B 
                              ON A.COMP_CODE = B.COMP_CODE
                             AND A.PLAN_TYPE2_CODE = B.LEVEL2 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = '4'
           AND A.LEVEL_KIND = '2'
      </if>
      <if test="ITEM_LEVEL == &quot;3&quot;">
          FROM SSP100T A WITH (NOLOCK) 
                         LEFT OUTER JOIN (SELECT COMP_CODE
                                               , LEVEL3, MAX(LEVEL_NAME) AS LEVEL_NAME
                                            FROM BPR000T
                                           WHERE COMP_CODE = #{S_COMP_CODE}
                                             AND LEVEL1 != '*' 
                                             AND LEVEL2 != '*' 
                                             AND LEVEL3 != '*'
                                           GROUP BY LEVEL3, COMP_CODE) B 
                                      ON A.COMP_CODE = B.COMP_CODE
                                     AND A.PLAN_TYPE2_CODE = B.LEVEL3 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = '4'
           AND A.LEVEL_KIND = '3'      	  
      </if>       
       AND A.DIV_CODE   = #{DIV_CODE}
       AND A.PLAN_YEAR  = #{PLAN_YEAR}
       AND A.PLAN_TYPE1 = #{ORDER_TYPE}
       AND A.MONEY_UNIT = #{MONEY_UNIT}
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     ORDER BY S_CODE1         
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
     ORDER BY S_CODE2         
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
     ORDER BY S_CODE3        
     </if>  
    </select>
    
	<insert id="sgp100ukrvService.insertExcelSgp100ukrv4" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL_ITEMLEVEL(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG
     	, ITEM_LEVEL1
	    , ITEM_LEVEL2
	    , ITEM_LEVEL3  
	    , PLAN1
	    , PLAN2
	    , PLAN3
	    , PLAN4
	    , PLAN5
	    , PLAN6
	    , PLAN7
	    , PLAN8
	    , PLAN9
	    , PLAN10
	    , PLAN11
	    , PLAN12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,'N'
	  ,#{_EXCEL_ERROR_MSG}
	 	, #{ITEM_LEVEL1}
	    , #{ITEM_LEVEL2}
	    , #{ITEM_LEVEL2} 
	    , #{PLAN1}
	    , #{PLAN2}
	    , #{PLAN3}
	    , #{PLAN4}
	    , #{PLAN5}
	    , #{PLAN6}
	    , #{PLAN7}
	    , #{PLAN8}
	    , #{PLAN9}
	    , #{PLAN10}
	    , #{PLAN11}
	    , #{PLAN12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
    
	<update id="excelValidate4" >
   
    UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.COMP_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.COMP_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 분류코드입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END)
                                 
    FROM SGP100UKRV_EXCEL_ITEMLEVEL A WITH(NOLOCK)
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2  = '*' 
	                                       AND B.LEVEL3  = '*' 
	                                       AND B.LEVEL1  = A.ITEM_LEVEL1   
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2 != '*' 
	                                       AND B.LEVEL3  = '*' 
	                                       AND B.LEVEL2  = A.ITEM_LEVEL2       
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2 != '*' 
	                                       AND B.LEVEL3 != '*' 
	                                       AND B.LEVEL3 = A.ITEM_LEVEL3       
     </if>     

    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	


   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL_ITEMLEVEL A WITH(NOLOCK)
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = '4'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.ITEM_LEVEL1
											AND B.LEVEL_KIND = '1' 
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = '4'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.ITEM_LEVEL2
											AND B.LEVEL_KIND = '2'     
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = '4'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.ITEM_LEVEL3
											AND B.LEVEL_KIND = '3'     
     </if>  	    


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	  
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet4" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG

     <if test="ITEM_LEVEL == &quot;1&quot;">   
     	, A.ITEM_LEVEL1  AS ITEM_LEVEL1
	    , '' AS ITEM_LEVEL2
	    , '' AS ITEM_LEVEL3        
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
     	, '' AS ITEM_LEVEL1
	    , A.ITEM_LEVEL2 AS ITEM_LEVEL2
	    , '' AS ITEM_LEVEL3         
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
     	, '' AS ITEM_LEVEL1
	    , '' AS ITEM_LEVEL2
	    , A.ITEM_LEVEL3 AS ITEM_LEVEL3         
     </if> 	
        , ( ISNULL(A.PLAN1, 0) + ISNULL(A.PLAN2, 0) + ISNULL(A.PLAN3, 0) + ISNULL(A.PLAN4, 0) + ISNULL(A.PLAN5, 0) + ISNULL(A.PLAN6, 0) 
          + ISNULL(A.PLAN7, 0) + ISNULL(A.PLAN8, 0) + ISNULL(A.PLAN9, 0) + ISNULL(A.PLAN10, 0) + ISNULL(A.PLAN11, 0) + ISNULL(A.PLAN12, 0)) AS PLAN_SUM  
	    , A.PLAN1
	    , A.PLAN2
	    , A.PLAN3
	    , A.PLAN4
	    , A.PLAN5
	    , A.PLAN6
	    , A.PLAN7
	    , A.PLAN8
	    , A.PLAN9
	    , A.PLAN10
	    , A.PLAN11
	    , A.PLAN12	
	    
	      FROM SGP100UKRV_EXCEL_ITEMLEVEL A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select> 
	    
    
    <insert id="sgp100ukrvService.insertDetail4" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}        
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}
					   )    	
   BEGIN
    INSERT INTO ssp100T
         ( DIV_CODE
         , PLAN_YEAR
         , PLAN_TYPE1
         , PLAN_TYPE2
         , PLAN_TYPE2_CODE
         , LEVEL_KIND
         , MONEY_UNIT
         , ENT_MONEY_UNIT
         , CONFIRM_YN
         , PLAN_AMT1
         , MOD_PLAN_AMT1
         , PLAN_AMT2
         , MOD_PLAN_AMT2
         , PLAN_AMT3
         , MOD_PLAN_AMT3
         , PLAN_AMT4
         , MOD_PLAN_AMT4
         , PLAN_AMT5
         , MOD_PLAN_AMT5
         , PLAN_AMT6
         , MOD_PLAN_AMT6
         , PLAN_AMT7
         , MOD_PLAN_AMT7
         , PLAN_AMT8
         , MOD_PLAN_AMT8
         , PLAN_AMT9
         , MOD_PLAN_AMT9
         , PLAN_AMT10
         , MOD_PLAN_AMT10
         , PLAN_AMT11
         , MOD_PLAN_AMT11
         , PLAN_AMT12
         , MOD_PLAN_AMT12
         , UPDATE_DB_USER
         , UPDATE_DB_TIME
         , COMP_CODE
         ) 
    VALUES
         ( #{DIV_CODE}         
         , #{PLAN_YEAR}        
         , #{PLAN_TYPE1}       
         , #{PLAN_TYPE2}
         <if test="LEVEL_KIND == &quot;1&quot;">       
         , #{S_CODE1}           
         </if>
         <if test="LEVEL_KIND == &quot;2&quot;">    
         , #{S_CODE2}           
         </if>
         <if test="LEVEL_KIND == &quot;3&quot;">    
         , #{S_CODE3}           
         </if>
         , #{LEVEL_KIND}       
         , #{MONEY_UNIT}       
         , #{ENT_MONEY_UNIT}   
         , #{CONFIRM_YN}       
         , #{PLAN1}            
         , #{MOD_PLAN1}        
         , #{PLAN2}            
         , #{MOD_PLAN2}        
         , #{PLAN3}            
         , #{MOD_PLAN3}        
         , #{PLAN4}            
         , #{MOD_PLAN4}        
         , #{PLAN5}            
         , #{MOD_PLAN5}        
         , #{PLAN6}            
         , #{MOD_PLAN6}        
         , #{PLAN7}            
         , #{MOD_PLAN7}        
         , #{PLAN8}            
         , #{MOD_PLAN8}        
         , #{PLAN9}            
         , #{MOD_PLAN9}        
         , #{PLAN10}           
         , #{MOD_PLAN10}       
         , #{PLAN11}           
         , #{MOD_PLAN11}       
         , #{PLAN12}           
         , #{MOD_PLAN12}       
         , #{S_USER_ID}        
         , GETDATE()
         , #{S_COMP_CODE}
         )
    END     
    ELSE
    BEGIN
    UPDATE ssp100T
       SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
         , CONFIRM_YN      = #{CONFIRM_YN}              
         , PLAN_AMT1       = #{PLAN1}                   
         , MOD_PLAN_AMT1   = #{MOD_PLAN1}               
         , PLAN_AMT2       = #{PLAN2}                   
         , MOD_PLAN_AMT2   = #{MOD_PLAN2}               
         , PLAN_AMT3       = #{PLAN3}                   
         , MOD_PLAN_AMT3   = #{MOD_PLAN3}               
         , PLAN_AMT4       = #{PLAN4}                   
         , MOD_PLAN_AMT4   = #{MOD_PLAN4}               
         , PLAN_AMT5       = #{PLAN5}                   
         , MOD_PLAN_AMT5   = #{MOD_PLAN5}               
         , PLAN_AMT6       = #{PLAN6}                   
         , MOD_PLAN_AMT6   = #{MOD_PLAN6}               
         , PLAN_AMT7       = #{PLAN7}                   
         , MOD_PLAN_AMT7   = #{MOD_PLAN7}               
         , PLAN_AMT8       = #{PLAN8}                   
         , MOD_PLAN_AMT8   = #{MOD_PLAN8}               
         , PLAN_AMT9       = #{PLAN9}                   
         , MOD_PLAN_AMT9   = #{MOD_PLAN9}               
         , PLAN_AMT10      = #{PLAN10}                  
         , MOD_PLAN_AMT10  = #{MOD_PLAN10}              
         , PLAN_AMT11      = #{PLAN11}                  
         , MOD_PLAN_AMT11  = #{MOD_PLAN11}              
         , PLAN_AMT12      = #{PLAN12}                  
         , MOD_PLAN_AMT12  = #{MOD_PLAN12}              
         , UPDATE_DB_USER  = #{S_USER_ID}               
         , UPDATE_DB_TIME  = GETDATE()                  
                                                        
     WHERE DIV_CODE        = #{DIV_CODE}                
       AND PLAN_YEAR       = #{PLAN_YEAR}               
       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}         
       AND LEVEL_KIND      = #{LEVEL_KIND}              
       AND MONEY_UNIT      = #{MONEY_UNIT}              
       AND COMP_CODE       = #{S_COMP_CODE}    
    END
    </insert>
    
    <update id="sgp100ukrvService.updateDetail4" parameterType="Map">
    UPDATE ssp100T
       SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
         , CONFIRM_YN      = #{CONFIRM_YN}              
         , PLAN_AMT1       = #{PLAN1}                   
         , MOD_PLAN_AMT1   = #{MOD_PLAN1}               
         , PLAN_AMT2       = #{PLAN2}                   
         , MOD_PLAN_AMT2   = #{MOD_PLAN2}               
         , PLAN_AMT3       = #{PLAN3}                   
         , MOD_PLAN_AMT3   = #{MOD_PLAN3}               
         , PLAN_AMT4       = #{PLAN4}                   
         , MOD_PLAN_AMT4   = #{MOD_PLAN4}               
         , PLAN_AMT5       = #{PLAN5}                   
         , MOD_PLAN_AMT5   = #{MOD_PLAN5}               
         , PLAN_AMT6       = #{PLAN6}                   
         , MOD_PLAN_AMT6   = #{MOD_PLAN6}               
         , PLAN_AMT7       = #{PLAN7}                   
         , MOD_PLAN_AMT7   = #{MOD_PLAN7}               
         , PLAN_AMT8       = #{PLAN8}                   
         , MOD_PLAN_AMT8   = #{MOD_PLAN8}               
         , PLAN_AMT9       = #{PLAN9}                   
         , MOD_PLAN_AMT9   = #{MOD_PLAN9}               
         , PLAN_AMT10      = #{PLAN10}                  
         , MOD_PLAN_AMT10  = #{MOD_PLAN10}              
         , PLAN_AMT11      = #{PLAN11}                  
         , MOD_PLAN_AMT11  = #{MOD_PLAN11}              
         , PLAN_AMT12      = #{PLAN12}                  
         , MOD_PLAN_AMT12  = #{MOD_PLAN12}              
         , UPDATE_DB_USER  = #{S_USER_ID}               
         , UPDATE_DB_TIME  = GETDATE()                  
                                                        
     WHERE DIV_CODE        = #{DIV_CODE}                
       AND PLAN_YEAR       = #{PLAN_YEAR}               
       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}         
       AND LEVEL_KIND      = #{LEVEL_KIND}              
       AND MONEY_UNIT      = #{MONEY_UNIT}              
       AND COMP_CODE       = #{S_COMP_CODE}             
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail4" parameterType="Map">
    DELETE FROM ssp100T 
     WHERE DIV_CODE        = #{DIV_CODE}           
       AND PLAN_YEAR       = #{PLAN_YEAR}          
       AND PLAN_TYPE1      = #{PLAN_TYPE1}         
       AND PLAN_TYPE2      = #{PLAN_TYPE2}         
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}    
       AND LEVEL_KIND      = #{LEVEL_KIND}         
       AND MONEY_UNIT      = #{MONEY_UNIT}         
       AND COMP_CODE       = #{S_COMP_CODE}        
          
    </delete>
    
    <select id="sgp100ukrvService.spokesItemSelectList" parameterType="Map" resultType="rMap">        
    --sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ] Query16
    SELECT A.DIV_CODE
         , A.PLAN_YEAR
         , A.PLAN_TYPE1
         , A.PLAN_TYPE2
         , A.PLAN_TYPE2_CODE
         , A.LEVEL_KIND
         , A.MONEY_UNIT
         , A.ENT_MONEY_UNIT
         , A.CONFIRM_YN
         , ISNULL(B.SALE_BASIS_P,0) As SALE_BASIS_P
         , B.ITEM_CODE AS ITEM_CODE
         , uniLITE.fnItemNameComp(#{S_COMP_CODE}, #{S_USER_ID},B.ITEM_CODE) AS ITEM_NAME 
         , B.SPEC AS S_OTHER1,--sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ]Query14
             ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q, 
             ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT, 
             ISNULL(A.MOD_PLAN_Q1,0) + ISNULL(A.MOD_PLAN_Q2,0) + ISNULL(A.MOD_PLAN_Q3,0) + ISNULL(A.MOD_PLAN_Q4,0) + ISNULL(A.MOD_PLAN_Q5,0) + ISNULL(A.MOD_PLAN_Q6,0) + ISNULL(A.MOD_PLAN_Q7,0) + ISNULL(A.MOD_PLAN_Q8,0) + ISNULL(A.MOD_PLAN_Q9,0) + ISNULL(A.MOD_PLAN_Q10,0) + ISNULL(A.MOD_PLAN_Q11,0) + ISNULL(A.MOD_PLAN_Q12,0)  AS MOD_PLAN_SUM_Q, 
             ISNULL(A.MOD_PLAN_AMT1,0) + ISNULL(A.MOD_PLAN_AMT2,0) + ISNULL(A.MOD_PLAN_AMT3,0) + ISNULL(A.MOD_PLAN_AMT4,0) + ISNULL(A.MOD_PLAN_AMT5,0) + ISNULL(A.MOD_PLAN_AMT6,0) + ISNULL(A.MOD_PLAN_AMT7,0) + ISNULL(A.MOD_PLAN_AMT8,0) + ISNULL(A.MOD_PLAN_AMT9,0) + ISNULL(A.MOD_PLAN_AMT10,0) + ISNULL(A.MOD_PLAN_AMT11,0) + ISNULL(A.MOD_PLAN_AMT12,0)  AS MOD_PLAN_SUM_AMT, 
            ISNULL(A.PLAN_QTY1,0) AS PLAN_QTY1,
            ISNULL(A.PLAN_AMT1,0) AS PLAN_AMT1,
            ISNULL(A.MOD_PLAN_Q1,0) AS MOD_PLAN_Q1,
            ISNULL(A.MOD_PLAN_AMT1,0) AS MOD_PLAN_AMT1,
            ISNULL(A.PLAN_QTY2,0) AS PLAN_QTY2,
            ISNULL(A.PLAN_AMT2,0) AS PLAN_AMT2,
            ISNULL(A.MOD_PLAN_Q2,0) AS MOD_PLAN_Q2,
            ISNULL(A.MOD_PLAN_AMT2,0) AS MOD_PLAN_AMT2,
            ISNULL(A.PLAN_QTY3,0) AS PLAN_QTY3,
            ISNULL(A.PLAN_AMT3,0) AS PLAN_AMT3,
            ISNULL(A.MOD_PLAN_Q3,0) AS MOD_PLAN_Q3,
            ISNULL(A.MOD_PLAN_AMT3,0) AS MOD_PLAN_AMT3,
            ISNULL(A.PLAN_QTY4,0) AS PLAN_QTY4,
            ISNULL(A.PLAN_AMT4,0) AS PLAN_AMT4,
            ISNULL(A.MOD_PLAN_Q4,0) AS MOD_PLAN_Q4,
            ISNULL(A.MOD_PLAN_AMT4,0) AS MOD_PLAN_AMT4,
            ISNULL(A.PLAN_QTY5,0) AS PLAN_QTY5,
            ISNULL(A.PLAN_AMT5,0) AS PLAN_AMT5,
            ISNULL(A.MOD_PLAN_Q5,0) AS MOD_PLAN_Q5,
            ISNULL(A.MOD_PLAN_AMT5,0) AS MOD_PLAN_AMT5,
            ISNULL(A.PLAN_QTY6,0) AS PLAN_QTY6,
            ISNULL(A.PLAN_AMT6,0) AS PLAN_AMT6,
            ISNULL(A.MOD_PLAN_Q6,0) AS MOD_PLAN_Q6,
            ISNULL(A.MOD_PLAN_AMT6,0) AS MOD_PLAN_AMT6,
            ISNULL(A.PLAN_QTY7,0) AS PLAN_QTY7,
            ISNULL(A.PLAN_AMT7,0) AS PLAN_AMT7,
            ISNULL(A.MOD_PLAN_Q7,0) AS MOD_PLAN_Q7,
            ISNULL(A.MOD_PLAN_AMT7,0) AS MOD_PLAN_AMT7,
            ISNULL(A.PLAN_QTY8,0) AS PLAN_QTY8,
            ISNULL(A.PLAN_AMT8,0) AS PLAN_AMT8,
            ISNULL(A.MOD_PLAN_Q8,0) AS MOD_PLAN_Q8,
            ISNULL(A.MOD_PLAN_AMT8,0) AS MOD_PLAN_AMT8,
            ISNULL(A.PLAN_QTY9,0) AS PLAN_QTY9,
            ISNULL(A.PLAN_AMT9,0) AS PLAN_AMT9,
            ISNULL(A.MOD_PLAN_Q9,0) AS MOD_PLAN_Q9,
            ISNULL(A.MOD_PLAN_AMT9,0) AS MOD_PLAN_AMT9,
            ISNULL(A.PLAN_QTY10,0) AS PLAN_QTY10,
            ISNULL(A.PLAN_AMT10,0) AS PLAN_AMT10,
            ISNULL(A.MOD_PLAN_Q10,0) AS MOD_PLAN_Q10,
            ISNULL(A.MOD_PLAN_AMT10,0) AS MOD_PLAN_AMT10,
            ISNULL(A.PLAN_QTY11,0) AS PLAN_QTY11,
            ISNULL(A.PLAN_AMT11,0) AS PLAN_AMT11,
            ISNULL(A.MOD_PLAN_Q11,0) AS MOD_PLAN_Q11,
            ISNULL(A.MOD_PLAN_AMT11,0) AS MOD_PLAN_AMT11,
            ISNULL(A.PLAN_QTY12,0) AS PLAN_QTY12,
            ISNULL(A.PLAN_AMT12,0) AS PLAN_AMT12,
            ISNULL(A.MOD_PLAN_Q12,0) AS MOD_PLAN_Q12,
            ISNULL(A.MOD_PLAN_AMT12,0) AS MOD_PLAN_AMT12,
                    A.UPDATE_DB_USER,
                    A.UPDATE_DB_TIME,
                    A.COMP_CODE
    FROM            SSP100T A WITH (NOLOCK)
           INNER JOIN BPR100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                             AND B.ITEM_CODE = A.PLAN_TYPE2_CODE
                                             AND B.USE_YN    = 'Y'
           INNER JOIN BPR200T C WITH (NOLOCK) ON C.COMP_CODE = A.COMP_CODE
                                             AND C.DIV_CODE  = A.DIV_CODE
                                             AND C.ITEM_CODE = A.PLAN_TYPE2_CODE
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        AND A.PLAN_TYPE2 = '5'
       AND C.ITEM_ACCOUNT = #{ITEM_ACCOUNT}--sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ] Query15
       AND A.DIV_CODE   = #{DIV_CODE}
       AND A.PLAN_YEAR  = #{PLAN_YEAR}
       AND A.PLAN_TYPE1 = #{ORDER_TYPE}
       AND A.MONEY_UNIT = #{MONEY_UNIT}
     ORDER BY ITEM_CODE
    </select>
    
 	<insert id="sgp100ukrvService.insertExcelSgp100ukrv5" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL_QTY(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG 
	    , CUSTOM_CODE
	    , CUSTOM_NAME
	    , ITEM_CODE
	    , ITEM_NAME
	    , PLAN_QTY1
	    , PLAN_AMT1
	    , PLAN_QTY2
	    , PLAN_AMT2
	    , PLAN_QTY3
	    , PLAN_AMT3
	    , PLAN_QTY4
	    , PLAN_AMT4
	    , PLAN_QTY5
	    , PLAN_AMT5
	    , PLAN_QTY6
	    , PLAN_AMT6
	    , PLAN_QTY7
	    , PLAN_AMT7
	    , PLAN_QTY8
	    , PLAN_AMT8
	    , PLAN_QTY9
	    , PLAN_AMT9
	    , PLAN_QTY10
	    , PLAN_AMT10
	    , PLAN_QTY11
	    , PLAN_AMT11
	    , PLAN_QTY12
	    , PLAN_AMT12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , ''
	    , ''
    	, #{ITEM_CODE}
	    , #{ITEM_NAME} 
	    , #{PLAN_QTY1}
	    , #{PLAN_AMT1}
	    , #{PLAN_QTY2}
	    , #{PLAN_AMT2}
	    , #{PLAN_QTY3}
	    , #{PLAN_AMT3}
	    , #{PLAN_QTY4}
	    , #{PLAN_AMT4}
	    , #{PLAN_QTY5}
	    , #{PLAN_AMT5}
	    , #{PLAN_QTY6}
	    , #{PLAN_AMT6}
	    , #{PLAN_QTY7}
	    , #{PLAN_AMT7}
	    , #{PLAN_QTY8}
	    , #{PLAN_AMT8}
	    , #{PLAN_QTY9}
	    , #{PLAN_AMT9}
	    , #{PLAN_QTY10}
	    , #{PLAN_AMT10}
	    , #{PLAN_QTY11}
	    , #{PLAN_AMT11}
	    , #{PLAN_QTY12}
	    , #{PLAN_AMT12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
       
    
	<update id="excelValidate5" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.ITEM_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 품목입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END),
            A.ITEM_NAME  = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ''
                                  ELSE B.ITEM_NAME
                                  END)
                                 
    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
		       LEFT JOIN BPR200T B WITH (NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
		                                        AND B.DIV_CODE  = #{DIV_CODE}
		                                        AND B.ITEM_CODE = A.ITEM_CODE							         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = #{ORDER_TYPE}
										AND B.PLAN_TYPE2 = '5'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = A.ITEM_CODE


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet5" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG
	    , A.ITEM_CODE
	    , A.ITEM_NAME
        , ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q 
        , ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT  
	    , A.PLAN_QTY1
	    , A.PLAN_AMT1
	    , A.PLAN_QTY2
	    , A.PLAN_AMT2
	    , A.PLAN_QTY3
	    , A.PLAN_AMT3
	    , A.PLAN_QTY4
	    , A.PLAN_AMT4
	    , A.PLAN_QTY5
	    , A.PLAN_AMT5
	    , A.PLAN_QTY6
	    , A.PLAN_AMT6
	    , A.PLAN_QTY7
	    , A.PLAN_AMT7
	    , A.PLAN_QTY8
	    , A.PLAN_AMT8
	    , A.PLAN_QTY9
	    , A.PLAN_AMT9
	    , A.PLAN_QTY10
	    , A.PLAN_AMT10
	    , A.PLAN_QTY11
	    , A.PLAN_AMT11
	    , A.PLAN_QTY12
	    , A.PLAN_AMT12	    
	      FROM SGP100UKRV_EXCEL_QTY A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select>       
    
    <insert id="sgp100ukrvService.insertDetail5" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}           				       
					   )    	
    	
    	BEGIN
        INSERT INTO ssp100T
             ( DIV_CODE
             , PLAN_YEAR
             , PLAN_TYPE1
             , PLAN_TYPE2
             , PLAN_TYPE2_CODE
             , LEVEL_KIND
             , MONEY_UNIT
             , ENT_MONEY_UNIT
             , CONFIRM_YN
             , PLAN_QTY1
             , PLAN_AMT1
             , MOD_PLAN_Q1
             , MOD_PLAN_AMT1
             , PLAN_QTY2
             , PLAN_AMT2
             , MOD_PLAN_Q2
             , MOD_PLAN_AMT2
             , PLAN_QTY3
             , PLAN_AMT3
             , MOD_PLAN_Q3
             , MOD_PLAN_AMT3
             , PLAN_QTY4
             , PLAN_AMT4
             , MOD_PLAN_Q4
             , MOD_PLAN_AMT4
             , PLAN_QTY5
             , PLAN_AMT5
             , MOD_PLAN_Q5
             , MOD_PLAN_AMT5
             , PLAN_QTY6
             , PLAN_AMT6
             , MOD_PLAN_Q6
             , MOD_PLAN_AMT6
             , PLAN_QTY7
             , PLAN_AMT7
             , MOD_PLAN_Q7
             , MOD_PLAN_AMT7
             , PLAN_QTY8
             , PLAN_AMT8
             , MOD_PLAN_Q8
             , MOD_PLAN_AMT8
             , PLAN_QTY9
             , PLAN_AMT9
             , MOD_PLAN_Q9
             , MOD_PLAN_AMT9
             , PLAN_QTY10
             , PLAN_AMT10
             , MOD_PLAN_Q10
             , MOD_PLAN_AMT10
             , PLAN_QTY11
             , PLAN_AMT11
             , MOD_PLAN_Q11
             , MOD_PLAN_AMT11
             , PLAN_QTY12
             , PLAN_AMT12
             , MOD_PLAN_Q12
             , MOD_PLAN_AMT12
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
             , COMP_CODE
             ) 
        VALUES
             ( #{DIV_CODE}         
             , #{PLAN_YEAR}        
             , #{PLAN_TYPE1}       
             , #{PLAN_TYPE2}       
             , #{PLAN_TYPE2_CODE}  
             , #{LEVEL_KIND}       
             , #{MONEY_UNIT}       
             , #{ENT_MONEY_UNIT}   
             , #{CONFIRM_YN}       
             , #{PLAN_QTY1}        
             , #{PLAN_AMT1}        
             , #{MOD_PLAN_Q1}      
             , #{MOD_PLAN_AMT1}    
             , #{PLAN_QTY2}        
             , #{PLAN_AMT2}        
             , #{MOD_PLAN_Q2}      
             , #{MOD_PLAN_AMT2}    
             , #{PLAN_QTY3}        
             , #{PLAN_AMT3}        
             , #{MOD_PLAN_Q3}      
             , #{MOD_PLAN_AMT3}    
             , #{PLAN_QTY4}        
             , #{PLAN_AMT4}        
             , #{MOD_PLAN_Q4}      
             , #{MOD_PLAN_AMT4}    
             , #{PLAN_QTY5}        
             , #{PLAN_AMT5}        
             , #{MOD_PLAN_Q5}      
             , #{MOD_PLAN_AMT5}    
             , #{PLAN_QTY6}        
             , #{PLAN_AMT6}        
             , #{MOD_PLAN_Q6}      
             , #{MOD_PLAN_AMT6}    
             , #{PLAN_QTY7}        
             , #{PLAN_AMT7}        
             , #{MOD_PLAN_Q7}      
             , #{MOD_PLAN_AMT7}    
             , #{PLAN_QTY8}        
             , #{PLAN_AMT8}        
             , #{MOD_PLAN_Q8}      
             , #{MOD_PLAN_AMT8}    
             , #{PLAN_QTY9}        
             , #{PLAN_AMT9}        
             , #{MOD_PLAN_Q9}      
             , #{MOD_PLAN_AMT9}    
             , #{PLAN_QTY10}       
             , #{PLAN_AMT10}       
             , #{MOD_PLAN_Q10}     
             , #{MOD_PLAN_AMT10}   
             , #{PLAN_QTY11}       
             , #{PLAN_AMT11}       
             , #{MOD_PLAN_Q11}     
             , #{MOD_PLAN_AMT11}   
             , #{PLAN_QTY12}       
             , #{PLAN_AMT12}       
             , #{MOD_PLAN_Q12}     
             , #{MOD_PLAN_AMT12}   
             , #{S_USER_ID}   
             , GETDATE()   
             , #{S_COMP_CODE}        
             )
       END
       ELSE      
       BEGIN      
        UPDATE ssp100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_QTY1       = #{PLAN_QTY1}
             , PLAN_AMT1       = #{PLAN_AMT1}
             , MOD_PLAN_Q1     = #{MOD_PLAN_Q1}
             , MOD_PLAN_AMT1   = #{MOD_PLAN_AMT1}
             , PLAN_QTY2       = #{PLAN_QTY2}
             , PLAN_AMT2       = #{PLAN_AMT2}
             , MOD_PLAN_Q2     = #{MOD_PLAN_Q2}
             , MOD_PLAN_AMT2   = #{MOD_PLAN_AMT2}
             , PLAN_QTY3       = #{PLAN_QTY3}
             , PLAN_AMT3       = #{PLAN_AMT3}
             , MOD_PLAN_Q3     = #{MOD_PLAN_Q3}
             , MOD_PLAN_AMT3   = #{MOD_PLAN_AMT3}
             , PLAN_QTY4       = #{PLAN_QTY4}
             , PLAN_AMT4       = #{PLAN_AMT4}
             , MOD_PLAN_Q4     = #{MOD_PLAN_Q4}
             , MOD_PLAN_AMT4   = #{MOD_PLAN_AMT4}
             , PLAN_QTY5       = #{PLAN_QTY5}
             , PLAN_AMT5       = #{PLAN_AMT5}
             , MOD_PLAN_Q5     = #{MOD_PLAN_Q5}
             , MOD_PLAN_AMT5   = #{MOD_PLAN_AMT5}
             , PLAN_QTY6       = #{PLAN_QTY6}
             , PLAN_AMT6       = #{PLAN_AMT6}
             , MOD_PLAN_Q6     = #{MOD_PLAN_Q6}
             , MOD_PLAN_AMT6   = #{MOD_PLAN_AMT6}
             , PLAN_QTY7       = #{PLAN_QTY7}
             , PLAN_AMT7       = #{PLAN_AMT7}
             , MOD_PLAN_Q7     = #{MOD_PLAN_Q7}
             , MOD_PLAN_AMT7   = #{MOD_PLAN_AMT7}
             , PLAN_QTY8       = #{PLAN_QTY8}
             , PLAN_AMT8       = #{PLAN_AMT8}
             , MOD_PLAN_Q8     = #{MOD_PLAN_Q8}
             , MOD_PLAN_AMT8   = #{MOD_PLAN_AMT8}
             , PLAN_QTY9       = #{PLAN_QTY9}
             , PLAN_AMT9       = #{PLAN_AMT9}
             , MOD_PLAN_Q9     = #{MOD_PLAN_Q9}
             , MOD_PLAN_AMT9   = #{MOD_PLAN_AMT9}
             , PLAN_QTY10      = #{PLAN_QTY10}
             , PLAN_AMT10      = #{PLAN_AMT10}
             , MOD_PLAN_Q10    = #{MOD_PLAN_Q10}
             , MOD_PLAN_AMT10  = #{MOD_PLAN_AMT10}
             , PLAN_QTY11      = #{PLAN_QTY11}
             , PLAN_AMT11      = #{PLAN_AMT11}
             , MOD_PLAN_Q11    = #{MOD_PLAN_Q11}
             , MOD_PLAN_AMT11  = #{MOD_PLAN_AMT11}
             , PLAN_QTY12      = #{PLAN_QTY12}
             , PLAN_AMT12      = #{PLAN_AMT12}
             , MOD_PLAN_Q12    = #{MOD_PLAN_Q12}
             , MOD_PLAN_AMT12  = #{MOD_PLAN_AMT12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
        
        END             
    </insert>
    
    <update id="sgp100ukrvService.updateDetail5" parameterType="Map">
        UPDATE ssp100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}
             , CONFIRM_YN      = #{CONFIRM_YN}
             , PLAN_QTY1       = #{PLAN_QTY1}
             , PLAN_AMT1       = #{PLAN_AMT1}
             , MOD_PLAN_Q1     = #{MOD_PLAN_Q1}
             , MOD_PLAN_AMT1   = #{MOD_PLAN_AMT1}
             , PLAN_QTY2       = #{PLAN_QTY2}
             , PLAN_AMT2       = #{PLAN_AMT2}
             , MOD_PLAN_Q2     = #{MOD_PLAN_Q2}
             , MOD_PLAN_AMT2   = #{MOD_PLAN_AMT2}
             , PLAN_QTY3       = #{PLAN_QTY3}
             , PLAN_AMT3       = #{PLAN_AMT3}
             , MOD_PLAN_Q3     = #{MOD_PLAN_Q3}
             , MOD_PLAN_AMT3   = #{MOD_PLAN_AMT3}
             , PLAN_QTY4       = #{PLAN_QTY4}
             , PLAN_AMT4       = #{PLAN_AMT4}
             , MOD_PLAN_Q4     = #{MOD_PLAN_Q4}
             , MOD_PLAN_AMT4   = #{MOD_PLAN_AMT4}
             , PLAN_QTY5       = #{PLAN_QTY5}
             , PLAN_AMT5       = #{PLAN_AMT5}
             , MOD_PLAN_Q5     = #{MOD_PLAN_Q5}
             , MOD_PLAN_AMT5   = #{MOD_PLAN_AMT5}
             , PLAN_QTY6       = #{PLAN_QTY6}
             , PLAN_AMT6       = #{PLAN_AMT6}
             , MOD_PLAN_Q6     = #{MOD_PLAN_Q6}
             , MOD_PLAN_AMT6   = #{MOD_PLAN_AMT6}
             , PLAN_QTY7       = #{PLAN_QTY7}
             , PLAN_AMT7       = #{PLAN_AMT7}
             , MOD_PLAN_Q7     = #{MOD_PLAN_Q7}
             , MOD_PLAN_AMT7   = #{MOD_PLAN_AMT7}
             , PLAN_QTY8       = #{PLAN_QTY8}
             , PLAN_AMT8       = #{PLAN_AMT8}
             , MOD_PLAN_Q8     = #{MOD_PLAN_Q8}
             , MOD_PLAN_AMT8   = #{MOD_PLAN_AMT8}
             , PLAN_QTY9       = #{PLAN_QTY9}
             , PLAN_AMT9       = #{PLAN_AMT9}
             , MOD_PLAN_Q9     = #{MOD_PLAN_Q9}
             , MOD_PLAN_AMT9   = #{MOD_PLAN_AMT9}
             , PLAN_QTY10      = #{PLAN_QTY10}
             , PLAN_AMT10      = #{PLAN_AMT10}
             , MOD_PLAN_Q10    = #{MOD_PLAN_Q10}
             , MOD_PLAN_AMT10  = #{MOD_PLAN_AMT10}
             , PLAN_QTY11      = #{PLAN_QTY11}
             , PLAN_AMT11      = #{PLAN_AMT11}
             , MOD_PLAN_Q11    = #{MOD_PLAN_Q11}
             , MOD_PLAN_AMT11  = #{MOD_PLAN_AMT11}
             , PLAN_QTY12      = #{PLAN_QTY12}
             , PLAN_AMT12      = #{PLAN_AMT12}
             , MOD_PLAN_Q12    = #{MOD_PLAN_Q12}
             , MOD_PLAN_AMT12  = #{MOD_PLAN_AMT12}
             , UPDATE_DB_USER  = #{S_USER_ID}
             , UPDATE_DB_TIME  = GETDATE()
             
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail5" parameterType="Map">
        DELETE FROM ssp100T 
         WHERE DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
           AND COMP_CODE       = #{S_COMP_CODE}      
    </delete>
    
    <select id="sgp100ukrvService.customerItemSelectList" parameterType="Map" resultType="rMap">        
    --sgp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 
    SELECT    A.DIV_CODE
         , A.PLAN_YEAR
         , A.PLAN_TYPE1
         , A.PLAN_TYPE2
         , A.LEVEL_KIND
         , A.MONEY_UNIT
         , A.ENT_MONEY_UNIT
         , A.CONFIRM_YN
         , B.CUSTOM_CODE AS CUSTOM_CODE
         , uniLITE.fnCustNameComp(B.COMP_CODE, #{S_USER_ID}, B.CUSTOM_CODE) AS CUSTOM_NAME
         , C.ITEM_CODE
         , C.ITEM_NAME
         , C.SPEC  
         , A.PLAN_TYPE2_CODE
         , A.PLAN_TYPE2_CODE2
         , ISNULL(C.SALE_BASIS_P,0) As SALE_BASIS_P ,--sgp100ukrv.Csgp100ukrv[fnsgp100ItemQ]Query14
             ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q, 
             ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT, 
             ISNULL(A.MOD_PLAN_Q1,0) + ISNULL(A.MOD_PLAN_Q2,0) + ISNULL(A.MOD_PLAN_Q3,0) + ISNULL(A.MOD_PLAN_Q4,0) + ISNULL(A.MOD_PLAN_Q5,0) + ISNULL(A.MOD_PLAN_Q6,0) + ISNULL(A.MOD_PLAN_Q7,0) + ISNULL(A.MOD_PLAN_Q8,0) + ISNULL(A.MOD_PLAN_Q9,0) + ISNULL(A.MOD_PLAN_Q10,0) + ISNULL(A.MOD_PLAN_Q11,0) + ISNULL(A.MOD_PLAN_Q12,0)  AS MOD_PLAN_SUM_Q, 
             ISNULL(A.MOD_PLAN_AMT1,0) + ISNULL(A.MOD_PLAN_AMT2,0) + ISNULL(A.MOD_PLAN_AMT3,0) + ISNULL(A.MOD_PLAN_AMT4,0) + ISNULL(A.MOD_PLAN_AMT5,0) + ISNULL(A.MOD_PLAN_AMT6,0) + ISNULL(A.MOD_PLAN_AMT7,0) + ISNULL(A.MOD_PLAN_AMT8,0) + ISNULL(A.MOD_PLAN_AMT9,0) + ISNULL(A.MOD_PLAN_AMT10,0) + ISNULL(A.MOD_PLAN_AMT11,0) + ISNULL(A.MOD_PLAN_AMT12,0)  AS MOD_PLAN_SUM_AMT, 
            ISNULL(A.PLAN_QTY1,0) AS PLAN_QTY1,
            ISNULL(A.PLAN_AMT1,0) AS PLAN_AMT1,
            ISNULL(A.MOD_PLAN_Q1,0) AS MOD_PLAN_Q1,
            ISNULL(A.MOD_PLAN_AMT1,0) AS MOD_PLAN_AMT1,
            ISNULL(A.PLAN_QTY2,0) AS PLAN_QTY2,
            ISNULL(A.PLAN_AMT2,0) AS PLAN_AMT2,
            ISNULL(A.MOD_PLAN_Q2,0) AS MOD_PLAN_Q2,
            ISNULL(A.MOD_PLAN_AMT2,0) AS MOD_PLAN_AMT2,
            ISNULL(A.PLAN_QTY3,0) AS PLAN_QTY3,
            ISNULL(A.PLAN_AMT3,0) AS PLAN_AMT3,
            ISNULL(A.MOD_PLAN_Q3,0) AS MOD_PLAN_Q3,
            ISNULL(A.MOD_PLAN_AMT3,0) AS MOD_PLAN_AMT3,
            ISNULL(A.PLAN_QTY4,0) AS PLAN_QTY4,
            ISNULL(A.PLAN_AMT4,0) AS PLAN_AMT4,
            ISNULL(A.MOD_PLAN_Q4,0) AS MOD_PLAN_Q4,
            ISNULL(A.MOD_PLAN_AMT4,0) AS MOD_PLAN_AMT4,
            ISNULL(A.PLAN_QTY5,0) AS PLAN_QTY5,
            ISNULL(A.PLAN_AMT5,0) AS PLAN_AMT5,
            ISNULL(A.MOD_PLAN_Q5,0) AS MOD_PLAN_Q5,
            ISNULL(A.MOD_PLAN_AMT5,0) AS MOD_PLAN_AMT5,
            ISNULL(A.PLAN_QTY6,0) AS PLAN_QTY6,
            ISNULL(A.PLAN_AMT6,0) AS PLAN_AMT6,
            ISNULL(A.MOD_PLAN_Q6,0) AS MOD_PLAN_Q6,
            ISNULL(A.MOD_PLAN_AMT6,0) AS MOD_PLAN_AMT6,
            ISNULL(A.PLAN_QTY7,0) AS PLAN_QTY7,
            ISNULL(A.PLAN_AMT7,0) AS PLAN_AMT7,
            ISNULL(A.MOD_PLAN_Q7,0) AS MOD_PLAN_Q7,
            ISNULL(A.MOD_PLAN_AMT7,0) AS MOD_PLAN_AMT7,
            ISNULL(A.PLAN_QTY8,0) AS PLAN_QTY8,
            ISNULL(A.PLAN_AMT8,0) AS PLAN_AMT8,
            ISNULL(A.MOD_PLAN_Q8,0) AS MOD_PLAN_Q8,
            ISNULL(A.MOD_PLAN_AMT8,0) AS MOD_PLAN_AMT8,
            ISNULL(A.PLAN_QTY9,0) AS PLAN_QTY9,
            ISNULL(A.PLAN_AMT9,0) AS PLAN_AMT9,
            ISNULL(A.MOD_PLAN_Q9,0) AS MOD_PLAN_Q9,
            ISNULL(A.MOD_PLAN_AMT9,0) AS MOD_PLAN_AMT9,
            ISNULL(A.PLAN_QTY10,0) AS PLAN_QTY10,
            ISNULL(A.PLAN_AMT10,0) AS PLAN_AMT10,
            ISNULL(A.MOD_PLAN_Q10,0) AS MOD_PLAN_Q10,
            ISNULL(A.MOD_PLAN_AMT10,0) AS MOD_PLAN_AMT10,
            ISNULL(A.PLAN_QTY11,0) AS PLAN_QTY11,
            ISNULL(A.PLAN_AMT11,0) AS PLAN_AMT11,
            ISNULL(A.MOD_PLAN_Q11,0) AS MOD_PLAN_Q11,
            ISNULL(A.MOD_PLAN_AMT11,0) AS MOD_PLAN_AMT11,
            ISNULL(A.PLAN_QTY12,0) AS PLAN_QTY12,
            ISNULL(A.PLAN_AMT12,0) AS PLAN_AMT12,
            ISNULL(A.MOD_PLAN_Q12,0) AS MOD_PLAN_Q12,
            ISNULL(A.MOD_PLAN_AMT12,0) AS MOD_PLAN_AMT12,
                    A.UPDATE_DB_USER,
                    A.UPDATE_DB_TIME,
                    A.COMP_CODE
      FROM SSP100T A  WITH (NOLOCK)
                   LEFT  JOIN  BCM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                      AND A.PLAN_TYPE2_CODE2 = B.CUSTOM_CODE 
                                                      AND B.USE_YN = 'Y' 
                                                      AND B.CUSTOM_TYPE IN ('1','3')
                   LEFT  JOIN  (SELECT    AA.COMP_CODE
                                     , AA.ITEM_CODE
                                     , uniLITE.fnItemNameComp(#{S_COMP_CODE}, #{S_USER_ID},AA.ITEM_CODE) AS ITEM_NAME 
                                     , AA.SALE_BASIS_P
                                     , AA.USE_YN
                                     , BB.ITEM_ACCOUNT
                                     , AA.SPEC
                                  FROM BPR100T AA WITH (NOLOCK)
                                     , BPR200T BB WITH (NOLOCK)
                                 WHERE AA.ITEM_CODE = BB.ITEM_CODE 
                                   AND BB.DIV_CODE   = #{DIV_CODE}
                                   AND AA.COMP_CODE = BB.COMP_CODE ) C ON A.COMP_CODE = C.COMP_CODE
                                                                             AND A.PLAN_TYPE2_CODE  = C.ITEM_CODE 
                                                                             AND C.USE_YN           = 'Y'
     WHERE A.COMP_CODE = #{S_COMP_CODE}
       AND A.PLAN_TYPE2 = '6'
       AND B.AGENT_TYPE = #{AGENT_TYPE}
       AND A.DIV_CODE   = #{DIV_CODE}
       AND A.PLAN_YEAR  = #{PLAN_YEAR}
       AND A.PLAN_TYPE1 = #{ORDER_TYPE}
       AND A.MONEY_UNIT = #{MONEY_UNIT}
     ORDER BY CUSTOM_CODE
    </select>
    
 	<insert id="sgp100ukrvService.insertExcelSgp100ukrv6" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL_QTY(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG 
	    , CUSTOM_CODE
	    , CUSTOM_NAME
	    , ITEM_CODE
	    , ITEM_NAME
	    , PLAN_QTY1
	    , PLAN_AMT1
	    , PLAN_QTY2
	    , PLAN_AMT2
	    , PLAN_QTY3
	    , PLAN_AMT3
	    , PLAN_QTY4
	    , PLAN_AMT4
	    , PLAN_QTY5
	    , PLAN_AMT5
	    , PLAN_QTY6
	    , PLAN_AMT6
	    , PLAN_QTY7
	    , PLAN_AMT7
	    , PLAN_QTY8
	    , PLAN_AMT8
	    , PLAN_QTY9
	    , PLAN_AMT9
	    , PLAN_QTY10
	    , PLAN_AMT10
	    , PLAN_QTY11
	    , PLAN_AMT11
	    , PLAN_QTY12
	    , PLAN_AMT12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
    	, #{CUSTOM_CODE}
	    , #{CUSTOM_NAME} 	  
    	, #{ITEM_CODE}
	    , #{ITEM_NAME} 
	    , #{PLAN_QTY1}
	    , #{PLAN_AMT1}
	    , #{PLAN_QTY2}
	    , #{PLAN_AMT2}
	    , #{PLAN_QTY3}
	    , #{PLAN_AMT3}
	    , #{PLAN_QTY4}
	    , #{PLAN_AMT4}
	    , #{PLAN_QTY5}
	    , #{PLAN_AMT5}
	    , #{PLAN_QTY6}
	    , #{PLAN_AMT6}
	    , #{PLAN_QTY7}
	    , #{PLAN_AMT7}
	    , #{PLAN_QTY8}
	    , #{PLAN_AMT8}
	    , #{PLAN_QTY9}
	    , #{PLAN_AMT9}
	    , #{PLAN_QTY10}
	    , #{PLAN_AMT10}
	    , #{PLAN_QTY11}
	    , #{PLAN_AMT11}
	    , #{PLAN_QTY12}
	    , #{PLAN_AMT12}

	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>     

	<update id="excelValidate6" >
	
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.ITEM_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 품목입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END),
            A.ITEM_NAME  = (CASE WHEN B.ITEM_CODE IS  NULL      THEN ''
                                  ELSE B.ITEM_NAME
                                  END)
                                 
    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
		       LEFT JOIN BPR200T B WITH (NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
		                                        AND B.DIV_CODE  = #{DIV_CODE}
		                                        AND B.ITEM_CODE = A.ITEM_CODE							         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL_QTY A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = #{ORDER_TYPE}
										AND B.PLAN_TYPE2 = '6'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = A.ITEM_CODE


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 


	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet6" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG	
	    , A.CUSTOM_CODE
	    , A.CUSTOM_NAME 
	    , A.ITEM_CODE
	    , A.ITEM_NAME
        , ISNULL(A.PLAN_QTY1,0) + ISNULL(A.PLAN_QTY2,0) + ISNULL(A.PLAN_QTY3,0) + ISNULL(A.PLAN_QTY4,0) + ISNULL(A.PLAN_QTY5,0) + ISNULL(A.PLAN_QTY6,0) + ISNULL(A.PLAN_QTY7,0) + ISNULL(A.PLAN_QTY8,0) + ISNULL(A.PLAN_QTY9,0) + ISNULL(A.PLAN_QTY10,0) + ISNULL(A.PLAN_QTY11,0) + ISNULL(A.PLAN_QTY12,0)  AS PLAN_SUM_Q 
        , ISNULL(A.PLAN_AMT1,0) + ISNULL(A.PLAN_AMT2,0) + ISNULL(A.PLAN_AMT3,0) + ISNULL(A.PLAN_AMT4,0) + ISNULL(A.PLAN_AMT5,0) + ISNULL(A.PLAN_AMT6,0) + ISNULL(A.PLAN_AMT7,0) + ISNULL(A.PLAN_AMT8,0) + ISNULL(A.PLAN_AMT9,0) + ISNULL(A.PLAN_AMT10,0) + ISNULL(A.PLAN_AMT11,0) + ISNULL(A.PLAN_AMT12,0)  AS PLAN_SUM_AMT  
	    , A.PLAN_QTY1
	    , A.PLAN_AMT1
	    , A.PLAN_QTY2
	    , A.PLAN_AMT2
	    , A.PLAN_QTY3
	    , A.PLAN_AMT3
	    , A.PLAN_QTY4
	    , A.PLAN_AMT4
	    , A.PLAN_QTY5
	    , A.PLAN_AMT5
	    , A.PLAN_QTY6
	    , A.PLAN_AMT6
	    , A.PLAN_QTY7
	    , A.PLAN_AMT7
	    , A.PLAN_QTY8
	    , A.PLAN_AMT8
	    , A.PLAN_QTY9
	    , A.PLAN_AMT9
	    , A.PLAN_QTY10
	    , A.PLAN_AMT10
	    , A.PLAN_QTY11
	    , A.PLAN_AMT11
	    , A.PLAN_QTY12
	    , A.PLAN_AMT12	    
	      FROM SGP100UKRV_EXCEL_QTY A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select>        
    
    <insert id="sgp100ukrvService.insertDetail6" parameterType="Map">
    INSERT INTO ssp100T
         ( DIV_CODE
         , PLAN_YEAR
         , PLAN_TYPE1
         , PLAN_TYPE2
         , LEVEL_KIND
         , MONEY_UNIT
         , ENT_MONEY_UNIT
         , CONFIRM_YN
         , PLAN_TYPE2_CODE
         , PLAN_TYPE2_CODE2
         , PLAN_QTY1
         , PLAN_AMT1
         , MOD_PLAN_Q1
         , MOD_PLAN_AMT1
         , PLAN_QTY2
         , PLAN_AMT2
         , MOD_PLAN_Q2
         , MOD_PLAN_AMT2
         , PLAN_QTY3
         , PLAN_AMT3
         , MOD_PLAN_Q3
         , MOD_PLAN_AMT3
         , PLAN_QTY4
         , PLAN_AMT4
         , MOD_PLAN_Q4
         , MOD_PLAN_AMT4
         , PLAN_QTY5
         , PLAN_AMT5
         , MOD_PLAN_Q5
         , MOD_PLAN_AMT5
         , PLAN_QTY6
         , PLAN_AMT6
         , MOD_PLAN_Q6
         , MOD_PLAN_AMT6
         , PLAN_QTY7
         , PLAN_AMT7
         , MOD_PLAN_Q7
         , MOD_PLAN_AMT7
         , PLAN_QTY8
         , PLAN_AMT8
         , MOD_PLAN_Q8
         , MOD_PLAN_AMT8
         , PLAN_QTY9
         , PLAN_AMT9
         , MOD_PLAN_Q9
         , MOD_PLAN_AMT9
         , PLAN_QTY10
         , PLAN_AMT10
         , MOD_PLAN_Q10
         , MOD_PLAN_AMT10
         , PLAN_QTY11
         , PLAN_AMT11
         , MOD_PLAN_Q11
         , MOD_PLAN_AMT11
         , PLAN_QTY12
         , PLAN_AMT12
         , MOD_PLAN_Q12
         , MOD_PLAN_AMT12
         , UPDATE_DB_USER
         , UPDATE_DB_TIME
         , COMP_CODE
         ) 
    VALUES
         ( #{DIV_CODE}
         , #{PLAN_YEAR}
         , #{PLAN_TYPE1}         
         , #{PLAN_TYPE2}         
         , #{LEVEL_KIND}         
         , #{MONEY_UNIT}         
         , #{ENT_MONEY_UNIT}     
         , #{CONFIRM_YN}         
         , #{PLAN_TYPE2_CODE}    
         , #{PLAN_TYPE2_CODE2}   
         , #{PLAN_QTY1}          
         , #{PLAN_AMT1}          
         , #{MOD_PLAN_Q1}   
         , #{MOD_PLAN_AMT1}      
         , #{PLAN_QTY2}
         , #{PLAN_AMT2}
         , #{MOD_PLAN_Q2}   
         , #{MOD_PLAN_AMT2}      
         , #{PLAN_QTY3}   
         , #{PLAN_AMT3}   
         , #{MOD_PLAN_Q3}
         , #{MOD_PLAN_AMT3}      
         , #{PLAN_QTY4}  
         , #{PLAN_AMT4}  
         , #{MOD_PLAN_Q4}    
         , #{MOD_PLAN_AMT4}      
         , #{PLAN_QTY5}  
         , #{PLAN_AMT5}  
         , #{MOD_PLAN_Q5}     
         , #{MOD_PLAN_AMT5}      
         , #{PLAN_QTY6}    
         , #{PLAN_AMT6}    
         , #{MOD_PLAN_Q6}    
         , #{MOD_PLAN_AMT6}      
         , #{PLAN_QTY7}     
         , #{PLAN_AMT7}     
         , #{MOD_PLAN_Q7}     
         , #{MOD_PLAN_AMT7}      
         , #{PLAN_QTY8} 
         , #{PLAN_AMT8} 
         , #{MOD_PLAN_Q8}   
         , #{MOD_PLAN_AMT8}      
         , #{PLAN_QTY9}   
         , #{PLAN_AMT9}   
         , #{MOD_PLAN_Q9}     
         , #{MOD_PLAN_AMT9}      
         , #{PLAN_QTY10}         
         , #{PLAN_AMT10}         
         , #{MOD_PLAN_Q10}       
         , #{MOD_PLAN_AMT10}     
         , #{PLAN_QTY11}   
         , #{PLAN_AMT11}   
         , #{MOD_PLAN_Q11}    
         , #{MOD_PLAN_AMT11}     
         , #{PLAN_QTY12}  
         , #{PLAN_AMT12}   
         , #{MOD_PLAN_Q12}     
         , #{MOD_PLAN_AMT12}     
         , #{S_USER_ID}     
         , GETDATE()     
         , #{S_COMP_CODE}          
         )   
    </insert>
    
    <update id="sgp100ukrvService.updateDetail6" parameterType="Map">
    UPDATE ssp100T
       SET ENT_MONEY_UNIT   = #{ENT_MONEY_UNIT}
         , CONFIRM_YN       = #{CONFIRM_YN}
         , PLAN_QTY1        = #{PLAN_QTY1}
         , PLAN_AMT1        = #{PLAN_AMT1}
         , MOD_PLAN_Q1      = #{MOD_PLAN_Q1}
         , MOD_PLAN_AMT1    = #{MOD_PLAN_AMT1}
         , PLAN_QTY2        = #{PLAN_QTY2}
         , PLAN_AMT2        = #{PLAN_AMT2}
         , MOD_PLAN_Q2      = #{MOD_PLAN_Q2}
         , MOD_PLAN_AMT2    = #{MOD_PLAN_AMT2}
         , PLAN_QTY3        = #{PLAN_QTY3}
         , PLAN_AMT3        = #{PLAN_AMT3}
         , MOD_PLAN_Q3      = #{MOD_PLAN_Q3}
         , MOD_PLAN_AMT3    = #{MOD_PLAN_AMT3}
         , PLAN_QTY4        = #{PLAN_QTY4}
         , PLAN_AMT4        = #{PLAN_AMT4}
         , MOD_PLAN_Q4      = #{MOD_PLAN_Q4}
         , MOD_PLAN_AMT4    = #{MOD_PLAN_AMT4}
         , PLAN_QTY5        = #{PLAN_QTY5}
         , PLAN_AMT5        = #{PLAN_AMT5}
         , MOD_PLAN_Q5      = #{MOD_PLAN_Q5}
         , MOD_PLAN_AMT5    = #{MOD_PLAN_AMT5}
         , PLAN_QTY6        = #{PLAN_QTY6}
         , PLAN_AMT6        = #{PLAN_AMT6}
         , MOD_PLAN_Q6      = #{MOD_PLAN_Q6}
         , MOD_PLAN_AMT6    = #{MOD_PLAN_AMT6}
         , PLAN_QTY7        = #{PLAN_QTY7}
         , PLAN_AMT7        = #{PLAN_AMT7}
         , MOD_PLAN_Q7      = #{MOD_PLAN_Q7}
         , MOD_PLAN_AMT7    = #{MOD_PLAN_AMT7}
         , PLAN_QTY8        = #{PLAN_QTY8}
         , PLAN_AMT8        = #{PLAN_AMT8}
         , MOD_PLAN_Q8      = #{MOD_PLAN_Q8}
         , MOD_PLAN_AMT8    = #{MOD_PLAN_AMT8}
         , PLAN_QTY9        = #{PLAN_QTY9}
         , PLAN_AMT9        = #{PLAN_AMT9}
         , MOD_PLAN_Q9      = #{MOD_PLAN_Q9}
         , MOD_PLAN_AMT9    = #{MOD_PLAN_AMT9}
         , PLAN_QTY10       = #{PLAN_QTY10}
         , PLAN_AMT10       = #{PLAN_AMT10}
         , MOD_PLAN_Q10     = #{MOD_PLAN_Q10}
         , MOD_PLAN_AMT10   = #{MOD_PLAN_AMT10}
         , PLAN_QTY11       = #{PLAN_QTY11}
         , PLAN_AMT11       = #{PLAN_AMT11}
         , MOD_PLAN_Q11     = #{MOD_PLAN_Q11}
         , MOD_PLAN_AMT11   = #{MOD_PLAN_AMT11}
         , PLAN_QTY12       = #{PLAN_QTY12}
         , PLAN_AMT12       = #{PLAN_AMT12}
         , MOD_PLAN_Q12     = #{MOD_PLAN_Q12}
         , MOD_PLAN_AMT12   = #{MOD_PLAN_AMT12}
         , UPDATE_DB_USER   = #{S_USER_ID}
         , UPDATE_DB_TIME   = GETDATE()
         
     WHERE DIV_CODE         = #{DIV_CODE}
       AND PLAN_YEAR        = #{PLAN_YEAR}
       AND PLAN_TYPE1       = #{PLAN_TYPE1}
       AND PLAN_TYPE2       = #{PLAN_TYPE2}
       AND LEVEL_KIND       = #{LEVEL_KIND}
       AND MONEY_UNIT       = #{MONEY_UNIT}
       AND PLAN_TYPE2_CODE  = #{PLAN_TYPE2_CODE}
       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}
       AND COMP_CODE        = #{S_COMP_CODE}
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail6" parameterType="Map">
    DELETE FROM ssp100T 
     WHERE DIV_CODE         = #{DIV_CODE}
       AND PLAN_YEAR        = #{PLAN_YEAR}
       AND PLAN_TYPE1       = #{PLAN_TYPE1}
       AND PLAN_TYPE2       = #{PLAN_TYPE2}
       AND LEVEL_KIND       = #{LEVEL_KIND}
       AND MONEY_UNIT       = #{MONEY_UNIT}
       AND PLAN_TYPE2_CODE  = #{PLAN_TYPE2_CODE}
       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}
       AND COMP_CODE        = #{S_COMP_CODE}
    </delete>
    
    
    <select id="sgp100ukrvService.saleTypeSelectList" parameterType="Map" resultType="rMap">       
    BEGIN
        DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)    /*계획금액단위*/  
        
        
        SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
          FROM       SSP100T A WITH(NOLOCK)
          INNER JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE     
                                           AND B.MAIN_CODE = 'B042'
                                           AND B.SUB_CODE  = A.ENT_MONEY_UNIT          
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = 'S'
           AND A.DIV_CODE   = #{DIV_CODE}
           AND A.PLAN_YEAR  = #{PLAN_YEAR}       
           AND A.MONEY_UNIT = #{MONEY_UNIT}
           
        --sgp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 
        SELECT Z.DIV_CODE
          ,Z.PLAN_YEAR
          ,Z.PLAN_TYPE1
          ,Z.PLAN_TYPE2
          ,Z.PLAN_TYPE2_CODE
          ,Z.LEVEL_KIND
          ,Z.MONEY_UNIT
          ,Z.ENT_MONEY_UNIT
          ,Z.CONFIRM_YN
          ,Z.PLAN_SUM              /   @MONEY_UNIT_DIV      AS PLAN_SUM
          ,Z.MOD_PLAN_SUM          /   @MONEY_UNIT_DIV      AS MOD_PLAN_SUM
          ,Z.A_D_RATE_SUM          /   @MONEY_UNIT_DIV      AS A_D_RATE_SUM
          ,Z.PLAN1                 /   @MONEY_UNIT_DIV      AS PLAN1     
          ,Z.MOD_PLAN1             /   @MONEY_UNIT_DIV      AS MOD_PLAN1 
          ,Z.A_D_RATE1             /   @MONEY_UNIT_DIV      AS A_D_RATE1 
          ,Z.PLAN2                 /   @MONEY_UNIT_DIV      AS PLAN2     
          ,Z.MOD_PLAN2             /   @MONEY_UNIT_DIV      AS MOD_PLAN2 
          ,Z.A_D_RATE2             /   @MONEY_UNIT_DIV      AS A_D_RATE2 
          ,Z.PLAN3                 /   @MONEY_UNIT_DIV      AS PLAN3     
          ,Z.MOD_PLAN3             /   @MONEY_UNIT_DIV      AS MOD_PLAN3 
          ,Z.A_D_RATE3             /   @MONEY_UNIT_DIV      AS A_D_RATE3 
          ,Z.PLAN4                 /   @MONEY_UNIT_DIV      AS PLAN4     
          ,Z.MOD_PLAN4             /   @MONEY_UNIT_DIV      AS MOD_PLAN4 
          ,Z.A_D_RATE4             /   @MONEY_UNIT_DIV      AS A_D_RATE4 
          ,Z.PLAN5                 /   @MONEY_UNIT_DIV      AS PLAN5     
          ,Z.MOD_PLAN5             /   @MONEY_UNIT_DIV      AS MOD_PLAN5 
          ,Z.A_D_RATE5             /   @MONEY_UNIT_DIV      AS A_D_RATE5 
          ,Z.PLAN6                 /   @MONEY_UNIT_DIV      AS PLAN6     
          ,Z.MOD_PLAN6             /   @MONEY_UNIT_DIV      AS MOD_PLAN6 
          ,Z.A_D_RATE6             /   @MONEY_UNIT_DIV      AS A_D_RATE6 
          ,Z.PLAN7                 /   @MONEY_UNIT_DIV      AS PLAN7     
          ,Z.MOD_PLAN7             /   @MONEY_UNIT_DIV      AS MOD_PLAN7 
          ,Z.A_D_RATE7             /   @MONEY_UNIT_DIV      AS A_D_RATE7 
          ,Z.PLAN8                 /   @MONEY_UNIT_DIV      AS PLAN8     
          ,Z.MOD_PLAN8             /   @MONEY_UNIT_DIV      AS MOD_PLAN8 
          ,Z.A_D_RATE8             /   @MONEY_UNIT_DIV      AS A_D_RATE8 
          ,Z.PLAN9                 /   @MONEY_UNIT_DIV      AS PLAN9     
          ,Z.MOD_PLAN9             /   @MONEY_UNIT_DIV      AS MOD_PLAN9 
          ,Z.A_D_RATE9             /   @MONEY_UNIT_DIV      AS A_D_RATE9 
          ,Z.PLAN10                /   @MONEY_UNIT_DIV      AS PLAN10    
          ,Z.MOD_PLAN10            /   @MONEY_UNIT_DIV      AS MOD_PLAN10
          ,Z.A_D_RATE10            /   @MONEY_UNIT_DIV      AS A_D_RATE10
          ,Z.PLAN11                /   @MONEY_UNIT_DIV      AS PLAN11    
          ,Z.MOD_PLAN11            /   @MONEY_UNIT_DIV      AS MOD_PLAN11
          ,Z.A_D_RATE11            /   @MONEY_UNIT_DIV      AS A_D_RATE11
          ,Z.PLAN12                /   @MONEY_UNIT_DIV      AS PLAN12    
          ,Z.MOD_PLAN12            /   @MONEY_UNIT_DIV      AS MOD_PLAN12
          ,Z.A_D_RATE12            /   @MONEY_UNIT_DIV      AS A_D_RATE12
          ,Z.COMP_CODE    
      FROM(
        SELECT A.DIV_CODE 
                 , A.PLAN_YEAR
                 , A.PLAN_TYPE1
                 , A.PLAN_TYPE2
                 , A.PLAN_TYPE2_CODE
                 , A.LEVEL_KIND
                 , A.MONEY_UNIT
                 , A.ENT_MONEY_UNIT
                 , A.CONFIRM_YN
                 , A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12 AS PLAN_SUM, 
                    A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12 AS MOD_PLAN_SUM, 
                    
            CASE ISNULL(A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ((A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) - (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12)) * 100 / ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0)
                            END  
             END  AS A_D_RATE_SUM, 
                    A.PLAN_AMT1 AS PLAN1,
                    A.MOD_PLAN_AMT1 AS MOD_PLAN1,
                    
            CASE ISNULL(A.MOD_PLAN_AMT1, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT1, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT1 - A.PLAN_AMT1 ) * 100 / A.PLAN_AMT1
                            END  
             END  AS A_D_RATE1,
                    A.PLAN_AMT2 AS PLAN2,
                    A.MOD_PLAN_AMT2 AS MOD_PLAN2,
                    
            CASE ISNULL(A.MOD_PLAN_AMT2, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT2, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT2 - A.PLAN_AMT2 ) * 100 / A.PLAN_AMT2
                            END  
             END  AS A_D_RATE2,
                    A.PLAN_AMT3 AS PLAN3,
                    A.MOD_PLAN_AMT3 AS MOD_PLAN3,
                    
            CASE ISNULL(A.MOD_PLAN_AMT3, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT3, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT3 - A.PLAN_AMT3 ) * 100 / A.PLAN_AMT3
                            END  
             END  AS A_D_RATE3,
                    A.PLAN_AMT4 AS PLAN4,
                    A.MOD_PLAN_AMT4 AS MOD_PLAN4,
                    
            CASE ISNULL(A.MOD_PLAN_AMT4, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT4, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT4 - A.PLAN_AMT4 ) * 100 / A.PLAN_AMT4
                            END  
             END  AS A_D_RATE4,
                    A.PLAN_AMT5 AS PLAN5,
                    A.MOD_PLAN_AMT5 AS MOD_PLAN5,
                    
            CASE ISNULL(A.MOD_PLAN_AMT5, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT5, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT5 - A.PLAN_AMT5 ) * 100 / A.PLAN_AMT5
                            END  
             END  AS A_D_RATE5,
                    A.PLAN_AMT6 AS PLAN6,
                    A.MOD_PLAN_AMT6 AS MOD_PLAN6,
                    
            CASE ISNULL(A.MOD_PLAN_AMT6, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT6, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT6 - A.PLAN_AMT6 ) * 100 / A.PLAN_AMT6
                            END  
             END  AS A_D_RATE6,
                    A.PLAN_AMT7 AS PLAN7,
                    A.MOD_PLAN_AMT7 AS MOD_PLAN7,
                    
            CASE ISNULL(A.MOD_PLAN_AMT7, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT7, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT7 - A.PLAN_AMT7 ) * 100 / A.PLAN_AMT7
                            END  
             END  AS A_D_RATE7,
                    A.PLAN_AMT8 AS PLAN8,
                    A.MOD_PLAN_AMT8 AS MOD_PLAN8,
                    
            CASE ISNULL(A.MOD_PLAN_AMT8, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT8, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT8 - A.PLAN_AMT8 ) * 100 / A.PLAN_AMT8
                            END  
             END  AS A_D_RATE8,
                    A.PLAN_AMT9 AS PLAN9,
                    A.MOD_PLAN_AMT9 AS MOD_PLAN9,
                    
            CASE ISNULL(A.MOD_PLAN_AMT9, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT9, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT9 - A.PLAN_AMT9 ) * 100 / A.PLAN_AMT9
                            END  
             END  AS A_D_RATE9,
                    A.PLAN_AMT10 AS PLAN10,
                    A.MOD_PLAN_AMT10 AS MOD_PLAN10,
                    
            CASE ISNULL(A.MOD_PLAN_AMT10, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT10, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT10 - A.PLAN_AMT10 ) * 100 / A.PLAN_AMT10
                            END  
             END  AS A_D_RATE10,
                    A.PLAN_AMT11 AS PLAN11,
                    A.MOD_PLAN_AMT11 AS MOD_PLAN11,
                    
            CASE ISNULL(A.MOD_PLAN_AMT11, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT11, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT11 - A.PLAN_AMT11 ) * 100 / A.PLAN_AMT11
                            END  
             END  AS A_D_RATE11,
                    A.PLAN_AMT12 AS PLAN12,
                    A.MOD_PLAN_AMT12 AS MOD_PLAN12,
                    
            CASE ISNULL(A.MOD_PLAN_AMT12, 0) 
                 WHEN 0 
                      THEN 0 
                      ELSE CASE ISNULL(A.PLAN_AMT12, 0) 
                                WHEN 0
                                     THEN 0 
                                     ELSE ( A.MOD_PLAN_AMT12 - A.PLAN_AMT12 ) * 100 / A.PLAN_AMT12
                            END  
             END  AS A_D_RATE12,
                            A.UPDATE_DB_USER,
                            A.UPDATE_DB_TIME,
                            A.COMP_CODE
              FROM SSP100T A WITH (NOLOCK)
             WHERE A.COMP_CODE = #{S_COMP_CODE}
               AND A.PLAN_TYPE2 = 'S'
               AND A.DIV_CODE   = #{DIV_CODE}
               AND A.PLAN_YEAR  = #{PLAN_YEAR}       
               AND A.MONEY_UNIT = #{MONEY_UNIT}
             
      ) Z
      ORDER BY Z.PLAN_TYPE1  
  END
        
    </select>
    
	<insert id="sgp100ukrvService.insertExcelSgp100ukrv7" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG
	    , CUSTOM_CODE
	    , CUSTOM_NAME  
	    , S_CODE
	    , S_NAME 
     	, S_CODE1
	    , S_CODE2
	    , S_CODE3 
	    , PLAN1
	    , PLAN2
	    , PLAN3
	    , PLAN4
	    , PLAN5
	    , PLAN6
	    , PLAN7
	    , PLAN8
	    , PLAN9
	    , PLAN10
	    , PLAN11
	    , PLAN12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , ''
	    , ''
	    , #{S_CODE}
	    , ''  
	 	, ''
	    , ''
	    , ''
	    , #{PLAN1}
	    , #{PLAN2}
	    , #{PLAN3}
	    , #{PLAN4}
	    , #{PLAN5}
	    , #{PLAN6}
	    , #{PLAN7}
	    , #{PLAN8}
	    , #{PLAN9}
	    , #{PLAN10}
	    , #{PLAN11}
	    , #{PLAN12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
    
	<update id="excelValidate7" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.SUB_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.SUB_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 판매유형입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END)
                                 
    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
         LEFT JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE  = #{S_COMP_CODE}
								          AND B.MAIN_CODE = 'S002'							         
                                          AND B.USE_YN    = 'Y' 
                                          AND B.SUB_CODE  = A.S_CODE							         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}  
    
   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
     
         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE = #{S_COMP_CODE}
										AND B.DIV_CODE   = #{DIV_CODE}
										AND B.PLAN_YEAR  = #{PLAN_YEAR}
										AND B.PLAN_TYPE1 = A.S_CODE
										AND B.PLAN_TYPE2 = 'S'
										AND B.MONEY_UNIT = #{MONEY_UNIT}
										AND B.PLAN_TYPE2_CODE = '*'


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	      
 
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet7" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG	

	    , A.S_CODE
        , ( ISNULL(A.PLAN1, 0) + ISNULL(A.PLAN2, 0) + ISNULL(A.PLAN3, 0) + ISNULL(A.PLAN4, 0) + ISNULL(A.PLAN5, 0) + ISNULL(A.PLAN6, 0) 
          + ISNULL(A.PLAN7, 0) + ISNULL(A.PLAN8, 0) + ISNULL(A.PLAN9, 0) + ISNULL(A.PLAN10, 0) + ISNULL(A.PLAN11, 0) + ISNULL(A.PLAN12, 0)) AS PLAN_SUM  
	    , A.PLAN1
	    , A.PLAN2
	    , A.PLAN3
	    , A.PLAN4
	    , A.PLAN5
	    , A.PLAN6
	    , A.PLAN7
	    , A.PLAN8
	    , A.PLAN9
	    , A.PLAN10
	    , A.PLAN11
	    , A.PLAN12	
	    
	      FROM SGP100UKRV_EXCEL A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select>     
    
    <insert id="sgp100ukrvService.insertDetail7" parameterType="Map">
    
    BEGIN
        DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)    /*계획금액단위*/ 
        
        SELECT @MONEY_UNIT_DIV = REF_CODE1
          FROM BSA100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'B042'
           AND SUB_CODE  = #{MONEY_UNIT_DIV}
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}           				       
					   )

		BEGIN 
           
        INSERT INTO SSP100T
             ( DIV_CODE
             , PLAN_YEAR
             , PLAN_TYPE1
             , PLAN_TYPE2
             , PLAN_TYPE2_CODE
             , LEVEL_KIND
             , MONEY_UNIT
             , ENT_MONEY_UNIT
             , CONFIRM_YN
             , PLAN_AMT1
             , MOD_PLAN_AMT1
             , PLAN_AMT2
             , MOD_PLAN_AMT2
             , PLAN_AMT3
             , MOD_PLAN_AMT3
             , PLAN_AMT4
             , MOD_PLAN_AMT4
             , PLAN_AMT5
             , MOD_PLAN_AMT5
             , PLAN_AMT6
             , MOD_PLAN_AMT6
             , PLAN_AMT7
             , MOD_PLAN_AMT7
             , PLAN_AMT8
             , MOD_PLAN_AMT8
             , PLAN_AMT9
             , MOD_PLAN_AMT9
             , PLAN_AMT10
             , MOD_PLAN_AMT10
             , PLAN_AMT11
             , MOD_PLAN_AMT11
             , PLAN_AMT12
             , MOD_PLAN_AMT12
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
             , COMP_CODE
             ) 
        VALUES
             ( #{DIV_CODE}         
             , #{PLAN_YEAR}        
             , #{PLAN_TYPE1}       
             , #{PLAN_TYPE2}
             , #{PLAN_TYPE2_CODE}
             , #{LEVEL_KIND}       
             , #{MONEY_UNIT}       
             , #{ENT_MONEY_UNIT}   
             , #{CONFIRM_YN}       
             , #{PLAN1}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN1}         * @MONEY_UNIT_DIV
             , #{PLAN2}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN2}         * @MONEY_UNIT_DIV
             , #{PLAN3}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN3}         * @MONEY_UNIT_DIV
             , #{PLAN4}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN4}         * @MONEY_UNIT_DIV
             , #{PLAN5}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN5}         * @MONEY_UNIT_DIV
             , #{PLAN6}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN6}         * @MONEY_UNIT_DIV
             , #{PLAN7}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN7}         * @MONEY_UNIT_DIV
             , #{PLAN8}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN8}         * @MONEY_UNIT_DIV
             , #{PLAN9}             * @MONEY_UNIT_DIV
             , #{MOD_PLAN9}         * @MONEY_UNIT_DIV
             , #{PLAN10}            * @MONEY_UNIT_DIV
             , #{MOD_PLAN10}        * @MONEY_UNIT_DIV
             , #{PLAN11}            * @MONEY_UNIT_DIV
             , #{MOD_PLAN11}        * @MONEY_UNIT_DIV
             , #{PLAN12}            * @MONEY_UNIT_DIV
             , #{MOD_PLAN12}        * @MONEY_UNIT_DIV
             , #{S_USER_ID}        
             , GETDATE()
             , #{S_COMP_CODE}
             )
        END 
        ELSE
        BEGIN
        UPDATE SSP100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
             , CONFIRM_YN      = #{CONFIRM_YN}              
             , PLAN_AMT1       = #{PLAN1}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT1   = #{MOD_PLAN1}       * @MONEY_UNIT_DIV        
             , PLAN_AMT2       = #{PLAN2}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT2   = #{MOD_PLAN2}       * @MONEY_UNIT_DIV        
             , PLAN_AMT3       = #{PLAN3}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT3   = #{MOD_PLAN3}       * @MONEY_UNIT_DIV        
             , PLAN_AMT4       = #{PLAN4}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT4   = #{MOD_PLAN4}       * @MONEY_UNIT_DIV        
             , PLAN_AMT5       = #{PLAN5}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT5   = #{MOD_PLAN5}       * @MONEY_UNIT_DIV        
             , PLAN_AMT6       = #{PLAN6}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT6   = #{MOD_PLAN6}       * @MONEY_UNIT_DIV        
             , PLAN_AMT7       = #{PLAN7}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT7   = #{MOD_PLAN7}       * @MONEY_UNIT_DIV        
             , PLAN_AMT8       = #{PLAN8}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT8   = #{MOD_PLAN8}       * @MONEY_UNIT_DIV        
             , PLAN_AMT9       = #{PLAN9}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT9   = #{MOD_PLAN9}       * @MONEY_UNIT_DIV        
             , PLAN_AMT10      = #{PLAN10}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT10  = #{MOD_PLAN10}      * @MONEY_UNIT_DIV        
             , PLAN_AMT11      = #{PLAN11}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT11  = #{MOD_PLAN11}      * @MONEY_UNIT_DIV        
             , PLAN_AMT12      = #{PLAN12}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT12  = #{MOD_PLAN12}      * @MONEY_UNIT_DIV        
             , UPDATE_DB_USER  = #{S_USER_ID}               
             , UPDATE_DB_TIME  = GETDATE()                  
                                                            
         WHERE DIV_CODE        = #{DIV_CODE}                
           AND PLAN_YEAR       = #{PLAN_YEAR}               
           AND PLAN_TYPE1      = #{PLAN_TYPE1}              
           AND PLAN_TYPE2      = #{PLAN_TYPE2}              
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}         
           AND LEVEL_KIND      = #{LEVEL_KIND}              
           AND MONEY_UNIT      = #{MONEY_UNIT}              
           AND COMP_CODE       = #{S_COMP_CODE}         
        END
    END
    
    
    </insert>
    
    <update id="sgp100ukrvService.updateDetail7" parameterType="Map">
    	BEGIN
        DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)    /*계획금액단위*/ 
        
        SELECT @MONEY_UNIT_DIV = REF_CODE1
          FROM BSA100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND MAIN_CODE = 'B042'
           AND SUB_CODE  = #{MONEY_UNIT_DIV}
        
        UPDATE SSP100T
           SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
             , CONFIRM_YN      = #{CONFIRM_YN}              
             , PLAN_AMT1       = #{PLAN1}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT1   = #{MOD_PLAN1}       * @MONEY_UNIT_DIV        
             , PLAN_AMT2       = #{PLAN2}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT2   = #{MOD_PLAN2}       * @MONEY_UNIT_DIV        
             , PLAN_AMT3       = #{PLAN3}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT3   = #{MOD_PLAN3}       * @MONEY_UNIT_DIV        
             , PLAN_AMT4       = #{PLAN4}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT4   = #{MOD_PLAN4}       * @MONEY_UNIT_DIV        
             , PLAN_AMT5       = #{PLAN5}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT5   = #{MOD_PLAN5}       * @MONEY_UNIT_DIV        
             , PLAN_AMT6       = #{PLAN6}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT6   = #{MOD_PLAN6}       * @MONEY_UNIT_DIV        
             , PLAN_AMT7       = #{PLAN7}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT7   = #{MOD_PLAN7}       * @MONEY_UNIT_DIV        
             , PLAN_AMT8       = #{PLAN8}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT8   = #{MOD_PLAN8}       * @MONEY_UNIT_DIV        
             , PLAN_AMT9       = #{PLAN9}           * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT9   = #{MOD_PLAN9}       * @MONEY_UNIT_DIV        
             , PLAN_AMT10      = #{PLAN10}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT10  = #{MOD_PLAN10}      * @MONEY_UNIT_DIV        
             , PLAN_AMT11      = #{PLAN11}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT11  = #{MOD_PLAN11}      * @MONEY_UNIT_DIV        
             , PLAN_AMT12      = #{PLAN12}          * @MONEY_UNIT_DIV        
             , MOD_PLAN_AMT12  = #{MOD_PLAN12}      * @MONEY_UNIT_DIV        
             , UPDATE_DB_USER  = #{S_USER_ID}               
             , UPDATE_DB_TIME  = GETDATE()                  
                                                            
         WHERE DIV_CODE        = #{DIV_CODE}                
           AND PLAN_YEAR       = #{PLAN_YEAR}               
           AND PLAN_TYPE1      = #{PLAN_TYPE1}              
           AND PLAN_TYPE2      = #{PLAN_TYPE2}              
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}         
           AND LEVEL_KIND      = #{LEVEL_KIND}              
           AND MONEY_UNIT      = #{MONEY_UNIT}              
           AND COMP_CODE       = #{S_COMP_CODE}    
    END
                
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail7" parameterType="Map">
    DELETE FROM SSP100T 
     WHERE DIV_CODE        = #{DIV_CODE}           
       AND PLAN_YEAR       = #{PLAN_YEAR}          
       AND PLAN_TYPE1      = #{PLAN_TYPE1}         
       AND PLAN_TYPE2      = #{PLAN_TYPE2}         
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}    
       AND LEVEL_KIND      = #{LEVEL_KIND}         
       AND MONEY_UNIT      = #{MONEY_UNIT}         
       AND COMP_CODE       = #{S_COMP_CODE}          
    </delete>
    
     <select id="sgp100ukrvService.customitemSortSelectList" parameterType="Map" resultType="rMap">        
    --sgp100ukrv.Csgp100ukrv[fnSgp100QStd] Query5 
    SELECT    A.DIV_CODE 
         , A.PLAN_YEAR
         , A.PLAN_TYPE1
         , A.PLAN_TYPE2
         , A.PLAN_TYPE2_CODE
         , A.PLAN_TYPE2_CODE2
         , A.LEVEL_KIND
         , A.MONEY_UNIT
         , A.ENT_MONEY_UNIT
         , A.CONFIRM_YN
         , C.CUSTOM_CODE AS CUSTOM_CODE
         , uniLITE.fnCustNameComp(C.COMP_CODE, #{S_USER_ID}, C.CUSTOM_CODE) AS CUSTOM_NAME         
     <if test="ITEM_LEVEL == &quot;1&quot;">         
         , B.LEVEL1       AS S_CODE1
         , B.LEVEL_NAME   AS S_NAME1
     </if>
     <if test="ITEM_LEVEL == &quot;2&quot;">    
     	 , B.LEVEL2       AS S_CODE2
     	 , B.LEVEL_NAME   AS S_NAME2
     </if>
     <if test="ITEM_LEVEL == &quot;3&quot;">    
         , B.LEVEL3       AS S_CODE3
         , B.LEVEL_NAME   AS S_NAME3
     </if> 
         , A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12 AS PLAN_SUM, 
            A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12 AS MOD_PLAN_SUM, 
            
    CASE ISNULL(A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ((A.MOD_PLAN_AMT1+A.MOD_PLAN_AMT2+A.MOD_PLAN_AMT3+A.MOD_PLAN_AMT4+A.MOD_PLAN_AMT5+A.MOD_PLAN_AMT6+A.MOD_PLAN_AMT7+A.MOD_PLAN_AMT8+A.MOD_PLAN_AMT9+A.MOD_PLAN_AMT10+A.MOD_PLAN_AMT11+A.MOD_PLAN_AMT12) - (A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12)) * 100 / ISNULL(A.PLAN_AMT1+A.PLAN_AMT2+A.PLAN_AMT3+A.PLAN_AMT4+A.PLAN_AMT5+A.PLAN_AMT6+A.PLAN_AMT7+A.PLAN_AMT8+A.PLAN_AMT9+A.PLAN_AMT10+A.PLAN_AMT11+A.PLAN_AMT12, 0)
                    END  
     END  AS A_D_RATE_SUM, 
            A.PLAN_AMT1 AS PLAN1,
            A.MOD_PLAN_AMT1 AS MOD_PLAN1,
            
    CASE ISNULL(A.MOD_PLAN_AMT1, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT1, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT1 - A.PLAN_AMT1 ) * 100 / A.PLAN_AMT1
                    END  
     END  AS A_D_RATE1,
            A.PLAN_AMT2 AS PLAN2,
            A.MOD_PLAN_AMT2 AS MOD_PLAN2,
            
    CASE ISNULL(A.MOD_PLAN_AMT2, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT2, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT2 - A.PLAN_AMT2 ) * 100 / A.PLAN_AMT2
                    END  
     END  AS A_D_RATE2,
            A.PLAN_AMT3 AS PLAN3,
            A.MOD_PLAN_AMT3 AS MOD_PLAN3,
            
    CASE ISNULL(A.MOD_PLAN_AMT3, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT3, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT3 - A.PLAN_AMT3 ) * 100 / A.PLAN_AMT3
                    END  
     END  AS A_D_RATE3,
            A.PLAN_AMT4 AS PLAN4,
            A.MOD_PLAN_AMT4 AS MOD_PLAN4,
            
    CASE ISNULL(A.MOD_PLAN_AMT4, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT4, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT4 - A.PLAN_AMT4 ) * 100 / A.PLAN_AMT4
                    END  
     END  AS A_D_RATE4,
            A.PLAN_AMT5 AS PLAN5,
            A.MOD_PLAN_AMT5 AS MOD_PLAN5,
            
    CASE ISNULL(A.MOD_PLAN_AMT5, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT5, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT5 - A.PLAN_AMT5 ) * 100 / A.PLAN_AMT5
                    END  
     END  AS A_D_RATE5,
            A.PLAN_AMT6 AS PLAN6,
            A.MOD_PLAN_AMT6 AS MOD_PLAN6,
            
    CASE ISNULL(A.MOD_PLAN_AMT6, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT6, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT6 - A.PLAN_AMT6 ) * 100 / A.PLAN_AMT6
                    END  
     END  AS A_D_RATE6,
            A.PLAN_AMT7 AS PLAN7,
            A.MOD_PLAN_AMT7 AS MOD_PLAN7,
            
    CASE ISNULL(A.MOD_PLAN_AMT7, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT7, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT7 - A.PLAN_AMT7 ) * 100 / A.PLAN_AMT7
                    END  
     END  AS A_D_RATE7,
            A.PLAN_AMT8 AS PLAN8,
            A.MOD_PLAN_AMT8 AS MOD_PLAN8,
            
    CASE ISNULL(A.MOD_PLAN_AMT8, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT8, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT8 - A.PLAN_AMT8 ) * 100 / A.PLAN_AMT8
                    END  
     END  AS A_D_RATE8,
            A.PLAN_AMT9 AS PLAN9,
            A.MOD_PLAN_AMT9 AS MOD_PLAN9,
            
    CASE ISNULL(A.MOD_PLAN_AMT9, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT9, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT9 - A.PLAN_AMT9 ) * 100 / A.PLAN_AMT9
                    END  
     END  AS A_D_RATE9,
            A.PLAN_AMT10 AS PLAN10,
            A.MOD_PLAN_AMT10 AS MOD_PLAN10,
            
    CASE ISNULL(A.MOD_PLAN_AMT10, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT10, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT10 - A.PLAN_AMT10 ) * 100 / A.PLAN_AMT10
                    END  
     END  AS A_D_RATE10,
            A.PLAN_AMT11 AS PLAN11,
            A.MOD_PLAN_AMT11 AS MOD_PLAN11,
            
    CASE ISNULL(A.MOD_PLAN_AMT11, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT11, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT11 - A.PLAN_AMT11 ) * 100 / A.PLAN_AMT11
                    END  
     END  AS A_D_RATE11,
            A.PLAN_AMT12 AS PLAN12,
            A.MOD_PLAN_AMT12 AS MOD_PLAN12,
            
    CASE ISNULL(A.MOD_PLAN_AMT12, 0) 
         WHEN 0 
              THEN 0 
              ELSE CASE ISNULL(A.PLAN_AMT12, 0) 
                        WHEN 0
                             THEN 0 
                             ELSE ( A.MOD_PLAN_AMT12 - A.PLAN_AMT12 ) * 100 / A.PLAN_AMT12
                    END  
     END  AS A_D_RATE12,
                    A.UPDATE_DB_USER,
                    A.UPDATE_DB_TIME,
                    A.COMP_CODE
      <if test="ITEM_LEVEL == &quot;1&quot;">              
          FROM SSP100T A WITH (NOLOCK)
                   LEFT  JOIN  BCM100T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE
                                                      AND A.PLAN_TYPE2_CODE = C.CUSTOM_CODE 
                                                      AND C.USE_YN = 'Y' 
                                                      AND C.CUSTOM_TYPE IN ('1','3')
                   LEFT OUTER JOIN (SELECT COMP_CODE
                                         , LEVEL1, MAX(LEVEL_NAME) AS LEVEL_NAME
                                      FROM BPR000T WITH (NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
                                     GROUP BY LEVEL1, COMP_CODE) B 
                                ON A.COMP_CODE = B.COMP_CODE
                               AND A.PLAN_TYPE2_CODE2 = B.LEVEL1 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = 'A'
           AND A.LEVEL_KIND = '1'  
      </if>
      <if test="ITEM_LEVEL == &quot;2&quot;"> 
          FROM SSP100T A WITH (NOLOCK)
                   LEFT  JOIN  BCM100T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE
                                                      AND A.PLAN_TYPE2_CODE = C.CUSTOM_CODE 
                                                      AND C.USE_YN = 'Y' 
                                                      AND C.CUSTOM_TYPE IN ('1','3')
                   LEFT OUTER JOIN (SELECT COMP_CODE
                                       , LEVEL2, MAX(LEVEL_NAME) AS LEVEL_NAME
                                    FROM BPR000T WITH (NOLOCK)
                                   WHERE COMP_CODE = #{S_COMP_CODE}
                                     AND LEVEL1 != '*' 
                                     AND LEVEL2 != '*' 
                                     AND LEVEL3 = '*'
                                   GROUP BY LEVEL2, COMP_CODE) B 
                              ON A.COMP_CODE = B.COMP_CODE
                             AND A.PLAN_TYPE2_CODE2 = B.LEVEL2 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = 'A'
           AND A.LEVEL_KIND = '2'
      </if>
      <if test="ITEM_LEVEL == &quot;3&quot;">
          FROM SSP100T A 
                   LEFT  JOIN  BCM100T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE
                                                      AND A.PLAN_TYPE2_CODE = C.CUSTOM_CODE 
                                                      AND C.USE_YN = 'Y' 
                                                      AND C.CUSTOM_TYPE IN ('1','3')          
                   LEFT OUTER JOIN (SELECT COMP_CODE
                                               , LEVEL3, MAX(LEVEL_NAME) AS LEVEL_NAME
                                            FROM BPR000T WITH (NOLOCK)
                                           WHERE COMP_CODE = #{S_COMP_CODE}
                                             AND LEVEL1 != '*' 
                                             AND LEVEL2 != '*' 
                                             AND LEVEL3 != '*'
                                           GROUP BY LEVEL3, COMP_CODE) B 
                                      ON A.COMP_CODE = B.COMP_CODE
                                     AND A.PLAN_TYPE2_CODE2 = B.LEVEL3 
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.PLAN_TYPE2 = 'A'
           AND A.LEVEL_KIND = '3'      	  
      </if>       
       AND A.DIV_CODE   = #{DIV_CODE}
       AND A.PLAN_YEAR  = #{PLAN_YEAR}
       AND A.PLAN_TYPE1 = #{ORDER_TYPE}
       AND A.MONEY_UNIT = #{MONEY_UNIT}
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     ORDER BY A.PLAN_TYPE2_CODE, S_CODE1         
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
     ORDER BY A.PLAN_TYPE2_CODE, S_CODE2         
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
     ORDER BY A.PLAN_TYPE2_CODE, S_CODE3        
     </if>  
    </select>  

	
	<insert id="sgp100ukrvService.insertExcelSgp100ukrv10" parameterType="Map">       /* 엑셀insert */
	INSERT INTO SGP100UKRV_EXCEL(
		_EXCEL_JOBID
	   ,_EXCEL_ROWNUM
	   ,_EXCEL_HAS_ERROR
	   ,_EXCEL_ERROR_MSG
	    , CUSTOM_CODE
	    , CUSTOM_NAME  
	    , S_CODE
	    , S_NAME 
     	, S_CODE1
	    , S_CODE2
	    , S_CODE3  
	    , PLAN1
	    , PLAN2
	    , PLAN3
	    , PLAN4
	    , PLAN5
	    , PLAN6
	    , PLAN7
	    , PLAN8
	    , PLAN9
	    , PLAN10
	    , PLAN11
	    , PLAN12
	   ,INSERT_DB_USER
	   ,INSERT_DB_TIME
	   ,UPDATE_DB_USER
	   ,UPDATE_DB_TIME
	)VALUES(
	   #{_EXCEL_JOBID}
	  ,#{_EXCEL_ROWNUM}
	  ,#{_EXCEL_HAS_ERROR}
	  ,#{_EXCEL_ERROR_MSG}
	    , #{CUSTOM_CODE}
	    , #{CUSTOM_NAME}   
	    , ''
	    , ''
	 	, #{S_CODE1}
	    , #{S_CODE2}
	    , #{S_CODE3} 
	    , #{PLAN1}
	    , #{PLAN2}
	    , #{PLAN3}
	    , #{PLAN4}
	    , #{PLAN5}
	    , #{PLAN6}
	    , #{PLAN7}
	    , #{PLAN8}
	    , #{PLAN9}
	    , #{PLAN10}
	    , #{PLAN11}
	    , #{PLAN12}
	  ,#{S_USER_ID}
	  ,GETDATE()
	  ,#{S_USER_ID}
	  ,GETDATE()
	)
	</insert>    
    
	<update id="excelValidate10" >
   UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 거래처입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END),
            A.CUSTOM_NAME  = (CASE WHEN B.CUSTOM_CODE IS  NULL      THEN ''
                                  ELSE B.CUSTOM_NAME
                                  END)
                                 
    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
         LEFT JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
								         AND B.CUSTOM_CODE = A.CUSTOM_CODE								         
                                          AND B.USE_YN = 'Y' 
                                          AND B.CUSTOM_TYPE IN ('1','3')								         
    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	
    
    UPDATE   A
    SET 
            A._EXCEL_HAS_ERROR = (CASE WHEN B.COMP_CODE IS  NULL      THEN 'Y'
                                  ELSE A._EXCEL_HAS_ERROR 
                                  END),
                                 
            A._EXCEL_ERROR_MSG = (CASE WHEN B.COMP_CODE IS  NULL      THEN ISNULL(_EXCEL_ERROR_MSG,'') + '존재하지 않는 분류코드입니다.'  
                                 ELSE A._EXCEL_ERROR_MSG 
                                 END)
                                 
    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2  = '*' 
	                                       AND B.LEVEL3  = '*' 
	                                       AND B.LEVEL1  = A.S_CODE1   
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2 != '*' 
	                                       AND B.LEVEL3  = '*' 
	                                       AND B.LEVEL2  = A.S_CODE2       
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
         LEFT JOIN BPR000T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
	                                       AND B.LEVEL1 != '*' 
	                                       AND B.LEVEL2 != '*' 
	                                       AND B.LEVEL3 != '*' 
	                                       AND B.LEVEL3 = A.S_CODE3       
     </if>     

    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	


   UPDATE   A
    SET     
	 A._EXCEL_HAS_ERROR = (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'  THEN 'Y'
	                                  ELSE A._EXCEL_HAS_ERROR 
	                                  END),
	                                 
	 A._EXCEL_ERROR_MSG =  (CASE WHEN ISNULL(B.CONFIRM_YN, '')  = 'Y'     THEN ISNULL(_EXCEL_ERROR_MSG,'') + '이미 확정된 판매계획건이 존재합니다.'  
	                                 ELSE A._EXCEL_ERROR_MSG 
									 END )
	                                 
	    FROM SGP100UKRV_EXCEL A WITH(NOLOCK)
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = 'A'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.CUSTOM_CODE	
											AND B.PLAN_TYPE2_CODE2 = S_CODE1
											AND B.LEVEL_KIND = '1' 
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = 'A'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.CUSTOM_CODE	
											AND B.PLAN_TYPE2_CODE2 = S_CODE2
											AND B.LEVEL_KIND = '2'     
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
	         LEFT JOIN SSP100T B WITH(NOLOCK) ON B.COMP_CODE =#{S_COMP_CODE}
											AND B.DIV_CODE = #{DIV_CODE}
											AND B.PLAN_YEAR = #{PLAN_YEAR}
											AND B.PLAN_TYPE1 = #{ORDER_TYPE}
											AND B.PLAN_TYPE2 = 'A'
											AND B.MONEY_UNIT = #{MONEY_UNIT}
											AND B.PLAN_TYPE2_CODE = A.CUSTOM_CODE	
											AND B.PLAN_TYPE2_CODE2 = S_CODE3
											AND B.LEVEL_KIND = '3'     
     </if>  	    


    WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}	  
	

	</update>	
    
	<select id="sgp100ukrvService.selectExcelUploadSheet10" parameterType="Map" resultType="rMap">   /* 엑셀업로드 */
	
	SELECT A._EXCEL_JOBID
		, A._EXCEL_ROWNUM
		, A._EXCEL_HAS_ERROR
		, A._EXCEL_ERROR_MSG	

	    , A.CUSTOM_CODE
	    , A.CUSTOM_NAME
     <if test="ITEM_LEVEL == &quot;1&quot;">   
     	, A.S_CODE1  AS S_CODE1
	    , '' AS S_CODE2
	    , '' AS S_CODE3        
     </if>  
   	 <if test="ITEM_LEVEL == &quot;2&quot;">
     	, '' AS S_CODE1
	    , A.S_CODE2 AS S_CODE2
	    , '' AS S_CODE3         
     </if>  
	 <if test="ITEM_LEVEL == &quot;3&quot;"> 
     	, '' AS S_CODE1
	    , '' AS S_CODE2
	    , A.S_CODE3 AS S_CODE3         
     </if> 	
        , ( ISNULL(A.PLAN1, 0) + ISNULL(A.PLAN2, 0) + ISNULL(A.PLAN3, 0) + ISNULL(A.PLAN4, 0) + ISNULL(A.PLAN5, 0) + ISNULL(A.PLAN6, 0) 
          + ISNULL(A.PLAN7, 0) + ISNULL(A.PLAN8, 0) + ISNULL(A.PLAN9, 0) + ISNULL(A.PLAN10, 0) + ISNULL(A.PLAN11, 0) + ISNULL(A.PLAN12, 0)) AS PLAN_SUM  
	    , A.PLAN1
	    , A.PLAN2
	    , A.PLAN3
	    , A.PLAN4
	    , A.PLAN5
	    , A.PLAN6
	    , A.PLAN7
	    , A.PLAN8
	    , A.PLAN9
	    , A.PLAN10
	    , A.PLAN11
	    , A.PLAN12	
	    
	      FROM SGP100UKRV_EXCEL A WITH (NOLOCK)
	                     
	     WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	  ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM	
	
	</select> 
	
    
    <update id="sgp100ukrvService.insertDetail10" parameterType="Map">
 	IF NOT EXISTS(  SELECT TOP 1 *
					FROM	SSP100T WITH(NOLOCK)
				     WHERE DIV_CODE        = #{DIV_CODE}                
				       AND PLAN_YEAR       = #{PLAN_YEAR}               
				       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
				       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
				       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}   
				       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}       
				       AND LEVEL_KIND      = #{LEVEL_KIND}              
				       AND MONEY_UNIT      = #{MONEY_UNIT}              
				       AND COMP_CODE       = #{S_COMP_CODE}
					   )

		BEGIN  	
		    INSERT INTO SSP100T
		         ( DIV_CODE
		         , PLAN_YEAR
		         , PLAN_TYPE1
		         , PLAN_TYPE2
		         , PLAN_TYPE2_CODE
		         , PLAN_TYPE2_CODE2
		         , LEVEL_KIND
		         , MONEY_UNIT
		         , ENT_MONEY_UNIT
		         , CONFIRM_YN
		         , PLAN_AMT1
		         , MOD_PLAN_AMT1
		         , PLAN_AMT2
		         , MOD_PLAN_AMT2
		         , PLAN_AMT3
		         , MOD_PLAN_AMT3
		         , PLAN_AMT4
		         , MOD_PLAN_AMT4
		         , PLAN_AMT5
		         , MOD_PLAN_AMT5
		         , PLAN_AMT6
		         , MOD_PLAN_AMT6
		         , PLAN_AMT7
		         , MOD_PLAN_AMT7
		         , PLAN_AMT8
		         , MOD_PLAN_AMT8
		         , PLAN_AMT9
		         , MOD_PLAN_AMT9
		         , PLAN_AMT10
		         , MOD_PLAN_AMT10
		         , PLAN_AMT11
		         , MOD_PLAN_AMT11
		         , PLAN_AMT12
		         , MOD_PLAN_AMT12
		         , UPDATE_DB_USER
		         , UPDATE_DB_TIME
		         , COMP_CODE
		         ) 
		    VALUES
		         ( #{DIV_CODE}         
		         , #{PLAN_YEAR}        
		         , #{PLAN_TYPE1}       
		         , 'A'
		         , #{PLAN_TYPE2_CODE}
		         <if test="LEVEL_KIND == &quot;1&quot;">       
		         , #{S_CODE1}           
		         </if>
		         <if test="LEVEL_KIND == &quot;2&quot;">    
		         , #{S_CODE2}           
		         </if>
		         <if test="LEVEL_KIND == &quot;3&quot;">    
		         , #{S_CODE3}           
		         </if>
		         , #{LEVEL_KIND}       
		         , #{MONEY_UNIT}       
		         , #{ENT_MONEY_UNIT}   
		         , #{CONFIRM_YN}       
		         , #{PLAN1}            
		         , #{MOD_PLAN1}        
		         , #{PLAN2}            
		         , #{MOD_PLAN2}        
		         , #{PLAN3}            
		         , #{MOD_PLAN3}        
		         , #{PLAN4}            
		         , #{MOD_PLAN4}        
		         , #{PLAN5}            
		         , #{MOD_PLAN5}        
		         , #{PLAN6}            
		         , #{MOD_PLAN6}        
		         , #{PLAN7}            
		         , #{MOD_PLAN7}        
		         , #{PLAN8}            
		         , #{MOD_PLAN8}        
		         , #{PLAN9}            
		         , #{MOD_PLAN9}        
		         , #{PLAN10}           
		         , #{MOD_PLAN10}       
		         , #{PLAN11}           
		         , #{MOD_PLAN11}       
		         , #{PLAN12}           
		         , #{MOD_PLAN12}       
		         , #{S_USER_ID}        
		         , GETDATE()
		         , #{S_COMP_CODE}
		         )
		END
	
	ELSE
		BEGIN 
	    UPDATE SSP100T
	       SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
	         , CONFIRM_YN      = #{CONFIRM_YN}              
	         , PLAN_AMT1       = #{PLAN1}                   
	         , MOD_PLAN_AMT1   = #{MOD_PLAN1}               
	         , PLAN_AMT2       = #{PLAN2}                   
	         , MOD_PLAN_AMT2   = #{MOD_PLAN2}               
	         , PLAN_AMT3       = #{PLAN3}                   
	         , MOD_PLAN_AMT3   = #{MOD_PLAN3}               
	         , PLAN_AMT4       = #{PLAN4}                   
	         , MOD_PLAN_AMT4   = #{MOD_PLAN4}               
	         , PLAN_AMT5       = #{PLAN5}                   
	         , MOD_PLAN_AMT5   = #{MOD_PLAN5}               
	         , PLAN_AMT6       = #{PLAN6}                   
	         , MOD_PLAN_AMT6   = #{MOD_PLAN6}               
	         , PLAN_AMT7       = #{PLAN7}                   
	         , MOD_PLAN_AMT7   = #{MOD_PLAN7}               
	         , PLAN_AMT8       = #{PLAN8}                   
	         , MOD_PLAN_AMT8   = #{MOD_PLAN8}               
	         , PLAN_AMT9       = #{PLAN9}                   
	         , MOD_PLAN_AMT9   = #{MOD_PLAN9}               
	         , PLAN_AMT10      = #{PLAN10}                  
	         , MOD_PLAN_AMT10  = #{MOD_PLAN10}              
	         , PLAN_AMT11      = #{PLAN11}                  
	         , MOD_PLAN_AMT11  = #{MOD_PLAN11}              
	         , PLAN_AMT12      = #{PLAN12}                  
	         , MOD_PLAN_AMT12  = #{MOD_PLAN12}              
	         , UPDATE_DB_USER  = #{S_USER_ID}               
	         , UPDATE_DB_TIME  = GETDATE()                  
	                                                        
	     WHERE DIV_CODE        = #{DIV_CODE}                
	       AND PLAN_YEAR       = #{PLAN_YEAR}               
	       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
	       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
	       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}   
	       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}       
	       AND LEVEL_KIND      = #{LEVEL_KIND}              
	       AND MONEY_UNIT      = #{MONEY_UNIT}              
	       AND COMP_CODE       = #{S_COMP_CODE} 
	    END	
    </update>
    
    <update id="sgp100ukrvService.updateDetail10" parameterType="Map">
    UPDATE SSP100T
       SET ENT_MONEY_UNIT  = #{ENT_MONEY_UNIT}          
         , CONFIRM_YN      = #{CONFIRM_YN}              
         , PLAN_AMT1       = #{PLAN1}                   
         , MOD_PLAN_AMT1   = #{MOD_PLAN1}               
         , PLAN_AMT2       = #{PLAN2}                   
         , MOD_PLAN_AMT2   = #{MOD_PLAN2}               
         , PLAN_AMT3       = #{PLAN3}                   
         , MOD_PLAN_AMT3   = #{MOD_PLAN3}               
         , PLAN_AMT4       = #{PLAN4}                   
         , MOD_PLAN_AMT4   = #{MOD_PLAN4}               
         , PLAN_AMT5       = #{PLAN5}                   
         , MOD_PLAN_AMT5   = #{MOD_PLAN5}               
         , PLAN_AMT6       = #{PLAN6}                   
         , MOD_PLAN_AMT6   = #{MOD_PLAN6}               
         , PLAN_AMT7       = #{PLAN7}                   
         , MOD_PLAN_AMT7   = #{MOD_PLAN7}               
         , PLAN_AMT8       = #{PLAN8}                   
         , MOD_PLAN_AMT8   = #{MOD_PLAN8}               
         , PLAN_AMT9       = #{PLAN9}                   
         , MOD_PLAN_AMT9   = #{MOD_PLAN9}               
         , PLAN_AMT10      = #{PLAN10}                  
         , MOD_PLAN_AMT10  = #{MOD_PLAN10}              
         , PLAN_AMT11      = #{PLAN11}                  
         , MOD_PLAN_AMT11  = #{MOD_PLAN11}              
         , PLAN_AMT12      = #{PLAN12}                  
         , MOD_PLAN_AMT12  = #{MOD_PLAN12}              
         , UPDATE_DB_USER  = #{S_USER_ID}               
         , UPDATE_DB_TIME  = GETDATE()                  
                                                        
     WHERE DIV_CODE        = #{DIV_CODE}                
       AND PLAN_YEAR       = #{PLAN_YEAR}               
       AND PLAN_TYPE1      = #{PLAN_TYPE1}              
       AND PLAN_TYPE2      = #{PLAN_TYPE2}              
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}   
       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}       
       AND LEVEL_KIND      = #{LEVEL_KIND}              
       AND MONEY_UNIT      = #{MONEY_UNIT}              
       AND COMP_CODE       = #{S_COMP_CODE}             
    </update>
    
    <delete id="sgp100ukrvService.deleteDetail10" parameterType="Map">
    DELETE FROM SSP100T 
     WHERE DIV_CODE        = #{DIV_CODE}           
       AND PLAN_YEAR       = #{PLAN_YEAR}          
       AND PLAN_TYPE1      = #{PLAN_TYPE1}         
       AND PLAN_TYPE2      = #{PLAN_TYPE2}         
       AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}    
       AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}  
       AND LEVEL_KIND      = #{LEVEL_KIND}         
       AND MONEY_UNIT      = #{MONEY_UNIT}         
       AND COMP_CODE       = #{S_COMP_CODE}        
          
    </delete> 
    
    
    <select id="sgp100ukrvService.confirmDataSelect" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100nUpt] Query20
        SELECT CONFIRM_YN 
          FROM SSP100T 
         WHERE COMP_CODE       = #{S_COMP_CODE}
           AND DIV_CODE        = #{DIV_CODE}
           AND PLAN_YEAR       = #{PLAN_YEAR}
           AND PLAN_TYPE1      = #{PLAN_TYPE1}
           AND PLAN_TYPE2      = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}
           AND LEVEL_KIND      = #{LEVEL_KIND}
           AND MONEY_UNIT      = #{MONEY_UNIT}
    </select>
    
    <update id="sgp100ukrvService.confirmDataList" parameterType="Map">
        --sgp100ukrv.Csgp100ukrv[fnsgp100nUpt] Query21
        UPDATE SSP100T
           SET CONFIRM_YN = 'Y'
         WHERE COMP_CODE  = #{S_COMP_CODE}
           AND DIV_CODE   = #{DIV_CODE}
           AND PLAN_YEAR  = #{PLAN_YEAR}
        <if test="TAB != &quot;SALE_TYPE&quot;">
           AND PLAN_TYPE1 = #{PLAN_TYPE1}
        </if>
           AND PLAN_TYPE2 = #{PLAN_TYPE2}
           AND LEVEL_KIND = #{LEVEL_KIND}
           AND MONEY_UNIT = #{MONEY_UNIT}
        <if test="TAB == &quot;CUSTOM&quot;">
           AND PLAN_TYPE2_CODE IN (SELECT CUSTOM_CODE
                                       FROM BCM100T
                                   WHERE AGENT_TYPE   = #{AGENT_TYPE}
                                       AND COMP_CODE  = #{S_COMP_CODE} )
        </if>
        <if test="TAB == &quot;ITEM&quot;">
           AND PLAN_TYPE2_CODE IN (SELECT ITEM_CODE
                                       FROM BPR200T
                                   WHERE ITEM_ACCOUNT   = #{ITEM_ACCOUNT}
                                       AND COMP_CODE    = #{S_COMP_CODE} )
        </if>
    </update>
    
    <select id="sgp100ukrvService.cancleDataSelect" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100nCancel] Query22
        SELECT ISNULL(CONFIRM_YN,'N') AS CONFIRM_YN 
          FROM SSP100T 
         WHERE COMP_CODE       = #{S_COMP_CODE}        
           AND DIV_CODE        = #{DIV_CODE}           
           AND PLAN_YEAR       = #{PLAN_YEAR}          
           AND PLAN_TYPE1      = #{PLAN_TYPE1}         
           AND PLAN_TYPE2      = #{PLAN_TYPE2}         
           AND PLAN_TYPE2_CODE = #{PLAN_TYPE2_CODE}    
           AND LEVEL_KIND      = #{LEVEL_KIND}         
           AND MONEY_UNIT      = #{MONEY_UNIT}         
    </select>
    
    <update id="sgp100ukrvService.cancleDataList" parameterType="Map">
        --sgp100ukrv.Csgp100ukrv[fnsgp100nCancel] Query23
        UPDATE SSP100T
           SET CONFIRM_YN = 'N'
         WHERE COMP_CODE  = #{S_COMP_CODE}
        <if test="@foren.Ognl@isNotEmpty(EX_NDIV_CODEUM_TO)"> 
           AND DIV_CODE   = #{DIV_CODE}
        </if>
           AND PLAN_YEAR  = #{PLAN_YEAR}
        <if test="TAB != &quot;SALE_TYPE&quot;">
           AND PLAN_TYPE1 = #{PLAN_TYPE1}
        </if>           
           AND PLAN_TYPE2 = #{PLAN_TYPE2}
           AND LEVEL_KIND = #{LEVEL_KIND}
           AND MONEY_UNIT = #{MONEY_UNIT}
        
        <if test="TAB == &quot;CUSTOM&quot;">
           AND PLAN_TYPE2_CODE IN (SELECT CUSTOM_CODE
                                     FROM BCM100T
                                    WHERE AGENT_TYPE = #{AGENT_TYPE}
                                      AND COMP_CODE  = #{S_COMP_CODE} )
        </if>
        <if test="TAB == &quot;ITEM&quot;">
           AND PLAN_TYPE2_CODE IN (SELECT ITEM_CODE
                                     FROM BPR200T
                                    WHERE ITEM_ACCOUNT = #{ITEM_ACCOUNT}
                                      AND COMP_CODE    = #{S_COMP_CODE} )
        </if>    
    </update>
    
    
    
    
    
    <select id="sgp100ukrvService.creatDataList" parameterType="Map" resultType="rMap">   
        <if test="TAB == &quot;CUSTOM&quot; || TAB == &quot;PERSON&quot; || TAB == &quot;CUSTOMMODEL&quot;">
            --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query9
            SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
            SELECT DIV_CODE 
              FROM SSP100T 
             WHERE COMP_CODE  = #{S_COMP_CODE}
               AND DIV_CODE   = #{DIV_CODE}
               AND PLAN_YEAR  = #{PLAN_YEAR}
               AND PLAN_TYPE1 = #{ORDER_TYPE}
               AND MONEY_UNIT = #{MONEY_UNIT}
             <if test="TAB == &quot;CUSTOM&quot;">
               AND PLAN_TYPE2 = '2'
               AND PLAN_TYPE2_CODE IN (SELECT CUSTOM_CODE 
                                         FROM BCM100T
                                        WHERE AGENT_TYPE = #{AGENT_TYPE}
                                          AND COMP_CODE  = #{S_COMP_CODE})	
             </if>
             <if test="TAB == &quot;PERSON&quot;">
             	AND PLAN_TYPE2 = '1'
             </if>
             <if test="TAB == &quot;CUSTOMMODEL&quot;">
                AND PLAN_TYPE2 = '6'
             </if>
	     </if>
         <if test="TAB == &quot;ITEM&quot;">
            --sgp100ukrv.Csgp100ukrv[fnsgp100ItemNQ] Query12
            SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
            SELECT DIV_CODE
              FROM SSP100T 
             WHERE COMP_CODE  = #{S_COMP_CODE}
               AND DIV_CODE   = #{DIV_CODE}
               AND PLAN_YEAR  = #{PLAN_YEAR}
               AND PLAN_TYPE1 = #{ORDER_TYPE}
               AND MONEY_UNIT = #{MONEY_UNIT}
               AND PLAN_TYPE2 = '3'
             <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)"> 
               AND PLAN_TYPE2_CODE IN (SELECT ITEM_CODE
                                         FROM BPR200T 
                                        WHERE COMP_CODE    = #{S_COMP_CODE}
                                          AND DIV_CODE     = #{DIV_CODE}
                                          AND ITEM_ACCOUNT = #{ITEM_ACCOUNT})
             </if>   
         </if>
         <if test="TAB == &quot;ITEM_SORT&quot;">
             --sgp100ukrv.Csgp100ukrv[fnsgp100ItemNQ] Query12
                SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
                SELECT DIV_CODE
                  FROM SSP100T 
                 WHERE COMP_CODE  = #{S_COMP_CODE}
                   AND DIV_CODE   = #{DIV_CODE}
                   AND PLAN_YEAR  = #{PLAN_YEAR}
                   AND PLAN_TYPE1 = #{ORDER_TYPE}
                   AND MONEY_UNIT = #{MONEY_UNIT}
             <if test="ITEM_LEVEL == &quot;1&quot;">
                   AND PLAN_TYPE2 = '4'
                   AND LEVEL_KIND = '1'
    
             </if>	
             <if test="ITEM_LEVEL == &quot;2&quot;">
                   AND PLAN_TYPE2 = '4'
                   AND LEVEL_KIND = '2'
             </if>  
             <if test="ITEM_LEVEL == &quot;3&quot;">
                   AND PLAN_TYPE2 = '4'
                   AND LEVEL_KIND = '3'
                
             </if>  
         </if>
         <if test="TAB == &quot;MODEL&quot;">
            --sgp100ukrv.Csgp100ukrv[fnsgp100ItemNQ] Query12
            SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
            SELECT DIV_CODE
              FROM SSP100T 
             WHERE COMP_CODE  = #{S_COMP_CODE}
               AND DIV_CODE   = #{DIV_CODE}
               AND PLAN_YEAR  = #{PLAN_YEAR}
               AND PLAN_TYPE1 = #{ORDER_TYPE}
               AND MONEY_UNIT = #{MONEY_UNIT}
               AND PLAN_TYPE2 = '5'
             <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)"> 
               AND PLAN_TYPE2_CODE IN (SELECT ITEM_CODE
                                         FROM BPR200T 
                                        WHERE COMP_CODE    = #{S_COMP_CODE}
                                          AND DIV_CODE     = #{DIV_CODE}
                                          AND ITEM_ACCOUNT = #{ITEM_ACCOUNT})
             </if>   
         </if>
	</select>
	
	<select id="sgp100ukrvService.creatCustomDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
        SELECT '' AS DIV_CODE
             , '' AS PLAN_YEAR
             , '' AS PLAN_TYPE1
             , '' AS PLAN_TYPE2
             , '' AS PLAN_TYPE2_CODE
             , '' AS LEVEL_KIND
             , '' AS MONEY_UNIT
             , '' AS ENT_MONEY_UNIT
             , 'N' AS CONFIRM_YN
             , CUSTOM_CODE AS CUSTOM_CODE
             , uniLITE.fnCustNameComp(#{S_COMP_CODE}, #{S_USER_ID}, CUSTOM_CODE) AS CUSTOM_NAME
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query10
             , 0  AS PLAN_SUM
             , 0  AS MOD_PLAN_SUM
             , 0  AS A_D_RATE_SUM
             , 0  AS PLAN1
             , 0  AS MOD_PLAN1
             , 0  AS A_D_RATE1
             , 0  AS PLAN2
             , 0  AS MOD_PLAN2
             , 0  AS A_D_RATE2
             , 0  AS PLAN3
             , 0  AS MOD_PLAN3
             , 0  AS A_D_RATE3
             , 0  AS PLAN4
             , 0  AS MOD_PLAN4
             , 0  AS A_D_RATE4
             , 0  AS PLAN5
             , 0  AS MOD_PLAN5
             , 0  AS A_D_RATE5
             , 0  AS PLAN6
             , 0  AS MOD_PLAN6
             , 0  AS A_D_RATE6
             , 0  AS PLAN7
             , 0  AS MOD_PLAN7
             , 0  AS A_D_RATE7
             , 0  AS PLAN8
             , 0  AS MOD_PLAN8
             , 0  AS A_D_RATE8
             , 0  AS PLAN9
             , 0  AS MOD_PLAN9
             , 0  AS A_D_RATE9
             , 0  AS PLAN10
             , 0  AS MOD_PLAN10
             , 0  AS A_D_RATE10
             , 0  AS PLAN11
             , 0  AS MOD_PLAN11
             , 0  AS A_D_RATE11
             , 0  AS PLAN12
             , 0  AS MOD_PLAN12
             , 0  AS A_D_RATE12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
          FROM BCM100T
         WHERE CUSTOM_TYPE IN ('1','3')
           AND COMP_CODE = #{S_COMP_CODE}
           AND USE_YN = 'Y' 
         <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">   
           AND AGENT_TYPE = #{AGENT_TYPE}
         </if>  
         ORDER BY CUSTOM_CODE  
    </select>
    
    <select id="sgp100ukrvService.creatPersonDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
        SELECT '' AS DIV_CODE
             , '' AS PLAN_YEAR
             , '' AS PLAN_TYPE1
             , '' AS PLAN_TYPE2
             , '' AS PLAN_TYPE2_CODE
             , '' AS LEVEL_KIND
             , '' AS MONEY_UNIT
             , '' AS ENT_MONEY_UNIT
             , 'N' AS CONFIRM_YN
             , SUB_CODE AS S_CODE
             , CODE_NAME AS S_NAME
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query10
             , 0  AS PLAN_SUM
             , 0  AS MOD_PLAN_SUM
             , 0  AS A_D_RATE_SUM
             , 0  AS PLAN1
             , 0  AS MOD_PLAN1
             , 0  AS A_D_RATE1
             , 0  AS PLAN2
             , 0  AS MOD_PLAN2
             , 0  AS A_D_RATE2
             , 0  AS PLAN3
             , 0  AS MOD_PLAN3
             , 0  AS A_D_RATE3
             , 0  AS PLAN4
             , 0  AS MOD_PLAN4
             , 0  AS A_D_RATE4
             , 0  AS PLAN5
             , 0  AS MOD_PLAN5
             , 0  AS A_D_RATE5
             , 0  AS PLAN6
             , 0  AS MOD_PLAN6
             , 0  AS A_D_RATE6
             , 0  AS PLAN7
             , 0  AS MOD_PLAN7
             , 0  AS A_D_RATE7
             , 0  AS PLAN8
             , 0  AS MOD_PLAN8
             , 0  AS A_D_RATE8
             , 0  AS PLAN9
             , 0  AS MOD_PLAN9
             , 0  AS A_D_RATE9
             , 0  AS PLAN10
             , 0  AS MOD_PLAN10
             , 0  AS A_D_RATE10
             , 0  AS PLAN11
             , 0  AS MOD_PLAN11
             , 0  AS A_D_RATE11
             , 0  AS PLAN12
             , 0  AS MOD_PLAN12
             , 0  AS A_D_RATE12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
          FROM BSA100T
          WHERE MAIN_CODE = 'S010' 
            AND COMP_CODE = #{S_COMP_CODE}
            AND SUB_CODE != '$' 
            AND REF_CODE1 = #{DIV_CODE}
          ORDER BY SUB_CODE       
    </select>
    
    <select id="sgp100ukrvService.creatItemDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100ItemNQ] Query13
        SELECT '' As DIV_CODE
             , '' As PLAN_YEAR
             , '' As PLAN_TYPE1
             , '' As PLAN_TYPE2
             , '' As PLAN_TYPE2_CODE
             , '' As LEVEL_KIND
             , '' As MONEY_UNIT
             , '' As ENT_MONEY_UNIT
             , 'N' As CONFIRM_YN
             , ISNULL(SALE_BASIS_P,0) As SALE_BASIS_P
             , A.ITEM_CODE AS ITEM_CODE
             , uniLITE.fnItemNameComp(#{S_COMP_CODE}, #{S_USER_ID},A.ITEM_CODE) AS ITEM_NAME
             , A.SPEC AS S_OTHER1
             , 0  AS PLAN_SUM_Q 
             , 0  AS PLAN_SUM_AMT 
             , 0  AS MOD_PLAN_SUM_Q 
             , 0  AS MOD_PLAN_SUM_AMT 
             , 0  AS PLAN_QTY1
             , 0  AS PLAN_AMT1
             , 0  AS MOD_PLAN_Q1
             , 0  AS MOD_PLAN_AMT1
             , 0  AS PLAN_QTY2
             , 0  AS PLAN_AMT2
             , 0  AS MOD_PLAN_Q2
             , 0  AS MOD_PLAN_AMT2
             , 0  AS PLAN_QTY3
             , 0  AS PLAN_AMT3
             , 0  AS MOD_PLAN_Q3
             , 0  AS MOD_PLAN_AMT3
             , 0  AS PLAN_QTY4
             , 0  AS PLAN_AMT4
             , 0  AS MOD_PLAN_Q4
             , 0  AS MOD_PLAN_AMT4
             , 0  AS PLAN_QTY5
             , 0  AS PLAN_AMT5
             , 0  AS MOD_PLAN_Q5
             , 0  AS MOD_PLAN_AMT5
             , 0  AS PLAN_QTY6
             , 0  AS PLAN_AMT6
             , 0  AS MOD_PLAN_Q6
             , 0  AS MOD_PLAN_AMT6
             , 0  AS PLAN_QTY7
             , 0  AS PLAN_AMT7
             , 0  AS MOD_PLAN_Q7
             , 0  AS MOD_PLAN_AMT7
             , 0  AS PLAN_QTY8
             , 0  AS PLAN_AMT8
             , 0  AS MOD_PLAN_Q8
             , 0  AS MOD_PLAN_AMT8
             , 0  AS PLAN_QTY9
             , 0  AS PLAN_AMT9
             , 0  AS MOD_PLAN_Q9
             , 0  AS MOD_PLAN_AMT9
             , 0  AS PLAN_QTY10
             , 0  AS PLAN_AMT10
             , 0  AS MOD_PLAN_Q10
             , 0  AS MOD_PLAN_AMT10
             , 0  AS PLAN_QTY11
             , 0  AS PLAN_AMT11
             , 0  AS MOD_PLAN_Q11
             , 0  AS MOD_PLAN_AMT11
             , 0  AS PLAN_QTY12
             , 0  AS PLAN_AMT12
             , 0  AS MOD_PLAN_Q12
             , 0  AS MOD_PLAN_AMT12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
          FROM BPR100T A
             , BPR200T B
         WHERE A.ITEM_CODE = B.ITEM_CODE
           AND A.COMP_CODE = #{S_COMP_CODE}
           AND A.USE_YN    = 'Y' 
         <if test="@foren.Ognl@isNotEmpty(DIV_CODE)"> 
           AND B.DIV_CODE   = #{DIV_CODE}
         </if>
         <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">   
           AND B.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
         </if>
         ORDER BY A.ITEM_CODE       
    </select>
    
    <select id="sgp100ukrvService.creatItemSortDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
        SELECT '' AS DIV_CODE
             , '' AS PLAN_YEAR
             , '' AS PLAN_TYPE1
             , '' AS PLAN_TYPE2
             , '' AS PLAN_TYPE2_CODE
             , '' AS LEVEL_KIND
             , '' AS MONEY_UNIT
             , '' AS ENT_MONEY_UNIT
             , 'N' AS CONFIRM_YN
        <if test="ITEM_LEVEL == &quot;1&quot;">     
             , LEVEL1 AS S_CODE
             , MAX(LEVEL_NAME) AS S_NAME
        </if>
        <if test="ITEM_LEVEL == &quot;2&quot;">     
             , LEVEL2 AS S_CODE
             , MAX(LEVEL_NAME) AS S_NAME
        </if>
        <if test="ITEM_LEVEL == &quot;3&quot;">     
             , LEVEL3 AS S_CODE
             , MAX(LEVEL_NAME) AS S_NAME
        </if>
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query10
             , 0  AS PLAN_SUM
             , 0  AS MOD_PLAN_SUM
             , 0  AS A_D_RATE_SUM
             , 0  AS PLAN1
             , 0  AS MOD_PLAN1
             , 0  AS A_D_RATE1
             , 0  AS PLAN2
             , 0  AS MOD_PLAN2
             , 0  AS A_D_RATE2
             , 0  AS PLAN3
             , 0  AS MOD_PLAN3
             , 0  AS A_D_RATE3
             , 0  AS PLAN4
             , 0  AS MOD_PLAN4
             , 0  AS A_D_RATE4
             , 0  AS PLAN5
             , 0  AS MOD_PLAN5
             , 0  AS A_D_RATE5
             , 0  AS PLAN6
             , 0  AS MOD_PLAN6
             , 0  AS A_D_RATE6
             , 0  AS PLAN7
             , 0  AS MOD_PLAN7
             , 0  AS A_D_RATE7
             , 0  AS PLAN8
             , 0  AS MOD_PLAN8
             , 0  AS A_D_RATE8
             , 0  AS PLAN9
             , 0  AS MOD_PLAN9
             , 0  AS A_D_RATE9
             , 0  AS PLAN10
             , 0  AS MOD_PLAN10
             , 0  AS A_D_RATE10
             , 0  AS PLAN11
             , 0  AS MOD_PLAN11
             , 0  AS A_D_RATE11
             , 0  AS PLAN12
             , 0  AS MOD_PLAN12
             , 0  AS A_D_RATE12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
        <if test="ITEM_LEVEL == &quot;1&quot;"> 
               FROM BPR000T
              WHERE LEVEL1 != '*' 
                AND LEVEL2 = '*'
                AND LEVEL3 = '*' 
                AND COMP_CODE = #{S_COMP_CODE}
              GROUP BY LEVEL1
        </if>
        <if test="ITEM_LEVEL == &quot;2&quot;"> 
              FROM BPR000T
             WHERE LEVEL1 != '*' 
               AND LEVEL2 != '*'
               AND LEVEL3 = '*' 
               AND COMP_CODE = #{S_COMP_CODE}
             GROUP BY LEVEL2
        </if>
        <if test="ITEM_LEVEL == &quot;3&quot;"> 
             FROM BPR000T
            WHERE LEVEL1 != '*'
              AND LEVEL2 != '*'
              AND LEVEL3 != '*' 
              AND COMP_CODE = #{S_COMP_CODE}
            GROUP BY LEVEL3 
        </if>      
    </select>
    
    <select id="sgp100ukrvService.creatSpokesItemDataList" parameterType="Map" resultType="rMap">   
    --sgp100ukrv.Csgp100ukrv[fnsgp100ItemNQ] Query13
    SELECT '' As DIV_CODE
         , '' As PLAN_YEAR
         , '' As PLAN_TYPE1
         , '' As PLAN_TYPE2
         , '' As PLAN_TYPE2_CODE
         , '' As LEVEL_KIND
         , '' As MONEY_UNIT
         , '' As ENT_MONEY_UNIT
         , 'N' As CONFIRM_YN
         , ISNULL(SALE_BASIS_P,0) As SALE_BASIS_P
         , A.ITEM_CODE AS ITEM_CODE
         , uniLITE.fnItemNameComp(#{S_COMP_CODE}, #{S_USER_ID},A.ITEM_CODE) AS ITEM_NAME 
         , A.SPEC AS S_OTHER1
         , 0  AS PLAN_SUM_Q 
         , 0  AS PLAN_SUM_AMT 
         , 0  AS MOD_PLAN_SUM_Q 
         , 0  AS MOD_PLAN_SUM_AMT 
         , 0  AS PLAN_QTY1
         , 0  AS PLAN_AMT1
         , 0  AS MOD_PLAN_Q1
         , 0  AS MOD_PLAN_AMT1
         , 0  AS PLAN_QTY2
         , 0  AS PLAN_AMT2
         , 0  AS MOD_PLAN_Q2
         , 0  AS MOD_PLAN_AMT2
         , 0  AS PLAN_QTY3
         , 0  AS PLAN_AMT3
         , 0  AS MOD_PLAN_Q3
         , 0  AS MOD_PLAN_AMT3
         , 0  AS PLAN_QTY4
         , 0  AS PLAN_AMT4
         , 0  AS MOD_PLAN_Q4
         , 0  AS MOD_PLAN_AMT4
         , 0  AS PLAN_QTY5
         , 0  AS PLAN_AMT5
         , 0  AS MOD_PLAN_Q5
         , 0  AS MOD_PLAN_AMT5
         , 0  AS PLAN_QTY6
         , 0  AS PLAN_AMT6
         , 0  AS MOD_PLAN_Q6
         , 0  AS MOD_PLAN_AMT6
         , 0  AS PLAN_QTY7
         , 0  AS PLAN_AMT7
         , 0  AS MOD_PLAN_Q7
         , 0  AS MOD_PLAN_AMT7
         , 0  AS PLAN_QTY8
         , 0  AS PLAN_AMT8
         , 0  AS MOD_PLAN_Q8
         , 0  AS MOD_PLAN_AMT8
         , 0  AS PLAN_QTY9
         , 0  AS PLAN_AMT9
         , 0  AS MOD_PLAN_Q9
         , 0  AS MOD_PLAN_AMT9
         , 0  AS PLAN_QTY10
         , 0  AS PLAN_AMT10
         , 0  AS MOD_PLAN_Q10
         , 0  AS MOD_PLAN_AMT10
         , 0  AS PLAN_QTY11
         , 0  AS PLAN_AMT11
         , 0  AS MOD_PLAN_Q11
         , 0  AS MOD_PLAN_AMT11
         , 0  AS PLAN_QTY12
         , 0  AS PLAN_AMT12
         , 0  AS MOD_PLAN_Q12
         , 0  AS MOD_PLAN_AMT12
         , '' AS UPDATE_DB_USER
         , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
           '' AS COMP_CODE
          FROM BPR100T A 
             , (SELECT COMP_CODE
                     , ITEM_GROUP  
                  FROM BPR100T 
                 WHERE ITEM_CODE IN (SELECT ITEM_GROUP
                                       FROM BPR100T
                                      WHERE ITEM_GROUP IS NOT NULL
                                        AND COMP_CODE = #{S_COMP_CODE} )
                   AND USE_YN = 'Y'
                   AND COMP_CODE = #{S_COMP_CODE}) B
             , BPR200T C
         WHERE A.ITEM_CODE = B.ITEM_GROUP
           AND A.ITEM_CODE = C.ITEM_CODE 
           AND A.COMP_CODE = B.COMP_CODE 
           AND A.COMP_CODE = C.COMP_CODE 
           AND A.USE_YN    = 'Y' 
               
               <if test="@foren.Ognl@isNotEmpty(DIV_CODE)"> 
                AND C.DIV_CODE   = #{DIV_CODE}
               </if>
               
           AND A.COMP_CODE  = #{S_COMP_CODE}
              <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)"> 
               AND C.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
              </if>
              <if test="@foren.Ognl@isEmpty(ITEM_ACCOUNT)"> 
               AND C.ITEM_ACCOUNT IN ('00','10')
              </if>
        
     ORDER BY A.ITEM_CODE      
    </select>
    
    <select id="sgp100ukrvService.creatCustomerItemDataList" parameterType="Map" resultType="rMap">   
    --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
    SELECT '' AS DIV_CODE
         , '' AS PLAN_YEAR
         , '' AS PLAN_TYPE1
         , '' AS PLAN_TYPE2
         , '' AS LEVEL_KIND
         , '' AS MONEY_UNIT
         , '' AS ENT_MONEY_UNIT
         , 'N' AS CONFIRM_YN
         , CUSTOM_CODE AS CUSTOM_CODE
         , uniLITE.fnCustNameComp(#{S_COMP_CODE}, #{S_USER_ID}, CUSTOM_CODE) AS CUSTOM_NAME 
         , '' AS ITEM_CODE
         , '' AS ITEM_NAME
         , '' AS SPEC
         , '' AS PLAN_TYPE2_CODE
         , '' AS PLAN_TYPE2_CODE2
         , '' AS SALE_BASIS_P
         , 0  AS PLAN_SUM_Q 
         , 0  AS PLAN_SUM_AMT 
         , 0  AS MOD_PLAN_SUM_Q 
         , 0  AS MOD_PLAN_SUM_AMT 
         , 0  AS PLAN_QTY1
         , 0  AS PLAN_AMT1
         , 0  AS MOD_PLAN_Q1
         , 0  AS MOD_PLAN_AMT1
         , 0  AS PLAN_QTY2
         , 0  AS PLAN_AMT2
         , 0  AS MOD_PLAN_Q2
         , 0  AS MOD_PLAN_AMT2
         , 0  AS PLAN_QTY3
         , 0  AS PLAN_AMT3
         , 0  AS MOD_PLAN_Q3
         , 0  AS MOD_PLAN_AMT3
         , 0  AS PLAN_QTY4
         , 0  AS PLAN_AMT4
         , 0  AS MOD_PLAN_Q4
         , 0  AS MOD_PLAN_AMT4
         , 0  AS PLAN_QTY5
         , 0  AS PLAN_AMT5
         , 0  AS MOD_PLAN_Q5
         , 0  AS MOD_PLAN_AMT5
         , 0  AS PLAN_QTY6
         , 0  AS PLAN_AMT6
         , 0  AS MOD_PLAN_Q6
         , 0  AS MOD_PLAN_AMT6
         , 0  AS PLAN_QTY7
         , 0  AS PLAN_AMT7
         , 0  AS MOD_PLAN_Q7
         , 0  AS MOD_PLAN_AMT7
         , 0  AS PLAN_QTY8
         , 0  AS PLAN_AMT8
         , 0  AS MOD_PLAN_Q8
         , 0  AS MOD_PLAN_AMT8
         , 0  AS PLAN_QTY9
         , 0  AS PLAN_AMT9
         , 0  AS MOD_PLAN_Q9
         , 0  AS MOD_PLAN_AMT9
         , 0  AS PLAN_QTY10
         , 0  AS PLAN_AMT10
         , 0  AS MOD_PLAN_Q10
         , 0  AS MOD_PLAN_AMT10
         , 0  AS PLAN_QTY11
         , 0  AS PLAN_AMT11
         , 0  AS MOD_PLAN_Q11
         , 0  AS MOD_PLAN_AMT11
         , 0  AS PLAN_QTY12
         , 0  AS PLAN_AMT12
         , 0  AS MOD_PLAN_Q12
         , 0  AS MOD_PLAN_AMT12
         , '' AS UPDATE_DB_USER
         , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
          '' AS COMP_CODE
      FROM BCM100T
     WHERE CUSTOM_TYPE IN ('1','3')
       AND COMP_CODE = #{S_COMP_CODE}
       AND USE_YN = 'Y' 
      <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">   
       AND AGENT_TYPE = #{AGENT_TYPE}
      </if>  
     ORDER BY CUSTOM_CODE
    </select>
    
    
    <select id="sgp100ukrvService.creatSaleTypeDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
        SELECT '' AS DIV_CODE
             , '' AS PLAN_YEAR
             , SUB_CODE         AS PLAN_TYPE1
             , '' AS PLAN_TYPE2
             , '' AS PLAN_TYPE2_CODE
             , '' AS LEVEL_KIND
             , '' AS MONEY_UNIT
             , '' AS ENT_MONEY_UNIT
             , 'N' AS CONFIRM_YN
        
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query10
             , 0  AS PLAN_SUM
             , 0  AS MOD_PLAN_SUM
             , 0  AS A_D_RATE_SUM
             , 0  AS PLAN1
             , 0  AS MOD_PLAN1
             , 0  AS A_D_RATE1
             , 0  AS PLAN2
             , 0  AS MOD_PLAN2
             , 0  AS A_D_RATE2
             , 0  AS PLAN3
             , 0  AS MOD_PLAN3
             , 0  AS A_D_RATE3
             , 0  AS PLAN4
             , 0  AS MOD_PLAN4
             , 0  AS A_D_RATE4
             , 0  AS PLAN5
             , 0  AS MOD_PLAN5
             , 0  AS A_D_RATE5
             , 0  AS PLAN6
             , 0  AS MOD_PLAN6
             , 0  AS A_D_RATE6
             , 0  AS PLAN7
             , 0  AS MOD_PLAN7
             , 0  AS A_D_RATE7
             , 0  AS PLAN8
             , 0  AS MOD_PLAN8
             , 0  AS A_D_RATE8
             , 0  AS PLAN9
             , 0  AS MOD_PLAN9
             , 0  AS A_D_RATE9
             , 0  AS PLAN10
             , 0  AS MOD_PLAN10
             , 0  AS A_D_RATE10
             , 0  AS PLAN11
             , 0  AS MOD_PLAN11
             , 0  AS A_D_RATE11
             , 0  AS PLAN12
             , 0  AS MOD_PLAN12
             , 0  AS A_D_RATE12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
           FROM BSA100T
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND MAIN_CODE = 'S002'
            AND SUB_CODE != '$'
            AND USE_YN = 'Y'
    </select>	
    
    
     <select id="sgp100ukrvService.creatCustomItemSortDataList" parameterType="Map" resultType="rMap">   
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query11
        SELECT '' AS DIV_CODE
             , '' AS PLAN_YEAR
             , '' AS PLAN_TYPE1
             , '' AS PLAN_TYPE2
             , '' AS PLAN_TYPE2_CODE
             , '' AS LEVEL_KIND
             , '' AS MONEY_UNIT
             , '' AS ENT_MONEY_UNIT
             , 'N' AS CONFIRM_YN
	         , A.CUSTOM_CODE AS CUSTOM_CODE
	         , uniLITE.fnCustNameComp(#{S_COMP_CODE}, #{S_USER_ID}, A.CUSTOM_CODE) AS CUSTOM_NAME              
             , B.LEVEL AS S_CODE
             , B.LEVEL_NAME AS S_NAME
        --sgp100ukrv.Csgp100ukrv[fnsgp100NQ] Query10
             , 0  AS PLAN_SUM
             , 0  AS MOD_PLAN_SUM
             , 0  AS A_D_RATE_SUM
             , 0  AS PLAN1
             , 0  AS MOD_PLAN1
             , 0  AS A_D_RATE1
             , 0  AS PLAN2
             , 0  AS MOD_PLAN2
             , 0  AS A_D_RATE2
             , 0  AS PLAN3
             , 0  AS MOD_PLAN3
             , 0  AS A_D_RATE3
             , 0  AS PLAN4
             , 0  AS MOD_PLAN4
             , 0  AS A_D_RATE4
             , 0  AS PLAN5
             , 0  AS MOD_PLAN5
             , 0  AS A_D_RATE5
             , 0  AS PLAN6
             , 0  AS MOD_PLAN6
             , 0  AS A_D_RATE6
             , 0  AS PLAN7
             , 0  AS MOD_PLAN7
             , 0  AS A_D_RATE7
             , 0  AS PLAN8
             , 0  AS MOD_PLAN8
             , 0  AS A_D_RATE8
             , 0  AS PLAN9
             , 0  AS MOD_PLAN9
             , 0  AS A_D_RATE9
             , 0  AS PLAN10
             , 0  AS MOD_PLAN10
             , 0  AS A_D_RATE10
             , 0  AS PLAN11
             , 0  AS MOD_PLAN11
             , 0  AS A_D_RATE11
             , 0  AS PLAN12
             , 0  AS MOD_PLAN12
             , 0  AS A_D_RATE12
             , '' AS UPDATE_DB_USER
             , CONVERT(SMALLDATETIME, GETDATE()) AS UPDATE_DB_TIME,
              '' AS COMP_CODE
             
        <if test="ITEM_LEVEL == &quot;1&quot;"> 
          FROM BCM100T  A WITH(NOLOCK)
               LEFT JOIN (SELECT COMP_CODE, LEVEL1 AS LEVEL, MAX(LEVEL_NAME) AS LEVEL_NAME
                            FROM BPR000T WITH(NOLOCK)
			              WHERE LEVEL1 != '*' 
			                AND LEVEL2 = '*'
			                AND LEVEL3 = '*' 
			                AND COMP_CODE = #{S_COMP_CODE}                            
                            GROUP BY COMP_CODE, LEVEL1 ) AS B ON B.COMP_CODE = A.COMP_CODE
         WHERE A.CUSTOM_TYPE IN ('1','3')
           AND A.COMP_CODE = #{S_COMP_CODE}
           AND A.USE_YN = 'Y' 

              
        </if>
        <if test="ITEM_LEVEL == &quot;2&quot;"> 
          FROM BCM100T  A WITH(NOLOCK)
               LEFT JOIN (SELECT COMP_CODE, LEVEL2 AS LEVEL , MAX(LEVEL_NAME) AS LEVEL_NAME
                            FROM BPR000T WITH(NOLOCK)
				             WHERE LEVEL1 != '*' 
				               AND LEVEL2 != '*'
				               AND LEVEL3 = '*'  
			                AND COMP_CODE = #{S_COMP_CODE}                            
                            GROUP BY COMP_CODE, LEVEL2 ) AS B ON B.COMP_CODE = A.COMP_CODE
         WHERE A.CUSTOM_TYPE IN ('1','3')
           AND A.COMP_CODE = #{S_COMP_CODE}
           AND A.USE_YN = 'Y'         

        </if>
        <if test="ITEM_LEVEL == &quot;3&quot;"> 
          FROM BCM100T  A WITH(NOLOCK)
               LEFT JOIN (SELECT COMP_CODE, LEVEL3 AS LEVEL, MAX(LEVEL_NAME) AS LEVEL_NAME
                            FROM BPR000T WITH(NOLOCK)
				            WHERE LEVEL1 != '*'
				              AND LEVEL2 != '*'
				              AND LEVEL3 != '*' 
			                AND COMP_CODE = #{S_COMP_CODE}                            
                            GROUP BY COMP_CODE, LEVEL3 ) AS B ON B.COMP_CODE = A.COMP_CODE
         WHERE A.CUSTOM_TYPE IN ('1','3')
           AND A.COMP_CODE = #{S_COMP_CODE}
           AND A.USE_YN = 'Y'    

        </if>      
    </select>
      
    
    
	
	<select id="sgp100ukrvService.beforeDelete" parameterType="Map" resultType="rMap">   
	   --sgp100ukrv.Csgp100ukrv[fnSgp100Save] Query19
        SELECT CONFIRM_YN
          FROM SSP100T 
         WHERE COMP_CODE        = #{S_COMP_CODE}
           AND DIV_CODE         = #{DIV_CODE}
           AND PLAN_YEAR        = #{PLAN_YEAR}
           AND PLAN_TYPE1       = #{PLAN_TYPE1}
           AND PLAN_TYPE2       = #{PLAN_TYPE2}
           AND PLAN_TYPE2_CODE  = #{PLAN_TYPE2_CODE}
           
           AND LEVEL_KIND       = #{LEVEL_KIND}
           AND MONEY_UNIT       = #{MONEY_UNIT}
           <if test="PLAN_TYPE2_CODE == &quot;6&quot; || PLAN_TYPE2_CODE == &quot;8&quot;">
           AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE}
           </if>
           
           <if test="PLAN_TYPE2 == &quot;A&quot;">
           AND PLAN_TYPE2_CODE2 = #{PLAN_TYPE2_CODE2}
           </if>           
	</select>
	
	<select id="sgp100ukrvService.checkCompCode" parameterType="Map" resultType="rMap">
        SELECT A.COMP_CODE, A.COMP_NAME
        FROM              BOR100T   A  WITH (NOLOCK)
               LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
                                                    AND M1.MAIN_CODE    = 'B107'
                                                    AND M1.SUB_CODE     = '20'         
        WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
               OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
    </select>
	
</mapper>