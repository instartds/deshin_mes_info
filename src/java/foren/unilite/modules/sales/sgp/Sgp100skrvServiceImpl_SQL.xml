<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sgp100skrvServiceImpl">
	
    <select id="sgp100skrvServiceImpl.customSelectList" parameterType="Map" resultType="rMap">
      
	    BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
                   
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}
							   AND PLAN_TYPE2 = '2'
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}                   
            
              
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , A.SALE_CUSTOM_CODE                  AS PLAN_TYPE2_CODE
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.CUSTOM_CODE = A.SALE_CUSTOM_CODE
                                                           AND D.USE_YN      = 'Y'
                                                           AND D.CUSTOM_TYPE IN ('1','3')													       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>	  
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'              AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'             AS GUBUN
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12
             
					 FROM SSP100T AS A WITH (NOLOCK)
                          INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                            AND D.CUSTOM_CODE = A.PLAN_TYPE2_CODE
                                                            AND D.USE_YN      = 'Y'
                                                            AND D.CUSTOM_TYPE IN ('1','3')	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '2'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT  A.COMP_CODE
					     , '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , A.SALE_CUSTOM_CODE                     AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.CUSTOM_CODE = A.SALE_CUSTOM_CODE
                                                           AND D.USE_YN      = 'Y'
                                                           AND D.CUSTOM_TYPE IN ('1','3')													        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					   
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>					   
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'              AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'           AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
                          INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                            AND D.CUSTOM_CODE = A.PLAN_TYPE2_CODE
                                                            AND D.USE_YN      = 'Y'
                                                            AND D.CUSTOM_TYPE IN ('1','3')	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '2'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE,  '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT  COMP_CODE, '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.CUSTOM_NAME  ELSE '' END AS S_NAME
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN                    
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
				FROM @PLAN_ACT_FINAL  AS A
				     LEFT JOIN BCM100T AS B ON B.COMP_CODE   = A.COMP_CODE
				                           AND B.CUSTOM_CODE  = A.PLAN_TYPE2_CODE
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.BIT_CD


        END                	
    
    </select>	
	
	<select id="sgp100skrvServiceImpl.salePrsnSelectList" parameterType="Map" resultType="rMap">
		
		BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}
							   AND PLAN_TYPE2 = '1'
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}     
               
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , A.SALE_PRSN                         AS PLAN_TYPE2_CODE
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM
                         LEFT  JOIN BSA100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.MAIN_CODE = 'S010'
                                                           AND D.SUB_CODE  = A.SALE_PRSN 												       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					  
					<if test="@foren.Ognl@isNotEmpty(SALE_PRSN)">
					AND A.SALE_PRSN = #{SALE_PRSN}
					</if>	  
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_PRSN, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'               AS GUBUN
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12
             
					 FROM SSP100T AS A WITH (NOLOCK)
                         LEFT  JOIN BSA100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.MAIN_CODE = 'S010'
                                                           AND D.SUB_CODE  = A.PLAN_TYPE2_CODE 	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '1'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(SALE_PRSN)">
					AND A.PLAN_TYPE2_CODE = #{SALE_PRSN}
					</if>					 						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT  A.COMP_CODE
					     , '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , A.SALE_PRSN                            AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         LEFT  JOIN BSA100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.MAIN_CODE = 'S010'
                                                           AND D.SUB_CODE  = A.SALE_PRSN 														        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}

						<if test="@foren.Ognl@isNotEmpty(SALE_PRSN)">
						AND A.SALE_PRSN = #{SALE_PRSN}
						</if>					   
						 					   
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_PRSN, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'               AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
                         LEFT  JOIN BSA100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.MAIN_CODE = 'S010'
                                                           AND D.SUB_CODE  = A.PLAN_TYPE2_CODE 	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '1'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(SALE_PRSN)">
					AND A.PLAN_TYPE2_CODE = #{SALE_PRSN}
					</if>					  
					  
						 
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE  = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>				 					
						 
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE,  '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT COMP_CODE,  '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, A.PLAN_TYPE2_CODE AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.CODE_NAME  ELSE '' END AS S_NAME
			--		, CASE WHEN A.PLAN_TYPE2_CODE = '합계' THEN '합계' ELSE B.CODE_NAME END      AS S_NAME
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN                    
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
				FROM @PLAN_ACT_FINAL  AS A
                     LEFT  JOIN BSA100T B WITH(NOLOCK)  ON B.COMP_CODE = A.COMP_CODE
                                                       AND B.MAIN_CODE = 'S010'
                                                       AND B.SUB_CODE  = A.PLAN_TYPE2_CODE 
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.BIT_CD


     END 		
	
    </select>  

    
    <select id="sgp100skrvServiceImpl.itemSelectList" parameterType="Map" resultType="rMap">
		BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}
							   AND PLAN_TYPE2 = '3'
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}     
               
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , B.ITEM_CODE                         AS PLAN_TYPE2_CODE
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = B.COMP_CODE
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'														       
                         INNER  JOIN BPR200T E WITH(NOLOCK) ON E.COMP_CODE = B.COMP_CODE
                                                           AND E.DIV_CODE  = B.DIV_CODE
                                                           AND E.ITEM_CODE = B.ITEM_CODE										       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>	
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_FR)">
					AND B.ITEM_CODE <![CDATA[>=]]> #{ITEM_CODE_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_TO)">
					AND B.ITEM_CODE <![CDATA[<=]]> #{ITEM_CODE_TO}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_FR) and @foren.Ognl@isEmpty(ITEM_CODE_FR)">
					AND D.ITEM_NAME <![CDATA[>=]]> #{ITEM_NAME_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_TO) and @foren.Ognl@isEmpty(ITEM_CODE_TO)">
					AND D.ITEM_NAME <![CDATA[<=]]> #{ITEM_NAME_TO}
					</if>
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, B.ITEM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'               AS GUBUN
					     
						<if test="GUBUN == &quot;1&quot;">					     
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12
             			</if>
             			
						<if test="GUBUN == &quot;2&quot;">					     
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q1 ELSE A.PLAN_QTY1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q2 ELSE A.PLAN_QTY2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q3 ELSE A.PLAN_QTY3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q4 ELSE A.PLAN_QTY4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q5 ELSE A.PLAN_QTY5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q6 ELSE A.PLAN_QTY6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q7 ELSE A.PLAN_QTY7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q8 ELSE A.PLAN_QTY8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q9 ELSE A.PLAN_QTY9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q10 ELSE A.PLAN_QTY10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q11 ELSE A.PLAN_QTY11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q12 ELSE A.PLAN_QTY12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q1 ELSE A.PLAN_QTY1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q2 ELSE A.PLAN_QTY2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q3 ELSE A.PLAN_QTY3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q4 ELSE A.PLAN_QTY4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q5 ELSE A.PLAN_QTY5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q6 ELSE A.PLAN_QTY6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q7 ELSE A.PLAN_QTY7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q8 ELSE A.PLAN_QTY8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q9 ELSE A.PLAN_QTY9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q10 ELSE A.PLAN_QTY10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q11 ELSE A.PLAN_QTY11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_Q12 ELSE A.PLAN_QTY12 END) AS MONTH12
             			</if>
             			             			
					 FROM SSP100T AS A WITH (NOLOCK)
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.ITEM_CODE = A.PLAN_TYPE2_CODE
                                                           AND D.USE_YN    = 'Y'					 
                         INNER  JOIN BPR200T E WITH(NOLOCK) ON E.COMP_CODE = A.COMP_CODE
                                                           AND E.DIV_CODE  = A.DIV_CODE
                                                           AND E.ITEM_CODE = A.PLAN_TYPE2_CODE
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '3'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>	
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_FR)">
					AND A.PLAN_TYPE2_CODE <![CDATA[>=]]> #{ITEM_CODE_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_TO)">
					AND A.PLAN_TYPE2_CODE <![CDATA[<=]]> #{ITEM_CODE_TO}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_FR) and @foren.Ognl@isEmpty(ITEM_CODE_FR)">
					AND D.ITEM_NAME <![CDATA[>=]]> #{ITEM_NAME_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_TO) and @foren.Ognl@isEmpty(ITEM_CODE_TO)">
					AND D.ITEM_NAME <![CDATA[<=]]> #{ITEM_NAME_TO}
					</if>					 						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT A.COMP_CODE
					     ,  '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , B.ITEM_CODE                            AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN
					     
						<if test="GUBUN == &quot;1&quot;">					     
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
						</if>
						
						<if test="GUBUN == &quot;2&quot;">					     
					     , SUM(B.SALE_Q) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_Q ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_Q ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_Q ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_Q ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_Q ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_Q ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_Q ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_Q ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_Q ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_Q ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_Q ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_Q ELSE 0 END) AS MONTH12 
						</if>
												
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = B.COMP_CODE
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'														       
                         INNER  JOIN BPR200T E WITH(NOLOCK) ON E.COMP_CODE = B.COMP_CODE
                                                           AND E.DIV_CODE  = B.DIV_CODE
                                                           AND E.ITEM_CODE = B.ITEM_CODE													        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>	
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_FR)">
					AND B.ITEM_CODE <![CDATA[>=]]> #{ITEM_CODE_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_TO)">
					AND B.ITEM_CODE <![CDATA[<=]]> #{ITEM_CODE_TO}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_FR) and @foren.Ognl@isEmpty(ITEM_CODE_FR)">
					AND E.ITEM_NAME <![CDATA[>=]]> #{ITEM_NAME_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_TO) and @foren.Ognl@isEmpty(ITEM_CODE_TO)">
					AND E.ITEM_NAME <![CDATA[<=]]> #{ITEM_NAME_TO}
					</if>					   
						 					   
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, B.ITEM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'               AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.ITEM_CODE = A.PLAN_TYPE2_CODE
                                                           AND D.USE_YN    = 'Y'					 
                         INNER  JOIN BPR200T E WITH(NOLOCK) ON E.COMP_CODE = A.COMP_CODE
                                                           AND E.DIV_CODE  = A.DIV_CODE
                                                           AND E.ITEM_CODE = A.PLAN_TYPE2_CODE
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '3'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>	
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_FR)">
					AND A.PLAN_TYPE2_CODE <![CDATA[>=]]> #{ITEM_CODE_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE_TO)">
					AND A.PLAN_TYPE2_CODE <![CDATA[<=]]> #{ITEM_CODE_TO}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_FR) and @foren.Ognl@isEmpty(ITEM_CODE_FR)">
					AND E.ITEM_NAME <![CDATA[>=]]> #{ITEM_NAME_FR}
					</if>
					
					<if test="@foren.Ognl@isNotEmpty(ITEM_NAME_TO) and @foren.Ognl@isEmpty(ITEM_CODE_TO)">
					AND E.ITEM_NAME <![CDATA[<=]]> #{ITEM_NAME_TO}
					</if>					  
					  
						 
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE  = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>				 					
						 
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE, '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT COMP_CODE,  '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.ITEM_NAME  ELSE '' END AS S_NAME
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.SPEC  ELSE '' END AS SPEC
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN  
					<if test="GUBUN == &quot;1&quot;">	
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
					</if>
					
					<if test="GUBUN == &quot;2&quot;">	
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   END AS MONTH12
					</if>
										
				FROM @PLAN_ACT_FINAL  AS A
                     LEFT  JOIN BPR100T B WITH(NOLOCK)  ON B.COMP_CODE = A.COMP_CODE
                                                       AND B.ITEM_CODE = A.PLAN_TYPE2_CODE 
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.BIT_CD


     END     	
    
    </select>
    
    <select id="sgp100skrvServiceImpl.itemSortSelectList" parameterType="Map" resultType="rMap">
		BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}    							 
							   AND PLAN_TYPE2 = '4'
					      <if test="ITEM_LEVEL == &quot;1&quot;">    
					            AND LEVEL_KIND = '1'  
					      </if> 	
					      <if test="ITEM_LEVEL == &quot;2&quot;">    
					            AND LEVEL_KIND = '2'  
					      </if> 
					      <if test="ITEM_LEVEL == &quot;3&quot;">    
					            AND LEVEL_KIND = '3'  
					      </if> 					      
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}     
               
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    <if test="ITEM_LEVEL == &quot;1&quot;"> 
					    , D.ITEM_LEVEL1                       AS PLAN_TYPE2_CODE
					    </if>
					    <if test="ITEM_LEVEL == &quot;2&quot;"> 
					    , D.ITEM_LEVEL2                       AS PLAN_TYPE2_CODE
					    </if>
					    <if test="ITEM_LEVEL == &quot;3&quot;"> 
					    , D.ITEM_LEVEL3                       AS PLAN_TYPE2_CODE
					    </if>
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM													       
                         INNER JOIN BPR100T D WITH(NOLOCK)  ON D.COMP_CODE = B.COMP_CODE                         
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'
                                                           
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL1 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL3 = E.LEVEL3

                         </if>                             
                                                           											       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					
                     <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND D.ITEM_LEVEL1 = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND D.ITEM_LEVEL2 = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND D.ITEM_LEVEL3 = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 
				
				    <if test="ITEM_LEVEL == &quot;1&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL1, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;2&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL2, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;3&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL3, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>              
					
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'               AS GUBUN	
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12             			             			
					 FROM SSP100T AS A WITH (NOLOCK)
					 
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL3

                         </if> 

					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '4'
				      <if test="ITEM_LEVEL == &quot;1&quot;">    
		              AND A.LEVEL_KIND = '1'  
				      </if> 	
				      <if test="ITEM_LEVEL == &quot;2&quot;">    
				      AND A.LEVEL_KIND = '2'  
				      </if> 
				      <if test="ITEM_LEVEL == &quot;3&quot;">    
				      AND A.LEVEL_KIND = '3'  
				      </if> 					  
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
                      <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 	
					 						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT A.COMP_CODE
					     ,  '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					    <if test="ITEM_LEVEL == &quot;1&quot;"> 
					    , D.ITEM_LEVEL1                       AS PLAN_TYPE2_CODE
					    </if>
					    <if test="ITEM_LEVEL == &quot;2&quot;"> 
					    , D.ITEM_LEVEL2                       AS PLAN_TYPE2_CODE
					    </if>
					    <if test="ITEM_LEVEL == &quot;3&quot;"> 
					    , D.ITEM_LEVEL3                       AS PLAN_TYPE2_CODE
					    </if>
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN				     
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
												
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER JOIN BPR100T D WITH(NOLOCK)  ON D.COMP_CODE = B.COMP_CODE                         
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'
                                                           
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL1 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL3 = E.LEVEL3

                         </if> 
                         												        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}

                     <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND D.ITEM_LEVEL1 = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND D.ITEM_LEVEL2 = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND D.ITEM_LEVEL3 = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 	
                     				   
				    <if test="ITEM_LEVEL == &quot;1&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL1, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;2&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL2, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;3&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, D.ITEM_LEVEL3, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>  						 					   
              
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'               AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
					 
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = E.LEVEL3

                         </if> 

					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '4'
				      <if test="ITEM_LEVEL == &quot;1&quot;">    
		              AND A.LEVEL_KIND = '1'  
				      </if> 	
				      <if test="ITEM_LEVEL == &quot;2&quot;">    
				      AND A.LEVEL_KIND = '2'  
				      </if> 
				      <if test="ITEM_LEVEL == &quot;3&quot;">    
				      AND A.LEVEL_KIND = '3'  
				      </if> 					  
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
                      <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 					  
					  
						 
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE  = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>				 					
						 
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE, '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT COMP_CODE,  '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.LEVEL_NAME  ELSE '' END AS S_NAME
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN 
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
										
				FROM @PLAN_ACT_FINAL  AS A
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) B ON A.COMP_CODE = B.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = B.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) B ON A.COMP_CODE = B.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = B.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) B ON A.COMP_CODE = B.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE = B.LEVEL3

                         </if> 				
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.BIT_CD


     END     	    	
    
    </select>
    
    <select id="sgp100skrvServiceImpl.spokesItemSelectList" parameterType="Map" resultType="rMap">
		BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}
							   AND PLAN_TYPE2 = '5'
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}     
               
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , E.ITEM_GROUP                        AS PLAN_TYPE2_CODE
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = B.COMP_CODE
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'														       
                         INNER  JOIN (SELECT X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
						                FROM (SELECT COMP_CODE, ITEM_GROUP, ITEM_CODE
                                                                FROM BPR100T WITH(NOLOCK) 
                                                               WHERE COMP_CODE = #{S_COMP_CODE}
															     AND USE_YN = 'Y'
															     AND ISNULL(ITEM_GROUP, '') <![CDATA[<>]]> '') AS X
											INNER JOIN BPR200T AS Y WITH(NOLOCK) ON X.COMP_CODE = Y.COMP_CODE
											                                   AND Y.DIV_CODE   = #{DIV_CODE}
											                                   AND X.ITEM_GROUP = Y.ITEM_CODE
										GROUP BY  X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
												) AS E ON E.COMP_CODE = D.COMP_CODE
                                                      AND E.ITEM_CODE = D.ITEM_CODE													       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>				
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, E.ITEM_GROUP, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'               AS GUBUN					     
					     
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12            			

             			             			
					 FROM SSP100T AS A WITH (NOLOCK) 
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.ITEM_CODE = A.PLAN_TYPE2_CODE
                                                           AND D.USE_YN    = 'Y'                                                           
                         INNER  JOIN (SELECT X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
						                FROM (SELECT COMP_CODE, ITEM_GROUP, ITEM_CODE
                                                                FROM BPR100T WITH(NOLOCK) 
                                                               WHERE COMP_CODE = #{S_COMP_CODE}
															     AND USE_YN = 'Y'
															     AND ISNULL(ITEM_GROUP, '') <![CDATA[<>]]> '') AS X
											INNER JOIN BPR200T AS Y WITH(NOLOCK) ON X.COMP_CODE = Y.COMP_CODE
											                                   AND Y.DIV_CODE   = #{DIV_CODE}
											                                   AND X.ITEM_GROUP = Y.ITEM_CODE
										GROUP BY  X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
												) AS E ON E.COMP_CODE = D.COMP_CODE
                                                      AND E.ITEM_CODE = D.ITEM_CODE	                                                           
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '5'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>				  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT A.COMP_CODE
					     ,  '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , E.ITEM_GROUP                           AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN	
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12												
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = B.COMP_CODE
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'	
                         INNER  JOIN (SELECT X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
						                FROM (SELECT COMP_CODE, ITEM_GROUP, ITEM_CODE
                                                                FROM BPR100T WITH(NOLOCK) 
                                                               WHERE COMP_CODE = #{S_COMP_CODE}
															     AND USE_YN = 'Y'
															     AND ISNULL(ITEM_GROUP, '')  <![CDATA[<>]]> '') AS X
											INNER JOIN BPR200T AS Y WITH(NOLOCK) ON X.COMP_CODE = Y.COMP_CODE
											                                   AND Y.DIV_CODE   = #{DIV_CODE}
											                                   AND X.ITEM_GROUP = Y.ITEM_CODE
										GROUP BY  X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
												) AS E ON E.COMP_CODE = D.COMP_CODE
                                                      AND E.ITEM_CODE = D.ITEM_CODE	                                                           												        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if> 
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, E.ITEM_GROUP, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'               AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
                         INNER  JOIN BPR100T D WITH(NOLOCK) ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.ITEM_CODE = A.PLAN_TYPE2_CODE
                                                           AND D.USE_YN    = 'Y'	
                         INNER  JOIN (SELECT X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
						                FROM (SELECT COMP_CODE, ITEM_GROUP, ITEM_CODE
                                                                FROM BPR100T WITH(NOLOCK) 
                                                               WHERE COMP_CODE = #{S_COMP_CODE}
															     AND USE_YN = 'Y'
															     AND ISNULL(ITEM_GROUP, '')  <![CDATA[<>]]> '') AS X
											INNER JOIN BPR200T AS Y WITH(NOLOCK) ON X.COMP_CODE  = Y.COMP_CODE
											                                   AND Y.DIV_CODE   = #{DIV_CODE}
											                                   AND X.ITEM_GROUP = Y.ITEM_CODE
										GROUP BY  X.COMP_CODE, X.ITEM_GROUP, X.ITEM_CODE, Y.ITEM_ACCOUNT
												) AS E ON E.COMP_CODE = D.COMP_CODE
                                                      AND E.ITEM_CODE = D.ITEM_CODE	                                                           
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '5'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					AND E.ITEM_ACCOUNT = #{ITEM_ACCOUNT}
					</if>					  
						 
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE  = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>				 					
						 
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE, '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT COMP_CODE,  '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.ITEM_NAME  ELSE '' END AS S_NAME
					, B.SPEC
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
										
				FROM @PLAN_ACT_FINAL  AS A
                     LEFT  JOIN BPR100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                                      AND B.ITEM_CODE = A.PLAN_TYPE2_CODE 
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.BIT_CD


     END       	
    
    </select>
    
    <select id="sgp100skrvServiceImpl.customerItemSelectList" parameterType="Map" resultType="rMap">
	    BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
                   
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}
							   AND PLAN_TYPE2 = '6'
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}                   
            
              
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
                PLAN_TYPE2_CODE2    NVARCHAR(20),              --판매계획구분코드2
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드				
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
                PLAN_TYPE2_CODE2    NVARCHAR(20),              --판매계획구분코드2
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드				
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE2, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , A.SALE_CUSTOM_CODE                  AS PLAN_TYPE2_CODE2
					    , B.ITEM_CODE                         AS PLAN_TYPE2_CODE
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.CUSTOM_CODE = A.SALE_CUSTOM_CODE
                                                           AND D.USE_YN      = 'Y'
                                                           AND D.CUSTOM_TYPE IN ('1','3')													       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>	  
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, B.ITEM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'              AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE2 AS PLAN_TYPE2_CODE2
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'             AS GUBUN
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12
             
					 FROM SSP100T AS A WITH (NOLOCK)
                          INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                            AND D.CUSTOM_CODE = A.PLAN_TYPE2_CODE2
                                                            AND D.USE_YN      = 'Y'
                                                            AND D.CUSTOM_TYPE IN ('1','3')	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '6'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE2, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE2, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT  A.COMP_CODE
					     , '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , A.SALE_CUSTOM_CODE                     AS PLAN_TYPE2_CODE2
					     , B.ITEM_CODE                            AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                           AND D.CUSTOM_CODE = A.SALE_CUSTOM_CODE
                                                           AND D.USE_YN      = 'Y'
                                                           AND D.CUSTOM_TYPE IN ('1','3')													        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					   
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>					   
              
					GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, B.ITEM_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'              AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE2 AS PLAN_TYPE2_CODE2
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'           AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
                          INNER  JOIN BCM100T D WITH(NOLOCK)  ON D.COMP_CODE = A.COMP_CODE
                                                            AND D.CUSTOM_CODE = A.PLAN_TYPE2_CODE2
                                                            AND D.USE_YN      = 'Y'
                                                            AND D.CUSTOM_TYPE IN ('1','3')	
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = '6'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
						<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
						AND D.AGENT_TYPE = #{AGENT_TYPE}
						</if>
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE2, PLAN_TYPE2_CODE, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE2  AS PLAN_TYPE2_CODE2
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
													  AND A.PLAN_TYPE2_CODE2 = B.PLAN_TYPE2_CODE2
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE2, PLAN_TYPE2_CODE FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE2 = A.PLAN_TYPE2_CODE2
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE,  '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE2, '' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT  COMP_CODE, '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE2, '' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE2 AS PLAN_TYPE2_CODE2
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
                                                AND A.PLAN_TYPE2_CODE2 = B.PLAN_TYPE2_CODE2
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE2  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.CUSTOM_NAME  ELSE '' END AS S_NAME
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE2
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN C.ITEM_NAME  ELSE '' END AS S_NAME2
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN                    
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
				FROM @PLAN_ACT_FINAL  AS A
				     LEFT JOIN BCM100T AS B ON B.COMP_CODE   = A.COMP_CODE
				                           AND B.CUSTOM_CODE = A.PLAN_TYPE2_CODE2
				     LEFT JOIN BPR100T AS C ON C.COMP_CODE   = A.COMP_CODE
				                           AND C.ITEM_CODE   = A.PLAN_TYPE2_CODE				                           
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE2, A.PLAN_TYPE2_CODE, A.BIT_CD


        END                	
    
    </select>
    
    <select id="sgp100skrvServiceImpl.saleTypeSelectList" parameterType="Map" resultType="rMap">
        BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)    /*계획금액단위 자릿수*/ 
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
                   ,@MONEY_UNIT_DIV_CODE = A.ENT_MONEY_UNIT
              FROM       SSP100T A WITH(NOLOCK)
              INNER JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE     
                                               AND B.MAIN_CODE = 'B042'
                                               AND B.SUB_CODE  = #{MONEY_UNIT_DIV}       
             WHERE A.COMP_CODE = #{S_COMP_CODE}
               AND A.PLAN_TYPE2 = 'S'
               AND A.DIV_CODE   = #{DIV_CODE}
               AND A.PLAN_YEAR  = #{PLAN_YEAR}       
               AND A.MONEY_UNIT = #{MONEY_UNIT}
               
            DECLARE @PLAN_ACT TABLE 
                (
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
            INSERT INTO @PLAN_ACT       
            
            SELECT '1'      AS BIT_CD
              , PLAN_TYPE1
              , MONEY_UNIT
              ,'계획'     AS GUBUN
              ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT1 ELSE PLAN_AMT1 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT2 ELSE PLAN_AMT2 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT3 ELSE PLAN_AMT3 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT4 ELSE PLAN_AMT4 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT5 ELSE PLAN_AMT5 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT6 ELSE PLAN_AMT6 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT7 ELSE PLAN_AMT7 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT8 ELSE PLAN_AMT8 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT9 ELSE PLAN_AMT9 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT10 ELSE PLAN_AMT10 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT11 ELSE PLAN_AMT11 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT12 ELSE PLAN_AMT12 END)) AS PLAN_SUM
                                      
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT1 ELSE PLAN_AMT1 END)  AS MONTH1
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT2 ELSE PLAN_AMT2 END)  AS MONTH2 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT3 ELSE PLAN_AMT3 END)  AS MONTH3 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT4 ELSE PLAN_AMT4 END)  AS MONTH4 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT5 ELSE PLAN_AMT5 END)  AS MONTH5 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT6 ELSE PLAN_AMT6 END)  AS MONTH6 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT7 ELSE PLAN_AMT7 END)  AS MONTH7 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT8 ELSE PLAN_AMT8 END)  AS MONTH8 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT9 ELSE PLAN_AMT9 END)  AS MONTH9 
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT10 ELSE PLAN_AMT10 END) AS MONTH10
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT11 ELSE PLAN_AMT11 END) AS MONTH11
               ,(CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT12 ELSE PLAN_AMT12 END) AS MONTH12
            
              FROM SSP100T A WITH (NOLOCK)
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND DIV_CODE = #{DIV_CODE}
               AND PLAN_YEAR = #{PLAN_YEAR}
               AND PLAN_TYPE2 = 'S'
               AND MONEY_UNIT = #{MONEY_UNIT}
            
            UNION 
            
            SELECT 
                BIT_CD, PLAN_TYPE1, MONEY_UNIT, GUBUN 
                ,SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
                , SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12
            
            FROM (
            
            SELECT  '2'      AS BIT_CD
              ,ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)       AS PLAN_TYPE1
              ,A.MONEY_UNIT           AS MONEY_UNIT
              ,'실적'         AS GUBUN
              ,SUM(B.SALE_AMT_O)    AS PLAN_SUM
              , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
             FROM   SSA100T A WITH (NOLOCK) 
              INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                        AND B.DIV_CODE  = A.DIV_CODE
                        AND B.BILL_NUM  = A.BILL_NUM
              LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
                                             AND C.DIV_CODE    = B.OUT_DIV_CODE
                                             AND C.ORDER_NUM   = B.ORDER_NUM
            WHERE A.COMP_CODE = #{S_COMP_CODE}
              AND A.DIV_CODE = #{DIV_CODE}
              AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
              AND A.MONEY_UNIT = #{MONEY_UNIT} 
              
            GROUP BY A.COMP_CODE, A.DIV_CODE, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
            
            UNION 
            
            SELECT 
              '2'      AS BIT_CD
              ,PLAN_TYPE1       AS PLAN_TYPE1
              ,MONEY_UNIT       AS MONEY_UNIT
              ,'실적'      AS GUBUN
             , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6,
                0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
             
             FROM SSP100T 
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND DIV_CODE = #{DIV_CODE}
               AND PLAN_YEAR = #{PLAN_YEAR}
               AND PLAN_TYPE2 = 'S'
               AND MONEY_UNIT = #{MONEY_UNIT}
               )  XX
            GROUP BY BIT_CD, PLAN_TYPE1, MONEY_UNIT, GUBUN
            
            UNION 
            
            SELECT '5'      AS BIT_CD
              , 'ZZ합계' AS PLAN_TYPE1
              , MONEY_UNIT
              ,'계획'     AS GUBUN
              ,sum(((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT1 ELSE PLAN_AMT1 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT2 ELSE PLAN_AMT2 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT3 ELSE PLAN_AMT3 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT4 ELSE PLAN_AMT4 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT5 ELSE PLAN_AMT5 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT6 ELSE PLAN_AMT6 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT7 ELSE PLAN_AMT7 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT8 ELSE PLAN_AMT8 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT9 ELSE PLAN_AMT9 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT10 ELSE PLAN_AMT10 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT11 ELSE PLAN_AMT11 END) + 
                (CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT12 ELSE PLAN_AMT12 END))) AS PLAN_SUM
                           
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT1 ELSE PLAN_AMT1 END))  AS MONTH1
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT2 ELSE PLAN_AMT2 END))  AS MONTH2 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT3 ELSE PLAN_AMT3 END))  AS MONTH3 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT4 ELSE PLAN_AMT4 END))  AS MONTH4 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT5 ELSE PLAN_AMT5 END))  AS MONTH5 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT6 ELSE PLAN_AMT6 END))  AS MONTH6 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT7 ELSE PLAN_AMT7 END))  AS MONTH7 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT8 ELSE PLAN_AMT8 END))  AS MONTH8 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT9 ELSE PLAN_AMT9 END))  AS MONTH9 
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT10 ELSE PLAN_AMT10 END)) AS MONTH10
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT11 ELSE PLAN_AMT11 END)) AS MONTH11
               ,sum((CASE WHEN #{PLAN_GUBUN} = '2' THEN MOD_PLAN_AMT12 ELSE PLAN_AMT12 END)) AS MONTH12
            
              FROM SSP100T A WITH (NOLOCK)
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND DIV_CODE = #{DIV_CODE}
               AND PLAN_YEAR = #{PLAN_YEAR}
               AND PLAN_TYPE2 = 'S'
               AND MONEY_UNIT = #{MONEY_UNIT}
            GROUP BY  MONEY_UNIT
            UNION 
            SELECT  '6'      AS BIT_CD
              ,'ZZ합계'       AS PLAN_TYPE1
              ,A.MONEY_UNIT       AS MONEY_UNIT
              ,'실적'      AS GUBUN
              ,SUM(B.SALE_AMT_O)    AS PLAN_SUM
              , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
                    , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
             FROM   SSA100T A WITH (NOLOCK) 
              INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                        AND B.DIV_CODE  = A.DIV_CODE
                        AND B.BILL_NUM  = A.BILL_NUM
              LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
                                             AND C.DIV_CODE    = B.OUT_DIV_CODE
                                             AND C.ORDER_NUM   = B.ORDER_NUM
            WHERE A.COMP_CODE = #{S_COMP_CODE}
              AND A.DIV_CODE = #{DIV_CODE}
              AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
              AND A.MONEY_UNIT = #{MONEY_UNIT}
            
            GROUP BY A.COMP_CODE, A.DIV_CODE, A.MONEY_UNIT
                
            
            
            INSERT INTO @PLAN_ACT
            SELECT '3' AS BIT_CD, A.PLAN_TYPE1 AS PLAN_TYPE1, A.MONEY_UNIT, '달성율(%)' AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2
            
            
            
            INSERT INTO @PLAN_ACT
            SELECT '7' AS BIT_CD, A.PLAN_TYPE1, A.MONEY_UNIT, '달성율(%)' AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
                                                      AND A.BIT_CD     = 5
                                                      AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'
                    
            SELECT   BIT_CD
                    ,PLAN_TYPE1
                    ,CASE WHEN BIT_CD = '1' OR BIT_CD = '5' THEN ISNULL(B.CODE_NAME, SUBSTRING(A.PLAN_TYPE1, 3,4))  ELSE '' END   AS PLAN_TYPE1_VIEW
                    ,MONEY_UNIT
                    ,GUBUN
                    ,@MONEY_UNIT_DIV_CODE            AS ENT_MONEY_UNIT
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
              FROM       @PLAN_ACT   A      
              LEFT JOIN BSA100T      B WITH(NOLOCK) ON B.MAIN_CODE = 'S002'
                                                   AND B.SUB_CODE  = A.PLAN_TYPE1             
            ORDER BY PLAN_TYPE1, BIT_CD
        END            
    </select>
    
    <select id="sgp100skrvServiceImpl.customitemSortSelectList" parameterType="Map" resultType="rMap">
		BEGIN
            DECLARE @MONEY_UNIT_DIV NUMERIC(30, 6)      /*계획금액단위 자릿수*/ 
			       ,@MONEY_UNIT_DIV_NAME NVARCHAR(500)
                   ,@MONEY_UNIT_DIV_CODE NVARCHAR(2)    /*계획금액단위 코드*/
            
            SELECT  @MONEY_UNIT_DIV = B.REF_CODE1
			       ,@MONEY_UNIT_DIV_NAME = B.CODE_NAME
                   ,@MONEY_UNIT_DIV_CODE = ISNULL(A.ENT_MONEY_UNIT, B.REF_CODE1)
              FROM       BSA100T B WITH(NOLOCK)
               LEFT JOIN (SELECT TOP 1 COMP_CODE, ENT_MONEY_UNIT
			                FROM SSP100T WITH(NOLOCK) 
							 WHERE COMP_CODE = #{S_COMP_CODE}    							 
							   AND PLAN_TYPE2 = 'A'
					      <if test="ITEM_LEVEL == &quot;1&quot;">    
					            AND LEVEL_KIND = '1'  
					      </if> 	
					      <if test="ITEM_LEVEL == &quot;2&quot;">    
					            AND LEVEL_KIND = '2'  
					      </if> 
					      <if test="ITEM_LEVEL == &quot;3&quot;">    
					            AND LEVEL_KIND = '3'  
					      </if> 					      
							   AND DIV_CODE   = #{DIV_CODE}
							   AND PLAN_YEAR  = #{PLAN_YEAR}  
							   AND MONEY_UNIT = #{MONEY_UNIT}) AS A

			                ON B.COMP_CODE = A.COMP_CODE     
           WHERE B.COMP_CODE = #{S_COMP_CODE}
		     AND B.MAIN_CODE = 'B042'
             AND B.SUB_CODE  = #{MONEY_UNIT_DIV}     
               
            DECLARE @PLAN_ACT TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드(거래처)
				PLAN_TYPE2_CODE2    NVARCHAR(20),              --판매계획구분코드(품목분류)
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )
                
            DECLARE @PLAN_ACT_FINAL TABLE 
                (
                COMP_CODE           NVARCHAR(08),
                BIT_CD              NVARCHAR(01),              --정렬순서
                PLAN_TYPE1          NVARCHAR(10),              --판매유형
				PLAN_TYPE2_CODE     NVARCHAR(20),              --판매계획구분코드(거래처)
				PLAN_TYPE2_CODE2    NVARCHAR(20),              --판매계획구분코드(품목분류)
                MONEY_UNIT          NVARCHAR(10),              --화폐단위
                GUBUN               NVARCHAR(20),              --계획/실적/달성율(%) 
                PLAN_SUM            NUMERIC(30, 6),            --합계
                MONTH1              NUMERIC(30, 6),            --월 
                MONTH2              NUMERIC(30, 6),             
                MONTH3              NUMERIC(30, 6),             
                MONTH4              NUMERIC(30, 6),             
                MONTH5              NUMERIC(30, 6),             
                MONTH6              NUMERIC(30, 6),             
                MONTH7              NUMERIC(30, 6),             
                MONTH8              NUMERIC(30, 6),             
                MONTH9              NUMERIC(30, 6),             
                MONTH10             NUMERIC(30, 6),             
                MONTH11             NUMERIC(30, 6),             
                MONTH12             NUMERIC(30, 6)             
                )                

            INSERT INTO @PLAN_ACT  

			SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, PLAN_TYPE2_CODE2, MONEY_UNIT, GUBUN 
					, SUM(PLAN_SUM) AS  PLAN_SUM, SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5
					, SUM(MONTH6) AS MONTH6, SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12           
			FROM (            
					SELECT A.COMP_CODE
					    ,  '1'                               AS BIT_CD
					    , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) AS PLAN_TYPE1
					    , A.SALE_CUSTOM_CODE                  AS PLAN_TYPE2_CODE  
					    
					    <if test="ITEM_LEVEL == &quot;1&quot;"> 
					    , D.ITEM_LEVEL1                       AS PLAN_TYPE2_CODE2
					    </if>
					    <if test="ITEM_LEVEL == &quot;2&quot;"> 
					    , D.ITEM_LEVEL2                       AS PLAN_TYPE2_CODE2
					    </if>
					    <if test="ITEM_LEVEL == &quot;3&quot;"> 
					    , D.ITEM_LEVEL3                       AS PLAN_TYPE2_CODE2
					    </if>
					    , A.MONEY_UNIT                        AS MONEY_UNIT
					    , '계획'                                AS GUBUN
					    , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
					    , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12
					 FROM           SSA100T A WITH (NOLOCK) 
					     INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                           AND B.DIV_CODE  = A.DIV_CODE
								                           AND B.BILL_NUM  = A.BILL_NUM
					     LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													       AND C.DIV_CODE  = B.OUT_DIV_CODE
													       AND C.ORDER_NUM = B.ORDER_NUM													       
                         INNER JOIN BPR100T D WITH(NOLOCK)  ON D.COMP_CODE = B.COMP_CODE                         
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'
                                                           
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL1 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL3 = E.LEVEL3

                         </if>                             
                                                           											       
					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.SALE_DATE LIKE #{PLAN_YEAR} + '%'
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}
					
                     <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND D.ITEM_LEVEL1 = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND D.ITEM_LEVEL2 = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND D.ITEM_LEVEL3 = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 
				
				    <if test="ITEM_LEVEL == &quot;1&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, D.ITEM_LEVEL1, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;2&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, D.ITEM_LEVEL2, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;3&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE, A.SALE_CUSTOM_CODE, D.ITEM_LEVEL3, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>              
					
            
					UNION 
            
					SELECT A.COMP_CODE
					     , '1'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.PLAN_TYPE2_CODE2  AS PLAN_TYPE2_CODE2
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '계획'               AS GUBUN	
						 ,((CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) + 
							(CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END)) AS PLAN_SUM
                                      
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT1 ELSE A.PLAN_AMT1 END)  AS MONTH1
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT2 ELSE A.PLAN_AMT2 END)  AS MONTH2 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT3 ELSE A.PLAN_AMT3 END)  AS MONTH3 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT4 ELSE A.PLAN_AMT4 END)  AS MONTH4 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT5 ELSE A.PLAN_AMT5 END)  AS MONTH5 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT6 ELSE A.PLAN_AMT6 END)  AS MONTH6 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT7 ELSE A.PLAN_AMT7 END)  AS MONTH7 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT8 ELSE A.PLAN_AMT8 END)  AS MONTH8 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT9 ELSE A.PLAN_AMT9 END)  AS MONTH9 
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT10 ELSE A.PLAN_AMT10 END) AS MONTH10
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT11 ELSE A.PLAN_AMT11 END) AS MONTH11
						, (CASE WHEN #{PLAN_GUBUN} = '2' THEN A.MOD_PLAN_AMT12 ELSE A.PLAN_AMT12 END) AS MONTH12             			             			
					 FROM SSP100T AS A WITH (NOLOCK)
					 
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL3

                         </if> 

					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = 'A'
				      <if test="ITEM_LEVEL == &quot;1&quot;">    
		              AND A.LEVEL_KIND = '1'  
				      </if> 	
				      <if test="ITEM_LEVEL == &quot;2&quot;">    
				      AND A.LEVEL_KIND = '2'  
				      </if> 
				      <if test="ITEM_LEVEL == &quot;3&quot;">    
				      AND A.LEVEL_KIND = '3'  
				      </if> 					  
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
                      <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 	
					 						  

					   )  XX
					GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, PLAN_TYPE2_CODE2, MONEY_UNIT, GUBUN
            
			UNION 

            SELECT COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, PLAN_TYPE2_CODE2, MONEY_UNIT, GUBUN 
                 , SUM(PLAN_SUM) AS  PLAN_SUM
				 , SUM(MONTH1) AS MONTH1, SUM(MONTH2) AS MONTH2, SUM(MONTH3) AS MONTH3, SUM(MONTH4) AS MONTH4, SUM(MONTH5) AS MONTH5, SUM(MONTH6) AS MONTH6
                 , SUM(MONTH7) AS MONTH7, SUM(MONTH8) AS MONTH8, SUM(MONTH9) AS MONTH9, SUM(MONTH10) AS MONTH10, SUM(MONTH11) AS MONTH11, SUM(MONTH12) AS MONTH12            
            FROM (            
					SELECT A.COMP_CODE
					     ,  '2'                                   AS BIT_CD
					     , ISNULL( C.ORDER_TYPE, A.ORDER_TYPE)    AS PLAN_TYPE1
					     , A.SALE_CUSTOM_CODE                  AS PLAN_TYPE2_CODE 
					    <if test="ITEM_LEVEL == &quot;1&quot;"> 
					    , D.ITEM_LEVEL1                       AS PLAN_TYPE2_CODE2
					    </if>
					    <if test="ITEM_LEVEL == &quot;2&quot;"> 
					    , D.ITEM_LEVEL2                       AS PLAN_TYPE2_CODE2
					    </if>
					    <if test="ITEM_LEVEL == &quot;3&quot;"> 
					    , D.ITEM_LEVEL3                       AS PLAN_TYPE2_CODE2
					    </if>
					     , A.MONEY_UNIT                           AS MONEY_UNIT
					     , '실적'                                   AS GUBUN				     
					     , SUM(B.SALE_AMT_O) AS PLAN_SUM
					     , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='01' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH1 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='02' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH2  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='03' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH3  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='04' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH4  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='05' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH5  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='06' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH6  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='07' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH7  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='08' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH8  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='09' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH9  
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='10' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH10 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='11' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH11 
						 , SUM(CASE  WHEN SUBSTRING(SALE_DATE,5,2)='12' THEN B.SALE_AMT_O ELSE 0 END) AS MONTH12 
												
					  FROM           SSA100T A WITH (NOLOCK) 
					      INNER JOIN SSA110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								                            AND B.DIV_CODE  = A.DIV_CODE
								                            AND B.BILL_NUM  = A.BILL_NUM
					      LEFT  JOIN SOF100T C WITH (NOLOCK) ON C.COMP_CODE = B.COMP_CODE
													        AND C.DIV_CODE  = B.OUT_DIV_CODE
													        AND C.ORDER_NUM = B.ORDER_NUM
                         INNER JOIN BPR100T D WITH(NOLOCK)  ON D.COMP_CODE = B.COMP_CODE                         
                                                           AND D.ITEM_CODE = B.ITEM_CODE
                                                           AND D.USE_YN    = 'Y'
                                                           
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL1 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON D.COMP_CODE = E.COMP_CODE  
		                                                              AND D.ITEM_LEVEL3 = E.LEVEL3

                         </if> 
                         												        
					 WHERE A.COMP_CODE = #{S_COMP_CODE}
					   AND A.DIV_CODE  = #{DIV_CODE}
					   AND A.SALE_DATE LIKE #{PLAN_YEAR}  + '%'
					   AND A.MONEY_UNIT = #{MONEY_UNIT} 
					   AND ISNULL( C.ORDER_TYPE, A.ORDER_TYPE) = #{ORDER_TYPE}

                     <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND D.ITEM_LEVEL1 = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND D.ITEM_LEVEL2 = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND D.ITEM_LEVEL3 = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 	
                     				   
				    <if test="ITEM_LEVEL == &quot;1&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE,  A.SALE_CUSTOM_CODE, D.ITEM_LEVEL1, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;2&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE,  A.SALE_CUSTOM_CODE, D.ITEM_LEVEL2, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>
				    <if test="ITEM_LEVEL == &quot;3&quot;"> 
				    GROUP BY A.COMP_CODE, A.DIV_CODE,  A.SALE_CUSTOM_CODE, D.ITEM_LEVEL3, A.MONEY_UNIT, C.ORDER_TYPE, A.ORDER_TYPE
				    </if>  						 					   
              
					UNION 
            
					SELECT A.COMP_CODE
					     , '2'                AS BIT_CD
					     , A.PLAN_TYPE1       AS PLAN_TYPE1
					     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
					     , A.PLAN_TYPE2_CODE2 AS PLAN_TYPE2_CODE2
					     , A.MONEY_UNIT       AS MONEY_UNIT
					     , '실적'               AS GUBUN
					     , 0 AS PLAN_SUM, 0 AS MONTH1, 0 AS MONTH2, 0 AS MONTH3, 0 AS MONTH4, 0 AS MONTH5, 0 AS MONTH6
						 , 0 AS MONTH7, 0 AS MONTH8, 0 AS MONTH9, 0 AS MONTH10, 0 AS MONTH11, 0 AS MONTH12             
					 FROM SSP100T AS A WITH (NOLOCK)
					 
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 INNER JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 INNER JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 INNER JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) E ON A.COMP_CODE = E.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = E.LEVEL3

                         </if> 

					WHERE A.COMP_CODE  = #{S_COMP_CODE}
					  AND A.DIV_CODE   = #{DIV_CODE}
					  AND A.PLAN_YEAR  = #{PLAN_YEAR}
					  AND A.PLAN_TYPE2 = 'A'
				      <if test="ITEM_LEVEL == &quot;1&quot;">    
		              AND A.LEVEL_KIND = '1'  
				      </if> 	
				      <if test="ITEM_LEVEL == &quot;2&quot;">    
				      AND A.LEVEL_KIND = '2'  
				      </if> 
				      <if test="ITEM_LEVEL == &quot;3&quot;">    
				      AND A.LEVEL_KIND = '3'  
				      </if> 					  
					  AND A.MONEY_UNIT = #{MONEY_UNIT}
					  
                      <if test="ITEM_LEVEL == &quot;1&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL1}
	                     </if> 
                     </if>
                     					
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL2}
	                     </if> 
                     </if> 
                     
                     <if test="ITEM_LEVEL == &quot;2&quot;">  
	                     <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	                     AND A.PLAN_TYPE2_CODE = #{ITEM_LEVEL3}
	                     </if> 
                     </if> 					  
					  
						 
               )  XX
            GROUP BY COMP_CODE, BIT_CD, PLAN_TYPE1, PLAN_TYPE2_CODE, PLAN_TYPE2_CODE2, MONEY_UNIT, GUBUN   
            
            INSERT INTO @PLAN_ACT
            SELECT A.COMP_CODE
                 , '3'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.PLAN_TYPE2_CODE2 AS PLAN_TYPE2_CODE2
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12

              FROM  @PLAN_ACT A INNER JOIN @PLAN_ACT B ON A.COMP_CODE  = B.COMP_CODE
                                                      AND A.BIT_CD    != B.BIT_CD
                                                      AND A.PLAN_TYPE1 = B.PLAN_TYPE1
													  AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
													  AND A.PLAN_TYPE2_CODE2 = B.PLAN_TYPE2_CODE2
                                                      AND A.BIT_CD     = 1
                                                      AND B.BIT_CD     = 2


            
            INSERT INTO @PLAN_ACT_FINAL
			SELECT B.*
			FROM (
					SELECT COMP_CODE, PLAN_TYPE2_CODE, PLAN_TYPE2_CODE2 FROM @PLAN_ACT 
					WHERE BIT_CD    = '3' 
					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_FR)">
						AND PLAN_SUM  <![CDATA[>=]]> #{PRCENT_FR}
						</if>					
						<if test="@foren.Ognl@isNotEmpty(PRCENT_TO)">
						AND PLAN_SUM  <![CDATA[<=]]> #{PRCENT_TO}
						</if>				 					
						 
									
					   ) AS A
					  LEFT JOIN @PLAN_ACT AS B ON B.COMP_CODE = A.COMP_CODE
					                          AND B.PLAN_TYPE2_CODE = A.PLAN_TYPE2_CODE
					                          AND B.PLAN_TYPE2_CODE2 = A.PLAN_TYPE2_CODE2
					                          
			INSERT INTO @PLAN_ACT_FINAL
			SELECT COMP_CODE, '5'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, '' AS PLAN_TYPE2_CODE,  MONEY_UNIT,  '계획' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '1'
			GROUP BY COMP_CODE, MONEY_UNIT

            UNION
			SELECT COMP_CODE,  '6'      AS BIT_CD, 'ZZ합계' AS PLAN_TYPE1, '합계' AS PLAN_TYPE2_CODE, '' AS PLAN_TYPE2_CODE, MONEY_UNIT,  '실적' AS GUBUN
                 , SUM(PLAN_SUM) AS PLAN_SUM                           
			     , SUM(MONTH1)  AS MONTH1
			     , SUM(MONTH2)  AS MONTH2 
			     , SUM(MONTH3)  AS MONTH3
			     , SUM(MONTH4)  AS MONTH4
			     , SUM(MONTH5)  AS MONTH5
			     , SUM(MONTH6)  AS MONTH6
			     , SUM(MONTH7)  AS MONTH7
			     , SUM(MONTH8)  AS MONTH8
			     , SUM(MONTH9)  AS MONTH9
			     , SUM(MONTH10)  AS MONTH10
			     , SUM(MONTH11)  AS MONTH11
			     , SUM(MONTH12)  AS MONTH12
            FROM  @PLAN_ACT_FINAL
			WHERE BIT_CD     = '2'
			GROUP BY COMP_CODE, MONEY_UNIT

            INSERT INTO @PLAN_ACT_FINAL
            SELECT A.COMP_CODE
                 , '7'                AS BIT_CD
			     , A.PLAN_TYPE1       AS PLAN_TYPE1
			     , A.PLAN_TYPE2_CODE  AS PLAN_TYPE2_CODE
			     , A.PLAN_TYPE2_CODE2  AS PLAN_TYPE2_CODE2
			     , A.MONEY_UNIT       AS MONEY_UNIT
				 , '달성율(%)'           AS GUBUN
                 , CASE WHEN ISNULL(A.PLAN_SUM, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.PLAN_SUM / A.PLAN_SUM * 100.0)
                    END PLAN_SUM
                 , CASE WHEN ISNULL(A.MONTH1, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH1 / A.MONTH1 * 100.0)
                    END MONTH1
                 , CASE WHEN ISNULL(A.MONTH2, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH2 / A.MONTH2 * 100.0)
                    END MONTH2
                 , CASE WHEN ISNULL(A.MONTH3, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH3 / A.MONTH3 * 100.0)
                    END MONTH3
                 , CASE WHEN ISNULL(A.MONTH4, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH4 / A.MONTH4 * 100.0)
                    END MONTH4      
                 , CASE WHEN ISNULL(A.MONTH5, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH5 / A.MONTH5 * 100.0)
                    END MONTH5
                 , CASE WHEN ISNULL(A.MONTH6, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH6 / A.MONTH6 * 100.0)
                    END MONTH6
                 , CASE WHEN ISNULL(A.MONTH7, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH7 / A.MONTH7 * 100.0)
                    END MONTH7
                 , CASE WHEN ISNULL(A.MONTH8, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH8 / A.MONTH8 * 100.0)
                    END MONTH8
                  , CASE WHEN ISNULL(A.MONTH9, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH9 / A.MONTH9 * 100.0)
                    END MONTH9
                  , CASE WHEN ISNULL(A.MONTH10, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH10 / A.MONTH10 * 100.0)
                    END MONTH10
                 , CASE WHEN ISNULL(A.MONTH11, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH11 / A.MONTH11 * 100.0)
                    END MONTH11
                 , CASE WHEN ISNULL(A.MONTH12, 0.0) = 0.0 
                             THEN 0.0 
                             ELSE CONVERT(NUMERIC(16,4), B.MONTH12 / A.MONTH12 * 100.0)
                    END MONTH12
                        
              FROM  @PLAN_ACT_FINAL A 
                    INNER JOIN @PLAN_ACT_FINAL B ON A.COMP_CODE  = B.COMP_CODE
                                                AND A.BIT_CD    != B.BIT_CD
                                                AND A.PLAN_TYPE1 = B.PLAN_TYPE1
												AND A.PLAN_TYPE2_CODE = B.PLAN_TYPE2_CODE
												AND A.PLAN_TYPE2_CODE2 = B.PLAN_TYPE2_CODE2
                                                AND A.BIT_CD     = 5
                                                AND B.BIT_CD     = 6
            WHERE A.PLAN_TYPE1 = 'ZZ합계'


			   SELECT A.BIT_CD
                    , A.PLAN_TYPE1
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE  ELSE '' END AS S_CODE
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B.CUSTOM_NAME  ELSE '' END AS S_NAME                    
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN A.PLAN_TYPE2_CODE2  ELSE '' END AS S_CODE2
					, CASE WHEN A.BIT_CD = '1' OR A.BIT_CD = '5' THEN B1.LEVEL_NAME  ELSE '' END AS S_NAME2
					, @MONEY_UNIT_DIV_NAME  AS ENT_MONEY_UNIT
                    , A.MONEY_UNIT
                    , A.GUBUN 
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.PLAN_SUM ELSE  A.PLAN_SUM  / @MONEY_UNIT_DIV   END AS PLAN_SUM
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH1   ELSE  A.MONTH1    / @MONEY_UNIT_DIV   END AS MONTH1  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH2   ELSE  A.MONTH2    / @MONEY_UNIT_DIV   END AS MONTH2  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH3   ELSE  A.MONTH3    / @MONEY_UNIT_DIV   END AS MONTH3  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH4   ELSE  A.MONTH4    / @MONEY_UNIT_DIV   END AS MONTH4  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH5   ELSE  A.MONTH5    / @MONEY_UNIT_DIV   END AS MONTH5  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH6   ELSE  A.MONTH6    / @MONEY_UNIT_DIV   END AS MONTH6  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH7   ELSE  A.MONTH7    / @MONEY_UNIT_DIV   END AS MONTH7  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH8   ELSE  A.MONTH8    / @MONEY_UNIT_DIV   END AS MONTH8  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH9   ELSE  A.MONTH9    / @MONEY_UNIT_DIV   END AS MONTH9  
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH10  ELSE  A.MONTH10   / @MONEY_UNIT_DIV   END AS MONTH10
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH11  ELSE  A.MONTH11   / @MONEY_UNIT_DIV   END AS MONTH11
                    ,CASE WHEN A.BIT_CD = '3' OR A.BIT_CD = '7' THEN A.MONTH12  ELSE  A.MONTH12   / @MONEY_UNIT_DIV   END AS MONTH12
										
				FROM @PLAN_ACT_FINAL  AS A
				     LEFT JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
					                                 AND B.CUSTOM_CODE = A.PLAN_TYPE2_CODE
					                                 				
                       <if test="ITEM_LEVEL == &quot;1&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL1 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2  = '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL1,COMP_CODE ) B1 ON A.COMP_CODE = B1.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = B1.LEVEL1

                        </if>    
                        <if test="ITEM_LEVEL == &quot;2&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL2 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3  = '*'
		                                 GROUP BY LEVEL2,COMP_CODE ) B1 ON A.COMP_CODE = B1.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = B1.LEVEL2

                         </if>    
                         <if test="ITEM_LEVEL == &quot;3&quot;"> 
		              	 LEFT JOIN (SELECT LEVEL3 
		                                  , COMP_CODE 
		                                  , MAX(LEVEL_NAME) AS LEVEL_NAME 
		                              FROM BPR000T  WITH(NOLOCK)
                                     WHERE COMP_CODE= #{S_COMP_CODE}
                                       AND LEVEL1 != '*' 
                                       AND LEVEL2 != '*' 
                                       AND LEVEL3 != '*'
		                                 GROUP BY LEVEL3,COMP_CODE ) B1 ON A.COMP_CODE = B1.COMP_CODE  
		                                                              AND A.PLAN_TYPE2_CODE2 = B1.LEVEL3

                         </if> 				
			ORDER BY A.COMP_CODE, A.PLAN_TYPE1, A.PLAN_TYPE2_CODE, A.PLAN_TYPE2_CODE2, A.BIT_CD


     END     	    	
    
    </select>

	
</mapper>