<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agd230ukrServiceImpl">
	<select id="agd230ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
		<if test="WORK_DIVI == &quot;1&quot;"> 							
			--agd230ukr.Cagd230UKR[fnagd230QStd] Query01
			SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			DECLARE @COMP_CODE			NVARCHAR(08)
			      , @FR_SUPP_DATE		NVARCHAR(08)					/* 지급일(FR) */
			      , @TO_SUPP_DATE		NVARCHAR(08)					/* 지급일(TO) */
			      , @PERSON_NUMB		NVARCHAR(20)					/* 소득자 */
			      , @FR_INSERT_DATE		NVARCHAR(08)					/* 입력일(FR) */
			      , @TO_INSERT_DATE		NVARCHAR(08)					/* 입력일(TO) */
			      , @CHARGE_CODE		NVARCHAR(20)					/* 입력자 */
			      , @DED_TYPE			NVARCHAR(06)					/* 소득자타입 */
			      , @PJT_CODE			NVARCHAR(20)					/* 프로젝트코드(사업코드) */
			      , @INPUT_PATH			NVARCHAR(02)					/* 입력경로 */
		
			SET @COMP_CODE		= #{S_COMP_CODE}
			SET @FR_SUPP_DATE	= #{SUPP_DATE_FR}
			SET @TO_SUPP_DATE	= #{SUPP_DATE_TO}
			SET @PERSON_NUMB	= #{PERSON_NUMB}
			SET @FR_INSERT_DATE	= #{INSERT_DATE_FR}
			SET @TO_INSERT_DATE	= #{INSERT_DATE_TO}
			SET @CHARGE_CODE	= #{CHARGE_CODE}
			SET @DED_TYPE		= #{DED_TYPE}
			SET @PJT_CODE		= #{PJT_CODE}
			SET @INPUT_PATH		= N'21'                  /* 기타소득자동기표 */
			            
			SELECT A.PERSON_NUMB
			     , H.NAME                      AS PERSON_NAME
			     , A.PAY_YYYYMM
			     , A.SUPP_DATE
			     
			     , UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.PAY_YYYYMM, 'M') AS P_PAY_YYYYMM
			     , unilite.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)       AS P_SUPP_DATE
			     , A.PAY_AMOUNT_I
			     , A.DED_TYPE
			     , K.CODE_NAME                 AS DED_TYPE_NM
			     , A.DED_CODE
			     , CASE WHEN A.DED_TYPE = '1' AND H.DWELLING_YN  = '1'  
			                 THEN M3.CODE_NAME
			            WHEN A.DED_TYPE = '2' AND H.DWELLING_YN  = '1'  
			                 THEN M4.CODE_NAME
			            WHEN H.DWELLING_YN  = '1'  
			                 THEN M5.CODE_NAME
			            WHEN A.DED_TYPE = '10' OR A.DED_TYPE = '20' 
			                 THEN M6.SUB_CODE + ':' + M6.REF_CODE3
			            ELSE ''
			        END                        AS DED_NAME
			     , A.IN_TAX_I
			     , A.LOCAL_TAX_I
			     , A.CP_TAX_I
			     , ISNULL(A.PAY_AMOUNT_I , 0)
			       - ISNULL(A.IN_TAX_I   , 0)
			       - ISNULL(A.LOCAL_TAX_I, 0)
			       - ISNULL(A.CP_TAX_I   , 0)  AS SUPPLY_AMT_I
			     , A.EXEDEPT_CODE              AS DEPT_CODE    
			     , A.EXEDEPT_NAME              AS DEPT_NAME    
			     --A.DEPT_CODE
			     --D.TREE_NAME                 AS DEPT_NAME
			     , A.PJT_CODE                            -- 사업코드
			     , M1.PJT_NAME                           -- 사업코드명
			     , H.PJT_CODE    AS PROJECT_CODE         -- 프로젝트코드
			     , M2.PJT_NAME   AS PROJECT_NAME         -- 프로젝트명            
			     , A.REMARK
			     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EX_DATE) AS EX_DATE
			     , CASE WHEN A.EX_NUM = 0 THEN NULL ELSE A.EX_NUM END AS EX_NUM
			     , ISNULL(J.AP_STS, '1') AS AP_STS
			     , A.EXEDEPT_NAME
			     , A.SEQ
			  FROM            HPB200T AS A WITH (NOLOCK)
			       LEFT JOIN HPB100T AS H WITH (NOLOCK) ON H.COMP_CODE   = A.COMP_CODE
			                                            AND H.DED_TYPE    = A.DED_TYPE
			                                            AND H.PERSON_NUMB = A.PERSON_NUMB
			       LEFT  JOIN (SELECT COMP_CODE
			                        , EX_DATE
			                        , EX_NUM
			                        , AP_STS
			                     FROM AGJ110T WITH (NOLOCK)
			                    WHERE COMP_CODE  = @COMP_CODE
			                      AND INPUT_PATH = @INPUT_PATH
			                      AND (MOD_DIVI  IS NULL OR MOD_DIVI = '')
			                   GROUP BY COMP_CODE, EX_DATE, EX_NUM, AP_STS
			                  ) J                        ON J.COMP_CODE   = A.COMP_CODE
			                                            AND J.EX_DATE     = A.EX_DATE
			                                            AND J.EX_NUM      = A.EX_NUM
			       LEFT JOIN BSA100T AS K WITH (NOLOCK) ON K.COMP_CODE   = A.COMP_CODE
			                                            AND K.MAIN_CODE   = 'HS15'
			                                            AND K.SUB_CODE    = A.ACC_GU
			       LEFT JOIN  BCM600T M1 WITH (NOLOCK)   ON M1.COMP_CODE  = A.COMP_CODE
			                                            AND M1.PJT_CODE   = A.PJT_CODE
			       LEFT JOIN  BCM600T M2 WITH (NOLOCK)   ON M2.COMP_CODE  = H.COMP_CODE
			                                            AND M2.PJT_CODE   = H.PJT_CODE  
			       LEFT JOIN  BSA100T M3 WITH (NOLOCK)   ON M3.COMP_CODE  = A.COMP_CODE
			                                            AND M3.MAIN_CODE  = 'HS04'
			                                            AND M3.SUB_CODE   = A.DED_CODE
			       LEFT JOIN  BSA100T M4 WITH (NOLOCK)   ON M4.COMP_CODE  = A.COMP_CODE
			                                            AND M4.MAIN_CODE  = 'HS05'
			                                            AND M4.SUB_CODE   = A.DED_CODE                                     
			       LEFT JOIN  BSA100T M5 WITH (NOLOCK)   ON M5.COMP_CODE  = A.COMP_CODE
			                                            AND M5.MAIN_CODE  = 'HS06'
			                                            AND M5.SUB_CODE   = A.DED_CODE  
			       LEFT JOIN  HCD100T M6 WITH (NOLOCK)   ON M6.COMP_CODE  = A.COMP_CODE
			                                            AND M6.MAIN_CODE  = 'HC01'
			                                            AND M6.SUB_CODE   = A.DED_CODE                                                                                                                                                    
			 WHERE A.COMP_CODE     = @COMP_CODE
			   AND A.SUPP_DATE    &gt;= @FR_SUPP_DATE
			   AND A.SUPP_DATE    &lt;= @TO_SUPP_DATE
			   AND ((A.PERSON_NUMB = @PERSON_NUMB AND @PERSON_NUMB != '') OR (@PERSON_NUMB = ''))
			   AND (A.EX_DATE     IS NULL         OR  A.EX_DATE     = '')
			<if test="@foren.Ognl@isNotEmpty(INSERT_DATE_FR)">    
			   AND A.UPDATE_DB_TIME    &gt;= @FR_INSERT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(INSERT_DATE_TO)">    
			   AND A.UPDATE_DB_TIME    &lt;= @TO_INSERT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CHARGE_CODE)">    
			   AND A.UPDATE_DB_USER		= @CHARGE_CODE
			</if>
			<if test="@foren.Ognl@isNotEmpty(DED_TYPE)">    
			   AND A.DED_TYPE		= @DED_TYPE
			</if>
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">     
			   AND A.DIV_CODE IN
				<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
					#{item}
				</foreach>         
			</if>
	        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   AND  A.PJT_CODE IN
				 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		          		 #{item}
		    	 </foreach>
			</if>

		</if>
		
		<if test="WORK_DIVI == &quot;2&quot;"> 							
			--agd230ukr.Cagd230UKR[fnagd230QStd] Query02
			SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			DECLARE @COMP_CODE     NVARCHAR(08)
			      , @FR_SUPP_DATE		NVARCHAR(08)					/* 지급일(FR) */
			      , @TO_SUPP_DATE		NVARCHAR(08)					/* 지급일(TO) */
			      , @PERSON_NUMB		NVARCHAR(20)					/* 소득자 */
			      , @FR_INSERT_DATE		NVARCHAR(08)					/* 입력일(FR) */
			      , @TO_INSERT_DATE		NVARCHAR(08)					/* 입력일(TO) */
			      , @CHARGE_CODE		NVARCHAR(20)					/* 입력자 */
			      , @DED_TYPE			NVARCHAR(06)					/* 소득구분 */
			      , @PJT_CODE			NVARCHAR(20)					/* 프로젝트코드(사업코드) */
			      , @INPUT_PATH			NVARCHAR(02)					/* 입력경로 */
		
			SET @COMP_CODE		= #{S_COMP_CODE}
			SET @FR_SUPP_DATE	= #{SUPP_DATE_FR}
			SET @TO_SUPP_DATE	= #{SUPP_DATE_TO}
			SET @PERSON_NUMB	= #{PERSON_NUMB}
			SET @FR_INSERT_DATE	= #{INSERT_DATE_FR}
			SET @TO_INSERT_DATE	= #{INSERT_DATE_TO}
			SET @CHARGE_CODE	= #{CHARGE_CODE}
			SET @DED_TYPE		= #{DED_TYPE}
			SET @PJT_CODE		= #{PJT_CODE}
			SET @INPUT_PATH = N'21'                    /* 기타소득자동기표 */
			            
			SELECT DISTINCT 
			       CONVERT(BIT, 0)             AS CHK
			     , A.PERSON_NUMB
			     , H.NAME                      AS PERSON_NAME
			     , A.PAY_YYYYMM
			     , A.SUPP_DATE
			     , UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.PAY_YYYYMM, 'M') AS P_PAY_YYYYMM
			     , unilite.fnGetUserDateComp(A.COMP_CODE, A.SUPP_DATE)       AS P_SUPP_DATE
			     , A.PAY_AMOUNT_I
			     , A.IN_TAX_I
			     , A.LOCAL_TAX_I
			     , A.CP_TAX_I
			     , A.DED_TYPE
			     , A.DED_CODE
			     , CASE WHEN A.DED_TYPE = '1' AND H.DWELLING_YN  = '1'  
			                 THEN M3.CODE_NAME
			            WHEN A.DED_TYPE = '2' AND H.DWELLING_YN  = '1'  
			                 THEN M4.CODE_NAME
			            WHEN H.DWELLING_YN  = '1'  
			                 THEN M5.CODE_NAME
			            WHEN A.DED_TYPE = '10' OR A.DED_TYPE = '20' 
			                 THEN M6.SUB_CODE + ':' + M6.REF_CODE3
			            ELSE ''
			        END                        AS DED_NAME
			     , ISNULL(A.PAY_AMOUNT_I , 0)
			       - ISNULL(A.IN_TAX_I   , 0)
			       - ISNULL(A.LOCAL_TAX_I, 0)
			       - ISNULL(A.CP_TAX_I   , 0)  AS SUPPLY_AMT_I
			     , A.EXEDEPT_CODE              AS DEPT_CODE    --A.DEPT_CODE
			     , A.EXEDEPT_NAME              AS DEPT_NAME    --D.TREE_NAME                 AS DEPT_NAME
			     , A.PJT_CODE                            -- 사업코드
			     , M1.PJT_NAME                           -- 사업코드명
			     , H.PJT_CODE    AS PROJECT_CODE         -- 프로젝트코드
			     , M2.PJT_NAME   AS PROJECT_NAME         -- 프로젝트명     
			     , A.REMARK
			     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EX_DATE) AS EX_DATE
			     , A.EX_NUM
			     , ISNULL(J.AP_STS, '1') AS AP_STS
			     , K.CODE_NAME                 AS DED_TYPE_NM
			     , A.EXEDEPT_NAME
			     , A.SEQ
			  FROM            HPB200T AS A WITH (NOLOCK)
			       INNER JOIN HPB100T AS H WITH (NOLOCK) ON H.COMP_CODE   = A.COMP_CODE
			                                            AND H.DED_TYPE    = A.DED_TYPE
			                                            AND H.PERSON_NUMB = A.PERSON_NUMB
			       LEFT  JOIN (SELECT COMP_CODE
			                        , EX_DATE
			                        , EX_NUM
			                        , AP_STS
			                     FROM AGJ110T WITH (NOLOCK)
			                    WHERE COMP_CODE  = @COMP_CODE
			                      AND INPUT_PATH = @INPUT_PATH
			                      AND (MOD_DIVI  IS NULL OR MOD_DIVI = '')
			                   GROUP BY COMP_CODE, EX_DATE, EX_NUM, AP_STS
			                  ) J                        ON J.COMP_CODE   = A.COMP_CODE
			                                            AND J.EX_DATE     = A.EX_DATE
			                                            AND J.EX_NUM      = A.EX_NUM
			       INNER JOIN BSA100T AS K WITH (NOLOCK) ON K.COMP_CODE   = A.COMP_CODE
			                                            AND K.MAIN_CODE   = 'HS15'
			                                            AND K.SUB_CODE    = A.ACC_GU
			       LEFT JOIN  BCM600T M1 WITH (NOLOCK)   ON M1.COMP_CODE  = A.COMP_CODE
			                                            AND M1.PJT_CODE   = A.PJT_CODE
			       LEFT JOIN  BCM600T M2 WITH (NOLOCK)   ON M2.COMP_CODE  = H.COMP_CODE
			                                            AND M2.PJT_CODE   = H.PJT_CODE  
			       LEFT JOIN  BSA100T M3 WITH (NOLOCK)   ON M3.COMP_CODE  = A.COMP_CODE
			                                            AND M3.MAIN_CODE  = 'HS04'
			                                            AND M3.SUB_CODE   = A.DED_CODE
			       LEFT JOIN  BSA100T M4 WITH (NOLOCK)   ON M4.COMP_CODE  = A.COMP_CODE
			                                            AND M4.MAIN_CODE  = 'HS05'
			                                            AND M4.SUB_CODE   = A.DED_CODE                                     
			       LEFT JOIN  BSA100T M5 WITH (NOLOCK)   ON M5.COMP_CODE  = A.COMP_CODE
			                                            AND M5.MAIN_CODE  = 'HS06'
			                                            AND M5.SUB_CODE   = A.DED_CODE  
			       LEFT JOIN  HCD100T M6 WITH (NOLOCK)   ON M6.COMP_CODE  = A.COMP_CODE
			                                            AND M6.MAIN_CODE  = 'HC01'
			                                            AND M6.SUB_CODE   = A.DED_CODE     
			 WHERE A.COMP_CODE = @COMP_CODE
			   AND A.SUPP_DATE    &gt;= @FR_SUPP_DATE
			   AND A.SUPP_DATE    &lt;= @TO_SUPP_DATE
			   AND ((A.PERSON_NUMB = @PERSON_NUMB AND @PERSON_NUMB != '') OR (@PERSON_NUMB = ''))
			   AND ISNULL(A.EX_DATE, '') != ''
			<if test="@foren.Ognl@isNotEmpty(INSERT_DATE_FR)">    
			   AND A.UPDATE_DB_TIME    &gt;= @FR_INSERT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(INSERT_DATE_TO)">    
			   AND A.UPDATE_DB_TIME    &lt;= @TO_INSERT_DATE
			</if>
			<if test="@foren.Ognl@isNotEmpty(CHARGE_CODE)">    
			   AND A.UPDATE_DB_USER		= @CHARGE_CODE
			</if>
			<if test="@foren.Ognl@isNotEmpty(DED_TYPE)">    
			   AND A.DED_TYPE		= @DED_TYPE
			</if>
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">     
			   AND A.DIV_CODE IN
				<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
					#{item}
				</foreach>         
			</if>
	        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   AND  A.PJT_CODE IN
				 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		          		 #{item}
		    	 </foreach>
			</if>
		</if>
	</select>

	
	<insert id="agd230ukrServiceImpl.insertLogDetail" parameterType="Map">     
	    INSERT INTO L_AGD230T
	           (
	             KEY_VALUE
       		   , OPR_FLAG
       		   , COMP_CODE
			   , PERSON_NUMB
			   , PERSON_NAME
			   , PAY_YYYYMM
			   , SUPP_DATE
			   , SEQ
			   , P_PAY_YYYYMM
			   , P_SUPP_DATE
			   , DED_TYPE
			   , DED_TYPE_NM
			   , DED_CODE
			   , PAY_AMOUNT_I
			   , IN_TAX_I
			   , LOCAL_TAX_I
			   , CP_TAX_I
			   , SUPPLY_AMT_I
			   , DEPT_CODE
			   , DEPT_NAME
			   , PJT_CODE
			   , PJT_NAME
			   , REMARK
			   , EX_DATE
			   , EX_NUM
			   , AP_STS
			   , EXEDEPT_NAME
			   , WORK_DATE
	           , INSERT_DB_USER
	           , INSERT_DB_TIME     
	           )
	     VALUES
	           ( 
	             #{KEY_VALUE}
       		   , #{OPR_FLAG}    
       		   , #{S_COMP_CODE}     
			   , #{PERSON_NUMB}
			   , #{PERSON_NAME}
			   , #{PAY_YYYYMM}
			   , #{SUPP_DATE}
			   , #{SEQ}
			   , SUBSTRING(#{P_PAY_YYYYMM}, 1, 4) + SUBSTRING(#{P_PAY_YYYYMM}, 6, 2)+ SUBSTRING(#{P_PAY_YYYYMM}, 9, 2)
			   , #{P_SUPP_DATE}
			   , #{DED_TYPE}
			   , #{DED_TYPE_NM}
			   , #{DED_CODE}
			   , #{PAY_AMOUNT_I}
			   , #{IN_TAX_I}
			   , #{LOCAL_TAX_I}
			   , #{CP_TAX_I}
			   , #{SUPPLY_AMT_I}
			   , #{DEPT_CODE}
			   , #{DEPT_NAME}
			   , ''   -- SP에서 사용안함
			   , ''   -- SP에서 사용안함
			   , #{REMARK}
			   , #{EX_DATE}
			   , #{EX_NUM}
			   , #{AP_STS}
			   , #{EXEDEPT_NAME}
			   , #{WORK_DATE}
	           , #{S_USER_ID}       
	           , GETDATE()         
	           ) 
	</insert>
	<select id="agd230ukrServiceImpl.selectSysdate" parameterType="Map" resultType="rMap">
		SELECT CONVERT(NVARCHAR(8), GETDATE(), 112) AS SYS_DATE
	</select>
	
	<update id="spUspAccntAutoSlip21" parameterType="Map" statementType="CALLABLE">
	    {call USP_ACCNT_AutoSlip21 (
	        #{S_COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{PROC_TYPE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},    -- (필수) 전표생성 1:건별로 전표 생성, 2:동일 전표로 생성
	        #{DATE_OPTION,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},  	-- (선택) 전표일 생성옵션
	        #{WORK_DATE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{S_USER_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{INPUT_DATE,    mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},   	-- (선택) 시스템일자
	        #{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}, 
	        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        'LIST',
	        #{EBYN_MESSAGE,  mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},    -- (반환) TRUE:메세지띄움, FALSE:메세지안띄움
	        #{ERROR_DESC,    mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},    -- (반환) 에러명세
	        #{SLIP_KEY_VALUE,mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String} 	-- (반환) 개별자동기표일 경우 로그테이블의 KEY 문자열
	      
	    )}
	</update>   
	
	<update id="spUspAccntAutoSlip21Cancel" parameterType="Map" statementType="CALLABLE">
	    {call USP_ACCNT_AutoSlip21Cancel (
	        #{S_COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{S_USER_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{INPUT_DATE,    mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},   	-- (선택) 시스템일자
	        #{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
	        'LIST',
	        #{ERROR_DESC, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	    )}
	    
	</update>   
</mapper>