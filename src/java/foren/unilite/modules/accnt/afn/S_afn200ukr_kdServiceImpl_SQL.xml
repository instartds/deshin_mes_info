<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_afn200ukr_kdServiceImpl">
					
<select id="s_afn200ukr_kdServiceImpl.selectList" parameterType="Map" resultType="rMap">
	/*UAfn01Krv.Cafn200UKR[fnafn200nq] Query1*/
SELECT A.NOTE_DIVI
     , A.NOTE_NUM
     , A.BANK_CODE
     , B.CUSTOM_NAME AS BANK_NAME
     , A.INSOCK_DATE
     , A.FLOAT_DATE
     , A.SET_DATE 
     , A.PROC_SW
     , A.UPDATE_DB_USER
     , A.UPDATE_DB_TIME
     , A.COMP_CODE
FROM            AFN200T AS A WITH (NOLOCK)
     LEFT  JOIN BCM100T AS B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                          AND B.CUSTOM_CODE = A.BANK_CODE
                                          AND B.CUSTOM_TYPE = '4'
WHERE A.COMP_CODE = #{S_COMP_CODE}
<if test="@foren.Ognl@isNotEmpty(NOTE_DIVI)">
	AND A.NOTE_DIVI = #{NOTE_DIVI}
</if>
<if test="@foren.Ognl@isNotEmpty(BANK_CODE)">
	AND A.BANK_CODE LIKE '%'+ #{BANK_CODE} + '%'
</if>
<if test="@foren.Ognl@isNotEmpty(INSOCK_DATE_FR)">
	AND A.INSOCK_DATE &gt;= #{INSOCK_DATE_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(INSOCK_DATE_TO)">
	AND A.INSOCK_DATE &lt;= #{INSOCK_DATE_TO}
</if>
<if test="@foren.Ognl@isNotEmpty(NOTE_NUM_FR)">
	AND A.NOTE_NUM &gt;= #{NOTE_NUM_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(NOTE_NUM_TO)">
	AND A.NOTE_NUM &lt;= #{NOTE_NUM_TO}
 </if>

</select>

<insert id="s_afn200ukr_kdServiceImpl.insertDetail" parameterType="Map">    	
/*UAfn01Krv.Cafn200UKR[fnafn200set] Query3*/

INSERT INTO AFN200T
     ( NOTE_DIVI
     , NOTE_NUM
     , BANK_CODE
     , INSOCK_DATE
     , PROC_SW
     , FLOAT_DATE
     , SET_DATE
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     , COMP_CODE
     ) 
VALUES
     ( #{NOTE_DIVI}        
     , #{NOTE_NUM}         
     , #{BANK_CODE}        
     , #{INSOCK_DATE}      
     , #{PROC_SW}   
     , #{FLOAT_DATE}
     , #{SET_DATE}       
     , #{S_USER_ID}   
     , GETDATE()
     , #{S_COMP_CODE}        
     )
</insert>
	
<update id="s_afn200ukr_kdServiceImpl.updateDetail" parameterType="Map">		
/*UAfn01Krv.Cafn200UKR[fnafn200set] Query3*/

UPDATE AFN200T
   SET INSOCK_DATE    = #{INSOCK_DATE}
     , FLOAT_DATE     = #{FLOAT_DATE}
     , SET_DATE       = #{SET_DATE}
     , PROC_SW        = #{PROC_SW}
     , UPDATE_DB_USER = #{S_USER_ID}
     , UPDATE_DB_TIME = GETDATE()
     
 WHERE NOTE_DIVI      = #{NOTE_DIVI}
   AND NOTE_NUM       = #{NOTE_NUM}
   AND BANK_CODE      = #{BANK_CODE}
   AND COMP_CODE      = #{S_COMP_CODE}

</update>

<update id="s_afn200ukr_kdServiceImpl.deleteDetail" parameterType="Map">
  /*UAfn01Krv.Cafn200UKR[fnafn200set] Query2*/
DELETE FROM AFN200T 
 WHERE NOTE_DIVI = #{NOTE_DIVI}       
   AND NOTE_NUM  = #{NOTE_NUM}        
   AND BANK_CODE = #{BANK_CODE}       
   AND COMP_CODE = #{S_COMP_CODE}     
  
</update>

<select id="s_afn200ukr_kdServiceImpl.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
</select>
	
    <select id="s_afn200ukr_kdServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">	/* 엑셀업로드 */
		
		/*s_afn200ukr_kdServiceImpl.selectExcelUploadSheet1*/
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON
		
		    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
		          , @UserId      NVARCHAR(100) /* 사용자ID    */
		          , @LangType    NVARCHAR(2)  /* 언어구분    */
		          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
		          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
		
		    SET @CompCode = #{S_COMP_CODE}
		    SET @UserId   = #{S_USER_ID}
		    SET @LangType = #{S_LANG_CODE}  
		
		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		      FROM BSA300T WITH (NOLOCK)
		     WHERE USER_ID = @UserId
		
		    SET @RefItem = ISNULL(@RefItem, N'0')
		
		    /* 날짜 포맷 유형 설정 */
		    SELECT TOP 1 @DateFormat = CODE_NAME
		      FROM BSA100T WITH (NOLOCK)
		     WHERE COMP_CODE = @CompCode
		       AND MAIN_CODE = N'B044'
		       AND REF_CODE1 = N'Y'
		
		    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
		    /* 데이터 조회 */   
			SELECT A.NOTE_DIVI_NAME
				 , M1.SUB_CODE AS NOTE_DIVI
			     , A.NOTE_NUM
			     , B.CUSTOM_CODE AS BANK_CODE
				 , A.BANK_NAME
			     , A.INSOCK_DATE
			     , A.FLOAT_DATE
			     , A.SET_DATE 
				 , M2.SUB_CODE AS PROC_SW
			     , A.PROC_SW_NAME
			     , A.UPDATE_DB_USER
			     , A.UPDATE_DB_TIME
			     , A.COMP_CODE
			FROM      AFN200T_EXCEL AS A WITH (NOLOCK)
			     LEFT  JOIN BCM100T AS B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
			                                          AND B.CUSTOM_NAME = A.BANK_NAME
			                                          AND B.CUSTOM_TYPE = '4'  
				 LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE     = A.COMP_CODE 
													  AND M1.MAIN_CODE = 'A031'
													  AND M1.CODE_NAME = A.NOTE_DIVI_NAME
				 LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE 
													  AND M2.MAIN_CODE = 'A064'
													  AND M2.CODE_NAME = A.PROC_SW_NAME 
			 WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
			 ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM			                                          
		END
		 
	</select>	
	
	<update id="excelValidate" >
	/*s_afn200ukr_kdService.excelValidate*/
		<!--
		UPDATE   A
		SET 
				A._EXCEL_HAS_ERROR = ISNULL(_EXCEL_HAS_ERROR,'Y'),
								     
				A._EXCEL_ERROR_MSG = ISNULL(_EXCEL_ERROR_MSG,'') + '어음수표번호가 이미 존재합니다.' 		
		FROM   AFN200T_EXCEL A
		LEFT JOIN  AFN200T B    ON B.COMP_CODE = #{S_COMP_CODE}
								AND A.NOTE_NUM = B.NOTE_NUM
									
		WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}							
		-->
	</update>	
	
	<insert id="s_afn200ukr_kdServiceImpl.insertExcelAfn200t" parameterType="Map">		/* 엑셀insert */
    	/*s_afn200ukr_kdServiceImpl.insertExcelAfn200t*/
		   
    	INSERT INTO AFN200T_EXCEL
    		(_EXCEL_JOBID, _EXCEL_ROWNUM, _EXCEL_HAS_ERROR, _EXCEL_ERROR_MSG, COMP_CODE, NOTE_DIVI_NAME, NOTE_NUM, BANK_NAME
    		, INSOCK_DATE, FLOAT_DATE, SET_DATE, PROC_SW_NAME, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
    	VALUES (
    		#{_EXCEL_JOBID}, #{_EXCEL_ROWNUM}, #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}, #{_EXCEL_ERROR,jdbcType=VARCHAR}, #{S_COMP_CODE}, #{NOTE_DIVI_NAME}, #{NOTE_NUM}, #{BANK_NAME}
    		, #{INSOCK_DATE}, #{FLOAT_DATE}, #{SET_DATE}, #{PROC_SW_NAME}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
		)
				
		<!--
		MERGE HAT500T_EXCEL AS M
			USING ( SELECT #{DUTY_YYYYMMDD} AS DUTY_YYYYMMDD, #{PERSON_NUMB} AS PERSON_NUMB, #{DUTY_FR_DHM} AS DUTY_FR_DHM ) AS A
			ON M.DUTY_YYYYMMDD = A.DUTY_YYYYMMDD
			AND M.PERSON_NUMB = A.PERSON_NUMB
			AND M.DUTY_FR_DHM = A.DUTY_FR_DHM
			WHEN NOT MATCHED THEN
		    	INSERT 
		    		(COMP_CODE, DUTY_YYYYMMDD, PERSON_NUMB, NAME
		    		, DEPT_CODE, DEPT_NAME, DUTY_FR_DHM, DUTY_TO_DHM, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
		    	VALUES (
		    		#{S_COMP_CODE}, #{DUTY_YYYYMMDD}, #{PERSON_NUMB}, #{NAME}
		    		, #{DEPT_CODE}, #{DEPT_NAME}, #{DUTY_FR_DHM}, #{DUTY_TO_DHM}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
				)
			WHEN MATCHED THEN
				UPDATE SET DUTY_FR_DHM = #{DUTY_FR_DHM}
						  ,DUTY_TO_DHM = #{DUTY_TO_DHM}
						  ,UPDATE_DB_USER = #{S_USER_ID}
						  ,UPDATE_DB_TIME =GETDATE();	  	
		-->	  	
    </insert>	
	
	
</mapper>