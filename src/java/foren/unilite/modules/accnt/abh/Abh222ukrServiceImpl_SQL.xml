<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="abh222ukrServiceImpl">
 
<select id="abh222ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
 SELECT T1.CHK
      , ROW_NUMBER() OVER (ORDER BY T1.PRE_DATE) AS ROW_NUMBER
      , T1.COMP_CODE
      , T1.ACCNT
      , T1.ACCNT_NAME
      , uniLITE.fnGetUserDate(T1.COMP_CODE,T1.ORG_AC_DATE)  AS ORG_AC_DATE      
      , T1.ORG_SLIP_NUM
      , T1.ORG_SLIP_SEQ
      , T1.SEQ
      , T1.CUSTOM_CODE           AS  PAY_CUSTOM_CODE
      , T1.CUSTOM_NAME           AS  PAY_CUSTOM_NAME

      , CASE WHEN ISNULL(T1.CUST_BANK_CODE, '')     = '' THEN T1.BCM_BANK_CODE ELSE ISNULL(T1.CUST_BANK_CODE, '')                     END AS BANK_CODE
      , CASE WHEN ISNULL(T11.CUSTOM_NAME, '')       = '' THEN ISNULL(BCM.CUSTOM_NAME, '') ELSE ISNULL(T11.CUSTOM_NAME, '')            END AS BANK_NAME
      , CASE WHEN ISNULL(T1.CUST_BANKBOOK_NUM, '')  = '' THEN ISNULL(T1.BCM_BANKBOOK_NUM, '') ELSE ISNULL(T1.CUST_BANKBOOK_NUM, '')   END AS BANK_ACCOUNT
      , CASE WHEN ISNULL(T1.CUST_BANKBOOK_NAME, '') = '' THEN ISNULL(T1.BCM_BANKBOOK_NAME, '') ELSE ISNULL(T1.CUST_BANKBOOK_NAME, '') END AS BANKBOOK_NAME
--      , T1.BCM_BANK_CODE         AS  BANK_CODE
--      , BCM.CUSTOM_NAME          AS  BANK_NAME
--      , T1.BCM_BANKBOOK_NUM      AS  BANK_ACCOUNT
--      , T1.BCM_BANKBOOK_NAME     AS  BANKBOOK_NAME

      , T1.PRE_DATE
      , T1.DEPT_CODE
      , T1.DEPT_NAME
      , T1.ORG_AMT_I        -- 발생금액
      , T1.IN_TAX_I
      , T1.LOCAL_TAX_I
      , T1.BLN_I            -- 잔액
      , T1.ORG_AMT_I - T1.J_AMT_I  AS JAN_AMT_I-- 지급대상금액
      , T1.ORG_AMT_I - T1.J_AMT_I - ISNULL(T1.IN_TAX_I, 0) - ISNULL(T1.LOCAL_TAX_I, 0) AS REAL_AMT_I -- 실지급액
      , T1.REMARK
      , T1.DIV_CODE
      
      , T4.RCPT_ID
      , T4.RCPT_NAME
      , T4.CMS_TRANS_YN
      , T4.RCPT_RESULT_MSG
      , T4.RCPT_STATE_NUM
      
   FROM (
         SELECT '1'                                           AS CHK
              , A.COMP_CODE
              , A.ACCNT
              , A.ACCNT_NAME
              , A.ORG_AC_DATE
              , A.ORG_SLIP_NUM
              , A.ORG_SLIP_SEQ
              , A.SEQ                                         AS SEQ
              
              , CASE WHEN A.CUSTOM_CODE = '' THEN A.PEND_DATA_CODE
                ELSE A.CUSTOM_CODE END                        AS CUSTOM_CODE
              , CASE WHEN A.CUSTOM_NAME = '' THEN A.PAY_CUSTOM_NAME
                ELSE A.CUSTOM_NAME END                        AS CUSTOM_NAME
              
         --     , A.PEND_DATA_CODE                              AS CUSTOM_CODE
         --     , A.PAY_CUSTOM_NAME                             AS CUSTOM_NAME
              , CASE WHEN ISNULL(A.BANK_CODE, '') = '' THEN ISNULL(Y.BANK_CODE, '')
                ELSE ISNULL(A.BANK_CODE, '') END              AS BCM_BANK_CODE
              , CASE WHEN ISNULL(A.ACCOUNT_NUM, '') = '' THEN uniLITE.fnCipherDecrypt(Y.BANKBOOK_NUM, 'B')
                ELSE ISNULL(A.ACCOUNT_NUM, '') END            AS BCM_BANKBOOK_NUM
              , ISNULL(Y.BANKBOOK_NAME, '')                   AS BCM_BANKBOOK_NAME
              , CASE WHEN ISNULL(A.PRE_DATE, '') = '' THEN ISNULL(C.PRE_DATE, '')
                ELSE ISNULL(A.PRE_DATE, '') END               AS PRE_DATE
              , A.DEPT_CODE
              , A.DEPT_NAME
              , A.ORG_AMT_I                                   AS ORG_AMT_I        -- 발생금액
              , ISNULL(A.IN_TAX_I, 0)                         AS IN_TAX_I
              , ISNULL(A.LOCAL_TAX_I, 0)                      AS LOCAL_TAX_I
              , A.J_AMT_I                                     AS J_AMT_I          -- 총 반제한 금액
              , A.BLN_I                                       AS BLN_I            -- 잔액
              , ISNULL(A.REMARK, '')                          AS REMARK
              , A.DIV_CODE
              
              , ISNULL(T.BANK_CODE, '')                       AS CUST_BANK_CODE
              , ISNULL(T.BANKBOOK_NUM, '')                    AS CUST_BANKBOOK_NUM
              , ISNULL(T.BANKBOOK_NAME, '')                   AS CUST_BANKBOOK_NAME
           FROM ABH220TV1 A
                LEFT JOIN (SELECT ACCNT
                                , AC_DATE
                                , SLIP_NUM
                                , SLIP_SEQ
                                , CASE WHEN AC_CODE1 ='L3' THEN AC_DATA1
                                        WHEN AC_CODE2 ='L3' THEN AC_DATA2
                                        WHEN AC_CODE3 ='L3' THEN AC_DATA3
                                        WHEN AC_CODE4 ='L3' THEN AC_DATA4
                                        WHEN AC_CODE5 ='L3' THEN AC_DATA5
                                        WHEN AC_CODE6 ='L3' THEN AC_DATA6
                                        ELSE                     ''
                                    END PRE_DATE
                                , ISNULL(REMARK,'') AS REMARK
                                , INPUT_DIVI
                                , COMP_CODE
                             FROM AGJ210T WITH (NOLOCK)
                            WHERE COMP_CODE             = #{S_COMP_CODE}
                              AND AC_DATE              &gt;= #{ORG_AC_DATE_FR}
                              AND AC_DATE              &lt;= #{ORG_AC_DATE_TO}  
                              AND (AC_CODE1 = 'L3' OR AC_CODE2 = 'L3' OR AC_CODE3 = 'L3' OR AC_CODE4 = 'L3' OR AC_CODE5 = 'L3' OR AC_CODE6 = 'L3')     
                              AND ISNULL(MOD_DIVI, '')  = ''
                            )        C                ON C.COMP_CODE       = A.COMP_CODE
                                                     AND C.ACCNT           = A.ACCNT
                                                     AND C.AC_DATE         = A.ORG_AC_DATE
                                                     AND C.SLIP_NUM        = A.ORG_SLIP_NUM
                                                     AND C.SLIP_SEQ        = A.ORG_SLIP_SEQ
              LEFT JOIN (SELECT D.ACCNT
                                   , D.AC_DATE
                                   , D.SLIP_NUM
                                   , D.SLIP_SEQ
                                   , K.BANK_CODE
                                   , K.BANKBOOK_NUM
                                   , K.BANKBOOK_NAME
                                   , ISNULL(D.REMARK,'') AS REMARK
                                   , D.INPUT_DIVI
                                   , D.COMP_CODE
                                FROM AGJ210T D WITH (NOLOCK)
                                     LEFT JOIN BCM130T K  ON K.COMP_CODE = D.COMP_CODE
                                                         AND K.CUSTOM_CODE = D.CUSTOM_CODE
                                                         AND K.BOOK_CODE = (CASE WHEN AC_CODE1 ='O2' THEN AC_DATA1
                                                                                 WHEN AC_CODE2 ='O2' THEN AC_DATA2
                                                                                 WHEN AC_CODE3 ='O2' THEN AC_DATA3
                                                                                 WHEN AC_CODE4 ='O2' THEN AC_DATA4
                                                                                 WHEN AC_CODE5 ='O2' THEN AC_DATA5
                                                                                 WHEN AC_CODE6 ='O2' THEN AC_DATA6
                                                                                 ELSE                     ''
                                                                             END
                                                                           )
                            WHERE D.COMP_CODE             = #{S_COMP_CODE}      
                              AND D.AC_DATE              &gt;= #{ORG_AC_DATE_FR}
                              AND D.AC_DATE              &lt;= #{ORG_AC_DATE_TO}  
                              AND (D.AC_CODE1 = 'O2' OR D.AC_CODE2 = 'O2' OR D.AC_CODE3 = 'O2' OR D.AC_CODE4 = 'O2' OR D.AC_CODE5 = 'O2' OR D.AC_CODE6 = 'O2')     
                              AND ISNULL(D.MOD_DIVI, '')  = ''
                            )        T                ON T.COMP_CODE       = A.COMP_CODE
                                                     AND T.ACCNT           = A.ACCNT
                                                     AND T.AC_DATE         = A.ORG_AC_DATE
                                                     AND T.SLIP_NUM        = A.ORG_SLIP_NUM
                                                     AND T.SLIP_SEQ        = A.ORG_SLIP_SEQ
                LEFT JOIN (SELECT * 
                             FROM (SELECT AA.COMP_CODE
                                        , AA.CUSTOM_CODE
                                        , AA.BOOK_CODE
                                        , AA.BOOK_NAME
                                        , AA.BANK_CODE
                                        , AA.BANKBOOK_NUM
                                        , AA.BANKBOOK_NAME
                                        , BB.CUSTOM_NAME AS BANK_NAME
                                        , AA.MAIN_BOOK_YN
                                        , RANK() OVER( PARTITION BY AA.COMP_CODE, AA.CUSTOM_CODE 
                                                       ORDER BY  AA.MAIN_BOOK_YN DESC, AA.BOOK_CODE ASC
                                                      ) AS RK 
                                     FROM           BCM130T AA WITH (NOLOCK) 
                                          LEFT JOIN BCM100T BB WITH (NOLOCK) ON BB.COMP_CODE   = AA.COMP_CODE
                                                                            AND BB.CUSTOM_CODE = AA.BANK_CODE
                                                                            AND BB.CUSTOM_TYPE = '4'
                                    WHERE AA.COMP_CODE = #{S_COMP_CODE})  DD
                            WHERE RK = 1) Y  ON Y.COMP_CODE   = A.COMP_CODE
                                            AND Y.CUSTOM_CODE = A.PEND_DATA_CODE
                                            AND Y.RK          = 1
          WHERE A.COMP_CODE = #{S_COMP_CODE}
            AND A.ORG_AC_DATE &gt;= #{ORG_AC_DATE_FR}
            AND A.ORG_AC_DATE &lt;= #{ORG_AC_DATE_TO}
            AND A.BLN_I       != 0
            AND NOT EXISTS ( SELECT * FROM ABH222T Z WHERE Z.COMP_CODE = A.COMP_CODE AND Z.ACCNT = A.ACCNT AND Z.ORG_AC_DATE = A.ORG_AC_DATE AND Z.ORG_SLIP_NUM = A.ORG_SLIP_NUM AND Z.ORG_SLIP_SEQ = Z.ORG_SLIP_SEQ )

         UNION ALL
 
         SELECT '1'                                           AS CHK
              , A.COMP_CODE
              , A.ACCNT
              , A.ACCNT_NAME
              , A.ORG_AC_DATE
              , A.ORG_SLIP_NUM
              , A.ORG_SLIP_SEQ
              , A.SEQ                                         AS SEQ
              
              , CASE WHEN A.CUSTOM_CODE = '' THEN A.PEND_DATA_CODE
                ELSE A.CUSTOM_CODE END                        AS CUSTOM_CODE
              , CASE WHEN A.CUSTOM_NAME = '' THEN A.PAY_CUSTOM_NAME
                ELSE A.CUSTOM_NAME END                        AS CUSTOM_NAME
--              , A.PEND_DATA_CODE                              AS CUSTOM_CODE
--              , A.PAY_CUSTOM_NAME                             AS CUSTOM_NAME

              , CASE WHEN ISNULL(A.BANK_CODE, '') = '' THEN ISNULL(Y.BANK_CODE, '')
                ELSE ISNULL(A.BANK_CODE, '') END              AS BCM_BANK_CODE
              , CASE WHEN ISNULL(A.ACCOUNT_NUM, '') = '' THEN uniLITE.fnCipherDecrypt(Y.BANKBOOK_NUM, 'B')
                ELSE ISNULL(A.ACCOUNT_NUM, '') END            AS BCM_BANKBOOK_NUM
              , ISNULL(Y.BANKBOOK_NAME, '')                   AS BCM_BANKBOOK_NAME
              , CASE WHEN ISNULL(A.PRE_DATE, '') = '' THEN ISNULL(C.PRE_DATE, '')
                ELSE ISNULL(A.PRE_DATE, '') END               AS PRE_DATE
              , A.DEPT_CODE
              , A.DEPT_NAME
              , A.ORG_AMT_I                                   AS ORG_AMT_I        -- 발생금액
              , ISNULL(A.IN_TAX_I, 0)                         AS IN_TAX_I
              , ISNULL(A.LOCAL_TAX_I, 0)                      AS LOCAL_TAX_I
              , A.ORG_AMT_I - A.BLN_I                         AS J_AMT_I          -- 총 반제한 금액
              , A.BLN_I                                       AS BLN_I            -- 잔액
              , ISNULL(A.REMARK, '')                          AS REMARK
              , A.DIV_CODE
              
              , ISNULL(T.BANK_CODE, '')                       AS CUST_BANK_CODE
              , ISNULL(T.BANKBOOK_NUM, '')                    AS CUST_BANKBOOK_NUM
              , ISNULL(T.BANKBOOK_NAME, '')                   AS CUST_BANKBOOK_NAME
           FROM ABH220TV2 A              
                LEFT JOIN (SELECT ACCNT
                                , AC_DATE
                                , SLIP_NUM
                                , SLIP_SEQ
                                , CASE WHEN AC_CODE1 ='L3' THEN AC_DATA1
                                        WHEN AC_CODE2 ='L3' THEN AC_DATA2
                                        WHEN AC_CODE3 ='L3' THEN AC_DATA3
                                        WHEN AC_CODE4 ='L3' THEN AC_DATA4
                                        WHEN AC_CODE5 ='L3' THEN AC_DATA5
                                        WHEN AC_CODE6 ='L3' THEN AC_DATA6
                                        ELSE                     ''
                                    END PRE_DATE
                                , ISNULL(REMARK,'') AS REMARK
                                , INPUT_DIVI
                                , COMP_CODE
                             FROM AGJ210T WITH (NOLOCK)
                            WHERE COMP_CODE             = #{S_COMP_CODE}
                              AND AC_DATE              &gt;= #{ORG_AC_DATE_FR}
                              AND AC_DATE              &lt;= #{ORG_AC_DATE_TO}  
                              AND (AC_CODE1 = 'L3' OR AC_CODE2 = 'L3' OR AC_CODE3 = 'L3' OR AC_CODE4 = 'L3' OR AC_CODE5 = 'L3' OR AC_CODE6 = 'L3')     
                              AND ISNULL(MOD_DIVI, '')  = ''
                            )        C                ON C.COMP_CODE       = A.COMP_CODE
                                                     AND C.ACCNT           = A.ACCNT
                                                     AND C.AC_DATE         = A.ORG_AC_DATE
                                                     AND C.SLIP_NUM        = A.ORG_SLIP_NUM
                                                     AND C.SLIP_SEQ        = A.ORG_SLIP_SEQ
                                                     
                LEFT JOIN (SELECT D.ACCNT
                                   , D.AC_DATE
                                   , D.SLIP_NUM
                                   , D.SLIP_SEQ
                                   , K.BANK_CODE
                                   , K.BANKBOOK_NUM
                                   , K.BANKBOOK_NAME
                                   , ISNULL(D.REMARK,'') AS REMARK
                                   , D.INPUT_DIVI
                                   , D.COMP_CODE
                                FROM AGJ210T D WITH (NOLOCK)
                                     LEFT JOIN BCM130T K  ON K.COMP_CODE = D.COMP_CODE
                                                         AND K.CUSTOM_CODE = D.CUSTOM_CODE
                                                         AND K.BOOK_CODE = (CASE WHEN AC_CODE1 ='O2' THEN AC_DATA1
                                                                                 WHEN AC_CODE2 ='O2' THEN AC_DATA2
                                                                                 WHEN AC_CODE3 ='O2' THEN AC_DATA3
                                                                                 WHEN AC_CODE4 ='O2' THEN AC_DATA4
                                                                                 WHEN AC_CODE5 ='O2' THEN AC_DATA5
                                                                                 WHEN AC_CODE6 ='O2' THEN AC_DATA6
                                                                                 ELSE                     ''
                                                                             END
                                                                           )
                            WHERE D.COMP_CODE            = #{S_COMP_CODE}      
                              AND D.AC_DATE             &gt;= #{ORG_AC_DATE_FR}
                              AND D.AC_DATE             &lt;= #{ORG_AC_DATE_TO}
                              AND (D.AC_CODE1 = 'O2' OR D.AC_CODE2 = 'O2' OR D.AC_CODE3 = 'O2' OR D.AC_CODE4 = 'O2' OR D.AC_CODE5 = 'O2' OR D.AC_CODE6 = 'O2')     
                              AND ISNULL(D.MOD_DIVI, '')  = ''
                            )        T                ON T.COMP_CODE       = A.COMP_CODE
                                                     AND T.ACCNT           = A.ACCNT
                                                     AND T.AC_DATE         = A.ORG_AC_DATE
                                                     AND T.SLIP_NUM        = A.ORG_SLIP_NUM
                                                     AND T.SLIP_SEQ        = A.ORG_SLIP_SEQ
                LEFT JOIN (SELECT * 
                             FROM (SELECT AA.COMP_CODE
                                        , AA.CUSTOM_CODE
                                        , AA.BOOK_CODE
                                        , AA.BOOK_NAME
                                        , AA.BANK_CODE
                                        , AA.BANKBOOK_NUM
                                        , AA.BANKBOOK_NAME
                                        , BB.CUSTOM_NAME AS BANK_NAME
                                        , AA.MAIN_BOOK_YN
                                        , RANK() OVER( PARTITION BY AA.COMP_CODE, AA.CUSTOM_CODE 
                                                       ORDER BY  AA.MAIN_BOOK_YN DESC, AA.BOOK_CODE ASC
                                                      ) AS RK 
                                     FROM           BCM130T AA WITH (NOLOCK) 
                                          LEFT JOIN BCM100T BB WITH (NOLOCK) ON BB.COMP_CODE   = AA.COMP_CODE
                                                                            AND BB.CUSTOM_CODE = AA.BANK_CODE
                                                                            AND BB.CUSTOM_TYPE = '4'
                                    WHERE AA.COMP_CODE = #{S_COMP_CODE})  DD
                            WHERE RK = 1) Y  ON Y.COMP_CODE   = A.COMP_CODE
                                            AND Y.CUSTOM_CODE = A.PEND_DATA_CODE
                                            AND Y.RK          = 1
          WHERE A.COMP_CODE    = #{S_COMP_CODE}
            AND A.ORG_AC_DATE &gt;= #{ORG_AC_DATE_FR}
            AND A.ORG_AC_DATE &lt;= #{ORG_AC_DATE_TO}
            AND LEN(A.AC_DATE) = 6
            AND NOT EXISTS ( SELECT * FROM ABH222T Z WHERE Z.COMP_CODE = A.COMP_CODE AND Z.ACCNT = A.ACCNT AND Z.ORG_AC_DATE = A.ORG_AC_DATE AND Z.ORG_SLIP_NUM = A.ORG_SLIP_NUM AND Z.ORG_SLIP_SEQ = Z.ORG_SLIP_SEQ )

         UNION ALL
 
         SELECT CASE WHEN ISNULL(E.ACCNT, '') = '' THEN '1'
                ELSE '0' END                                  AS CHK
              , A.COMP_CODE
              , A.ACCNT
              , D.ACCNT_NAME
              , A.ORG_AC_DATE                                 AS ORG_AC_DATE
              , A.ORG_SLIP_NUM                                AS ORG_SLIP_NUM
              , A.ORG_SLIP_SEQ                                AS ORG_SLIP_SEQ
              , A.SEQ                                         AS SEQ
              , A.CUSTOM_CODE                                 AS CUSTOM_CODE
              , A.CUSTOM_NAME                                 AS CUSTOM_NAME
 
              , ISNULL(A.BANK_CODE, '')                       AS BCM_BANK_CODE
              , ISNULL(A.ACCOUNT_NUM, '')                     AS BCM_BANKBOOK_NUM
              , ISNULL(A.BANKBOOK_NAME, '')                   AS BCM_BANKBOOK_NAME
              , ISNULL(A.PRE_DATE, '')                        AS PRE_DATE
              , A.DEPT_CODE
              , A.DEPT_NAME
              , ISNULL(A.J_AMT_I, 0)                          AS ORG_AMT_I        -- 발생금액
              , ISNULL(A.INC_AMT_I, 0)                        AS IN_TAX_I
              , ISNULL(A.LOC_AMT_I, 0)                        AS LOCAL_TAX_I
              , ISNULL(A.J_AMT_I, 0) - ISNULL(A.INC_AMT_I, 0) -ISNULL(A.LOC_AMT_I, 0)  AS J_AMT_I          -- 총 반제한 금액
              , 0                                             AS BLN_I            -- 잔액
              , ISNULL(A.REMARK, '')                          AS REMARK
              
              , ''      AS DIV_CODE
              
              , ''                                            AS CUST_BANK_CODE
              , ''                                            AS CUST_BANKBOOK_NUM
              , ''                                            AS CUST_BANKBOOK_NAME
           FROM           ABH222T A WITH (NOLOCK)
                LEFT JOIN ABA400T D WITH (NOLOCK)   ON D.COMP_CODE    = A.COMP_CODE
                                                   AND D.ACCNT        = A.ACCNT
                LEFT JOIN ABH220T E WITH (NOLOCK)   ON E.COMP_CODE    = A.COMP_CODE
                                                   AND E.ACCNT        = A.ACCNT
                                                   AND E.ORG_AC_DATE  = A.ORG_AC_DATE
                                                   AND E.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                                                   AND E.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
          WHERE A.COMP_CODE   = #{S_COMP_CODE}
            AND A.ORG_AC_DATE BETWEEN #{ORG_AC_DATE_FR} AND #{ORG_AC_DATE_TO}
        ) T1
        LEFT  JOIN BCM100T   BCM WITH(NOLOCK)   ON BCM.COMP_CODE   = T1.COMP_CODE
                                               AND BCM.CUSTOM_CODE = T1.BCM_BANK_CODE
                                               AND BCM.CUSTOM_TYPE = '4'    
        LEFT  JOIN ABH220T   T4  WITH (NOLOCK) ON T4.COMP_CODE    = T1.COMP_CODE
                                              AND T4.ACCNT        = T1.ACCNT
                                              AND T4.ORG_AC_DATE  = T1.ORG_AC_DATE
                                              AND T4.ORG_SLIP_NUM = T1.ORG_SLIP_NUM
                                              AND T4.ORG_SLIP_SEQ = T1.ORG_SLIP_SEQ 
        LEFT  JOIN BCM100T   T11 WITH(NOLOCK)   ON T11.COMP_CODE   = T1.COMP_CODE
                                               AND T11.CUSTOM_CODE = T1.CUST_BANK_CODE
                                               AND T11.CUSTOM_TYPE = '4'               
        
  WHERE T1.COMP_CODE    = #{S_COMP_CODE}
    AND T1.DEPT_CODE    = #{DEPT_CODE}

<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">                    
    AND T1.DIV_CODE IN
    <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
        #{item}
    </foreach>                                  
</if>
<if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">  
    AND T1.ACCNT = #{ACCNT_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(PAY_CUSTOM_CODE)"> 
    AND T1.CUSTOM_CODE    = #{PAY_CUSTOM_CODE}
</if>
    
<if test="@foren.Ognl@isNotEmpty(PRE_DATE_FR)"> 
    AND   T1.PRE_DATE      &gt;= #{PRE_DATE_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(PRE_DATE_TO)">
    AND   T1.PRE_DATE      &lt;= #{PRE_DATE_TO}
</if>

<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM_FR)">
    AND   T1.ORG_SLIP_NUM  &gt;=   #{ORG_SLIP_NUM_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM_TO)">
    AND   T1.ORG_SLIP_NUM  &lt;=   #{ORG_SLIP_NUM_TO}
</if>

<if test="CONFIRM_CHK == &quot;0&quot;">
    AND   ISNULL(T1.CHK,'1')  = '0'
</if>
<if test="CONFIRM_CHK == &quot;1&quot;">
    AND   ISNULL(T1.CHK,'1')  = '1'
</if>
</select>

<insert id="abh222ukrServiceImpl.insertDetail" parameterType="Map">       
INSERT INTO ABH222T  
(                    
    COMP_CODE
   ,ACCNT
   ,ORG_AC_DATE
   ,ORG_SLIP_NUM
   ,ORG_SLIP_SEQ
   ,SEQ
   ,CUSTOM_CODE
   ,CUSTOM_NAME
   ,BANK_CODE
   ,ACCOUNT_NUM
   ,BANKBOOK_NAME
   ,PRE_DATE
   ,OUT_SAVE_CODE
   ,OUT_BANK_CODE
   ,DEPT_CODE
   ,DEPT_NAME
   ,ORG_AMT_I           
   ,INC_AMT_I
   ,LOC_AMT_I
   ,J_AMT_I
   ,BLN_I
   ,REMARK
   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
)          
VALUES (             
    #{S_COMP_CODE}
   ,#{ACCNT}
   ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
   ,#{ORG_SLIP_NUM}
   ,#{ORG_SLIP_SEQ}
   ,#{SEQ}
   ,#{PAY_CUSTOM_CODE}
   ,#{PAY_CUSTOM_NAME}
   ,#{BANK_CODE}
   ,#{BANK_ACCOUNT}
   ,#{BANKBOOK_NAME}
   ,#{PRE_DATE}
   ,#{OUT_SAVE_CODE}
   ,#{OUT_BANK_CODE}
   ,#{DEPT_CODE}
   ,#{DEPT_NAME}
   ,#{ORG_AMT_I}
   ,#{IN_TAX_I}
   ,#{LOCAL_TAX_I}
   ,#{J_AMT_I}
   ,#{ORG_AMT_I}
   ,#{REMARK}
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()      
)         
</insert>
   
<update id="abh222ukrServiceImpl.updateDetail" parameterType="Map"> 
    UPDATE ABH222T
        SET   
            BANK_CODE       = #{BANK_CODE}
           ,PRE_DATE        = #{PRE_DATE}
           ,ACCOUNT_NUM     = #{BANK_ACCOUNT}
           ,BANKBOOK_NAME   = #{BANKBOOK_NAME}
           ,REMARK          = #{REMARK}
           ,UPDATE_DB_USER  = #{S_USER_ID}  
           ,UPDATE_DB_TIME  = GETDATE()     
        
        WHERE COMP_CODE         = #{S_COMP_CODE}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}
</update>

                
<select id="abh222ukrServiceImpl.selectSubList" parameterType="Map" resultType="rMap">
    SELECT 
         A.CUSTOM_CODE
        , A.BOOK_CODE
        , A.BOOK_NAME
        ,A.BANK_CODE
        ,B.CUSTOM_NAME              AS BANK_NAME
        ,A.BANKBOOK_NUM             AS BANK_ACCOUNT
        ,A.BANKBOOK_NAME                            
        , A.MAIN_BOOK_YN
    FROM        BCM130T A WITH(NOLOCK) 
    LEFT JOIN   BCM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                      AND B.CUSTOM_CODE = A.BANK_CODE
                                      AND B.CUSTOM_TYPE = '4'
    WHERE A.COMP_CODE = #{S_COMP_CODE}
      AND A.CUSTOM_CODE = #{PAY_CUSTOM_CODE}
    
    ORDER BY B.CUSTOM_NAME

</select>

<insert id="abh222ukrServiceImpl.insertSubDetail" parameterType="Map">      
    INSERT INTO BCM130T(
           COMP_CODE
         , CUSTOM_CODE
         , BOOK_CODE
         , BOOK_NAME
         , BANK_CODE
         , BANKBOOK_NUM
         , BANKBOOK_NAME
         , MAIN_BOOK_YN
         , INSERT_DB_USER
         , INSERT_DB_TIME
         , UPDATE_DB_USER
         , UPDATE_DB_TIME
    )
    VALUES
    (
           #{S_COMP_CODE}
         , #{CUSTOM_CODE} 
         , #{BOOK_CODE}
         , #{BOOK_NAME}
         , #{BANK_CODE}
         , #{BANK_ACCOUNT}
         , #{BANKBOOK_NAME}
         , #{MAIN_BOOK_YN}
         , #{S_USER_ID}
         , GETDATE()
         , #{S_USER_ID}
         , GETDATE()
     )
</insert>
    
<update id="abh222ukrServiceImpl.updateSubDetail" parameterType="Map">  
    UPDATE BCM130T
        SET BANK_CODE    = #{BANK_CODE}    
          , BANKBOOK_NUM = #{BANK_ACCOUNT} 
          , BANKBOOK_NAME= #{BANKBOOK_NAME}
          , BOOK_NAME    = #{BOOK_NAME} 
          , MAIN_BOOK_YN = #{MAIN_BOOK_YN}
     WHERE COMP_CODE    = #{S_COMP_CODE}
       AND CUSTOM_CODE  = #{CUSTOM_CODE}
       AND BOOK_CODE   = #{BOOK_CODE}
</update>

<update id="abh222ukrServiceImpl.deleteSubDetail" parameterType="Map">
    DELETE FROM BCM130T
    WHERE COMP_CODE     = #{S_COMP_CODE}
      AND CUSTOM_CODE   = #{CUSTOM_CODE}
      AND BOOK_CODE    = #{BOOK_CODE}
</update>



<select id="abh222ukrServiceImpl.checkInUp" parameterType="Map" resultType="rMap">
	SELECT	COUNT(*)	AS CNT
	FROM   ABH222T T1
	WHERE  T1.COMP_CODE = #{S_COMP_CODE}
	AND   T1.ACCNT = #{ACCNT}
	AND   T1.ORG_AC_DATE = SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
	AND   T1.ORG_SLIP_NUM = #{ORG_SLIP_NUM}
	AND   T1.ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
</select>


<insert id="abh222ukrServiceImpl.insertLogDetailCms" parameterType="Map">     
    INSERT INTO L_ABH220T
    (
        KEY_VALUE
       ,SEQ      
       ,COMP_CODE         
       ,ACCNT  
       ,ORG_AC_DATE  
       ,ORG_SLIP_NUM  
       ,ORG_SLIP_SEQ  
    <if test="@foren.Ognl@isNotEmpty(RCPT_STATE_NUM)">  
       ,RCPT_STATE_NUM
    </if>
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
    )
    VALUES
    (
        #{KEY_VALUE}
       ,#{SEQ}         
       ,#{S_COMP_CODE}
       ,#{ACCNT}       
       ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
    <if test="@foren.Ognl@isNotEmpty(RCPT_STATE_NUM)">  
       ,#{RCPT_STATE_NUM}
    </if>
       ,#{S_USER_ID}
       ,GETDATE()
    )

</insert>     
        
    
<update id="spUspAccntAbh222ukrFnBanknameQuery" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH222UKR_fnBankNameQuery (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{RTN_VALUE,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  

 <!-- Header List -->
    <select id="abh222ukrServiceImpl.getTempHeader" parameterType="Map" resultType="rMap">
    /* abh222ukrServiceImpl.getTempHeader */
    SELECT  *
      FROM  L_ERP_HEADER WITH (NOLOCK)
     WHERE  KEY_VALUE = #{KEY_VALUE}
    </select>

    <select id="abh222ukrServiceImpl.getTempBody" parameterType="Map" resultType="rMap">
    /* abh222ukrServiceImpl.getTempBody */ 
        SELECT * 
          FROM L_ERP_BODY WITH(NOLOCK)
         WHERE KEY_VALUE = #{KEY_VALUE} 
    </select>

    <insert id="abh222ukrServiceImpl.insTempToHeader" parameterType="Map">
    /* abh222ukrServiceImpl.insTempToHeader */ 
    INSERT INTO BRANCH.ERP_HEADER (
         JUMIN_BIZ_NO
        ,USE_BASE
        ,TR_CODE
        ,TR_KEY
        ,REQUEST_DATE
        ,BUKRS
        ,REQUEST_TIME
        ,EXEC_DATE
        ,STATUS
        ,STATUS_DESC
        ,OUT_BANKCODE
        ,OUT_CURRCODE
        ,OUT_ACCTNO
        ,TOTAL_CNT
        ,TOTAL_AMT
        ,SUCCESS_CNT
        ,SUCCESS_AMT
        ,ERROR_CNT
        ,ERROR_AMT
        ,ERPIF_START_DATE
        ,ERPIF_START_TIME
        ,ERPIF_END_DATE
        ,ERPIF_END_TIME
        ,ERPIF_RES_CODE
        ,ERPIF_RES_DESC
        ,CREATOR
        ,CREATOR_NM
        ,OPERATOR
        ,OPERATOR_NM
        ,APPROVAL_YN
        ,FIELD_01
        ,FIELD_02
        ,FIELD_03
        ,FIELD_04
        ,FIELD_05
        ,FIELD_06
        ,FIELD_07
        ,FIELD_08
        ,FIELD_09
        ,FIELD_10
        ,SEND_NUM
        ,COMP_CODE
        ,JOB_YN
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,OUT_BANKCODE
            ,OUT_CURRCODE
            ,OUT_ACCTNO
            ,TOTAL_CNT
            ,TOTAL_AMT
            ,SUCCESS_CNT
            ,SUCCESS_AMT
            ,ERROR_CNT
            ,ERROR_AMT
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,APPROVAL_YN
            ,FIELD_01
            ,FIELD_02
            ,FIELD_03
            ,FIELD_04
            ,FIELD_05
            ,FIELD_06
            ,FIELD_07
            ,FIELD_08
            ,FIELD_09
            ,FIELD_10
            ,SEND_NUM
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_HEADER WITH (NOLOCK)
         WHERE KEY_VALUE    = #{KEY_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert>

    <update id="abh222ukrServiceImpl.updtTempToBody" parameterType="Map">  
    /* abh222ukrServiceImpl.updtTempToBody */
    UPDATE L_ERP_BODY SET
        FIELD_002      = #{FIELD_002}
    WHERE JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
      AND USE_BASE     = #{USE_BASE}
      AND TR_CODE      = #{TR_CODE}
      AND TR_KEY       = #{TR_KEY}
      AND SEQ          = #{SEQ}
      AND REQUEST_DATE = #{REQUEST_DATE}
    </update>
            
    <insert id="abh222ukrServiceImpl.insTempToBody" parameterType="Map">   
    /* abh222ukrServiceImpl.insTempToBody */   
    INSERT INTO BRANCH.ERP_BODY (
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN     
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_BODY WITH (NOLOCK)
         WHERE KEY_VALUE    = #{RTN_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND SEQ          = #{SEQ}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert> 




<update id="spUspAccntAbh222ukrFnBankNameresult" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update> 
        
<update id="spUspAccntAbh222ukrFnBankNameresult2" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult2 (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>         
</mapper>