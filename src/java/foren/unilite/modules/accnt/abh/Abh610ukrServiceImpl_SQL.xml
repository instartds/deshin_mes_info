<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="abh610ukrServiceImpl">

	<select id="abh610ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
            /* --abh610ukr.Cabh610ukr[fnAbh610Qstd] QUERY01 */
		/********************************************************************************************************************************
		 법인카드승인내역 대사
		********************************************************************************************************************************/
		BEGIN
		    DECLARE         @COMP_CODE          NVARCHAR(10)                -- (필수) 법인코드
		                  , @FR_DATE            NVARCHAR(08)                -- (필수) 일자(FR)
		                  , @TO_DATE            NVARCHAR(08)                -- (필수) 일자(TO)
		                  , @DATE_OPT           NVARCHAR(01)                -- (필수) 일자구분      (1:전표일, 2:승인일)
		                  , @CRDT_NUM           NVARCHAR(20)                -- (선택) 신용카드코드
		                  , @CRDT_NAME          NVARCHAR(20)                -- (선택) 신용카드명
		                  , @COMPARE_YN         NVARCHAR(03)                -- (선택) 대사결과      ('':전체, Y:일치, N:불일치)
		                  , @USER_ID            NVARCHAR(10)                -- (필수) 사용자ID
		                  , @PAY_REFT_YN        NVARCHAR(03)                -- (선택) 지출참조      ('':전체, Y:예,   N:아니오)
		
		    SET NOCOUNT    ON
		    SET ARITHABORT ON
		
		--  1. 변수 값 할당 -----------------------------------------------------------------------------------------------------------
		    SET @COMP_CODE          = #{S_COMP_CODE}
		    SET @FR_DATE            = #{FR_DATE}
		    SET @TO_DATE            = #{TO_DATE}
		    SET @DATE_OPT           = #{RADIO1}
		    SET @CRDT_NUM           = N''
		    SET @CRDT_NAME          = N''
		    SET @COMPARE_YN         = #{RADIO2}
		    SET @USER_ID            = #{S_USER_ID}
		    SET @PAY_REFT_YN        = #{RADIO3}
		
		--  2. 명칭 조회 유형 설정 ----------------------------------------------------------------------------------------------------
		    DECLARE @RefItem                NVARCHAR(01)
		
		    SELECT TOP 1 @RefItem = REF_ITEM
		    FROM   BSA300T WITH (NOLOCK)
		    WHERE  USER_ID = @USER_ID
		
		    SET @RefItem = ISNULL(@RefItem, '0')
		
		--  3. 날짜 포맷 유형 설정 ----------------------------------------------------------------------------------------------------
		    DECLARE @DateFormat             NVARCHAR(01)
		
		    SELECT TOP 1 @DateFormat = SUBSTRING(CODE_NAME, 5, 1)
		    FROM   BSA100T WITH (NOLOCK)
		    WHERE  COMP_CODE = @COMP_CODE
		    AND    MAIN_CODE = 'B044'
		    AND    REF_CODE1 = 'Y'
		
		    SET @DateFormat = ISNULL(@DateFormat, '.')
		
		--  4. 임시테이블 생성 --------------------------------------------------------------------------------------------------------
		
		--  4-1. 가상 테이블 생성(ABH600T(승인내역)정보)
		    CREATE TABLE #CRD1304262013
		    (      DOC_ID               NUMERIC(20, 0)  IDENTITY(1,1)   NOT NULL        -- DOC ID
		--
		         , COMP_CODE            NVARCHAR(10)    NOT NULL DEFAULT 'MASTER'       -- 법인코드
		         , CARD_COMP_CODE       NVARCHAR(08)    NOT NULL                        -- 카드사코드
		         , CARD_NO              NVARCHAR(20)    NOT NULL                        -- 신용카드번호
		         , APPR_DATE            NVARCHAR(10)    NOT NULL                        -- 승인일자
		         , SEQ                  NUMERIC(5,0)    NOT NULL                        -- 순번
		         , GROUP_SEQ            INT             NOT NULL DEFAULT 0              -- 그룹순번 (JOIN 조건의 그룹별 순번)
		--
		         , APPR_NO              NVARCHAR(20)    NOT NULL                        -- 승인번호
		         , CHAIN_NAME           NVARCHAR(50)    NOT NULL                        -- 가맹점명
		         , CHAIN_ID             NVARCHAR(13)        NULL                        -- 가맹점사업자번호
		         , APPR_AMT_I           NUMERIC(30, 6)  NOT NULL DEFAULT 0              -- 승인금액
		         , APPR_TAX_I           NUMERIC(30, 6)  NOT NULL DEFAULT 0              -- 부가세
		         , REMARK2              NVARCHAR(100)       NULL                        -- 메모작성
		         , PAY_REFT_NO          NVARCHAR(50)        NULL                        -- 지출결의참조정보
		         , REFER_PATH           NVARCHAR(50)        NULL                        -- 반영경로
		    )
		    CREATE INDEX CRD1304262013_IDX01 ON #CRD1304262013(COMP_CODE, CARD_COMP_CODE, CARD_NO, APPR_DATE, GROUP_SEQ)
		
		--  4-2. ERP정보
		    CREATE TABLE #ERP1304262013
		    (      DOC_ID               NUMERIC(20, 0)  IDENTITY(1,1)   NOT NULL        -- DOC ID
		--
		         , COMP_CODE            NVARCHAR(10)    NOT NULL DEFAULT 'MASTER'       -- 법인코드
		         , CRDT_COMP_CD         NVARCHAR(08)    NOT NULL                        -- 카드사코드
		         , CRDT_FULL_NUM        NVARCHAR(20)    NOT NULL                        -- 신용카드번호
		         , APPR_DATE            NVARCHAR(10)    NOT NULL                        -- 전표일자/발생일자(G1)
		         , SEQ                  NUMERIC(5,0)    NOT NULL DEFAULT 0              -- 순번
		         , GROUP_SEQ            INT             NOT NULL DEFAULT 0              -- 그룹순번 (JOIN 조건의 그룹별 순번)
		--
		         , AC_DATE              NVARCHAR(10)    NOT NULL                        -- 전표일자
		         , SLIP_NUM             NUMERIC(07, 0)  NOT NULL DEFAULT 0              -- 전표번호
		         , SLIP_SEQ             NUMERIC(05, 0)  NOT NULL DEFAULT 0              -- 전표순번
		         , OC_DATE              NVARCHAR(10)        NULL                        -- 발생일자(G1)
		         , AMT_I                NUMERIC(30, 6)  NOT NULL DEFAULT 0              -- 금액
		         , REMARK               NVARCHAR(3000)      NULL                        -- 적요
		         , REFER_PATH           NVARCHAR(50)        NULL                        -- 반영경로
		    )
		    CREATE INDEX ERP1304262013_IDX01 ON #ERP1304262013(COMP_CODE, CRDT_COMP_CD, CRDT_FULL_NUM, APPR_DATE, GROUP_SEQ)
		
		--  4-3. 합계표대사정보
		    CREATE TABLE #TOT1304262013
		    (      DOC_ID               NUMERIC(20, 0)  IDENTITY(1,1)   NOT NULL        -- DOC ID
		--  기본정보
		         , COMP_CODE            NVARCHAR(10)    NOT NULL DEFAULT 'MASTER'       -- 법인코드
		         , APPR_DATE            NVARCHAR(10)    NOT NULL                        -- 승인일
		         , CARD_COMP_CODE       NVARCHAR(08)    NOT NULL                        -- 카드사코드
		         , CARD_NO              NVARCHAR(20)    NOT NULL                        -- 신용카드번호
		         , SEQ                  NUMERIC(5,0)    NOT NULL DEFAULT 0              -- 순번
		         , GROUP_SEQ            INT             NOT NULL DEFAULT 0              -- 그룹순번 (JOIN 조건의 그룹별 순번)
		--  승인내역
		         , CHAIN_NAME           NVARCHAR(50)        NULL                        -- 가맹점명
		         , CHAIN_ID             NVARCHAR(13)        NULL                        -- 가맹점사업자번호
		         , APPR_AMT_I           NUMERIC(30, 6)      NULL DEFAULT 0              -- 승인금액
		         , APPR_NO              NVARCHAR(100)       NULL                        -- 승인번호
		--  대사정보
		         , ACCRUE_I             NUMERIC(30, 6)      NULL DEFAULT 0              -- 대사결과차액
		--  ERP정보
		         , AMT_I                NUMERIC(30, 6)      NULL                        -- 금액
		         , AC_DATE              NVARCHAR(10)        NULL                        -- 전표일자
		         , SLIP_NUM             NUMERIC(07, 0)      NULL                        -- 전표번호
		         , SLIP_SEQ             NUMERIC(05, 0)      NULL                        -- 전표순번
		         , OC_DATE              NVARCHAR(10)        NULL                        -- 발생일자(G1)
		         , REMARK               NVARCHAR(3000)      NULL                        -- 적요
		--  지출참조정보
		         , REMARK2              NVARCHAR(100)       NULL                        -- 메모작성
		         , PAY_REFT_NO          NVARCHAR(50)        NULL                        -- 지출결의참조정보
		         , REFER_PATH           NVARCHAR(50)        NULL                        -- 반영경로
		--  합계금액
		         , CRD_TOT_I            NUMERIC(30, 6)      NULL DEFAULT 0              -- 승인합계금액
		         , ERP_TOT_I            NUMERIC(30, 6)      NULL DEFAULT 0              -- ERP 미지급합계
		    ) 
		    CREATE INDEX TOT201204231851_IDX01 ON #TOT1304262013(COMP_CODE, APPR_DATE, CARD_COMP_CODE, CARD_NO, GROUP_SEQ)
		
		--  5. 임시데이터 생성 --------------------------------------------------------------------------------------------------------
		
		--  5-1. 카드승인내역
		    INSERT INTO #CRD1304262013
		    (      COMP_CODE            , CARD_COMP_CODE       , CARD_NO              , APPR_DATE           , SEQ               , GROUP_SEQ
		         , APPR_NO              , CHAIN_NAME           , CHAIN_ID             , APPR_AMT_I          , APPR_TAX_I        , REMARK2     , PAY_REFT_NO   , REFER_PATH
		    )
		    SELECT  
		            A.COMP_CODE                                                                                 AS COMP_CODE
		          , A.CARD_COMP_CODE                                                                            AS CARD_COMP_CODE
		          , A.CARD_NO                                                                                   AS CARD_NO
		          , A.APPR_DATE                                                                                 AS APPR_DATE
		          , A.SEQ                                                                                       AS SEQ
		          , ROW_NUMBER() OVER (PARTITION BY A.CARD_COMP_CODE, A.CARD_NO, A.APPR_DATE, A.APPR_AMT_I
		                               ORDER     BY A.APPR_DATE, A.CARD_NO, A.APPR_AMT_I)                       AS GROUP_SEQ
		          , A.APPR_NO                                                                                   AS APPR_NO
		          , A.CHAIN_NAME                                                                                AS CHAIN_NAME
		          , A.CHAIN_ID                                                                                  AS CHAIN_ID
		          , ISNULL(A.APPR_AMT_I, 0)                                                                     AS APPR_AMT_I
		          , ISNULL(A.APPR_TAX_I, 0)                                                                     AS APPR_TAX_I
		          , A.REMARK2                                                                                   AS REMARK2
		          , A.PAY_REFT_NO                                                                               AS PAY_REFT_NO
		          , A.REFER_PATH                                                                                AS REFER_PATH
		    FROM    (
		            SELECT  S1.COMP_CODE                                            AS COMP_CODE
		                  , S1.CARD_COMP_CODE                                       AS CARD_COMP_CODE
		                  , uniLITE.fnCipherDecrypt(S1.CARD_NO, 'C')                AS CARD_NO
		                  , S1.APPR_DATE                                            AS APPR_DATE
		                  , S1.APPR_NO                                              AS APPR_NO
		                  , S1.SEQ                                                  AS SEQ
		                  , S1.CHAIN_NAME                                           AS CHAIN_NAME
		                  , S1.CHAIN_ID                                             AS CHAIN_ID
		                  , ISNULL(S1.APPR_AMT_I, 0)                                AS APPR_AMT_I
		                  , ISNULL(S1.APPR_TAX_I, 0)                                AS APPR_TAX_I
		                  , S1.REMARK2                                              AS REMARK2
		                  , S1.PAY_REFT_NO                                          AS PAY_REFT_NO
		                  , CASE WHEN ISNULL(S1.TEMPC_01, '') != '' THEN 'BRANCH 연계' ELSE '' END AS REFER_PATH
		            FROM                ABH600T   S1 WITH (NOLOCK)
		                    INNER JOIN  ABA500T   S2 WITH (NOLOCK) ON S2.COMP_CODE  = S1.COMP_CODE
		                                                          AND REPLACE(uniLITE.fnCipherDecrypt(S2.CRDT_FULL_NUM, ''), '-', '') = REPLACE(uniLITE.fnCipherDecrypt(S1.CARD_NO, ''), '-', '')
		            WHERE   S1.COMP_CODE       =       @COMP_CODE
		            AND     S1.APPR_DATE      &gt;=       @FR_DATE
		            AND     S1.APPR_DATE      &lt;=       @TO_DATE
		            --
		            AND   ((S2.CRDT_NUM     LIKE       @CRDT_NUM    + '%'   AND @CRDT_NUM   != '')
		                OR (@CRDT_NUM          = ''))
		            AND   ((S2.CRDT_NAME    LIKE '%' + @CRDT_NAME   + '%'   AND @CRDT_NAME  != '')
		                OR (@CRDT_NAME         = ''))
		            ) A
		
		--  5-2. ERP정보
		    INSERT INTO #ERP1304262013
		    (      COMP_CODE            , CRDT_COMP_CD         , CRDT_FULL_NUM        , APPR_DATE            , GROUP_SEQ
		         , AC_DATE              , SLIP_NUM             , SLIP_SEQ             , OC_DATE              , AMT_I
		         , REMARK
		    )
		    SELECT  
		            A.COMP_CODE                                                                                 AS COMP_CODE
		          , A.CRDT_COMP_CD                                                                              AS CRDT_COMP_CD
		          , A.CRDT_FULL_NUM                                                                             AS CRDT_FULL_NUM
		          , A.APPR_DATE                                                                                 AS APPR_DATE
		          , ROW_NUMBER() OVER (PARTITION BY A.CRDT_COMP_CD, A.CRDT_FULL_NUM, A.APPR_DATE, A.AMT_I
		                               ORDER     BY A.INSERT_DB_TIME)                                           AS GROUP_SEQ
		          , A.AC_DATE                                                                                   AS AC_DATE
		          , A.SLIP_NUM                                                                                  AS SLIP_NUM
		          , A.SLIP_SEQ                                                                                  AS SLIP_SEQ
		          , A.OC_DATE                                                                                   AS OC_DATE
		          , A.AMT_I                                                                                     AS AMT_I
		          , A.REMARK                                                                                    AS REMARK
		    FROM    (
		            SELECT  S1.COMP_CODE                                            AS COMP_CODE
		                  , ISNULL(S2.CRDT_COMP_CD, M1.REF_CODE3)                   AS CRDT_COMP_CD
		                  , uniLITE.fnCipherDecrypt(S2.CRDT_FULL_NUM, 'C')          AS CRDT_FULL_NUM
		                  , CASE WHEN @DATE_OPT   = '1'  THEN S1.AC_DATE
		                         WHEN S1.AC_CODE1 = 'G1' THEN S1.AC_DATA1
		                         WHEN S1.AC_CODE2 = 'G1' THEN S1.AC_DATA2
		                         WHEN S1.AC_CODE3 = 'G1' THEN S1.AC_DATA3
		                         WHEN S1.AC_CODE4 = 'G1' THEN S1.AC_DATA4
		                         WHEN S1.AC_CODE5 = 'G1' THEN S1.AC_DATA5
		                         WHEN S1.AC_CODE6 = 'G1' THEN S1.AC_DATA6
		                    END                                                     AS APPR_DATE
		                  , S1.AC_DATE                                              AS AC_DATE
		                  , S1.SLIP_NUM
		                  , S1.SLIP_SEQ
		                  , CASE WHEN S1.AC_CODE1 = 'G1' THEN S1.AC_DATA1
		                         WHEN S1.AC_CODE2 = 'G1' THEN S1.AC_DATA2
		                         WHEN S1.AC_CODE3 = 'G1' THEN S1.AC_DATA3
		                         WHEN S1.AC_CODE4 = 'G1' THEN S1.AC_DATA4
		                         WHEN S1.AC_CODE5 = 'G1' THEN S1.AC_DATA5
		                         WHEN S1.AC_CODE6 = 'G1' THEN S1.AC_DATA6
		                    END                                                     AS OC_DATE
		                  , ISNULL(S1.AMT_I, 0)                                     AS AMT_I
		                  , S1.REMARK                                               AS REMARK
		                  , S1.INSERT_DB_TIME                                       AS INSERT_DB_TIME
		            FROM                AGJ210T   S1 WITH (NOLOCK)
		                    INNER JOIN  ABA500T   S2 WITH (NOLOCK) ON S2.COMP_CODE  = S1.COMP_CODE
		                                                          AND S2.CRDT_NUM   = CASE WHEN S1.AC_CODE1 = 'G5' THEN S1.AC_DATA1
		                                                                                   WHEN S1.AC_CODE2 = 'G5' THEN S1.AC_DATA2
		                                                                                   WHEN S1.AC_CODE3 = 'G5' THEN S1.AC_DATA3
		                                                                                   WHEN S1.AC_CODE4 = 'G5' THEN S1.AC_DATA4
		                                                                                   WHEN S1.AC_CODE5 = 'G5' THEN S1.AC_DATA5
		                                                                                   WHEN S1.AC_CODE6 = 'G5' THEN S1.AC_DATA6
		                                                                              END
		                    INNER JOIN  ABA400T   S3 WITH (NOLOCK) ON S3.COMP_cODE  = S1.COMP_CODE
		                                                          AND S3.ACCNT      = S1.ACCNT
		                                                          AND S3.ACCNT_SPEC = 'F'
		                    LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE  = S2.COMP_CODE
		                                                          AND M1.MAIN_CODE  = 'A028'
		                                                          AND M1.SUB_CODE   = S2.CRDT_KIND
		            WHERE   S1.COMP_CODE       =       @COMP_CODE
		            AND     ISNULL(S1.MOD_DIVI, '') = ''
		            --
		            AND   ((S2.CRDT_NUM     LIKE       @CRDT_NUM    + '%'   AND @CRDT_NUM   != '')
		                OR (@CRDT_NUM          = ''))
		            AND   ((S2.CRDT_NAME    LIKE '%' + @CRDT_NAME   + '%'   AND @CRDT_NAME  != '')
		                OR (@CRDT_NAME         = ''))
		            ) A
		    WHERE   A.APPR_DATE        &gt;=       @FR_DATE
		    AND     A.APPR_DATE        &lt;=       @TO_DATE
		
		--  6. 합계표대사 생성 --------------------------------------------------------------------------------------------------------
		
		--  6-1. 승인내역 기준 (ERP에 있거나 없는 데이터 생성)
		    INSERT  INTO #TOT1304262013
		    (       COMP_CODE               , APPR_DATE         , CARD_COMP_CODE       , CARD_NO              , SEQ         , GROUP_SEQ
		          , CHAIN_NAME              , CHAIN_ID          , APPR_AMT_I           , APPR_NO              , ACCRUE_I
		          , AMT_I                   , AC_DATE           , SLIP_NUM             , SLIP_SEQ             , OC_DATE
		          , REMARK                  , REMARK2           , PAY_REFT_NO          , REFER_PATH
		          , CRD_TOT_I               , ERP_TOT_I
		    )
		    SELECT  ISNULL(A.COMP_CODE      , B.COMP_CODE    )                           AS COMP_CODE
		          , ISNULL(A.APPR_DATE      , B.APPR_DATE    )                           AS APPR_DATE
		          , ISNULL(A.CARD_COMP_CODE , B.CRDT_COMP_CD )                           AS CARD_COMP_CODE
		          , ISNULL(A.CARD_NO        , B.CRDT_FULL_NUM)                           AS CARD_NO
		          , ISNULL(A.SEQ            , B.SEQ)                                     AS SEQ
		          , ISNULL(A.GROUP_SEQ      , B.GROUP_SEQ    )                           AS GROUP_SEQ
		--
		          , A.CHAIN_NAME                                                         AS CHAIN_NAME
		          , A.CHAIN_ID                                                           AS CHAIN_ID
		          , A.APPR_AMT_I                                                         AS APPR_AMT_I
		          , A.APPR_NO                                                            AS APPR_NO
		          , A.APPR_AMT_I - ISNULL(B.AMT_I, 0)                                    AS ACCRUE_I
		          , ISNULL(B.AMT_I       , 0            )                                AS AMT_I
		          , ISNULL(B.AC_DATE     , N''          )                                AS AC_DATE
		          , ISNULL(B.SLIP_NUM    , NULL         )                                AS SLIP_NUM
		          , ISNULL(B.SLIP_SEQ    , NULL         )                                AS SLIP_SEQ
		          , ISNULL(B.OC_DATE     , N''          )                                AS OC_DATE
		          , ISNULL(B.REMARK      , N''          )                                AS REMARK
		          , A.REMARK2                                                            AS REMARK2
		          , A.PAY_REFT_NO                                                        AS PAY_REFT_NO
		          , A.REFER_PATH                                                         AS REFER_PATH
		--
		          , 0.0                                                                  AS CRD_TOT_I
		          , 0.0                                                                  AS ERP_TOT_I
		    FROM               #CRD1304262013   A  WITH (NOLOCK)
		            LEFT  JOIN #ERP1304262013   B  WITH (NOLOCK) ON B.COMP_CODE         = A.COMP_CODE
		                                                        AND B.CRDT_COMP_CD      = A.CARD_COMP_CODE
		                                                        AND B.CRDT_FULL_NUM     = A.CARD_NO
		                                                        AND B.APPR_DATE         = A.APPR_DATE
		                                                        AND B.GROUP_SEQ         = A.GROUP_SEQ
		                                                        AND B.AMT_I             = A.APPR_AMT_I
		    WHERE   A.COMP_CODE          = @COMP_CODE
		    ORDER   BY
		            A.DOC_ID
		
		--  6-2. ERP 기준 (승인내역에 없는 데이터만 생성)
		    INSERT  INTO #TOT1304262013
		    (       COMP_CODE               , APPR_DATE         , CARD_COMP_CODE       , CARD_NO              , SEQ         , GROUP_SEQ
		          , CHAIN_NAME              , CHAIN_ID          , APPR_AMT_I           , APPR_NO              , ACCRUE_I
		          , AMT_I                   , AC_DATE           , SLIP_NUM             , SLIP_SEQ             , OC_DATE
		          , REMARK                  , REMARK2           , PAY_REFT_NO          , REFER_PATH
		          , CRD_TOT_I               , ERP_TOT_I
		    )
		    SELECT  A.COMP_CODE                                                          AS COMP_CODE
		          , A.APPR_DATE                                                          AS APPR_DATE
		          , A.CRDT_COMP_CD                                                       AS CARD_COMP_CODE
		          , A.CRDT_FULL_NUM                                                      AS CARD_NO
		          , A.SEQ                                                                AS SEQ
		          , A.GROUP_SEQ                                                          AS GROUP_SEQ
		--
		          , ISNULL(B.CHAIN_NAME   , N''         )                                AS CHAIN_NAME
		          , ISNULL(B.CHAIN_ID     , N''         )                                AS CHAIN_ID
		          , ISNULL(B.APPR_AMT_I   , 0           )                                AS APPR_AMT_I
		          , ISNULL(B.APPR_NO      , N''         )                                AS APPR_NO
		          , ISNULL(B.APPR_AMT_I, 0) - A.AMT_I                                    AS ACCRUE_I
		          , A.AMT_I                                                              AS AMT_I
		          , A.AC_DATE                                                            AS AC_DATE
		          , A.SLIP_NUM                                                           AS SLIP_NUM
		          , A.SLIP_SEQ                                                           AS SLIP_SEQ
		          , A.OC_DATE                                                            AS OC_DATE
		          , A.REMARK                                                             AS REMARK
		          , NULL                                                                 AS REMARK2
		          , NULL                                                                 AS PAY_REFT_NO
		          , NULL                                                                 AS REFER_PATH
		--
		          , 0.0                                                                  AS CRD_TOT_I
		          , 0.0                                                                  AS ERP_TOT_I
		    FROM               #ERP1304262013   A  WITH (NOLOCK)
		            LEFT  JOIN #CRD1304262013   B  WITH (NOLOCK) ON B.COMP_CODE         = A.COMP_CODE
		                                                        AND B.CARD_COMP_CODE    = A.CRDT_COMP_CD
		                                                        AND B.CARD_NO           = A.CRDT_FULL_NUM
		                                                        AND B.APPR_DATE         = A.APPR_DATE
		                                                        AND B.GROUP_SEQ         = A.GROUP_SEQ
		                                                        AND B.APPR_AMT_I        = A.AMT_I
		    WHERE   A.COMP_CODE          = @COMP_CODE
		    AND     B.COMP_CODE         IS NULL
		    ORDER   BY
		            A.DOC_ID
		
		--  7. 합계금액 계산 ----------------------------------------------------------------------------------------------------------
		    UPDATE  A
		    SET     A.CRD_TOT_I         = ISNULL(B.CRD_TOT_I, 0)
		          , A.ERP_TOT_I         = ISNULL(B.ERP_TOT_I, 0)
		    FROM                #TOT1304262013  A  WITH (NOLOCK)
		            LEFT  JOIN  (
		                        SELECT  A.COMP_CODE
		                              , SUM(ISNULL(A.APPR_AMT_I, 0))    AS CRD_TOT_I
		                              , SUM(ISNULL(A.AMT_I     , 0))    AS ERP_TOT_I
		                        FROM    #TOT1304262013  A  WITH (NOLOCK)
		                        WHERE   A.COMP_CODE      =  @COMP_CODE
		                        AND     A.APPR_DATE     &gt;=  @FR_DATE
		                        AND     A.APPR_DATE     &lt;=  @TO_DATE
		                        AND   ((A.ACCRUE_I       =  0       AND @COMPARE_YN    = 'Y')
		                           OR  (A.ACCRUE_I      !=  0       AND @COMPARE_YN    = 'N') OR (@COMPARE_YN    = ''))
		                       GROUP  BY
		                              A.COMP_CODE
		                      ) B                                ON B.COMP_CODE         = A.COMP_CODE
		    WHERE   A.COMP_CODE          = @COMP_CODE
		
		--  8. 합계표대사 조회 --------------------------------------------------------------------------------------------------------
		    SELECT  ROW_NUMBER() OVER (ORDER BY A.APPR_DATE, A.CARD_COMP_CODE, A.CARD_NO, A.APPR_NO)    AS ORDER_SEQ
		          , A.GROUP_SEQ
		          , A.COMP_CODE
		          , CASE WHEN ISNULL(A.APPR_DATE, '') = '' THEN ''
		                 ELSE SUBSTRING(A.APPR_DATE, 1, 4) + @DateFormat + 
		                      SUBSTRING(A.APPR_DATE, 5, 2) + @DateFormat + 
		                      SUBSTRING(A.APPR_DATE, 7, 2)
		            END                                                                      AS APPR_DATE
		          , A.CARD_COMP_CODE
		          , B.CUSTOM_NAME                                                            AS CARD_COMP_NAME
		          , A.CARD_NO
		          , A.SEQ
		          , A.CHAIN_NAME
		          , CASE WHEN ISNULL(A.CHAIN_ID, '') = '' THEN ''
		                 ELSE CASE WHEN LEN(A.CHAIN_ID) = '13' THEN SUBSTRING(A.CHAIN_ID, 1, 6) + '-'
		                                                          + SUBSTRING(A.CHAIN_ID, 7, 7)
		                           ELSE SUBSTRING(A.CHAIN_ID, 1, 3) + '-'
		                              + SUBSTRING(A.CHAIN_ID, 4, 2) + '-'
		                              + SUBSTRING(A.CHAIN_ID, 6, 5)
		                      END
		            END                                                                      AS CHAIN_ID
		          , A.APPR_AMT_I
		          , A.APPR_NO 
		          , A.ACCRUE_I
		          , A.AMT_I
		          , CASE WHEN ISNULL(A.AC_DATE, '') = '' THEN ''
		                 ELSE SUBSTRING(A.AC_DATE, 1, 4) + @DateFormat + 
		                      SUBSTRING(A.AC_DATE, 5, 2) + @DateFormat + 
		                      SUBSTRING(A.AC_DATE, 7, 2)
		            END                                                                      AS AC_DATE
		          , A.SLIP_NUM
		          , A.SLIP_SEQ
		          , CASE WHEN ISNULL(A.OC_DATE, '') = '' THEN ''
		                 ELSE SUBSTRING(A.OC_DATE, 1, 4) + @DateFormat + 
		                      SUBSTRING(A.OC_DATE, 5, 2) + @DateFormat + 
		                      SUBSTRING(A.OC_DATE, 7, 2)
		            END                                                                      AS OC_DATE
		          , A.REMARK
		          , A.REMARK2
		          , A.PAY_REFT_NO
		          , A.REFER_PATH
		          , A.CRD_TOT_I
		          , A.ERP_TOT_I
		    FROM                #TOT1304262013   A  WITH (NOLOCK)
		            LEFT  JOIN  BCM100T          B  WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
		                                                         AND B.CUSTOM_CODE  = A.CARD_COMP_CODE
		    WHERE   A.COMP_CODE          =       @COMP_CODE
		    AND     A.APPR_DATE         &gt;=       @FR_DATE
		    AND     A.APPR_DATE         &lt;=       @TO_DATE
		--
		    AND   ((A.ACCRUE_I           =       0                    AND @COMPARE_YN    = 'Y')
		       OR  (A.ACCRUE_I          !=       0                    AND @COMPARE_YN    = 'N') OR (@COMPARE_YN    = ''))
		--
		    AND   ((ISNULL(A.PAY_REFT_NO, '') != ''                   AND @PAY_REFT_YN   = 'Y')
		       OR  (ISNULL(A.PAY_REFT_NO, '')  = ''                   AND @PAY_REFT_YN   = 'N') OR (@PAY_REFT_YN   = ''))
		
		--  9. 임시테이블 삭제 --------------------------------------------------------------------------------------------------------
		    DROP TABLE #CRD1304262013
		    DROP TABLE #ERP1304262013
		    DROP TABLE #TOT1304262013
		
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>	
</mapper>