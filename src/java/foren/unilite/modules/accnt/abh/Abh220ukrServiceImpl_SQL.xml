<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="abh220ukrServiceImpl">
    <select id="abh220ukrServiceImpl.getCmsId" parameterType="Map" resultType="rMap">
        SELECT CMS_ID 
          FROM BOR100T WITH(NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE} 
    </select>
            
<select id="abh220ukrServiceImpl.getAccntCode" parameterType="Map" resultType="rMap">
    BEGIN
        SET ARITHABORT ON
        SET NOCOUNT ON   
        
        SELECT TOP 1 ISNULL(A.ACCNT       ,'')                           AS ACCNT_CODE
              , CASE WHEN A.SUBJECT_DIVI = '1' THEN A.ACCNT
                     WHEN A.SUBJECT_DIVI = '2' THEN A.ACCNT_CD
                END                                                 AS ACCNT_CD
              , ISNULL(B.ACCNT_NAME  ,'')                           AS ACCNT_CD_NAME
              , ISNULL(A.ACCNT_NAME  ,'')                           AS ACCNT_NAME
              , ISNULL(A.AC_FULL_NAME,'')                           AS AC_FULL_NAME
        FROM                ABA400T   A WITH (NOLOCK) 
                LEFT  JOIN  (
                            SELECT  COMP_CODE
                                  , ACCNT
                                  , ACCNT_NAME
                            FROM    ABA400T WITH (NOLOCK)
                            )         B               ON B.COMP_CODE    = A.COMP_CODE
                                                     AND B.ACCNT        = (CASE WHEN A.SUBJECT_DIVI = '1' THEN A.ACCNT
                                                                                WHEN A.SUBJECT_DIVI = '2' THEN A.ACCNT_CD
                                                                           END)
                                                                           
                                                                           
                  
        WHERE   A.COMP_CODE      = #{S_COMP_CODE}
          AND   A.ACCNT         != '99999'
         
         
         --   AND ISNULL(A.PROFIT_DIVI,'') IN ('X') 
            AND A.SPEC_DIVI = 'B1'

        SET ARITHABORT OFF
        SET NOCOUNT OFF
    END 

</select>            
            
<select id="abh220ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
	
<if test="CONFIRM_YN == &quot;Y&quot; || CONFIRM_YN == &quot;C&quot; ">
    SELECT 
         ROW_NUMBER() OVER (ORDER BY A.PRE_DATE)    AS ROW_NUMBER           --NO
        ,A.COMP_CODE                                                        --법인코드  
        ,A.CONFIRM_YN                                                       --상태
        ,ISNULL(A.DOC_STATUS,'10')                  AS PAYMENT_STATUS       --결재상태
        ,BSA1.REF_CODE1                             AS PAYMENT_STATUS_DETAIL--결재상태REF_CODE1
        ,A.OUT_SAVE_CODE                                                    --출금통장코드
        ,A.OUT_BANK_CODE                                                    --출금은행코드
        ,A.PRE_DATE                                                         --지급예정일
        ,A.PAY_CUSTOM_CODE                                                  --지급처
        ,BCM1.CUSTOM_NAME                           AS PAY_CUSTOM_NAME      --지급처명
        ,A.DIV_CODE                                                         --사업장
        ,A.PEND_CODE                                                        --미결항목코드
        ,A.SET_METH                                                         --지급방법
        ,A.TRANS_YN                                                         --전송대상
        ,A.REMARK                                                           --적요
        ,A.MONEY_UNIT                                                       --화폐단위
        ,A.ORG_AMT_I                                AS ORG_AMT_I            --발생금액
        ,A.J_AMT_I                                  AS J_AMT_I              --반제된금액
        ,A.JAN_AMT_I                                AS JAN_AMT_I            --지급대상금액
        ,A.INC_AMT_I                                AS IN_TAX_I             --소득세
        ,A.LOC_AMT_I                                AS LOCAL_TAX_I          --주민세
        ,A.REAL_AMT_I                               AS REAL_AMT_I           --실지급액
        ,A.SEND_J_AMT_I                             AS SEND_J_AMT_I         --지급확정금액
        ,A.SEND_J_AMT_I                             AS SEND_J_AMT_I_DUMMY   --지급확정금액 DUMMY
        ,uniLITE.fnGetUserDate(A.COMP_CODE,A.ORG_AC_DATE ) AS ORG_AC_DATE   --발생일
        ,A.ORG_SLIP_NUM                                                     --번호
        ,A.ORG_SLIP_SEQ                                                     --순번
        ,A.SEQ                                                              --SEQ
        ,A.CONF_SEND_NUM                                                    --CONF_SEND_NUM
        ,A.ACCNT                                                            --계정과목
        ,ABA1.ACCNT_NAME                            AS ACCNT_NAME           --계정과목명
        ,A.CRDT_NUM                                                         --카드번호
        ,A.CARD_TYPE                                                        --카드타입(개인,공용)
        ,A.IN_SAVE_CODE                                                     --입금통장코드
        ,AFS1.SAVE_NAME                             AS IN_SAVE_NAME         --입금통장명
        ,A.BANK_CODE                                                        --입금은행코드
        ,BCM2.CUSTOM_NAME                           AS BANK_NAME            --입금은행명
        ,A.ACCOUNT_NUM                              AS BANK_ACCOUNT         --입금계좌번호(DB)
        ,A.BANKBOOK_NAME                                                    --예금주
        ,A.RCPT_ID                                                          --예금주전송ID
        ,A.RCPT_NAME                                                        --예금주명결과
        ,A.CMS_TRANS_YN                                                     --예금주전송
        ,A.RCPT_RESULT_MSG                                                  --예금주조회결과
        ,A.RCPT_STATE_NUM                                                   --예금주전문번호
        ,ISNULL(A.MODY_YN,'Y')                      AS MODY_YN              --MODY_YN
    
        ,A.EX_DATE                                                  --결의전표일자
        ,A.EX_NUM                                                   --결의전표번호
        ,A.NOTE_NUM                                                 --지급어음번호
        ,A.PUB_DATE                                                 --발행일
        ,A.EXP_DATE                                                 --만기일
        
        ,A.DED_TYPE                                                 --사업기타소득구분
        
        ,A.IN_REMARK                                                --입금통장표시내용
		--여기 조회 추가
	    ,A.EVDE_TYPE
	    ,A.DEPT_CODE
	    ,A.DEPT_NAME
    
      FROM       ABH220T    A WITH(NOLOCK) 
      LEFT  JOIN BSA100T BSA1 WITH(NOLOCK) ON BSA1.COMP_CODE   = A.COMP_CODE
                                          AND BSA1.MAIN_CODE   = 'J682'
                                          AND BSA1.SUB_CODE    = ISNULL(A.DOC_STATUS,'10')  
      LEFT  JOIN BCM100T BCM1 WITH(NOLOCK) ON BCM1.COMP_CODE   = A.COMP_CODE
                                          AND BCM1.CUSTOM_CODE = A.PAY_CUSTOM_CODE   
      LEFT  JOIN ABA400T ABA1 WITH(NOLOCK) ON ABA1.COMP_CODE   = A.COMP_CODE
                                          AND ABA1.ACCNT       = A.ACCNT
      LEFT  JOIN AFS100T AFS1 WITH(NOLOCK) ON AFS1.COMP_CODE   = A.COMP_CODE
                                          AND AFS1.SAVE_CODE   = A.IN_SAVE_CODE   
      LEFT  JOIN BCM100T BCM2 WITH(NOLOCK) ON BCM2.COMP_CODE   = A.COMP_CODE
                                          AND BCM2.CUSTOM_CODE = A.BANK_CODE
                                          AND BCM2.CUSTOM_TYPE = '4'    
     WHERE  A.COMP_CODE = #{S_COMP_CODE}
     AND A.ORG_AC_DATE &gt;= #{ORG_AC_DATE_FR}
     AND A.ORG_AC_DATE &lt;= #{ORG_AC_DATE_TO}
     AND NOT EXISTS (SELECT AA.COMP_CODE
                            , B.ACCNT
                            , B.ORG_AC_DATE
                            , B.ORG_SLIP_NUM
                            , B.ORG_SLIP_SEQ
                            , B.SEQ
                         FROM ABH200T AA
                              INNER JOIN (SELECT B.COMP_CODE, B.SEND_NUM, B.ACCNT, B.ORG_AC_DATE, B.ORG_SLIP_NUM, B.ORG_SLIP_SEQ, B.SEQ
                                            FROM ABH210T B
                                           WHERE COMP_CODE = #{S_COMP_CODE}
                                           GROUP BY B.COMP_CODE, B.SEND_NUM, B.ACCNT, B.ORG_AC_DATE, B.ORG_SLIP_NUM, B.ORG_SLIP_SEQ, B.SEQ
                                         ) B  ON B.COMP_CODE = AA.COMP_CODE
                                             AND B.SEND_NUM  = AA.SEND_NUM
                        WHERE AA.COMP_CODE    = A.COMP_CODE
                          AND B.ORG_AC_DATE  = A.ORG_AC_DATE
                          AND B.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                          AND B.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
                          AND B.SEQ          = A.SEQ
                      )
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">                    
        AND A.DIV_CODE IN
        <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
            #{item}
        </foreach>                                  
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">  
        AND A.ACCNT = #{ACCNT_CODE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_CUSTOM_CODE)"> 
        AND A.PAY_CUSTOM_CODE    = #{PAY_CUSTOM_CODE}
    </if>
        
    <if test="@foren.Ognl@isNotEmpty(PRE_DATE_FR)"> 
        AND A.PRE_DATE      &gt;= #{PRE_DATE_FR}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PRE_DATE_TO)">
        AND A.PRE_DATE      &lt;= #{PRE_DATE_TO}
    </if>
    
    <if test="CONFIRM_YN == &quot;Y&quot;">
        AND A.CONFIRM_YN  = 'Y'
    </if>
    
    <if test="CONFIRM_YN == &quot;C&quot;">
        AND A.CONFIRM_YN  = 'C'
    </if>
    <if test="@foren.Ognl@isNotEmpty(DOC_STATUS)">
        AND ISNULL(A.DOC_STATUS,'10') IN
        <foreach collection="DOC_STATUS" item="item" separator="," close=")" open="(">
            #{item}
        </foreach>      
    </if>
    <if test="@foren.Ognl@isNotEmpty(SET_METH)">
        AND A.SET_METH = #{SET_METH}
    </if>
    <if test="@foren.Ognl@isNotEmpty(CARD_TYPE)">
        AND A.CARD_TYPE = #{CARD_TYPE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(CRDT_NUM)">
        AND A.CRDT_NUM = #{CRDT_NUM}
    </if>
    <if test="@foren.Ognl@isNotEmpty(EVDE_TYPE)">
        AND A.EVDE_TYPE = #{EVDE_TYPE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND A.DEPT_CODE = #{DEPT_CODE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM)"> 
        AND A.ORG_SLIP_NUM = #{ORG_SLIP_NUM}
    </if>
    <if test="CONFIRM_YN == &quot;Y&quot;">
        <if test="SIGN_YN == &quot;Y&quot;">
        	AND ISNULL(A.EX_DATE,'') != ''
        </if>
        <if test="SIGN_YN == &quot;N&quot;">
            AND ISNULL(A.EX_DATE,'') = ''
        </if>
    </if>
</if>
	
<if test="CONFIRM_YN == &quot;N&quot;"> --받은 쿼리 적용 완료
		DECLARE @COMP_CODE		NVARCHAR(08)
			  , @ORG_AC_DATE_FR NVARCHAR(08)
			  , @ORG_AC_DATE_TO NVARCHAR(08)
			  , @DIV_CODE		NVARCHAR(08)
			  , @ACCNT			NVARCHAR(08)
			  , @PEND_DATA_CODE	NVARCHAR(08)
			  , @DEPT_CODE		NVARCHAR(08)
	
		   SET @COMP_CODE		= #{S_COMP_CODE}
		   SET @ORG_AC_DATE_FR 	= #{ORG_AC_DATE_FR}
		   SET @ORG_AC_DATE_TO 	= #{ORG_AC_DATE_TO}
		   SET @DIV_CODE		= #{DIV_CODE}
		   SET @ACCNT			= #{ACCNT}
		   SET @PEND_DATA_CODE	= #{PEND_DATA_CODE}
		   SET @DEPT_CODE		= #{DEPT_CODE}
	
	    SELECT 
	           T1.CHK
	         , ROW_NUMBER() OVER (ORDER BY T1.PRE_DATE)                                     AS ROW_NUMBER
	         , T1.MODY_YN
	         , ISNULL(T4.DOC_STATUS, '10')                                                  AS PAYMENT_STATUS
	         , T8.REF_CODE1                                                                 AS PAYMENT_STATUS_DETAIL
	         , ISNULL(T4.PRE_DATE, T1.PRE_DATE)                                             AS PRE_DATE
	         , ISNULL(T4.PAY_CUSTOM_CODE, T1.CUSTOM_CODE)                                   AS PAY_CUSTOM_CODE      --
	         , ISNULL(T5.CUSTOM_NAME, T1.CUSTOM_NAME)                                       AS PAY_CUSTOM_NAME  --
	         , ISNULL(T4.PEND_CODE, T1.PEND_CODE)                                           AS PEND_CODE    --
	         , CASE WHEN ISNULL(T4.MONEY_UNIT, '') = '' THEN T1.MONEY_UNIT
	           ELSE T4.MONEY_UNIT END                                                       AS MONEY_UNIT
	         , '10'                                                                         AS SET_METH     --
	         , 'Y'                                                                          AS TRANS_YN     --
	         , ISNULL(T1.REMARK, '')                                                        AS REMARK
	         , T1.ORG_AMT_I     --발생금액
	         , T1.J_AMT_I       --반제된금액
	         , T1.JAN_AMT_I     --지급대상금액
             --*********************************** 여기수정 (20170403)
 	         , CASE WHEN T1.JAN_AMT_I = 0 THEN 0
               ELSE T1.JAN_AMT_I - ISNULL(T1.IN_TAX_I, 0) - ISNULL(T1.LOCAL_TAX_I, 0) END   AS REAL_AMT_I -- 실지급액
 	         , ISNULL(T4.J_AMT_I, 0)                                                        AS SEND_J_AMT_I    --지급확정금액
 	         , ISNULL(T4.J_AMT_I, 0)                                                        AS SEND_J_AMT_I_DUMMY
	         , ISNULL(uniLITE.fnGetUserDate(T4.COMP_CODE,T4.ORG_AC_DATE), uniLITE.fnGetUserDate(T1.COMP_CODE,T1.ORG_AC_DATE))   AS ORG_AC_DATE      --
	         , ISNULL(T4.ORG_SLIP_NUM,T1.ORG_SLIP_NUM)                                      AS ORG_SLIP_NUM     --
	         , ISNULL(T4.ORG_SLIP_SEQ,T1.ORG_SLIP_SEQ)                                      AS ORG_SLIP_SEQ     --
	         , ISNULL(T4.ACCNT, T1.ACCNT)                                                   AS ACCNT       --
	         , T1.ACCNT_NAME
	         , CASE WHEN LEN(T1.CRDT_NUM) &gt; 20 THEN T1.CRDT_NUM ELSE T12.CARD_NO END     AS CRDT_NUM
	         , T12.CARD_TYPE3                                                               AS CARD_TYPE
	         , ISNULL(T4.DIV_CODE,T1.DIV_CODE)                                              AS DIV_CODE  --
	         , T1.INPUT_PATH
	         , T1.INPUT_DIVI
	         , ISNULL(T4.CONFIRM_YN,'N')                                                    AS CONFIRM_YN
	
	         , CASE WHEN T1.CRDT_NUM != '' THEN T13.BANK_CODE
	                ELSE CASE WHEN ISNULL(T1.CUST_BANK_CODE, '')     = '' THEN T1.BCM_BANK_CODE
	                          ELSE ISNULL(T1.CUST_BANK_CODE, '')
	                     END
	           END                                                                          AS BANK_CODE
	         , CASE WHEN T1.CRDT_NUM != '' THEN T14.CUSTOM_NAME
	                ELSE CASE WHEN ISNULL(T11.CUSTOM_NAME, '')       = '' THEN ISNULL(T2.CUSTOM_NAME, '')
	                          ELSE ISNULL(T11.CUSTOM_NAME, '')
	                     END
	           END                                                                          AS BANK_NAME
	         , CASE WHEN T1.CRDT_NUM != '' THEN T13.ACCOUNT_NUM
	                ELSE CASE WHEN ISNULL(T1.CUST_BANKBOOK_NUM, '')  = '' THEN ISNULL(T1.BCM_BANKBOOK_NUM, '')
	                          ELSE ISNULL(T1.CUST_BANKBOOK_NUM, '')
	                     END
	           END                                                                          AS BANK_ACCOUNT
	         , CASE WHEN T1.CRDT_NUM != '' THEN T12.EMP_NM
	                ELSE CASE WHEN ISNULL(T1.CUST_BANKBOOK_NAME, '') = '' THEN ISNULL(T1.BCM_BANKBOOK_NAME, '')
	                          ELSE ISNULL(T1.CUST_BANKBOOK_NAME, '')
	                     END
	           END                                                                          AS BANKBOOK_NAME
	         , ISNULL(T3.CUSTOM_NAME,'')                                                    AS PURCHASE_BANK_NAME
	         , ISNULL(T4.COMP_CODE, T1.COMP_CODE)                                           AS COMP_CODE        --
	         , T1.SEQ
	         , T4.CONF_SEND_NUM
	         , ISNULL(T1.DED_TYPE, '')                                                      AS DED_TYPE
	         , ISNULL(T1.SUPP_TOTAL_I, 0)                                                   AS SUPP_TOTAL_I
	         , ISNULL(T1.IN_TAX_I, 0)                                                       AS IN_TAX_I       --소득세
	         , ISNULL(T1.LOCAL_TAX_I, 0)                                                    AS LOCAL_TAX_I    --주민세
	         , T4.RCPT_ID
	         , T4.RCPT_NAME
	         , T4.CMS_TRANS_YN
	         , T4.RCPT_RESULT_MSG
	         , T4.RCPT_STATE_NUM
	         , CASE WHEN ISNULL(T1.OUT_SAVE_CODE, '') = '' THEN ISNULL(T4.OUT_SAVE_CODE, '') ELSE T1.OUT_SAVE_CODE END AS OUT_SAVE_CODE
	         , CASE WHEN ISNULL(T1.OUT_BANK_CODE, '') = '' THEN ISNULL(T4.OUT_BANK_CODE, '') ELSE T1.OUT_BANK_CODE END AS OUT_BANK_CODE
	         , CASE WHEN ISNULL(T1.IN_SAVE_CODE, '') = '' THEN ISNULL(T4.IN_SAVE_CODE, '')   ELSE T1.IN_SAVE_CODE  END AS IN_SAVE_CODE
	         , ISNULL(T9.SAVE_NAME,'')                                 AS IN_SAVE_NAME
	         , ISNULL(T4.STATE_NUM, '')                                                     AS STATE_NUM
	         , ISNULL(T4.EX_DATE, '')                                                       AS EX_DATE
	         , ISNULL(T4.EX_NUM, 0)                                                         AS EX_NUM
	         , ISNULL(T10.DED_TYPE, '')                                                     AS DED_TYPE
	         , ISNULL(T1.EVDE_TYPE,'')                                                      AS EVDE_TYPE
	         , ISNULL(T1.DEPT_CODE,'')                                                      AS DEPT_CODE
	         , ISNULL(T15.TREE_NAME,'')                                                     AS DEPT_NAME
	      FROM (
	            SELECT CAST(0 AS BIT)                                AS CHK
	                 , CASE WHEN ISNULL(A.PRE_DATE, '') = '' THEN ISNULL(C.PRE_DATE, '')
	                   ELSE ISNULL(A.PRE_DATE, '') END               AS PRE_DATE
	                 , CASE WHEN A.CUSTOM_CODE = '' THEN A.PEND_DATA_CODE
	                   ELSE A.CUSTOM_CODE END                        AS CUSTOM_CODE
	                 , CASE WHEN A.CUSTOM_NAME = '' THEN A.PAY_CUSTOM_NAME
	                   ELSE A.CUSTOM_NAME END                        AS CUSTOM_NAME
	                 , A.PEND_CODE1                                  AS PEND_CODE
	                 , A.MONEY_UNIT
	                 , A.SET_METH
	                 , ISNULL(A.REMARK, '')                          AS REMARK
	                 , A.ORG_AMT_I                                   AS ORG_AMT_I

                     --************************************************************** 아래로변경
	                 , A.ORG_AMT_I - A.BLN_I                         AS J_AMT_I          -- 총 반제한 금액
	                 , A.BLN_I                                       AS JAN_AMT_I        -- 300T 의   잔액  삭제해야 됨

	                 , A.ORG_AC_DATE
	                 , A.ORG_SLIP_NUM
	                 , A.ORG_SLIP_SEQ
	                 , A.ACCNT
	                 , A.ACCNT_NAME
	                 , C.CRDT_NUM
	                 , A.DIV_CODE
	                 , A.DIV_NAME
	                 , A.INPUT_PATH
	                 , C.INPUT_DIVI
	                 , A.MODY_YN
	                 , A.AGJ_BANKBOOK_NUM
	                 , A.AGJ_BANK_CODE
	                 , A.AGJ_BANKBOOK_NAME
	                 , ISNULL(Y.BOOK_CODE, '')                       AS BCM_BOOK_CODE
	                 , ISNULL(Y.BOOK_NAME, '')                       AS BCM_BOOK_NAME
	                 , CASE WHEN ISNULL(A.BANK_CODE, '') = '' THEN ISNULL(Y.BANK_CODE, '')
	                   ELSE ISNULL(A.BANK_CODE, '') END              AS BCM_BANK_CODE
	                 , CASE WHEN ISNULL(A.ACCOUNT_NUM, '') = '' THEN uniLITE.fnCipherDecrypt(Y.BANKBOOK_NUM, 'B')
	                   ELSE ISNULL(A.ACCOUNT_NUM, '') END            AS BCM_BANKBOOK_NUM
	                 , ISNULL(Y.BANKBOOK_NAME, '')                   AS BCM_BANKBOOK_NAME
	                 , A.PURCHASE_BANK
	                 , A.COMP_CODE
	                 , ISNULL(A.DED_TYPE, '')                        AS DED_TYPE
	                 , ISNULL(A.SUPP_TOTAL_I, 0)                     AS SUPP_TOTAL_I
	                 , ISNULL(A.IN_TAX_I, 0)                         AS IN_TAX_I
	                 , ISNULL(A.LOCAL_TAX_I, 0)                      AS LOCAL_TAX_I
	                 , ''                                            AS OUT_SAVE_CODE
	                 , ''                                            AS OUT_BANK_CODE
	                 , ''                                            AS IN_SAVE_CODE
	                 , ''                                            AS STATE_NUM
	                 , ''                                            AS EX_DATE
	                 , 0                                             AS EX_NUM
	                 , A.SEQ                                         AS SEQ
	
	                 , ISNULL(T.BANK_CODE, '')                       AS CUST_BANK_CODE
	                 , ISNULL(T.BANKBOOK_NUM, '')                    AS CUST_BANKBOOK_NUM
	                 , ISNULL(T.BANKBOOK_NAME, '')                   AS CUST_BANKBOOK_NAME
	                 , ISNULL(C.EVDE_TYPE, '')                       AS EVDE_TYPE
	                 , ISNULL(C.DEPT_CODE,'')                        AS DEPT_CODE
                     --************************************************************** 추가
                     , ISNULL(A.J_AMT_I, 0) AS AMT_I_310
                     , ISNULL(A.J_AMT_I, 0) AS AMT_I_320
                     , ISNULL(A.J_AMT_I, 0) AS AMT_I_330
	              FROM
	(
	    SELECT B.EX_DATE, B.EX_NUM, B.AC_CODE1, B.AC_CODE2, B.AC_CODE3, B.AC_CODE4, B.AC_CODE5, B.AC_CODE6
	         , B.AC_DATA1, B.AC_DATA2, B.AC_DATA3, B.AC_DATA4, B.AC_DATA5, B.AC_DATA6
	         , B.AC_DATA_NAME1, B.AC_DATA_NAME2, B.AC_DATA_NAME3, B.AC_DATA_NAME4, B.AC_DATA_NAME5, B.AC_DATA_NAME6, B.REMARK
	         , CASE WHEN ISNULL(B.CUSTOM_CODE, '') = '' THEN A.PEND_DATA_CODE
	           ELSE ISNULL(B.CUSTOM_CODE, '') END                      AS CUSTOM_CODE
	         , CASE WHEN ISNULL(B.CUSTOM_NAME, '') = '' THEN D.PAY_CUSTOM_NAME
	           ELSE ISNULL(B.CUSTOM_NAME, '') END                      AS CUSTOM_NAME
	         , ISNULL(H.PRE_DATE, '')                                  AS PRE_DATE
	         , ISNULL(X.DED_TYPE, '')                                  AS DED_TYPE
	         , ISNULL(X.SUPP_TOTAL_I, 0)                               AS SUPP_TOTAL_I
	         , ISNULL(X.IN_TAX_I, 0) + ISNULL(X.CP_TAX_I, 0)           AS IN_TAX_I
	         , ISNULL(X.LOCAL_TAX_I, 0)                                AS LOCAL_TAX_I
			 , ISNULL(F.ACCNT_NAME, '')                                AS ACCNT_NAME
	         , ISNULL(D.PAY_CUSTOM_NAME, '')                           AS PAY_CUSTOM_NAME
	         , ISNULL(D.PEND_CODE, '')                                 AS PEND_CODE1
	         , ISNULL(D.SET_METH, '')                                  AS SET_METH
	         , ISNULL(D.PURCHASE_BANK, '')                             AS PURCHASE_BANK
	         , ISNULL(G.DIV_NAME, '')                                  AS DIV_NAME
	         , ISNULL(H.BANK_CODE, '')                                 AS BANK_CODE
	         , ISNULL(H.ACCOUNT_NUM, '')                               AS ACCOUNT_NUM
	         , ISNULL(H.BANKBOOK_NAME, '')                             AS BANKBOOK_NAME
	         , CASE WHEN (CASE 'O2' WHEN B.AC_CODE1 THEN B.AC_DATA1
	                                WHEN B.AC_CODE2 THEN B.AC_DATA2
	                                WHEN B.AC_CODE3 THEN B.AC_DATA3
	                                WHEN B.AC_CODE4 THEN B.AC_DATA4
	                                WHEN B.AC_CODE5 THEN B.AC_DATA5
	                                WHEN B.AC_CODE6 THEN B.AC_DATA6
	                      ELSE '' END) = '' THEN 'Y'
	           ELSE 'N' END                                            AS MODY_YN
	         , ''                                                      AS AGJ_BANKBOOK_NUM
	         , CASE 'A3' WHEN B.AC_CODE1 THEN B.AC_DATA1
	                     WHEN B.AC_CODE2 THEN B.AC_DATA2
	                     WHEN B.AC_CODE3 THEN B.AC_DATA3
	                     WHEN B.AC_CODE4 THEN B.AC_DATA4
	                     WHEN B.AC_CODE5 THEN B.AC_DATA5
	                     WHEN B.AC_CODE6 THEN B.AC_DATA6
	           ELSE '' END                                             AS AGJ_BANK_CODE
	         , CASE 'A3' WHEN B.AC_CODE1 THEN B.AC_DATA_NAME1
	                     WHEN B.AC_CODE2 THEN B.AC_DATA_NAME2
	                     WHEN B.AC_CODE3 THEN B.AC_DATA_NAME3
	                     WHEN B.AC_CODE4 THEN B.AC_DATA_NAME4
	                     WHEN B.AC_CODE5 THEN B.AC_DATA_NAME5
	                     WHEN B.AC_CODE6 THEN B.AC_DATA_NAME6
	           ELSE '' END                                             AS AGJ_BANKBOOK_NAME
	         , ISNULL(J.SEQ, 1)                                        AS SEQ
	         , '10'                                                    AS DOC_STATUS
	         , A.*
                     --************************************************************** 추가
             , ISNULL(M1.J_AMT_I, 0) AS AMT_I_310
             , ISNULL(M2.J_AMT_I, 0) AS AMT_I_320
             , ISNULL(M3.J_AMT_I, 0) AS AMT_I_330
	      FROM            AGB300T A WITH (NOLOCK)
	           INNER JOIN AGJ210T B WITH (NOLOCK INDEX(AGJ210T_IDX05))  ON B.COMP_CODE              = A.COMP_CODE
	                                              AND B.AC_DATE                = A.ORG_AC_DATE
	                                              AND B.SLIP_NUM               = A.ORG_SLIP_NUM
	                                              AND B.SLIP_SEQ               = A.ORG_SLIP_SEQ
	                                              AND B.ACCNT                  = A.ACCNT
	                                              AND ISNULL(B.MOD_DIVI, '')   = ''
	           LEFT JOIN  HPB200T X WITH (NOLOCK INDEX(HPB200T_IDX01))  ON X.COMP_CODE              = A.COMP_CODE
	                                              AND X.EX_DATE                = B.EX_DATE
	                                              AND X.EX_NUM                 = B.EX_NUM
	                                              --AND X.EX_SEQ                 = B.EX_SEQ
	                                              AND X.PERSON_NUMB            = A.PEND_DATA_CODE
	                                              AND X.PAY_AMOUNT_I           = A.ORG_AMT_I
	           LEFT JOIN  ABH222T H WITH (NOLOCK)  ON H.COMP_CODE              = A.COMP_CODE
	                                              AND H.ACCNT                  = A.ACCNT
	                                              AND H.ORG_AC_DATE            = A.ORG_AC_DATE
	                                              AND H.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
	                                              AND H.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
	           INNER JOIN ABA400T E  WITH (NOLOCK) ON E.COMP_CODE              = A.COMP_CODE
	                                              AND E.ACCNT                  = A.ACCNT
	                                              AND ISNULL(E.PROFIT_DIVI,'') = 'X'
	           LEFT JOIN  ABA400T F  WITH (NOLOCK) ON F.COMP_CODE              = A.COMP_CODE
	                                              AND F.ACCNT                  = A.ACCNT
	           LEFT JOIN ABH200TV D WITH (NOLOCK)  ON D.COMP_CODE              = A.COMP_CODE
	                                              AND D.PEND_CODE              = A.PEND_CODE
	                                              AND D.PAY_CUSTOM_CODE        = A.PEND_DATA_CODE
	           LEFT JOIN  BOR120T G  WITH (NOLOCK) ON G.COMP_CODE              = A.COMP_CODE
	                                              AND G.DIV_CODE               = A.DIV_CODE
	           LEFT JOIN  AGB310T J  WITH (NOLOCK) ON J.COMP_CODE              = B.COMP_CODE
	                                              AND J.J_DATE                 = B.AC_DATE
	                                              AND J.J_SLIP_NUM             = B.SLIP_NUM
	                                              AND J.J_SLIP_SEQ             = B.SLIP_SEQ
                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.J_AMT_I) AS J_AMT_I
                            FROM AGB310T M
                           WHERE M.COMP_CODE       = @COMP_CODE
                             AND M.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M1                      ON M1.COMP_CODE              = A.COMP_CODE
                                                  AND M1.ACCNT                  = A.ACCNT
                                                  AND M1.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M1.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M1.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.J_AMT_I) AS J_AMT_I
                            FROM AGB320T M
                           WHERE M.COMP_CODE       = @COMP_CODE
                             AND M.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M2                      ON M2.COMP_CODE              = A.COMP_CODE
                                                  AND M2.ACCNT                  = A.ACCNT
                                                  AND M2.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M2.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M2.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ

                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.SEND_J_AMT_I) AS J_AMT_I
                            FROM ABH220T M
                           WHERE M.COMP_CODE       = @COMP_CODE
                             AND M.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
                             AND ISNULL(M.EX_DATE     , '')  = ''
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M3                      ON M2.COMP_CODE              = A.COMP_CODE
                                                  AND M2.ACCNT                  = A.ACCNT
                                                  AND M2.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M2.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M2.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
	     WHERE A.COMP_CODE		 = @COMP_CODE
	       AND A.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
	       AND A.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
	       AND A.BLN_I          != 0
           AND NOT EXISTS (SELECT * FROM ABH220T G WITH (NOLOCK)
                         WHERE G.COMP_CODE = A.COMP_CODE
                              AND G.ORG_AC_DATE   = A.ORG_AC_DATE
                              AND G.ORG_SLIP_NUM  = A.ORG_SLIP_NUM
                              AND G.ORG_SLIP_SEQ  = A.ORG_SLIP_SEQ)
	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
	       AND A.DIV_CODE        = @DIV_CODE		--사업장
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT)">
	       AND A.ACCNT           = @ACCNT			--계정
    </if>
    <if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE)">
	       AND A.PEND_DATA_CODE  = @PEND_DATA_CODE  --지급처
    </if>
    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
	       AND A.DEPT_CODE       = @DEPT_CODE		-- 부서
    </if>

	      ) A
	                   LEFT JOIN (SELECT A.ACCNT
	                                   , A.AC_DATE
	                                   , A.SLIP_NUM
	                                   , A.SLIP_SEQ
	                                   , CASE WHEN A.AC_CODE1 ='L3' THEN AC_DATA1
	                                          WHEN A.AC_CODE2 ='L3' THEN AC_DATA2
	                                          WHEN A.AC_CODE3 ='L3' THEN AC_DATA3
	                                          WHEN A.AC_CODE4 ='L3' THEN AC_DATA4
	                                          WHEN A.AC_CODE5 ='L3' THEN AC_DATA5
	                                          WHEN A.AC_CODE6 ='L3' THEN AC_DATA6
	                                          ELSE                     ''
	                                      END PRE_DATE
	                                   , CASE WHEN ISNULL(B.CRDT_NUM, '') = ''
	                                          THEN CASE WHEN A.AC_CODE1 ='G5' THEN AC_DATA1
	                                                    WHEN A.AC_CODE2 ='G5' THEN AC_DATA2
	                                                    WHEN A.AC_CODE3 ='G5' THEN AC_DATA3
	                                                    WHEN A.AC_CODE4 ='G5' THEN AC_DATA4
	                                                    WHEN A.AC_CODE5 ='G5' THEN AC_DATA5
	                                                    WHEN A.AC_CODE6 ='G5' THEN AC_DATA6
	                                                    ELSE ''
	                                               END
	                                           ELSE B.CRDT_FULL_NUM
	                                      END CRDT_NUM
	                                   , ISNULL(A.REMARK,'') AS REMARK
	                                   , A.INPUT_DIVI
	                                   , A.COMP_CODE
	                                   , CASE WHEN A.AC_CODE1 ='E4' THEN AC_DATA1
	                                          WHEN A.AC_CODE2 ='E4' THEN AC_DATA2
	                                          WHEN A.AC_CODE3 ='E4' THEN AC_DATA3
	                                          WHEN A.AC_CODE4 ='E4' THEN AC_DATA4
	                                          WHEN A.AC_CODE5 ='E4' THEN AC_DATA5
	                                          WHEN A.AC_CODE6 ='E4' THEN AC_DATA6
	                                          ELSE                     ''
	                                      END EVDE_TYPE
	                                   , A.DEPT_CODE
	                                FROM AGJ210T A WITH (NOLOCK)
	                                     LEFT JOIN ABA500T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
	                                                                      AND B.CRDT_NUM  = CASE WHEN A.AC_CODE1 = 'G5' THEN AC_DATA1
	                                                                                             WHEN A.AC_CODE2 = 'G5' THEN AC_DATA2
	                                                                                             WHEN A.AC_CODE3 = 'G5' THEN AC_DATA3
	                                                                                             WHEN A.AC_CODE4 = 'G5' THEN AC_DATA4
	                                                                                             WHEN A.AC_CODE5 = 'G5' THEN AC_DATA5
	                                                                                             WHEN A.AC_CODE6 = 'G5' THEN AC_DATA6
	                                                                                        END
	                               WHERE A.COMP_CODE            = @COMP_CODE
	                                 AND A.AC_DATE          &gt;= @ORG_AC_DATE_FR
	                                 AND A.AC_DATE          &lt;= @ORG_AC_DATE_TO
	                                 AND (A.MOD_DIVI  = '' OR A.MOD_DIVI IS NULL)
	                               )        C                ON C.COMP_CODE       = A.COMP_CODE
	                                                        AND C.ACCNT           = A.ACCNT
	                                                        AND C.AC_DATE         = A.ORG_AC_DATE
	                                                        AND C.SLIP_NUM        = A.ORG_SLIP_NUM
	                                                        AND C.SLIP_SEQ        = A.ORG_SLIP_SEQ
	                    LEFT JOIN (SELECT D.ACCNT
	                                   , D.AC_DATE
	                                   , D.SLIP_NUM
	                                   , D.SLIP_SEQ
	                                   , K.BANK_CODE
	                                   , K.BANKBOOK_NUM
	                                   , K.BANKBOOK_NAME
	                                   , ISNULL(D.REMARK,'') AS REMARK
	                                   , D.INPUT_DIVI
	                                   , D.COMP_CODE
	                                FROM AGJ210T D WITH (NOLOCK)
	                                     LEFT JOIN BCM130T K  ON K.COMP_CODE = D.COMP_CODE
	                                                         AND K.CUSTOM_CODE = D.CUSTOM_CODE
	                                                         AND K.BOOK_CODE = (CASE WHEN AC_CODE1 ='O2' THEN AC_DATA1
	                                                                                 WHEN AC_CODE2 ='O2' THEN AC_DATA2
	                                                                                 WHEN AC_CODE3 ='O2' THEN AC_DATA3
	                                                                                 WHEN AC_CODE4 ='O2' THEN AC_DATA4
	                                                                                 WHEN AC_CODE5 ='O2' THEN AC_DATA5
	                                                                                 WHEN AC_CODE6 ='O2' THEN AC_DATA6
	                                                                                 ELSE                     ''
	                                                                             END
	                                                                           )
	                               WHERE D.COMP_CODE            = @COMP_CODE
	                                 AND D.AC_DATE          &gt;= @ORG_AC_DATE_FR
	                                 AND D.AC_DATE          &lt;= @ORG_AC_DATE_TO
	                                 AND (D.AC_CODE1 = 'O2' OR D.AC_CODE2 = 'O2' OR D.AC_CODE3 = 'O2' OR D.AC_CODE4 = 'O2' OR D.AC_CODE5 = 'O2' OR D.AC_CODE6 = 'O2')
	                                 AND ISNULL(D.MOD_DIVI, '')  = ''
	                               )        T                ON T.COMP_CODE       = A.COMP_CODE
	                                                        AND T.ACCNT           = A.ACCNT
	                                                        AND T.AC_DATE         = A.ORG_AC_DATE
	                                                        AND T.SLIP_NUM        = A.ORG_SLIP_NUM
	                                                        AND T.SLIP_SEQ        = A.ORG_SLIP_SEQ
	                   LEFT JOIN (SELECT *
	                                FROM (SELECT AA.COMP_CODE
	                                           , AA.CUSTOM_CODE
	                                           , AA.BOOK_CODE
	                                           , AA.BOOK_NAME
	                                           , AA.BANK_CODE
	                                           , AA.BANKBOOK_NUM
	                                           , AA.BANKBOOK_NAME
	                                           , BB.CUSTOM_NAME AS BANK_NAME
	                                           , AA.MAIN_BOOK_YN
	                                           , RANK() OVER( PARTITION BY AA.COMP_CODE, AA.CUSTOM_CODE
	                                                          ORDER BY  AA.MAIN_BOOK_YN DESC, AA.BOOK_CODE ASC
	                                                         ) AS RK
	                                        FROM           BCM130T AA WITH (NOLOCK)
	                                             LEFT JOIN BCM100T BB WITH (NOLOCK) ON BB.COMP_CODE   = AA.COMP_CODE
	                                                                               AND BB.CUSTOM_CODE = AA.BANK_CODE
	                                                                               AND BB.CUSTOM_TYPE = '4'
	                                       WHERE AA.COMP_CODE = @COMP_CODE)  DD
	                               WHERE RK = 1) Y  ON Y.COMP_CODE   = A.COMP_CODE
	                                               AND Y.CUSTOM_CODE = A.CUSTOM_CODE
	                                               AND Y.RK          = 1
	           UNION ALL
	
	            SELECT CAST(0 AS BIT)                                AS CHK
	                 , CASE WHEN ISNULL(A.PRE_DATE, '') = '' THEN ISNULL(C.PRE_DATE, '')
	                   ELSE ISNULL(A.PRE_DATE, '') END               AS PRE_DATE
	                 , CASE WHEN A.CUSTOM_CODE = '' THEN A.PEND_DATA_CODE
	                   ELSE A.CUSTOM_CODE END                        AS CUSTOM_CODE
	                 , CASE WHEN A.CUSTOM_NAME = '' THEN A.PAY_CUSTOM_NAME
	                   ELSE A.CUSTOM_NAME END                        AS CUSTOM_NAME
	                -- , A.PEND_DATA_CODE                              AS CUSTOM_CODE
	                -- , A.PAY_CUSTOM_NAME                             AS CUSTOM_NAME
	                 , A.PEND_CODE1                                  AS PEND_CODE
	                 , A.MONEY_UNIT
	                 , A.SET_METH
	                 , ISNULL(A.REMARK, '')                          AS REMARK
	                 , A.ORG_AMT_I                                   AS ORG_AMT_I
	                 
                     --************************************************************** 아래로변경
                     , A.ORG_AMT_I - A.BLN_I                         AS J_AMT_I          -- 총 반제한 금액
                     , A.BLN_I                                       AS JAN_AMT_I        -- 300T 의   잔액  삭제해야 됨
                     
                     , A.ORG_AC_DATE
	                 , A.ORG_SLIP_NUM
	                 , A.ORG_SLIP_SEQ
	                 , A.ACCNT
	                 , A.ACCNT_NAME
	                 , C.CRDT_NUM
	                 , A.DIV_CODE
	                 , A.DIV_NAME
	                 , A.INPUT_PATH
	                 , C.INPUT_DIVI
	                 , A.MODY_YN
	                 , A.AGJ_BANKBOOK_NUM
	                 , A.AGJ_BANK_CODE
	                 , A.AGJ_BANKBOOK_NAME
	                 , ISNULL(Y.BOOK_CODE, '')                       AS BCM_BOOK_CODE
	                 , ISNULL(Y.BOOK_NAME, '')                       AS BCM_BOOK_NAME
	                 , CASE WHEN ISNULL(A.BANK_CODE, '') = '' THEN ISNULL(Y.BANK_CODE, '')
	                   ELSE ISNULL(A.BANK_CODE, '') END              AS BCM_BANK_CODE
	                 , CASE WHEN ISNULL(A.ACCOUNT_NUM, '') = '' THEN uniLITE.fnCipherDecrypt(Y.BANKBOOK_NUM, 'B')
	                   ELSE ISNULL(A.ACCOUNT_NUM, '') END            AS BCM_BANKBOOK_NUM
	                 , ISNULL(Y.BANKBOOK_NAME, '')                   AS BCM_BANKBOOK_NAME
	                 , A.PURCHASE_BANK
	                 , A.COMP_CODE
	                 , ISNULL(A.DED_TYPE, '')                        AS DED_TYPE
	                 , ISNULL(A.SUPP_TOTAL_I, 0)                     AS SUPP_TOTAL_I
	                 , ISNULL(A.IN_TAX_I, 0)                         AS IN_TAX_I
	                 , ISNULL(A.LOCAL_TAX_I, 0)                      AS LOCAL_TAX_I
	                 , ''                                            AS OUT_SAVE_CODE
	                 , ''                                            AS OUT_BANK_CODE
	                 , ''                                            AS IN_SAVE_CODE
	                 , ''                                            AS STATE_NUM
	                 , ''                                            AS EX_DATE
	                 , 0                                             AS EX_NUM
	                 , A.SEQ                                         AS SEQ
	
	                 , ISNULL(T.BANK_CODE, '')                       AS CUST_BANK_CODE
	                 , ISNULL(T.BANKBOOK_NUM, '')                    AS CUST_BANKBOOK_NUM
	                 , ISNULL(T.BANKBOOK_NAME, '')                   AS CUST_BANKBOOK_NAME
	                 , ISNULL(C.EVDE_TYPE, '')                       AS EVDE_TYPE
	                 , ISNULL(C.DEPT_CODE,'')                        AS DEPT_CODE
                     --************************************************************** 추가
                 , ISNULL(A.J_AMT_I, 0) AS AMT_I_310
                 , ISNULL(A.J_AMT_I, 0) AS AMT_I_320
                 , ISNULL(A.J_AMT_I, 0) AS AMT_I_330
	              FROM
	              --ABH220TV2
	(      SELECT B.EX_DATE, B.EX_NUM, B.AC_CODE1, B.AC_CODE2, B.AC_CODE3, B.AC_CODE4, B.AC_CODE5, B.AC_CODE6
	         , B.AC_DATA1, B.AC_DATA2, B.AC_DATA3, B.AC_DATA4, B.AC_DATA5, B.AC_DATA6
	         , B.AC_DATA_NAME1, B.AC_DATA_NAME2, B.AC_DATA_NAME3, B.AC_DATA_NAME4, B.AC_DATA_NAME5, B.AC_DATA_NAME6, B.REMARK
	         , CASE WHEN ISNULL(B.CUSTOM_CODE, '') = '' THEN A.PEND_DATA_CODE
	           ELSE ISNULL(B.CUSTOM_CODE, '') END                      AS CUSTOM_CODE
	         , CASE WHEN ISNULL(B.CUSTOM_NAME, '') = '' THEN D.PAY_CUSTOM_NAME
	           ELSE ISNULL(B.CUSTOM_NAME, '') END                      AS CUSTOM_NAME
	--         , ISNULL(B.CUSTOM_CODE, '')                               AS CUSTOM_CODE
	--         , ISNULL(B.CUSTOM_NAME, '')                               AS CUSTOM_NAME
	         , ISNULL(H.PRE_DATE, '')                                  AS PRE_DATE
	         , ISNULL(X.DED_TYPE, '')                                  AS DED_TYPE
	         , ISNULL(X.SUPP_TOTAL_I, 0)                               AS SUPP_TOTAL_I
	         , ISNULL(X.IN_TAX_I, 0) + ISNULL(X.CP_TAX_I, 0)           AS IN_TAX_I
	         , ISNULL(X.LOCAL_TAX_I, 0)                                AS LOCAL_TAX_I
			 , ISNULL(F.ACCNT_NAME, '')                                AS ACCNT_NAME
	         , ISNULL(D.PAY_CUSTOM_NAME, '')                           AS PAY_CUSTOM_NAME
	         , ISNULL(D.PEND_CODE, '')                                 AS PEND_CODE1
	         , ISNULL(D.SET_METH, '')                                  AS SET_METH
	         , ISNULL(D.PURCHASE_BANK, '')                             AS PURCHASE_BANK
	         , ISNULL(G.DIV_NAME, '')                                  AS DIV_NAME
	         , ISNULL(H.BANK_CODE, '')                                 AS BANK_CODE
	         , ISNULL(H.ACCOUNT_NUM, '')                               AS ACCOUNT_NUM
	         , ISNULL(H.BANKBOOK_NAME, '')                             AS BANKBOOK_NAME
	         , ISNULL(C.AC_DATE, '')                                   AS AC_DATE
	         , CASE WHEN (CASE 'O2' WHEN B.AC_CODE1 THEN B.AC_DATA1
	                                WHEN B.AC_CODE2 THEN B.AC_DATA2
	                                WHEN B.AC_CODE3 THEN B.AC_DATA3
	                                WHEN B.AC_CODE4 THEN B.AC_DATA4
	                                WHEN B.AC_CODE5 THEN B.AC_DATA5
	                                WHEN B.AC_CODE6 THEN B.AC_DATA6
	                      ELSE '' END) = '' THEN 'Y'
	           ELSE 'N' END                                            AS MODY_YN
	         , ''                                                      AS AGJ_BANKBOOK_NUM
	         , CASE 'A3' WHEN B.AC_CODE1 THEN B.AC_DATA1
	                     WHEN B.AC_CODE2 THEN B.AC_DATA2
	                     WHEN B.AC_CODE3 THEN B.AC_DATA3
	                     WHEN B.AC_CODE4 THEN B.AC_DATA4
	                     WHEN B.AC_CODE5 THEN B.AC_DATA5
	                     WHEN B.AC_CODE6 THEN B.AC_DATA6
	           ELSE '' END                                             AS AGJ_BANK_CODE
	         , CASE 'A3' WHEN B.AC_CODE1 THEN B.AC_DATA_NAME1
	                     WHEN B.AC_CODE2 THEN B.AC_DATA_NAME2
	                     WHEN B.AC_CODE3 THEN B.AC_DATA_NAME3
	                     WHEN B.AC_CODE4 THEN B.AC_DATA_NAME4
	                     WHEN B.AC_CODE5 THEN B.AC_DATA_NAME5
	                     WHEN B.AC_CODE6 THEN B.AC_DATA_NAME6
	           ELSE '' END                                             AS AGJ_BANKBOOK_NAME
	         , ISNULL(J.SEQ, 1)    AS SEQ
	         , '10'                                           AS DOC_STATUS
	         , A.*
                     --************************************************************** 추가
         , ISNULL(M1.J_AMT_I, 0) AS AMT_I_310
         , ISNULL(M2.J_AMT_I, 0) AS AMT_I_320
         , ISNULL(M3.J_AMT_I, 0) AS AMT_I_330
 	      FROM            AGB300T A WITH (NOLOCK)
	           INNER JOIN AGJ210T B WITH (NOLOCK INDEX(AGJ210T_IDX05))  ON B.COMP_CODE              = A.COMP_CODE
	                                              AND B.AC_DATE                = A.ORG_AC_DATE
	                                              AND B.SLIP_NUM               = A.ORG_SLIP_NUM
	                                              AND B.SLIP_SEQ               = A.ORG_SLIP_SEQ
	                                              AND B.ACCNT                  = A.ACCNT
	                                              AND ISNULL(B.MOD_DIVI, '')   = ''
	           INNER JOIN AGB200T C  WITH (NOLOCK) ON C.COMP_CODE              = A.COMP_CODE
	                                              AND C.AC_DATE                = A.ORG_AC_DATE
	                                              AND C.ACCNT                  = A.ACCNT
	                                              AND C.DEPT_CODE              = A.DEPT_CODE
	                                              AND ( (C.BOOK_CODE1          = A.PEND_CODE AND
	                                                     C.BOOK_DATA1          = A.PEND_DATA_CODE ) OR
	                                                    (C.BOOK_CODE2          = A.PEND_CODE AND
	                                                     C.BOOK_DATA2          = A.PEND_DATA_CODE ) )
	           LEFT JOIN  HPB200T X WITH (NOLOCK INDEX(HPB200T_IDX01))  ON X.COMP_CODE              = A.COMP_CODE
	                                              AND X.EX_DATE                = B.EX_DATE
	                                              AND X.EX_NUM                 = B.EX_NUM
	                                              --AND X.EX_SEQ                 = B.EX_SEQ
	                                              AND X.PERSON_NUMB            = A.PEND_DATA_CODE
	                                              AND X.PAY_AMOUNT_I           = A.ORG_AMT_I
	           LEFT JOIN  ABH222T H WITH (NOLOCK)  ON H.COMP_CODE              = A.COMP_CODE
	                                              AND H.ACCNT                  = A.ACCNT
	                                              AND H.ORG_AC_DATE            = A.ORG_AC_DATE
	                                              AND H.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
	                                              AND H.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
	           INNER JOIN ABA400T E  WITH (NOLOCK) ON E.COMP_CODE              = A.COMP_CODE
	                                              AND E.ACCNT                  = A.ACCNT
	                                              AND ISNULL(E.PROFIT_DIVI,'') = 'X'
	           LEFT JOIN  ABA400T F  WITH (NOLOCK) ON F.COMP_CODE              = A.COMP_CODE
	                                              AND F.ACCNT                  = A.ACCNT
	           LEFT JOIN ABH200TV D WITH (NOLOCK)  ON D.COMP_CODE              = A.COMP_CODE
	                                              AND D.PEND_CODE              = A.PEND_CODE
	                                              AND D.PAY_CUSTOM_CODE        = A.PEND_DATA_CODE
	           LEFT JOIN  BOR120T G  WITH (NOLOCK) ON G.COMP_CODE              = A.COMP_CODE
	                                              AND G.DIV_CODE               = A.DIV_CODE
	           LEFT JOIN  AGB310T J  WITH (NOLOCK) ON J.COMP_CODE              = B.COMP_CODE
	                                              AND J.J_DATE                 = B.AC_DATE
	                                              AND J.J_SLIP_NUM             = B.SLIP_NUM
	                                              AND J.J_SLIP_SEQ             = B.SLIP_SEQ
                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.J_AMT_I) AS J_AMT_I
                            FROM AGB310T M
                           WHERE M.COMP_CODE       = @COMP_CODE
                             AND M.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M1                      ON M1.COMP_CODE              = A.COMP_CODE
                                                  AND M1.ACCNT                  = A.ACCNT
                                                  AND M1.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M1.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M1.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.J_AMT_I) AS J_AMT_I
                            FROM AGB320T M
                           WHERE M.COMP_CODE       = @COMP_CODE
                             AND M.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M2                      ON M2.COMP_CODE              = A.COMP_CODE
                                                  AND M2.ACCNT                  = A.ACCNT
                                                  AND M2.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M2.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M2.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ

                     --************************************************************** 추가
               LEFT JOIN (SELECT M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM
                               , M.ORG_SLIP_SEQ      , SUM(M.SEND_J_AMT_I) AS J_AMT_I
                            FROM ABH220T M
                           WHERE M.COMP_CODE                 = @COMP_CODE
                             AND M.ORG_AC_DATE           &gt;= @ORG_AC_DATE_FR
                             AND M.ORG_AC_DATE           &lt;= @ORG_AC_DATE_TO
                             AND ISNULL(M.EX_DATE     , '')  = ''
                           GROUP BY M.COMP_CODE, M.ACCNT, M.ORG_AC_DATE, M.ORG_SLIP_NUM, M.ORG_SLIP_SEQ
                         ) M3                      ON M2.COMP_CODE              = A.COMP_CODE
                                                  AND M2.ACCNT                  = A.ACCNT
                                                  AND M2.ORG_AC_DATE            = A.ORG_AC_DATE
                                                  AND M2.ORG_SLIP_NUM           = A.ORG_SLIP_NUM
                                                  AND M2.ORG_SLIP_SEQ           = A.ORG_SLIP_SEQ
 
	     WHERE A.COMP_CODE		 = @COMP_CODE
	       AND A.ORG_AC_DATE &gt;= @ORG_AC_DATE_FR
	       AND A.ORG_AC_DATE &lt;= @ORG_AC_DATE_TO
           AND LEN(A.ORG_AC_DATE)= 6
	       AND A.BLN_I          != 0
           AND NOT EXISTS (SELECT * FROM ABH220T G WITH (NOLOCK)
                         WHERE G.COMP_CODE = A.COMP_CODE
                              AND G.ORG_AC_DATE   = A.ORG_AC_DATE
                              AND G.ORG_SLIP_NUM  = A.ORG_SLIP_NUM
                              AND G.ORG_SLIP_SEQ  = A.ORG_SLIP_SEQ)
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
	       AND A.DIV_CODE        = @DIV_CODE		-- 사업장
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT)">
	       AND A.ACCNT           = @ACCNT			-- 계정
    </if>
    <if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE)">
	       AND A.PEND_DATA_CODE  = @PEND_DATA_CODE  -- 지급처
    </if>
    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
	       AND A.DEPT_CODE       = @DEPT_CODE		-- 부서
    </if>
-----------------------------------------------------------------------------

--           AND NOT EXISTS (SELECT * FROM ABH220T G WITH (NOLOCK)
--	                        WHERE G.COMP_CODE = A.COMP_CODE
--                              AND G.ORG_AC_DATE   = A.ORG_AC_DATE
--                              AND G.ORG_SLIP_NUM  = A.ORG_SLIP_NUM
--                              AND G.ORG_SLIP_SEQ  = A.ORG_SLIP_SEQ)
-----------------------------------------------------------------------------
    	      ) A
	                   LEFT JOIN (SELECT A.ACCNT
	                                   , A.AC_DATE
	                                   , A.SLIP_NUM
	                                   , A.SLIP_SEQ
	                                   , CASE WHEN A.AC_CODE1 ='L3' THEN AC_DATA1
	                                          WHEN A.AC_CODE2 ='L3' THEN AC_DATA2
	                                          WHEN A.AC_CODE3 ='L3' THEN AC_DATA3
	                                          WHEN A.AC_CODE4 ='L3' THEN AC_DATA4
	                                          WHEN A.AC_CODE5 ='L3' THEN AC_DATA5
	                                          WHEN A.AC_CODE6 ='L3' THEN AC_DATA6
	                                          ELSE                     ''
	                                      END PRE_DATE
	                                   , CASE WHEN ISNULL(B.CRDT_NUM, '') = ''
	                                          THEN CASE WHEN A.AC_CODE1 ='G5' THEN AC_DATA1
	                                                    WHEN A.AC_CODE2 ='G5' THEN AC_DATA2
	                                                    WHEN A.AC_CODE3 ='G5' THEN AC_DATA3
	                                                    WHEN A.AC_CODE4 ='G5' THEN AC_DATA4
	                                                    WHEN A.AC_CODE5 ='G5' THEN AC_DATA5
	                                                    WHEN A.AC_CODE6 ='G5' THEN AC_DATA6
	                                                    ELSE ''
	                                               END
	                                           ELSE B.CRDT_FULL_NUM
	                                      END CRDT_NUM
	                                   , ISNULL(A.REMARK,'') AS REMARK
	                                   , A.INPUT_DIVI
	                                   , A.COMP_CODE
	                                   , CASE WHEN A.AC_CODE1 ='E4' THEN AC_DATA1
	                                          WHEN A.AC_CODE2 ='E4' THEN AC_DATA2
	                                          WHEN A.AC_CODE3 ='E4' THEN AC_DATA3
	                                          WHEN A.AC_CODE4 ='E4' THEN AC_DATA4
	                                          WHEN A.AC_CODE5 ='E4' THEN AC_DATA5
	                                          WHEN A.AC_CODE6 ='E4' THEN AC_DATA6
	                                          ELSE                     ''
	                                      END EVDE_TYPE
	                                   , A.DEPT_CODE
	                                FROM AGJ210T A WITH (NOLOCK)
	                                     LEFT JOIN ABA500T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
	                                                                      AND B.CRDT_NUM  = CASE WHEN A.AC_CODE1 = 'G5' THEN AC_DATA1
	                                                                                             WHEN A.AC_CODE2 = 'G5' THEN AC_DATA2
	                                                                                             WHEN A.AC_CODE3 = 'G5' THEN AC_DATA3
	                                                                                             WHEN A.AC_CODE4 = 'G5' THEN AC_DATA4
	                                                                                             WHEN A.AC_CODE5 = 'G5' THEN AC_DATA5
	                                                                                             WHEN A.AC_CODE6 = 'G5' THEN AC_DATA6
	                                                                                        END
	                               WHERE A.COMP_CODE            = @COMP_CODE
	                                 AND A.AC_DATE          &gt;= @ORG_AC_DATE_FR
	                                 AND A.AC_DATE          &lt;= @ORG_AC_DATE_TO
	                                 AND (A.MOD_DIVI  = '' OR A.MOD_DIVI IS NULL)
	                               )        C                ON C.COMP_CODE       = A.COMP_CODE
	                                                        AND C.ACCNT           = A.ACCNT
	                                                        AND C.AC_DATE         = A.ORG_AC_DATE
	                                                        AND C.SLIP_NUM        = A.ORG_SLIP_NUM
	                                                        AND C.SLIP_SEQ        = A.ORG_SLIP_SEQ
	
	                   LEFT JOIN (SELECT D.ACCNT
	                                   , D.AC_DATE
	                                   , D.SLIP_NUM
	                                   , D.SLIP_SEQ
	                                   , K.BANK_CODE
	                                   , K.BANKBOOK_NUM
	                                   , K.BANKBOOK_NAME
	                                   , ISNULL(D.REMARK,'') AS REMARK
	                                   , D.INPUT_DIVI
	                                   , D.COMP_CODE
	                                FROM AGJ210T D WITH (NOLOCK)
	                                     LEFT JOIN BCM130T K  ON K.COMP_CODE = D.COMP_CODE
	                                                         AND K.CUSTOM_CODE = D.CUSTOM_CODE
	                                                         AND K.BOOK_CODE = (CASE WHEN AC_CODE1 ='O2' THEN AC_DATA1
	                                                                                 WHEN AC_CODE2 ='O2' THEN AC_DATA2
	                                                                                 WHEN AC_CODE3 ='O2' THEN AC_DATA3
	                                                                                 WHEN AC_CODE4 ='O2' THEN AC_DATA4
	                                                                                 WHEN AC_CODE5 ='O2' THEN AC_DATA5
	                                                                                 WHEN AC_CODE6 ='O2' THEN AC_DATA6
	                                                                                 ELSE                     ''
	                                                                             END
	                                                                           )
	                               WHERE D.COMP_CODE            = @COMP_CODE
	                                 AND D.AC_DATE          &gt;= @ORG_AC_DATE_FR
	                                 AND D.AC_DATE          &lt;= @ORG_AC_DATE_TO
	                                 AND (D.AC_CODE1 = 'O2' OR D.AC_CODE2 = 'O2' OR D.AC_CODE3 = 'O2' OR D.AC_CODE4 = 'O2' OR D.AC_CODE5 = 'O2' OR D.AC_CODE6 = 'O2')
	                                 AND ISNULL(D.MOD_DIVI, '')  = ''
	                               )        T                ON T.COMP_CODE       = A.COMP_CODE
	                                                        AND T.ACCNT           = A.ACCNT
	                                                        AND T.AC_DATE         = A.ORG_AC_DATE
	                                                        AND T.SLIP_NUM        = A.ORG_SLIP_NUM
	                                                        AND T.SLIP_SEQ        = A.ORG_SLIP_SEQ
	                   LEFT JOIN (SELECT *
	                                FROM (SELECT AA.COMP_CODE
	                                           , AA.CUSTOM_CODE
	                                           , AA.BOOK_CODE
	                                           , AA.BOOK_NAME
	                                           , AA.BANK_CODE
	                                           , AA.BANKBOOK_NUM
	                                           , AA.BANKBOOK_NAME
	                                           , BB.CUSTOM_NAME AS BANK_NAME
	                                           , AA.MAIN_BOOK_YN
	                                           , RANK() OVER( PARTITION BY AA.COMP_CODE, AA.CUSTOM_CODE
	                                                          ORDER BY  AA.MAIN_BOOK_YN DESC, AA.BOOK_CODE ASC
	                                                         ) AS RK
	                                        FROM           BCM130T AA WITH (NOLOCK)
	                                             LEFT JOIN BCM100T BB WITH (NOLOCK) ON BB.COMP_CODE   = AA.COMP_CODE
	                                                                               AND BB.CUSTOM_CODE = AA.BANK_CODE
	                                                                               AND BB.CUSTOM_TYPE = '4'
	                                       WHERE AA.COMP_CODE = @COMP_CODE)  DD
	                               WHERE RK = 1) Y  ON Y.COMP_CODE   = A.COMP_CODE
	                                               AND Y.CUSTOM_CODE = A.CUSTOM_CODE
	                                               AND Y.RK          = 1
	            UNION ALL
	
	            SELECT CAST(0 AS BIT)                                AS CHK
	                 , CONVERT(NVARCHAR(8), '')                      AS PRE_DATE
	                 , PAY_CUSTOM_CODE                               AS CUSTOM_CODE
	                 , C.CUSTOM_NAME                                 AS CUSTOM_NAME
	                 , A.PEND_CODE
	                 , A.MONEY_UNIT
	                 , A.SET_METH
	                 , ISNULL(A.REMARK, '')                          AS REMARK
	                 , A.J_AMT_I                                     AS ORG_AMT_I        -- 발생금액
	                 , 0                                             AS J_AMT_I          -- 반제금액
	                 , A.J_AMT_I                                     AS JAN_AMT_I        -- 지급대상금액
	                 , A.ORG_AC_DATE                                 AS ORG_AC_DATE
	                 , ORG_SLIP_NUM                                  AS ORG_SLIP_NUM
	                 , ORG_SLIP_SEQ                                  AS ORG_SLIP_SEQ
	                 , A.ACCNT
	                 , D.ACCNT_NAME
	                 , ''                                            AS CRDT_NUM
	                 , A.DIV_CODE
	                 , E.DIV_NAME
	                 , '69'                                          AS INPUT_PATH
	                 , CONVERT(NVARCHAR(2), '')                      AS INPUT_DIVI
	                 , 'N'                                           AS MODY_YN
	                 , uniLITE.fnCipherDecrypt(A.ACCOUNT_NUM, '')    AS AGJ_BANKBOOK_NUM
	                 , A.BANK_CODE                                   AS AGJ_BANK_CODE
	                 , F.CUSTOM_FULL_NAME                            AS AGJ_BANKBOOK_NAME
	                 , ''                                            AS BCM_BOOK_CODE
	                 , ''                                            AS BOOK_NAME
	                 , ''                                            AS BANK_CODE
	                 , ''                                            AS BANKBOOK_NUM
	                 , A.BANKBOOK_NAME                               AS BANKBOOK_NAME
	                 , ''                                            AS PURCHASE_BANK
	                 , A.COMP_CODE
	                 , ''                                            AS DED_TYPE
	                 , 0                                             AS SUPP_TOTAL_I
	                 , 0                                             AS IN_TAX_I
	                 , 0                                             AS LOCAL_TAX_I
	                 , A.OUT_SAVE_CODE                               AS OUT_SAVE_CODE
	                 , A.OUT_BANK_CODE                               AS OUT_BANK_CODE
	                 , A.IN_SAVE_CODE                                AS IN_SAVE_CODE
	                 , ISNULL(A.STATE_NUM, '')                       AS STATE_NUM
	                 , ISNULL(A.EX_DATE, '')                         AS EX_DATE
	                 , ISNULL(A.EX_NUM, 0)                           AS EX_NUM
	                 , A.SEQ                                         AS SEQ
	
	                 , ''                                            AS CUST_BANK_CODE
	                 , ''                                            AS CUST_BANKBOOK_NUM
	                 , ''                                            AS CUST_BANKBOOK_NAME
	                 , ''                                            AS EVDE_TYPE
	                 , ''                                            AS DEPT_CODE
                     --************************************************************** 추가
                     , 0                                             AS AMT_I_310
                     , 0                                             AS AMT_I_320
                     , 0                                             AS AMT_I_330
	              FROM           ABH220T A WITH (NOLOCK)
	                   LEFT JOIN BCM100T C WITH (NOLOCK)   ON C.COMP_CODE   = A.COMP_CODE
	                                                      AND C.CUSTOM_CODE = A.PAY_CUSTOM_CODE
	                   LEFT JOIN ABA400T D WITH (NOLOCK)   ON D.COMP_CODE   = A.COMP_CODE
	                                                      AND D.ACCNT       = A.ACCNT
	                   LEFT JOIN BOR120T E WITH (NOLOCK)   ON E.COMP_CODE   = A.COMP_CODE
	                                                      AND E.DIV_CODE    = A.DIV_CODE
	                   LEFT JOIN BCM100T F WITH (NOLOCK)   ON F.COMP_CODE   = A.COMP_CODE
	                                                      AND F.CUSTOM_CODE = A.BANK_CODE
	             WHERE A.COMP_CODE   = @COMP_CODE
	               AND A.ORG_AC_DATE BETWEEN @ORG_AC_DATE_FR AND @ORG_AC_DATE_TO
	               AND NOT EXISTS (SELECT * FROM AGJ210T G WITH (NOLOCK)
	                                WHERE G.COMP_CODE = A.COMP_CODE
	                                  AND G.AC_DATE   = A.ORG_AC_DATE
	                                  AND G.SLIP_NUM  = A.ORG_SLIP_NUM
	                                  AND G.SLIP_SEQ  = A.ORG_SLIP_SEQ
	                                  AND (G.MOD_DIVI IS NULL OR G.MOD_DIVI = ''))
	           ) T1
	            LEFT  JOIN BCM100T   T2  WITH (NOLOCK) ON T2.COMP_CODE    = T1.COMP_CODE
	                                                  AND T2.CUSTOM_CODE  = CASE WHEN ISNULL(T1.AGJ_BANK_CODE, '') = '' THEN T1.BCM_BANK_CODE ELSE ISNULL(T1.AGJ_BANK_CODE, '') END
	            LEFT  JOIN BCM100T   T3  WITH (NOLOCK) ON T3.COMP_CODE    = T1.COMP_CODE
	                                                  AND T3.CUSTOM_CODE  = T1.PURCHASE_BANK
	            LEFT  JOIN ABH220T   T4  WITH (NOLOCK) ON T4.COMP_CODE    = T1.COMP_CODE
	                                                  AND T4.ACCNT        = T1.ACCNT
	                                                  AND T4.ORG_AC_DATE  = T1.ORG_AC_DATE
	                                                  AND T4.ORG_SLIP_NUM = T1.ORG_SLIP_NUM
	                                                  AND T4.ORG_SLIP_SEQ = T1.ORG_SLIP_SEQ
	            LEFT  JOIN BCM100T   T5  WITH (NOLOCK) ON T5.COMP_CODE    = T4.COMP_CODE
	                                                  AND T5.CUSTOM_CODE  = T4.PAY_CUSTOM_CODE
	            LEFT  JOIN BCM100T   T6 WITH(NOLOCK)   ON T6.COMP_CODE    = T4.COMP_CODE
	                                                  AND T6.CUSTOM_CODE  = T4.BANK_CODE
	                                                  AND T6.CUSTOM_TYPE  = '4'
	
	            LEFT  JOIN BSA100T   T8 WITH(NOLOCK) ON T8.COMP_CODE = T1.COMP_CODE
	                                                AND T8.MAIN_CODE = 'J682'
	                                                AND T8.SUB_CODE  = ISNULL(T4.DOC_STATUS,'10')
	            LEFT  JOIN AFS100T   T9 WITH(NOLOCK) ON T9.COMP_CODE = T1.COMP_CODE
	                                                AND T9.SAVE_CODE = T1.IN_SAVE_CODE
	            LEFT  JOIN (SELECT TOP 1 L.DED_TYPE, K.COMP_CODE, K.AC_DATE, K.SLIP_NUM
	                      FROM AGJ210T K WITH(NOLOCK)
	                           LEFT OUTER JOIN HPB200T L WITH(NOLOCK) ON L.COMP_CODE = K.COMP_CODE AND L.EX_DATE = K.EX_DATE AND L.EX_NUM = K.EX_NUM
	                     WHERE K.COMP_CODE   = @COMP_CODE
	                       AND K.AC_DATE &gt;= @ORG_AC_DATE_FR
	                       AND K.AC_DATE &lt;= @ORG_AC_DATE_TO
	                       AND ISNULL(K.MOD_DIVI, '') = ''
	                   )  T10  ON T10.COMP_CODE = T1.COMP_CODE
	                          AND T10.AC_DATE   = T1.ORG_AC_DATE
	                          AND T10.SLIP_NUM  = T1.ORG_SLIP_NUM
	           LEFT  JOIN BCM100T   T11 WITH(NOLOCK)   ON T11.COMP_CODE   = T1.COMP_CODE
	                                                  AND T11.CUSTOM_CODE = T1.CUST_BANK_CODE
	                                                  AND T11.CUSTOM_TYPE = '4'
	           LEFT  JOIN TB_ES_CARD_MASTER T12 WITH (NOLOCK) ON T12.COMP_CODE = T1.COMP_CODE
	                                                  AND T12.CARD_NO_ENC      = T1.CRDT_NUM
	           LEFT  JOIN ABA500T   T13 WITH (NOLOCK)  ON T13.COMP_CODE        = T12.COMP_CODE
	                                                  AND T13.CRDT_FULL_NUM    = T12.CARD_NO
	           LEFT  JOIN BCM100T   T14 WITH (NOLOCK)  ON T14.COMP_CODE        = T13.COMP_CODE
	                                                  AND T14.CUSTOM_CODE      = T13.BANK_CODE
	                                                  AND T14.CUSTOM_TYPE      = '4'
	           LEFT  JOIN BSA210T   T15 WITH (NOLOCK)  ON T15.COMP_CODE        = T1.COMP_CODE
	                                                  AND T15.TREE_CODE        = T1.DEPT_CODE
</if>
</select>

<insert id="abh220ukrServiceImpl.btnConfirm" parameterType="Map">       --컬럼 추가 완료
INSERT INTO ABH220T  
(                    
    COMP_CODE
   ,CONF_SEND_NUM
   ,ACCNT
   ,ORG_AC_DATE
   ,ORG_SLIP_NUM
   ,ORG_SLIP_SEQ
   ,SEQ
   ,DIV_CODE
   ,PEND_CODE
   ,PAY_CUSTOM_CODE
   ,MONEY_UNIT
   <if test="@foren.Ognl@isNotEmpty(ORG_AMT_I)">
   ,ORG_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(J_AMT_I)">
   ,J_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,JAN_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
   ,INC_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
   ,LOC_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
   ,REAL_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,SEND_J_AMT_I
   </if>
   
   ,IN_SAVE_CODE
   ,BANK_CODE
   ,SET_METH
   ,ACCOUNT_NUM
   ,BANKBOOK_NAME
   ,EXP_DATE
   ,NOTE_NUM
   ,PUB_DATE
   ,CONFIRM_YN
   ,PRE_DATE
   ,REMARK
   ,OUT_SAVE_CODE
   ,OUT_BANK_CODE
   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
   
   ,MODY_YN
   ,TRANS_YN
   ,DED_TYPE
   
   ,CRDT_NUM
   ,CARD_TYPE
   ,EVDE_TYPE
   ,DEPT_CODE
   ,DEPT_NAME
)          
VALUES (             
    #{S_COMP_CODE}
   ,#{CONF_SEND_NUM}
   ,#{ACCNT}
   ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
   ,#{ORG_SLIP_NUM}
   ,#{ORG_SLIP_SEQ}
   ,#{SEQ}
   ,#{DIV_CODE}
   ,#{PEND_CODE}
   ,#{PAY_CUSTOM_CODE}
   ,#{MONEY_UNIT}
   <if test="@foren.Ognl@isNotEmpty(ORG_AMT_I)">
   ,#{ORG_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(J_AMT_I)">
   ,#{J_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,#{JAN_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
   ,#{IN_TAX_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
   ,#{LOCAL_TAX_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
   ,#{REAL_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,#{JAN_AMT_I}
   </if>
   
   ,#{IN_SAVE_CODE}
   ,#{BANK_CODE}
   ,#{SET_METH}
   ,uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT},'')
   ,#{BANKBOOK_NAME}
   ,#{EXP_DATE}
   ,#{NOTE_NUM}
   ,#{PUB_DATE}
   ,'Y'
   ,#{PRE_DATE}
   ,#{REMARK}
   ,#{OUT_SAVE_CODE}
   ,#{OUT_BANK_CODE}
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()    
   
   ,#{MODY_YN}  
   ,#{TRANS_YN}
   ,#{DED_TYPE}
   
   ,#{CRDT_NUM}
   ,#{CARD_TYPE}
   ,#{EVDE_TYPE}
   ,#{DEPT_CODE}
   ,#{DEPT_NAME}
)
                      
</insert>
 
<update id="abh220ukrServiceImpl.btnConfirmCancel" parameterType="Map">
    DELETE FROM ABH220T 
         WHERE COMP_CODE        = #{S_COMP_CODE}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}
      
  
</update>

<insert id="abh220ukrServiceImpl.insertDetail" parameterType="Map">       --컬럼 추가 완료
INSERT INTO ABH220T  
(                    
    COMP_CODE
   ,CONF_SEND_NUM
   ,ACCNT
   ,ORG_AC_DATE
   ,ORG_SLIP_NUM
   ,ORG_SLIP_SEQ
   ,SEQ
   ,DIV_CODE
   ,PEND_CODE
   ,PAY_CUSTOM_CODE
   ,MONEY_UNIT
   <if test="@foren.Ognl@isNotEmpty(ORG_AMT_I)">
   ,ORG_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(J_AMT_I)">
   ,J_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,JAN_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
   ,INC_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
   ,LOC_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
   ,REAL_AMT_I
   </if>
   <if test="@foren.Ognl@isNotEmpty(SEND_J_AMT_I)">
   ,SEND_J_AMT_I
   </if>
   
   ,IN_SAVE_CODE
   ,BANK_CODE
   ,SET_METH
   ,ACCOUNT_NUM
   ,BANKBOOK_NAME
   ,EXP_DATE
   ,NOTE_NUM
   ,PUB_DATE
   ,CONFIRM_YN
   ,PRE_DATE
   ,REMARK
   ,OUT_SAVE_CODE
   ,OUT_BANK_CODE
   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
   
   ,MODY_YN
   ,TRANS_YN
   ,DED_TYPE
   
   ,CRDT_NUM
   ,CARD_TYPE
   ,EVDE_TYPE
   ,DEPT_CODE
   ,DEPT_NAME
   
)          
VALUES (             
    #{S_COMP_CODE}
   ,#{CONF_SEND_NUM}
   ,#{ACCNT}
   ,#{ORG_AC_DATE}
   ,(SELECT ISNULL(MAX(ORG_SLIP_NUM),0) + 1  FROM ABH220T WITH(NOLOCK) WHERE COMP_CODE = #{S_COMP_CODE} AND ORG_AC_DATE = #{ORG_AC_DATE} AND ORG_SLIP_SEQ = '99999')
   ,'99999'
   ,'1'
   ,#{DIV_CODE}
   ,#{PEND_CODE}
   ,#{PAY_CUSTOM_CODE}
   ,#{MONEY_UNIT}
   <if test="@foren.Ognl@isNotEmpty(ORG_AMT_I)">
   ,#{ORG_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(J_AMT_I)">
   ,#{J_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(JAN_AMT_I)">
   ,#{JAN_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(IN_TAX_I)">
   ,#{IN_TAX_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(LOCAL_TAX_I)">
   ,#{LOCAL_TAX_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
   ,#{REAL_AMT_I}
   </if>
   <if test="@foren.Ognl@isNotEmpty(SEND_J_AMT_I)">
   ,#{SEND_J_AMT_I}
   </if>
   
   ,#{IN_SAVE_CODE}
   ,#{BANK_CODE}
   ,#{SET_METH}
   ,uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT},'')
   ,#{BANKBOOK_NAME}
   ,#{EXP_DATE}
   ,#{NOTE_NUM}
   ,#{PUB_DATE}
   ,'Y'
   ,#{PRE_DATE}
   ,#{REMARK}
   ,#{OUT_SAVE_CODE}
   ,#{OUT_BANK_CODE}
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()      
   
   ,'Y'
   ,#{TRANS_YN}
   ,#{DED_TYPE}
   
   ,#{CRDT_NUM}
   ,#{CARD_TYPE}
   ,#{EVDE_TYPE}
   ,#{DEPT_CODE}
   ,#{DEPT_NAME}
)
                      
</insert>
   
<update id="abh220ukrServiceImpl.updateDetail" parameterType="Map"> 

    UPDATE ABH220T
        SET   
            SET_METH        = #{SET_METH} 
           ,TRANS_YN        = #{TRANS_YN} 
           ,SEND_J_AMT_I    = #{SEND_J_AMT_I}
           ,REAL_AMT_I      = #{REAL_AMT_I}
           ,BANK_CODE       = #{BANK_CODE}
           ,PRE_DATE        = #{PRE_DATE}
           ,ACCOUNT_NUM     = uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT},'')
           ,BANKBOOK_NAME   = #{BANKBOOK_NAME}
           ,EXP_DATE        = #{EXP_DATE}
           ,IN_REMARK       = #{IN_REMARK}
           ,UPDATE_DB_USER  = #{S_USER_ID}  
           ,UPDATE_DB_TIME  = GETDATE()     
        
        WHERE COMP_CODE         = #{S_COMP_CODE}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}
          
                   
    
</update>

                
<select id="abh220ukrServiceImpl.selectSubList" parameterType="Map" resultType="rMap">
    SELECT 
         A.CUSTOM_CODE
        , A.BOOK_CODE
        , A.BOOK_NAME
        ,A.BANK_CODE
        ,B.CUSTOM_NAME              AS BANK_NAME
        ,uniLITE.fnCipherDecrypt(A.BANKBOOK_NUM,'') AS BANK_ACCOUNT
        ,A.BANKBOOK_NAME                            
        , A.MAIN_BOOK_YN
    FROM        BCM130T A WITH(NOLOCK) 
    LEFT JOIN   BCM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                      AND B.CUSTOM_CODE = A.BANK_CODE
                                      AND B.CUSTOM_TYPE = '4'
    WHERE A.COMP_CODE = #{S_COMP_CODE}
      AND A.CUSTOM_CODE = #{PAY_CUSTOM_CODE}
    
    ORDER BY B.CUSTOM_NAME

</select>

<insert id="abh220ukrServiceImpl.insertSubDetail" parameterType="Map">      
    INSERT INTO BCM130T(
           COMP_CODE
         , CUSTOM_CODE
         , BOOK_CODE
         , BOOK_NAME
         , BANK_CODE
         , BANKBOOK_NUM
         , BANKBOOK_NAME
         , MAIN_BOOK_YN
         , INSERT_DB_USER
         , INSERT_DB_TIME
         , UPDATE_DB_USER
         , UPDATE_DB_TIME
    )
    VALUES
    (
           #{S_COMP_CODE}
         , #{CUSTOM_CODE} 
         , #{BOOK_CODE}
         , #{BOOK_NAME}
         , #{BANK_CODE}
         , unilite.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
         , #{BANKBOOK_NAME}
         , #{MAIN_BOOK_YN}
         , #{S_USER_ID}
         , GETDATE()
         , #{S_USER_ID}
         , GETDATE()
     )
</insert>
    
<update id="abh220ukrServiceImpl.updateSubDetail" parameterType="Map">  
    UPDATE BCM130T
        SET BANK_CODE    = #{BANK_CODE}    
          , BANKBOOK_NUM = #{BANK_ACCOUNT} 
          , BANKBOOK_NAME= #{BANKBOOK_NAME}
          , BOOK_NAME    = #{BOOK_NAME} 
          , MAIN_BOOK_YN = #{MAIN_BOOK_YN}
     WHERE COMP_CODE    = #{S_COMP_CODE}
       AND CUSTOM_CODE  = #{CUSTOM_CODE}
       AND BOOK_CODE   = #{BOOK_CODE}
</update>

<update id="abh220ukrServiceImpl.deleteSubDetail" parameterType="Map">
    DELETE FROM BCM130T
    WHERE COMP_CODE     = #{S_COMP_CODE}
      AND CUSTOM_CODE   = #{CUSTOM_CODE}
      AND BOOK_CODE    = #{BOOK_CODE}
</update>


<update id="abh220ukrServiceImpl.updateHold" parameterType="Map">   
    UPDATE ABH220T
        SET   
            CONFIRM_YN      = #{CONFIRM_YN}  
           ,UPDATE_DB_USER  = #{S_USER_ID}  
           ,UPDATE_DB_TIME  = GETDATE()     
        
        WHERE COMP_CODE         = #{S_COMP_CODE}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}
</update>

<insert id="abh220ukrServiceImpl.insertRequestLogDetail" parameterType="Map">     
    INSERT INTO L_TB_ES_APRV
    (
        KEY_VALUE
       ,OPR_FLAG       
       ,COMP_CODE      
       ,USER_ID         
       ,ACCNT  
       ,ORG_AC_DATE  
       ,ORG_SLIP_NUM  
       ,ORG_SLIP_SEQ  
       ,SEQ  
       ,APRV_COMP_CODE 
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
       ,UPDATE_DB_USER
       ,UPDATE_DB_TIME
       
       ,TEMPC_01
       ,TEMPN_01
    )
    VALUES
    (
        #{KEY_VALUE}
       ,#{OPR_FLAG}
       ,#{S_COMP_CODE}
       ,#{S_PERSON_NUMB}
       ,#{ACCNT}       
       , SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
       ,#{SEQ}         
       ,#{S_COMP_CODE}
       ,#{S_PERSON_NUMB}
       ,GETDATE()
       ,#{S_PERSON_NUMB}
       ,GETDATE()
       
       ,#{EX_DATE}
       ,#{EX_NUM}
    )

</insert>     
        
<update id="uspJoinsAccntAprvCheckAbh220ukr" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AprvCheck_JS(
    
        #{COMP_CODE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{APRV_TYPE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{SLIP_TYPE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{USER_ID,       mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,     mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
    
    
--SLIP_TYPE 값 관련
--법인카드-10
--세금계산서,전자세금계산서-11
--실물증빙-12
--원천세-13
--원고료-14
--인세-15
--가지급신청-16
--채권이관-17
--구매요청-18
--정비일지-19
</update>
    
<update id="uspJoinsAccntAprvBufAbh220ukr" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AprvBuffer_JS(
    
        #{COMP_CODE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{APRV_TYPE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{USER_ID,       mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{GW_KEY_VALUE,  mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,     mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>
<update id="uspJoinsAccntAprvMainAbh220ukr" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AprvMain_JS(
    
        #{COMP_CODE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{APRV_TYPE,     mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{USER_ID,       mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,     mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>



<insert id="abh220ukrServiceImpl.insertLogDetailCms" parameterType="Map">     
    INSERT INTO L_ABH220T
    (
        KEY_VALUE
       ,SEQ      
       ,COMP_CODE         
       ,ACCNT  
       ,ORG_AC_DATE  
       ,ORG_SLIP_NUM  
       ,ORG_SLIP_SEQ  
	<if test="@foren.Ognl@isNotEmpty(RCPT_STATE_NUM)">  
       ,RCPT_STATE_NUM
	</if>
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
    )
    VALUES
    (
        #{KEY_VALUE}
       ,#{SEQ}         
       ,#{S_COMP_CODE}
       ,#{ACCNT}       
       ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
	<if test="@foren.Ognl@isNotEmpty(RCPT_STATE_NUM)">  
       ,#{RCPT_STATE_NUM}
	</if>
       ,#{S_USER_ID}
       ,GETDATE()
    )

</insert>     
        
<insert id="abh220ukrServiceImpl.insertLogDetailAutoSlip" parameterType="Map">      
    INSERT INTO L_ABH221T
           ( KEY_VALUE
            ,COMP_CODE
            ,ACCNT
            ,ORG_AC_DATE
            ,ORG_SLIP_NUM
            ,ORG_SLIP_SEQ
            ,SEQ
            ,WORK_DATE
            ,EX_DATE
            ,EX_NUM
            ,INSERT_DB_USER
            ,INSERT_DB_TIME       
           )
     VALUES
     (       #{KEY_VALUE}
            ,#{S_COMP_CODE}
            ,#{ACCNT}
            ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
            ,#{ORG_SLIP_NUM}
            ,#{ORG_SLIP_SEQ}
            ,#{SEQ}
            ,CONVERT(VARCHAR, GETDATE(), 112)  
            ,#{EX_DATE}
            ,#{EX_NUM}
            ,#{S_USER_ID}
            ,GETDATE()
     )
</insert> 
        
    <update id="spUspAccntAbh220ukrFnBanknameQuery" parameterType="Map" statementType="CALLABLE">
        {call USP_ACCNT_ABH220UKR_fnBankNameQuery (
            #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
            #{RTN_VALUE,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},
            #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
    </update>

    <!-- Header List -->
    <select id="abh220ukrServiceImpl.getTempHeader" parameterType="Map" resultType="rMap">
    /* abh220ukrServiceImpl.getTempHeader */
    SELECT  *
      FROM  L_ERP_HEADER WITH (NOLOCK)
     WHERE  KEY_VALUE = #{KEY_VALUE}
    </select>

    <select id="abh220ukrServiceImpl.getTempBody" parameterType="Map" resultType="rMap">
    /* abh220ukrServiceImpl.getTempBody */ 
        SELECT * 
          FROM L_ERP_BODY WITH(NOLOCK)
         WHERE KEY_VALUE = #{KEY_VALUE} 
    </select>

    <insert id="abh220ukrServiceImpl.insTempToHeader" parameterType="Map">
    /* abh220ukrServiceImpl.insTempToHeader */ 
    INSERT INTO BRANCH.ERP_HEADER (
         JUMIN_BIZ_NO
        ,USE_BASE
        ,TR_CODE
        ,TR_KEY
        ,REQUEST_DATE
        ,BUKRS
        ,REQUEST_TIME
        ,EXEC_DATE
        ,STATUS
        ,STATUS_DESC
        ,OUT_BANKCODE
        ,OUT_CURRCODE
        ,OUT_ACCTNO
        ,TOTAL_CNT
        ,TOTAL_AMT
        ,SUCCESS_CNT
        ,SUCCESS_AMT
        ,ERROR_CNT
        ,ERROR_AMT
        ,ERPIF_START_DATE
        ,ERPIF_START_TIME
        ,ERPIF_END_DATE
        ,ERPIF_END_TIME
        ,ERPIF_RES_CODE
        ,ERPIF_RES_DESC
        ,CREATOR
        ,CREATOR_NM
        ,OPERATOR
        ,OPERATOR_NM
        ,APPROVAL_YN
        ,FIELD_01
        ,FIELD_02
        ,FIELD_03
        ,FIELD_04
        ,FIELD_05
        ,FIELD_06
        ,FIELD_07
        ,FIELD_08
        ,FIELD_09
        ,FIELD_10
        ,SEND_NUM
        ,COMP_CODE
        ,JOB_YN
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,OUT_BANKCODE
            ,OUT_CURRCODE
            ,OUT_ACCTNO
            ,TOTAL_CNT
            ,TOTAL_AMT
            ,SUCCESS_CNT
            ,SUCCESS_AMT
            ,ERROR_CNT
            ,ERROR_AMT
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,APPROVAL_YN
            ,FIELD_01
            ,FIELD_02
            ,FIELD_03
            ,FIELD_04
            ,FIELD_05
            ,FIELD_06
            ,FIELD_07
            ,FIELD_08
            ,FIELD_09
            ,FIELD_10
            ,SEND_NUM
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_HEADER WITH (NOLOCK)
         WHERE KEY_VALUE    = #{KEY_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert>

    <update id="abh220ukrServiceImpl.updtTempToBody" parameterType="Map">  
    /* abh220ukrServiceImpl.updtTempToBody */
    UPDATE L_ERP_BODY SET
        FIELD_002      = #{FIELD_002}
    WHERE JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
      AND USE_BASE     = #{USE_BASE}
      AND TR_CODE      = #{TR_CODE}
      AND TR_KEY       = #{TR_KEY}
      AND SEQ          = #{SEQ}
      AND REQUEST_DATE = #{REQUEST_DATE}
    </update>
            
    <insert id="abh220ukrServiceImpl.insTempToBody" parameterType="Map">   
    /* abh220ukrServiceImpl.insTempToBody */   
    INSERT INTO BRANCH.ERP_BODY (
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN     
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_BODY WITH (NOLOCK)
         WHERE KEY_VALUE    = #{RTN_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND SEQ          = #{SEQ}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert> 

<update id="spUspAccntAbh220ukrFnBankNameresult" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update> 
<update id="spUspAccntAbh220ukrFnBankNameresult2" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult2 (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update> 
<update id="spUspAccntAutoSlip69" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AutoSlip69 (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{IN_EX_DATE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAutoSlip69Cancel" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AutoSlip69Cancel (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>    

<update id="abh220ukrServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
    {call SP_GetAutoNumComp (
        #{COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{DIV_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{TABLE_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{PREFIX, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{BASIS_DATE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{AUTO_TYPE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_NUMBER, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}

</update>


<insert id="abh220ukrServiceImpl.insertMasterAbh200Save" parameterType="Map">     
    INSERT INTO ABH200T  
(                    
     COMP_CODE
    ,SEND_NUM
    ,SEND_DATE
    ,PAY_METH 
    ,PAY_CODE 
    ,EX_DATE
    ,EX_NUM
   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
)          
VALUES (             
    #{S_COMP_CODE}
   ,#{KEY_NUMBER} 
   ,CONVERT(VARCHAR, GETDATE(), 112)  
   ,#{PAY_METH} 
   ,#{PAY_CODE} 
   ,#{EX_DATE}
   ,#{EX_NUM}
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()      
)
</insert>

<insert id="abh220ukrServiceImpl.insertDetailsAbh210Save" parameterType="Map">     
INSERT INTO ABH210T
    (
        COMP_CODE
       ,SEND_NUM
       ,ACCNT
       ,ORG_AC_DATE
       ,ORG_SLIP_NUM
       ,ORG_SLIP_SEQ
       ,SEQ
       ,DIV_CODE
       ,PEND_CODE
       ,PAY_CUSTOM_CODE
       <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
       ,J_AMT_I
       </if>
       <if test="@foren.Ognl@isNotEmpty(INC_AMT_I)">
       ,INC_AMT_I
       </if>
       <if test="@foren.Ognl@isNotEmpty(LOC_AMT_I)">
       ,LOC_AMT_I
       </if>
       ,PURCHASE_CARD_NUM
       ,EXP_DATE
       ,BANK_CODE
       ,ACCOUNT_NUM
       ,BANKBOOK_NAME
       ,AGREE_YN
       ,EX_DATE
       ,EX_NUM
       ,IN_REMARK
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
       ,UPDATE_DB_USER
       ,UPDATE_DB_TIME

    )
VALUES
    (
        #{S_COMP_CODE}
       ,#{SEND_NUM}
       ,#{ACCNT}
       ,SUBSTRING(#{ORG_AC_DATE}, 1, 4) + SUBSTRING(#{ORG_AC_DATE}, 6, 2)+ SUBSTRING(#{ORG_AC_DATE}, 9, 2)
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
       ,#{SEQ}
       ,#{DIV_CODE}
       ,#{PEND_CODE}
       ,#{PAY_CUSTOM_CODE}
       <if test="@foren.Ognl@isNotEmpty(REAL_AMT_I)">
       ,#{REAL_AMT_I}
       </if>
       <if test="@foren.Ognl@isNotEmpty(INC_AMT_I)">
       ,#{INC_AMT_I}
       </if>
       <if test="@foren.Ognl@isNotEmpty(LOC_AMT_I)">
       ,#{LOC_AMT_I}
       </if>
       ,#{PURCHASE_CARD_NUM}
       ,#{EXP_DATE}
       ,#{BANK_CODE}
       ,unilite.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
       ,#{BANKBOOK_NAME}
       ,'N'
       ,#{EX_DATE}
       ,#{EX_NUM}
       ,#{IN_REMARK}
       ,#{S_USER_ID}
       ,GETDATE()
       ,#{S_USER_ID}
       ,GETDATE()
           
           
    )
                      
</insert>

</mapper>