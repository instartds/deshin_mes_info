<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="acm100ukrServiceImpl">
	
     <select id="acm100ukrServiceImpl.getCashAccnt" parameterType="Map" resultType="rMap">
        SELECT ACCNT             
          FROM ABA400T WITH (NOLOCK) 
         WHERE COMP_CODE  = #{S_COMP_CODE}
           AND ACCNT_SPEC = N'A' 
           AND SLIP_SW    = N'Y'  
           AND GROUP_YN   = N'N'  
     </select>
     	
	<select id="acm100ukrServiceImpl.selectOption" parameterType="Map" resultType="rMap">
		/*acm100ukrServiceImpl.selectOption*/
	   SELECT  MAX(DIV_CHANGE_YN)    AS DIV_CHANGE_YN
              , MAX(DIV_CODE_USE)     AS DIV_CODE_USE
              , MAX(REMARK_COPY)      AS REMARK_COPY
              , MAX(AMT_ENTER)        AS AMT_ENTER
        FROM    (
                SELECT  CASE WHEN SUB_CODE = '42' THEN UPPER(ISNULL(REF_CODE1, 'Y')) ELSE '' END    AS DIV_CHANGE_YN      --귀속부서 입력시 사업장 자동 변경
                      , CASE WHEN SUB_CODE = '43' THEN UPPER(ISNULL(REF_CODE1, 'Y')) ELSE '' END    AS DIV_CODE_USE       --사업장 입력조건 사용
                      , CASE WHEN SUB_CODE = '44' THEN UPPER(ISNULL(REF_CODE1, 'Y')) ELSE '' END    AS REMARK_COPY        --전표_적요 copy방식_적요 빈 값 상태에서 Enter칠 때 copy
                      , CASE WHEN SUB_CODE = '45' THEN UPPER(ISNULL(REF_CODE1, 'Y')) ELSE '' END    AS AMT_ENTER          --전표_금액이 0이면 마지막 행에서 Enter안넘어감(부가세 제외)
                FROM    BSA100T WITH (NOLOCK)
                WHERE   COMP_CODE   = #{S_COMP_CODE}
                AND     MAIN_CODE   = N'A165'
                AND     SUB_CODE   IN ('42', '43', '44', '45')
            ) T
	</select>
	<select id="acm100ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">		
		/* acm100ukrServiceImpl.selectList */
		 SELECT A.AC_DATE                                    OLD_AC_DATE 
		     , A.SLIP_NUM                                   OLD_SLIP_NUM 
		     , A.SLIP_SEQ                                   OLD_SLIP_SEQ
		     , A.AC_DATE 
		     , SUBSTRING(A.AC_DATE,7,2)                     AC_DAY
		     , A.SLIP_NUM 
		     , A.SLIP_SEQ
		     , A.SLIP_DIVI
		     , A.ACCNT
		     , ISNULL(C1.ACCNT_NAME,'')                     ACCNT_NAME
		     , ISNULL(A.CUSTOM_CODE,'')                     CUSTOM_CODE
		     , CASE WHEN ISNULL(A.CUSTOM_NAME,'') = '' 
		            THEN ISNULL(C2.CUSTOM_NAME, '')
		            ELSE ISNULL(A.CUSTOM_NAME , '') 
		        END                                         CUSTOM_NAME
		     , CASE A.DR_CR WHEN '1' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END DR_AMT_I
     		 , CASE A.DR_CR WHEN '2' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END CR_AMT_I     
		     , ISNULL(A.AMT_I, 0.0)                         AMT_I
		     , ISNULL(A.REMARK,'')                          REMARK
		     , ISNULL(M1.CODE_NAME,'')                      PROOF_KIND_NM
		     , ISNULL(A.DEPT_NAME,'')                       DEPT_NAME
		     , ISNULL(A.DIV_CODE,'')                        DIV_CODE
		    
		     , ISNULL(A.DEPT_CODE,'')                       DEPT_CODE
		     , ISNULL(A.DR_CR,'')                           DR_CR
		     , ISNULL(A.P_ACCNT,'')                         P_ACCNT
		     , ISNULL(A.PROOF_KIND,'')                      PROOF_KIND
		     , ISNULL(A.MONEY_UNIT,'')                      MONEY_UNIT
		     , ISNULL(A.EXCHG_RATE_O,0.0)                   EXCHG_RATE_O
		     , ISNULL(A.FOR_AMT_I,0.0)                      FOR_AMT_I
		     , ISNULL(A.IN_DIV_CODE,'')                     IN_DIV_CODE
		     , ISNULL(A.IN_DEPT_CODE,'')                    IN_DEPT_CODE
		     , ISNULL(A.IN_DEPT_NAME,'')                    IN_DEPT_NAME
		     , ISNULL(A.BILL_DIV_CODE,'')                   BILL_DIV_CODE
		     , ISNULL(A.AC_CODE1,'')                        AC_CODE1,         ISNULL(A.AC_CODE2,'')        AC_CODE2
		     , ISNULL(A.AC_CODE3,'')                        AC_CODE3,         ISNULL(A.AC_CODE4,'')        AC_CODE4
		     , ISNULL(A.AC_CODE5,'')                        AC_CODE5,         ISNULL(A.AC_CODE6,'')        AC_CODE6
		     , ISNULL(A.AC_DATA1,'')                        AC_DATA1,         ISNULL(A.AC_DATA2,'')        AC_DATA2
		     , ISNULL(A.AC_DATA3,'')                        AC_DATA3,         ISNULL(A.AC_DATA4,'')        AC_DATA4
		     , ISNULL(A.AC_DATA5,'')                        AC_DATA5,         ISNULL(A.AC_DATA6,'')        AC_DATA6
		     , ISNULL(A.AC_DATA_NAME1,'')                   AC_DATA_NAME1,    ISNULL(A.AC_DATA_NAME2,'')   AC_DATA_NAME2
		     , ISNULL(A.AC_DATA_NAME3,'')                   AC_DATA_NAME3,    ISNULL(A.AC_DATA_NAME4,'')   AC_DATA_NAME4
		     , ISNULL(A.AC_DATA_NAME5,'')                   AC_DATA_NAME5,    ISNULL(A.AC_DATA_NAME6,'')   AC_DATA_NAME6
		     , ISNULL(A.BOOK_CODE1,'')                      BOOK_CODE1,       ISNULL(A.BOOK_CODE2,'')      BOOK_CODE2
		     , ISNULL(A.BOOK_DATA1,'')                      BOOK_DATA1,       ISNULL(A.BOOK_DATA2,'')      BOOK_DATA2
		     , ISNULL(A.BOOK_DATA_NAME1,'')                 BOOK_DATA_NAME1,  ISNULL(A.BOOK_DATA_NAME2,'') BOOK_DATA_NAME2
		     , ISNULL(A.ACCNT_SPEC,'')                      ACCNT_SPEC,       ISNULL(A.SPEC_DIVI,'')       SPEC_DIVI
		     , ISNULL(A.PROFIT_DIVI,'')                     PROFIT_DIVI,      ISNULL(A.JAN_DIVI,'')        JAN_DIVI
		     , ISNULL(A.PEND_YN,'N')                        PEND_YN,          ISNULL(A.PEND_CODE,'')       PEND_CODE
		     , ISNULL(A.PEND_DATA_CODE,'')                  PEND_DATA_CODE,   ISNULL(A.BUDG_YN,'N')        BUDG_YN
		     , ISNULL(A.BUDGCTL_YN,'N')                     BUDGCTL_YN,       ISNULL(A.FOR_YN,'N')         FOR_YN
		     , ISNULL(A.POSTIT_YN,'')                       POSTIT_YN,        ISNULL(A.POSTIT,'')          POSTIT
		     , ISNULL(A.POSTIT_USER_ID,'')                  POSTIT_USER_ID ,  ISNULL(A.INPUT_PATH,'')      INPUT_PATH
		     , ISNULL(A.INPUT_DIVI,'')                      INPUT_DIVI ,      ISNULL(A.AUTO_SLIP_NUM,'')   AUTO_SLIP_NUM
		     , ISNULL(A.CLOSE_FG,'')                        CLOSE_FG ,        ISNULL(A.INPUT_DATE,'')      INPUT_DATE
		     , ISNULL(A.INPUT_USER_ID,'')                   INPUT_USER_ID,    ISNULL(A.CHARGE_CODE,'')     CHARGE_CODE
		     , ISNULL(M2.CODE_NAME,'')     CHARGE_NAME
		     , ISNULL(A.CREDIT_CODE,'')                     CREDIT_CODE,      ISNULL(A.REASON_CODE,'')     REASON_CODE
		     , uniLITE.fnCipherDecrypt(A.CREDIT_NUM, '')    CREDIT_NUM_EXPOS
		     , ISNULL(A.CREDIT_NUM, '')     CREDIT_NUM
		     , ISNULL(A.AP_DATE,'')         AP_DATE
		     , ISNULL(A.AP_USER_ID,'')                      AP_USER_ID,       ISNULL(A.EX_DATE,'')         EX_DATE
		     , ISNULL(A.EX_NUM,0)                           EX_NUM,           ISNULL(A.EX_SEQ,0)           EX_SEQ
		    
		     , ISNULL(N1.AC_NAME ,'' )                      AC_NAME1 ,        ISNULL(N2.AC_NAME ,'' )      AC_NAME2
		     , ISNULL(N3.AC_NAME ,'' )                      AC_NAME3 ,        ISNULL(N4.AC_NAME ,'' )      AC_NAME4
		     , ISNULL(N5.AC_NAME ,'' )                      AC_NAME5 ,        ISNULL(N6.AC_NAME ,'' )      AC_NAME6
		     , ISNULL(A.AC_CTL1  ,'N')                      AC_CTL1  ,        ISNULL(A.AC_CTL2  ,'N')      AC_CTL2
		     , ISNULL(A.AC_CTL3  ,'N')                      AC_CTL3  ,        ISNULL(A.AC_CTL4  ,'N')      AC_CTL4
		     , ISNULL(A.AC_CTL5  ,'N')                      AC_CTL5  ,        ISNULL(A.AC_CTL6  ,'N')      AC_CTL6
		     , ISNULL(N1.DT_TYPE ,0  )                      AC_TYPE1 ,        ISNULL(N2.DT_TYPE ,0  )      AC_TYPE2
		     , ISNULL(N3.DT_TYPE ,0  )                      AC_TYPE3 ,        ISNULL(N4.DT_TYPE ,0  )      AC_TYPE4
		     , ISNULL(N5.DT_TYPE ,0  )                      AC_TYPE5 ,        ISNULL(N6.DT_TYPE ,0  )      AC_TYPE6
		     , ISNULL(N1.DT_LEN  ,0  )                      AC_LEN1  ,        ISNULL(N2.DT_LEN  ,0  )      AC_LEN2
		     , ISNULL(N3.DT_LEN  ,0  )                      AC_LEN3  ,        ISNULL(N4.DT_LEN  ,0  )      AC_LEN4
		     , ISNULL(N5.DT_LEN  ,0  )                      AC_LEN5  ,        ISNULL(N6.DT_LEN  ,0  )      AC_LEN6
		     , ISNULL(N1.DT_POPUP,'N')                      AC_POPUP1,        ISNULL(N2.DT_POPUP,'N')      AC_POPUP2
		     , ISNULL(N3.DT_POPUP,'N')                      AC_POPUP3,        ISNULL(N4.DT_POPUP,'N')      AC_POPUP4
		     , ISNULL(N5.DT_POPUP,'N')                      AC_POPUP5,        ISNULL(N6.DT_POPUP,'N')      AC_POPUP6
		     , A.COMP_CODE
		     , ISNULL(N1.DT_FMT,'0')                        AC_FORMAT1,       ISNULL(N2.DT_FMT,'0')    AC_FORMAT2
		     , ISNULL(N3.DT_FMT,'0')                        AC_FORMAT3,       ISNULL(N4.DT_FMT,'0')    AC_FORMAT4
		     , ISNULL(N5.DT_FMT,'0')                        AC_FORMAT5,       ISNULL(N6.DT_FMT,'0')    AC_FORMAT6
		     , ISNULL(A.ASST_SUPPLY_AMT_I, 0.0)			   ASST_SUPPLY_AMT_I
             , ISNULL(A.ASST_TAX_AMT_I, 0.0)			   	   ASST_TAX_AMT_I
             , A.ASST_DIVI
		  FROM             AGJ210T  AS A  WITH (NOLOCK)
		        LEFT  JOIN ABA400T  AS C1 WITH (NOLOCK) ON  C1.COMP_CODE   = A.COMP_CODE
		                                                AND C1.ACCNT       = A.ACCNT
		        LEFT  JOIN BCM100T  AS C2 WITH (NOLOCK) ON  C2.COMP_CODE   = A.COMP_CODE
		                                                AND C2.CUSTOM_CODE = A.CUSTOM_CODE
		        LEFT  JOIN BSA100T  AS M1 WITH (NOLOCK) ON  M1.COMP_CODE   = A.COMP_CODE
		                                                AND M1.MAIN_CODE   = 'A022' 
		                                                AND M1.SUB_CODE    = A.PROOF_KIND
		        LEFT  JOIN BSA100T AS M2 WITH (NOLOCK)   ON  M2.COMP_CODE   = A.COMP_CODE
		                                                AND M2.MAIN_CODE   = N'A009' 
		                                                AND M2.SUB_CODE    = A.CHARGE_CODE
		        LEFT  JOIN ABA200T  AS N1 WITH (NOLOCK) ON  N1.COMP_CODE   = A.COMP_CODE
		                                                AND N1.AC_CD       = A.AC_CODE1
		        LEFT  JOIN ABA200T  AS N2 WITH (NOLOCK) ON  N2.COMP_CODE   = A.COMP_CODE
		                                                AND N2.AC_CD       = A.AC_CODE2
		        LEFT  JOIN ABA200T  AS N3 WITH (NOLOCK) ON  N3.COMP_CODE   = A.COMP_CODE
		                                                AND N3.AC_CD       = A.AC_CODE3
		        LEFT  JOIN ABA200T  AS N4 WITH (NOLOCK) ON  N4.COMP_CODE   = A.COMP_CODE
		                                                AND N4.AC_CD       = A.AC_CODE4
		        LEFT  JOIN ABA200T  AS N5 WITH (NOLOCK) ON  N5.COMP_CODE   = A.COMP_CODE
		                                                AND N5.AC_CD       = A.AC_CODE5
		        LEFT  JOIN ABA200T  AS N6 WITH (NOLOCK) ON  N6.COMP_CODE   = A.COMP_CODE
		                                                AND N6.AC_CD       = A.AC_CODE6
		 WHERE A.COMP_CODE       = #{S_COMP_CODE}
		   <if test="@foren.Ognl@isNotEmpty(AC_DATE_FR) &amp;&amp; @foren.Ognl@isNotEmpty(AC_DATE_TO)">
		   AND A.AC_DATE       &gt;= #{AC_DATE_FR}
		   AND A.AC_DATE       &lt;= #{AC_DATE_TO}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(AC_DATE)">
		   AND A.AC_DATE       = #{AC_DATE}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(SLIP_NUM)">
		   AND A.SLIP_NUM        = #{SLIP_NUM}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(INPUT_PATH)">
		   AND A.INPUT_PATH        = #{INPUT_PATH}
		   </if>
		   <if test="AUTHORITY == &quot;2&quot;">
		 	<if test="@foren.Ognl@isNotEmpty(IN_DEPT_CODE) and @foren.Ognl@isNotEmpty(CHARGE_CODE)">
		 	 	AND (A.IN_DEPT_CODE = #{IN_DEPT_CODE} 
		        OR  A.CHARGE_CODE  = #{CHARGE_CODE} )
		 	</if>
		 	<if test="@foren.Ognl@isEmpty(IN_DEPT_CODE)">
			 	<if test="@foren.Ognl@isNotEmpty(CHARGE_CODE)">		 	
			      AND   A.CHARGE_CODE  = #{CHARGE_CODE} 
			 	</if>
		 	</if>
		   </if>
		   AND ISNULL(A.CASH_NUM, 0) = 0
		   AND ISNULL(A.MOD_DIVI,'') = ''
		 ORDER BY A.AC_DATE, A.SLIP_NUM, A.SLIP_SEQ
	</select>
	<select id="acm100ukrServiceImpl.selectSalesList" parameterType="Map" resultType="rMap">
		--acm100ukrServiceImpl.selectSalesList
		DECLARE	 @INPUT_PATH     NVARCHAR(02)
		
		SET @INPUT_PATH     = #{INPUT_PATH}
		
	SELECT SUBSTRING(A.INOUT_DATE,7,2)                             AC_DAY
	     , A.AUTO_NUM
	     , CASE WHEN A.SLIP_NUM IS NULL THEN 'N' ELSE 'Y' END SLIP_YN
	     , A.INOUT_DATE AS  PUB_DATE
	     , A.REMARK
		 , A.IN_AMT_I
		 , A.OUT_AMT_I
		 , A.JAN_AMT_I
		 , A.CUSTOM_CODE
		 , A.CUSTOM_NAME
		 --, D.CUSTOM_NAME
		 , A.P_ACCNT    AS ACCNT
		 , C.ACCNT_NAME AS ACCNT_NAME
		 , A.DEPT_CODE
		 , E.TREE_NAME AS DEPT_NAME
         , A.DIV_CODE		 
		 , B.SAVE_CODE
		 , B.SAVE_NAME
		 , uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT,'') AS ACCOUNT_NUM_EXPOS
         , A.BANK_ACCOUNT                              AS ACCOUNT_NUM
         , uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT,'') AS ACCOUNT_NUM_MASK
		 , B.BANK_CODE
		 , G.CUSTOM_NAME AS BANK_NAME	 		 		 		 		 
	     , A.INOUT_TIME	
		 , (A.IN_AMT_I + A.OUT_AMT_I)  AS SUPPLY_AMT_I
	     , 0                           AS TAX_AMT_I		 
		 , '' AS PROOF_KIND_NM
		 , '' AS PROOF_KIND		 
		 , A.AC_DATE
		 , A.SLIP_NUM
		 , A.SLIP_SEQ
		 , CASE WHEN A.IN_AMT_I  = 0 THEN '1'
		        WHEN A.OUT_AMT_I = 0 THEN '2'
		        ELSE '1'
		     END AS SALE_DIVI
		 , ''  AS REASON_CODE		 
		 , A.DIV_CODE  AS BILL_DIV_CODE
         , A.AC_DATE   AS OLD_AC_DATE
	     , A.SLIP_NUM  AS OLD_SLIP_NUM
	     , A.INOUT_DATE AS OLD_PUB_DATE
	     , A.DEPT_CODE AS IN_DEPT_CODE
	     , E.TREE_NAME AS IN_DEPT_NAME
	     , A.DIV_CODE  AS IN_DIV_CODE
	  FROM ACM100T A
           INNER JOIN AFS100T B WITH (NOLOCK) ON A.COMP_CODE     = B.COMP_CODE
	                                         AND REPLACE(uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT,''),'-','')  = REPLACE(uniLITE.fnCipherDecrypt(B.BANK_ACCOUNT,''),'-','')
	       LEFT OUTER JOIN ABA400T C WITH (NOLOCK) ON A.COMP_CODE    = C.COMP_CODE
		                                          AND A.P_ACCNT      = C.ACCNT
		   LEFT OUTER JOIN BCM100T D WITH (NOLOCK) ON A.COMP_CODE    = D.COMP_CODE
		                                          AND A.CUSTOM_CODE  = D.CUSTOM_CODE
		   LEFT OUTER JOIN BSA210T E WITH (NOLOCK) ON A.COMP_CODE    = E.COMP_CODE
		                                          AND A.DEPT_CODE    = E.TREE_CODE
		   LEFT OUTER JOIN BOR120T F WITH (NOLOCK) ON A.COMP_CODE    = F.COMP_CODE
		                                          AND A.DIV_CODE     = F.DIV_CODE
	       LEFT OUTER JOIN BCM100T G WITH (NOLOCK) ON B.COMP_CODE    = G.COMP_CODE
	                                              AND B.BANK_CODE    = G.CUSTOM_CODE
	 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.INOUT_DATE       &gt;= #{AP_DATE_FR}
		   AND A.INOUT_DATE       &lt;= #{AP_DATE_TO}
		   
		   <if test="@foren.Ognl@isNotEmpty(ACCOUNT_NUM)">	
		   AND (B.SAVE_NAME LIKE '%' + #{ACCOUNT_NUM} + '%' OR uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT,'') LIKE '%' + #{ACCOUNT_NUM})
		   </if>
		<if test="SLIP_YN == &quot;Y&quot;">
			AND A.SLIP_NUM IS NOT NULL
		</if>
		<if test="SLIP_YN == &quot;N&quot;">
			AND A.SLIP_NUM IS NULL
		</if>
	
	
	 ORDER BY A.INOUT_DATE, A.INOUT_TIME, A.BANK_ACCOUNT


	</select>
	
	<select id="acm100ukrServiceImpl.fnGetAutoMethod" parameterType="Map" resultType="rMap">
		/*  전표생성 */
		DECLARE  @BudgProBase    NVARCHAR(01)
	
		
		--회계업무설정에서 사용하는 예산프로세스 가져오기
		SELECT @BudgProBase = BUDG_PRO_BASE
		  FROM ABA100T WITH (NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		
		SET @BudgProBase = ISNULL(@BudgProBase, '1')
		
		--계정정보 가져오기
		SELECT
			   SLIP_DIVI
			 , ACCNT
		     , ISNULL(ACCNT_NAME  , '')     AS ACCNT_NAME
		     , ISNULL(AC_FULL_NAME, '')     AS AC_FULL_NAME
		     , ISNULL(ACCNT_NAME2 , '')     AS ACCNT_NAME2
		     , ISNULL(ACCNT_NAME3 , '')     AS ACCNT_NAME3
		     , ISNULL(AC_CODE1    , '')     AS AC_CODE1
		     , ISNULL(AC_CODE2    , '')     AS AC_CODE2
		     , ISNULL(AC_CODE3    , '')     AS AC_CODE3
		     , ISNULL(AC_CODE4    , '')     AS AC_CODE4
		     , ISNULL(AC_CODE5    , '')     AS AC_CODE5
		     , ISNULL(AC_CODE6    , '')     AS AC_CODE6
		     , ISNULL(C1.AC_NAME  , '')     AS AC_NAME1
		     , ISNULL(C2.AC_NAME  , '')     AS AC_NAME2
		     , ISNULL(C3.AC_NAME  , '')     AS AC_NAME3
		     , ISNULL(C4.AC_NAME  , '')     AS AC_NAME4
		     , ISNULL(C5.AC_NAME  , '')     AS AC_NAME5
		     , ISNULL(C6.AC_NAME  , '')     AS AC_NAME6
		     , ISNULL(DR_CTL1     ,'N')     AS DR_CTL1
		     , ISNULL(DR_CTL2     ,'N')     AS DR_CTL2
		     , ISNULL(DR_CTL3     ,'N')     AS DR_CTL3
		     , ISNULL(DR_CTL4     ,'N')     AS DR_CTL4
		     , ISNULL(DR_CTL5     ,'N')     AS DR_CTL5
		     , ISNULL(DR_CTL6     ,'N')     AS DR_CTL6
		     , ISNULL(CR_CTL1     ,'N')     AS CR_CTL1
		     , ISNULL(CR_CTL2     ,'N')     AS CR_CTL2
		     , ISNULL(CR_CTL3     ,'N')     AS CR_CTL3
		     , ISNULL(CR_CTL4     ,'N')     AS CR_CTL4
		     , ISNULL(CR_CTL5     ,'N')     AS CR_CTL5
		     , ISNULL(CR_CTL6     ,'N')     AS CR_CTL6
		     , ISNULL(BOOK_CODE1  , '')     AS BOOK_CODE1
		     , ISNULL(BOOK_CODE2  , '')     AS BOOK_CODE2
		     , ISNULL(D1.AC_NAME  , '')     AS BOOK_NAME1
		     , ISNULL(D2.AC_NAME  , '')     AS BOOK_NAME2
		     , ISNULL(ACCNT_SPEC  , '')     AS ACCNT_SPEC
		     , ISNULL(SPEC_DIVI   , '')     AS SPEC_DIVI
		     , ISNULL(PROFIT_DIVI , '')     AS PROFIT_DIVI
		     , ISNULL(PEND_YN     ,'N')     AS PEND_YN
		     , ISNULL(PEND_CODE   , '')     AS PEND_CODE
		     , ISNULL(BUDG_YN     ,'N')     AS BUDG_YN
		     , ISNULL(BUDGCTL_YN  ,'N')     AS BUDGCTL_YN
		     , ISNULL(DR_FUND     , '')     AS DR_FUND
		     , ISNULL(CR_FUND     , '')     AS CR_FUND
		     , ISNULL(COST_DIVI   , '')     AS COST_DIVI
		     , ISNULL(FOR_YN      ,'N')     AS FOR_YN
		     , ISNULL(ACCNT_DIVI  , '')     AS ACCNT_DIVI
		     , ISNULL(JAN_DIVI    , '')     AS JAN_DIVI
		     , ISNULL(GROUP_YN    ,'N')     AS GROUP_YN
		     , ISNULL(SLIP_SW     ,'N')     AS SLIP_SW
		     , ISNULL(A.SYSTEM_YN ,'N')     AS SYSTEM_YN
		     , ISNULL(C1.DT_TYPE  , '')     AS AC_TYPE1
		     , ISNULL(C2.DT_TYPE  , '')     AS AC_TYPE2
		     , ISNULL(C3.DT_TYPE  , '')     AS AC_TYPE3
		     , ISNULL(C4.DT_TYPE  , '')     AS AC_TYPE4
		     , ISNULL(C5.DT_TYPE  , '')     AS AC_TYPE5
		     , ISNULL(C6.DT_TYPE  , '')     AS AC_TYPE6
		     , ISNULL(C1.DT_LEN   , 0 )     AS AC_LEN1
		     , ISNULL(C2.DT_LEN   , 0 )     AS AC_LEN2
		     , ISNULL(C3.DT_LEN   , 0 )     AS AC_LEN3
		     , ISNULL(C4.DT_LEN   , 0 )     AS AC_LEN4
		     , ISNULL(C5.DT_LEN   , 0 )     AS AC_LEN5
		     , ISNULL(C6.DT_LEN   , 0 )     AS AC_LEN6
		     , CASE WHEN A.AC_CODE1 = 'A7' AND @BudgProBase = '1' 
		            THEN 'N'
		            ELSE ISNULL(C1.DT_POPUP,'N')
		        END AC_POPUP1
		     , CASE WHEN A.AC_CODE2 = 'A7' AND @BudgProBase = '1'
		            THEN 'N'
		            ELSE ISNULL(C2.DT_POPUP,'N')
		        END AC_POPUP2
		     , CASE WHEN A.AC_CODE3 = 'A7' AND @BudgProBase = '1'
		            THEN 'N'
		            ELSE ISNULL(C3.DT_POPUP,'N')
		        END AC_POPUP3
		     , CASE WHEN A.AC_CODE4 = 'A7' AND @BudgProBase = '1'
		            THEN 'N'
		            ELSE ISNULL(C4.DT_POPUP,'N')
		        END AC_POPUP4
		     , CASE WHEN A.AC_CODE5 = 'A7' AND @BudgProBase = '1'
		            THEN 'N'
		            ELSE ISNULL(C5.DT_POPUP,'N')
		        END AC_POPUP5
		     , CASE WHEN A.AC_CODE6 = 'A7' AND @BudgProBase = '1'
		            THEN 'N'
		            ELSE ISNULL(C6.DT_POPUP,'N')
		        END AC_POPUP6
		     , ISNULL(B.AC_NAME   , '')     AS PEND_NAME
		     , ISNULL(B.DT_TYPE   , '')     AS PEND_TYPE
		     , ISNULL(B.DT_LEN    ,'0')     AS PEND_LEN
		     , ISNULL(B.DT_POPUP  ,'N')     AS PEND_POPUP
		     , A.COMP_CODE
		     ,  ISNULL(C1.DT_FMT  , 0 )     AS AC_FORMAT1
		     ,  ISNULL(C2.DT_FMT  , 0 )     AS AC_FORMAT2
		     ,  ISNULL(C3.DT_FMT  , 0 )     AS AC_FORMAT3
		     ,  ISNULL(C4.DT_FMT  , 0 )     AS AC_FORMAT4
		     ,  ISNULL(C5.DT_FMT  , 0 )     AS AC_FORMAT5
		     ,  ISNULL(C6.DT_FMT  , 0 )     AS AC_FORMAT6
		  FROM  (SELECT J1.COMP_CODE,       J1.SEQ,            J1.SLIP_DIVI,      J1.ACCNT,       J2.ACCNT_NAME
		             , J2.AC_FULL_NAME,    J2.ACCNT_NAME2,    J2.ACCNT_NAME3,    J2.AC_CODE1,    J2.AC_CODE2
					 , J2.AC_CODE3,        J2.AC_CODE4,       J2.AC_CODE5,       J2.AC_CODE6,    J2.DR_CTL1
					 , J2.DR_CTL2,         J2.DR_CTL3,        J2.DR_CTL4,        J2.DR_CTL5,     J2.DR_CTL6
					 , J2.CR_CTL1,         J2.CR_CTL2,        J2.CR_CTL3,        J2.CR_CTL4,     J2.CR_CTL5
					 , J2.CR_CTL6,         J2.BOOK_CODE1,     J2.BOOK_CODE2 ,    J2.ACCNT_SPEC,  J2.PROFIT_DIVI
					 , J2.PEND_YN,         J2.PEND_CODE,      J2.BUDG_YN,        J2.BUDGCTL_YN,  J2.DR_FUND
					 , J2.CR_FUND,         J2.COST_DIVI,      J2.FOR_YN,         J2.ACCNT_DIVI,  J2.JAN_DIVI
					 , J2.GROUP_YN,        J2.SLIP_SW,        J2.SYSTEM_YN,      J2.SPEC_DIVI
		          FROM (SELECT K1.COMP_CODE
		                     , CASE WHEN ISNULL(K1.IN_AMT_I,0) != 0 THEN 1 ELSE 2 END SEQ
		                     , CASE WHEN ISNULL(K1.IN_AMT_I,0) != 0 THEN '1' ELSE '2' END SLIP_DIVI
		                     , K2.ACCNT
		                  FROM ACM100T AS K1 WITH (NOLOCK)
						       INNER JOIN AFS100T AS K2  WITH (NOLOCK)
							   ON  K1.COMP_CODE = K2.COMP_CODE
							   AND REPLACE(uniLITE.fnCipherDecrypt(K1.BANK_ACCOUNT, ''),'-','') = REPLACE(uniLITE.fnCipherDecrypt(K2.BANK_ACCOUNT, ''),'-','')
		                 WHERE K1.COMP_CODE = #{S_COMP_CODE}
		                   AND K1.AUTO_NUM  = #{AUTO_NUM}
		                 UNION ALL
		                SELECT K1.COMP_CODE
			                 , CASE WHEN ISNULL(K1.IN_AMT_I,0) != 0 THEN 2 ELSE 1 END SEQ
							 , CASE WHEN ISNULL(K1.IN_AMT_I,0) != 0 THEN '2' ELSE '1' END SLIP_DIVI
							 , #{ACCNT}
		                  FROM ACM100T AS K1 WITH (NOLOCK)
		                 WHERE K1.COMP_CODE = #{S_COMP_CODE}
		                   AND K1.AUTO_NUM  = #{AUTO_NUM}
					   ) J1
						 INNER JOIN ABA400T J2
						 ON J1.COMP_CODE = J2.COMP_CODE
						 AND J1.ACCNT = J2.ACCNT
				)  AS A 
		       LEFT  JOIN ABA200T AS B  WITH (NOLOCK) ON B.COMP_CODE  = A.COMP_CODE AND B.AC_CD  = A.PEND_CODE
		
		       LEFT  JOIN ABA200T AS C1 WITH (NOLOCK) ON C1.COMP_CODE = A.COMP_CODE AND C1.AC_CD = A.AC_CODE1
		       LEFT  JOIN ABA200T AS C2 WITH (NOLOCK) ON C2.COMP_CODE = A.COMP_CODE AND C2.AC_CD = A.AC_CODE2
		       LEFT  JOIN ABA200T AS C3 WITH (NOLOCK) ON C3.COMP_CODE = A.COMP_CODE AND C3.AC_CD = A.AC_CODE3
		       LEFT  JOIN ABA200T AS C4 WITH (NOLOCK) ON C4.COMP_CODE = A.COMP_CODE AND C4.AC_CD = A.AC_CODE4
		       LEFT  JOIN ABA200T AS C5 WITH (NOLOCK) ON C5.COMP_CODE = A.COMP_CODE AND C5.AC_CD = A.AC_CODE5
		       LEFT  JOIN ABA200T AS C6 WITH (NOLOCK) ON C6.COMP_CODE = A.COMP_CODE AND C6.AC_CD = A.AC_CODE6
		
		       LEFT  JOIN ABA200T AS D1 WITH (NOLOCK) ON D1.COMP_CODE = A.COMP_CODE AND D1.AC_CD = A.BOOK_CODE1
		       LEFT  JOIN ABA200T AS D2 WITH (NOLOCK) ON D2.COMP_CODE = A.COMP_CODE AND D2.AC_CD = A.BOOK_CODE2
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		 ORDER BY A.SLIP_DIVI, A.SEQ, A.ACCNT 
	</select>
		
	<update id="acm100ukrServiceImpl.insertLog" parameterType="Map">
		INSERT INTO L_AGJ210T (                                                                                                                       
			                                                                                                                                        
     	KEY_VALUE        ,OPR_FLAG             	  ,COMP_CODE					 ,AUTO_NUM                                                                                                            
 		     <if test="@foren.Ognl@isNotEmpty(AC_DATE         )">,AC_DATE 					</if><if test="@foren.Ognl@isNotEmpty(SLIP_NUM        )">,SLIP_NUM            		
 		</if><if test="@foren.Ognl@isNotEmpty(SLIP_SEQ        )">,SLIP_SEQ					</if><if test="@foren.Ognl@isNotEmpty(SLIP_DIVI       )">,SLIP_DIVI                                                                                                        
	   	</if><if test="@foren.Ognl@isNotEmpty(DR_CR           )">,DR_CR               		</if><if test="@foren.Ognl@isNotEmpty(CASH_NUM        )">,CASH_NUM             	   	                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(ACCNT           )">,ACCNT                	   	</if><if test="@foren.Ognl@isNotEmpty(P_ACCNT         )">,P_ACCNT                                                                                                      
	   	</if><if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE     )">,CUSTOM_CODE         		</if><if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME     )">,CUSTOM_NAME          	   	                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(MONEY_UNIT      )">,MONEY_UNIT           	   	</if><if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O    )">,EXCHG_RATE_O                                                                                                 
	   	</if><if test="@foren.Ognl@isNotEmpty(AMT_I           )">,AMT_I                	   	</if><if test="@foren.Ognl@isNotEmpty(FOR_AMT_I       )">,FOR_AMT_I            	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(REMARK          )">,REMARK               	   	</if><if test="@foren.Ognl@isNotEmpty(IN_DIV_CODE     )">,IN_DIV_CODE                                                                                                  
	   	</if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_CODE    )">,IN_DEPT_CODE         	   	</if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_NAME    )">,IN_DEPT_NAME         	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(DIV_CODE        )">,DIV_CODE             	   	</if><if test="@foren.Ognl@isNotEmpty(DEPT_CODE       )">,DEPT_CODE                                                                                                    
	   	</if><if test="@foren.Ognl@isNotEmpty(DEPT_NAME       )">,DEPT_NAME            	   	</if><if test="@foren.Ognl@isNotEmpty(BILL_DIV_CODE   )">,BILL_DIV_CODE        	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE1        )">,AC_CODE1             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE2        )">,AC_CODE2                                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE3        )">,AC_CODE3             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE4        )">,AC_CODE4             	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE5        )">,AC_CODE5             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE6        )">,AC_CODE6                                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA1        )">,AC_DATA1             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA2        )">,AC_DATA2             	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA3        )">,AC_DATA3             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA4        )">,AC_DATA4                                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA5        )">,AC_DATA5             	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA6        )">,AC_DATA6             	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME1   )">,AC_DATA_NAME1        	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME2   )">,AC_DATA_NAME2                                                                                                
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME3   )">,AC_DATA_NAME3        	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME4   )">,AC_DATA_NAME4        	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME5   )">,AC_DATA_NAME5        	   	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME6   )">,AC_DATA_NAME6                                                                                                
	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE1      )">,BOOK_CODE1           	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE2      )">,BOOK_CODE2           	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA1      )">,BOOK_DATA1           	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA2      )">,BOOK_DATA2                                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME1 )">,BOOK_DATA_NAME1      	   	</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME2 )">,BOOK_DATA_NAME2      	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL1         )">,AC_CTL1              	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL2         )">,AC_CTL2                                                                                                      
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL3         )">,AC_CTL3              	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL4         )">,AC_CTL4              	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL5         )">,AC_CTL5              	   	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL6         )">,AC_CTL6                                                                                                      
	   	</if><if test="@foren.Ognl@isNotEmpty(ACCNT_SPEC      )">,ACCNT_SPEC           	   	</if><if test="@foren.Ognl@isNotEmpty(SPEC_DIVI       )">,SPEC_DIVI            	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(PROFIT_DIVI     )">,PROFIT_DIVI          	   	</if><if test="@foren.Ognl@isNotEmpty(JAN_DIVI        )">,JAN_DIVI                                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(PEND_YN         )">,PEND_YN              	   	</if><if test="@foren.Ognl@isNotEmpty(PEND_CODE       )">,PEND_CODE            	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE  )">,PEND_DATA_CODE       	   	</if><if test="@foren.Ognl@isNotEmpty(BUDG_YN         )">,BUDG_YN                                                                                                      
	   	</if><if test="@foren.Ognl@isNotEmpty(BUDGCTL_YN      )">,BUDGCTL_YN           	   	</if><if test="@foren.Ognl@isNotEmpty(FOR_YN          )">,FOR_YN               	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(PROOF_KIND      )">,PROOF_KIND           	   	</if><if test="@foren.Ognl@isNotEmpty(CREDIT_NUM      )">,CREDIT_NUM                                                                                                   
                                                                                                                                                                                                                                                                 
	   	</if><if test="@foren.Ognl@isNotEmpty(CREDIT_CODE     )">,CREDIT_CODE          	   	</if><if test="@foren.Ognl@isNotEmpty(REASON_CODE     )">,REASON_CODE          	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(POSTIT_YN       )">,POSTIT_YN            	   	</if><if test="@foren.Ognl@isNotEmpty(POSTIT          )">,POSTIT                                                                                                       
	   	</if><if test="@foren.Ognl@isNotEmpty(POSTIT_USER_ID  )">,POSTIT_USER_ID       	   	</if><if test="@foren.Ognl@isNotEmpty(INPUT_PATH      )">,INPUT_PATH           	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(INPUT_DIVI      )">,INPUT_DIVI           	   	</if><if test="@foren.Ognl@isNotEmpty(AUTO_SLIP_NUM   )">,AUTO_SLIP_NUM                                                                                                
	   	</if><if test="@foren.Ognl@isNotEmpty(CLOSE_FG        )">,CLOSE_FG</if>             ,INPUT_DATE    ,INPUT_USER_ID        	   	
	   		 <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE     )">,CHARGE_CODE                                                                                                  
	   	</if><if test="@foren.Ognl@isNotEmpty(AP_DATE         )">,AP_DATE              	   	                                                                                   
	   	</if><if test="@foren.Ognl@isNotEmpty(AP_USER_ID      )">,AP_USER_ID           	   	</if>,AP_CHARGE_CODE                                                                                     
	   	     <if test="@foren.Ognl@isNotEmpty(DRAFT_YN        )">,DRAFT_YN                                                                                                     
	   	</if><if test="@foren.Ognl@isNotEmpty(AGREE_YN        )">,AGREE_YN             	   	</if><if test="@foren.Ognl@isNotEmpty(OLD_AC_DATE	  )">,OLD_AC_DATE				                                                                                           
	   	</if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_NUM 	  )">,OLD_SLIP_NUM 			    </if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_SEQ    )">,OLD_SLIP_SEQ
	   	</if><if test="@foren.Ognl@isNotEmpty(EX_DATE	  	  )">,EX_DATE					</if><if test="@foren.Ognl@isNotEmpty(EX_NUM 	  	  )">,EX_NUM 			    
	   	</if><if test="@foren.Ognl@isNotEmpty(EX_SEQ    	  )">,EX_SEQ 
	   	</if>                                                                                                                                                         
            <if test="@foren.Ognl@isNotEmpty(ASST_SUPPLY_AMT_I)">,ASST_SUPPLY_AMT_I         </if><if test="@foren.Ognl@isNotEmpty(ASST_TAX_AMT_I  )">,ASST_TAX_AMT_I 
        </if><if test="@foren.Ognl@isNotEmpty(ASST_DIVI       )">,ASST_DIVI              	</if>                                                                                                                                  
	   	                                                                                                                                        
	   ,INSERT_DB_USER       	   	,INSERT_DB_TIME       	      	,UPDATE_DB_USER       	   	,UPDATE_DB_TIME                                     
                                                                                                                                              
		) VALUES (                                                                                                                                  
		 	#{KEY_VALUE}             		,#{OPR_FLAG}   
		 	,#{S_COMP_CODE}					,#{AUTO_NUM}          	   	
			     <if test="@foren.Ognl@isNotEmpty(AC_DATE         )">,#{AC_DATE}     			</if><if test="@foren.Ognl@isNotEmpty(SLIP_NUM        )">,#{SLIP_NUM}            		
 			</if><if test="@foren.Ognl@isNotEmpty(SLIP_SEQ        )">,#{SLIP_SEQ}				</if><if test="@foren.Ognl@isNotEmpty(SLIP_DIVI       )">,#{SLIP_DIVI}                                                                       
			</if><if test="@foren.Ognl@isNotEmpty(DR_CR           )">,#{DR_CR}             		</if><if test="@foren.Ognl@isNotEmpty(CASH_NUM        )">,0             	   				
			</if><if test="@foren.Ognl@isNotEmpty(ACCNT           )">,#{ACCNT}  	   			</if><if test="@foren.Ognl@isNotEmpty(P_ACCNT         )">,#{P_ACCNT}                 
			</if><if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE     )">,#{CUSTOM_CODE}         	</if><if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME     )">,#{CUSTOM_NAME}          	   	
			</if><if test="@foren.Ognl@isNotEmpty(MONEY_UNIT      )">,#{MONEY_UNIT}    	   		</if><if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O    )">,#{EXCHG_RATE_O}    
			</if><if test="@foren.Ognl@isNotEmpty(AMT_I           )">,#{AMT_I}         			</if><if test="@foren.Ognl@isNotEmpty(FOR_AMT_I       )">,#{FOR_AMT_I}         			
			</if><if test="@foren.Ognl@isNotEmpty(REMARK          )">,#{REMARK}   	   			</if><if test="@foren.Ognl@isNotEmpty(IN_DIV_CODE     )">,#{IN_DIV_CODE}                         
			</if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_CODE    )">,#{IN_DEPT_CODE}         	</if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_NAME    )">,#{IN_DEPT_NAME}         	   	
			</if><if test="@foren.Ognl@isNotEmpty(DIV_CODE        )">,#{DIV_CODE}     	   		</if><if test="@foren.Ognl@isNotEmpty(DEPT_CODE       )">,#{DEPT_CODE}       
			</if><if test="@foren.Ognl@isNotEmpty(DEPT_NAME       )">,#{DEPT_NAME}            	</if><if test="@foren.Ognl@isNotEmpty(BILL_DIV_CODE   )">,#{BILL_DIV_CODE}        	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_CODE1        )">,#{AC_CODE1}     	   		</if><if test="@foren.Ognl@isNotEmpty(AC_CODE2        )">,#{AC_CODE2}        
			</if><if test="@foren.Ognl@isNotEmpty(AC_CODE3        )">,#{AC_CODE3}             	</if><if test="@foren.Ognl@isNotEmpty(AC_CODE4        )">,#{AC_CODE4}             	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_CODE5        )">,#{AC_CODE5}     	   		</if><if test="@foren.Ognl@isNotEmpty(AC_CODE6        )">,#{AC_CODE6}        
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA1        )">,#{AC_DATA1}             	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA2        )">,#{AC_DATA2}             	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA3        )">,#{AC_DATA3}     	   		</if><if test="@foren.Ognl@isNotEmpty(AC_DATA4        )">,#{AC_DATA4}        
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA5        )">,#{AC_DATA5}             	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA6        )">,#{AC_DATA6}             	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME1   )">,#{AC_DATA_NAME1}    		</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME2   )">,#{AC_DATA_NAME2}     
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME3   )">,#{AC_DATA_NAME3}        	</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME4   )">,#{AC_DATA_NAME4}        	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME5   )">,#{AC_DATA_NAME5}    		</if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME6   )">,#{AC_DATA_NAME6}   
			</if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE1      )">,#{BOOK_CODE1}           	</if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE2      )">,#{BOOK_CODE2}       	   		
			</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA1      )">,#{BOOK_DATA1}    	   		</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA2      )">,#{BOOK_DATA2}      
			</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME1 )">,#{BOOK_DATA_NAME1}      	</if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME2 )">,#{BOOK_DATA_NAME2}      	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_CTL1         )">,#{AC_CTL1}    	   		</if><if test="@foren.Ognl@isNotEmpty(AC_CTL2         )">,#{AC_CTL2}         
			</if><if test="@foren.Ognl@isNotEmpty(AC_CTL3         )">,#{AC_CTL3}             	</if><if test="@foren.Ognl@isNotEmpty(AC_CTL4         )">,#{AC_CTL4}             	   	
			</if><if test="@foren.Ognl@isNotEmpty(AC_CTL5         )">,#{AC_CTL5}    	   		</if><if test="@foren.Ognl@isNotEmpty(AC_CTL6         )">,#{AC_CTL6}         
			</if><if test="@foren.Ognl@isNotEmpty(ACCNT_SPEC      )">,#{ACCNT_SPEC}           	</if><if test="@foren.Ognl@isNotEmpty(SPEC_DIVI       )">,#{SPEC_DIVI}     	   			
			</if><if test="@foren.Ognl@isNotEmpty(PROFIT_DIVI     )">,#{PROFIT_DIVI}  	   		</if><if test="@foren.Ognl@isNotEmpty(JAN_DIVI        )">,#{JAN_DIVI}          
			</if><if test="@foren.Ognl@isNotEmpty(PEND_YN         )">,#{PEND_YN}             	</if><if test="@foren.Ognl@isNotEmpty(PEND_CODE       )">,#{PEND_CODE}    	   			
			</if><if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE  )">,#{PEND_DATA_CODE}  		</if><if test="@foren.Ognl@isNotEmpty(BUDG_YN         )">,#{BUDG_YN}             
			</if><if test="@foren.Ognl@isNotEmpty(BUDGCTL_YN      )">,#{BUDGCTL_YN}           	</if><if test="@foren.Ognl@isNotEmpty(FOR_YN          )">,#{FOR_YN}             	   		
			</if><if test="@foren.Ognl@isNotEmpty(PROOF_KIND      )">,#{PROOF_KIND} 	   		</if><if test="@foren.Ognl@isNotEmpty(CREDIT_NUM      )">,#{CREDIT_NUM}
			                                                                                                                                          
			</if><if test="@foren.Ognl@isNotEmpty(CREDIT_CODE     )">,#{CREDIT_CODE}          	</if><if test="@foren.Ognl@isNotEmpty(REASON_CODE     )">,#{REASON_CODE}    	   			
			</if><if test="@foren.Ognl@isNotEmpty(POSTIT_YN       )">,#{POSTIT_YN}     	   		</if><if test="@foren.Ognl@isNotEmpty(POSTIT          )">,#{POSTIT}          
			</if><if test="@foren.Ognl@isNotEmpty(POSTIT_USER_ID  )">,#{POSTIT_USER_ID}       	</if><if test="@foren.Ognl@isNotEmpty(INPUT_PATH      )">,#{INPUT_PATH}   	   			
			</if><if test="@foren.Ognl@isNotEmpty(INPUT_DIVI      )">,#{INPUT_DIVI}     	   	</if><if test="@foren.Ognl@isNotEmpty(AUTO_SLIP_NUM   )">,#{AUTO_SLIP_NUM}     
			</if><if test="@foren.Ognl@isNotEmpty(CLOSE_FG        )">,#{CLOSE_FG}</if>			,CONVERT(NVARCHAR(8), GETDATE(),112)  ,ISNULL(#{INPUT_USER_ID},#{S_USER_ID} )    		
				 <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE     )">,#{CHARGE_CODE}       
			</if><if test="@foren.Ognl@isNotEmpty(AP_DATE         )">,#{AP_DATE}             	   	
			</if><if test="@foren.Ognl@isNotEmpty(AP_USER_ID      )">,#{AP_USER_ID}     	   	</if>,isnull(#{AP_CHARGE_CODE}, #{CHARGE_CODE}  )
			     <if test="@foren.Ognl@isNotEmpty(DRAFT_YN        )">,#{DRAFT_YN}              
			</if><if test="@foren.Ognl@isNotEmpty(AGREE_YN        )">,#{AGREE_YN}             	</if><if test="@foren.Ognl@isNotEmpty(OLD_AC_DATE	  )">,#{OLD_AC_DATE}		
			</if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_NUM 	  )">,#{OLD_SLIP_NUM} 		  	</if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_SEQ      )">,#{OLD_SLIP_SEQ}                 
			</if><if test="@foren.Ognl@isNotEmpty(EX_DATE	  	  )">,#{EX_DATE}				</if><if test="@foren.Ognl@isNotEmpty(EX_NUM 	  	  )">,#{EX_NUM}			    
	   		</if><if test="@foren.Ognl@isNotEmpty(EX_SEQ    	  )">,#{EX_SEQ}     			</if>         
	   		    <if test="@foren.Ognl@isNotEmpty(ASST_SUPPLY_AMT_I)">,#{ASST_SUPPLY_AMT_I}      </if><if test="@foren.Ognl@isNotEmpty(ASST_TAX_AMT_I  )">,#{ASST_TAX_AMT_I} 
	    	</if><if test="@foren.Ognl@isNotEmpty(ASST_DIVI       )">,#{ASST_DIVI}     		    </if>                                                                                
			,#{S_USER_ID}           		,GETDATE()           			,#{S_USER_ID}           ,GETDATE()              
                                             
	   	)
	</update>
	<select id="acm100ukrServiceImpl.getSlipNum" parameterType="Map" resultType="rMap">
		SELECT ISNULL(MAX(SLIP_NUM), 0) + 1  AS SLIP_NUM
		  FROM AGJ210T WITH (NOLOCK)        
		 WHERE ISNULL(MOD_DIVI,'') = ''    
		   AND AC_DATE = #{AC_DATE}
		   AND COMP_CODE = #{S_COMP_CODE}
		 
	</select>
	<select id="acm100ukrServiceImpl.getMaxAutoNum" parameterType="Map" resultType="rMap">
		SELECT ISNULL(MAX(AUTO_NUM),0) +1 AS "MAX_AUTO_NUM" FROM L_AGJ210T  WITH (NOLOCK)
	</select>
	<select id="acm100ukrServiceImpl.selectLog" parameterType="Map" resultType="rMap">	
		SELECT KEY_VALUE      ,OPR_FLAG   	,COMP_CODE   	,AUTO_NUM    ,SLIP_NUM             	   	
		FROM  L_AGJ210T  WITH (NOLOCK)
		WHERE KEY_VALUE = #{KEY_VALUE}
		  AND AUTO_NUM = #{AUTO_NUM}
	</select>

	<insert id="acm100ukrServiceImpl.updateMaster" parameterType="Map">
		/*acm100ukrServiceImpl.updateMaster*/
	 UPDATE ACM100T
	    SET CUSTOM_CODE = #{CUSTOM_CODE}
	      , CUSTOM_NAME = #{CUSTOM_NAME}
          , P_ACCNT = #{ACCNT}
          , DEPT_CODE = #{DEPT_CODE}
          , DIV_CODE = #{DIV_CODE}
          , AC_DATE = #{PUB_DATE}
          , SLIP_NUM = #{SLIP_NUM}
		  , UPDATE_DB_USER   = #{S_USER_ID}
		  , UPDATE_DB_TIME   = GETDATE()          
	 WHERE COMP_CODE = #{S_COMP_CODE}
       AND AUTO_NUM =  #{AUTO_NUM}
       AND INOUT_DATE =  #{PUB_DATE}
       AND INOUT_TIME =  #{INOUT_TIME}
       AND REPLACE(uniLITE.fnCipherDecrypt(BANK_ACCOUNT,''),'-','') =  REPLACE(uniLITE.fnCipherDecrypt(#{ACCOUNT_NUM},''),'-','')
  
	</insert>	

	<update id="acm100ukrServiceImpl.updateMasterDelete" parameterType="Map">
		/*acm200ukrServiceImpl.updateMasterDelete*/
		UPDATE ACM100T
		   SET AC_DATE			= NULL
			 , SLIP_NUM			= NULL
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()
		 WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND AUTO_NUM			= #{AUTO_NUM}
		   AND INOUT_DATE		= #{PUB_DATE}
		   AND INOUT_TIME		= #{INOUT_TIME}
		   AND REPLACE(uniLITE.fnCipherDecrypt(BANK_ACCOUNT,''),'-','') =  REPLACE(uniLITE.fnCipherDecrypt(#{ACCOUNT_NUM},''),'-','')
	</update>

	<update id="acm100ukrServiceImpl.spAccntAcSlip" parameterType="Map" statementType="CALLABLE">
	   
	
		<!-- 2) parameterMap 없이 사용하는 법  -->
		{call USP_ACCNT_AcSlip (
			#{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{UserLang, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{UserID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	   
	 </update>

	 <update id="acm100ukrServiceImpl.spAcmBankMapping" parameterType="Map" statementType="CALLABLE">
		
		<!-- 2) parameterMap 없이 사용하는 법  -->
		{call USP_ACCNT_fnSetCmsBankMapping (
			#{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ApprDateFr, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ApprDateTo, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{CrdtNum, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	   
	 </update>
	<select id="acm100ukrServiceImpl.selectDuplicate" parameterType="Map" resultType="rMap">
    	SELECT 	COUNT(*) AS CNT	    
    	   FROM AGJ210T WITH (NOLOCK)
    	  WHERE COMP_CODE   = #{S_COMP_CODE}
    	 	AND AC_DATE     = #{AC_DATE}         
		    AND DR_CR       = #{DR_CR}         
		    AND ACCNT       = #{ACCNT}         
		    AND CUSTOM_CODE = ISNULL(#{CUSTOM_CODE}, '')          
		    AND AMT_I       = #{AMT_I}         
		    AND DIV_CODE    = #{DIV_CODE} 
		    AND ISNULL(MOD_DIVI  ,'') =''  
    </select>
</mapper>