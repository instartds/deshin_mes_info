<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agj800ukrService">
	<select id="agj800ukrService.selectList1" parameterType="Map" resultType="rMap">
		/*agj800ukr.Cagj800ukr [fnAgj800q] Query1	*/
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		 SELECT A.AC_DATE
		      , A.DIV_CODE
		      , A.SEQ
		      , A.UPDATE_DB_USER
		      , A.UPDATE_DB_TIME
		      , A.CUSTOM_CODE
		      , A.EXPIRE_DATE
		      , A.INPUT_DIVI
		      , B.SPEC_DIVI
		      , B.FOR_YN
		      , A.ACCNT
		      , ISNULL(B.ACCNT_NAME, '') AS ACCNT_NAME
		      , ISNULL(B.ACCNT_SPEC, '') AS ACCNT_SPEC
		      , B.JAN_DIVI
		      , A.MONEY_UNIT
		      , A.DR_FOR_AMT_I
		      , A.CR_FOR_AMT_I
		      , A.EXCHG_RATE_O
		      , A.DR_AMT_I
		      , A.CR_AMT_I
		      , A.BOOK_CODE1
		      , ISNULL(D.AC_NAME, '') AS BOOK_CODE_NAME1
		      , ISNULL(D.DT_TYPE, 'A') AS BOOK_TYPE1
		      , ISNULL(D.DT_LEN, 0) AS BOOK_LEN1
		      , ISNULL(D.DT_POPUP, 'N') AS BOOK_POPUP1
		      , A.BOOK_DATA1           
		      , A.BOOK_NAME1           AS BOOK_DATA_NAME1
		      , A.BOOK_CODE2
		      , ISNULL(E.AC_NAME, '') AS BOOK_CODE_NAME2
		      , ISNULL(E.DT_TYPE, 'A') AS BOOK_TYPE2
		      , ISNULL(E.DT_LEN, 0) AS BOOK_LEN2
		      , ISNULL(E.DT_POPUP, 'N') AS BOOK_POPUP2
		      , A.BOOK_DATA2
		      , A.BOOK_NAME2            AS BOOK_DATA_NAME2
		      , A.DEPT_CODE
		      , ISNULL(C.TREE_NAME, '') AS DEPT_NAME
		      , A.PROC_YN
		      , A.COMP_CODE
		 FROM                         AGJ800T A WITH (NOLOCK)
		              LEFT OUTER JOIN ABA400T B WITH (NOLOCK) 
		                           ON A.COMP_CODE  = B.COMP_CODE
		                          AND A.ACCNT      = B.ACCNT
		              LEFT OUTER JOIN BSA210T C WITH (NOLOCK) 
		                           ON A.COMP_CODE  = C.COMP_CODE
		                          AND A.DEPT_CODE  = C.TREE_CODE
		              LEFT OUTER JOIN ABA200T D WITH (NOLOCK) 
		                           ON A.COMP_CODE  = D.COMP_CODE
		                          AND A.BOOK_CODE1 = D.AC_CD
		              LEFT OUTER JOIN ABA200T E WITH (NOLOCK) 
		                           ON A.COMP_CODE  = E.COMP_CODE
		                          AND A.BOOK_CODE2 = E.AC_CD
		 WHERE A.COMP_CODE  = #{S_COMP_CODE}
		   AND A.AC_DATE    = #{AC_DATE}
		   <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE)"> 
		   AND A.ACCNT      = #{ACCOUNT_CODE}
		   </if>
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.INPUT_DIVI = '1'
		 ORDER BY A.ACCNT, A.BOOK_CODE1, A.BOOK_CODE2
			
	
	</select>
	
	<select id="agj800ukrService.selectList2" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnAgj800q] Query1 
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
         SELECT A.AC_DATE 
              , A.DIV_CODE 
              , A.SEQ 
              , A.UPDATE_DB_USER 
              , A.UPDATE_DB_TIME 
              , A.CUSTOM_CODE 
              , A.EXPIRE_DATE 
              , A.INPUT_DIVI 
              , B.SPEC_DIVI 
              , B.FOR_YN 
              , A.ACCNT 
              , ISNULL(B.ACCNT_NAME, '') AS ACCNT_NAME
              , ISNULL(B.ACCNT_SPEC, '') AS ACCNT_SPEC
              , B.JAN_DIVI 
              , A.MONEY_UNIT 
              , A.DR_FOR_AMT_I 
              , A.CR_FOR_AMT_I 
              , A.EXCHG_RATE_O 
              , A.DR_AMT_I 
              , A.CR_AMT_I 
              , A.BOOK_CODE1 
              , ISNULL(D.AC_NAME, '') AS BOOK_CODE_NAME1
              , ISNULL(D.DT_TYPE, 'A') AS BOOK_TYPE1 
              , ISNULL(D.DT_LEN, 0) AS BOOK_LEN1 
              , ISNULL(D.DT_POPUP, 'N') AS BOOK_POPUP1
              , A.BOOK_DATA1 
              , A.BOOK_NAME1           AS BOOK_DATA_NAME1
              , A.BOOK_CODE2 
              , ISNULL(E.AC_NAME, '') AS BOOK_CODE_NAME2
              , ISNULL(E.DT_TYPE, 'A') AS BOOK_TYPE2 
              , ISNULL(E.DT_LEN, 0) AS BOOK_LEN2 
              , ISNULL(E.DT_POPUP, 'N') AS BOOK_POPUP2
              , A.BOOK_DATA2 
              , A.BOOK_NAME2            AS BOOK_DATA_NAME2
              , A.DEPT_CODE 
              , ISNULL(C.TREE_NAME, '') AS DEPT_NAME 
              , A.PROC_YN 
              , A.COMP_CODE 
         FROM                         AGJ800T A WITH (NOLOCK) 
                      LEFT OUTER JOIN ABA400T B WITH (NOLOCK) 
                                   ON A.COMP_CODE  = B.COMP_CODE
                                  AND A.ACCNT      = B.ACCNT
                      LEFT OUTER JOIN BSA210T C WITH (NOLOCK) 
                                   ON A.COMP_CODE  = C.COMP_CODE
                                  AND A.DEPT_CODE  = C.TREE_CODE
                      LEFT OUTER JOIN ABA200T D WITH (NOLOCK) 
                                   ON A.COMP_CODE  = D.COMP_CODE
                                  AND A.BOOK_CODE1 = D.AC_CD
                      LEFT OUTER JOIN ABA200T E WITH (NOLOCK) 
                                   ON A.COMP_CODE  = E.COMP_CODE
                                  AND A.BOOK_CODE2 = E.AC_CD
         WHERE A.COMP_CODE  = #{S_COMP_CODE}
           AND A.AC_DATE    = #{AC_DATE}
           <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE)"> 
           AND A.ACCNT      = #{ACCOUNT_CODE}
           </if>
           AND A.DIV_CODE   = #{DIV_CODE}
           AND A.INPUT_DIVI = '2' 
         ORDER BY A.ACCNT, A.BOOK_CODE1, A.BOOK_CODE2
	</select>	
	<select id="agj800ukrService.getSeq" parameterType="Map" resultType="rMap">
		SELECT ISNULL(MAX(SEQ), 0) +1 AS SEQ
                  FROM AGJ800T   WITH (NOLOCK)
                 WHERE COMP_CODE = #{S_COMP_CODE}
                   AND AC_DATE   = #{AC_DATE}
                   AND ACCNT     = #{ACCNT}
	</select>
	
	<insert id="agj800ukrService.insertDetail" parameterType="Map" useGeneratedKeys="false">
		INSERT INTO AGJ800T
		(   COMP_CODE,	    ACCNT,	    AC_DATE,	    DIV_CODE,	    SEQ,
		    DEPT_CODE,	    DEPT_NAME,	    BOOK_DATA1,	    BOOK_DATA2,	    BOOK_CODE1,
		    BOOK_CODE2,	    BOOK_NAME1,	    BOOK_NAME2,	    CUSTOM_CODE,    EXPIRE_DATE,
		    DR_AMT_I,	    CR_AMT_I,	    DR_FOR_AMT_I,   CR_FOR_AMT_I,   MONEY_UNIT,
		    EXCHG_RATE_O,   INPUT_DIVI,	    PROC_YN,
		    INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME 
	    ) VALUES (
	    	#{S_COMP_CODE},	    #{ACCNT},	    	#{AC_DATE},	    	#{DIV_CODE},	   	#{SEQ},
		    #{DEPT_CODE},	    #{DEPT_NAME},	    #{BOOK_DATA1},	    #{BOOK_DATA2},	    #{BOOK_CODE1},
		    #{BOOK_CODE2},	    #{BOOK_DATA_NAME1},	    #{BOOK_DATA_NAME2},	    #{CUSTOM_CODE},    	#{EXPIRE_DATE},
		    #{DR_AMT_I},	    #{CR_AMT_I},	    #{DR_FOR_AMT_I},   	#{CR_FOR_AMT_I},   	#{MONEY_UNIT},
		    #{EXCHG_RATE_O},   	#{INPUT_DIVI},	    #{PROC_YN},
		    #{S_USER_ID}, 		GETDATE(), 			#{S_USER_ID}, 		GETDATE()
	    )
	</insert>
	
	<update id="agj800ukrService.updateDetail" parameterType="Map">		
		UPDATE AGJ800T
		SET 
		    DEPT_CODE = #{DEPT_CODE},	    
		    DEPT_NAME = #{DEPT_NAME},	    
		    BOOK_DATA1 = #{BOOK_DATA1},	    
		    BOOK_DATA2 = #{BOOK_DATA2},	    
		    BOOK_CODE1 = #{BOOK_CODE1},
		    BOOK_CODE2 = #{BOOK_CODE2},	    
		    BOOK_NAME1 = #{BOOK_DATA_NAME1},	    
		    BOOK_NAME2 = #{BOOK_DATA_NAME2},	    
		    CUSTOM_CODE = #{CUSTOM_CODE},    	
		    EXPIRE_DATE = #{EXPIRE_DATE},
		    DR_AMT_I = ISNULL(#{DR_AMT_I}, 0),	    
		    CR_AMT_I = ISNULL(#{CR_AMT_I}, 0),	    
		    DR_FOR_AMT_I = #{DR_FOR_AMT_I},   	
		    CR_FOR_AMT_I = #{CR_FOR_AMT_I},   	
		    MONEY_UNIT = #{MONEY_UNIT},
		    EXCHG_RATE_O = #{EXCHG_RATE_O},   	
		    INPUT_DIVI = #{INPUT_DIVI},	    
		    PROC_YN = #{PROC_YN},
		    UPDATE_DB_USER = #{S_USER_ID}, 		
		    UPDATE_DB_TIME = GETDATE()
	    WHERE   
	         	COMP_CODE = #{S_COMP_CODE}
	      AND   ACCNT = #{ACCNT}
	      AND   AC_DATE = #{AC_DATE}
	      AND   DIV_CODE = #{DIV_CODE}
	      AND   SEQ = #{SEQ}
	</update>
	
	<update id="agj800ukrService.deleteDetail" parameterType="Map">
		DELETE FROM AGJ800T
	    WHERE   
	        	COMP_CODE = #{S_COMP_CODE}
	      AND   ACCNT     = #{ACCNT}
	      AND   AC_DATE   = #{AC_DATE}
	      AND   DIV_CODE  = #{DIV_CODE}
	      AND   SEQ       = #{SEQ}
	</update>
	
	<insert id="agj800ukrService.insertDetail2" parameterType="Map" useGeneratedKeys="false">
        INSERT INTO AGJ800T
        (   COMP_CODE,      ACCNT,      AC_DATE,        DIV_CODE,       SEQ,
            DEPT_CODE,      DEPT_NAME,      BOOK_DATA1,     BOOK_DATA2,     BOOK_CODE1,
            BOOK_CODE2,     BOOK_NAME1,     BOOK_NAME2,     CUSTOM_CODE,    EXPIRE_DATE,
            DR_AMT_I,       CR_AMT_I,       DR_FOR_AMT_I,   CR_FOR_AMT_I,   MONEY_UNIT,
            EXCHG_RATE_O,   INPUT_DIVI,     PROC_YN,
            INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME 
        ) VALUES (
            #{S_COMP_CODE},     #{ACCNT},           #{AC_DATE},         #{DIV_CODE},        #{SEQ},
            #{DEPT_CODE},       #{DEPT_NAME},       #{BOOK_DATA1},      #{BOOK_DATA2},      #{BOOK_CODE1},
            #{BOOK_CODE2},      #{BOOK_DATA_NAME1},     #{BOOK_DATA_NAME2},     #{CUSTOM_CODE},     #{EXPIRE_DATE},
            #{DR_AMT_I},        #{CR_AMT_I},        #{DR_FOR_AMT_I},    #{CR_FOR_AMT_I},    #{MONEY_UNIT},
            #{EXCHG_RATE_O},    #{INPUT_DIVI},      #{PROC_YN},
            #{S_USER_ID},       GETDATE(),          #{S_USER_ID},       GETDATE()
        )
    </insert>
    
    <update id="agj800ukrService.updateDetail2" parameterType="Map">     
        UPDATE AGJ800T
        SET 
            DEPT_CODE = #{DEPT_CODE},       
            DEPT_NAME = #{DEPT_NAME},       
            BOOK_DATA1 = #{BOOK_DATA1},     
            BOOK_DATA2 = #{BOOK_DATA2},     
            BOOK_CODE1 = #{BOOK_CODE1},
            BOOK_CODE2 = #{BOOK_CODE2},     
            BOOK_NAME1 = #{BOOK_DATA_NAME1},        
            BOOK_NAME2 = #{BOOK_DATA_NAME2},        
            CUSTOM_CODE = #{CUSTOM_CODE},       
            EXPIRE_DATE = #{EXPIRE_DATE},
            DR_AMT_I = ISNULL(#{DR_AMT_I}, 0),      
            CR_AMT_I = ISNULL(#{CR_AMT_I}, 0),      
            DR_FOR_AMT_I = #{DR_FOR_AMT_I},     
            CR_FOR_AMT_I = #{CR_FOR_AMT_I},     
            MONEY_UNIT = #{MONEY_UNIT},
            EXCHG_RATE_O = #{EXCHG_RATE_O},     
            INPUT_DIVI = #{INPUT_DIVI},     
            PROC_YN = #{PROC_YN},
            UPDATE_DB_USER = #{S_USER_ID},      
            UPDATE_DB_TIME = GETDATE()
        WHERE   
                COMP_CODE = #{S_COMP_CODE}
          AND   ACCNT = #{ACCNT}
          AND   AC_DATE = #{AC_DATE}
          AND   DIV_CODE = #{DIV_CODE}
          AND   SEQ = #{SEQ}
    </update>
    
    <update id="agj800ukrService.deleteDetail2" parameterType="Map">
        DELETE FROM AGJ800T
        WHERE   
                COMP_CODE = #{S_COMP_CODE}
          AND   ACCNT     = #{ACCNT}
          AND   AC_DATE   = #{AC_DATE}
          AND   DIV_CODE  = #{DIV_CODE}
          AND   SEQ       = #{SEQ}
    </update>
	<select  id="agj800ukrService.getAgj800" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnGetAgj800] Query106
     SELECT A.COMP_CODE
          , A.ACCNT
          , ISNULL((SELECT ACCNT_NAME 
                      FROM ABA400T   WITH (NOLOCK)
                     WHERE COMP_CODE = A.COMP_CODE 
                       AND ACCNT     = A.ACCNT), '') AS ACCNT_NAME
          , ISNULL((SELECT JAN_DIVI   
                      FROM ABA400T   WITH (NOLOCK)
                     WHERE COMP_CODE = A.COMP_CODE 
                       AND ACCNT     = A.ACCNT), '') AS JAN_DIVI
          , ISNULL((SELECT SPEC_DIVI  
                      FROM ABA400T   WITH (NOLOCK)
                     WHERE COMP_CODE = A.COMP_CODE 
                       AND ACCNT     = A.ACCNT), '') AS SPEC_DIVI
          , A.AC_DATE
          , ISNULL(A.DIV_CODE, '')  AS DIV_CODE
          , A.SEQ
          , ISNULL(A.DEPT_CODE, '') AS DEPT_CODE
          , ISNULL(A.DEPT_NAME, '') AS DEPT_NAME
          , ISNULL(A.BOOK_CODE1,'') AS BOOK_CODE1
          , ISNULL(A.BOOK_CODE2,'') AS BOOK_CODE2
          , ISNULL(A.BOOK_DATA1,'') AS BOOK_DATA1
          , ISNULL(A.BOOK_DATA2,'') AS BOOK_DATA2
          , ISNULL(A.BOOK_NAME1,'') AS BOOK_DATA_NAME1
          , ISNULL(A.BOOK_NAME2,'') AS BOOK_DATA_NAME2
          , ISNULL(A.CUSTOM_CODE, '') AS CUSTOM_CODE
          , ISNULL(A.EXPIRE_DATE, '') AS EXPIRE_DATE
          , ISNULL(A.DR_AMT_I, 0)     AS DR_AMT_I
          , ISNULL(A.CR_AMT_I, 0)     AS CR_AMT_I
          , ISNULL(A.DR_FOR_AMT_I, 0) AS DR_FOR_AMT_I
          , ISNULL(A.CR_FOR_AMT_I, 0) AS CR_FOR_AMT_I
          , INPUT_DIVI
          , PROC_YN
       FROM AGJ800T A  WITH (NOLOCK)
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        and A.ACCNT     = #{ACCNT}
        AND A.AC_DATE   = #{AC_DATE}
        AND A.DIV_CODE  = #{DIV_CODE}
        AND A.SEQ       = #{SEQ}
	</select>
	<select  id="agj800ukrService.getAgj210" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnGetAgj210] Query105
    SELECT COUNT(1) AS SLIP_CNT
         , MAX(AC_DATE + '|#' + CONVERT(NVARCHAR,SLIP_NUM) + '|#' + CONVERT(NVARCHAR,SLIP_SEQ)) AS LAST_SLIP
      FROM AGJ210T  WITH (NOLOCK)
     WHERE COMP_CODE             = #{S_COMP_CODE}
       AND ISNULL(MOD_DIVI,'')   = ''
       AND ((ISNULL(AC_CODE1,'') = 'C2' AND ISNULL(AC_DATA1,'') = #{CHK_NOTE_NUM})
        OR  (ISNULL(AC_CODE2,'') = 'C2' AND ISNULL(AC_DATA2,'') = #{CHK_NOTE_NUM})
        OR  (ISNULL(AC_CODE3,'') = 'C2' AND ISNULL(AC_DATA3,'') = #{CHK_NOTE_NUM})
        OR  (ISNULL(AC_CODE4,'') = 'C2' AND ISNULL(AC_DATA4,'') = #{CHK_NOTE_NUM})
        OR  (ISNULL(AC_CODE5,'') = 'C2' AND ISNULL(AC_DATA5,'') = #{CHK_NOTE_NUM})
        OR  (ISNULL(AC_CODE6,'') = 'C2' AND ISNULL(AC_DATA6,'') = #{CHK_NOTE_NUM}))
	</select>
	<select  id="agj800ukrService.returnBalancing" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnSetReturn] Query75"
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
    SELECT DISTINCT A.PROC_YN
      FROM AGJ800T A  WITH (NOLOCK)
     WHERE A.COMP_CODE  = #{S_COMP_CODE}
       AND A.AC_DATE    = LEFT(#{AC_DATE}, 6)
       AND A.DIV_CODE   = #{DIV_CODE}
       AND A.INPUT_DIVI = #{INPUT_DIVI}
	</select>
	<select  id="agj800ukrService.prevYearActualBalancing" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnSetReturn] Query76
     SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
     SELECT A.*
       FROM AFC100T A  WITH (NOLOCK)
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        AND A.ACCNT IN ( (SELECT ISNULL(ACCNT, '') 
                            FROM ABA400T   WITH (NOLOCK)
                           WHERE COMP_CODE = A.COMP_CODE
                             AND ACCNT_DIVI IN ('1', '2', '3')) )
        AND A.AC_YYYY = CONVERT(NVARCHAR(6),  DATEADD(YEAR, -1, CONVERT(DATE, #{AC_DATE}+'01',112)) , 112)
        AND A.DIV_CODE = #{DIV_CODE}
	</select>
	<select  id="agj800ukrService.returnSales" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnSetReturn] Query77
     SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
     SELECT ISNULL(A.REF_CODE1, 'N') AS REF_CODE
       FROM BSA100T A  WITH (NOLOCK)
      WHERE A.COMP_CODE = #{S_COMP_CODE}
        AND A.MAIN_CODE = 'S025'
        AND A.SUB_CODE  = '1'
	</select>
	<select  id="agj800ukrService.returnSalesBalancing" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnSetReturn] Query78
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
     IF NOT EXISTS(SELECT NAME 
                     FROM SYSOBJECTS 
                    WHERE NAME='SAR100T')
              SELECT * 
                FROM AGJ800T  WITH (NOLOCK) 
               WHERE 1 = 2
     ELSE
              SELECT A.*
                FROM SAR100T A  WITH (NOLOCK)
               WHERE A.COMP_CODE    = #{S_COMP_CODE}
                 AND A.BASIS_YYYYMM = (SELECT MAX(AC_DATE) 
                                         FROM AGJ800T  WITH (NOLOCK)
                                        WHERE COMP_CODE = A.COMP_CODE
                                          AND ACCNT IN (SELECT ACCNT 
                                                          FROM ABA400T  WITH (NOLOCK)
                                                         WHERE COMP_CODE = #{S_COMP_CODE}
                                                           AND SPEC_DIVI = 'G1')
                                          AND DIV_CODE = A.DIV_CODE
                                          AND PROC_YN = 'Y')
                 AND A.DIV_CODE   = #{DIV_CODE}
                 AND A.CREATE_LOC = '1'
	</select>
	<select  id="agj800ukrService.checkSalesBalancing" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnSetReturn] Query78
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
     IF NOT EXISTS(SELECT NAME 
                     FROM SYSOBJECTS 
                    WHERE NAME='SAR100T')
              SELECT * 
                FROM AGJ800T   WITH (NOLOCK)
               WHERE 1 = 2
     ELSE
              SELECT A.*
                FROM SAR100T A  WITH (NOLOCK)
               WHERE A.COMP_CODE    = #{S_COMP_CODE}
                 AND A.BASIS_YYYYMM = #{BASE_AC_DATE}
                 AND A.DIV_CODE   = #{DIV_CODE}
                 AND A.CREATE_LOC = '1'
	</select>
	<select id="agj800ukrService.getAfn100WidthAccnt" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query88
		SELECT NOTE_NUM
		     , AC_CD
		     , EXP_DATE
		     , BANK_CODE
		     , CUSTOM_CODE
		     , PUB_DATE
		     , PUB_MAN
		     , ISNULL(OC_AMT_I,0.0) AS OC_AMT_I
		     , ACCNT
		     , DC_DIVI
		     , ISNULL(NOTE_STS,'') AS NOTE_STS
		     , ISNULL((SELECT CODE_NAME 
		                 FROM BSA100T  WITH (NOLOCK)
		                WHERE COMP_CODE = A.COMP_CODE
		                  AND MAIN_CODE = 'A063' 
		                  AND SUB_CODE  = A.NOTE_STS),'') AS NOTE_STS_NM
		     , AC_DATE
		     , SLIP_NUM
		     , SLIP_SEQ
		     , RECEIPT_DIVI
		     , NOTE_KEEP
		     , CHECK1
		     , CHECK2
		     , J_DATE
		     , J_NUM
		     , J_SEQ
		     , ISNULL(J_AMT_I,0.0) AS J_AMT_I
		     <if test="@foren.Ognl@isNotEmpty(AC_DATE) and @foren.Ognl@isNotEmpty(ACCNT)"> 
		     , ISNULL((SELECT MAX(AC_DATE + '|#' + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5))
		                 FROM AGJ800T  WITH (NOLOCK)
		                WHERE COMP_CODE = A.COMP_CODE
		                  AND ACCNT     = #{ACCNT}
		                  AND AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5) != #{AC_DATE}
		                  AND DIV_CODE  = #{DIV_CODE}
		                  AND ((ISNULL(BOOK_CODE1,'') = 'C2' 
		                  AND ISNULL(BOOK_DATA1,'')   = A.NOTE_NUM)
		                   OR  (ISNULL(BOOK_CODE2,'') = 'C2' 
		                  AND ISNULL(BOOK_DATA2,'')   = A.NOTE_NUM))),'|#') PREV_AC_DATE
		     </if>
		  FROM AFN100T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.NOTE_NUM  = #{NOTE_NUM}
	</select>
	<select id="agj800ukrService.getAfn100" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnDeleteAfn200] Query102"
		SELECT NOTE_NUM
		     , AC_CD
		     , EXP_DATE
		     , BANK_CODE
		     , CUSTOM_CODE
		     , PUB_DATE
		     , PUB_MAN
		     , ISNULL(OC_AMT_I,0.0) AS OC_AMT_I
		     , ACCNT
		     , DC_DIVI
		     , ISNULL(NOTE_STS,'') AS NOTE_STS
		     , ISNULL((SELECT CODE_NAME 
					    FROM BSA100T
					    WHERE COMP_CODE = #{S_COMP_CODE}
					    AND MAIN_CODE = 'A063'
					    AND SUB_CODE  = A.NOTE_STS),'') AS NOTE_STS_NM
		     , AC_DATE
		     , SLIP_NUM
		     , SLIP_SEQ
		     , RECEIPT_DIVI
		     , NOTE_KEEP
		     , CHECK1
		     , CHECK2
		     , J_DATE
		     , J_NUM
		     , J_SEQ
		     , ISNULL(J_AMT_I,0.0) AS J_AMT_I
		  FROM AFN100T A WITH (NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND NOTE_NUM  = #{NOTE_NUM}
	</select>
	<select id="agj800ukrService.getDeleteSlip100" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query89
		SELECT MAX(AC_DATE + '|#' + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5)) PREV_AC_DATE
		  FROM AGJ800T  WITH (NOLOCK)
		 WHERE COMP_CODE               = #{S_COMP_CODE}
		   AND ACCNT                   = #{ACCNT}
		   AND AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5) !=  #{AC_DATE}
		   AND DIV_CODE                = #{DIV_CODE}
		   AND ISNULL(DR_AMT_I,0) != 0
		   AND ((ISNULL(BOOK_CODE1,'') = 'C2' 
		   AND ISNULL(BOOK_DATA1,'')   = #{NOTE_NUM}
		    OR  (ISNULL(BOOK_CODE2,'') = 'C2' 
		   AND ISNULL(BOOK_DATA2,'')   = #{NOTE_NUM}
	</select>
	<select  id="agj800ukrService.getDeleteAmt100" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query90
		SELECT ISNULL(SUM(CR_AMT_I),0) AS AMT_I
		  FROM AGJ800T  WITH (NOLOCK)
		 WHERE COMP_CODE               = #{S_COMP_CODE}
		   AND ACCNT                   = #{ACCNT}
		   AND AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5}gt; #{PREV_AC_DATE}
		   AND AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5}lt; #{SLIP_DATE}
		   AND DIV_CODE                = #{DIV_CODE}
		   AND ((ISNULL(BOOK_CODE1,'') = 'C2' 
		   AND ISNULL(BOOK_DATA1,'')   = #{NOTE_NUM}
		    OR  (ISNULL(BOOK_CODE2,'') = 'C2' 
		   AND ISNULL(BOOK_DATA2,'')   = #{NOTE_NUM}
	</select>
	<update id="agj800ukrService.updateAfn100" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query91
		UPDATE AFN100T
		   SET NOTE_STS       =  #{NOTE_STS}
		     , J_AMT_I        =  ISNULL(#{AMT_I}, 0)
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND NOTE_NUM       = #{NOTE_NUM}
		   <if test="@foren.Ognl@isNotEmpty(AC_CD)"> 
		   AND AC_CD          = #{AC_CD}
		   </if>
	</update>
	<update id="agj800ukrService.updateAfn100_D4" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query91
		UPDATE AFN100T
		   SET NOTE_STS       =  #{NOTE_STS}
		     , J_AMT_I        =  ISNULL(J_AMT_I,0.0) - ISNULL(#{AMT_I}, 0)
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND NOTE_NUM       = #{NOTE_NUM}
		   <if test="@foren.Ognl@isNotEmpty(AC_CD)"> 
		   AND AC_CD          = #{AC_CD}
		   </if>
	</update>
	<update id="agj800ukrService.updateAfn100_D3" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query91
		UPDATE AFN100T
		   SET NOTE_STS       =  #{NOTE_STS}
		     , J_AMT_I        =  ISNULL(J_AMT_I,0.0) + ISNULL(#{AMT_I}, 0)
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND NOTE_NUM       = #{NOTE_NUM}
		   <if test="@foren.Ognl@isNotEmpty(AC_CD)"> 
		   AND AC_CD          = #{AC_CD}
		   </if>
	</update>
	<update id="agj800ukrService.updateAfn100_N" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query91
		UPDATE AFN100T
		   SET NOTE_STS       =  #{NOTE_STS}
		     , J_AMT_I        =  NULL
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND NOTE_NUM       = #{NOTE_NUM}
		   <if test="@foren.Ognl@isNotEmpty(AC_CD)"> 
		   AND AC_CD          = #{AC_CD}
		   </if>
	</update>
	<delete id="agj800ukrService.deleteAfn100" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn100] Query92 
		DELETE FROM AFN100T
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND NOTE_NUM  = #{NOTE_NUM}
		   AND AC_CD     = #{AC_CD}
	</delete>
	<update id="agj800ukrService.updateAfn200" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnDeleteAfn200] Query103
        UPDATE AFN200T
           SET PROC_SW        = #{NOTE_STS}
          <if test="@foren.Ognl@isExists(_parameter, 'FLOAT_DATE')"> 
           	 , FLOAT_DATE     = ''"
           </if>
           <if test="@foren.Ognl@isExists(_parameter, 'SET_DATE')"> 
             , SET_DATE       = ''
           </if>           
             , UPDATE_DB_USER = #{S_USER_ID}
             , UPDATE_DB_TIME = GETDATE()
         WHERE COMP_CODE      = #{S_COMP_CODE}
           AND NOTE_DIVI      = '1'
           AND NOTE_NUM       = #{NOTE_NUM}
	</update>
	<select id="agj800ukrService.getLastNote" parameterType="Map" resultType="rMap">
		 --agj800ukr.Cagj800ukr [fnSetReturn] Query80
	        SELECT B.ACCNT
	             , B.AC_DATE AS LAST_AC_DATE
	          FROM AGJ800T A  WITH (NOLOCK)
	             , (SELECT ACCNT
	                     , MAX(AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+SEQ),2,5)) AS AC_DATE
	                  FROM AGJ800T  WITH (NOLOCK)
	                 WHERE COMP_CODE = #{S_COMP_CODE}
	                 GROUP BY ACCNT, AC_DATE) B
	         WHERE A.COMP_CODE = #{S_COMP_CODE}
	           AND A.AC_DATE   = #{AC_DATE}
	           AND A.ACCNT     = B.ACCNT
	           AND A.AC_DATE + SUBSTRING(CONVERT(NVARCHAR,100000+A.SEQ),2,5) = B.AC_DATE
	           AND ((ISNULL(A.BOOK_CODE1,'')   = 'C2' 
	               AND ISNULL(A.BOOK_DATA1,'') = #{NOTE_NUM})
	            OR  (ISNULL(A.BOOK_CODE2,'')   = 'C2' 
	               AND ISNULL(A.BOOK_DATA2,'') = #{NOTE_NUM})
	              )
	    
	</select>
	<insert id="agj800ukrService.insertAfn100" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnSetReturn] Query81
           INSERT INTO AFN100T
                ( COMP_CODE
                , NOTE_NUM
                , AC_CD
                , CUSTOM_CODE
                , OC_AMT_I
                , ACCNT
                , NOTE_STS
                , UPDATE_DB_USER
                , UPDATE_DB_TIME )
           VALUES ( 
                  #{S_COMP_CODE}
                , #{NOTE_NUM}
                , #{SPEC_DIVI}
                , #{CUST_CODE}
                , #{OC_AMT_I}
                , #{ACCNT}
                , #{NOTE_STS}
                , #{S_USER_ID}
                , GETDATE() )
	</insert>
	<select id="agj800ukrService.getAfn200" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnInsertAfn200] Query98"
		SELECT NOTE_NUM
		     , NOTE_DIVI
		     , PROC_SW
		     , ISNULL((SELECT OC_AMT_I 
		                 FROM AFN100T  WITH (NOLOCK)
		                WHERE COMP_CODE = A.COMP_CODE
		                  AND AC_CD     = 'D3' 
		                  AND NOTE_NUM  = A.NOTE_NUM),0.0) AS OC_AMT_I
		     , ISNULL((SELECT J_AMT_I  
		                 FROM AFN100T  WITH (NOLOCK)
		                WHERE COMP_CODE = A.COMP_CODE
		                  AND AC_CD     = 'D3' 
		                  AND NOTE_NUM  = A.NOTE_NUM),0.0) AS J_AMT_I
		  FROM AFN200T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND NOTE_DIVI   = '1'
		   AND NOTE_NUM    = #{NOTE_NUM}
		
	</select>
	<select id="agj800ukrService.getAfn200_A" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnInsertAfn200] Query98
		SELECT *
		  FROM AFN200T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND NOTE_DIVI   = '1'
		   AND NOTE_NUM    = #{NOTE_NUM}
		
	</select>
	<select id="agj800ukrService.chkBalance" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query2
		SELECT DISTINCT A.AC_DATE
		  FROM AGJ800T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE          = #{S_COMP_CODE}
		   AND ISNULL(A.PROC_YN,'') = 'Y'"
		   AND A.INPUT_DIVI         = #{TERM_DIVI}
		   AND A.DIV_CODE           = #{DIV_CODE}
		   AND A.AC_DATE            != #{AC_DATE}
	</select>
	<select id="agj800ukrService.totalBalance" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query3
		SELECT A.COMP_CODE
		     , A.AC_DATE
		     , ISNULL(SUM(A.DR_AMT_I), 0) AS DR_AMT_I
		     , ISNULL(SUM(A.CR_AMT_I), 0) AS CR_AMT_I
		     , ISNULL(MIN(A.PROC_YN),'N') AS PROC_YN
		  FROM AGJ800T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE  = #{S_COMP_CODE}
		   AND A.AC_DATE    = #{AC_DATE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.INPUT_DIVI = #{TERM_DIVI}
		 GROUP BY A.COMP_CODE, A.AC_DATE
	</select>
	<select id="agj800ukrService.getBalanceSet" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query4
		SELECT A.COMP_CODE
		     , A.ACCNT
		     , A.AC_DATE
		     , A.DIV_CODE
		     , A.DEPT_CODE
		     , ISNULL(SUM(A.DR_AMT_I), 0) AS DR_AMT_I
		     , ISNULL(SUM(A.CR_AMT_I), 0) AS CR_AMT_I
		     , ISNULL(SUM(A.DR_FOR_AMT_I), 0) AS DR_FOR_AMT_I
		     , ISNULL(SUM(A.CR_FOR_AMT_I), 0) AS CR_FOR_AMT_I
		     , ISNULL(A.MONEY_UNIT, '')   AS MONEY_UNIT
		     , ISNULL(B.ACCNT_SPEC, '')   AS ACCNT_SPEC
		     , ISNULL(B.SPEC_DIVI, '')    AS SPEC_DIVI
		     , ISNULL(B.PROFIT_DIVI, '')  AS PROFIT_DIVI
		     , ISNULL(B.JAN_DIVI, '1')    AS JAN_DIVI
		     , ISNULL(B.JAN_DIVI, '1')    AS BLN_DIVI
		  FROM (
		        SELECT A.COMP_CODE
		             , A.ACCNT
		             , A.AC_DATE
		             , A.DIV_CODE
		             , A.DEPT_CODE
		             , ISNULL(SUM(A.DR_AMT_I), 0)     AS DR_AMT_I
		             , ISNULL(SUM(A.CR_AMT_I), 0)     AS CR_AMT_I
		             , ISNULL(SUM(A.DR_FOR_AMT_I), 0) AS DR_FOR_AMT_I
		             , ISNULL(SUM(A.CR_FOR_AMT_I), 0) AS CR_FOR_AMT_I
		             , CASE ISNULL(A.MONEY_UNIT,'')
		                    WHEN '' THEN ISNULL((SELECT SUB_CODE 
		                                            BSA100T   WITH (NOLOCK)
		                                          WHERE COMP_CODE = A.COMP_CODE
		                                            AND MAIN_CODE = 'B004' 
		                                            AND ISNULL(REF_CODE1,'') = 'Y'), '')
		                    ELSE         ISNULL(A.MONEY_UNIT,'')
		                END AS MONEY_UNIT
		          FROM AGJ800T A  WITH (NOLOCK)
		         WHERE A.COMP_CODE  = #{S_COMP_CODE}
		           AND A.AC_DATE    = #{AC_DATE}
		           AND A.DIV_CODE   = #{DIV_CODE}
		           AND A.INPUT_DIVI = #{TERM_DIVI}
		         GROUP BY A.COMP_CODE, A.ACCNT, A.AC_DATE, A.DIV_CODE, A.DEPT_CODE, A.MONEY_UNIT
		               ) A 
		                 LEFT OUTER JOIN ABA400T B 
		                              ON A.COMP_CODE = B.COMP_CODE
		                             AND A.ACCNT     = B.ACCNT
		 GROUP BY A.ACCNT, A.AC_DATE, A.DIV_CODE, A.DEPT_CODE, A.MONEY_UNIT
		        , B.ACCNT_SPEC, B.SPEC_DIVI, B.PROFIT_DIVI, B.JAN_DIVI, A.COMP_CODE
		 HAVING SUM(ISNULL(A.DR_AMT_I, 0)) != 0 
		         OR SUM(ISNULL(A.CR_AMT_I, 0)) != 0
		         OR SUM(ISNULL(A.DR_FOR_AMT_I, 0)) != 0 
		         OR SUM(ISNULL(A.CR_FOR_AMT_I, 0)) != 0
	</select>
	<delete id="agj800ukrService.deleteBalanceSet" parameterType="Map">
		DELETE FROM AGJ800T 
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND AC_DATE    = #{AC_DATE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND INPUT_DIVI = #{TERM_DIVI}
	</delete>
	<update id="agj800ukrService.insertBalanceSet" parameterType="Map">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query6
		IF EXISTS (SELECT 1 
		             FROM AGB100T   WITH (NOLOCK)
		            WHERE COMP_CODE  = #{COMP_CODE}
		              AND DIV_CODE   = #{DIV_CODE}
		              AND DEPT_CODE  = #{DEPT_CODE}
		              AND ACCNT      = #{ACCNT}
		              AND AC_DATE    = #{AC_DATE}
		              AND INPUT_PATH = #{TERM_DIVI}
		              AND MONEY_UNIT = #{MONEY_UNIT}
		
		           UPDATE AGB100T
		              SET DR_AMT_I       = ISNULL(DR_AMT_I,0) +  #{DR_AMT_I}
		                , CR_AMT_I       = ISNULL(CR_AMT_I,0) +  #{CR_AMT_I}
		                , DR_FOR_AMT_I   = ISNULL(DR_FOR_AMT_I,0) +  #{DR_FOR_AMT_I}
		                , CR_FOR_AMT_I   = ISNULL(CR_FOR_AMT_I,0) +  #{CR_FOR_AMT_I}
		                , UPDATE_DB_USER = #{S_USER_ID}
		                , UPDATE_DB_TIME = GETDATE()
		            WHERE COMP_CODE      = #{COMP_CODE}
		              AND DIV_CODE       = #{DIV_CODE}
		              AND DEPT_CODE      = #{DEPT_CODE}
		              AND ACCNT          = #{ACCNT}
		              AND AC_DATE        = #{AC_DATE}
		              AND INPUT_PATH     = #{TERM_DIVI}
		              AND MONEY_UNIT     = #{MONEY_UNIT}
		
		 ELSE
		
		           INSERT INTO AGB100T (
		                  COMP_CODE
		                , DIV_CODE
		                , DEPT_CODE
		                , ACCNT
		                , AC_DATE
		                , P_ACCNT
		                , DR_AMT_I
		                , CR_AMT_I
		                , DR_FOR_AMT_I
		                , CR_FOR_AMT_I
		                , MONEY_UNIT
		                , INPUT_PATH
		                , ACCNT_SPEC
		                , SPEC_DIVI
		                , PROFIT_DIVI
		                , JAN_DIVI
		                , BLN_DIVI
		                , UPDATE_DB_USER
		                , UPDATE_DB_TIME)
		           VALUES (
		                 #{COMP_CODE}
		                ,#{DIV_CODE}
		                ,#{DEPT_CODE}
		                ,#{ACCNT}
		                ,#{AC_DATE}
		                , '99999'
		                ,#{DR_AMT_I} 
		                ,#{CR_AMT_I}
		                ,#{DR_FOR_AMT_I} 
		                ,#{CR_FOR_AMT_I}
		                ,#{MONEY_UNIT}
		                ,#{TERM_DIVI} 
		                ,#{ACCNT_SPEC}
		                ,#{SPEC_DIVI}
		                ,#{PROFIT_DIVI}
		                ,#{JAN_DIVI}
		                ,#{BLN_DIVI}
		                ,#{S_USER_ID}
		                , GETDATE() )
	</update>
	<update id="agj800ukrService.updateBalanceSet" parameterType="Map">

   UPDATE AGB100T
      SET DR_AMT_I       = ISNULL(DR_AMT_I,0) -  #{DR_AMT_I}
        , CR_AMT_I       = ISNULL(CR_AMT_I,0) -  #{CR_AMT_I}
        , DR_FOR_AMT_I   = ISNULL(DR_FOR_AMT_I,0) -  #{DR_FOR_AMT_I}
        , CR_FOR_AMT_I   = ISNULL(CR_FOR_AMT_I,0) -  #{CR_FOR_AMT_I}
        , UPDATE_DB_USER = #{S_USER_ID}
        , UPDATE_DB_TIME = GETDATE()
    WHERE COMP_CODE      = #{COMP_CODE}
      AND DIV_CODE       = #{DIV_CODE}
      AND ACCNT          = #{ACCNT}
      AND AC_DATE        = #{AC_DATE}
      AND INPUT_PATH     = #{INPUT_PATH}
    
	</update>
	<select id="agj800ukrService.getAgb200" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query6
		 SELECT A.COMP_CODE
		      , A.ACCNT
		      , ISNULL((SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND ACCNT     = A.ACCNT), '') AS ACCNT_NAME
		      , A.AC_DATE
		      , A.DIV_CODE
		      , A.DEPT_CODE
		      , ISNULL((SELECT TREE_NAME 
		                  FROM BSA210T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND TREE_CODE = A.DEPT_CODE), '') AS DEPT_NAME
		      , ISNULL(A.BOOK_DATA1, '')   AS BOOK_DATA1
		      , ISNULL(A.BOOK_CODE1, '')   AS BOOK_CODE1
		      , ISNULL(A.BOOK_DATA2, '')   AS BOOK_DATA2
		      , ISNULL(A.BOOK_CODE2, '')   AS BOOK_CODE2
		      , SUM(ISNULL(A.DR_AMT_I, 0)) AS DR_AMT_I
		      , SUM(ISNULL(A.CR_AMT_I, 0)) AS CR_AMT_I
		      , CASE ISNULL(( SELECT JAN_DIVI 
		                        FROM ABA400T   WITH (NOLOCK)
		                       WHERE COMP_CODE = A.COMP_CODE
		                         AND ACCNT     = A.ACCNT ), '')
		             WHEN '1' THEN SUM(ISNULL(A.DR_AMT_I, 0)) - SUM(ISNULL(A.CR_AMT_I, 0))
		             WHEN '2' THEN SUM(ISNULL(A.CR_AMT_I, 0)) - SUM(ISNULL(A.DR_AMT_I, 0))
		             ELSE 0 
		         END AS BLN_I
		      , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		      , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		      , CASE ISNULL(( SELECT JAN_DIVI 
		                        FROM ABA400T   WITH (NOLOCK)
		                       WHERE COMP_CODE = A.COMP_CODE
		                         AND ACCNT     = A.ACCNT ), '')
		             WHEN '1' THEN SUM(ISNULL(A.DR_FOR_AMT_I, 0)) - SUM(ISNULL(A.CR_FOR_AMT_I, 0))
		             WHEN '2' THEN SUM(ISNULL(A.CR_FOR_AMT_I, 0)) - SUM(ISNULL(A.DR_FOR_AMT_I, 0))
		             ELSE 0 
		         END AS FOR_BLN_I
		      , ISNULL(A.MONEY_UNIT, '')  AS MONEY_UNIT
		      , ISNULL(B.ACCNT_SPEC, '')  AS ACCNT_SPEC
		      , ISNULL(B.SPEC_DIVI, '')   AS SPEC_DIVI
		      , ISNULL(B.PROFIT_DIVI, '') AS PROFIT_DIVI
		      , ISNULL(B.JAN_DIVI, '1')   AS JAN_DIVI
		      , CASE WHEN SUM(ISNULL(A.DR_AMT_I, 0)}gt; SUM(ISNULL(A.CR_AMT_I, 0)) THEN '1'
		             WHEN SUM(ISNULL(A.DR_AMT_I, 0)}lt; SUM(ISNULL(A.CR_AMT_I, 0)) THEN '2'
		             ELSE ISNULL(B.JAN_DIVI, '1') 
		         END AS BLN_DIVI
		 FROM (
		        SELECT A.COMP_CODE
		             , A.ACCNT
		             , A.AC_DATE
		             , A.DIV_CODE
		             , A.DEPT_CODE
		             , ISNULL(A.BOOK_DATA1, '') AS BOOK_DATA1
		             , ISNULL(A.BOOK_CODE1, '') AS BOOK_CODE1
		             , ISNULL(A.BOOK_DATA2, '') AS BOOK_DATA2
		             , ISNULL(A.BOOK_CODE2, '') AS BOOK_CODE2
		             , SUM(ISNULL(A.DR_AMT_I, 0)) AS DR_AMT_I
		             , SUM(ISNULL(A.CR_AMT_I, 0)) AS CR_AMT_I
		             , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		             , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		             , CASE ISNULL(A.MONEY_UNIT, '')
		                    WHEN '' THEN ISNULL(( SELECT SUB_CODE 
		                                            FROM BSA100T   WITH (NOLOCK)
		                                           WHERE COMP_CODE = A.COMP_CODE
		                                             AND MAIN_CODE = 'B004' 
		                                             AND REF_CODE1 = 'Y' ), '')
		                    ELSE         ISNULL(A.MONEY_UNIT, '')
		                END AS MONEY_UNIT
		         FROM AGJ800T A  WITH (NOLOCK)
		        WHERE A.COMP_CODE  = #{S_COMP_CODE}
		          AND A.AC_DATE    = #{AC_DATE}
		          AND A.DIV_CODE   = #{DIV_CODE}
		          AND A.INPUT_DIVI = #{TERM_DIVI}
		'              AND ISNULL(A.PROC_YN,'') = 'N'
		          AND ( ISNULL(A.BOOK_CODE1, '') != '' OR ISNULL(A.BOOK_CODE2, '') != '' )
		        GROUP BY A.COMP_CODE, A.ACCNT, A.AC_DATE, A.DIV_CODE, A.DEPT_CODE, A.MONEY_UNIT
		               , A.BOOK_DATA1, A.BOOK_DATA2, A.BOOK_CODE1, A.BOOK_CODE2
		             ) A 
		               LEFT OUTER JOIN ABA400T B   WITH (NOLOCK)
		                            ON A.COMP_CODE = B.COMP_CODE
		                           AND A.ACCNT     = B.ACCNT
		 GROUP BY A.COMP_CODE,  A.ACCNT,      A.AC_DATE,     A.DIV_CODE, A.DEPT_CODE
		        , A.MONEY_UNIT, A.BOOK_DATA1, A.BOOK_DATA2,  A.BOOK_CODE1, A.BOOK_CODE2
		        , B.ACCNT_SPEC, B.SPEC_DIVI,  B.PROFIT_DIVI, B.JAN_DIVI
		 HAVING SUM(ISNULL(A.DR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_AMT_I, 0)) != 0
		     OR SUM(ISNULL(A.DR_FOR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_FOR_AMT_I, 0)) != 0
	</select>
	<delete id="agj800ukrService.deleteAgb200" parameterType="Map">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query8
		  DELETE FROM AGB200T
		  WHERE COMP_CODE  = #{COMP_CODE}
		    AND DIV_CODE   = #{DIV_CODE}
		    AND AC_DATE    = #{AC_DATE}
		    AND INPUT_PATH = #{TERM_DIVI}
	</delete>
	<update id="agj800ukrService.insertAgb200" parameterType="Map">
	    --agj800ukr.Cagj800ukr [fnBalanceSet] Query107
		 IF EXISTS (SELECT 1 
		              FROM AGB200T   WITH (NOLOCK)
		             WHERE COMP_CODE  = #{COMP_CODE}
		               AND DIV_CODE   = #{DIV_CODE}
		               AND DEPT_CODE  = #{DEPT_CODE}
		               AND ACCNT      = #{ACCNT}
		               AND AC_DATE    = #{AC_DATE}
		               AND INPUT_PATH = #{TERM_DIVI}
		               AND MONEY_UNIT = #{MONEY_UNIT}
		               AND BOOK_DATA1 = #{BOOK_DATA1}
		               AND BOOK_DATA2 = #{BOOK_DATA2})
		
		            UPDATE AGB200T
		               SET DR_AMT_I       = ISNULL(DR_AMT_I,0) + #{DR_AMT_I}
		                 , CR_AMT_I       = ISNULL(CR_AMT_I,0) + #{CR_AMT_I}
		                 , BLN_I          = ISNULL(BLN_I,0) +  #{BLN_I}
		                 , DR_FOR_AMT_I   = ISNULL(DR_FOR_AMT_I,0) +  #{DR_FOR_AMT_I}
		                 , CR_FOR_AMT_I   = ISNULL(CR_FOR_AMT_I,0) +  #{CR_FOR_AMT_I}
		                 , FOR_BLN_I      = ISNULL(FOR_BLN_I,0) +  #{FOR_BLN_I}
		                 , UPDATE_DB_USER = #{S_USER_ID}
		                 , UPDATE_DB_TIME = GETDATE()
		             WHERE COMP_CODE  = #{COMP_CODE}
		               AND DIV_CODE   = #{DIV_CODE}
		               AND DEPT_CODE  = #{DEPT_CODE}
		               AND ACCNT      = #{ACCNT}
		               AND AC_DATE    = #{AC_DATE}
		               AND INPUT_PATH = #{TERM_DIVI}
		               AND MONEY_UNIT = #{MONEY_UNIT}
		               AND BOOK_DATA1 = #{BOOK_DATA1}
		               AND BOOK_DATA2 = #{BOOK_DATA2}
		 ELSE
		            INSERT INTO AGB200T (
		                   COMP_CODE
		                 , DIV_CODE
		                 , DEPT_CODE
		                 , ACCNT
		                 , AC_DATE
		                 , P_ACCNT
		                 , BOOK_DATA1
		                 , BOOK_DATA2
		                 , BOOK_CODE1
		                 , BOOK_CODE2
		                 , DR_AMT_I
		                 , CR_AMT_I
		                 , BLN_I
		                 , DR_FOR_AMT_I
		                 , CR_FOR_AMT_I
		                 , FOR_BLN_I
		                 , MONEY_UNIT
		                 , INPUT_PATH
		                 , ACCNT_SPEC
		                 , SPEC_DIVI
		                 , PROFIT_DIVI
		                 , JAN_DIVI
		                 , BLN_DIVI
		                 , UPDATE_DB_USER
		                 , UPDATE_DB_TIME)
		            VALUES (
		                   #{COMP_CODE}
		                 , #{DIV_CODE}
		                 , #{DEPT_CODE}
		                 , #{ACCNT}
		                 , #{AC_DATE}
		                 , '99999'
		                 , #{BOOK_DATA1}
		                 , #{BOOK_DATA2}
		                 , #{BOOK_CODE1}
		                 , #{BOOK_CODE2}
		                 , #{DR_AMT_I}
		                 , #{CR_AMT_I}
		                 , #{BLN_I}
		                 , #{DR_FOR_AMT_I}
		                 , #{CR_FOR_AMT_I}
		                 , #{FOR_BLN_I}
		                 , #{MONEY_UNIT}
		                 , #{TERM_DIVI}
		                 , #{ACCNT_SPEC}
		                 , #{SPEC_DIVI}
		                 , #{PROFIT_DIVI}
		                 , #{JAN_DIVI}
		                 , #{BLN_DIVI}
		                 , #{S_USER_ID}
		                 , GETDATE() )
	</update>
	<select id="agj800ukrService.getAgb500" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query9
		 SELECT A.COMP_CODE
		      , A.ACCNT
		      , ISNULL((SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND ACCNT     = A.ACCNT), '') AS ACCNT_NAME
		      , A.AC_DATE
		      , A.DIV_CODE
		      , A.DEPT_CODE
		      , ISNULL((SELECT TREE_NAME 
		                  FROM BSA210T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND TREE_CODE = A.DEPT_CODE), '') AS DEPT_NAME
		      , ISNULL(A.BOOK_DATA1, '')   AS BOOK_DATA1
		      , ISNULL(A.BOOK_CODE1, '')   AS BOOK_CODE1
		      , ISNULL(A.BOOK_DATA2, '')   AS BOOK_DATA2
		      , ISNULL(A.BOOK_CODE2, '')   AS BOOK_CODE2
		      , SUM(ISNULL(A.DR_AMT_I, 0)) AS DR_AMT_I
		      , SUM(ISNULL(A.CR_AMT_I, 0)) AS CR_AMT_I
		      , CASE ISNULL(( SELECT JAN_DIVI 
		                        FROM ABA400T   WITH (NOLOCK)
		                       WHERE COMP_CODE = A.COMP_CODE
		                         AND ACCNT     = A.ACCNT ), '')
		             WHEN '1' THEN SUM(ISNULL(A.DR_AMT_I, 0)) - SUM(ISNULL(A.CR_AMT_I, 0))
		             WHEN '2' THEN SUM(ISNULL(A.CR_AMT_I, 0)) - SUM(ISNULL(A.DR_AMT_I, 0))
		             ELSE 0 END AS BLN_I
		      , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		      , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		      , CASE ISNULL(( SELECT JAN_DIVI 
		                        FROM ABA400T   WITH (NOLOCK)
		                       WHERE COMP_CODE = A.COMP_CODE
		                         AND ACCNT     = A.ACCNT ), '')
		             WHEN '1' THEN SUM(ISNULL(A.DR_FOR_AMT_I, 0)) - SUM(ISNULL(A.CR_FOR_AMT_I, 0))
		             WHEN '2' THEN SUM(ISNULL(A.CR_FOR_AMT_I, 0)) - SUM(ISNULL(A.DR_FOR_AMT_I, 0))
		             ELSE 0 
		         END                       AS FOR_BLN_I
		      , ISNULL(A.MONEY_UNIT, '')   AS MONEY_UNIT
		      , ISNULL(B.ACCNT_SPEC, '')   AS ACCNT_SPEC
		      , ISNULL(B.SPEC_DIVI, '')    AS SPEC_DIVI
		      , ISNULL(B.PROFIT_DIVI, '')  AS PROFIT_DIVI
		      , ISNULL(B.JAN_DIVI, '1')    AS JAN_DIVI
		      , CASE WHEN SUM(ISNULL(A.DR_AMT_I, 0)}gt; SUM(ISNULL(A.CR_AMT_I, 0)) THEN '1'
		             WHEN SUM(ISNULL(A.DR_AMT_I, 0)}lt; SUM(ISNULL(A.CR_AMT_I, 0)) THEN '2'
		             ELSE ISNULL(B.JAN_DIVI, '1') 
		         END                       AS BLN_DIVI
		      , ISNULL(A.EXCHG_RATE_O, 0) AS EXCHG_RATE_O
		 FROM (
		        SELECT A.COMP_CODE
		             , A.ACCNT
		             , A.AC_DATE
		             , A.DIV_CODE
		             , A.DEPT_CODE
		             , ISNULL(A.BOOK_DATA1, '') AS BOOK_DATA1
		             , ISNULL(A.BOOK_CODE1, '') AS BOOK_CODE1
		             , ISNULL(A.BOOK_DATA2, '') AS BOOK_DATA2
		             , ISNULL(A.BOOK_CODE2, '') AS BOOK_CODE2
		             , SUM(ISNULL(A.DR_AMT_I, 0)) AS DR_AMT_I
		             , SUM(ISNULL(A.CR_AMT_I, 0)) AS CR_AMT_I
		             , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		             , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		             , CASE ISNULL(A.MONEY_UNIT, '')
		                    WHEN '' THEN ISNULL(( SELECT SUB_CODE 
		                                            FROM BSA100T   WITH (NOLOCK)
		                                           WHERE COMP_CODE = A.COMP_CODE
		                                             AND MAIN_CODE = 'B004' 
		                                             AND REF_CODE1 = 'Y' ), '')
		                    ELSE         ISNULL(A.MONEY_UNIT, '')
		                END AS MONEY_UNIT
		             , ISNULL(A.EXCHG_RATE_O, 0) AS EXCHG_RATE_O
		          FROM AGJ800T A  WITH (NOLOCK)
		         WHERE A.COMP_CODE  = #{S_COMP_CODE}
		           AND A.AC_DATE    = #{AC_DATE}
		           AND A.DIV_CODE   = #{DIV_CODE}
		           AND A.INPUT_DIVI = #{TERM_DIVI}
		           AND ISNULL(A.PROC_YN,'') = 'N'
		           AND ( ISNULL(A.BOOK_CODE1, '') != '' OR ISNULL(A.BOOK_CODE2, '') != '' )
		         GROUP BY A.COMP_CODE,  A.ACCNT,      A.AC_DATE,      A.DIV_CODE
		             ,    A.DEPT_CODE,  A.MONEY_UNIT, A.EXCHG_RATE_O
		             ,    A.BOOK_DATA1, A.BOOK_DATA2, A.BOOK_CODE1,   A.BOOK_CODE2
		     ) A LEFT OUTER JOIN ABA400T B   WITH (NOLOCK)
		                      ON A.COMP_CODE = B.COMP_CODE
		                     AND A.ACCNT     = B.ACCNT
		 WHERE SUBSTRING(ISNULL(B.SPEC_DIVI,''),1,1) IN ('B', 'C')
		 GROUP BY A.COMP_CODE,    A.ACCNT,      A.AC_DATE,     A.DIV_CODE,   A.DEPT_CODE,   A.MONEY_UNIT
		     ,    A.EXCHG_RATE_O, A.BOOK_DATA1, A.BOOK_DATA2,  A.BOOK_CODE1, A.BOOK_CODE2
		     ,    B.ACCNT_SPEC,   B.SPEC_DIVI,  B.PROFIT_DIVI, B.JAN_DIVI
		 HAVING SUM(ISNULL(A.DR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_AMT_I, 0)) != 0
		     OR SUM(ISNULL(A.DR_FOR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_FOR_AMT_I, 0)) != 0
	</select>
	<update id="agj800ukrService.insertAgb500" parameterType="Map">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query10
		DECLARE @SLIP_SEQ NUMERIC
		IF NOT EXISTS (
		                SELECT 1 
		                  FROM AGB500T  WITH (NOLOCK)
		                 WHERE COMP_CODE = #{COMP_CODE}
		                   AND AC_DATE   = #{BASE_AC_DATE}
		                   AND SLIP_NUM  = 0
		                 )
		    SET @SLIP_SEQ = 1
		ELSE
		    SELECT @SLIP_SEQ = MAX(SLIP_SEQ) + 1 
		      FROM AGB500T  WITH (NOLOCK)
		     WHERE COMP_CODE = #{COMP_CODE}
		       AND AC_DATE   = #{BASE_AC_DATE}
		       AND SLIP_NUM  = 0
		    INSERT INTO AGB500T (
		           COMP_CODE
		         , AC_DATE
		         , SLIP_NUM
		         , SLIP_SEQ
		         , ACCNT
		         , BANK_CODE
		         , SAVE_CODE
		         , MONEY_UNIT
		         , EXCHG_RATE_O
		         , DR_AMT_I
		         , CR_AMT_I
		         , DR_FOR_AMT_I
		         , CR_FOR_AMT_I
		         , DIV_CODE
		         , DEPT_CODE
		         , DEPT_NAME
		         , ACCNT_SPEC
		         , SPEC_DIVI
		         , PROFIT_DIVI
		         , REMARK
		         , INPUT_PATH
		         , UPDATE_DB_USER
		         , UPDATE_DB_TIME )
		    VALUES (
		           #{COMP_CODE}
		         , #{AC_DATE}
		         ,  0
		         ,  @SLIP_SEQ
		         , #{ACCNT}
		         , #{BANK_CODE}
		         , #{SAVE_CODE}
		         , #{MONEY_UNIT}
		         , #{EXCHG_RATE_O}
		         , #{DR_AMT_I}
		         , #{CR_AMT_I}
		         , #{DR_FOR_AMT_I} 
		         , #{CR_FOR_AMT_I}
		         , #{DIV_CODE}
		         , #{DEPT_CODE}
		         , #{DEPT_NAME}
		         , #{ACCNT_SPEC}
		         , #{SPEC_DIVI}
		         , #{PROFIT_DIVI}
		         , #{REMARK}         ' 기초(년)월 잔액
		         , #{TERM_DIVI}
		         , #(S_USER_ID}
		         , GETDATE() )
	</update>
	<select id="agj800ukrService.getPendingAccount" parameterType="Map" resultType="rMap">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query11
		 SELECT A.COMP_CODE
		      , A.ACCNT
		      , ISNULL((SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND ACCNT     = A.ACCNT), '') AS ACCNT_NAME
		      , A.AC_DATE
		      , A.DIV_CODE
		      , A.DEPT_CODE
		      , ISNULL((SELECT TREE_NAME 
		                  FROM BSA210T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND TREE_CODE = A.DEPT_CODE), '') AS DEPT_NAME
		      , ISNULL(A.PEND_CODE, '') AS PEND_CODE
		      , ISNULL((SELECT AC_NAME 
		                  FROM ABA200T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND AC_CD = A.PEND_CODE), '') AS PEND_NAME
		      , ISNULL(A.PEND_DATA_CODE, '') AS PEND_DATA_CODE
		      , ISNULL(A.MONEY_UNIT, '') AS MONEY_UNIT
		      , SUM(ISNULL(A.DR_AMT_I, 0)) AS DR_AMT_I
		      , SUM(ISNULL(A.CR_AMT_I, 0)) AS CR_AMT_I
		      , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		      , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		      , ISNULL((SELECT JAN_DIVI 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND ACCNT     = A.ACCNT), '') AS JAN_DIVI
		      , ISNULL(A.EXCHG_RATE_O, 0) AS EXCHG_RATE_O
		 FROM (
		        SELECT A.COMP_CODE
		             , A.ACCNT
		             , A.AC_DATE
		             , A.DIV_CODE
		             , A.DEPT_CODE
		             , CASE ISNULL(B.PEND_CODE, '') WHEN ISNULL(A.BOOK_CODE1, '') THEN ISNULL(A.BOOK_CODE1, '')
		                                            WHEN ISNULL(A.BOOK_CODE2, '') THEN ISNULL(A.BOOK_CODE2, '')
		                                            ELSE '' 
		                END PEND_CODE
		             , CASE ISNULL(B.PEND_CODE, '') WHEN ISNULL(A.BOOK_CODE1, '') THEN ISNULL(A.BOOK_DATA1, '')
		                                            WHEN ISNULL(A.BOOK_CODE2, '') THEN ISNULL(A.BOOK_DATA2, '')
		                                            ELSE '' 
		                END PEND_DATA_CODE
		<if test="TERM_DIVI == &quot;1&quot;">
		If bParam(SvParam.term_divi) = 1 Then
		             , CASE ISNULL(B.JAN_DIVI, '') WHEN '1' THEN SUM(ISNULL(A.DR_AMT_I, 0)) - SUM(ISNULL(A.CR_AMT_I, 0)) 
		                                                    ELSE 0 
		                END AS DR_AMT_I
		             , CASE ISNULL(B.JAN_DIVI, '') WHEN '2' THEN SUM(ISNULL(A.CR_AMT_I, 0)) - SUM(ISNULL(A.DR_AMT_I, 0)) 
		                                                    ELSE 0 
		                END AS CR_AMT_I
		             , CASE ISNULL(B.JAN_DIVI, '') WHEN '1' THEN SUM(ISNULL(A.DR_FOR_AMT_I, 0)) - SUM(ISNULL(A.CR_FOR_AMT_I, 0)) 
		                                                    ELSE 0 
		                END AS DR_FOR_AMT_I
		             , CASE ISNULL(B.JAN_DIVI, '') WHEN '2' THEN SUM(ISNULL(A.CR_FOR_AMT_I, 0)) - SUM(ISNULL(A.DR_FOR_AMT_I, 0)) 
		                                                    ELSE 0 
		                END AS CR_FOR_AMT_I
		</if>
		<if test="TERM_DIVI == &quot;2&quot;">
		             , B.JAN_DIVI
		             , SUM(ISNULL(A.DR_AMT_I, 0))     AS DR_AMT_I
		             , SUM(ISNULL(A.CR_AMT_I, 0))     AS CR_AMT_I
		             , SUM(ISNULL(A.DR_FOR_AMT_I, 0)) AS DR_FOR_AMT_I
		             , SUM(ISNULL(A.CR_FOR_AMT_I, 0)) AS CR_FOR_AMT_I
		</if>
		
		            , CASE ISNULL(A.MONEY_UNIT, '')
		                   WHEN '' THEN ISNULL((SELECT SUB_CODE 
		                                          FROM BSA100T   WITH (NOLOCK)
		                                         WHERE COMP_CODE = A.COMP_CODE
		                                           AND MAIN_CODE = 'B004' 
		                                           AND REF_CODE1 = 'Y'),'')
		                   ELSE         ISNULL(A.MONEY_UNIT, '')
		               END AS MONEY_UNIT
		             , ISNULL(A.EXCHG_RATE_O, 0) AS EXCHG_RATE_O
		          FROM AGJ800T A 
		                       LEFT OUTER JOIN ABA400T B   WITH (NOLOCK)
		                                    ON A.COMP_CODE = B.COMP_CODE
		                                   AND A.ACCNT     = B.ACCNT
		         WHERE A.COMP_CODE  = #{COMP_CODE}
		           AND A.AC_DATE    = #{AC_DATE}
		           AND A.DIV_CODE   = #{DIV_CODE}
		           AND A.INPUT_DIVI = #{TERM_DIVI}
		           AND ISNULL(A.PROC_YN,'') = 'N'
		           AND ISNULL(B.PEND_YN,'') = 'Y'
		         GROUP BY A.ACCNT      , A.AC_DATE  ,  A.DIV_CODE, A.DEPT_CODE , A.MONEY_UNIT
		             , A.EXCHG_RATE_O  , B.PEND_CODE,  B.JAN_DIVI, A.BOOK_DATA1, A.BOOK_DATA2
		             , A.BOOK_CODE1    , A.BOOK_CODE2, A.COMP_CODE
		     ) A
		 GROUP BY A.COMP_CODE,    A.ACCNT,      A.AC_DATE,       A.DIV_CODE
		        , A.DEPT_CODE,    A.MONEY_UNIT, A.EXCHG_RATE_O,  A.PEND_CODE, A.PEND_DATA_CODE
		 HAVING SUM(ISNULL(A.DR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_AMT_I, 0)) != 0
		     OR SUM(ISNULL(A.DR_FOR_AMT_I, 0)) != 0 
		     OR SUM(ISNULL(A.CR_FOR_AMT_I, 0)) != 0
	</select>
	<update id="agj800ukrService.createPending" parameterType="Map">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query12
		  DECLARE @SLIP_SEQ NUMERIC
		  IF NOT EXISTS (
		                 SELECT 1 
		                   FROM AGB300T  WITH (NOLOCK)
		                  WHERE COMP_CODE    = #{S_COMP_CODE}
		                    AND ACCNT        = #{ACCNT}
		                    AND ORG_AC_DATE  = #{BASE_AC_DATE}
		                    AND ORG_SLIP_NUM = 0
		   )
		      SET @SLIP_SEQ = 1
		  ELSE
		          SELECT @SLIP_SEQ   = MAX(ORG_SLIP_SEQ) + 1 FROM AGB300T  WITH (NOLOCK)
		           WHERE COMP_CODE   = #{COMP_CODE}
		             AND ACCNT       = #{ACCNT}
		             AND ORG_AC_DATE = #{BASE_AC_DATE}
		             AND ORG_SLIP_NUM = 0
		          INSERT INTO AGB300T (
		                 COMP_CODE
		               , ACCNT
		               , ORG_AC_DATE
		               , ORG_SLIP_NUM
		               , ORG_SLIP_SEQ
		               , PEND_CODE
		               , PEND_DATA_CODE
		               , DIV_CODE
		               , DEPT_CODE
		               , DEPT_NAME
		               , ORG_AMT_I
		               , FOR_ORG_AMT_I
		               , J_AMT_I
		               , FOR_J_AMT_I
		               , BLN_I
		               , FOR_BLN_I
		               , MONEY_UNIT
		               , EXCHG_RATE_O
		               , INPUT_PATH
		               , UPDATE_DB_USER
		               , UPDATE_DB_TIME )
		          VALUES (
		                 #{COMP_CODE} 
		               , #{ACCNT}
		               , #{AC_DATE}
		               , 0
		               , @SLIP_SEQ
		               , #{PEND_CODE}
		               , #{PEND_DATA_CODE}
		               , #{DIV_CODE}
		               , #{DEPT_CODE}
		               , #{DEPT_NAME}
		               , #{D_LOC_AMT}
		               , #{D_FOR_AMT}
		               ,  0
		               ,  0 
		               , #{D_LOC_AMT}
		               , #{D_FOR_AMT} 
		               , #{MONEY_UNIT}
		               , #{EXCHG_RATE_O} 
		               , #{TERM_DIVI}
		               , #{S_USER_ID}
		               , GETDATE() )
	</update>
	<select id="agj800ukrService.setoffPending" parameterType="Map" resultType="rMap">
		 --agj800ukr.Cagj800ukr [fnBalanceSet] Query13
		  SELECT A.COMP_CODE
		       , A.ACCNT
		       , A.ORG_AC_DATE
		       , A.ORG_SLIP_NUM
		       , A.ORG_SLIP_SEQ
		       , A.DIV_CODE
		       , A.DEPT_CODE
		       , A.DEPT_NAME
		       , A.ORG_AMT_I
		       , A.FOR_ORG_AMT_I
		       , A.J_AMT_I
		       , A.FOR_J_AMT_I
		       , A.BLN_I
		       , A.FOR_BLN_I
		       , A.MONEY_UNIT
		       , A.EXCHG_RATE_O
		       , A.PEND_CODE
		       , A.PEND_DATA_CODE
		       , A.INPUT_PATH
		    FROM AGB300T A  WITH (NOLOCK)
		   WHERE A.COMP_CODE      = #{COMP_CODE}
		     AND A.ACCNT          = #{ACCNT}
		     AND A.DIV_CODE       = #{DIV_CODE}
		     AND A.ORG_SLIP_NUM   = 0
		     AND A.MONEY_UNIT     = #{MONEY_UNIT}
		     AND A.EXCHG_RATE_O   = #{EXCHG_RATE_O}
		     AND A.PEND_CODE      = #{PEND_CODE}
		     AND A.PEND_DATA_CODE = #{PEND_DATA_CODE}
		     AND A.BLN_I != 0
		   ORDER BY A.INPUT_PATH, A.ORG_SLIP_SEQ
	</select>
	<update id="agj800ukrService.updateAmtAgb300" parameterType="Map">
		  --agj800ukr.Cagj800ukr [fnBalanceSet] Query14
		 UPDATE AGB300T
		    SET 
		    <if test="@foren.Ognl@isEmpty(D_LOC_AMT)"> 
		    	J_AMT_I      = ORG_AMT_I
		    	,BLN_I       = O
		    </if>
			<if test="@foren.Ognl@isNotEmpty(D_LOC_AMT)"> 
		    	J_AMT_I      = ISNULL(J_AMT_I,0) + #{D_LOC_AMT}
		    	,BLN_I      = ISNULL(BLN_I,0) - #{D_LOC_AMT}
			</if>
		  WHERE COMP_CODE    = #{COMP_CODE}
		    AND ACCNT        = #{ACCNT}
		    AND ORG_AC_DATE  = #{ORG_AC_DATE}
		    AND ORG_SLIP_NUM = #{ORG_SLIP_NUM}
		    AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
		          
	</update>
	<update id="agj800ukrService.updateForignAmtAgb300" parameterType="Map">
		  --agj800ukr.Cagj800ukr [fnBalanceSet] Query14
		 UPDATE AGB300T
		    SET 
		    <if test="@foren.Ognl@isEmpty(D_FOR_AMT)"> 
		    	FOR_J_AMT_I      = FOR_ORG_AMT_I
		    	,FOR_BLN_I       = O
		    </if>
			<if test="@foren.Ognl@isNotEmpty(D_FOR_AMT)"> 
		    	FOR_J_AMT_I      = ISNULL(FOR_J_AMT_I,0) + #{D_FOR_AMT}
		    	,FOR_BLN_I      = ISNULL(FOR_BLN_I,0) - #{D_FOR_AMT}
			</if>
		  WHERE COMP_CODE    = #{COMP_CODE}
		    AND ACCNT        = #{ACCNT}
		    AND ORG_AC_DATE  = #{ORG_AC_DATE}
		    AND ORG_SLIP_NUM = #{ORG_SLIP_NUM}
		    AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
		          
	</update>
	<update id="agj800ukrService.createSetoffPending" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query20
		DECLARE @SEQ NUMERIC
		IF NOT EXISTS (
		               SELECT 1 
		                 FROM AGB310T  WITH (NOLOCK)
		                WHERE COMP_CODE    = #{COMP_CODE}
		                  AND ACCNT        = #{ACCNT}
		                  AND ORG_AC_DATE  = #{ORG_AC_DATE}
		                  AND ORG_SLIP_NUM = #{ORG_SLIP_NUM} 
		                  AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ} 
		 )
		        SET @SEQ = 1
		ELSE
		        SELECT @SEQ = MAX(SEQ) + 1
		          FROM AGB310T  WITH (NOLOCK)
		         WHERE COMP_CODE    = #{COMP_CODE}
		           AND ACCNT        = #{ACCNT}
		           AND ORG_AC_DATE  = #{ORG_AC_DATE}
		           AND ORG_SLIP_NUM = #{ORG_SLIP_NUM} 
		           AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ} 
		        INSERT INTO AGB310T (
		               COMP_CODE
		             , ACCNT
		             , ORG_AC_DATE
		             , ORG_SLIP_NUM
		             , ORG_SLIP_SEQ
		             , SEQ, J_DATE
		             , J_SLIP_NUM
		             , J_SLIP_SEQ
		             , PEND_CODE
		             , PEND_DATA_CODE
		             , DIV_CODE
		             , DEPT_CODE
		             , DEPT_NAME
		             , J_AMT_I
		             , FOR_J_AMT_I
		             , MONEY_UNIT
		             , EXCHG_RATE_O
		             , INPUT_PATH
		             , UPDATE_DB_USER
		             , UPDATE_DB_TIME )
		        VALUES (
		               #{ACCNT}
		             , #{ORG_AC_DATE}
		             , #{ORG_SLIP_NUM} 
		             , #{ORG_SLIP_SEQ}
		             , @SEQ
		             , #{BASE_AC_DATE}
		             , 0
		             , 0
		             , #{PEND_CODE}
		             , #{PEND_DATA_CODE}
		             , #{DIV_CODE}
		             , #{DEPT_CODE}
		             , #{DEPT_NAME}
		             , #{D_LOC_AMT}
		             , #{D_FOR_AMT}
		             , #{MONEY_UNIT}
		             , #{EXCHG_RATE_O}
		             , #{TERM_DIVI}
		             , #{S_USER_ID}
		             , GETDATE() )
	</update>
	<update id="agj800ukrService.insertAgb300" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query21
		DECLARE @SLIP_SEQ NUMERIC
		IF NOT EXISTS (
		               SELECT 1 
		                 FROM AGB300T  WITH (NOLOCK)
		                WHERE COMP_CODE    = #{COMP_CODE}
		                  AND ACCNT        = #{ACCNT}
		                  AND ORG_AC_DATE  = #{BASE_AC_DATE}
		                  AND ORG_SLIP_NUM = 0
		 )
		   SET @SLIP_SEQ = 1
		ELSE
		        SELECT @SLIP_SEQ = MAX(ORG_SLIP_SEQ) + 1 
		          FROM AGB300T  WITH (NOLOCK)
		         WHERE COMP_CODE    = #{COMP_CODE}
		           AND ACCNT        = #{ACCNT}
		           AND ORG_AC_DATE  = #{BASE_AC_DATE}
		           AND ORG_SLIP_NUM = 0
		        INSERT INTO AGB300T (
		               COMP_CODE
		             , ACCNT
		             , ORG_AC_DATE
		             , ORG_SLIP_NUM
		             , ORG_SLIP_SEQ
		             , PEND_CODE
		             , PEND_DATA_CODE
		             , DIV_CODE
		             , DEPT_CODE
		             , DEPT_NAME
		             , ORG_AMT_I
		             , FOR_ORG_AMT_I
		             , J_AMT_I
		             , FOR_J_AMT_I
		             , BLN_I
		             , FOR_BLN_I
		             , MONEY_UNIT
		             , EXCHG_RATE_O
		             , INPUT_PATH
		             , UPDATE_DB_USER
		             , UPDATE_DB_TIME )
		        VALUES (
		               #{ACCNT}
		             , #{ACCNT}
		             , #{AC_DATE}
		             , 0
		             , @SLIP_SEQ
		             , #{PEND_CODE}
		             , #{PEND_DATA_CODE}
		             , #{DIV_CODE}
		             , #{DEPT_CODE}
		  
		  <if test="JAN_DIVI == &quot;1&quot;">
		                 , #{DEPT_NAME}
		                 , #{DR_AMT_I}
		                 , #{DR_FOR_AMT_I}
		                 , 0
		                 , 0
		                 , #{DR_AMT_I}
		                 , #{DR_FOR_AMT_I}
		                 , #{MONEY_UNIT}
		  </if>
		  <if test="JAN_DIVI != &quot;1&quot;">
		                 , #{DEPT_NAME}
		                 , #{CR_AMT_I}
		                 , #{CR_FOR_AMT_I}
		                 , 0
		                 , 0
		                 , #{CR_AMT_I}
		                 , #{CR_FOR_AMT_I}
		                 , #{MONEY_UNIT}
		  </if>
		  
		             , #{EXCHG_RATE_O}
		             , #{TERM_DIVI}
		             , #{S_USER_ID}
		             , GETDATE() )
	</update>
	<update id="agj800ukrService.insertAgb310" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query21
		DECLARE @SLIP_SEQ NUMERIC
		IF NOT EXISTS (
		               SELECT 1 
		                 FROM AGB300T  WITH (NOLOCK)
		                WHERE COMP_CODE    = #{COMP_CODE}
		                  AND ACCNT        = #{ACCNT}
		                  AND ORG_AC_DATE  = #{base_month}
		                  AND ORG_SLIP_NUM = 0
		 )
		   SET @SLIP_SEQ = 1
		ELSE
		        SELECT @SLIP_SEQ = MAX(ORG_SLIP_SEQ) + 1 
		          FROM AGB300T  WITH (NOLOCK)
		         WHERE COMP_CODE    = #{COMP_CODE}
		           AND ACCNT        = #{ACCNT}
		           AND ORG_AC_DATE  = #{BASE_AC_DATE}
		           AND ORG_SLIP_NUM = 0
		        INSERT INTO AGB300T (
		               COMP_CODE
		             , ACCNT
		             , ORG_AC_DATE
		             , ORG_SLIP_NUM
		             , ORG_SLIP_SEQ
		             , PEND_CODE
		             , PEND_DATA_CODE
		             , DIV_CODE
		             , DEPT_CODE
		             , DEPT_NAME
		             , ORG_AMT_I
		             , FOR_ORG_AMT_I
		             , J_AMT_I
		             , FOR_J_AMT_I
		             , BLN_I
		             , FOR_BLN_I
		             , MONEY_UNIT
		             , EXCHG_RATE_O
		             , INPUT_PATH
		             , UPDATE_DB_USER
		             , UPDATE_DB_TIME )
		        VALUES (
		               #{ACCNT}
		             , #{ACCNT}
		             , #{AC_DATE}
		             , 0
		             , @SLIP_SEQ
		             , #{PEND_CODE}
		             , #{PEND_DATA_CODE}
		             , #{DIV_CODE}
		             , #{DEPT_CODE}
		  
		  <if test="JAN_DIVI == &quot;1&quot;">
		                 , #{DEPT_NAME}
		                 , #{DR_AMT_I}
		                 , #{DR_FOR_AMT_I}
		                 , 0
		                 , 0
		                 , #{DR_AMT_I}
		                 , #{DR_FOR_AMT_I}
		                 , #{MONEY_UNIT}
		  </if>
		  <if test="JAN_DIVI != &quot;1&quot;">
		                 , #{DEPT_NAME}
		                 , #{CR_AMT_I}
		                 , #{CR_FOR_AMT_I}
		                 , 0
		                 , 0
		                 , #{CR_AMT_I}
		                 , #{CR_FOR_AMT_I}
		                 , #{MONEY_UNIT}
		  </if>
		  
		             , #{EXCHG_RATE_O}
		             , #{TERM_DIVI}
		             , #{S_USER_ID}
		             , GETDATE() )
	</update>
	<update id="agj800ukrService.updateFlag" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceSet] Query30
		UPDATE AGJ800T
		   SET PROC_YN    = 'Y'
		 WHERE COMP_CODE  = #{COMP_CODE}
		   AND AC_DATE    = #{AC_DATE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND INPUT_DIVI = #{TERM_DIVI}
		   AND PROC_YN    = 'N'
		
	</update>
	<select id="agj800ukrService.getTotalbalance" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query31
		SELECT A.AC_DATE
		     , ISNULL(SUM(A.DR_AMT_I), 0) AS DR_AMT_I
		     , ISNULL(SUM(A.CR_AMT_I), 0) AS CR_AMT_I
		     , ISNULL(MAX(A.PROC_YN),'N') AS PROC_YN
		  FROM AGJ800T A  WITH (NOLOCK)
		 WHERE A.COMP_CODE  = #{COMP_CODE}
		   AND A.AC_DATE    = #{BASE_AC_DATE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.INPUT_DIVI = #{TERM_DIVI}
		'   AND ISNULL(A.PROC_YN,'') = 'Y'
		 GROUP BY A.AC_DATE
	</select>
	<select id="agj800ukrService.getSetOffPending" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query34
		SELECT A.COMP_CODE
		     , A.ACCNT
		     , (SELECT ACCNT_NAME 
		          FROM ABA400T   WITH (NOLOCK)
		         WHERE COMP_CODE = A.COMP_CODE
		           AND ACCNT     = A.ACCNT) AS ACCNT_NAME
		     , A.DEPT_CODE
		     , A.DEPT_NAME
		     , A.PEND_CODE
		     , (SELECT AC_NAME 
		          FROM ABA200T   WITH (NOLOCK)
		         WHERE COMP_CODE = A.COMP_CODE
		           AND AC_CD     = A.PEND_CODE) AS PEND_NAME
		     , A.PEND_DATA_CODE
		     , A.MONEY_UNIT
		     , A.ORG_AC_DATE
		     , A.ORG_SLIP_NUM
		     , A.ORG_SLIP_SEQ
		     , ISNULL(A.J_AMT_I,0) J_AMT_I
		     , ISNULL(A.FOR_J_AMT_I,0) FOR_J_AMT_I
		     , ISNULL((SELECT ORG_AMT_I 
		                 FROM AGB300T   WITH (NOLOCK)
		                WHERE COMP_CODE    = A.COMP_CODE
		                  AND ACCNT        = A.ACCNT 
		                  AND ORG_AC_DATE  = A.ORG_AC_DATE 
		                  AND ORG_SLIP_NUM = A.ORG_SLIP_NUM 
		                  AND ORG_SLIP_SEQ = A.ORG_SLIP_SEQ),0) AS ORG_AMT_I
		     , ISNULL((SELECT FOR_ORG_AMT_I 
		                 FROM AGB300T   WITH (NOLOCK)
		                WHERE COMP_CODE    = A.COMP_CODE
		                  AND ACCNT        = A.ACCNT 
		                  AND ORG_AC_DATE  = A.ORG_AC_DATE 
		                  AND ORG_SLIP_NUM = A.ORG_SLIP_NUM 
		                  AND ORG_SLIP_SEQ = A.ORG_SLIP_SEQ),0) AS FOR_ORG_AMT_I
		     , ISNULL((SELECT ISNULL(BLN_I,0) + ISNULL(J_AMT_I,0) 
		                 FROM AGB300T   WITH (NOLOCK)
		                WHERE COMP_CODE    = A.COMP_CODE
		                  AND ACCNT        = A.ACCNT 
		                  AND ORG_AC_DATE  = A.ORG_AC_DATE 
		                  AND ORG_SLIP_NUM = A.ORG_SLIP_NUM 
		                  AND ORG_SLIP_SEQ = A.ORG_SLIP_SEQ),0) AS BLN_I
		     , ISNULL((SELECT ISNULL(FOR_BLN_I,0) + ISNULL(FOR_J_AMT_I,0) 
		                 FROM AGB300T   WITH (NOLOCK)
		                WHERE COMP_CODE    = A.COMP_CODE
		                  AND ACCNT        = A.ACCNT 
		                  AND ORG_AC_DATE  = A.ORG_AC_DATE 
		                  AND ORG_SLIP_NUM = A.ORG_SLIP_NUM 
		                  AND ORG_SLIP_SEQ = A.ORG_SLIP_SEQ),0) AS FOR_BLN_I
		     , (SELECT JAN_DIVI 
		          FROM ABA400T   WITH (NOLOCK)
		         WHERE COMP_CODE = A.COMP_CODE
		           AND ACCNT     = A.ACCNT) AS JAN_DIVI
		  FROM AGB310T A
		     , (SELECT COMP_CODE
		             , ORG_AC_DATE
		             , ACCNT
		             , PEND_CODE
		             , PEND_DATA_CODE
		          FROM (
		                SELECT *
		                  FROM AGB310T  WITH (NOLOCK)
		                 WHERE COMP_CODE = #{S_COMP_CODE}
		                   AND DIV_CODE  = #{DIV_CODE}
		                    ) A
		         GROUP BY COMP_CODE, ORG_AC_DATE, ACCNT, PEND_CODE, PEND_DATA_CODE
		        HAVING MAX(J_DATE) = #{AC_DATE}
		        ) B
		 WHERE A.COMP_CODE   = #{S_COMP_CODE}
		   AND A.DIV_CODE    = #{DIV_CODE}
		   AND A.INPUT_PATH  = #{INPUT_PATH}
		   AND A.ORG_AC_DATE = B.ORG_AC_DATE
		   AND A.ACCNT       = B.ACCNT
		   AND A.PEND_CODE   = B.PEND_CODE
		   AND A.PEND_DATA_CODE = B.PEND_DATA_CODE
	</select>
	<update id="agj800ukrService.updateAgb200" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query36
		UPDATE AGB200T
		   SET DR_AMT_I     = ISNULL(DR_AMT_I,0) -  #{D_DR_AMT}
		     , CR_AMT_I     = ISNULL(CR_AMT_I,0) -  #{D_CR_AMT}
		     , DR_FOR_AMT_I = ISNULL(DR_FOR_AMT_I,0) -  #{D_FOR_DR_AMT}
		     , CR_FOR_AMT_I = ISNULL(CR_FOR_AMT_I,0) -  #{D_FOR_CR_AMT}
			
			<if test="JAN_DIVI == &quot;1&quot;">
		     , BLN_I     = ISNULL(BLN_I,0) +  #{D_CR_AMT}
		     , FOR_BLN_I = ISNULL(FOR_BLN_I,0) +  #{D_FOR_CR_AMT}
			</if>
			<if test="JAN_DIVI != &quot;1&quot;">
		     , BLN_I     = ISNULL(BLN_I,0) +  #{D_DR_AMT}
		     , FOR_BLN_I = ISNULL(FOR_BLN_I,0) +  #{D_FOR_DR_AMT}
			</if>
			
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND AC_DATE    = #{BASE_AC_DATE}
		   AND DIV_CODE   = #{S_DIV_CODE}
		   AND INPUT_PATH = #{INPUT_PATH}
		   AND ACCNT      = #{ACCNT}
		   AND ((BOOK_CODE1 = #{PEND_CODE}
		   AND   BOOK_DATA1 = #{PEND_DATA_CODE}
		    OR  (BOOK_CODE2 = #{PEND_CODE}
		   AND   BOOK_DATA2 = #{PEND_DATA_CODE}
	</update>
	<update id="agj800ukrService.updateAgb500" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query37
		UPDATE AGB500T
		   SET DR_AMT_I = ISNULL(DR_AMT_I,0) -  #{D_DR_AMT}
		     , CR_AMT_I = ISNULL(CR_AMT_I,0) -  #{D_CR_AMT}
		     , DR_FOR_AMT_I = ISNULL(DR_FOR_AMT_I,0) -  #{D_FOR_DR_AMT}
		     , CR_FOR_AMT_I = ISNULL(CR_FOR_AMT_I,0) -  #{D_FOR_CR_AMT}
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND AC_DATE    = #{BASE_AC_DATE}
		   AND SLIP_NUM   = 0
		   AND DIV_CODE   = #{S_DIV_CODE}
		   AND INPUT_PATH = #{INPUT_PATH}
		   AND ACCNT      = #{ACCNT}
	</update>
	<update id="agj800ukrService.updateCancelAmtAgb300" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query38
		UPDATE AGB300T
		   SET J_AMT_I     = ISNULL(J_AMT_I,0) -  #{J_AMT_I}
		     , BLN_I       = ISNULL(BLN_I,0) +  #{J_AMT_I}
		     , FOR_J_AMT_I = ISNULL(FOR_J_AMT_I,0) -  #{FOR_J_AMT_I}
		     , FOR_BLN_I   = ISNULL(FOR_BLN_I,0) +  #{FOR_J_AMT_I}
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND ACCNT        = #{ACCNT}
		   AND ORG_AC_DATE  = #{ORG_AC_DATE}
		   AND ORG_SLIP_NUM = #{ORG_SLIP_NUM}
		   AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
	</update>
	<delete id="agj800ukrService.deleteAgb310" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query39
		DELETE AGB310T
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND ACCNT        = #{ACCNT}
		   AND ORG_AC_DATE  = #{ORG_AC_DATE}
		   AND ORG_SLIP_NUM = #{ORG_SLIP_NUM}
		   AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
	</delete>
	<update id="agj800ukrService.updateCancelFlag" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query40
		UPDATE AGJ800T
		   SET PROC_YN    = 'N'
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND AC_DATE    = #{BASE_AC_DATE}
		   AND DIV_CODE   = #{S_DIV_CODE}
		   AND INPUT_DIVI = #{TERM_DIVI}
		   AND ACCNT      = #{ACCNT}
		   AND ((BOOK_CODE1 = #{PEND_CODE}
		   AND   BOOK_DATA1 = #{PEND_DATA_CODE}
		    OR  (BOOK_CODE2 = #{PEND_CODE}
		   AND   BOOK_DATA2 = #{PEND_DATA_CODE}
		   AND ISNULL(PROC_YN,'N') = 'Y'
	</update>
	<select id="agj800ukrService.getUndecidedData" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnBalanceCancel] Query41
	SELECT A.ACCNT
	     , ISNULL((SELECT ACCNT_NAME 
	                 FROM ABA400T  WITH (NOLOCK)
	                WHERE COMP_CODE = A.COMP_CODE
	                  AND ACCNT     = A.ACCNT), '') AS ACCNT_NAME
	     , ISNULL(A.DEPT_CODE, '')    AS DEPT_CODE
	     , ISNULL(A.DEPT_NAME, '')    AS DEPT_NAME
	     , ISNULL(A.PEND_CODE, '')    AS PEND_CODE
	     , ISNULL(A.PEND_DATA_CODE, '') AS PEND_DATA_CODE
	     , ISNULL((SELECT AC_NAME 
	                 FROM ABA200T   WITH (NOLOCK)
	                WHERE COMP_CODE = A.COMP_CODE
	                  AND AC_CD     = A.PEND_CODE), '') AS PEND_NAME
	     , ISNULL(A.MONEY_UNIT, '')   AS MONEY_UNIT
	     , ISNULL(A.J_AMT_I, 0)       AS J_AMT_I
	     , ISNULL(A.FOR_J_AMT_I, 0)   AS FOR_J_AMT_I
	     , ISNULL(A.ORG_AMT_I, 0)     AS ORG_AMT_I
	     , ISNULL(A.FOR_ORG_AMT_I, 0) AS FOR_ORG_AMT_I
	     , ISNULL(A.BLN_I, 0)         AS BLN_I
	     , ISNULL(A.FOR_BLN_I, 0)     AS FOR_BLN_I
	  FROM AGB300T A  WITH (NOLOCK)
	 WHERE A.COMP_CODE    = #{S_COMP_CODE}
	   AND A.ACCNT        = #{ACCNT}
	   AND A.ORG_AC_DATE  = #{ORG_AC_DATE}
	   AND A.ORG_SLIP_NUM = #{ORG_SLIP_NUM}
	   AND A.ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
	</select>
	<select id="agj800ukrService.getSetOffData" parameterType="Map" resultType="rMap">
	--agj800ukr.Cagj800ukr [fnBalanceCancel] Query42
	SELECT COMP_CODE
	     , ACCNT 
	     , ORG_AC_DATE
	     , ORG_SLIP_NUM
	     , ORG_SLIP_SEQ
	     , PEND_CODE
	     , PEND_DATA_CODE
	     , DIV_CODE
	     , ORG_AMT_I
	     , FOR_ORG_AMT_I
	     , INPUT_PATH
	     , (SELECT JAN_DIVI 
	          FROM ABA400T   WITH (NOLOCK)
	         WHERE COMP_CODE = A.COMP_CODE
	           AND ACCNT     = A.ACCNT) AS JAN_DIVI
	  FROM AGB300T A  WITH (NOLOCK)
	 WHERE A.COMP_CODE   = #{S_COMP_CODE}
	   AND A.DIV_CODE    = #{DIV_CODE}
	   AND A.ORG_AC_DATE = #{AC_DATE}
	   AND A.INPUT_PATH  = #{INPUT_PATH}
	   AND ISNULL(A.ORG_AMT_I,0)     = ISNULL(A.BLN_I,0)
	   AND ISNULL(A.J_AMT_I,0)       = 0
	   AND ISNULL(A.FOR_ORG_AMT_I,0) = ISNULL(A.FOR_BLN_I,0)
	   AND ISNULL(A.FOR_J_AMT_I,0)   = 0
	</select>
	<delete id="agj800ukrService.deleteAgb300" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query43
		DELETE AGB300T
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND ACCNT        = #{ACCNT}
		   AND ORG_AC_DATE  = #{ORG_AC_DATE}
		   AND ORG_SLIP_NUM = #{ORG_SLIP_NUM}
		   AND ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}
	</delete>
	<update id="agj800ukrService.updateCancelAgb200" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query36
		UPDATE AGB200T
		   SET DR_AMT_I     = ISNULL(DR_AMT_I,0) -  #{D_DR_AMT}
		     , CR_AMT_I     = ISNULL(CR_AMT_I,0) -  #{D_CR_AMT}
		     , DR_FOR_AMT_I = ISNULL(DR_FOR_AMT_I,0) -  #{D_FOR_DR_AMT}
		     , CR_FOR_AMT_I = ISNULL(CR_FOR_AMT_I,0) -  #{D_FOR_CR_AMT}
			
			<if test="JAN_DIVI == &quot;1&quot;">
		     , BLN_I     = ISNULL(BLN_I,0) -  #{D_DR_AMT}
		     , FOR_BLN_I = ISNULL(FOR_BLN_I,0) -  #{D_FOR_DR_AMT}
			</if>
			<if test="JAN_DIVI != &quot;1&quot;">
		     , BLN_I     = ISNULL(BLN_I,0) -  #{D_CR_AMT}
		     , FOR_BLN_I = ISNULL(FOR_BLN_I,0) -  #{D_FOR_CR_AMT}
			</if>
			
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND AC_DATE    = #{BASE_AC_DATE}
		   AND DIV_CODE   = #{S_DIV_CODE}
		   AND INPUT_PATH = #{INPUT_PATH}
		   AND ACCNT      = #{ACCNT}
		   AND ((BOOK_CODE1 = #{PEND_CODE}
		   AND   BOOK_DATA1 = #{PEND_DATA_CODE}
		    OR  (BOOK_CODE2 = #{PEND_CODE}
		   AND   BOOK_DATA2 = #{PEND_DATA_CODE}
	</update>
	<delete id="agj800ukrService.deleteLedger" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query48
		DELETE AGB100T
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND AC_DATE    = #{AC_DATE]
		   AND INPUT_PATH = #{INPUT_PATH}
		   AND (((SELECT PEND_YN 
		            FROM ABA400T   WITH (NOLOCK)
		           WHERE COMP_CODE = AGB100T.COMP_CODE
		             AND ACCNT     = AGB100T.ACCNT) = 'Y' 
		   AND ISNULL(DR_AMT_I,0) = 0
		   AND ISNULL(CR_AMT_I,0) = 0
		   AND ISNULL(DR_FOR_AMT_I,0) = 0
		   AND ISNULL(CR_FOR_AMT_I,0) = 0
		        )
		    OR ((SELECT PEND_YN 
		           FROM ABA400T   WITH (NOLOCK)
		          WHERE COMP_CODE = AGB100T.COMP_CODE
		            AND ACCNT     = AGB100T.ACCNT) = 'N'))
	</delete>
	<delete id="agj800ukrService.deleteSuppAccntBook" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query49
		DELETE AGB200T
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND AC_DATE    = #{AC_DATE]
		   AND INPUT_PATH = #{INPUT_PATH}
		   AND (((SELECT PEND_YN 
		            FROM ABA400T   WITH (NOLOCK)
		           WHERE COMP_CODE = AGB200T.COMP_CODE
		             AND ACCNT     = AGB200T.ACCNT) = 'Y' 
		   AND ISNULL(DR_AMT_I,0)  = 0
		   AND ISNULL(CR_AMT_I,0)  = 0
		   AND ISNULL(DR_FOR_AMT_I,0) = 0
		   AND ISNULL(CR_FOR_AMT_I,0) = 0
		   AND ISNULL(BLN_I,0) = 0
		   AND ISNULL(FOR_BLN_I,0) = 0
		       )
		       OR ((SELECT PEND_YN 
		              FROM ABA400T 
		             WHERE COMP_CODE = AGB200T.COMP_CODE
		               AND ACCNT     = AGB200T.ACCNT) = 'N'))
	</delete>
	<delete id="agj800ukrService.deleteDepositAccnt" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query50
		DELETE AGB500T
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND AC_DATE    = #{AC_DATE]
		   AND SLIP_NUM   = 0
		   AND INPUT_PATH = #{INPUT_PATH}
		    AND (((SELECT PEND_YN 
		             FROM ABA400T   WITH (NOLOCK)
		            WHERE COMP_CODE = AGB500T.COMP_CODE
		              AND ACCNT     = AGB500T.ACCNT) = 'Y' 
		    AND ISNULL(DR_AMT_I,0) = 0
		    AND ISNULL(CR_AMT_I,0) = 0
		    AND ISNULL(DR_FOR_AMT_I,0) = 0
		    AND ISNULL(CR_FOR_AMT_I,0) = 0
		        )
		        OR ((SELECT PEND_YN 
		               FROM ABA400T   WITH (NOLOCK)
		              WHERE COMP_CODE = AGB500T.COMP_CODE
		                AND ACCNT     = AGB500T.ACCNT) = 'N'))
	</delete>
	<delete id="agj800ukrService.updateFlagChange" parameterType="Map">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query51
		UPDATE AGJ800T
		   SET PROC_YN   = 'N'
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND ACCNT NOT IN (SELECT ACCNT
		                       FROM AGB300T   WITH (NOLOCK)
		                      WHERE COMP_CODE   = #{S_COMP_CODE}
		                        AND ORG_AC_DATE = #{AC_DATE]
		                        AND DIV_CODE    = #{DIV_CODE}
		   AND DIV_CODE   = #{DIV_CODE}
		   AND AC_DATE    = #{AC_DATE]
		   AND INPUT_DIVI = #{TERM_DIVI}
		   AND ISNULL(PROC_YN,'N') = 'Y'
	</delete>
	<select id="agj800ukrService.checkCancelComplete" parameterType="Map" resultType="rMap">
		--agj800ukr.Cagj800ukr [fnBalanceCancel] Query52
		SELECT *
		  FROM (
		        SELECT COMP_CODE
		             , ACCNT
		             , (SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND ACCNT     = A.ACCNT) AS ACCNT_NAME
		             , DEPT_CODE
		             , DEPT_NAME
		             , (SELECT AC_NAME 
		                  FROM ABA200T   WITH (NOLOCK)
		                 WHERE COMP_CODE = A.COMP_CODE
		                   AND AC_CD = (SELECT PEND_CODE 
		                                  FROM ABA400T   WITH (NOLOCK)
		                                 WHERE COMP_CODE = A.COMP_CODE
		                                   AND ACCNT     = A.ACCNT)) AS PEND_NAME
		             , CASE ISNULL((SELECT PEND_CODE 
		                              FROM ABA400T   WITH (NOLOCK)
		                             WHERE COMP_CODE = A.COMP_CODE
		                               AND ACCNT     = A.ACCNT),'')
		                      WHEN ISNULL(BOOK_CODE1,'') THEN BOOK_DATA1
		                      WHEN ISNULL(BOOK_CODE2,'') THEN BOOK_DATA2
		                END AS PEND_DATA_CODE
		             , MONEY_UNIT
		             , CASE (SELECT JAN_DIVI 
		                       FROM ABA400T   WITH (NOLOCK)
		                      WHERE COMP_CODE = A.COMP_CODE
		                        AND ACCNT     = A.ACCNT)
		                      WHEN '1' THEN DR_AMT_I
		                      WHEN '2' THEN CR_AMT_I
		                END AS ORG_AMT_I
		          FROM AGJ800T A  WITH (NOLOCK)
		         WHERE A.COMP_CODE = #{S_COMP_CODE}
		           AND AC_DATE     = #{AC_DATE}
		           AND DIV_CODE    = #{DIV_CODE}
		           AND INPUT_DIVI  = #{TERM_DIVI}
		           AND ISNULL(PROC_YN,'') = 'Y'
		             ) A
		 WHERE ORG_AMT_I != 0
	</select>
	
	<select id="agj800ukrService.BalanceSet" parameterType="rMap" resultType="rMap">
    /* agj800ukrService.BalanceSet */
    DECLARE  @COMP_CODE    NVARCHAR(08)
           , @DIV_CODE     NVARCHAR(08)
           , @BASE_MONTH   NVARCHAR(06)
           , @TERM_DIVI    NVARCHAR(02)
           , @USER_ID      NVARCHAR(100)
           , @LANG_TYPE    NVARCHAR(02)
           , @ERROR_DESC   NVARCHAR(2000)
        
        SET @COMP_CODE  = #{S_COMP_CODE}
        SET @DIV_CODE   = #{DIV_CODE}
        SET @BASE_MONTH = #{AC_DATE}
        SET @TERM_DIVI  = #{TERM_DIVI}
        SET @USER_ID    = #{S_USER_ID}
        SET @LANG_TYPE  = #{S_LANG_CODE}
        
        exec uniLITE.USP_ACCNT_AGJ800UKR_BalanceSet @COMP_CODE, @DIV_CODE, @BASE_MONTH, @TERM_DIVI, @USER_ID, @LANG_TYPE, @ERROR_DESC OUTPUT
    
        IF(ISNULL(@ERROR_DESC,'') != '')
            BEGIN
                SELECT @ERROR_DESC AS ERROR_DESC 
            END
    </select>
    
    <select id="agj800ukrService.BalanceCancel" parameterType="rMap" resultType="rMap">
    DECLARE  @COMP_CODE    NVARCHAR(08)
           , @DIV_CODE     NVARCHAR(08)
           , @BASE_MONTH   NVARCHAR(06)
           , @TERM_DIVI    NVARCHAR(02)
           , @USER_ID      NVARCHAR(100)
           , @LANG_TYPE    NVARCHAR(02)
           , @ERROR_DESC   NVARCHAR(2000)
        
        SET @COMP_CODE  = #{S_COMP_CODE}
        SET @DIV_CODE   = #{DIV_CODE}
        SET @BASE_MONTH = #{AC_DATE}
        SET @TERM_DIVI  = #{TERM_DIVI}
        SET @USER_ID    = #{S_USER_ID}
        SET @LANG_TYPE  = #{S_LANG_CODE}
        
        exec uniLITE.USP_ACCNT_AGJ800UKR_BalanceCancel @COMP_CODE, @DIV_CODE, @BASE_MONTH, @TERM_DIVI, @USER_ID, @LANG_TYPE, @ERROR_DESC OUTPUT
        
        IF(ISNULL(@ERROR_DESC,'') != '')
            BEGIN
                SELECT @ERROR_DESC AS ERROR_DESC 
            END
    </select>
    <select id="agj800ukrService.selectStdt" parameterType="rMap" resultType="rMap">
    	SELECT SUBSTRING(FN_DATE,1,6) AS STDT 
		  FROM BOR100T WITH (NOLOCK)          
		 WHERE COMP_CODE = #{S_COMP_CODE}
    </select>
</mapper>