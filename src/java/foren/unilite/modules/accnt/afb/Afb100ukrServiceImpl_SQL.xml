<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb100ukrServiceImpl">
	
	<select id="afb100ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
 DECLARE @COMP_CODE       NVARCHAR(08)   --(필수) 법인코드 
       , @AC_YYYY         NVARCHAR(04)   --(필수) 예산년도
       , @DEPT_CODE       NVARCHAR(08)   --(필수) 부서코드
	   , @DEPT_NAME       NVARCHAR(99)   --(필수) 부서코드
	   , @FnDate          NVARCHAR(02)   -- 회계시작년월(월)
       , @sFrMonth        NVARCHAR(08)   
       , @sToMonth        NVARCHAR(08)   
	   , @sFrMonthTemp	  NVARCHAR(08)   
	   , @sTrMonthTemp    NVARCHAR(08)   

    SET @COMP_CODE    = #{S_COMP_CODE}
    SET @AC_YYYY      = #{AC_YYYY}
    SET @DEPT_CODE    = #{DEPT_CODE}
	SET @DEPT_NAME    = #{DEPT_NAME}
	SET @sFrMonth 	  = #{sFrMonth}
	SET @sToMonth 	  = #{sToMonth}
	SET @sFrMonthTemp = #{sFrMonthTemp}
	SET @sTrMonthTemp = #{sTrMonthTemp}

SELECT 
	   A.GBNCD
	 , A.DEPT_CODE
	 , A.DEPT_NAME
	 , A.AC_YYYY
     , A.ACCNT
	 , A.ACCNT_NAME
	 , ISNULL(C.ACTUAL_I,0) AS ACTUAL_I
	 , ISNULL((B.BUDG_01 + B.BUDG_02 + B.BUDG_03 + B.BUDG_04 + B.BUDG_05 + B.BUDG_06 + B.BUDG_07 + B.BUDG_08 + B.BUDG_09 + B.BUDG_10 + B.BUDG_11 + B.BUDG_12),0) AS BUDGET_I
	 --, ISNULL(B.CAL_DIVI,'1') AS CAL_DIVI
	 , ISNULL(B.CAL_DIVI,ISNULL(A.CAL_DIVI2,'1')) AS CAL_DIVI
	 , A.EDIT_YN
	 , A.COMP_CODE
	 , A.WRITE_YN
	 , CASE WHEN ISNULL(C.ACTUAL_I,0) = 0 THEN 0
	 		ELSE ISNULL((B.BUDG_01 + B.BUDG_02 + B.BUDG_03 + B.BUDG_04 + B.BUDG_05 + B.BUDG_06 + B.BUDG_07 + B.BUDG_08 + B.BUDG_09 + B.BUDG_10 + B.BUDG_11 + B.BUDG_12),0) / ISNULL(C.ACTUAL_I,0) * 100
			END AS RATIO_R
	 , ISNULL(B.BUDG_01,0) AS '01'
	 , ISNULL(B.BUDG_02,0) AS '02'
	 , ISNULL(B.BUDG_03,0) AS '03'
	 , ISNULL(B.BUDG_04,0) AS '04'
	 , ISNULL(B.BUDG_05,0) AS '05'
	 , ISNULL(B.BUDG_06,0) AS '06'
	 , ISNULL(B.BUDG_07,0) AS '07'
	 , ISNULL(B.BUDG_08,0) AS '08'
	 , ISNULL(B.BUDG_09,0) AS '09'
	 , ISNULL(B.BUDG_10,0) AS '10'
	 , ISNULL(B.BUDG_11,0) AS '11'
	 , ISNULL(B.BUDG_12,0) AS '12'

FROM (
	SELECT CONVERT(NUMERIC, 1) AS GBNCD
		 , CONVERT(NVARCHAR(6), @AC_YYYY)     AS AC_YYYY
		 , CONVERT(NVARCHAR(16), @DEPT_CODE) AS DEPT_CODE
		 , CONVERT(NVARCHAR(60), @DEPT_NAME) AS DEPT_NAME
		 , A.ACCNT
		 , A.ACCNT_NAME
		 , CONVERT(NUMERIC(25,4), 0) AS ACTUAL_I
		 , CONVERT(NUMERIC(25,4), 0) AS RATIO_R
		 , CONVERT(NUMERIC(25,4), 0) AS BUDGET_I
		 , CASE A.COST_DIVI WHEN '1' THEN '1' WHEN '2' THEN '3' ELSE '1' END AS CAL_DIVI2
		 , CONVERT(NUMERIC(25,4), 0) AS JAN
		 , CONVERT(NUMERIC(25,4), 0) AS FEB
		 , CONVERT(NUMERIC(25,4), 0) AS MAR
		 , CONVERT(NUMERIC(25,4), 0) AS APR
		 , CONVERT(NUMERIC(25,4), 0) AS MAY
		 , CONVERT(NUMERIC(25,4), 0) AS JUN
		 , CONVERT(NUMERIC(25,4), 0) AS JUL
		 , CONVERT(NUMERIC(25,4), 0) AS AUG
		 , CONVERT(NUMERIC(25,4), 0) AS SEP
		 , CONVERT(NUMERIC(25,4), 0) AS OCT
		 , CONVERT(NUMERIC(25,4), 0) AS NOV
		 , CONVERT(NUMERIC(25,4), 0) AS DEC
		 , CASE WHEN ISNULL(SLIP_SW,'') = 'N' OR ISNULL(GROUP_YN,'') = 'Y' THEN 'N' ELSE 'Y' END AS EDIT_YN
		 , A.COMP_CODE
		 , CASE WHEN ISNULL(B.COMP_CODE, 'Y') = 'Y' THEN 'Y' ELSE 'N' END WRITE_YN
	  FROM ABA400T A WITH (NOLOCK)
				   LEFT OUTER JOIN (SELECT COMP_CODE
									  FROM AFB110T WITH (NOLOCK)
									 WHERE COMP_CODE = @COMP_CODE
									   AND BUDG_YYYYMM &gt;= @sFrMonth
									   AND BUDG_YYYYMM &lt;= @sToMonth
									   AND DEPT_CODE = @DEPT_CODE
									 GROUP BY COMP_CODE) B
								ON 1    = 1
	 WHERE A.COMP_CODE = @COMP_CODE
	   AND A.SLIP_SW = 'Y'
       AND A.BUDG_YN   = 'Y'
       AND A.GROUP_YN = 'N'
	) A
LEFT JOIN (
		SELECT A.ACCNT
		     , A.AC_YYYY
			 , A.CAL_DIVI
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '01' THEN A.BUDG_I ELSE 0 END) AS BUDG_01
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '02' THEN A.BUDG_I ELSE 0 END) AS BUDG_02
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '03' THEN A.BUDG_I ELSE 0 END) AS BUDG_03
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '04' THEN A.BUDG_I ELSE 0 END) AS BUDG_04
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '05' THEN A.BUDG_I ELSE 0 END) AS BUDG_05
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '06' THEN A.BUDG_I ELSE 0 END) AS BUDG_06
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '07' THEN A.BUDG_I ELSE 0 END) AS BUDG_07
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '08' THEN A.BUDG_I ELSE 0 END) AS BUDG_08
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '09' THEN A.BUDG_I ELSE 0 END) AS BUDG_09
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '10' THEN A.BUDG_I ELSE 0 END) AS BUDG_10
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '11' THEN A.BUDG_I ELSE 0 END) AS BUDG_11
			 , SUM(CASE WHEN RIGHT(A.BUDG_YYYYMM, 2) = '12' THEN A.BUDG_I ELSE 0 END) AS BUDG_12
		  FROM AFB100T A WITH (NOLOCK)
		 WHERE A.COMP_CODE = @COMP_CODE
		   AND A.ACCNT IS NOT NULL
		   AND A.AC_YYYY   = @AC_YYYY
		   AND A.DEPT_CODE = @DEPT_CODE
		   AND A.BUDG_YYYYMM BETWEEN @sFrMonth AND @sToMonth
		 GROUP BY ACCNT, AC_YYYY, CAL_DIVI
	 ) B ON B.AC_YYYY = A.AC_YYYY
	    AND B.ACCNT   = A.ACCNT
LEFT JOIN (
		SELECT A.ACCNT
			 , CASE (SELECT JAN_DIVI 
					   FROM ABA400T   WITH (NOLOCK)
					  WHERE COMP_CODE = @COMP_CODE
						AND ACCNT     = A.ACCNT )
					WHEN '1' THEN SUM(A.DR_AMT_I) 
					WHEN '2' THEN SUM(CR_AMT_I) 
					ELSE 0 
				END AS ACTUAL_I
		  FROM AGB100T A WITH (NOLOCK)
		 WHERE A.COMP_CODE = @COMP_CODE
		   AND A.ACCNT IS NOT NULL
		   AND A.DEPT_CODE = @DEPT_CODE
		   AND A.AC_DATE BETWEEN @sFrMonthTemp AND @sTrMonthTemp
		 GROUP BY A.ACCNT
		 ) C ON C.ACCNT = A.ACCNT
ORDER BY A.ACCNT
	</select>
	<select id="afb100ukrServiceImpl.fnGetResultRate" parameterType="Map" resultType="rMap">
		--UAfb01KR.CAfb100UKR[fnGetResultRate]Query9
	SELECT SUBSTRING(A.AC_DATE, 5, 2) AS AC_DATE
	    , CASE (SELECT JAN_DIVI
	    FROM ABA400T WITH (NOLOCK)
	    WHERE COMP_CODE = #{S_COMP_CODE}
	    AND ACCNT     = A.ACCNT )
	                WHEN '1' THEN ISNULL(SUM(ISNULL(A.DR_AMT_I, 0)), 0)
	                WHEN '2' THEN ISNULL(SUM(ISNULL(A.DR_AMT_I, 0)), 0)
	                ELSE 0
	            END AS ACTUAL_I
	      FROM AGB100T A WITH (NOLOCK)
	     WHERE A.COMP_CODE = #{S_COMP_CODE}
	       AND A.ACCNT     = #{ACCNT}
	       AND A.DEPT_CODE = #{DEPT_CODE}
	       AND SUBSTRING(A.AC_DATE, 1, 6) BETWEEN #{FR_MONTH} AND #{TO_MONTH}
	     GROUP BY A.ACCNT, SUBSTRING(A.AC_DATE, 5, 2)
	     ORDER BY 1 ASC
		
	</select>
	
	<select id="afb100ukrServiceImpl.beforeSaveCheck" parameterType="Map" resultType="rMap">
		SELECT TOP 1 *
		  FROM AFB110T 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DEPT_CODE = #{DEPT_CODE}
		   AND BUDG_YYYYMM &gt;= #{AC_YYYY} + '01'
		   AND BUDG_YYYYMM &lt;= #{AC_YYYY} + '12'
	</select>
	
	<insert id="afb100ukrServiceImpl.insertDetail" parameterType="Map">
		--UAfb01KR.CAfb100UKR[fnSaveData]Query3
		INSERT INTO AFB100T 
		     ( COMP_CODE
		     , AC_YYYY
		     , BUDG_YYYYMM
		     , DEPT_CODE
		     , DEPT_NAME
		     , ACCNT
		     , BUDG_I
		     , CAL_DIVI
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME )
		      
		VALUES
		     ( #{S_COMP_CODE}
		     , #{AC_YYYY}
		     , #{BUDG_YYYYMM}
		     , #{DEPT_CODE}
		     , #{DEPT_NAME}
		     , #{ACCNT}
		     , #{BUDG_I}
		     , #{CAL_DIVI}
		     , #{S_USER_ID}
		     , GETDATE() )
	</insert>
	
	<update id="afb100ukrServiceImpl.updateDetail" parameterType="Map">		

			
	</update>
	
	<update id="afb100ukrServiceImpl.deleteDetail" parameterType="Map">
		--UAfb01KR.CAfb100UKR[fnSaveData]Query2
	DELETE FROM AFB100T
	 WHERE COMP_CODE   = #{S_COMP_CODE}
	   AND AC_YYYY     = #{AC_YYYY}
	   AND ACCNT       = #{ACCNT}
	   AND BUDG_YYYYMM = #{BUDG_YYYYMM}
	   AND DEPT_CODE   = #{DEPT_CODE}
	</update>

	<!-- Excel -->
	<update id="afb100ukrServiceImpl.insertExcelAfb100ukrupload" parameterType="Map">
		/* 엑셀 데이터를 임시 저장할 TEMP TABLE 생성 */
		IF OBJECT_ID('tempdb..##AFB100UKR_EXCEL') IS NULL
		BEGIN
			CREATE TABLE [##AFB100UKR_EXCEL](
				_EXCEL_JOBID        NVARCHAR(64)    NOT NULL ,
				_EXCEL_ROWNUM       NVARCHAR(4)     NOT NULL ,
				_EXCEL_HAS_ERROR    NVARCHAR(2)         NULL ,
				_EXCEL_ERROR_MSG    NVARCHAR(200)       NULL ,
				DEPT_CODE			NVARCHAR(08)    NOT NULL ,                       /* 부서코드  	*/
				DEPT_NAME			NVARCHAR(30)        NULL ,                       /* 부서명    	*/
				ACCNT				NVARCHAR(16)    NOT NULL ,                       /* 계정코드  	*/
				ACCNT_NAME			NVARCHAR(100)       NULL ,                       /*	계정과목명	*/
				M1					NVARCHAR(30)        NULL ,                       /* 1월	  	*/
				M2					NVARCHAR(30)        NULL ,                       /* 2월		*/
				M3					NVARCHAR(30)        NULL ,                       /* 3월		*/
				M4					NVARCHAR(30)        NULL ,                       /* 4월		*/
				M5					NVARCHAR(30)        NULL ,                       /* 5월		*/
				M6					NVARCHAR(30)        NULL ,                       /* 6월		*/
				M7					NVARCHAR(30)        NULL ,                       /* 7월		*/
				M8					NVARCHAR(30)        NULL ,                       /* 8월		*/
				M9					NVARCHAR(30)        NULL ,                       /* 9월		*/
				M10					NVARCHAR(30)        NULL ,                       /* 10월	  	*/
				M11					NVARCHAR(30)        NULL ,                       /* 11월	  	*/
				M12					NVARCHAR(30)        NULL ,                       /* 12월	  	*/
			) ON [PRIMARY]
    	END
    	INSERT INTO ##AFB100UKR_EXCEL
    		(
    		   _EXCEL_JOBID
    		 , _EXCEL_ROWNUM
			<if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
    		 , _EXCEL_HAS_ERROR
			</if>	
			<if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR_MSG)">
    		 , _EXCEL_ERROR_MSG
			</if>	
    		 , DEPT_CODE	
			<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
    		 , DEPT_NAME	
			</if>	
    		 , ACCNT		
			<if test="@foren.Ognl@isNotEmpty(ACCNT_NAME)">
    		 , ACCNT_NAME	
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M1)">
    		 , M1			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M2)">
    		 , M2			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M3)">
    	     , M3			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M4)">
    	     , M4			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M5)">
    	     , M5			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M6)">
    	     , M6			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M7)">
    	     , M7			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M8)">
    	     , M8			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M9)">
    	     , M9			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M10)">
    	     , M10			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M11)">
    	     , M11			
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M12)">
    	     , M12			
			</if>	
    	)
    	VALUES (
    		   #{_EXCEL_JOBID} 
    		 , #{_EXCEL_ROWNUM}
			<if test="@foren.Ognl@isNotEmpty(_EXCEL_HAS_ERROR)">
    		 , #{_EXCEL_HAS_ERROR	,jdbcType=VARCHAR} 
			</if>	
			<if test="@foren.Ognl@isNotEmpty(_EXCEL_ERROR)">
    		 , #{_EXCEL_ERROR		,jdbcType=VARCHAR}     		  
			</if>	
    		 , #{DEPT_CODE}
			<if test="@foren.Ognl@isNotEmpty(DEPT_NAME)">
    		 , #{DEPT_NAME}	
			</if>	
    		 , #{ACCNT}
			<if test="@foren.Ognl@isNotEmpty(ACCNT_NAME)">
    		 , #{ACCNT_NAME}	
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M1)">
    		 , #{M1}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M2)">
    		 , #{M2}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M3)">
    	     , #{M3}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M4)">
    	     , #{M4}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M5)">
    	     , #{M5}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M6)">
    	     , #{M6}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M7)">
    	     , #{M7}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M8)">
    	     , #{M8}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M9)">
    	     , #{M9}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M10)">
    	     , #{M10}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M11)">
    	     , #{M11}
			</if>	
			<if test="@foren.Ognl@isNotEmpty(M12)">
    	     , #{M12}
			</if>	
    	)
    </update>
    
	<select id="afb100ukrServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
		/*afb100ukrServiceImpl.selectExcelUploadSheet1*/
		SELECT _EXCEL_JOBID
			 , _EXCEL_ROWNUM
			 , _EXCEL_HAS_ERROR       
			 , _EXCEL_ERROR_MSG
    		 , DEPT_CODE	
    		 , DEPT_NAME	
    		 , ACCNT		
    		 , ACCNT_NAME	
    		 , M1	 AS [01]			
    		 , M2	 AS [02]			
    	     , M3	 AS [03]			
    	     , M4	 AS [04]			
    	     , M5	 AS [05]			
    	     , M6	 AS [06]			
    	     , M7	 AS [07]			
    	     , M8	 AS [08]			
    	     , M9	 AS [09]			
    	     , M10   AS [10]			
    	     , M11   AS [11]			
    	     , M12   AS [12]			
		  FROM ##AFB100UKR_EXCEL  WITH (NOLOCK)
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>
    
    <update id="afb100ukrServiceImpl.excelValidate" >
    	/*afb110ukrServiceImpl.excelValidate*/
    	UPDATE	A
		   SET 
				A._EXCEL_HAS_ERROR = (CASE WHEN B.TREE_CODE IS NULL 
										   THEN 'Y' 
								      ELSE A._EXCEL_HAS_ERROR 
								      END),
				A._EXCEL_ERROR_MSG = (CASE WHEN B.TREE_CODE IS NULL  
										   THEN ISNULL(_EXCEL_ERROR_MSG,'') + '해당 부서코드는 등록되지 않았습니다.'
									  ELSE A._EXCEL_ERROR_MSG END)
		FROM ##AFB100UKR_EXCEL A  WITH (NOLOCK)
		LEFT JOIN  BSA210T B WITH (NOLOCK) ON B.COMP_CODE= #{S_COMP_CODE}
							             AND A.DEPT_CODE = B.TREE_CODE
		WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
		  AND B.TREE_CODE IS NULL

    	UPDATE	A
		   SET 
				A._EXCEL_HAS_ERROR = (CASE WHEN B.ACCNT IS NULL 
										   THEN 'Y' 
								      ELSE A._EXCEL_HAS_ERROR 
								      END),
				A._EXCEL_ERROR_MSG = (CASE WHEN B.ACCNT IS NULL  
										   THEN ISNULL(_EXCEL_ERROR_MSG,'') + '해당 계정코드는 등록되지 않았습니다.' 
									  ELSE A._EXCEL_ERROR_MSG END)
		FROM ##AFB100UKR_EXCEL A  WITH (NOLOCK)
		LEFT JOIN  ABA400T B WITH (NOLOCK) ON B.COMP_CODE= #{S_COMP_CODE}
							              AND A.ACCNT = B.ACCNT
		WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
		  AND B.ACCNT IS NULL
    	  
    </update>
</mapper>