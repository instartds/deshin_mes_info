<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biv121skrvServiceImpl">
   
	<select id="biv121skrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
/*
	BEGIN
	
	-- 김기근대리님
	    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
	                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
	                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
	                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
	                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
	                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
	                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
	                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
	
	/*--  1. 변수 값 할당 ------------------------------------------------------------------------------------------------- */
	    SET @COMP_CODE          = #{S_COMP_CODE}
	    SET @DIV_CODE           = #{DIV_CODE}
	    SET @COUNT_DATE         = #{COUNT_DATE}
	    SET @USER_ID            = #{S_USER_ID}
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    DECLARE @RefItem            NVARCHAR(01)
	
	    SELECT TOP 1 @RefItem = REF_ITEM
	    FROM   BSA300T WITH (NOLOCK)
	    WHERE  USER_ID = @USER_ID
	
	    SET @RefItem = ISNULL(@RefItem, '0')
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    SELECT 
			GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
			GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
			GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
			GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO)		AS CLASS 
			, CASE 	WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO) = 15 THEN '총    계'			
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO) = 11 THEN ISNULL(M5.TREE_NAME,'')+' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO) = 9 THEN ISNULL(M2.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO) = 7 THEN ISNULL(M3.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT)+	GROUPING(A.WH_CELL_CODE)+	GROUPING(C3.WH_CELL_NAME)+	GROUPING(A.LOT_NO) = 0 THEN M5.TREE_NAME								
					END WH_NAME															--창고명
			 , ''									AS TREE_NAME
			 
			 , A.COMP_CODE																--법인코드
	         , A.DIV_CODE																--사업장코드
	         , A.WH_CODE																--창고코드
			 --, M5.TREE_NAME							AS WH_NAME		 				
			 , C1.ITEM_LEVEL1															--대분류코드
			 , M2.LEVEL_NAME						AS LEVEL1_NAME						--대분류명
			 , C1.ITEM_LEVEL2															--중분류코드
			 , M3.LEVEL_NAME						AS LEVEL2_NAME						--중분류명
			 , C1.ITEM_LEVEL3															--소분류코드
			 , M4.LEVEL_NAME						AS LEVEL3_NAME						--소분류명
	         , ISNULL(C1.SPEC,'')					AS SPEC								--규격
	         , C1.STOCK_UNIT															--재고단위
	         , A.WH_CELL_CODE															--창고셀코드
	         , C3.WH_CELL_NAME															--창고셀명
	         , A.LOT_NO																	--LOT번호
	         , SUM(A.GOOD_STOCK_BOOK_Q)							AS GOOD_STOCK_BOOK_Q	--재고조사전 양품수량
	         , SUM(A.BAD_STOCK_BOOK_Q)							AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
			 , SUM(A.TEMPN_01)									AS STOCK_BOOK_I			--재고조사전 재고금액
	         , SUM(A.GOOD_STOCK_Q)								AS GOOD_STOCK_Q			--재고조사후 양품수량
	         , SUM(A.BAD_STOCK_Q)								AS BAD_STOCK_Q			--재고조사후 불량수량
			 , SUM(B.STOCK_I)									AS STOCK_I				--재고조사후 재고금액
	         , SUM(A.GOOD_STOCK_BOOK_Q) - SUM(A.GOOD_STOCK_Q)	AS GOOD_CAL_Q			--LOSS	양품수량
	         , SUM(A.BAD_STOCK_BOOK_Q)  - SUM(A.BAD_STOCK_Q)	AS BAD_CAL_Q			--LOSS	불량수량
			 , SUM(A.TEMPN_01)			- SUM(B.STOCK_I)			AS STOCK_CAL_I		--LOSS	재고금액
	
	    FROM              BIV300T A  WITH (NOLOCK)
			   LEFT  JOIN BIV100T B  WITH (NOLOCK) ON A.COMP_CODE	  = B.COMP_CODE
												  AND A.DIV_CODE	  = B.DIV_CODE
												  AND A.WH_CODE       = B.WH_CODE
												  AND A.ITEM_CODE     = B.ITEM_CODE
	           INNER JOIN BPR100T C1 WITH (NOLOCK) ON C1.COMP_CODE    = A.COMP_CODE
	                                              AND C1.ITEM_CODE    = A.ITEM_CODE
	           INNER JOIN BPR200T C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE
	                                              AND C2.DIV_CODE     = A.DIV_CODE
	                                              AND C2.ITEM_CODE    = A.ITEM_CODE
	           LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
	                                              AND C3.DIV_CODE     = A.DIV_CODE
	                                              AND C3.WH_CODE      = A.WH_CODE
	                                              AND C3.WH_CELL_CODE = A.WH_CELL_CODE
	           LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
	                                              AND M1.MAIN_CODE    = 'B020'
	                                              AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
	           LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
	                                              AND M2.LEVEL1       = C1.ITEM_LEVEL1
	                                              AND M2.LEVEL2       = '*'
	                                              AND M2.LEVEL3       = '*'
	           LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
	                                              AND M3.LEVEL1       = C1.ITEM_LEVEL1
	                                              AND M3.LEVEL2      != '*'
	                                              AND M3.LEVEL2       = C1.ITEM_LEVEL2
	                                              AND M3.LEVEL3       = '*'
	           LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
	                                              AND M4.LEVEL1       = C1.ITEM_LEVEL1
	                                              AND M4.LEVEL2      != '*'
	                                              AND M4.LEVEL2       = C1.ITEM_LEVEL2
	                                              AND M4.LEVEL3      != '*'
	                                              AND M4.LEVEL3       = C1.ITEM_LEVEL3
			   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
												  AND M5.TYPE_LEVEL   = A.DIV_CODE
												  AND M5.TREE_CODE    = A.WH_CODE
			
	    WHERE  A.COMP_CODE        = @COMP_CODE
	    AND    A.DIV_CODE         = @DIV_CODE
	    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
	    AND    A.WH_CODE          = #{WH_CODE}
	    </if>
	    
	    AND    A.COUNT_DATE       = @COUNT_DATE
	    
	    AND    C1.STOCK_CARE_YN   = 'Y'
	    AND    C2.REAL_CARE_YN    = 'Y'
	    AND    A.COUNT_FLAG      IN ('P', 'C')
	    
	    
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
	    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
	    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
	    </if> 
		GROUP BY A.COMP_CODE
	         , A.DIV_CODE
	         , A.WH_CODE
			 , M5.TREE_NAME							 
			 , C1.ITEM_LEVEL1
			 , M2.LEVEL_NAME						
			 , C1.ITEM_LEVEL2
			 , M3.LEVEL_NAME						
			 , C1.ITEM_LEVEL3
			 , M4.LEVEL_NAME						
	         , ISNULL(C1.SPEC,'')
	         , C1.STOCK_UNIT
	         , A.WH_CELL_CODE
	         , C3.WH_CELL_NAME
	         , A.LOT_NO WITH ROLLUP
		HAVING (GROUPING(A.COMP_CODE)			=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	0
			 AND GROUPING(M4.LEVEL_NAME)		=	0
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	0
			 AND GROUPING(C1.STOCK_UNIT)		=	0
			 AND GROUPING(A.WH_CELL_CODE)		=	0
			 AND GROUPING(C3.WH_CELL_NAME)		=	0
			 AND GROUPING(A.LOT_NO)				=	0 --디테일	
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 AND GROUPING(A.WH_CELL_CODE)		=	1
			 AND GROUPING(C3.WH_CELL_NAME)		=	1
			 AND GROUPING(A.LOT_NO)				=	1 --창고소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 AND GROUPING(A.WH_CELL_CODE)		=	1
			 AND GROUPING(C3.WH_CELL_NAME)		=	1
			 AND GROUPING(A.LOT_NO)				=	1 --대분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 AND GROUPING(A.WH_CELL_CODE)		=	1
			 AND GROUPING(C3.WH_CELL_NAME)		=	1
			 AND GROUPING(A.LOT_NO)				=	1 --중분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	1
			 AND GROUPING(A.DIV_CODE)			=	1
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 AND GROUPING(A.WH_CELL_CODE)		=	1
			 AND GROUPING(C3.WH_CELL_NAME)		=	1
			 AND GROUPING(A.LOT_NO)				=	1 --총계
			 )		 	
		ORDER BY ISNULL(A.WH_CODE,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL3,'ZZZZZZZ')
				, GROUPING(A.COMP_CODE)
				+GROUPING(A.DIV_CODE)
				+GROUPING(A.WH_CODE)
				+GROUPING(M5.TREE_NAME)
				+GROUPING(C1.ITEM_LEVEL1)
				+GROUPING(M2.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL2)
				+GROUPING(M3.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL3)
				+GROUPING(M4.LEVEL_NAME)
				+GROUPING(ISNULL(C1.SPEC,''))
				+GROUPING(C1.STOCK_UNIT)
				+GROUPING(A.WH_CELL_CODE)
				+GROUPING(C3.WH_CELL_NAME)	
				+GROUPING(A.LOT_NO)	
	END
*/
/*
	BEGIN
	
	--2016.01.25 배성한 이사님
	    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
	                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
	                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
	                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
	                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
	                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
	                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
	                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
	
	/*--  1. 변수 값 할당 ------------------------------------------------------------------------------------------------- */
	    SET @COMP_CODE          = #{S_COMP_CODE}
	    SET @DIV_CODE           = #{DIV_CODE}
	    SET @COUNT_DATE         = #{COUNT_DATE}
	    SET @USER_ID            = #{S_USER_ID}
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    DECLARE @RefItem            NVARCHAR(01)
	
	    SELECT TOP 1 @RefItem = REF_ITEM
	    FROM   BSA300T WITH (NOLOCK)
	    WHERE  USER_ID = @USER_ID
	
	    SET @RefItem = ISNULL(@RefItem, '0')
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    SELECT 
			GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
			GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
			GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
			GROUPING(C1.STOCK_UNIT)		AS CLASS 
			, CASE 	WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 13 THEN '총    계'			
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 10 THEN ISNULL(M7.TREE_NAME,'')+ ' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 8 THEN ISNULL(M5.TREE_NAME,'')+' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 6 THEN ISNULL(M2.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 4 THEN ISNULL(M3.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 0 THEN M5.TREE_NAME								
					END WH_NAME															--창고명
			 , M7.TREE_NAME
					 
					 , A.COMP_CODE																--법인코드
					 , A.DIV_CODE																--사업장코드
					 , A.WH_CODE																--창고코드
			 --, M5.TREE_NAME							AS WH_NAME		 				
					 , C1.ITEM_LEVEL1															--대분류코드
					 , M2.LEVEL_NAME						AS LEVEL1_NAME						--대분류명
					 , C1.ITEM_LEVEL2															--중분류코드
					 , M3.LEVEL_NAME						AS LEVEL2_NAME						--중분류명
					 , C1.ITEM_LEVEL3															--소분류코드
					 , M4.LEVEL_NAME						AS LEVEL3_NAME						--소분류명
					 , ISNULL(C1.SPEC,'')					AS SPEC								--규격
					 , C1.STOCK_UNIT															--재고단위
	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0) - ISNULL(C.STOCK_Q,0))		AS GOOD_STOCK_BOOK_Q
					, 0																			AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0) - ISNULL(C.STOCK_I,0))		AS STOCK_BOOK_I
	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0))							AS GOOD_STOCK_Q
	         		, 0 																		AS BAD_STOCK_Q			--재고조사후 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0))							AS STOCK_I	
                    , SUM((-1) * ISNULL(C.STOCK_Q,0))											AS GOOD_CAL_Q	
                    , 0																			AS BAD_CAL_Q
                    , SUM((-1) * ISNULL(C.STOCK_I,0))											AS STOCK_CAL_I
	             FROM            BIV100T  A  WITH (NOLOCK)
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE  = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                                                           AND C.USE_YN                    = 'Y'		/* 사용중인 품목 */  
                                   WHERE A.COMP_CODE   = @COMP_CODE
                                     AND A.DIV_CODE    = @DIV_CODE  
                                     AND A.INOUT_DATE &gt;= CONVERT(NVARCHAR(8), DATEADD(d, 1,CONVERT(SMALLDATETIME,@COUNT_DATE)), 112)
                                     AND A.INOUT_DATE &lt;= CONVERT(NVARCHAR(8), DATEADD(d,-1,GETDATE()), 112)
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) B ON B.COMP_CODE = A.COMP_CODE
                                                                                              AND B.DIV_CODE  = A.DIV_CODE
                                                                                              AND B.WH_CODE   = A.WH_CODE
                                                                                              AND B.ITEM_CODE = A.ITEM_CODE
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                   WHERE A.COMP_CODE         = @COMP_CODE
                                     AND A.DIV_CODE          = @DIV_CODE 
                                     AND A.INOUT_DATE        = @COUNT_DATE
                                     AND A.INOUT_TYPE        = '2'
                                     AND A.CREATE_LOC        = '4'
                                     AND A.INOUT_METH        = '4'
								     AND A.INOUT_TYPE_DETAIL = '96'
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) C ON C.COMP_CODE = A.COMP_CODE
                                                                                              AND C.DIV_CODE  = A.DIV_CODE
                                                                                              AND C.WH_CODE   = A.WH_CODE
                                                                                              AND C.ITEM_CODE = A.ITEM_CODE
	                  INNER JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목*/
	                                                      AND C1.ITEM_CODE  = A.ITEM_CODE
	                                                      AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
	                  INNER JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목*/
	                                                      AND C2.DIV_CODE   = A.DIV_CODE
	                                                      AND C2.ITEM_CODE  = A.ITEM_CODE
					   --LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
								--						  AND C3.DIV_CODE     = A.DIV_CODE
								--						  AND C3.WH_CODE      = A.WH_CODE
								--						  AND C3.WH_CELL_CODE = A.WH_CELL_CODE
					   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
														  AND M1.MAIN_CODE    = 'B020'
														  AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
					   LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
														  AND M2.LEVEL1       = C1.ITEM_LEVEL1
														  AND M2.LEVEL2       = '*'
														  AND M2.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
														  AND M3.LEVEL1       = C1.ITEM_LEVEL1
														  AND M3.LEVEL2      != '*'
														  AND M3.LEVEL2       = C1.ITEM_LEVEL2
														  AND M3.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
														  AND M4.LEVEL1       = C1.ITEM_LEVEL1
														  AND M4.LEVEL2      != '*'
														  AND M4.LEVEL2       = C1.ITEM_LEVEL2
														  AND M4.LEVEL3      != '*'
														  AND M4.LEVEL3       = C1.ITEM_LEVEL3
					   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
														  AND M5.TYPE_LEVEL   = A.DIV_CODE
														  AND M5.TREE_CODE    = A.WH_CODE
				      LEFT	 JOIN BSA210T M6 WITH (NOLOCK) ON A.COMP_CODE	  = M6.COMP_CODE
													      AND A.WH_CODE		  = M6.WH_CODE
														  AND A.DIV_CODE	  = M6.TYPE_LEVEL
														  
					   LEFT  JOIN BSA210T M7 WITH (NOLOCK) ON M6.COMP_CODE    = M7.COMP_CODE
														  AND M6.TYPE_LEVEL	  = M7.TYPE_LEVEL
														  AND LEFT(M6.TREE_LEVEL,4)   = M7.TREE_LEVEL
	            WHERE A.COMP_CODE      = @COMP_CODE
	    AND    A.DIV_CODE         = @DIV_CODE
	    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
	    AND    A.WH_CODE          = #{WH_CODE}
	    </if>
	    
	    AND    C1.STOCK_CARE_YN   = 'Y'
	    AND    C2.REAL_CARE_YN    = 'Y'
	    
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
	    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
	    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
	    </if> 
		GROUP BY A.COMP_CODE
	         , A.DIV_CODE
	         , M7.TREE_NAME /*추가*/
	         , A.WH_CODE
			 , M5.TREE_NAME							 
			 , C1.ITEM_LEVEL1
			 , M2.LEVEL_NAME						
			 , C1.ITEM_LEVEL2
			 , M3.LEVEL_NAME						
			 , C1.ITEM_LEVEL3
			 , M4.LEVEL_NAME						
	         , ISNULL(C1.SPEC,'')
	         , C1.STOCK_UNIT WITH ROLLUP
		HAVING (GROUPING(A.COMP_CODE)			=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	0
			 AND GROUPING(M4.LEVEL_NAME)		=	0
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	0
			 AND GROUPING(C1.STOCK_UNIT)		=	0 --디테일		 
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --팀별 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --창고소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --대분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --중분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	1
			 AND GROUPING(A.DIV_CODE)			=	1
			 AND GROUPING(M7.TREE_NAME)			=	1	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --총계
			 )		 	
		ORDER BY ISNULL(A.WH_CODE,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL3,'ZZZZZZZ')
				, GROUPING(A.COMP_CODE)
				+GROUPING(A.DIV_CODE)
				+GROUPING(M7.TREE_NAME)	/*추가*/
				+GROUPING(A.WH_CODE)
				+GROUPING(M5.TREE_NAME)
				+GROUPING(C1.ITEM_LEVEL1)
				+GROUPING(M2.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL2)
				+GROUPING(M3.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL3)
				+GROUPING(M4.LEVEL_NAME)
				+GROUPING(ISNULL(C1.SPEC,''))
				+GROUPING(C1.STOCK_UNIT)
	
	END 
	
*/

		
    -- (조회)
    BEGIN
	
	--2016.01.25 배성한 이사님
	    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
	                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
	                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
	                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
	                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
	                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
	                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
	                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
	
	/*--  1. 변수 값 할당 ------------------------------------------------------------------------------------------------- */
	    SET @COMP_CODE          = #{S_COMP_CODE}
	    SET @DIV_CODE           = #{DIV_CODE}
	    SET @COUNT_DATE         = #{COUNT_DATE}
	    SET @USER_ID            = #{S_USER_ID}
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    DECLARE @RefItem            NVARCHAR(01)
	
	    SELECT TOP 1 @RefItem = REF_ITEM
	    FROM   BSA300T WITH (NOLOCK)
	    WHERE  USER_ID = @USER_ID
	
	    SET @RefItem = ISNULL(@RefItem, '0')
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    SELECT 
			GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
			GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
			GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
			GROUPING(C1.STOCK_UNIT)		AS CLASS 
			, CASE 	WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 13 THEN '총    계'			
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 10 THEN ISNULL(M7.TREE_NAME,'')+ ' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 8 THEN ISNULL(M5.TREE_NAME,'')+' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 6 THEN ISNULL(M2.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 4 THEN ISNULL(M3.LEVEL_NAME,'') +' 소계'
					WHEN 		GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
								GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
								GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
								GROUPING(C1.STOCK_UNIT) = 0 THEN M5.TREE_NAME								
					END WH_NAME															--창고명
			         , M7.TREE_NAME
					 
					 , A.COMP_CODE																--법인코드
					 , A.DIV_CODE																--사업장코드
					 , A.WH_CODE																--창고코드
			 --, M5.TREE_NAME							AS WH_NAME		 				
					 , C1.ITEM_LEVEL1															--대분류코드
					 , M2.LEVEL_NAME						AS LEVEL1_NAME						--대분류명
					 , C1.ITEM_LEVEL2															--중분류코드
					 , M3.LEVEL_NAME						AS LEVEL2_NAME						--중분류명
					 , C1.ITEM_LEVEL3															--소분류코드
					 , M4.LEVEL_NAME						AS LEVEL3_NAME						--소분류명
					 , ISNULL(C1.SPEC,'')					AS SPEC								--규격
					 , C1.STOCK_UNIT															--재고단위

	                 , '' AS WH_CELL_CODE															--창고셀코드
	                 , '' AS WH_CELL_NAME															--창고셀명
	                 , '' AS LOT_NO																	--LOT번호

	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0) - ISNULL(C.STOCK_Q,0))		AS GOOD_STOCK_BOOK_Q
					, 0																			AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0) - ISNULL(C.STOCK_I,0))		AS STOCK_BOOK_I
	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0))							AS GOOD_STOCK_Q
	         		, 0 																		AS BAD_STOCK_Q			--재고조사후 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0))							AS STOCK_I	
                    , SUM((-1) * ISNULL(C.STOCK_Q,0))											AS GOOD_CAL_Q	
                    , 0																			AS BAD_CAL_Q
                    , SUM((-1) * ISNULL(C.STOCK_I,0))											AS STOCK_CAL_I
	             FROM            BIV100T  A  WITH (NOLOCK)
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK, INDEX(BTR100T_IDX02))  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE  = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                                                           AND C.USE_YN                    = 'Y'		/* 사용중인 품목 */  
                                   WHERE A.COMP_CODE   = @COMP_CODE
                                     AND A.DIV_CODE    = @DIV_CODE  
                                     AND A.INOUT_DATE &gt;= CONVERT(NVARCHAR(8), DATEADD(d, 1,CONVERT(SMALLDATETIME,@COUNT_DATE)), 112)
                                     AND A.INOUT_DATE &lt;= CONVERT(NVARCHAR(8), DATEADD(d,-1,GETDATE()), 112)
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) B ON B.COMP_CODE = A.COMP_CODE
                                                                                              AND B.DIV_CODE  = A.DIV_CODE
                                                                                              AND B.WH_CODE   = A.WH_CODE
                                                                                              AND B.ITEM_CODE = A.ITEM_CODE
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                   WHERE A.COMP_CODE         = @COMP_CODE
                                     AND A.DIV_CODE          = @DIV_CODE 
                                     AND A.INOUT_DATE        = @COUNT_DATE
                                     AND A.INOUT_TYPE        = '2'
                                     AND A.CREATE_LOC        = '4'
                                     AND A.INOUT_METH        = '4'
								     AND A.INOUT_TYPE_DETAIL = '96'
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) C ON C.COMP_CODE = A.COMP_CODE
                                                                                              AND C.DIV_CODE  = A.DIV_CODE
                                                                                              AND C.WH_CODE   = A.WH_CODE
                                                                                              AND C.ITEM_CODE = A.ITEM_CODE
	                  INNER JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목*/
	                                                      AND C1.ITEM_CODE  = A.ITEM_CODE
	                                                      AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
	                  INNER JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목*/
	                                                      AND C2.DIV_CODE   = A.DIV_CODE
	                                                      AND C2.ITEM_CODE  = A.ITEM_CODE
					   --LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
								--						  AND C3.DIV_CODE     = A.DIV_CODE
								--						  AND C3.WH_CODE      = A.WH_CODE
								--						  AND C3.WH_CELL_CODE = A.WH_CELL_CODE
					   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
														  AND M1.MAIN_CODE    = 'B020'
														  AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
					   LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
														  AND M2.LEVEL1       = C1.ITEM_LEVEL1
														  AND M2.LEVEL2       = '*'
														  AND M2.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
														  AND M3.LEVEL1       = C1.ITEM_LEVEL1
														  AND M3.LEVEL2      != '*'
														  AND M3.LEVEL2       = C1.ITEM_LEVEL2
														  AND M3.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
														  AND M4.LEVEL1       = C1.ITEM_LEVEL1
														  AND M4.LEVEL2      != '*'
														  AND M4.LEVEL2       = C1.ITEM_LEVEL2
														  AND M4.LEVEL3      != '*'
														  AND M4.LEVEL3       = C1.ITEM_LEVEL3
					   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
														  AND M5.TYPE_LEVEL   = A.DIV_CODE
														  AND M5.TREE_CODE    = A.WH_CODE
				      LEFT	 JOIN BSA210T M6 WITH (NOLOCK) ON A.COMP_CODE	  = M6.COMP_CODE
													      AND A.WH_CODE		  = M6.WH_CODE
														  AND A.DIV_CODE	  = M6.TYPE_LEVEL
														  AND M6.TREE_CODE = (CASE WHEN A.WH_CODE = 'W108' THEN '210' ELSE M6.TREE_CODE END)
					   LEFT  JOIN BSA210T M7 WITH (NOLOCK) ON M6.COMP_CODE    = M7.COMP_CODE
														  AND M6.TYPE_LEVEL	  = M7.TYPE_LEVEL
														  AND LEFT(M6.TREE_LEVEL,4)   = M7.TREE_LEVEL
	            WHERE A.COMP_CODE      = @COMP_CODE
	    AND    A.DIV_CODE         = @DIV_CODE
	    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
	    AND    A.WH_CODE          = #{WH_CODE}
	    </if>
	    
	    --AND    A.COUNT_DATE       = @COUNT_DATE
	    
	    AND    C1.STOCK_CARE_YN   = 'Y'
	    AND    C2.REAL_CARE_YN    = 'Y'
	    --AND    A.COUNT_FLAG      IN ('P', 'C')
	    
	    
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
	    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
	    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
	    </if> 
	    
	     
	     
	      
		GROUP BY A.COMP_CODE
	         , A.DIV_CODE
	         , M7.TREE_NAME /*추가*/
	         , A.WH_CODE
			 , M5.TREE_NAME							 
			 , C1.ITEM_LEVEL1
			 , M2.LEVEL_NAME						
			 , C1.ITEM_LEVEL2
			 , M3.LEVEL_NAME						
			 , C1.ITEM_LEVEL3
			 , M4.LEVEL_NAME						
	         , ISNULL(C1.SPEC,'')
	         , C1.STOCK_UNIT WITH ROLLUP
		HAVING (GROUPING(A.COMP_CODE)			=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	0
			 AND GROUPING(M4.LEVEL_NAME)		=	0
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	0
			 AND GROUPING(C1.STOCK_UNIT)		=	0 --디테일		 
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --팀별 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --창고소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --대분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --중분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	1
			 AND GROUPING(A.DIV_CODE)			=	1
			 AND GROUPING(M7.TREE_NAME)			=	1	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --총계
			 )		 	
		ORDER BY ISNULL(A.WH_CODE,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL3,'ZZZZZZZ')
				, GROUPING(A.COMP_CODE)
				+GROUPING(A.DIV_CODE)
				+GROUPING(M7.TREE_NAME)	/*추가*/
				+GROUPING(A.WH_CODE)
				+GROUPING(M5.TREE_NAME)
				+GROUPING(C1.ITEM_LEVEL1)
				+GROUPING(M2.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL2)
				+GROUPING(M3.LEVEL_NAME)
				+GROUPING(C1.ITEM_LEVEL3)
				+GROUPING(M4.LEVEL_NAME)
				+GROUPING(ISNULL(C1.SPEC,''))
				+GROUPING(C1.STOCK_UNIT)
	
	END 
		
	</select>
	
	<select id="biv121skrvServiceImpl.report" parameterType="Map" resultType="rMap">
/*
		BEGIN
		-- 김기근대리님
		    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
		                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
		                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
		                  , @WH_CELL_CODE       NVARCHAR(20)                -- (선택) 창고CELL
		                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
		                  , @ITEM_ACCOUNT       NVARCHAR(02)                -- (선택) 품목계정
		                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
		                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
		                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
		                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
		
		/* 1. 변수 값 할당> ----------------------------------------------------------------------------------------------------  */
		    SET @COMP_CODE          = #{S_COMP_CODE}
		    SET @DIV_CODE           = #{DIV_CODE}
		    SET @COUNT_DATE         = #{COUNT_DATE}
		    SET @USER_ID            = #{S_USER_ID}
		
		/* ------------------------------------------------------------------------------------------------------------------ */
		    DECLARE @RefItem            NVARCHAR(01)
		
		    SELECT TOP 1 @RefItem = REF_ITEM
		    FROM   BSA300T WITH (NOLOCK)
		    WHERE  USER_ID = @USER_ID
		
		    SET @RefItem = ISNULL(@RefItem, '0')
		
		/* ------------------------------------------------------------------------------------------------------------------- */
		    SELECT 
				   M5.TREE_NAME 							AS WH_NAME									--창고명
				 , A.COMP_CODE																			--법인코드
		         , A.DIV_CODE																			--사업장코드
		         , A.WH_CODE																			--창고코드
				 --, M5.TREE_NAME							AS WH_NAME		 				
				 , C1.ITEM_LEVEL1																		--대분류코드
				 , CASE ISNULL( M2.LEVEL_NAME, '' )
				 				WHEN '' THEN ''
				 				ELSE  M2.LEVEL_NAME
						END   							    AS LEVEL1_NAME								--대분류명
			
				 , C1.ITEM_LEVEL2																		--중분류코드
				 , CASE ISNULL( M3.LEVEL_NAME, '' )
				 				WHEN '' THEN ''
				 				ELSE  M3.LEVEL_NAME
						END   							    AS LEVEL2_NAME								--중분류명
		         , ISNULL(C1.SPEC,'')						AS SPEC										--규격
		         , C1.STOCK_UNIT																		--재고단위
		         , A.WH_CELL_CODE																		--창고셀코드
		         , C3.WH_CELL_NAME																		--창고셀명
		         , A.LOT_NO																				--LOT번호
		         , SUM(ISNULL(A.GOOD_STOCK_BOOK_Q,0))							AS GOOD_STOCK_BOOK_Q	--재고조사전 양품수량
		         , SUM(ISNULL(A.BAD_STOCK_BOOK_Q,0))							AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
				 , SUM(ISNULL(A.TEMPN_01,0))									AS STOCK_BOOK_I			--재고조사전 재고금액
		         , SUM(ISNULL(A.GOOD_STOCK_Q,0))								AS GOOD_STOCK_Q			--재고조사후 양품수량
		         , SUM(ISNULL(A.BAD_STOCK_Q,0))									AS BAD_STOCK_Q			--재고조사후 불량수량
				 , SUM(ISNULL(B.STOCK_I,0))										AS STOCK_I				--재고조사후 재고금액
		         , SUM(ISNULL(A.GOOD_STOCK_BOOK_Q,0)) - SUM(ISNULL(A.GOOD_STOCK_Q,0))	AS GOOD_CAL_Q	--LOSS	양품수량
		         , SUM(ISNULL(A.BAD_STOCK_BOOK_Q,0))  - SUM(ISNULL(A.BAD_STOCK_Q,0))	AS BAD_CAL_Q	--LOSS	불량수량
				 , SUM(ISNULL(A.TEMPN_01,0))		  - SUM(ISNULL(B.STOCK_I,0))		AS STOCK_CAL_I	--LOSS	재고금액
				
				 , M7.TREE_NAME
		    FROM              BIV300T A  WITH (NOLOCK)
				   LEFT  JOIN BIV100T B  WITH (NOLOCK) ON A.COMP_CODE	  = B.COMP_CODE
													  AND A.DIV_CODE	  = B.DIV_CODE
													  AND A.WH_CODE       = B.WH_CODE
													  AND A.ITEM_CODE     = B.ITEM_CODE
		           INNER JOIN BPR100T C1 WITH (NOLOCK) ON C1.COMP_CODE    = A.COMP_CODE
		                                              AND C1.ITEM_CODE    = A.ITEM_CODE
		           INNER JOIN BPR200T C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE
		                                              AND C2.DIV_CODE     = A.DIV_CODE
		                                              AND C2.ITEM_CODE    = A.ITEM_CODE
		           LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
		                                              AND C3.DIV_CODE     = A.DIV_CODE
		                                              AND C3.WH_CODE      = A.WH_CODE
		                                              AND C3.WH_CELL_CODE = A.WH_CELL_CODE
		           LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
		                                              AND M1.MAIN_CODE    = 'B020'
		                                              AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
		           LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
		                                              AND M2.LEVEL1       = C1.ITEM_LEVEL1
		                                              AND M2.LEVEL2       = '*'
		                                              AND M2.LEVEL3       = '*'
		           LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
		                                              AND M3.LEVEL1       = C1.ITEM_LEVEL1
		                                              AND M3.LEVEL2      != '*'
		                                              AND M3.LEVEL2       = C1.ITEM_LEVEL2
		                                              AND M3.LEVEL3       = '*'
		           LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
		                                              AND M4.LEVEL1       = C1.ITEM_LEVEL1
		                                              AND M4.LEVEL2      != '*'
		                                              AND M4.LEVEL2       = C1.ITEM_LEVEL2
		                                              AND M4.LEVEL3      != '*'
		                                              AND M4.LEVEL3       = C1.ITEM_LEVEL3
				   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
													  AND M5.TYPE_LEVEL   = A.DIV_CODE
													  AND M5.TREE_CODE    = A.WH_CODE
													  
				   LEFT	 JOIN BSA210T M6 WITH (NOLOCK) ON A.COMP_CODE	  = M6.COMP_CODE
												 	  AND A.WH_CODE		  = M6.WH_CODE
												      AND A.DIV_CODE	  = M6.TYPE_LEVEL
												      
				   LEFT  JOIN BSA210T M7 WITH (NOLOCK) ON M6.COMP_CODE    = M7.COMP_CODE
													  AND M6.TYPE_LEVEL	  = M7.TYPE_LEVEL
													  AND LEFT(M6.TREE_LEVEL,4)   = M7.TREE_LEVEL											  
		    WHERE  A.COMP_CODE        = @COMP_CODE
		    AND    A.DIV_CODE         = @DIV_CODE
		    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
		    AND    A.WH_CODE          = #{WH_CODE}
		    </if>
		    AND    A.COUNT_DATE       = @COUNT_DATE
		    AND    C1.STOCK_CARE_YN   = 'Y'
		    AND    C2.REAL_CARE_YN    = 'Y'
		    AND    A.COUNT_FLAG      IN ('P', 'C')
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
		    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
		    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
		    </if>
			GROUP BY A.COMP_CODE
		         , A.DIV_CODE
		         , M7.TREE_NAME /*추가*/
		         , A.WH_CODE
				 , M5.TREE_NAME							 
				 , C1.ITEM_LEVEL1
				 , M2.LEVEL_NAME						
				 , C1.ITEM_LEVEL2
				 , M3.LEVEL_NAME
		         , ISNULL(C1.SPEC,'')
		         , C1.STOCK_UNIT
		         , A.WH_CELL_CODE
		         , C3.WH_CELL_NAME
		         , A.LOT_NO  	 
			ORDER BY ISNULL(A.WH_CODE,''), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ')	
		END
*/

/*
/* BIV300T 를 바라보지 않아서 상의필요 */	
		/* 2016.01.25 배성한이사님 요청한 레포트 */
		BEGIN
		    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
		                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
		                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
		                  , @WH_CELL_CODE       NVARCHAR(20)                -- (선택) 창고CELL
		                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
		                  , @ITEM_ACCOUNT       NVARCHAR(02)                -- (선택) 품목계정
		                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
		                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
		                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
		                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
		
		/* 1. 변수 값 할당> ----------------------------------------------------------------------------------------------------  */
		    SET @COMP_CODE          = #{S_COMP_CODE}
		    SET @DIV_CODE           = #{DIV_CODE}
		    SET @COUNT_DATE         = #{COUNT_DATE}
		    SET @USER_ID            = #{S_USER_ID}
		
		/* ------------------------------------------------------------------------------------------------------------------ */
		    DECLARE @RefItem            NVARCHAR(01)
		
		    SELECT TOP 1 @RefItem = REF_ITEM
		    FROM   BSA300T WITH (NOLOCK)
		    WHERE  USER_ID = @USER_ID
		
		    SET @RefItem = ISNULL(@RefItem, '0')
		
		/* ------------------------------------------------------------------------------------------------------------------- */
		    SELECT 
				   M5.TREE_NAME 							AS WH_NAME									--창고명
				 , A.COMP_CODE																--법인코드
					 , A.DIV_CODE																--사업장코드
					 , A.WH_CODE																--창고코드
			 --, M5.TREE_NAME							AS WH_NAME		 				
					 , C1.ITEM_LEVEL1															--대분류코드
					 , M2.LEVEL_NAME						AS LEVEL1_NAME						--대분류명
					 , C1.ITEM_LEVEL2															--중분류코드
					 , M3.LEVEL_NAME						AS LEVEL2_NAME						--중분류명
					 , C1.ITEM_LEVEL3															--소분류코드
					 , M4.LEVEL_NAME						AS LEVEL3_NAME						--소분류명
					 , ISNULL(C1.SPEC,'')					AS SPEC								--규격
					 , C1.STOCK_UNIT															--재고단위
	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0) - ISNULL(C.STOCK_Q,0))		AS GOOD_STOCK_BOOK_Q
					, 0																			AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0) - ISNULL(C.STOCK_I,0))		AS STOCK_BOOK_I
	                , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0))							AS GOOD_STOCK_Q
	         		, 0 																		AS BAD_STOCK_Q			--재고조사후 불량수량
                    , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0))							AS STOCK_I	
                    , SUM((-1) * ISNULL(C.STOCK_Q,0))											AS GOOD_CAL_Q	
                    , 0																			AS BAD_CAL_Q
                    , SUM((-1) * ISNULL(C.STOCK_I,0))											AS STOCK_CAL_I
	             FROM            BIV100T  A  WITH (NOLOCK)
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE  = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                                                           AND C.USE_YN                    = 'Y'		/* 사용중인 품목 */  
                                   WHERE A.COMP_CODE   = @COMP_CODE
                                     AND A.DIV_CODE    = @DIV_CODE  
                                     AND A.INOUT_DATE &gt;= CONVERT(NVARCHAR(8), DATEADD(d, 1,CONVERT(SMALLDATETIME,@COUNT_DATE)), 112)
                                     AND A.INOUT_DATE &lt;= CONVERT(NVARCHAR(8), DATEADD(d,-1,GETDATE()), 112)
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) B ON B.COMP_CODE = A.COMP_CODE
                                                                                              AND B.DIV_CODE  = A.DIV_CODE
                                                                                              AND B.WH_CODE   = A.WH_CODE
                                                                                              AND B.ITEM_CODE = A.ITEM_CODE
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                   WHERE A.COMP_CODE         = @COMP_CODE
                                     AND A.DIV_CODE          = @DIV_CODE 
                                     AND A.INOUT_DATE        = @COUNT_DATE
                                     AND A.INOUT_TYPE        = '2'
                                     AND A.CREATE_LOC        = '4'
                                     AND A.INOUT_METH        = '4'
								     AND A.INOUT_TYPE_DETAIL = '96'
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) C ON C.COMP_CODE = A.COMP_CODE
                                                                                              AND C.DIV_CODE  = A.DIV_CODE
                                                                                              AND C.WH_CODE   = A.WH_CODE
                                                                                              AND C.ITEM_CODE = A.ITEM_CODE
	                  INNER JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목*/
	                                                      AND C1.ITEM_CODE  = A.ITEM_CODE
	                                                      AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
	                  INNER JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목*/
	                                                      AND C2.DIV_CODE   = A.DIV_CODE
	                                                      AND C2.ITEM_CODE  = A.ITEM_CODE
					   --LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
								--						  AND C3.DIV_CODE     = A.DIV_CODE
								--						  AND C3.WH_CODE      = A.WH_CODE
								--						  AND C3.WH_CELL_CODE = A.WH_CELL_CODE
					   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
														  AND M1.MAIN_CODE    = 'B020'
														  AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
					   LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
														  AND M2.LEVEL1       = C1.ITEM_LEVEL1
														  AND M2.LEVEL2       = '*'
														  AND M2.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
														  AND M3.LEVEL1       = C1.ITEM_LEVEL1
														  AND M3.LEVEL2      != '*'
														  AND M3.LEVEL2       = C1.ITEM_LEVEL2
														  AND M3.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
														  AND M4.LEVEL1       = C1.ITEM_LEVEL1
														  AND M4.LEVEL2      != '*'
														  AND M4.LEVEL2       = C1.ITEM_LEVEL2
														  AND M4.LEVEL3      != '*'
														  AND M4.LEVEL3       = C1.ITEM_LEVEL3
					   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
														  AND M5.TYPE_LEVEL   = A.DIV_CODE
														  AND M5.TREE_CODE    = A.WH_CODE
				      LEFT	 JOIN BSA210T M6 WITH (NOLOCK) ON A.COMP_CODE	  = M6.COMP_CODE
													      AND A.WH_CODE		  = M6.WH_CODE
														  AND A.DIV_CODE	  = M6.TYPE_LEVEL
														  
					   LEFT  JOIN BSA210T M7 WITH (NOLOCK) ON M6.COMP_CODE    = M7.COMP_CODE
														  AND M6.TYPE_LEVEL	  = M7.TYPE_LEVEL
														  AND LEFT(M6.TREE_LEVEL,4)   = M7.TREE_LEVEL
            WHERE A.COMP_CODE      = @COMP_CODE
            AND    A.DIV_CODE         = @DIV_CODE
		    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
		    AND    A.WH_CODE          = #{WH_CODE}
		    </if>
		    AND    A.COUNT_DATE       = @COUNT_DATE
		    AND    C1.STOCK_CARE_YN   = 'Y'
		    AND    C2.REAL_CARE_YN    = 'Y'
		    AND    A.COUNT_FLAG      IN ('P', 'C')
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
		    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
		    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
		    </if>
			GROUP BY A.COMP_CODE
		         , A.DIV_CODE
		         , M7.TREE_NAME /*추가*/
		         , A.WH_CODE
				 , M5.TREE_NAME							 
				 , C1.ITEM_LEVEL1
				 , M2.LEVEL_NAME						
				 , C1.ITEM_LEVEL2
				 , M3.LEVEL_NAME
		         , ISNULL(C1.SPEC,'')
		         , C1.STOCK_UNIT
		         , A.WH_CELL_CODE
		         , C3.WH_CELL_NAME
		         , A.LOT_NO  	 
			ORDER BY ISNULL(A.WH_CODE,''), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ')	
		END
*/
	
		
    -- (출력)
    BEGIN
	
	--2016.01.25 배성한 이사님
	    DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
	                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장
	                  , @WH_CODE            NVARCHAR(08)                -- (필수) 창고
	                  , @COUNT_DATE         NVARCHAR(08)                -- (필수) 실사(선택)일자
	                  , @ITEM_LEVEL1        NVARCHAR(05)                -- (선택) 대분류
	                  , @ITEM_LEVEL2        NVARCHAR(05)                -- (선택) 중분류
	                  , @ITEM_LEVEL3        NVARCHAR(05)                -- (선택) 소분류
	                  , @USER_ID            NVARCHAR(100)                -- (필수) USER ID
	
	/*--  1. 변수 값 할당 ------------------------------------------------------------------------------------------------- */
	    SET @COMP_CODE          = #{S_COMP_CODE}
	    SET @DIV_CODE           = #{DIV_CODE}
	    SET @COUNT_DATE         = #{COUNT_DATE}
	    SET @USER_ID            = #{S_USER_ID}
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    DECLARE @RefItem            NVARCHAR(01)
	
	    SELECT TOP 1 @RefItem = REF_ITEM
	    FROM   BSA300T WITH (NOLOCK)
	    WHERE  USER_ID = @USER_ID
	
	    SET @RefItem = ISNULL(@RefItem, '0')
	
	/* -----------------------------------------------------------------------------------------------------------------------	*/
	    SELECT M5.TREE_NAME AS WH_NAME
					 
             , A.COMP_CODE																--법인코드
             , A.DIV_CODE																--사업장코드
             , A.WH_CODE																--창고코드
			 --, M5.TREE_NAME							AS WH_NAME		 				
             , C1.ITEM_LEVEL1															--대분류코드
             , M2.LEVEL_NAME						AS LEVEL1_NAME						--대분류명
             , C1.ITEM_LEVEL2															--중분류코드
             , M3.LEVEL_NAME						AS LEVEL2_NAME						--중분류명
             --, C1.ITEM_LEVEL3															--소분류코드
             --, M4.LEVEL_NAME						AS LEVEL3_NAME						--소분류명
             , ISNULL(C1.SPEC,'')					AS SPEC								--규격
             , C1.STOCK_UNIT															--재고단위
             
             , '' AS WH_CELL_CODE															--창고셀코드
             , '' AS WH_CELL_NAME															--창고셀명
             , '' AS LOT_NO																	--LOT번호
             
             , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0) - ISNULL(C.STOCK_Q,0))		AS GOOD_STOCK_BOOK_Q
             , 0                                                                        AS BAD_STOCK_BOOK_Q		--재고조사전 불량수량
             , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0) - ISNULL(C.STOCK_I,0))		AS STOCK_BOOK_I
             , SUM(ISNULL(A.STOCK_Q,0) - ISNULL(B.STOCK_Q,0))							AS GOOD_STOCK_Q
             , 0 																		AS BAD_STOCK_Q			--재고조사후 불량수량
             , SUM(ISNULL(A.STOCK_I,0) - ISNULL(B.STOCK_I,0))							AS STOCK_I	
             , SUM((-1) * ISNULL(C.STOCK_Q,0))											AS GOOD_CAL_Q	
             , 0                                                                        AS BAD_CAL_Q
             , SUM((-1) * ISNULL(C.STOCK_I,0))											AS STOCK_CAL_I
             , M7.TREE_NAME
	             FROM            BIV100T  A  WITH (NOLOCK)
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK, INDEX(BTR100T_IDX02))  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE  = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                                                           AND C.USE_YN                    = 'Y'		/* 사용중인 품목 */  
                                   WHERE A.COMP_CODE   = @COMP_CODE
                                     AND A.DIV_CODE    = @DIV_CODE  
                                     AND A.INOUT_DATE &gt;= CONVERT(NVARCHAR(8), DATEADD(d, 1,CONVERT(SMALLDATETIME,@COUNT_DATE)), 112)
                                     AND A.INOUT_DATE &lt;= CONVERT(NVARCHAR(8), DATEADD(d,-1,GETDATE()), 112)
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) B ON B.COMP_CODE = A.COMP_CODE
                                                                                              AND B.DIV_CODE  = A.DIV_CODE
                                                                                              AND B.WH_CODE   = A.WH_CODE
                                                                                              AND B.ITEM_CODE = A.ITEM_CODE
	                  LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_Q	 ELSE (-1) * A.INOUT_Q     END) AS STOCK_Q  
                                       , SUM(CASE WHEN A.INOUT_TYPE IN ('1', '3') THEN A.INOUT_CAL_I ELSE (-1) * A.INOUT_CAL_I END)	AS STOCK_I   
                                    FROM            BTR100T A WITH(NOLOCK)  
								 	     INNER JOIN BPR200T B  WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE   
								 		 			                       AND A.DIV_CODE = B.DIV_CODE   
								 					                       AND A.ITEM_CODE = B.ITEM_CODE  
                                         INNER JOIN BPR100T C  WITH(NOLOCK) ON A.COMP_CODE = C.COMP_CODE   
                                                                           AND A.ITEM_CODE = C.ITEM_CODE  
                                                                           AND ISNULL(C.STOCK_CARE_YN,'N') = 'Y'		/* 재고관리 대상 품목 */  
                                   WHERE A.COMP_CODE         = @COMP_CODE
                                     AND A.DIV_CODE          = @DIV_CODE 
                                     AND A.INOUT_DATE        = @COUNT_DATE
                                     AND A.INOUT_TYPE        = '2'
                                     AND A.CREATE_LOC        = '4'
                                     AND A.INOUT_METH        = '4'
								     AND A.INOUT_TYPE_DETAIL = '96'
                                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE) C ON C.COMP_CODE = A.COMP_CODE
                                                                                              AND C.DIV_CODE  = A.DIV_CODE
                                                                                              AND C.WH_CODE   = A.WH_CODE
                                                                                              AND C.ITEM_CODE = A.ITEM_CODE
	                  INNER JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목*/
	                                                      AND C1.ITEM_CODE  = A.ITEM_CODE
	                                                      AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
	                  INNER JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목*/
	                                                      AND C2.DIV_CODE   = A.DIV_CODE
	                                                      AND C2.ITEM_CODE  = A.ITEM_CODE
					   --LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
								--						  AND C3.DIV_CODE     = A.DIV_CODE
								--						  AND C3.WH_CODE      = A.WH_CODE
								--						  AND C3.WH_CELL_CODE = A.WH_CELL_CODE
					   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C2.COMP_CODE
														  AND M1.MAIN_CODE    = 'B020'
														  AND M1.SUB_CODE     = C2.ITEM_ACCOUNT 
					   LEFT  JOIN BPR000T M2 WITH (NOLOCK) ON M2.COMP_CODE    = C1.COMP_CODE
														  AND M2.LEVEL1       = C1.ITEM_LEVEL1
														  AND M2.LEVEL2       = '*'
														  AND M2.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M3 WITH (NOLOCK) ON M3.COMP_CODE    = C1.COMP_CODE
														  AND M3.LEVEL1       = C1.ITEM_LEVEL1
														  AND M3.LEVEL2      != '*'
														  AND M3.LEVEL2       = C1.ITEM_LEVEL2
														  AND M3.LEVEL3       = '*'
					   LEFT  JOIN BPR000T M4 WITH (NOLOCK) ON M4.COMP_CODE    = C1.COMP_CODE
														  AND M4.LEVEL1       = C1.ITEM_LEVEL1
														  AND M4.LEVEL2      != '*'
														  AND M4.LEVEL2       = C1.ITEM_LEVEL2
														  AND M4.LEVEL3      != '*'
														  AND M4.LEVEL3       = C1.ITEM_LEVEL3
					   LEFT  JOIN BSA220T M5 WITH (NOLOCK) ON M5.COMP_CODE    = A.COMP_CODE
														  AND M5.TYPE_LEVEL   = A.DIV_CODE
														  AND M5.TREE_CODE    = A.WH_CODE
														  
				      LEFT	 JOIN BSA210T M6 WITH (NOLOCK) ON A.COMP_CODE	  = M6.COMP_CODE
													      AND A.WH_CODE		  = M6.WH_CODE
														  AND A.DIV_CODE	  = M6.TYPE_LEVEL
														  AND M6.TREE_CODE = (CASE WHEN A.WH_CODE = 'W108' THEN '210' ELSE M6.TREE_CODE END)
					   LEFT  JOIN BSA210T M7 WITH (NOLOCK) ON M6.COMP_CODE    = M7.COMP_CODE
														  AND M6.TYPE_LEVEL	  = M7.TYPE_LEVEL
														  AND LEFT(M6.TREE_LEVEL,4)   = M7.TREE_LEVEL
	            WHERE A.COMP_CODE      = @COMP_CODE
	    AND    A.DIV_CODE         = @DIV_CODE
	    <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
	    AND    A.WH_CODE          = #{WH_CODE}
	    </if>
	    
	    --AND    A.COUNT_DATE       = @COUNT_DATE
	    
	    AND    C1.STOCK_CARE_YN   = 'Y'
	    AND    C2.REAL_CARE_YN    = 'Y'
	    --AND    A.COUNT_FLAG      IN ('P', 'C')
	    
	    
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)"> 
	    AND    C1.ITEM_LEVEL1     = #{ITEM_LEVEL1} 
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)"> 
	    AND    C1.ITEM_LEVEL2     = #{ITEM_LEVEL2}  
	    </if>
	    <if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
	    AND    C1.ITEM_LEVEL3     = #{ITEM_LEVEL3} 
	    </if> 
	    

	     
	      
		GROUP BY A.COMP_CODE
	         , A.DIV_CODE
	         , M7.TREE_NAME /*추가*/
	         , A.WH_CODE
			 , M5.TREE_NAME							 
			 , C1.ITEM_LEVEL1
			 , M2.LEVEL_NAME						
			 , C1.ITEM_LEVEL2
			 , M3.LEVEL_NAME						
			 , C1.ITEM_LEVEL3
			 , M4.LEVEL_NAME						
	         , ISNULL(C1.SPEC,'')
	         , C1.STOCK_UNIT WITH ROLLUP
		HAVING (
                (GROUPING(A.COMP_CODE)			=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	0
			 AND GROUPING(M4.LEVEL_NAME)		=	0
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	0
			 AND GROUPING(C1.STOCK_UNIT)		=	0 --디테일		 
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --팀별 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --창고소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --대분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	0
			 AND GROUPING(A.DIV_CODE)			=	0
			 AND GROUPING(M7.TREE_NAME)			=	0	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	0
			 AND GROUPING(M5.TREE_NAME)			=	0
			 AND GROUPING(C1.ITEM_LEVEL1)		=	0
			 AND GROUPING(M2.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL2)		=	0
			 AND GROUPING(M3.LEVEL_NAME)		=	0
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --중분류 소계
			 ) OR
			 (GROUPING(A.COMP_CODE)				=	1
			 AND GROUPING(A.DIV_CODE)			=	1
			 AND GROUPING(M7.TREE_NAME)			=	1	/*추가*/
			 AND GROUPING(A.WH_CODE)			=	1
			 AND GROUPING(M5.TREE_NAME)			=	1
			 AND GROUPING(C1.ITEM_LEVEL1)		=	1
			 AND GROUPING(M2.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL2)		=	1
			 AND GROUPING(M3.LEVEL_NAME)		=	1
			 AND GROUPING(C1.ITEM_LEVEL3)		=	1
			 AND GROUPING(M4.LEVEL_NAME)		=	1
			 AND GROUPING(ISNULL(C1.SPEC,''))	=	1
			 AND GROUPING(C1.STOCK_UNIT)		=	1
			 
			 
			  --총계
			 )
             )
             AND GROUPING(A.COMP_CODE)+		GROUPING(A.DIV_CODE)+		GROUPING(M7.TREE_NAME)+		GROUPING(A.WH_CODE)+		
			GROUPING(M5.TREE_NAME)+		GROUPING(C1.ITEM_LEVEL1)+	GROUPING(M2.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL2)+	
			GROUPING(M3.LEVEL_NAME)+	GROUPING(C1.ITEM_LEVEL3)+	GROUPING(M4.LEVEL_NAME)+	GROUPING(ISNULL(C1.SPEC,''))+			
			GROUPING(C1.STOCK_UNIT) = 0	 	
		ORDER BY ISNULL(A.WH_CODE,''), ISNULL(C1.ITEM_LEVEL1,'ZZZZZZZ'), ISNULL(C1.ITEM_LEVEL2,'ZZZZZZZ')
	
	END 
	</select>
   
</mapper>