package ${p.controlPackageName};

import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springmodules.validation.commons.DefaultBeanValidator;

import unipass.cm.common.CrgAbstractController;
import unipass.co.vo.ExtHtttprequestParam;
import unipass.co.lib.listop.ListOp;
import unipass.co.vo.NavigatorInfo;

import test.sourcegen.model.CmSampleVO;

import ${p.importServiceName};


/**
 * @Class Name : ${p.className}
 * @Description : ${p.description}  Controller.
 * @author KOICA
 * @since 2012. 4. 10.
 * @version 1.0
 * @see
 * 
 * @Modification Information
 * 
 *<pre>
 *    date                 writer              change
 *  ===========    =========    ===========================
 *  2012. 4. 10.      TemplateGenerator      generated by Template Generator
 * </pre>
 */
 
@Controller
public class $p.className extends CrgAbstractController {
    private static final Log logger = LogFactory.getLog(${p.className}.class);

    public final static String JSP_PATH = "${p.jspPath}";
    
        /** DefaultBeanValidator beanValidator */
    @Autowired
	private DefaultBeanValidator beanValidator;
    
    /** ${p.serviceName} */
    @Resource(name = "${p.serviceBeanName}")
    private ${p.serviceName} ${p.serviceBeanName};
    
#foreach( $method in ${prg.methods} )
    /**
     * ${method.description}
     * FIXME : 프로그래수정 후 이라인 지울것 !
     * @param 
     * @return String
     * @exception Exception
     */
	@RequestMapping(value = "${prg.url}/${method.name}.do")	
#if($method.type == "update" ||  $method.type == "regist")    
    public String ${method.name}(ExtHtttprequestParam _req, ListOp listOp, ModelMap model,
    		@ModelAttribute("cmSampleVO") CmSampleVO cmSampleVO, 
    		BindingResult bindingResult) throws Exception {
#else
    public String ${method.name}(ExtHtttprequestParam _req, ListOp listOp, ModelMap model) throws Exception {
#end
    
    #if($method.type == "list")
	    final String[] searchFields = { "srch_cdnm" };

        NavigatorInfo navigator = new NavigatorInfo(_req, listOp, searchFields);

        Map<String, Object> param=navigator.getParam();
        navigator.setList(${p.serviceBeanName}.${method.name}(param));
        
        model.addAttribute(NAVI_KEY, navigator);        
		model.addAttribute(ListOp.LIST_OP_NAME, listOp);
	 
        return JSP_PATH + "${method.name}";
        
    #elseif($method.type == "update" ||  $method.type == "regist")
    	model.addAttribute(ListOp.LIST_OP_NAME, listOp);
        beanValidator.validate(cmSampleVO, bindingResult);
		
    	if (bindingResult.hasErrors()) {
    		 return JSP_PATH + "${method.name}";
    	 }
    	 else {
    		 Map<String, Object> param =  _req.getParameterMap();
    		 ${p.serviceBeanName}.${method.name}(param);
    		 return "redirect:${prg.url}/${method.name}.do";
    	 }
    #elseif($method.type == "select" )
    	Map<String, Object> param = _req.getParameterMap();
        model.addAttribute(ListOp.LIST_OP_NAME, listOp);	 
        model.addAttribute("item", ${p.serviceBeanName}.${method.name}(param));	 
        return JSP_PATH + "${method.name}";
    #else
    	model.addAttribute(ListOp.LIST_OP_NAME, listOp);	 
        return JSP_PATH + "${method.name}";
	#end
	}
	
#end
}