<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/jdbc  http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd">

		 <!--                                                                      -->
		 <!-- Configuration for encryptor, based on environment variables.         -->
		 <!--                                                                      -->
		 <!-- In this example, the encryption password will be read from an        -->
		 <!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once    --> 
		 <!-- the application has been started, could be safely unset.             -->
		 <!--                                                                      
		 <bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		   <property name="algorithm" value="PBEWithMD5AndDES" />
		   <property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
		 </bean>
		  -->
		 <!--                                                                      -->
		 <!-- The will be the encryptor used for decrypting configuration values.  -->
		 <!--                                                                      
		 <bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		   <property name="config" ref="environmentVariablesConfiguration" />
		 </bean>
		-->
		
		 <!--                                                                      -->
		 <!-- The EncryptablePropertyPlaceholderConfigurer will read the           -->
		 <!-- .properties files and make their values accessible as ${var}.        -->
		 <!--                                                                      -->
		 <!-- Our "configurationEncryptor" bean (which implements                  --> 
		 <!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg.  -->
		 <!--                                                                      -->
 <!-- 		 
		 <bean id="tlab.propertyConfigurer" class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		   <constructor-arg ref="configurationEncryptor" />
		   <property name="locations">
		     <list>
		        <value>file:/c:/UNILITE6/unilite.properties</value>
		        <value>classpath:/foren/conf/unilite.properties</value>
		     </list>
		   </property>
		   
		 </bean>
 

	<bean id="tlab.propertyConfigurerX" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/foren/conf/globals.properties</value>
            </list>
        </property>
    </bean>
 -->
	<!-- DataSource -->
	<!--  SYSTEM.DB.Globals.Url= -->
	<alias name="dataSource" alias="tlab.dataSource" />
	<!-- 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
		<property name="driverClassName" value="${Globals.DB.DriverClassName}"/>
		<property name="url" value="${Context.${App.Context}.DB.Url}" />
		<property name="username" value="${Context.${App.Context}.DB.UserName}"/>
		<property name="password" value="${Context.${App.Context}.DB.Password}"/>
	</bean>
	 -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/UNILITE_LOC"/>
	<!-- wildfly
    	<property name="jndiName" value="java:jboss/datasources/JMISDS"/>
     -->
	</bean>
</beans>
