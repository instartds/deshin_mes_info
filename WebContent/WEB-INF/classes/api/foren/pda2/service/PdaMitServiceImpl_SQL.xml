<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "pdaMitService">
<select id="pdaMitService.getBadTypeCodeList" parameterType="Map" resultType="rMap">

SELECT 
	A.MAIN_CODE 
	,A.SUB_CODE
	,A.CODE_NAME
	,A.CODE_NAME_CN
	,A.CODE_NAME_EN
	,A.CODE_NAME_JP
	,A.CODE_NAME_VI
	,A.USE_YN
	,A.REF_CODE1
	,A.REF_CODE2
	,A.REF_CODE3
	,A.REF_CODE4
	,A.REF_CODE5
	,A.REF_CODE6
	,A.REF_CODE7
	,A.REF_CODE8
	,A.REF_CODE9
	,A.REF_CODE10 
FROM BSA100T A
 INNER JOIN PMP100T B ON A.COMP_CODE=B.COMP_CODE  AND A.REF_CODE2=B.PROG_WORK_CODE AND B.WKORD_NUM = #{WKORD_NUM}
WHERE A.COMP_CODE= #{COMP_CODE}
AND A.MAIN_CODE='P003'
AND A.SUB_CODE != '$'
ORDER BY A.SORT_SEQ
</select>

<select id="pdaMitService.searchPdp200ukrvSub1" parameterType="Map" resultType="rMap">

SELECT
	          A.COMP_CODE
	         , A.DIV_CODE
	         , A.WORK_SHOP_CODE
	         , A.WKORD_NUM
	         , A.PROG_WORK_CODE
	         , A.PRODT_DATE
	         , A.ITEM_CODE
	         , A.BAD_CODE
	         , C.CODE_NAME AS BAD_TYPE_NAME
	         , unilite.fnFormat(A.COMP_CODE, A.BAD_Q, 'P_FSET_QS') AS BAD_Q
	         , A.REMARK
	         
	     FROM             PMR300T A WITH (NOLOCK)
	           LEFT JOIN BSA100T C WITH (NOLOCK) ON C.COMP_CODE = A.COMP_CODE 
	           									AND C.MAIN_CODE = 'P003'
	           									AND C.SUB_CODE = A.BAD_CODE
	     WHERE A.COMP_CODE      = #{COMP_CODE}
	     AND   A.DIV_CODE       = #{DIV_CODE}
	     AND   A.WORK_SHOP_CODE = #{WORK_SHOP_CODE}
	     AND   A.WKORD_NUM      = #{WKORD_NUM}
     ORDER BY A.PROG_WORK_CODE ASC ,A.PRODT_DATE ASC
</select>

<select id="pdaMitService.searchPdp200ukrvMain" parameterType="Map" resultType="rMap">
	SELECT TOP 1 
		A.COMP_CODE
    	 , A.DIV_CODE
	     , A.WKORD_NUM
	     , A.ITEM_CODE
	     , R1.ITEM_NAME
	     , R1.SPEC
	     , R1.STOCK_UNIT
	     , UNILITE.FNGETUSERDATECOMP(A.COMP_CODE, A.PRODT_START_DATE) AS PRODT_START_DATE		
	     , UNILITE.FNGETUSERDATECOMP(A.COMP_CODE, A.PRODT_END_DATE) AS PRODT_END_DATE
	     , A.PROG_WORK_CODE
	     , UNILITE.FNFORMAT(A.COMP_CODE, A.WKORD_Q, 'P_FSET_QS') AS WKORD_Q		--작업지시량
	     , UNILITE.FNFORMAT(A.COMP_CODE, A.WKORD_Q - ISNULL(M2.WORK_Q,0), 'P_FSET_QS') AS JAN_Q	--잔량
	     , ISNULL(R2.MAN_HOUR,0) AS MAN_HOUR
	     , A.WK_PLAN_NUM
	     , CASE WHEN A.DIV_CODE='02' THEN 'XXX' + M1.REF_CODE2 ELSE A.LOT_NO END AS LOT_NO		/* 02 사업장 LOT NO는 장비 시리얼번호로 강제 지정 */
	     , ISNULL(A.WKORD_STATUS, '2') AS CONTROL_STATUS
		 , '' AS REMARK
	     , A.EQUIP_CODE
		 , CASE WHEN R2.ITEM_ACCOUNT='10' AND ISNULL(R1.CIR_PERIOD_YN,'N')='Y' THEN CONVERT(VARCHAR(8), DATEADD(DAY, -1, DATEADD(MONTH, (CASE WHEN R1.EXPIRATION_DAY=0 THEN 36 ELSE R1.EXPIRATION_DAY END), A.PRODT_END_DATE)), 112) 
				ELSE A.EXPIRATION_DATE 
		   END AS EXPIRATION_DATE
		   
		 , A.WORK_SHOP_CODE
	  FROM       PMP100T A  WITH (NOLOCK)
	LEFT JOIN BPR100T R1 WITH (NOLOCK) ON R1.COMP_CODE = A.COMP_CODE
									  AND R1.ITEM_CODE = A.ITEM_CODE
	LEFT JOIN BPR200T R2 WITH (NOLOCK) ON R2.COMP_CODE = A.COMP_CODE
	                                  AND R2.DIV_CODE = A.DIV_CODE
	                                  AND R2.ITEM_CODE = A.ITEM_CODE
	LEFT JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE=A.COMP_CODE AND M1.MAIN_CODE='Z021' AND SUB_CODE=R1.ITEM_LEVEL2 AND R1.ITEM_LEVEL1='500'
	LEFT JOIN (
				SELECT COMP_CODE, DIV_CODE, WKORD_NUM, SUM(WORK_Q) WORK_Q, SUM(GOOD_WORK_Q) GOOD_WORK_Q, SUM(BAD_WORK_Q) BAD_WORK_Q
				FROM PMR100T A WITH (NOLOCK)
				WHERE COMP_CODE = #{COMP_CODE}
				  AND DIV_CODE = #{DIV_CODE}
				GROUP BY COMP_CODE, DIV_CODE, WKORD_NUM
	) M2 ON A.COMP_CODE=M2.COMP_CODE AND A.DIV_CODE=M2.DIV_CODE AND A.WKORD_NUM=M2.WKORD_NUM 
	    WHERE A.COMP_CODE = #{COMP_CODE}
	      AND A.DIV_CODE = #{DIV_CODE}
	      AND A.LINE_END_YN = 'Y'
		  AND ISNULL(R1.STOCK_CARE_YN, '') = 'Y'
	      AND A.WKORD_NUM = #{WKORD_NUM}
	    ORDER BY RIGHT('00000' + A.LINE_SEQ, 5)
</select>

<insert id="pdaMitService.insertPdp200ukrv" parameterType="Map">
INSERT INTO PMR100T
	     ( COMP_CODE
	     , DIV_CODE
	     , PRODT_NUM				--생성
	     , PRODT_DATE				--화면 PRODT_DATE
	     , PROG_WORK_CODE			--조회데이터
	     , PROG_WKORD_Q				--조회데이터 WKORD_Q
	     , WORK_Q					--0
	     , PASS_Q					--화면 GOOD_WORK_Q
	     , GOOD_WORK_Q				--화면 GOOD_WORK_Q
	     , BAD_WORK_Q				--화면 BAD_WORK_Q
	     , DAY_NIGHT				--'1'
	     , WKORD_NUM				--조회데이터 WKORD_NUM
	     , LINE_END_YN				--'Y'
	     , WK_PLAN_NUM				--조회데이터 WK_PLAN_NUM
	     , CONTROL_STATUS			--'9'
	     , MAN_HOUR					--화면 MAN_HOUR
	     , REMARK					--조회데이터 REMARK
	 --    , PROJECT_NO				--''
	--     , PJT_CODE					--''
	     , LOT_NO					--조회데이터 LOT_NO
	--     , FR_SERIAL_NO				--''
	--    , TO_SERIAL_NO				--''
	--     , FR_TIME					--''
	--     , TO_TIME					--''
	     , EQUIP_CODE				--조회데이터 EQUIP_CODE
	     , PRODT_PRSN				--화면 PRODT_PRSN
	--     , BOX_TRNS_RATE			--0
	--	 , BOX_Q					--0
	--	 , SAVING_Q					--0
	--	 , MAN_CNT					--0
	--	 , HAZARD_CHECK
	--	 , MICROBE_CHECK
	--	 , PIECE
		 , EXPIRATION_DATE			--조회데이터 EXPIRATION_DATE
	--	 , YIELD
	--	 , LOSS_Q
	--	 , ETC_Q
	     , INSERT_DB_USER
	     , INSERT_DB_TIME
	     , UPDATE_DB_USER
	     , UPDATE_DB_TIME
	     )
	VALUES
	     ( #{COMP_CODE}
	     , #{DIV_CODE}
	     , #{PRODT_NUM}
	     , #{PRODT_DATE}
	     , #{PROG_WORK_CODE}
	     , #{WKORD_Q}
	     , #{GOOD_WORK_Q} + #{BAD_WORK_Q}
	     , #{GOOD_WORK_Q}
	     , #{GOOD_WORK_Q}
	     , #{BAD_WORK_Q}
	     , '1'
	     , #{WKORD_NUM}
	     , 'Y'
	     , #{WK_PLAN_NUM}
	     , #{CONTROL_STATUS}
	     , #{MAN_HOUR}
	     , #{REMARK}
	     , #{LOT_NO}
	     , #{EQUIP_CODE}
	     , #{PRODT_PRSN}
		 ,  #{EXPIRATION_DATE}
	     , #{S_USER_ID}
	     , GETDATE()
	     , #{S_USER_ID}
	     , GETDATE()
	     )
		
	</insert>
	<select id="pdaMitService.selectWhCode" parameterType="Map" resultType="rMap">
	SELECT 
		REF_CODE1 AS GOOD_WH_CODE
		,REF_CODE2 AS GOOD_WH_CELL_CODE
		,REF_CODE3 AS GOOD_PRSN
		,REF_CODE4 AS BAD_WH_CODE
		,REF_CODE5 AS BAD_WH_CELL_CODE
		,REF_CODE6 AS BAD_PRSN
	  FROM BSA100T
	 WHERE COMP_CODE = #{COMP_CODE}
	   AND MAIN_CODE = 'Z022'
	   AND SUB_CODE = #{DIV_CODE}
	
</select>
	<update id="pdaMitService.spAutoNum" parameterType="Map" statementType="CALLABLE">
        {call SP_GetAutoNumComp (
            #{COMP_CODE,    mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{DIV_CODE,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{TABLE_ID,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{PREFIX,       mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BASIS_DATE,   mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{AUTO_TYPE,    mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{KEY_NUMBER,   mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
        )}
    </update>
	<update id="pdaMitService.spProductionResult" parameterType="Map" statementType="CALLABLE">
        {call SP_PRODT_ProductionResult (
            #{COMP_CODE          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{DIV_CODE           ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{PRODT_NUM          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{WKORD_NUM          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_WH_CODE       ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_WH_CELL_CODE  ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_PRSN          ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{GOOD_Q             ,     mode=IN,    jdbcType=NUMERIC,   javaType=double},
            #{BAD_WH_CODE        ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_WH_CELL_CODE   ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_PRSN           ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{BAD_Q              ,     mode=IN,    jdbcType=NUMERIC,   javaType=double},
            #{CONTROL_STATUS     ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{PRODT_TYPE         ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{STATUS             ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{USER_ID            ,     mode=IN,    jdbcType=VARCHAR,   javaType=java.lang.String},
            #{ERROR_DESC         ,     mode=OUT,   jdbcType=VARCHAR,   javaType=java.lang.String}
        )}
    </update>

 <insert id="pdaMitService.saveBad" parameterType="Map">

INSERT INTO PMR300T( 	
	COMP_CODE
	,DIV_CODE
	,BAD_CODE
	,WKORD_NUM
	,PROG_WORK_CODE
	,PRODT_DATE
	,WORK_SHOP_CODE
	,ITEM_CODE
	,BAD_Q
	,REMARK
	,PROG_PRODT_NUM
	,INSERT_DB_USER
	,INSERT_DB_TIME
	,UPDATE_DB_USER
	,UPDATE_DB_TIME
)
SELECT 	TOP 1 
	  #{COMP_CODE}
	, #{DIV_CODE}
	, #{BAD_CODE}
	, #{WKORD_NUM}
	, REF_CODE2
	, #{PRODT_DATE}
	, #{WORK_SHOP_CODE}
	, #{ITEM_CODE}
	, #{BAD_Q}
	, #{REMARK}
	, #{PRODT_NUM}
	, #{S_USER_ID}
	, GETDATE()
	, #{S_USER_ID}
	, GETDATE()
FROM  BSA100T WITH (NOLOCK)
WHERE COMP_CODE=#{COMP_CODE}
AND   MAIN_CODE='P003'
AND   SUB_CODE=#{BAD_CODE}



</insert>





<select id="pdaMitService.searchListPdv100ukrvMain" parameterType="Map" resultType="rMap">
	
SELECT 
	A.ITEM_CODE
	,B.SPEC 
	,A.LOT_NO
	,A.QTY
	,A.REMARK
	,A.SEQ
FROM L_PDA200T_MIT A WITH(NOLOCK) 
LEFT JOIN BPR100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
								AND B.ITEM_CODE = A.ITEM_CODE
WHERE A.COMP_CODE = #{COMP_CODE}
  AND A.DIV_CODE = #{DIV_CODE}
  AND A.APPLY_YN = 'N'
  AND A.GUBUN = #{GUBUN}
  AND A.INOUT_PRSN = #{INOUT_PRSN}
  AND A.OUT_WH_CODE = #{OUT_WH_CODE}
  AND A.OUT_WH_CELL_CODE = #{OUT_WH_CELL_CODE}
  AND A.IN_WH_CODE = #{IN_WH_CODE}
  AND A.IN_WH_CELL_CODE = #{IN_WH_CELL_CODE}  
ORDER BY A.SEQ DESC
</select>

<select id="pdaMitService.pdv100ukrvCheckScanData" parameterType="Map" resultType="rMap">
	SELECT TOP 1
		COMP_CODE
	  FROM L_PDA200T_MIT
	 WHERE COMP_CODE= #{COMP_CODE}
	   AND DIV_CODE = #{DIV_CODE}
	   AND ITEM_CODE =#{ITEM_CODE}
	   AND LOT_NO =#{LOT_NO}
	   AND INOUT_PRSN = #{INOUT_PRSN}
	   AND OUT_WH_CODE = #{OUT_WH_CODE}
	   AND OUT_WH_CELL_CODE = #{OUT_WH_CELL_CODE}
	   AND IN_WH_CODE = #{IN_WH_CODE}
	   AND IN_WH_CELL_CODE = #{IN_WH_CELL_CODE}
	   AND APPLY_YN = 'N'
	   AND 1=2		--재고이동시 동일한 품목/바코드 추가허용하도록 하기위해  기능 무력화 조건추가
	   
</select>

<select id="pdaMitService.pdv100ukrvSearchData" parameterType="Map" resultType="rMap">
SELECT 
	NATION_CODE
	,ISNULL(ITEM_CODE,'') AS ITEM_CODE
	,ISNULL(ITEM_NAME,'') AS ITEM_NAME
	,ITEM_LOT_NO
	,LOT_NO
	,SN
	,QTY
	,OPER
FROM fnGetBarcodeInfo_MIT(#{COMP_CODE},#{DIV_CODE},#{BARCODE},#{GUBUN})
	
</select>

 <insert id="pdaMitService.insertPdv100ukrvLog" parameterType="Map">
INSERT INTO L_PDA200T_MIT(
	COMP_CODE
	,DIV_CODE
	,GUBUN
	,INOUT_PRSN
	,OUT_WH_CODE
	,OUT_WH_CELL_CODE
	,IN_WH_CODE
	,IN_WH_CELL_CODE
	,ITEM_CODE
	,LOT_NO
	,QTY
	,APPLY_YN
	,REMARK
	,INSERT_DB_USER
	,INSERT_DB_TIME
	,UPDATE_DB_USER
	,UPDATE_DB_TIME
)VALUES(
	#{COMP_CODE}
	,#{DIV_CODE}		
	,#{GUBUN}
	,#{INOUT_PRSN}
	,#{OUT_WH_CODE}	
	,#{OUT_WH_CELL_CODE}
	,#{IN_WH_CODE}
	,#{IN_WH_CELL_CODE}		
	,#{ITEM_CODE}
	,#{LOT_NO}		
	,#{QTY}      
	,'N'
	,#{REMARK}		
	,#{S_USER_ID}
	,GETDATE()
	,#{S_USER_ID}
	,GETDATE()
)
 </insert>
 
<delete id="pdaMitService.deletePdv100ukrvLog" parameterType="Map">
	DELETE L_PDA200T_MIT
	 WHERE COMP_CODE = #{COMP_CODE}
	   AND DIV_CODE = #{DIV_CODE}
	   AND ITEM_CODE = #{ITEM_CODE}
	   AND LOT_NO = #{LOT_NO}
	   AND INOUT_PRSN = #{INOUT_PRSN}
	   AND SEQ = #{SEQ}
</delete>
 
 
 <insert id="pdaMitService.insertPdv100ukrvMain" parameterType="Map">
INSERT INTO L_BTR100T 
        ( KEY_VALUE,       OPR_FLAG,         COMP_CODE,         DIV_CODE,        INOUT_NUM
		, INOUT_SEQ,       INOUT_METH,       INOUT_TYPE,        INOUT_CODE_TYPE, INOUT_TYPE_DETAIL
		, CREATE_LOC,      INOUT_CODE,       INOUT_CODE_DETAIL, INOUT_DATE,      INOUT_PRSN,      MONEY_UNIT
		, EXCHG_RATE_O,    ITEM_CODE,        INOUT_Q,           INOUT_P,         INOUT_I
        , ITEM_STATUS,     WH_CODE,          WH_CELL_CODE,      LOT_NO,          PATH_CODE
		--, ORDER_NUM,       ORDER_SEQ,        OUTSTOCK_NUM,      REF_WKORD_NUM,   BASIS_NUM
		--, BASIS_SEQ,       REMARK,           PROJECT_NO,  
		, REMARK     
		, BILL_TYPE      , SALE_TYPE	, SALE_DIV_CODE  ,SALE_CUSTOM_CODE , ACCOUNT_YNC      
		
		,INSERT_DB_USER,  INSERT_DB_TIME
		, UPDATE_DB_USER,  UPDATE_DB_TIME,   ORDER_UNIT_Q
		
		,TO_DIV_CODE
		
		)
	SELECT 
		
		 #{KEY_VALUE}              -- KEY_VALUE
		, #{OPR_FLAG}              -- OPR_FLAG
        , #{COMP_CODE}            -- COMP_CODE
		, #{DIV_CODE}              -- DIV_CODE
		, ''                      -- INOUT_NUM
		, ROW_NUMBER() OVER(ORDER BY A.COMP_CODE, A.DIV_CODE, A.SEQ)             -- INOUT_SEQ
		, '3'                     -- INOUT_METH			이동
		, '2'                     -- INOUT_TYPE
        , '2'                     -- INOUT_CODE_TYPE	창고
		, '99'                    -- INOUT_TYPE_DETAIL  이동출고
								  
        , '4'                     -- CREATE_LOC			재고
		, A.IN_WH_CODE            -- INOUT_CODE
		
		, A.IN_WH_CELL_CODE       -- INOUT_CODE_DETAIL	--빈값
		
		
        , #{INOUT_DATE} -- INOUT_DATE
        ,#{INOUT_PRSN} -- INOUT_PRSN  
        
        
        , 'KRW'            -- MONEY_UNIT
		, 1          -- EXCHG_RATE_O
		, A.ITEM_CODE             -- ITEM_CODE
		, A.QTY          -- INOUT_Q
        , 0          -- INOUT_P
        , 0          -- INOUT_I
		, '1'                     -- ITEM_STATUS
        , A.OUT_WH_CODE               -- WH_CODE
        , A.OUT_WH_CELL_CODE          -- WH_CELL_CODE
        , A.LOT_NO              -- LOT_NO
		, 0                       -- PATH_CODE
								  
        --, ORDER_NUM             -- ORDER_NUM
        --, ORDER_SEQ             -- ORDER_SEQ
        --, BASIS_NUM             -- OUTSTOCK_NUM
        --, REF_WKORD_NUM         -- REF_WKORD_NUM
		--, BASIS_NUM            -- BASIS_NUM
		--						  
		--, BASIS_SEQ             -- BASIS_SEQ
        --, REMARK              -- REMARK
        --, PROJECT_NO            -- PROJECT_NO
        , A.REMARK                -- REMARK
        , '*'                     -- BILL_TYPE
        , '*'                     -- SALE_TYPE
		--						  
        , '*'                     -- SALE_DIV_CODE
		, '*'                     -- SALE_CUSTOM_CODE
		, 'N'                     -- ACCOUNT_YNC
		, #{S_USER_ID}        -- INSERT_DB_USER
		, GETDATE()        -- INSERT_DB_TIME
								  
        , #{S_USER_ID}        -- UPDATE_DB_USER
        , GETDATE()         -- UPDATE_DB_TIME
        
		, A.QTY          -- ORDER_UNIT_Q
		
		, #{DIV_CODE} 
	FROM L_PDA200T_MIT A WITH(NOLOCK)
   WHERE A.COMP_CODE = #{COMP_CODE}
     AND A.DIV_CODE = #{DIV_CODE}
     AND A.INOUT_PRSN = #{INOUT_PRSN}
     AND A.OUT_WH_CODE = #{OUT_WH_CODE}
     AND A.OUT_WH_CELL_CODE = #{OUT_WH_CELL_CODE}
     AND A.IN_WH_CODE = #{IN_WH_CODE}
     AND A.IN_WH_CELL_CODE = #{IN_WH_CELL_CODE}     
     AND A.APPLY_YN ='N'
 </insert>	
 
<update id="pdaMitService.updatePdv100ukrvLog" parameterType="Map">
	UPDATE L_PDA200T_MIT 
	   SET APPLY_YN = 'Y'
   WHERE COMP_CODE = #{COMP_CODE}
     AND DIV_CODE = #{DIV_CODE}
     AND INOUT_PRSN = #{INOUT_PRSN}
     AND OUT_WH_CODE = #{OUT_WH_CODE}
     AND OUT_WH_CELL_CODE = #{OUT_WH_CELL_CODE}
     AND IN_WH_CODE = #{IN_WH_CODE}
     AND IN_WH_CELL_CODE = #{IN_WH_CELL_CODE}     
     AND APPLY_YN ='N'
</update>
 <update id="pdaMitService.spCallPdv100ukrv" parameterType="Map" statementType="CALLABLE">
    {call USP_STOCK_Btr110ukr (
    	#{KEY_VALUE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{INOUT_NUM		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{ERROR_DESC	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
    )}
</update>


<select id="pdaMitService.searchListPdv103ukrvType" parameterType="Map" resultType="rMap">
	   SELECT A.SUB_CODE
	        , A.REF_CODE1 AS OUT_WH_CODE, A.REF_CODE2 AS OUT_WH_CELL_CODE, B.WH_CELL_NAME AS OUT_WH_CELL_NAME
	        , A.REF_CODE3 AS IN_WH_CODE, A.REF_CODE4 AS IN_WH_CELL_CODE, C.WH_CELL_NAME AS IN_WH_CELL_NAME
	     FROM BSA100T A WITH (NOLOCK)
	LEFT JOIN BSA225T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.REF_CODE1=B.WH_CODE AND A.REF_CODE2=B.WH_CELL_CODE
	LEFT JOIN BSA225T C WITH (NOLOCK) ON A.COMP_CODE=C.COMP_CODE AND A.REF_CODE3=C.WH_CODE AND A.REF_CODE4=C.WH_CELL_CODE
	    WHERE A.COMP_CODE  = #{COMP_CODE}
	      AND A.MAIN_CODE  = 'B264'
	      AND A.SUB_CODE  != '$'
</select>


<select id="pdaMitService.searchListPdv104ukrvMain" parameterType="Map" resultType="rMap">
	 BEGIN
	    SET NOCOUNT ON
	    SET ARITHABORT ON

	    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
	          , @UserId      NVARCHAR(100) /* 사용자ID    */
	          , @LangType    NVARCHAR(2)  /* 언어구분    */
	          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
	          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
		<!--
	    SET @CompCode = 'MASTER'
	    SET @UserId   = 'omega+'
	    SET @LangType = 'ko'
	    -->

	    /* 데이터 조회 */
	     SELECT
	            A.INOUT_NUM
	          , A.INOUT_SEQ
	          , A.WH_CODE
	          , A.WH_CELL_CODE
	          , A.INOUT_DATE
	          , A.ITEM_CODE
	          , C1.ITEM_NAME
	          , C1.SPEC
	          , C1.STOCK_UNIT
	          , A.INOUT_Q
	          , A.INOUT_PRSN
	          , A.LOT_NO
	          , A.REMARK
			  , A.COMP_CODE
	          , A.DIV_CODE
	          --, A.PROJECT_NO
	          --, A.ITEM_STATUS	          
	          --, A.TO_DIV_CODE
	          --, A.INOUT_CODE
	          --, C2.TREE_NAME                   AS INOUT_NAME
	          --, A.INOUT_CODE_DETAIL
	          --, C3.WH_CELL_NAME                AS INOUT_NAME_DETAIL
	          --, A.INOUT_TYPE
	          --, A.INOUT_METH
	          --, A.INOUT_TYPE_DETAIL
	          --, A.INOUT_CODE_TYPE
	          --, A.BASIS_NUM
	          --, A.BASIS_SEQ

	       FROM            BTR100T A  WITH (NOLOCK)
	            INNER JOIN BPR100T C1 WITH (NOLOCK) ON C1.COMP_CODE    = A.COMP_CODE
	                                               AND C1.ITEM_CODE    = A.ITEM_CODE
	            LEFT  JOIN BSA220T C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE
	                                               AND C2.TYPE_LEVEL   = A.TO_DIV_CODE
	                                               AND C2.TREE_CODE    = A.INOUT_CODE
	            LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
	                                               AND C3.DIV_CODE     = A.TO_DIV_CODE
	                                               AND C3.WH_CODE      = A.INOUT_CODE
	                                               AND C3.WH_CELL_CODE = A.INOUT_CODE_DETAIL
	     WHERE  A.COMP_CODE         = #{COMP_CODE}
	     AND    A.INOUT_TYPE        = '2'
	     AND    A.INOUT_METH        = '3'
	     AND    A.CREATE_LOC        = '4'
	     AND    A.INOUT_TYPE_DETAIL = '99'
	     AND    A.DIV_CODE          = #{DIV_CODE}
	     AND    A.INOUT_NUM         = #{INOUT_NUM}
	      
	     ORDER BY A.INOUT_NUM, A.INOUT_SEQ, A.ITEM_CODE, A.INOUT_DATE
	    SET NOCOUNT OFF
	    SET ARITHABORT OFF
	 END 
</select>

<select id="pdaMitService.searchListPdv104ukrvSub1" parameterType="Map" resultType="rMap">
	BEGIN
	    SET NOCOUNT ON
	    SET ARITHABORT ON

	    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
	          , @UserId      NVARCHAR(100) /* 사용자ID    */
	          , @LangType    NVARCHAR(2)  /* 언어구분    */
	          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
	          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
		<!--
	    SET @CompCode = 'MASTER'
	    SET @UserId   = 'omega+'
	    SET @LangType = 'ko'
	    -->

	    /* 날짜 포맷 유형 설정 */
	    SELECT TOP 1 @DateFormat = CODE_NAME
	      FROM BSA100T WITH (NOLOCK)
	     WHERE COMP_CODE = #{COMP_CODE}
	       AND MAIN_CODE = N'B044'
	       AND REF_CODE1 = N'Y'

	    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

	    /* 데이터 조회 */
	    SELECT A.ITEM_CODE
	         , C1.ITEM_NAME
	         , C1.SPEC
	         , C1.STOCK_UNIT
	         , (CASE WHEN ISNULL(A.INOUT_DATE, '') = ''
	                 THEN ''
	                 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
	                                                         , 'MM'  , SUBSTRING(A.INOUT_DATE, 5, 2))
	                                                         , 'DD'  , SUBSTRING(A.INOUT_DATE, 7, 2))
	             END)                                           AS INOUT_DATE
	         , A.INOUT_Q
	         , A.DIV_CODE
	         , A.WH_CODE
	         , A.WH_CELL_CODE
	         , A.TO_DIV_CODE
	         , C2.TREE_NAME                                     AS INOUT_CODE
	         , C3.WH_CELL_NAME                                  AS INOUT_CODE_DETAIL
	         , A.LOT_NO
	         --, A.INOUT_PRSN
	         , ISNULL(C4.CODE_NAME, A.INOUT_PRSN) AS INOUT_PRSN
	         , A.INOUT_NUM
			 , A.INOUT_SEQ
			 , A.REMARK
	    FROM   BTR100T A  WITH (NOLOCK)
	           INNER JOIN BPR100T C1 WITH (NOLOCK) ON C1.COMP_CODE    = A.COMP_CODE
	                                              AND C1.ITEM_CODE    = A.ITEM_CODE
	           LEFT  JOIN BSA220T C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE
	                                              AND C2.TYPE_LEVEL   = A.TO_DIV_CODE
	                                              AND C2.TREE_CODE    = A.INOUT_CODE
	           LEFT  JOIN BSA225T C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE
	                                              AND C3.DIV_CODE     = A.TO_DIV_CODE
	                                              AND C3.WH_CODE      = A.INOUT_CODE
	                                              AND C3.WH_CELL_CODE = A.INOUT_CODE_DETAIL
			   LEFT  JOIN BSA100T C4 WITH (NOLOCK) ON C4.COMP_CODE	  = A.COMP_CODE
												  AND C4.SUB_CODE	  = A.INOUT_CODE
												  AND C4.MAIN_CODE	  = 'B024'	                                              
	    WHERE  A.COMP_CODE         = #{COMP_CODE}
	    AND    A.DIV_CODE          = #{DIV_CODE}
	    AND    A.INOUT_TYPE        = '2'
	    AND    A.CREATE_LOC        = '4'
	    AND    A.INOUT_METH        = '3'
	    AND    A.INOUT_TYPE_DETAIL = '99'
	    AND    A.WH_CODE           = #{WH_CODE}
	    AND    A.WH_CELL_CODE      = #{WH_CELL_CODE}
	    AND    A.INOUT_DATE        = #{INOUT_DATE}
	    ORDER BY A.ITEM_CODE, A.INOUT_TYPE_DETAIL, A.INOUT_DATE

	    SET NOCOUNT OFF
	    SET ARITHABORT OFF
	END 
</select>

<update id="pdaMitService.savePdv104ukrvMain" parameterType="Map">
	<!--
	DECLARE @KEY_VALUE NVARCHAR(50)
	
	SELECT @KEY_VALUE = LEFT(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR(30), GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '') + RIGHT(N'0000' + CONVERT(NVARCHAR, CONVERT(INT, RAND() * 10000)), 3), 20)
	-->
	INSERT INTO L_BTR100T
	(KEY_VALUE
	,OPR_FLAG
	,INOUT_NUM
	,INOUT_SEQ
	,INOUT_TYPE
	,INOUT_METH
	,INOUT_TYPE_DETAIL
	,INOUT_CODE_TYPE
	,IN_ITEM_STATUS
	,BASIS_NUM
	,BASIS_SEQ
	,ORDER_NUM
	,ORDER_SEQ
	,DIV_CODE
	,WH_CODE
	,WH_CELL_CODE
	,INOUT_DATE
	,INOUT_FOR_P
	,INOUT_FOR_O
	,EXCHG_RATE_O
	,MONEY_UNIT
	,TO_DIV_CODE
	,INOUT_CODE
	,INOUT_CODE_DETAIL
	,DEPT_CODE
	,ITEM_CODE
	,ITEM_STATUS
	,INOUT_Q
	,INOUT_PRSN
	,LOT_NO
	,REMARK
	,PROJECT_NO
	,CREATE_LOC
	,BILL_TYPE
	,SALE_TYPE
	,SALE_DIV_CODE
	,SALE_CUSTOM_CODE
	,SALE_C_YN
	,INSERT_DB_USER
	,INSERT_DB_TIME
	,UPDATE_DB_USER
	,UPDATE_DB_TIME
	,COMP_CODE
	,MAKE_DATE
	,MAKE_EXP_DATE
		)
	SELECT 
	 #{KEY_VALUE} AS KEY_VALUE
	, 'D' OPR_FLAG
	,INOUT_NUM
	,INOUT_SEQ
	,INOUT_TYPE
	,INOUT_METH
	,INOUT_TYPE_DETAIL
	,INOUT_CODE_TYPE
	,IN_ITEM_STATUS
	,BASIS_NUM
	,BASIS_SEQ
	,ORDER_NUM
	,ORDER_SEQ
	,DIV_CODE
	,WH_CODE
	,WH_CELL_CODE
	,INOUT_DATE
	,INOUT_FOR_P
	,INOUT_FOR_O
	,EXCHG_RATE_O
	,MONEY_UNIT
	,TO_DIV_CODE
	,INOUT_CODE
	,INOUT_CODE_DETAIL
	,DEPT_CODE
	,ITEM_CODE
	,ITEM_STATUS
	,INOUT_Q
	,INOUT_PRSN
	,LOT_NO
	,REMARK
	,PROJECT_NO
	,CREATE_LOC
	,BILL_TYPE
	,SALE_TYPE
	,SALE_DIV_CODE
	,SALE_CUSTOM_CODE
	,SALE_C_YN
	<!--
	,INSERT_DB_USER
	,INSERT_DB_TIME
	,UPDATE_DB_USER
	,UPDATE_DB_TIME
	-->
	,#{S_USER_ID}
	,GETDATE()
	,#{S_USER_ID}
	,GETDATE()
	,COMP_CODE
	,MAKE_DATE
	,MAKE_EXP_DATE
	FROM BTR100T WITH (NOLOCK)
	WHERE  COMP_CODE         = #{COMP_CODE}
	AND	   DIV_CODE          = #{DIV_CODE}
	AND    INOUT_NUM         = #{INOUT_NUM}
	AND    INOUT_SEQ		 = #{INOUT_SEQ}
</update>
<update id="pdaMitService.spCallPdv104ukrv" parameterType="Map" statementType="CALLABLE">
    {call USP_STOCK_Btr110ukr (
    	#{KEY_VALUE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{INOUT_NUM		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{ERROR_DESC	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
    )}
</update>

</mapper>