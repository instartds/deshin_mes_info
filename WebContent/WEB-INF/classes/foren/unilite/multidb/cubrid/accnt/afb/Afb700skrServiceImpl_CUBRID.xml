<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb700skrServiceImpl">
<select id="afb700skrServiceImpl.selectBudgName" parameterType="Map" resultType="rMap">		/* BUDG_NAME 컬럼수*/
--UAccntPopupKrv.CAccntPopupKR[fnGetBudgCode] Query02
<!-- BEGIN -->
    <!-- DECLARE         @COMP_CODE          NVARCHAR(08) -->

--  [ 변수 값 할당 ] ------------------------------------------------------------------------------------------
    SET @COMP_CODE  = #{S_COMP_CODE}

--  [ 데이터 조회 ] -------------------------------------------------------------------------------------------
    SELECT  CODE_NAME
    FROM    fnGetBudgLevelName(@COMP_CODE, '')
<!-- END	 -->

<!-- SP 생성필요 -->

</select>	
	
<select id="afb700skrServiceImpl.selectList" parameterType="Map" resultType="rMap">		/* 메인*/
--afb700skr.Cafb700skr[fnAfb700Qstd] QUERY03
<!-- BEGIN -->


--  [ 변수 값 할당 ] --------------------------------------------------------------------------------------------------
    SET @COMP_CODE    = #{S_COMP_CODE}
    SET @PAY_DRAFT_NO = #{PAY_DRAFT_NO}

--  [ 날짜 포맷 유형 설정 ] -------------------------------------------------------------------------------------------
    <!-- DECLARE         @DateFormat         NVARCHAR(10) -->
    
    SET @DateFormat = ''
    
    DO(
        select * from (
            SELECT @DateFormat := M1.CODE_NAME
            FROM   BSA100T M1 
            WHERE  M1.COMP_CODE = @COMP_CODE
            AND    M1.MAIN_CODE = 'B044'
            AND    M1.REF_CODE1 = 'Y'
        )  TOPT where rownum = 1
    )

    SET @DateFormat = NVL(@DateFormat, 'YYYY/MM/DD')

--  [ 그룹웨어 연동여부 설정 ] ----------------------------------------------------------------------------------------
    <!-- DECLARE         @LinkedGW           NVARCHAR(01) -->
    
    SET @LinkedGW = ''
    
    DO(
        select * from (
            SELECT @LinkedGW := M1.REF_CODE1
            FROM   BSA100T M1 
            WHERE  M1.COMP_CODE = @COMP_CODE
            AND    M1.MAIN_CODE = 'A169'
            AND    M1.SUB_CODE  = '20'
        )  TOPT where rownum = 1
    )

    SET @LinkedGW = NVL(@LinkedGW, 'N')

--  [ 임시 테이블 처리 ] ----------------------------------------------------------------------------------------------
    <!-- DECLARE     @TypeKey                NVARCHAR(20) -->

    <!-- SET @TypeKey  = REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR(30), GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '') -->
    SET @TypeKey  = REPLACE(REPLACE(REPLACE(REPLACE(TO_CHAR(SYSDATETIME, 'YYYY-MM-DD HH24:MM:SS.FF'), '-', ''), ':', ''), '.', ''), ' ', '')
    


    
       DELETE FROM T_AFB700SKR1 where TYPE_KEY NOT LIKE LEFT(@TypeKey, 8) + '%'




--  [ 데이터 생성 ] ---------------------------------------------------------------------------------------------------
    -- 1. 상세내역 데이터 생성
    INSERT  INTO T_AFB700SKR1(TYPE_KEY, TYPE_FLAG, COMP_CODE, ORDER_SEQ, "STATUS", PAY_DRAFT_NO, SEQ, PAY_DATE, PAY_SLIP_DATE, TRANS_DATE, TITLE, TOTAL_AMT_I
                            , BUDG_CODE, BUDG_NAME, ACCNT, ACCNT_NAME, PJT_NAME, BIZ_REMARK, BIZ_GUBUN, BUDG_GUBUN, ACCNT_GUBUN
                            , PAY_DIVI, PROOF_DIVI, SUPPLY_AMT_I, TAX_AMT_I, TOT_AMT_I, CUSTOM_NAME, AGENT_TYPE, AGENT_TYPE2, AGENT_TYPE3
                            , IN_BANK_NAME, IN_BANKBOOK_NUM, IN_BANKBOOK_NAME, INC_AMT_I, LOC_AMT_I, REAL_AMT_I, EB_YN
                            , CRDT_NUM, CRDT_NAME, APP_NUM, REASON_CODE, PAY_CUSTOM_CODE, PAY_CUSTOM_NAME, SEND_DATE, BILL_DATE
                            , SAVE_CODE, SAVE_NAME, OUT_BANKBOOK_NUM, IF_CODE, DRAFTER, PAY_USER, DEPT_NAME, DIV_CODE, DIV_NAME, SLIP_DATE, EX_DATE, EX_NUM, AP_STS
                            , DRAFT_NO, GWIF_ID, PAY_DTL_NO)
    
    SELECT 
            TYPE_KEY, TYPE_FLAG, COMP_CODE, ORDER_SEQ, STATUS, PAY_DRAFT_NO, SEQ, PAY_DATE, PAY_SLIP_DATE, TRANS_DATE, TITLE, TOTAL_AMT_I
            , BUDG_CODE, BUDG_NAME, ACCNT, ACCNT_NAME, PJT_NAME, BIZ_REMARK, BIZ_GUBUN, BUDG_GUBUN, ACCNT_GUBUN
            , PAY_DIVI, PROOF_DIVI, SUPPLY_AMT_I, TAX_AMT_I, TOT_AMT_I, CUSTOM_NAME, AGENT_TYPE, AGENT_TYPE2, AGENT_TYPE3
            , IN_BANK_NAME, fnCipherDecrypt(IN_BANKBOOK_NUM, '')  AS IN_BANKBOOK_NUM 
            , IN_BANKBOOK_NAME, INC_AMT_I, LOC_AMT_I, REAL_AMT_I, EB_YN
            , CRDT_NUM, CRDT_NAME, APP_NUM, REASON_CODE, PAY_CUSTOM_CODE, SEND_DATE, BILL_DATE
            , SAVE_CODE, SAVE_NAME,  fnCipherDecrypt(OUT_BANKBOOK_NUM, '') AS OUT_BANKBOOK_NUM
            , IF_CODE, DRAFTER, PAY_USER, DEPT_NAME, DIV_CODE, DIV_NAME, SLIP_DATE, EX_DATE, EX_NUM, AP_STS
            , DRAFT_NO, GWIF_ID, PAY_DTL_NO 
    FROM(
    
    
    SELECT  
            @TypeKey                                                                    AS TYPE_KEY
          , '0'                                                                        AS TYPE_FLAG
          , A.COMP_CODE                                                                 AS COMP_CODE
          , ROW_NUMBER() OVER (ORDER BY A.PAY_DATE, A.PAY_DRAFT_NO, B.SEQ)              AS ORDER_SEQ
          , M10.CODE_NAME                                                               AS "STATUS"
          , A.PAY_DRAFT_NO                                                              AS PAY_DRAFT_NO
          , B.SEQ                                                                       AS SEQ
          , A.PAY_DATE                                                                  AS PAY_DATE
          , A.SLIP_DATE                                                                 AS PAY_SLIP_DATE
          --, F.TRANS_DATE                                                                AS TRANS_DATE
          , ''                                                                AS TRANS_DATE
          , A.TITLE                                                                     AS TITLE
          , A.TOT_AMT_I                                                                 AS TOTAL_AMT_I
          , B.BUDG_CODE                                                                 AS BUDG_CODE
          , D.BUDG_NAME                                                                 AS BUDG_NAME
          , B.ACCNT                                                                     AS ACCNT
          , C2.ACCNT_NAME                                                               AS ACCNT_NAME
          , C3.PJT_NAME                                                                 AS PJT_NAME
          , M11.CODE_NAME                                                               AS BIZ_REMARK
          , M4.CODE_NAME                                                                AS BIZ_GUBUN
          , M5.CODE_NAME                                                                AS BUDG_GUBUN
          , M6.CODE_NAME                                                                AS ACCNT_GUBUN
          , M2.CODE_NAME                                                                AS PAY_DIVI
          , M1.CODE_NAME                                                                AS PROOF_DIVI
          , B.SUPPLY_AMT_I                                                              AS SUPPLY_AMT_I
          , B.TAX_AMT_I                                                                 AS TAX_AMT_I
          , B.TOT_AMT_I                                                                 AS TOT_AMT_I
          , CASE WHEN NVL(M2.REF_CODE2, '') = 'C' THEN B.CUSTOM_NAME
                 ELSE C1.CUSTOM_NAME
            END                                                                         AS CUSTOM_NAME
          , M7.CODE_NAME                                                                AS AGENT_TYPE
          , M12.CODE_NAME                                                               AS AGENT_TYPE2
          , M13.CODE_NAME                                                               AS AGENT_TYPE3
          , C5.CUSTOM_NAME                                                              AS IN_BANK_NAME
          --, fnCipherDecrypt(B.IN_BANKBOOK_NUM, '')                                      AS IN_BANKBOOK_NUM
          , B.IN_BANKBOOK_NUM                                                 AS IN_BANKBOOK_NUM
          
          , B.IN_BANKBOOK_NAME                                                          AS IN_BANKBOOK_NAME
          , B.INC_AMT_I                                                                 AS INC_AMT_I
          , B.LOC_AMT_I                                                                 AS LOC_AMT_I
          , B.REAL_AMT_I                                                                AS REAL_AMT_I
          , M8.CODE_NAME                                                                AS EB_YN
          , B.CRDT_NUM                                                                  AS CRDT_NUM
          --, C7.CRDT_NAME                                                                AS CRDT_NAME
          , ''                                                                AS CRDT_NAME
          , B.APP_NUM                                                                   AS APP_NUM
          , M9.CODE_NAME                                                                AS REASON_CODE
          , B.PAY_CUSTOM_CODE                                                           AS PAY_CUSTOM_CODE
          , C4.PAY_CUSTOM_NAME                                                          AS PAY_CUSTOM_NAME
          , CASE WHEN NVL(B.SEND_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(B.SEND_DATE, 1, 4))
                                         , 'MM'  , SUBSTR(B.SEND_DATE, 5, 2))
                                         , 'DD'  , SUBSTR(B.SEND_DATE, 7, 2))
            END                                                                         AS SEND_DATE
          , CASE WHEN NVL(B.BILL_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(B.BILL_DATE, 1, 4))
                                         , 'MM'  , SUBSTR(B.BILL_DATE, 5, 2))
                                         , 'DD'  , SUBSTR(B.BILL_DATE, 7, 2))
            END                                                                         AS BILL_DATE
          , B.SAVE_CODE                                                                 AS SAVE_CODE
          , C6.SAVE_NAME                                                                AS SAVE_NAME
          --, fnCipherDecrypt(C6.BANK_ACCOUNT, '')                                        AS OUT_BANKBOOK_NUM
          , C6.BANK_ACCOUNT                                                     AS OUT_BANKBOOK_NUM
          
          , M14.CODE_NAME                                                               AS IF_CODE
          , D1.NAME                                                                     AS DRAFTER
          , D2.NAME                                                                     AS PAY_USER
          , B.DEPT_NAME                                                                 AS DEPT_NAME
          , B.DIV_CODE                                                                  AS DIV_CODE
          , C8.DIV_NAME                                                                 AS DIV_NAME
          , CASE WHEN NVL(A.SLIP_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(A.SLIP_DATE, 1, 4))
                                         , 'MM'  , SUBSTR(A.SLIP_DATE, 5, 2))
                                         , 'DD'  , SUBSTR(A.SLIP_DATE, 7, 2))
            END                                                                         AS SLIP_DATE
          , CASE WHEN NVL(A.EX_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(A.EX_DATE, 1, 4))
                                         , 'MM'  , SUBSTR(A.EX_DATE, 5, 2))
                                         , 'DD'  , SUBSTR(A.EX_DATE, 7, 2))
            END                                                                         AS EX_DATE
          , A.EX_NUM                                                                    AS EX_NUM
          , M3.CODE_NAME                                                                AS AP_STS
          , B.DRAFT_NO                                                                  AS DRAFT_NO
          , C.GWIF_ID                                                                   AS GWIF_ID
          , A.PAY_DTL_NO                                                                AS PAY_DTL_NO
    FROM                AFB700T   A  
            INNER JOIN  AFB710T   B   ON B.COMP_CODE           = A.COMP_CODE
                                                  AND B.PAY_DRAFT_NO        = A.PAY_DRAFT_NO
            LEFT  JOIN  T_GWIF    C   ON C.GWIF_KEY1           = A.COMP_CODE
                                                  AND C.GWIF_KEY2           = '80'
                                                  AND C.GWIF_KEY3           = A.PAY_DRAFT_NO
           
            LEFT  JOIN  BCM100T   C1  ON C1.COMP_CODE          = B.COMP_CODE
                                                  AND C1.CUSTOM_CODE        = B.CUSTOM_CODE
            LEFT  JOIN  ABA400T   C2  ON C2.COMP_CODE          = B.COMP_CODE
                                                  AND C2.ACCNT              = B.ACCNT
            LEFT  JOIN  BCM600T   C3  ON C3.COMP_CODE          = B.COMP_CODE
                                                  AND C3.PJT_CODE           = B.PJT_CODE
            LEFT  JOIN  ABH200TV  C4  ON C4.COMP_CODE          = B.COMP_CODE
                                                  AND C4.PEND_CODE          = B.PEND_CODE
                                                  AND C4.PAY_CUSTOM_CODE    = B.PAY_CUSTOM_CODE
            LEFT  JOIN  BCM100T   C5  ON C5.COMP_CODE          = B.COMP_CODE
                                                  AND C5.CUSTOM_CODE        = B.IN_BANK_CODE
            LEFT  JOIN  AFS100T   C6  ON C6.COMP_CODE          = B.COMP_CODE
                                                  AND C6.SAVE_CODE          = B.SAVE_CODE

            LEFT  JOIN  BOR120T   C8  ON C8.COMP_CODE          = B.COMP_CODE
                                                  AND C8.DIV_CODE           = B.DIV_CODE
            LEFT  JOIN  (
                        select DISTINCT D.* from AFB700T   A
                        INNER JOIN  AFB710T   B   ON B.COMP_CODE           = A.COMP_CODE
                                                  AND B.PAY_DRAFT_NO        = A.PAY_DRAFT_NO
                        INNER  JOIN  AFB400T   D   ON D.COMP_CODE           = B.COMP_CODE
                                                  AND D.AC_YYYY             = fnGetBudgAcYyyy(A.COMP_CODE, A.PAY_DATE)
                                                  AND D.BUDG_CODE           = B.BUDG_CODE
            ) D   ON    D.COMP_CODE           = B.COMP_CODE
                    AND D.BUDG_CODE           = B.BUDG_CODE                                      
                                                  
            LEFT  JOIN  HUM100T   D1  ON D1.COMP_CODE          = A.COMP_CODE
                                                  AND D1.PERSON_NUMB        = A.DRAFTER
            LEFT  JOIN  HUM100T   D2  ON D2.COMP_CODE          = A.COMP_CODE
                                                  AND D2.PERSON_NUMB        = A.PAY_USER
            LEFT  JOIN  BSA100T   M1  ON M1.COMP_CODE          = B.COMP_CODE
                                                  AND M1.MAIN_CODE          = 'A173'
                                                  AND M1.SUB_CODE           = B.PROOF_DIVI
            LEFT  JOIN  BSA100T   M2  ON M2.COMP_CODE          = B.COMP_CODE
                                                  AND M2.MAIN_CODE          = 'A172'
                                                  AND M2.SUB_CODE           = B.PAY_DIVI
            LEFT  JOIN  BSA100T   M3  ON M3.COMP_CODE          = B.COMP_CODE
                                                  AND M3.MAIN_CODE          = 'A014'
                                                  --AND M3.SUB_CODE           = E.AP_STS
            LEFT  JOIN  BSA100T   M4  ON M4.COMP_CODE          = B.COMP_CODE
                                                  AND M4.MAIN_CODE          = 'A174'
                                                  AND M4.SUB_CODE           = B.BIZ_GUBUN
            LEFT  JOIN  BSA100T   M5  ON M5.COMP_CODE          = B.COMP_CODE
                                                  AND M5.MAIN_CODE          = 'A170'
                                                  AND M5.SUB_CODE           = B.BUDG_GUBUN
            LEFT  JOIN  BSA100T   M6  ON M6.COMP_CODE          = B.COMP_CODE
                                                  AND M6.MAIN_CODE          = 'A171'
                                                  AND M6.SUB_CODE           = A.ACCNT_GUBUN
            LEFT  JOIN  BSA100T   M7  ON M7.COMP_CODE          = C1.COMP_CODE
                                                  AND M7.MAIN_CODE          = 'B055'
                                                  AND M7.SUB_CODE           = C1.AGENT_TYPE
            LEFT  JOIN  BSA100T   M8  ON M8.COMP_CODE          = B.COMP_CODE
                                                  AND M8.MAIN_CODE          = 'A149'
                                                  AND M8.SUB_CODE           = B.EB_YN
            LEFT  JOIN  BSA100T   M9  ON M9.COMP_CODE          = B.COMP_CODE
                                                  AND M9.MAIN_CODE          = 'A070'
                                                  AND M9.SUB_CODE           = B.REASON_CODE
            LEFT  JOIN  BSA100T  M10  ON M10.COMP_CODE         = A.COMP_CODE
                                                  AND M10.MAIN_CODE         = 'A134'
                                                  AND M10.SUB_CODE          = CASE WHEN @LinkedGW = 'Y' THEN NVL(C.GW_STATUS, '0')
                                                                                   ELSE A.STATUS
                                                                              END
            LEFT  JOIN  BSA100T  M11  ON M11.COMP_CODE         = B.COMP_CODE
                                                  AND M11.MAIN_CODE         = 'A182'
                                                  AND M11.SUB_CODE          = B.BIZ_REMARK
            LEFT  JOIN  BSA100T  M12  ON M12.COMP_CODE         = C1.COMP_CODE
                                                  AND M12.MAIN_CODE         = 'B111'
                                                  AND M12.SUB_CODE          = C1.AGENT_TYPE2
            LEFT  JOIN  BSA100T  M13  ON M13.COMP_CODE         = C1.COMP_CODE
                                                  AND M13.MAIN_CODE         = 'B112'
                                                  AND M13.SUB_CODE          = C1.AGENT_TYPE3
            LEFT  JOIN  BSA100T  M14  ON M14.COMP_CODE         = D.COMP_CODE
                                                  AND M14.MAIN_CODE         = 'A199'
                                                  AND M14.SUB_CODE          = D.IF_CODE
    WHERE   A.COMP_CODE        = #{S_COMP_CODE}
    AND     A.PAY_DATE        &gt;= #{PAY_DATE_FR}
    AND     A.PAY_DATE        &lt;= #{PAY_DATE_TO}
    <if test="@foren.Ognl@isNotEmpty(STATUS)">
    AND     NVL(C.GW_STATUS, A.STATUS)  = #{STATUS}
    </if>
    <if test="STOP_CHECK == &quot;1&quot;">
    AND     NVL(C.GW_STATUS, '0') != '5'   -- 반려제외
    </if>
    <if test="@foren.Ognl@isNotEmpty(DRAFTER)">
    AND     A.DRAFTER       LIKE #{DRAFTER} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(DRAFT_NAME)">
    AND     D1.NAME         LIKE '%' + #{DRAFT_NAME} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_DIVI)">
    AND     B.PAY_DIVI         = #{PAY_DIVI}
    </if>
    <if test="@foren.Ognl@isNotEmpty(BUDG_CODE)">
    AND     D.BUDG_CODE     LIKE #{BUDG_CODE}+'%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(TITLE)">
    AND     A.TITLE         LIKE '%'+#{TITLE}+'%'
    </if>
    
    
    
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
    AND     B.DIV_CODE IN
		<foreach collection="DIV_CODE" item="item" separator="," open="(" close=")">
		 #{item}
		</foreach>									
 	</if>
    
  
  
    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
    AND     B.DEPT_CODE        = #{DEPT_CODE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_USER)">
    AND     A.PAY_USER      LIKE #{PAY_USER}+'%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_USER_NAME)">
    AND     D2.NAME         LIKE '%' + #{PAY_USER_NAME} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
    AND     B.CUSTOM_CODE   LIKE #{CUSTOM_CODE}+'%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
    AND     C1.CUSTOM_NAME  LIKE '%' + #{CUSTOM_NAME} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(AC_PROJECT_CODE)">
    AND     B.PJT_CODE      LIKE #{AC_PROJECT_CODE}+'%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(AC_PROJECT_NAME)">
    AND     C3.PJT_NAME     LIKE '%' + #{AC_PROJECT_NAME} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(BUDG_GUBUN)">
    AND     B.BUDG_GUBUN       = #{BUDG_GUBUN}
    </if>
    <if test="@foren.Ognl@isNotEmpty(BIZ_GUBUN)">
    AND     B.BIZ_GUBUN        = #{BIZ_GUBUN}
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT_GUBUN)">
    AND     A.ACCNT_GUBUN      = #{ACCNT_GUBUN}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_DRAFT_NO)">
    AND     A.PAY_DRAFT_NO     = #{PAY_DRAFT_NO}
    </if>
    <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
    AND     C1.AGENT_TYPE      = #{AGENT_TYPE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_SLIP_DATE_FR)">
    AND     A.SLIP_DATE       &gt;= #{PAY_SLIP_DATE_FR}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_SLIP_DATE_TO)">
    AND     A.SLIP_DATE       &lt;= #{PAY_SLIP_DATE_TO}
    </if>
    <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE2)">
    AND     C1.AGENT_TYPE2     = #{AGENT_TYPE2}
    </if>
    <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE3)">
    AND     C1.AGENT_TYPE3     = #{AGENT_TYPE3}
    </if>
    <if test="@foren.Ognl@isNotEmpty(TRANS_DATE_FR)">
    AND     F.TRANS_DATE      &gt;= #{TRANS_DATE_FR}
    </if>
    <if test="@foren.Ognl@isNotEmpty(TRANS_DATE_TO)">
    AND     F.TRANS_DATE      &lt;= #{TRANS_DATE_TO}
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">
    AND     B.ACCNT            = #{ACCNT_CODE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(ACCNT_NAME)">
    AND     C2.ACCNT_NAME   LIKE '%' + #{ACCNT_NAME} + '%'
    </if>
    <if test="@foren.Ognl@isNotEmpty(DRAFT_NO)">
    AND     B.DRAFT_NO         = #{DRAFT_NO}
    </if>
    )


--  [ 데이터 조회 ] ---------------------------------------------------------------------------------------------------
    SELECT  A.TYPE_FLAG
          , A.ORDER_SEQ
          , A.STATUS
          , A.PAY_DRAFT_NO
          , A.SEQ
          , CASE WHEN NVL(A.PAY_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(A.PAY_DATE , 1, 4))
                                         , 'MM'  , SUBSTR(A.PAY_DATE , 5, 2))
                                         , 'DD'  , SUBSTR(A.PAY_DATE , 7, 2))
            END                                                                             AS PAY_DATE
          , CASE WHEN NVL(A.PAY_SLIP_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(A.PAY_SLIP_DATE , 1, 4))
                                         , 'MM'  , SUBSTR(A.PAY_SLIP_DATE , 5, 2))
                                         , 'DD'  , SUBSTR(A.PAY_SLIP_DATE , 7, 2))
            END                                                                             AS PAY_SLIP_DATE
          , CASE WHEN NVL(A.TRANS_DATE, '') = '' THEN ''
                 ELSE REPLACE(
                      REPLACE(
                      REPLACE(@DateFormat, 'YYYY', SUBSTR(A.TRANS_DATE , 1, 4))
                                         , 'MM'  , SUBSTR(A.TRANS_DATE , 5, 2))
                                         , 'DD'  , SUBSTR(A.TRANS_DATE , 7, 2))
            END                                                                             AS TRANS_DATE
          , A.TITLE
          , A.TOTAL_AMT_I
          , A.BUDG_CODE
           <foreach collection="budgNameInfoList" item="budgNameInfo" index="index" >
          , C${index+1}.BUDG_NAME                                                           AS BUDG_NAME_${index+1}
          </foreach>
          , A.ACCNT
          , A.ACCNT_NAME
          , A.PJT_NAME
          , A.BIZ_REMARK
          , A.BIZ_GUBUN
          , A.BUDG_GUBUN
          , A.ACCNT_GUBUN
          , A.PAY_DIVI
          , A.PROOF_DIVI
          , A.SUPPLY_AMT_I
          , A.TAX_AMT_I
          , A.TOT_AMT_I
          , A.TOT_AMT_I 		AS TOT_AMT_I_USE_SUMMARY
          , A.CUSTOM_NAME
          , A.AGENT_TYPE
          , A.AGENT_TYPE2
          , A.AGENT_TYPE3
          , A.IN_BANK_NAME
          , A.IN_BANKBOOK_NUM
          , A.IN_BANKBOOK_NAME
          , A.INC_AMT_I
          , A.LOC_AMT_I
          , A.REAL_AMT_I
          , A.EB_YN
          , A.CRDT_NUM
          , A.CRDT_NAME
          , A.APP_NUM
          , A.REASON_CODE
          , A.PAY_CUSTOM_CODE
          , A.PAY_CUSTOM_NAME
          , A.SEND_DATE
          , A.BILL_DATE
          , A.SAVE_CODE
          , A.SAVE_NAME
          , A.OUT_BANKBOOK_NUM
          , A.IF_CODE
          , A.DRAFTER
          , A.PAY_USER
          , A.DEPT_NAME
          , A.DIV_CODE
          , A.DIV_NAME
          , A.SLIP_DATE
          , A.EX_DATE
          , A.EX_NUM
          , A.AP_STS
          , A.DRAFT_NO
          , A.GWIF_ID
          , A.PAY_DTL_NO
    FROM                T_AFB700SKR1   A  
            LEFT  JOIN  (SELECT C${budgNameInfoList.size}.* 
                         FROM     T_AFB700SKR1   A
                                INNER  JOIN  AFB400T   C${budgNameInfoList.size} ON C${budgNameInfoList.size}.COMP_CODE  = A.COMP_CODE
                                                                                AND C${budgNameInfoList.size}.AC_YYYY    = fnGetBudgAcYyyy(A.COMP_CODE, A.PAY_DATE)
                                                                                AND C${budgNameInfoList.size}.BUDG_CODE  = A.BUDG_CODE
            ) C${budgNameInfoList.size} ON C${budgNameInfoList.size}.COMP_CODE  = A.COMP_CODE
                                        AND C${budgNameInfoList.size}.BUDG_CODE  = A.BUDG_CODE
            
            
            
            <foreach collection="budgNameInfoList" item="budgNameInfo" index="index">
           		<if test="index+1 != budgNameInfoList.size">
            	LEFT  JOIN  AFB400T   C${budgNameInfoList.size-(index+1)} ON C${budgNameInfoList.size-(index+1)}.COMP_CODE  = C${budgNameInfoList.size-(index)}.COMP_CODE    
	                                                           						   AND C${budgNameInfoList.size-(index+1)}.AC_YYYY    = C${budgNameInfoList.size-(index)}.AC_YYYY      
	                                                           						   AND C${budgNameInfoList.size-(index+1)}.BUDG_CODE  = C${budgNameInfoList.size-(index)}.TREE_LEVEL 
            	</if>
            </foreach>
            
    WHERE   A.TYPE_KEY  = @TypeKey
    ORDER BY A.TYPE_FLAG,  A.ORDER_SEQ


<!-- END -->
</select>
</mapper>