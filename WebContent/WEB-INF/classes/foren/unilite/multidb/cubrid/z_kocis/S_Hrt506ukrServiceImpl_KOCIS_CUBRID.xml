<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hrt506ukrServiceImpl_KOCIS">
	
	<!-- 미사용 시작-->
	<select id="s_hrt506ukrServiceImpl_KOCIS.checkRetrDate" parameterType="rMap" resultType="String">		
	/* s_hrt506ukrServiceImpl_KOCIS.checkRetrDate */
		SELECT RETR_DATE
		  FROM HUM100T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND PERSON_NUMB	= #{PERSON_NUMB}
	</select>
	
	<select id="s_hrt506ukrServiceImpl_KOCIS.checkHrtCnt" parameterType="rMap" resultType="int">		
	/* s_hrt506ukrServiceImpl_KOCIS.checkHrtCnt */
		SELECT COUNT(*) AS HRT_CNT
		   FROM HRT500T
		  WHERE COMP_CODE	= #{S_COMP_CODE}
		    AND RETR_TYPE	= #{RETR_TYPE}
		    AND RETR_DATE	= #{RETR_DATE}
		    AND PERSON_NUMB	= #{PERSON_NUMB}
	</select>
	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectFormData01CNT" parameterType="rMap" resultType="rMap">		
    /* s_hrt506ukrServiceImpl_KOCIS.selectFormData01CNT */
        SELECT 'U' AS PROC_TYPE
             , #{OT_KIND}                                             AS RETR_OT_KIND            --퇴직분류
             , A.PERSON_NUMB                                          AS PERSON_NUMB           --사번
             , B.NAME                                                 AS NAME                  --성명
             , A.RETR_TYPE                                                                     --정산구분
             , A.JOIN_DATE                                                                     --정산시작일
             , A.RETR_DATE                                                                     --정산퇴직일
             , A.SUPP_DATE                                                                     --지급일
             , A.RETR_RESN                                                                     --퇴직사유
             , TO_CHAR(A.DUTY_YYYY) + '/'
               + TO_CHAR(A.LONG_MONTH) + '/'
               + TO_CHAR(A.LONG_DAY)                        AS YYYYMMDD                     -- 근속기간(년/월/일)
--             , RTRIM(TO_CHAR(A.DUTY_YYYY )) + '/'
--             + RTRIM(TO_CHAR(A.LONG_MONTH)) + '/'
--             + RTRIM(TO_CHAR(A.LONG_DAY  ))                     AS YYYYMMDD              --근속기간(년/월/일)
             , NVL(A.DUTY_YYYY          , 0)                       AS DUTY_YYYY             --근속년
             , NVL(A.LONG_MONTH         , 0)                       AS LONG_MONTH            --근속월
             , NVL(A.LONG_DAY           , 0)                       AS LONG_DAY              --근속일
             , NVL(A.LONG_TOT_DAY       , 0)                       AS LONG_TOT_DAY1         --근속일수
             , NVL(A.LONG_TOT_DAY       , 0)                       AS LONG_TOT_DAY2         --근속일수
             , NVL(A.ADD_MONTH          , 0)                       AS ADD_MONTH             --누진개월
             , NVL(A.LONG_TOT_MONTH     , 0)                       AS LONG_TOT_MONTH        --근속월수
             , NVL(A.LONG_YEARS         , 0)                       AS LONG_YEARS            --근속년수
             , NVL(A.AVG_DAY            , 0)                       AS AVG_DAY               --3개월총일수
             , NVL(A.PAY_TOTAL_I        , 0)                       AS PAY_TOTAL_I           --급여총액
             , NVL(A.BONUS_TOTAL_I      , 0)                       AS BONUS_TOTAL_I         --상여총액
             , NVL(A.YEAR_TOTAL_I       , 0)                       AS YEAR_TOTAL_I          --년월차총액
             , NVL(A.AVG_PAY_3          , 0)                       AS AVG_PAY_3             --3개월급여
             , NVL(A.AVG_BONUS_I_3      , 0)                       AS AVG_BONUS_I_3         --3개월상여
             , NVL(A.AVG_YEAR_I_3       , 0)                       AS AVG_YEAR_I_3          --3개월년차
             , NVL(A.TOT_WAGES_I        , 0)                       AS TOT_WAGES_I           --3개월합계
             , NVL(A.AVG_WAGES_I        , 0)                       AS AVG_WAGES_I           --평균임금
             , NVL(A.ORI_RETR_ANNU_I    , 0)                       AS ORI_RETR_ANNU_I       --집계된퇴직금
             , NVL(A.RETR_ANNU_I        , 0)                       AS RETR_ANNU_I           --퇴직금
             , NVL(A.GLORY_AMOUNT_I     , 0)                       AS GLORY_AMOUNT_I        --명예퇴직금
             , NVL(A.GROUP_INSUR_I      , 0)                       AS GROUP_INSUR_I         --퇴직보험금
             , NVL(A.OUT_INCOME_I       , 0)                       AS OUT_INCOME_I          --비과세소득
             , NVL(A.ETC_AMOUNT_I       , 0)                       AS ETC_AMOUNT_I          --기타지급
             , NVL(A.RETR_SUM_I         , 0)                       AS RETR_SUM_I            --지급총액
             , NVL(A.SUPP_TOTAL_I       , 0)                       AS SUPP_TOTAL_I          --퇴직급여액/정산퇴직금
             , NVL(A.SPEC_DED_I         , 0)                       AS SPEC_DED_I            --퇴직소득정률공제
             , NVL(A.INCOME_DED_I       , 0)                       AS INCOME_DED_I          --근속연수공제
             , NVL(A.EARN_INCOME_I      , 0)                       AS EARN_INCOME_I         --퇴직소득공제
             , NVL(A.TAX_STD_I          , 0)                       AS TAX_STD_I             --과세표준
             , NVL(A.AVG_TAX_STD_I      , 0)                       AS AVG_TAX_STD_I         --연평균과세표준
             , NVL(A.AVR_COMP_TAX_I     , 0)                       AS AVR_COMP_TAX_I        --연평균산출세액
             , NVL(A.COMP_TAX_I         , 0)                       AS COMP_TAX_I            --산출세액
             , NVL(A.PAY_END_TAX        , 0)                       AS PAY_END_TAX           --기납부세액
             , NVL(A.DEF_TAX_I          , 0)                       AS DEF_TAX_I             --결정세액
             , NVL(A.IN_TAX_I           , 0)                       AS IN_TAX_I              --소득세
             , NVL(A.LOCAL_TAX_I        , 0)                       AS LOCAL_TAX_I           --지방소득세
             , NVL(A.DED_IN_TAX_ADD_I   , 0)                       AS DED_IN_TAX_ADD_I      --소득세환급액
             , NVL(A.DED_IN_LOCAL_ADD_I , 0)                       AS DED_IN_LOCAL_ADD_I    --주민세환급액
             , NVL(A.DED_ETC_I          , 0)                       AS DED_ETC_I             --기타공제
             , NVL(A.DED_TOTAL_I        , 0)                       AS DED_TOTAL_I           --공제총액
             , NVL(A.REAL_AMOUNT_I      , 0)                       AS REAL_AMOUNT_I         --실지급액
             , NVL(A.M_ANNU_TOTAL_I     , 0)                       AS M_ANNU_TOTAL_I                    -- (15)퇴직급여_중간
             , NVL(A.M_OUT_INCOME_I     , 0)                       AS M_OUT_INCOME_I                    -- (16)비과세 퇴직급여_중간
             , NVL(A.M_TAX_TOTAL_I      , 0)                       AS M_TAX_TOTAL_I                     -- (17)과세대상 퇴직급여_중간
             , NVL(A.R_ANNU_TOTAL_I     , 0)                       AS R_ANNU_TOTAL_I                    -- (15)퇴직급여_최종
             , NVL(A.R_TAX_TOTAL_I      , 0)                       AS R_TAX_TOTAL_I                     -- (17)과세대상 퇴직급여_최종
             , NVL(A.M_JOIN_DATE        ,'')                       AS M_JOIN_DATE                       -- (18)입사일_중간
             , NVL(A.M_CALCU_END_DATE   ,'')                       AS M_CALCU_END_DATE                  -- (19)기산일_중간
             , NVL(A.M_RETR_DATE        ,'')                       AS M_RETR_DATE                       -- (20)퇴사일_중간
             , NVL(A.M_SUPP_DATE        ,'')                       AS M_SUPP_DATE                       -- (21)지급일_중간
             , NVL(A.M_LONG_MONTHS      , 0)                       AS M_LONG_MONTHS                     -- (22)근속월수_중간
             , NVL(A.M_EXEP_MONTHS_BE13 , 0)                       AS M_EXEP_MONTHS_BE13                -- (23)제외월수_중간(2013이전)
             , NVL(A.M_EXEP_MONTHS_AF13 , 0)                       AS M_EXEP_MONTHS_AF13                -- (23)제외월수_중간(2013이후)
             , NVL(A.M_EXEP_MONTHS      , 0)                       AS M_EXEP_MONTHS                     -- (23)제외월수_중간
             , NVL(A.M_ADD_MONTHS_BE13  , 0)                       AS M_ADD_MONTHS_BE13                 -- (24)가산월수_중간(2013이전)
             , NVL(A.M_ADD_MONTHS_AF13  , 0)                       AS M_ADD_MONTHS_AF13                 -- (24)가산월수_중간(2013이후)
             , NVL(A.M_ADD_MONTHS       , 0)                       AS M_ADD_MONTHS                      -- (24)가산월수_중간
             , NVL(A.M_LONG_YEARS       , 0)                       AS M_LONG_YEARS                      -- (26)근속연수_중간
             , NVL(A.R_JOIN_DATE        ,'')                       AS R_JOIN_DATE                       -- (18)입사일_최종
             , NVL(A.R_CALCU_END_DATE   ,'')                       AS R_CALCU_END_DATE                  -- (19)기산일_최종
             , NVL(A.R_RETR_DATE        ,'')                       AS R_RETR_DATE                       -- (20)퇴사일_최종
             , NVL(A.R_SUPP_DATE        ,'')                       AS R_SUPP_DATE                       -- (21)지급일_최종
             , NVL(A.R_LONG_MONTHS      , 0)                       AS R_LONG_MONTHS                     -- (22)근속월수_최종
             , NVL(A.R_EXEP_MONTHS_BE13 , 0)                       AS R_EXEP_MONTHS_BE13                -- (23)제외월수_최종(2013이전)
             , NVL(A.R_EXEP_MONTHS_AF13 , 0)                       AS R_EXEP_MONTHS_AF13                -- (23)제외월수_최종(2013이후)
             , NVL(A.R_EXEP_MONTHS      , 0)                       AS R_EXEP_MONTHS                     -- (23)제외월수_최종
             , NVL(A.R_ADD_MONTHS_BE13  , 0)                       AS R_ADD_MONTHS_BE13                 -- (24)가산월수_최종(2013이전)
             , NVL(A.R_ADD_MONTHS_AF13  , 0)                       AS R_ADD_MONTHS_AF13                 -- (24)가산월수_최종(2013이후)
             , NVL(A.R_ADD_MONTHS       , 0)                       AS R_ADD_MONTHS                      -- (24)가산월수_최종
             , NVL(A.R_LONG_YEARS       , 0)                       AS R_LONG_YEARS                      -- (26)근속연수_최종
             , NVL(A.S_JOIN_DATE        ,'')                       AS S_JOIN_DATE                       -- (18)입사일_정산
             , NVL(A.S_CALCU_END_DATE   ,'')                       AS S_CALCU_END_DATE                  -- (19)기산일_정산
             , NVL(A.S_RETR_DATE        ,'')                       AS S_RETR_DATE                       -- (20)퇴사일_정산
             , NVL(A.S_LONG_MONTHS      , 0)                       AS S_LONG_MONTHS                     -- (22)근속월수_정산
             , NVL(A.S_EXEP_MONTHS      , 0)                       AS S_EXEP_MONTHS                     -- (23)제외월수_정산
             , NVL(A.S_ADD_MONTHS       , 0)                       AS S_ADD_MONTHS                      -- (24)가산월수_정산
             , NVL(A.S_DUPLI_MONTHS     , 0)                       AS S_DUPLI_MONTHS                    -- (25)중복월수_정산
             , NVL(A.S_LONG_YEARS       , 0)                       AS S_LONG_YEARS                      -- (26)근속연수_정산
             , NVL(A.CALCU_END_DATE_BE13,'')                       AS CALCU_END_DATE_BE13               -- (19)기산일_이전
             , NVL(A.RETR_DATE_BE13     ,'')                       AS RETR_DATE_BE13                    -- (20)퇴사일_이전
             , NVL(A.LONG_MONTHS_BE13   , 0)                       AS LONG_MONTHS_BE13                  -- (22)근속월수_이전
             , NVL(A.EXEP_MONTHS_BE13   , 0)                       AS EXEP_MONTHS_BE13                  -- (23)제외월수_이전
             , NVL(A.ADD_MONTHS_BE13    , 0)                       AS ADD_MONTHS_BE13                   -- (24)가산월수_이전
             , NVL(A.LONG_YEARS_BE13    , 0)                       AS LONG_YEARS_BE13                   -- (26)근속연수_이전
             , NVL(A.CALCU_END_DATE_AF13,'')                       AS CALCU_END_DATE_AF13               -- (19)기산일_이후
             , NVL(A.RETR_DATE_AF13     ,'')                       AS RETR_DATE_AF13                    -- (20)퇴사일_이후
             , NVL(A.LONG_MONTHS_AF13   , 0)                       AS LONG_MONTHS_AF13                  -- (22)근속월수_이후
             , NVL(A.EXEP_MONTHS_AF13   , 0)                       AS EXEP_MONTHS_AF13                  -- (23)제외월수_이후
             , NVL(A.ADD_MONTHS_AF13    , 0)                       AS ADD_MONTHS_AF13                   -- (24)가산월수_이후
             , NVL(A.LONG_YEARS_AF13    , 0)                       AS LONG_YEARS_AF13                   -- (26)근속연수_이후
             , NVL(A.DIVI_TAX_STD_BE13  , 0)                       AS DIVI_TAX_STD_BE13                 -- (31)과세표준안분_이전
             , NVL(A.DIVI_TAX_STD_AF13  , 0)                       AS DIVI_TAX_STD_AF13                 -- (31)과세표준안분_이후
             , NVL(A.AVG_TAX_STD_BE13   , 0)                       AS AVG_TAX_STD_BE13                  -- (32)연평균과세표준_이전
             , NVL(A.AVG_TAX_STD_AF13   , 0)                       AS AVG_TAX_STD_AF13                  -- (32)연평균과세표준_이후
             , NVL(A.EX_TAX_STD_AF13    , 0)                       AS EX_TAX_STD_AF13                   -- (33)환산과세표준_이후
             , NVL(A.EX_COMP_TAX_AF13   , 0)                       AS EX_COMP_TAX_AF13                  -- (34)환산산출세액_이후
             , NVL(A.AVR_COMP_TAX_BE13  , 0)                       AS AVR_COMP_TAX_BE13                 -- (35)연평균산출세액_이전
             , NVL(A.AVR_COMP_TAX_AF13  , 0)                       AS AVR_COMP_TAX_AF13                 -- (35)연평균산출세액_이후
             , NVL(A.COMP_TAX_BE13      , 0)                       AS COMP_TAX_BE13                     -- (36)산출세액_이전
             , NVL(A.COMP_TAX_AF13      , 0)                       AS COMP_TAX_AF13                     -- (36)산출세액_이후
          FROM            HRT500T A
               INNER JOIN HUM100T B ON B.COMP_CODE   = A.COMP_CODE
                                                 AND B.PERSON_NUMB = A.PERSON_NUMB
         WHERE A.COMP_CODE   = #{COMP_CODE}  
           AND A.RETR_DATE   = #{RETR_DATE}
           AND A.RETR_TYPE   = #{RETR_TYPE}
           AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	<!-- 미사용 끝-->
	
	<select id="s_hrt506ukrServiceImpl_KOCIS.checkRetroOTKind" parameterType="rMap" resultType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.checkRetroOTKind */
			SELECT CASE WHEN NVL(B.POST_CODE   , '') &lt;&gt; '' THEN 'OF'
		                WHEN NVL(A.RETR_OT_KIND, '')  = '' THEN 'ST'
		                ELSE A.RETR_OT_KIND
		           END  AS RETR_OT_KIND
		    FROM              HUM100T   A
		           LEFT  JOIN HRT120T   B ON B.COMP_CODE = A.COMP_CODE
		                                 AND B.POST_CODE = A.POST_CODE
		    WHERE  A.COMP_CODE   = #{S_COMP_CODE}
		    AND    A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	


	<!-- 조회 전 기존 데이터 존재유무 확인 (정산내역) -->
    <select id="s_hrt506ukrServiceImpl_KOCIS.existYN" parameterType="rMap" resultType="string">
		SELECT CASE WHEN COUNT(COMP_CODE) = 0 THEN 'N'
					ELSE 'Y'
			   END											AS EXIST_YN
		  FROM HRT500T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
<!--		   AND RETR_DATE   = #{RETR_DATE} -->
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
    </select>    
    
	<!-- 조회 (정산내역) -->
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectFormData01" parameterType="rMap" resultType="rMap">
		/*  SP 호출 시 넘길 변수
			S_COMP_CODE  
			PERSON_NUMB
			RETR_TYPE  
			RETR_DATE  
			TAX_CALCU_YN
			SUPP_DATE  
			RETR_KIND		-- 퇴직분류 : 직원(ST)만 사용  
			WORK_TYPE		-- '1' : 정산내역, '2' : 산정내역 (미사용 -  '3' : 산정내역(임원), '4' : 소득세계산내역, '5' : 중간정산내역)
			KEY_VALUE  
			USER_ID    
			LANG_TYPE  
		*/

		/* s_hrt506ukrServiceImpl_KOCIS.selectFormData01 */		
		<if test="EXIST_YN == &quot;N&quot;"> 
			DO(
				SELECT SP_HUMAN_RetireCalc(#{S_COMP_CODE}, #{RETR_TYPE}, #{RETR_DATE}, #{SUPP_DATE}, #{PERSON_NUMB}, #{S_USER_ID})    
			);
		</if>

		/* SELECT 쿼리 */
		SELECT --@sChgk										AS PROC_TYPE					-- 구분
			   --{RETR_KINE}									AS RETR_OT_KIND					-- 퇴직분류
			   A.PERSON_NUMB								AS PERSON_NUMB					-- 사번
			 , B.NAME										AS NAME							-- 성명
			 , A.RETR_TYPE																	-- 정산구분
			 , A.JOIN_DATE																	-- 정산시작일
			 , A.RETR_DATE																	-- 정산퇴직일
			 , A.SUPP_DATE																	-- 지급일
			 , A.RETR_RESN																	-- 퇴직사유
             , TO_CHAR(A.DUTY_YYYY) + '/'
               + TO_CHAR(A.LONG_MONTH) + '/'
               + TO_CHAR(A.LONG_DAY)                        AS YYYYMMDD                     -- 근속기간(년/월/일)
--			 , RTRIM(TO_CHAR(A.DUTY_YYYY )) + '/'
--			   + RTRIM(TO_CHAR(A.LONG_MONTH)) + '/'
--			   + RTRIM(TO_CHAR(A.LONG_DAY	))				AS YYYYMMDD						-- 근속기간(년/월/일)
			 , NVL(A.DUTY_YYYY			, 0)				AS DUTY_YYYY					-- 근속년
			 , NVL(A.LONG_MONTH			, 0)				AS LONG_MONTH					-- 근속월
			 , NVL(A.LONG_DAY			, 0)				AS LONG_DAY						-- 근속일
			 , NVL(A.LONG_TOT_DAY		, 0)				AS LONG_TOT_DAY1				-- 근속일수
			 , NVL(A.LONG_TOT_DAY		, 0)				AS LONG_TOT_DAY2				-- 근속일수
			 , NVL(A.ADD_MONTH			, 0)				AS ADD_MONTH					-- 누진개월
			 , NVL(A.LONG_TOT_MONTH		, 0)				AS LONG_TOT_MONTH				-- 근속월수
			 , NVL(A.LONG_YEARS			, 0)				AS LONG_YEARS					-- 근속년수
			 , NVL(A.AVG_DAY			, 0)				AS AVG_DAY						-- 3개월총일수
			 , NVL(A.PAY_TOTAL_I		, 0)				AS PAY_TOTAL_I					-- 급여총액
			 , NVL(A.BONUS_TOTAL_I		, 0)				AS BONUS_TOTAL_I				-- 상여총액
			 , NVL(A.YEAR_TOTAL_I		, 0)				AS YEAR_TOTAL_I					-- 년월차총액
			 , NVL(A.AVG_PAY_3			, 0)				AS AVG_PAY_3					-- 3개월급여
			 , NVL(A.AVG_BONUS_I_3		, 0)				AS AVG_BONUS_I_3				-- 3개월상여
			 , NVL(A.AVG_YEAR_I_3		, 0)				AS AVG_YEAR_I_3					-- 3개월년차
			 , NVL(A.TOT_WAGES_I		, 0)				AS TOT_WAGES_I					-- 3개월합계
			 , NVL(A.AVG_WAGES_I		, 0)				AS AVG_WAGES_I					-- 평균임금
			 , NVL(A.ORI_RETR_ANNU_I	, 0)				AS ORI_RETR_ANNU_I				-- 집계된퇴직금
			 , NVL(A.RETR_ANNU_I		, 0)				AS RETR_ANNU_I					-- 퇴직금
			 , NVL(A.GLORY_AMOUNT_I		, 0)				AS GLORY_AMOUNT_I				-- 명예퇴직금
			 , NVL(A.GROUP_INSUR_I		, 0)				AS GROUP_INSUR_I				-- 퇴직보험금
			 , NVL(A.OUT_INCOME_I		, 0)				AS OUT_INCOME_I					-- 비과세소득
			 , NVL(A.ETC_AMOUNT_I		, 0)				AS ETC_AMOUNT_I					-- 기타지급
			 , NVL(A.RETR_SUM_I			, 0)				AS RETR_SUM_I					-- 지급총액
			 , NVL(A.SUPP_TOTAL_I		, 0)				AS SUPP_TOTAL_I					-- 퇴직급여액/정산퇴직금
			 , NVL(A.SPEC_DED_I			, 0)				AS SPEC_DED_I					-- 퇴직소득정률공제
			 , NVL(A.INCOME_DED_I		, 0)				AS INCOME_DED_I					-- 근속연수공제
			 , NVL(A.EARN_INCOME_I		, 0)				AS EARN_INCOME_I				-- 퇴직소득공제
			 , NVL(A.TAX_STD_I			, 0)				AS TAX_STD_I					-- 과세표준
			 , NVL(A.AVG_TAX_STD_I		, 0)				AS AVG_TAX_STD_I				-- 연평균과세표준
			 , NVL(A.AVR_COMP_TAX_I		, 0)				AS AVR_COMP_TAX_I				-- 연평균산출세액
			 , NVL(A.COMP_TAX_I			, 0)				AS COMP_TAX_I					-- 산출세액
			 , NVL(A.PAY_END_TAX		, 0)				AS PAY_END_TAX					-- 기납부세액
			 , NVL(A.DEF_TAX_I			, 0)				AS DEF_TAX_I					-- 결정세액
			 , NVL(A.IN_TAX_I			, 0)				AS IN_TAX_I						-- 소득세
			 , NVL(A.LOCAL_TAX_I		, 0)				AS LOCAL_TAX_I					-- 지방소득세
			 , NVL(A.DED_IN_TAX_ADD_I	, 0)				AS DED_IN_TAX_ADD_I				-- 소득세환급액
			 , NVL(A.DED_IN_LOCAL_ADD_I	, 0)				AS DED_IN_LOCAL_ADD_I			-- 주민세환급액
			 , NVL(A.DED_ETC_I			, 0)				AS DED_ETC_I					-- 기타공제
			 , NVL(A.DED_TOTAL_I		, 0)				AS DED_TOTAL_I					-- 공제총액
			 , NVL(A.REAL_AMOUNT_I		, 0)				AS REAL_AMOUNT_I				-- 실지급액
			 , NVL(A.M_ANNU_TOTAL_I		, 0)				AS M_ANNU_TOTAL_I				-- (15)퇴직급여_중간
			 , NVL(A.M_OUT_INCOME_I		, 0)				AS M_OUT_INCOME_I				-- (16)비과세 퇴직급여_중간
			 , NVL(A.M_TAX_TOTAL_I		, 0)				AS M_TAX_TOTAL_I				-- (17)과세대상 퇴직급여_중간
			 , NVL(A.R_ANNU_TOTAL_I		, 0)				AS R_ANNU_TOTAL_I				-- (15)퇴직급여_최종
			 , NVL(A.R_TAX_TOTAL_I		, 0)				AS R_TAX_TOTAL_I				-- (17)과세대상 퇴직급여_최종
			 , NVL(A.M_JOIN_DATE		,'')				AS M_JOIN_DATE					-- (18)입사일_중간
			 , NVL(A.M_CALCU_END_DATE	,'')				AS M_CALCU_END_DATE				-- (19)기산일_중간
			 , NVL(A.M_RETR_DATE		,'')				AS M_RETR_DATE					-- (20)퇴사일_중간
			 , NVL(A.M_SUPP_DATE		,'')				AS M_SUPP_DATE					-- (21)지급일_중간
			 , NVL(A.M_LONG_MONTHS		, 0)				AS M_LONG_MONTHS				-- (22)근속월수_중간
			 , NVL(A.M_EXEP_MONTHS_BE13	, 0)				AS M_EXEP_MONTHS_BE13			-- (23)제외월수_중간(2013이전)
			 , NVL(A.M_EXEP_MONTHS_AF13	, 0)				AS M_EXEP_MONTHS_AF13			-- (23)제외월수_중간(2013이후)
			 , NVL(A.M_EXEP_MONTHS		, 0)				AS M_EXEP_MONTHS				-- (23)제외월수_중간
			 , NVL(A.M_ADD_MONTHS_BE13	, 0)				AS M_ADD_MONTHS_BE13			-- (24)가산월수_중간(2013이전)
			 , NVL(A.M_ADD_MONTHS_AF13	, 0)				AS M_ADD_MONTHS_AF13			-- (24)가산월수_중간(2013이후)
			 , NVL(A.M_ADD_MONTHS		, 0)				AS M_ADD_MONTHS					-- (24)가산월수_중간
			 , NVL(A.M_LONG_YEARS		, 0)				AS M_LONG_YEARS					-- (26)근속연수_중간
			 , NVL(A.R_JOIN_DATE		,'')				AS R_JOIN_DATE					-- (18)입사일_최종
			 , NVL(A.R_CALCU_END_DATE	,'')				AS R_CALCU_END_DATE				-- (19)기산일_최종
			 , NVL(A.R_RETR_DATE		,'')				AS R_RETR_DATE					-- (20)퇴사일_최종
			 , NVL(A.R_SUPP_DATE		,'')				AS R_SUPP_DATE					-- (21)지급일_최종
			 , NVL(A.R_LONG_MONTHS		, 0)				AS R_LONG_MONTHS				-- (22)근속월수_최종
			 , NVL(A.R_EXEP_MONTHS_BE13	, 0)				AS R_EXEP_MONTHS_BE13			-- (23)제외월수_최종(2013이전)
			 , NVL(A.R_EXEP_MONTHS_AF13	, 0)				AS R_EXEP_MONTHS_AF13			-- (23)제외월수_최종(2013이후)
			 , NVL(A.R_EXEP_MONTHS		, 0)				AS R_EXEP_MONTHS				-- (23)제외월수_최종
			 , NVL(A.R_ADD_MONTHS_BE13	, 0)				AS R_ADD_MONTHS_BE13			-- (24)가산월수_최종(2013이전)
			 , NVL(A.R_ADD_MONTHS_AF13	, 0)				AS R_ADD_MONTHS_AF13			-- (24)가산월수_최종(2013이후)
			 , NVL(A.R_ADD_MONTHS		, 0)				AS R_ADD_MONTHS					-- (24)가산월수_최종
			 , NVL(A.R_LONG_YEARS		, 0)				AS R_LONG_YEARS					-- (26)근속연수_최종
			 , NVL(A.S_JOIN_DATE		,'')				AS S_JOIN_DATE					-- (18)입사일_정산
			 , NVL(A.S_CALCU_END_DATE	,'')				AS S_CALCU_END_DATE				-- (19)기산일_정산
			 , NVL(A.S_RETR_DATE		,'')				AS S_RETR_DATE					-- (20)퇴사일_정산
			 , NVL(A.S_LONG_MONTHS		, 0)				AS S_LONG_MONTHS				-- (22)근속월수_정산
			 , NVL(A.S_EXEP_MONTHS		, 0)				AS S_EXEP_MONTHS				-- (23)제외월수_정산
			 , NVL(A.S_ADD_MONTHS		, 0)				AS S_ADD_MONTHS					-- (24)가산월수_정산
			 , NVL(A.S_DUPLI_MONTHS		, 0)				AS S_DUPLI_MONTHS				-- (25)중복월수_정산
			 , NVL(A.S_LONG_YEARS		, 0)				AS S_LONG_YEARS					-- (26)근속연수_정산
			 , NVL(A.CALCU_END_DATE_BE13,'')				AS CALCU_END_DATE_BE13			-- (19)기산일_이전
			 , NVL(A.RETR_DATE_BE13		,'')				AS RETR_DATE_BE13				-- (20)퇴사일_이전
			 , NVL(A.LONG_MONTHS_BE13	, 0)				AS LONG_MONTHS_BE13				-- (22)근속월수_이전
			 , NVL(A.EXEP_MONTHS_BE13	, 0)				AS EXEP_MONTHS_BE13				-- (23)제외월수_이전
			 , NVL(A.ADD_MONTHS_BE13	, 0)				AS ADD_MONTHS_BE13				-- (24)가산월수_이전
			 , NVL(A.LONG_YEARS_BE13	, 0)				AS LONG_YEARS_BE13				-- (26)근속연수_이전
			 , NVL(A.CALCU_END_DATE_AF13,'')				AS CALCU_END_DATE_AF13			-- (19)기산일_이후
			 , NVL(A.RETR_DATE_AF13		,'')				AS RETR_DATE_AF13				-- (20)퇴사일_이후
			 , NVL(A.LONG_MONTHS_AF13	, 0)				AS LONG_MONTHS_AF13				-- (22)근속월수_이후
			 , NVL(A.EXEP_MONTHS_AF13	, 0)				AS EXEP_MONTHS_AF13				-- (23)제외월수_이후
			 , NVL(A.ADD_MONTHS_AF13	, 0)				AS ADD_MONTHS_AF13				-- (24)가산월수_이후
			 , NVL(A.LONG_YEARS_AF13	, 0)				AS LONG_YEARS_AF13				-- (26)근속연수_이후
			 , NVL(A.DIVI_TAX_STD_BE13	, 0)				AS DIVI_TAX_STD_BE13			-- (36)과세표준안분_이전
			 , NVL(A.DIVI_TAX_STD_AF13	, 0)				AS DIVI_TAX_STD_AF13			-- (36)과세표준안분_이후
			 , NVL(A.AVG_TAX_STD_BE13	, 0)				AS AVG_TAX_STD_BE13				-- (37)연평균과세표준_이전
			 , NVL(A.AVG_TAX_STD_AF13	, 0)				AS AVG_TAX_STD_AF13				-- (37)연평균과세표준_이후
			 , NVL(A.EX_TAX_STD_AF13	, 0)				AS EX_TAX_STD_AF13				-- (38)환산과세표준_이후
			 , NVL(A.EX_COMP_TAX_AF13	, 0)				AS EX_COMP_TAX_AF13				-- (39)환산산출세액_이후
			 , NVL(A.AVR_COMP_TAX_BE13	, 0)				AS AVR_COMP_TAX_BE13			-- (40)연평균산출세액_이전
			 , NVL(A.AVR_COMP_TAX_AF13	, 0)				AS AVR_COMP_TAX_AF13			-- (40)연평균산출세액_이후
			 , NVL(A.COMP_TAX_BE13		, 0)				AS COMP_TAX_BE13				-- (41)산출세액_이전
			 , NVL(A.COMP_TAX_AF13		, 0)				AS COMP_TAX_AF13				-- (41)산출세액_이후
			 , NVL(A.PAY_TOTAL_I_16		, 0)				AS PAY_TOTAL_I_16				-- (33)환산급여
			 , NVL(A.PAY_TOTAL_DED_I_16	, 0)				AS PAY_TOTAL_DED_I_16			-- (34)환산급여별공제
			 , NVL(A.TAX_STD_I_16		, 0)				AS TAX_STD_I_16					-- (35)퇴직소득과세표준
			 , NVL(A.CHANGE_COMP_TAX_I_16, 0)				AS CHANGE_COMP_TAX_I_16			-- (42)환산산출세액
			 , NVL(A.COMP_TAX_I_16		, 0)				AS COMP_TAX_I_16				-- (43)산출세액
			 , NVL(A.CHANGE_TAX_YEAR_16	,'')				AS CHANGE_TAX_YEAR_16			-- (44)퇴직일이 속하는 과세연도
			 , NVL(A.EXEMPTION_COMP_TAX_I_16, 0)			AS EXEMPTION_COMP_TAX_I_16		-- (45)특례적용 산출세액
			 , NVL(A.CHANGE_TARGET_TAX_I_16, 0)				AS CHANGE_TARGET_TAX_I_16		-- (47)신고대상액
			 , 0											AS OF_SUPP_TOTAL_I				-- 실퇴직금액
			 , 0											AS OF_Y2011_SUPP_TOTAL_I		-- 2011년퇴직가정액
			 , 0											AS OF_STD_RETR_ANNU_I			-- 한도계산대상퇴직금액
			 , 0											AS OF_Y_AVG_PAY_I				-- 연평균금액
			 , 0											AS OF_CON_RETR_ANNU_I			-- 퇴직금한도액
			 , 0											AS OF_PAY_ANNU_I				-- 근로소득액
			 , 0											AS OF_RETR_ANNU_I				-- 퇴직소득액 HRT500T의 SUPP_TOTAL_I 와 동일함
		  FROM			HRT500T A 
			INNER JOIN  HUM100T B	ON B.COMP_CODE		= A.COMP_CODE
								   AND B.PERSON_NUMB	= A.PERSON_NUMB
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.RETR_DATE		= #{RETR_DATE}
		   AND A.RETR_TYPE		= #{RETR_TYPE}
		   AND A.PERSON_NUMB	= #{PERSON_NUMB}		
	</select>
	
	<!-- 지급총액 계산 -->
	<select id="s_hrt506ukrServiceImpl_KOCIS.fnSuppTotI" parameterType="rMap" resultType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.fnSuppTotI */
		DECLARE @ERROR_CODE nvarchar(10),	@return_value numeric(03)
						
		EXEC @return_value = SP_HRT_CHANGE_RETIRE_ST_SUPP_TOTAL 
					  #{S_COMP_CODE}
					, #{PERSON_NUMB} 
					, #{RETR_DATE}
					, #{RETR_TYPE}
					, #{TAX_CALCU}
					, #{R_CALCU_END_DATE}
					, #{S_LONG_YEARS}
					, #{LONG_YEARS_BE13}
					, #{LONG_YEARS_AF13}
					, #{PAY_END_TAX}
					, #{R_ANNU_TOTAL_I}
					, #{OUT_INCOME_I}
					, #{M_ANNU_TOTAL_I}
					, #{M_OUT_INCOME_I}
					, #{DED_IN_TAX_ADD_I}
					, #{DED_IN_LOCAL_ADD_I}
					, #{DED_ETC_I}
					, #{S_USER_ID}
					, @ERROR_CODE OUTPUT
		SELECT	@ERROR_CODE as N'ERROR_CODE', @return_value as 'RETURN_VALUE'
	</select>
	
	<update id="s_hrt506ukrServiceImpl_KOCIS.submitFormData01" parameterType="Map">
	/* s_hrt506ukrServiceImpl_KOCIS.submitFormData01 */
		UPDATE HRT500T
		   SET JOIN_DATE           = #{JOIN_DATE}
		     , SUPP_DATE           = #{SUPP_DATE}
		     , RETR_RESN           = #{RETR_RESN}
		     , DUTY_YYYY           = #{DUTY_YYYY}
		     , LONG_MONTH          = #{LONG_MONTH}
		     , LONG_DAY            = #{LONG_DAY}
		     , LONG_TOT_DAY        = #{LONG_TOT_DAY1}
		     , ADD_MONTH           = #{ADD_MONTH}
		     , LONG_TOT_MONTH      = #{LONG_TOT_MONTH}
		     , LONG_YEARS          = #{LONG_YEARS}
		     , AVG_DAY             = #{AVG_DAY}
		     , PAY_TOTAL_I         = #{PAY_TOTAL_I}
		     , BONUS_TOTAL_I       = #{BONUS_TOTAL_I}
		     , YEAR_TOTAL_I        = #{YEAR_TOTAL_I}
		     , AVG_PAY_3           = #{AVG_PAY_3}
		     , AVG_BONUS_I_3       = #{AVG_BONUS_I_3}
		     , AVG_YEAR_I_3        = #{AVG_YEAR_I_3}
		     , TOT_WAGES_I         = #{TOT_WAGES_I}
		     , AVG_WAGES_I         = #{AVG_WAGES_I}
		     , ORI_RETR_ANNU_I     = #{ORI_RETR_ANNU_I}
		     , RETR_ANNU_I         = #{RETR_ANNU_I}
		     , GLORY_AMOUNT_I      = #{GLORY_AMOUNT_I}
		     , GROUP_INSUR_I       = #{GROUP_INSUR_I}
		     , OUT_INCOME_I        = #{OUT_INCOME_I}
		     , ETC_AMOUNT_I        = #{ETC_AMOUNT_I}
		     , RETR_SUM_I          = #{RETR_SUM_I}
		     , SUPP_TOTAL_I        = #{SUPP_TOTAL_I}
		     , SPEC_DED_I          = #{SPEC_DED_I}
		     , INCOME_DED_I        = #{INCOME_DED_I}
		     , EARN_INCOME_I       = #{EARN_INCOME_I}
		     , TAX_STD_I           = #{TAX_STD_I}
		     , AVG_TAX_STD_I       = #{AVG_TAX_STD_I}
		     , AVR_COMP_TAX_I      = #{AVR_COMP_TAX_I}
		     , COMP_TAX_I          = #{COMP_TAX_I}
		     , IN_TAX_I            = #{IN_TAX_I}
		     , LOCAL_TAX_I         = #{LOCAL_TAX_I}
		     , DED_IN_TAX_ADD_I    = #{DED_IN_TAX_ADD_I}
		     , DED_IN_LOCAL_ADD_I  = #{DED_IN_LOCAL_ADD_I}
		     , DED_ETC_I           = #{DED_ETC_I}
		     , DED_TOTAL_I         = #{DED_TOTAL_I}
		     , PAY_END_TAX         = #{PAY_END_TAX}
		     , DEF_TAX_I           = #{DEF_TAX_I}
		     , REAL_AMOUNT_I       = #{REAL_AMOUNT_I}
		     , M_ANNU_TOTAL_I      = #{M_ANNU_TOTAL_I}
		     , M_OUT_INCOME_I      = #{M_OUT_INCOME_I}
		     , M_TAX_TOTAL_I       = #{DED_TOTAL_I}
		     , R_ANNU_TOTAL_I      = #{R_ANNU_TOTAL_I}
		     , R_TAX_TOTAL_I       = #{R_TAX_TOTAL_I}
		     , R_CALCU_END_DATE    = #{R_CALCU_END_DATE}
		     , S_LONG_YEARS        = #{S_LONG_YEARS}
		     , LONG_YEARS_BE13     = #{LONG_YEARS_BE13}
		     , LONG_YEARS_AF13     = #{LONG_YEARS_AF13}
		     , INSERT_DB_USER      = #{S_USER_ID}
		     , INSERT_DB_TIME      = SYSDATETIME
		     , UPDATE_DB_USER      = #{S_USER_ID}
		     , UPDATE_DB_TIME      = SYSDATETIME
		     		     
		 WHERE COMP_CODE           = #{S_COMP_CODE}
		   AND RETR_DATE           = #{RETR_DATE}
		   AND RETR_TYPE           = #{RETR_TYPE}
		   AND PERSON_NUMB         = #{PERSON_NUMB}
	</update>
	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectFormDataResult" parameterType="rMap" resultType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.selectFormDataResult */
		SELECT * FROM TEMPRETIRE
		--DROP TABLE TEMPRETIRE
		--DROP TABLE TEMPRETIRE1
		--DROP TABLE TEMPRETIRE2
		--DROP TABLE TEMPRETIRE3
		--DROP TABLE TEMPRETIRE4
		--DROP TABLE TEMPRETIRE5
	</select>
	
	<update id="s_hrt506ukrServiceImpl_KOCIS.deleteFromData01" parameterType="rMap">
		/* s_hrt506ukrServiceImpl_KOCIS.deleteFromData01 */
		--Hrt501Krv.CHrt501UKr[fnHrt501Save] Query01
		DELETE FROM HRT500T 
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   
		--Hrt501Krv.CHrt501UKr[fnHrt501Save] Query02
		DELETE FROM HRT300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		DELETE FROM HRT350T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		DELETE FROM HRT400T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		DELETE FROM HRT510T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
	</update>


	<!-- 조회 (산정내역 : 급여내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList01" parameterType="rMap" resultType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.selectList01 */
        --Hrt501ukr.CHrt501ukr[fnHrt501QSt1] Query01
        SELECT 
               A.COMP_CODE
             , A.RETR_DATE
             , A.RETR_TYPE
             , A.PERSON_NUMB
             , fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
             , A.WAGES_CODE
             , A.WAGES_NAME
             , A.AMOUNT_I
             , A.PAY_STRT_DATE
             , A.PAY_LAST_DATE
             , A.WAGES_DAY
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
             , A.UPDATE_DB_USER
             , A.UPDATE_DB_TIME
        FROM (      
                    SELECT 
                           A.COMP_CODE
                         , A.RETR_DATE
                         , A.RETR_TYPE
                         , A.PERSON_NUMB
                         , A.PAY_YYYYMM
                         , A.WAGES_CODE
                         , B.WAGES_NAME AS WAGES_NAME
                         , A.AMOUNT_I
                         , A.PAY_STRT_DATE
                         , A.PAY_LAST_DATE
                         , A.WAGES_DAY
                         , A.INSERT_DB_USER
                         , A.INSERT_DB_TIME
                         , A.UPDATE_DB_USER
                         , A.UPDATE_DB_TIME
                      FROM            HRT300T A
                           LEFT  JOIN HBS300T B  ON B.COMP_CODE  = A.COMP_CODE
                                                             AND B.CODE_TYPE  = '1'
                                                             AND B.WAGES_CODE = A.WAGES_CODE
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.RETR_DATE   = #{RETR_DATE}
                       AND A.RETR_TYPE   = #{RETR_TYPE}
                       AND A.PERSON_NUMB = #{PERSON_NUMB}
                    ORDER BY A.PAY_YYYYMM
            ) A 
	</select>
	
	<!-- 조회 (산정내역 : 기타수당내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList02" parameterType="rMap" resultType="rMap">
        --Hrt501ukr.CHrt501ukr[fnHrt501QSt1] Query02
        SELECT 
               A.COMP_CODE
             , A.RETR_DATE
             , A.RETR_TYPE
             , A.PERSON_NUMB
             , fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
             , A.WEL_CODE
             , A.WEL_NAME
             , A.GIVE_I
             , A.WEL_LEVEL1
             , A.WEL_LEVEL2
             , A.APPLY_YYMM
             , A.PAY_STRT_DATE
             , A.PAY_LAST_DATE
             , A.WAGES_DAY
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
        FROM (           
                    SELECT 
                           A.COMP_CODE
                         , A.RETR_DATE
                         , A.RETR_TYPE
                         , A.PERSON_NUMB
                         , A.PAY_YYYYMM AS PAY_YYYYMM
                         , A.WEL_CODE
                         , B.WEL_NAME
                         , A.GIVE_I
                         , A.WEL_LEVEL1
                         , A.WEL_LEVEL2
                         , A.APPLY_YYMM
                         , A.PAY_STRT_DATE
                         , A.PAY_LAST_DATE
                         , A.WAGES_DAY
                         , A.INSERT_DB_USER
                         , A.INSERT_DB_TIME                      
                      FROM            HRT350T A  
                           INNER JOIN HWE100T B ON B.COMP_CODE  = A.COMP_CODE
                                                             AND B.APPLY_YYMM = A.APPLY_YYMM
                                                             AND B.WEL_LEVEL1 = A.WEL_LEVEL1
                                                             AND B.WEL_LEVEL2 = A.WEL_LEVEL2
                                                             AND B.WEL_CODE   = A.WEL_CODE
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.RETR_DATE   = #{RETR_DATE}
                       AND A.RETR_TYPE   = #{RETR_TYPE}
                       AND A.PERSON_NUMB = #{PERSON_NUMB}
                     ORDER BY A.PAY_YYYYMM
                ) A
	</select>
	
	<!-- 조회 (산정내역 : 상여내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList03" parameterType="rMap" resultType="rMap">
        --Hrt501ukr.CHrt501ukr[fnHrt501QSt1] Query03
        SELECT 
               A.COMP_CODE
             , A.RETR_DATE
             , A.RETR_TYPE
             , A.PERSON_NUMB
             , fnGetUserDateComp(A.COMP_CODE, A.BONUS_YYYYMM) AS BONUS_YYYYMM
             , A.BONUS_TYPE
             , A.BONUS_NAME
             , A.BONUS_I
             , A.BONUS_RATE
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
             , A.UPDATE_DB_USER
             , A.UPDATE_DB_TIME
        FROM (
                    SELECT 
                           A.COMP_CODE
                         , A.RETR_DATE
                         , A.RETR_TYPE
                         , A.PERSON_NUMB
                         , A.BONUS_YYYYMM AS BONUS_YYYYMM
                         , A.BONUS_TYPE
                         , M1.CODE_NAME AS BONUS_NAME
                         , A.BONUS_I
                         , A.BONUS_RATE
                         , A.INSERT_DB_USER
                         , A.INSERT_DB_TIME
                         , A.UPDATE_DB_USER
                         , A.UPDATE_DB_TIME          
                      FROM            HRT400T A  
                           LEFT  JOIN BSA100T M1  ON M1.COMP_CODE = A.COMP_CODE
                                                              AND M1.MAIN_CODE = 'H032'
                                                              AND M1.SUB_CODE  = A.BONUS_TYPE
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.RETR_DATE   = #{RETR_DATE}
                       AND A.RETR_TYPE   = #{RETR_TYPE}
                       AND A.PERSON_NUMB = #{PERSON_NUMB}
                       AND A.BONUS_TYPE NOT IN ('1','E','F','G')
                     ORDER BY A.BONUS_YYYYMM    
                ) A                  	
	</select>
	
	<!-- 조회 (산정내역 : 년월차내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList04" parameterType="rMap" resultType="rMap">
        --Hrt501ukr.CHrt501ukr[fnHrt501QSt1] Query04
        SELECT 
               A.COMP_CODE
             , A.RETR_DATE
             , A.RETR_TYPE
             , A.PERSON_NUMB
             , fnGetUserDateComp(A.COMP_CODE, A.BONUS_YYYYMM) AS BONUS_YYYYMM
             , A.BONUS_TYPE
             , A.BONUS_NAME
             , A.BONUS_I
             , A.SUPP_DATE
             , A.BONUS_RATE
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
             , A.UPDATE_DB_USER
             , A.UPDATE_DB_TIME
        FROM (
                    SELECT 
                           A.COMP_CODE
                         , A.RETR_DATE
                         , A.RETR_TYPE
                         , A.PERSON_NUMB
                         , A.BONUS_YYYYMM AS BONUS_YYYYMM
                         , A.BONUS_TYPE
                         , M1.CODE_NAME AS BONUS_NAME
                         , A.BONUS_I
                         , A.SUPP_DATE
                         , A.BONUS_RATE
                         , A.INSERT_DB_USER
                         , A.INSERT_DB_TIME
                         , A.UPDATE_DB_USER
                         , A.UPDATE_DB_TIME          
                      FROM            HRT400T A  
                           LEFT  JOIN BSA100T M1  ON M1.COMP_CODE = A.COMP_CODE
                                                              AND M1.MAIN_CODE = 'H032'
                                                              AND M1.SUB_CODE  = A.BONUS_TYPE
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.RETR_DATE   = #{RETR_DATE}
                       AND A.RETR_TYPE   = #{RETR_TYPE}
                       AND A.PERSON_NUMB = #{PERSON_NUMB}
                       AND A.BONUS_TYPE IN ('E','F','G') 
                     ORDER BY A.BONUS_YYYYMM ASC
                ) A	
	</select>
	
	<!-- 추가 (산정내역 : 년월차내역) -->	
	<insert id="s_hrt506ukrServiceImpl_KOCIS.insertList04" parameterType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.insertList04 */	
		INSERT INTO HRT400T
		     ( RETR_DATE
		     , RETR_TYPE
		     , PERSON_NUMB
		     , BONUS_YYYYMM
		     , BONUS_TYPE
		     , BONUS_I
		     , SUPP_DATE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     ) 
		VALUES
		     ( #{RETR_DATE}
		     , #{RETR_TYPE}
		     , #{PERSON_NUMB}
		     , #{BONUS_YYYYMM}
		     , #{BONUS_TYPE}
		     , #{BONUS_I}
		     , #{SUPP_DATE}
		     , #{S_USER_ID}
		     , SYSDATETIME
		     , #{S_USER_ID}
		     , SYSDATETIME
		     )
	</insert>
	
	<!-- 수정 (산정내역 : 년월차내역) -->	
	<update id="s_hrt506ukrServiceImpl_KOCIS.updateList04" parameterType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.updateList04 */	
		UPDATE HRT400T
		   SET BONUS_I        = #{BONUS_I}
		     , SUPP_DATE      = #{SUPP_DATE}
		     , BONUS_RATE     = #{BONUS_RATE}
		     , INSERT_DB_USER = #{S_USER_ID}
		     , INSERT_DB_TIME = SYSDATETIME
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = SYSDATETIME
		     
		 WHERE COMP_CODE      = #{S_COMP_CODE}
		   AND RETR_DATE      = #{RETR_DATE}
		   AND RETR_TYPE      = #{RETR_TYPE}
		   AND PERSON_NUMB    = #{PERSON_NUMB}
		   AND BONUS_YYYYMM   = #{BONUS_YYYYMM}
		   AND BONUS_TYPE     = #{BONUS_TYPE}
	</update>
	
	
	
	
	
	
	<!-- 급여/기타수당/상여/년월차 변경시 퇴직급여 재계산 -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.fnGetRetireBasicData" parameterType="rMap" resultType="rMap">
        /* s_hrt506ukrServiceImpl_KOCIS.fnGetRetireBasicData */
		SELECT AMT_RANGE								-- 3개월평균범위		- D:일자기준/B:전월기준/M:마감기준(월)/N:마감기준(일)
			 , AMT_CALCU								-- 평균임금계산방식		- D:일평균임금/M:월평균임금
			 , PERIOD_CALCU								-- 근속기간계산방식		- D:근속일수/M:근속월수/T:년월일
			 , RETR_DUTY_RULE							-- 근속기간산정방식		- ○일 이상이면 1개월 간주
			 , ADD_YN									-- 누진적용여부			- Y:한다/N:안한다
			 , PS_ADD_YN								-- 임원누진적영여부		- Y:한다/N:안한다
			 , LAST_YEAR_YN								-- 마지막년차포함여부	- Y:한다/N:안한다
			 , NVL(YEAR_CODE,'')	AS YEAR_CODE		-- 연차수당코드
			 , NVL(BONUS_CODE,'')	AS BONUS_CODE		-- 상여금코드
			 , NVL(RETR_CODE,'')	AS RETR_CODE		-- 퇴직금코드
		  FROM HBS400T
		 WHERE COMP_CODE = #{S_COMP_CODE}
	</select>
	
	<!-- 퇴직금계산 (HRT00T) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.vRtnHRT000T" parameterType="rMap" resultType="rMap">
        /* Hrt506Krv.CHrt505UKr[fnRetireProcSTChangedPayment] Query08 */
		SELECT *
		  FROM HRT000T
		 WHERE COMP_CODE= #{S_COMP_CODE}
		   AND SUPP_TYPE	= 'R'
		   AND OT_KIND_01	= 'ST'
	</select>
	
	
	
	
	<!-- 필요없는 로직 : 조회 전 기존 데이터 존재유무 확인 (산정내역) -->
    <select id="s_hrt506ukrServiceImpl_KOCIS.existYN2" parameterType="rMap" resultType="string">
		SET @COUNT1 = 0
		SET @COUNT2 = 0
		SET @COUNT3 = 0
		SET @COUNT4 = 0
		
		SELECT @COUNT1 = COUNT(COMP_CODE)
		  FROM HRT300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		SELECT @COUNT2 = COUNT(COMP_CODE)
		  FROM HRT300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		SELECT @COUNT3 = COUNT(COMP_CODE)
		  FROM HRT300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		SELECT @COUNT4 = COUNT(COMP_CODE)
		  FROM HRT300T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND RETR_DATE   = #{RETR_DATE}
		   AND RETR_TYPE   = #{RETR_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		
		SELECT CASE WHEN @COUNT1 + @COUNT2 + @COUNT3 + @COUNT4 = 0 THEN 'N'
					ELSE 'Y'
			   END											AS EXIST_YN
    </select>    
	
	<!-- 사용 안 함 - 조회 (소득세계산내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectFormData02" parameterType="rMap" resultType="rMap">
    /* s_hrt506ukrServiceImpl_KOCIS.selectFormData02 */
        SELECT     A.SUPP_TOTAL_I   AS A
                 , A.SPEC_DED_I     AS B
                 , (CASE WHEN A.LONG_YEARS &lt;= 5                         THEN A.INCOME_DED_I ELSE 0 END) AS C
                 , (CASE WHEN A.LONG_YEARS  &gt; 5  AND A.LONG_YEARS &lt;= 10 THEN A.INCOME_DED_I ELSE 0 END) AS D
                 , (CASE WHEN A.LONG_YEARS  &gt; 10 AND A.LONG_YEARS &lt;= 20 THEN A.INCOME_DED_I ELSE 0 END) AS E
                 , (CASE WHEN A.LONG_YEARS  &gt; 20                        THEN A.INCOME_DED_I ELSE 0 END) AS F
                 , A.EARN_INCOME_I  AS G
                 , A.TAX_STD_I      AS H
                 , A.AVG_TAX_STD_I  AS I
                 , (CASE WHEN A.AVG_TAX_STD_I &lt;=  12000000                                  THEN A.AVR_COMP_TAX_I ELSE 0 END) AS J
                 , (CASE WHEN A.AVG_TAX_STD_I  &gt;  12000000 AND A.AVG_TAX_STD_I &lt;=  46000000 THEN A.AVR_COMP_TAX_I ELSE 0 END) AS K
                 , (CASE WHEN A.AVG_TAX_STD_I  &gt;  46000000 AND A.AVG_TAX_STD_I &lt;=  88000000 THEN A.AVR_COMP_TAX_I ELSE 0 END) AS L
                 , (CASE WHEN A.AVG_TAX_STD_I  &gt;  88000000 AND A.AVG_TAX_STD_I &lt;= 300000000 THEN A.AVR_COMP_TAX_I ELSE 0 END) AS M
                 , (CASE WHEN A.AVG_TAX_STD_I  &gt; 300000000                                  THEN A.AVR_COMP_TAX_I ELSE 0 END) AS N
                 , A.COMP_TAX_I     AS O
                 , NVL(A.PAY_TOTAL_I_16         , 0)                   AS P                   -- (33)환산급여
                 , NVL(A.PAY_TOTAL_DED_I_16     , 0)                   AS Q                   -- (34)환산급여별공제
                 , NVL(A.TAX_STD_I_16           , 0)                   AS R                   -- (35)퇴직소득과세표준
                 , NVL(A.CHANGE_COMP_TAX_I_16   , 0)                   AS S                   -- (42)환산산출세액
                 , NVL(A.COMP_TAX_I_16          , 0)                   AS T                   -- (43)산출세액
                 , NVL(A.CHANGE_TAX_YEAR_16     ,'')                   AS U                   -- (44)퇴직일이 속하는 과세연도
                 , NVL(A.EXEMPTION_COMP_TAX_I_16, 0)                   AS V                   -- (45)특례적용 산출세액
                 , NVL(A.CHANGE_TARGET_TAX_I_16 , 0)                   AS W                   -- (47)신고대상액
          FROM            HRT500T A 
               INNER JOIN HUM100T B ON B.COMP_CODE   = A.COMP_CODE
                                                 AND B.PERSON_NUMB = A.PERSON_NUMB
         WHERE A.COMP_CODE   = #{S_COMP_CODE} 
           AND A.RETR_DATE   = #{RETR_DATE}
           AND A.RETR_TYPE   = #{RETR_TYPE}
           AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	
	<!-- 사용 안 함 - 조회 (산정내역(임원)) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList05" parameterType="rMap" resultType="rMap">
	/* s_hrt506ukrServiceImpl_KOCIS.selectList05 */
	   
	 --  2. 데이터 조회 , 변수값 저장 -------------------------------------------------------------------------
	       
	                                                                            
	        SET @JOIN_DATE = (
	                                    SELECT NVL(B.JOIN_DATE         , '0')       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	        SET @JOIN_DATE = NVL(@JOIN_DATE, '0');
	                                    
	        SET @RETR_DATE = (
	                                    SELECT NVL(B.RETR_DATE         , '0')       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	        SET @RETR_DATE = NVL(@RETR_DATE, '0');
	        
	        SET @SUPP_TOTAL_I = (
	                                    SELECT NVL(A.SUPP_TOTAL_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	        SET @SUPP_TOTAL_I = NVL(@SUPP_TOTAL_I, '');
	                                
	        SET @Y2011_SUPP_TOTAL_I = (
	                                    SELECT NVL(A.Y2011_SUPP_TOTAL_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	        SET @Y2011_SUPP_TOTAL_I = NVL(@Y2011_SUPP_TOTAL_I, '');
	                                            
	        SET @STD_RETR_ANNU_I = (
	                                    SELECT NVL(A.STD_RETR_ANNU_I        , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	            
	        SET @STD_RETR_ANNU_I = NVL(@STD_RETR_ANNU_I, '');
	                                            
	        SET @Y_AVG_PAY_I = (
	                                    SELECT NVL(A.Y_AVG_PAY_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                        
	        SET @Y_AVG_PAY_I = NVL(@Y_AVG_PAY_I, '');
	                                            
	        SET @CON_RETR_ANNU_I = (
	                                    SELECT NVL(A.CON_RETR_ANNU_I          , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                        
	        SET @CON_RETR_ANNU_I = NVL(@CON_RETR_ANNU_I, '');
	                                            
	        SET @PAY_ANNU_I = (
	                                    SELECT NVL(A.PAY_ANNU_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                    
	        SET @PAY_ANNU_I = NVL(@PAY_ANNU_I, '');
	                                            
	        SET @RETR_ANNU_I = (
	                                    SELECT NVL(A.RETR_ANNU_I          , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                    
	        SET @RETR_ANNU_I = NVL(@RETR_ANNU_I, '');
	                                            
	        SET @R_IN_TAX_I = (
	                                    SELECT NVL(A.R_IN_TAX_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                        
	        SET @R_IN_TAX_I = NVL(@R_IN_TAX_I, '');
	                                            
	        SET @R_LOCAL_TAX_I = (
	                                    SELECT NVL(A.R_LOCAL_TAX_I         , 0)       
	                                    FROM              HRT510T   A  
	                                           LEFT  JOIN HUM100T   B ON B.COMP_CODE   = A.COMP_CODE
	                                                                            AND B.PERSON_NUMB = A.PERSON_NUMB
	                                    WHERE   A.COMP_CODE      = #{S_COMP_CODE}
	                                    AND      A.RETR_DATE          = #{RETR_DATE}
	                                    AND      A.RETR_TYPE           = #{RETR_TYPE}
	                                    AND      A.PERSON_NUMB    = #{PERSON_NUMB}
	                                    );
	                                
	        SET @R_LOCAL_TAX_I = NVL(@R_LOCAL_TAX_I, '');
	                                            
	                                                                                                                                                                                                                                                                                                                                                                        
	        SELECT TO_CHAR('01')              AS SEQ
	             , 'JOIN_DATE'                      AS DIVI_CODE
	             , TO_CHAR('')                     AS DIVI_NAME
	             , TO_CHAR(@JOIN_DATE)     AS CONTENT
	             , 'JOIN_DATE'                       AS REMARK
	             , 'D'                                  AS DATA_TYPE
	             
	        UNION  ALL
	        
	        SELECT TO_CHAR('02')              AS SEQ
	             , 'RETR_DATE'                      AS DIVI_CODE
	             , TO_CHAR('')                     AS DIVI_NAME
	             , TO_CHAR(@RETR_DATE)    AS CONTENT
	             , 'RETR_DATE'                       AS REMARK
	             , 'D'                                  AS DATA_TYPE
	             
	        UNION  ALL
	        
	        SELECT TO_CHAR( '08')              AS SEQ
	             , 'SUPP_TOTAL_I'                   AS DIVI_CODE
	             , TO_CHAR( '')                      AS DIVI_NAME
	             , TO_CHAR(@SUPP_TOTAL_I)  AS CONTENT
	             , 'SUPP_TOTAL_I'                     AS REMARK
	             , 'N'                                    AS DATA_TYPE
	             
	        UNION  ALL
	        
	        SELECT TO_CHAR( '09')                        AS SEQ
	             , 'Y2011_SUPP_TOTAL_I'                    AS DIVI_CODE
	             , TO_CHAR( '')                                 AS DIVI_NAME
	             , TO_CHAR(@Y2011_SUPP_TOTAL_I)   AS CONTENT
	             , 'Y2011_SUPP_TOTAL_I'                    AS REMARK
	             , 'N'                                               AS DATA_TYPE
	        
	        UNION  ALL
	       
	        SELECT TO_CHAR( '10')                   AS SEQ
	             , 'STD_RETR_ANNU_I'                   AS DIVI_CODE
	             , TO_CHAR( '')                            AS DIVI_NAME
	             , TO_CHAR(@STD_RETR_ANNU_I)  AS CONTENT
	             , 'STD_RETR_ANNU_I'                  AS REMARK
	             , 'N'                                        AS DATA_TYPE
	        
	        UNION  ALL
	        
	        SELECT TO_CHAR( '11')              AS SEQ
	             , 'Y_AVG_PAY_I'                    AS DIVI_CODE
	             , TO_CHAR( '')                     AS DIVI_NAME
	             , TO_CHAR(@Y_AVG_PAY_I)  AS CONTENT
	             , 'Y_AVG_PAY_I'                   AS REMARK
	             , 'N'                                  AS DATA_TYPE
	        
	        UNION  ALL
	        
	        SELECT TO_CHAR( '12')                     AS SEQ
	             , 'CON_RETR_ANNU_I'                   AS DIVI_CODE
	             , TO_CHAR( '')                             AS DIVI_NAME
	             , TO_CHAR(@CON_RETR_ANNU_I)  AS CONTENT
	             , 'CON_RETR_ANNU_I'                   AS REMARK
	             , 'N'                                           AS DATA_TYPE
	        
	        UNION  ALL
	        
	        SELECT TO_CHAR( '13')              AS SEQ
	             , 'PAY_ANNU_I'                     AS DIVI_CODE
	             , TO_CHAR( '')                     AS DIVI_NAME
	             , TO_CHAR(@PAY_ANNU_I)   AS CONTENT
	             , 'PAY_ANNU_I'                    AS REMARK
	             , 'N'                                      AS DATA_TYPE
	       
	        UNION  ALL
	        
	        SELECT TO_CHAR( '14')              AS SEQ
	             , 'RETR_ANNU_I'                    AS DIVI_CODE
	             , TO_CHAR( '')                      AS DIVI_NAME
	             , TO_CHAR(@RETR_ANNU_I)    AS CONTENT
	             , 'RETR_ANNU_I'                     AS REMARK
	             , 'N'                                    AS DATA_TYPE;

	</select>
	
	<!-- 사용 안 함 - 조회 (중간정산내역) -->	
	<select id="s_hrt506ukrServiceImpl_KOCIS.selectList06" parameterType="rMap" resultType="rMap">
    /* s_hrt506ukrServiceImpl_KOCIS.selectList06 */
        SELECT fnGetUserdateComp(#{S_COMP_CODE}, SUPP_DATE) AS SUPP_DATE
             , fnGetUserdateComp(#{S_COMP_CODE}, JOIN_DATE) AS RETR_DATE_FR
             , fnGetUserdateComp(#{S_COMP_CODE}, RETR_DATE) AS RETR_DATE_TO
             , NVL(RETR_ANNU_I , 0) AS RETR_ANNU_I
             , NVL(IN_TAX_I    , 0) AS IN_TAX_I
             , NVL(LOCAL_TAX_I , 0) AS LOCAL_TAX_I
             , (NVL(RETR_ANNU_I, 0) - NVL(IN_TAX_I, 0) - NVL(LOCAL_TAX_I, 0)) AS BALANCE_I
             , TO_CHAR('') AS REMARK
          FROM HRT500T
         WHERE COMP_CODE   = #{S_COMP_CODE}
           AND RETR_TYPE   = 'M'
           AND PERSON_NUMB = #{PERSON_NUMB}
	</select>
	
</mapper>