<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mrt100ukrvServiceImpl">
					
	<select id="mrt100ukrvServiceImpl.selectinoutNoMasterList" parameterType="Map" resultType="rMap">
/* mms510ukrv.Cmms510ukrv[fnMms510QPop] Query01 */
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

    DECLARE @CompCode       NVARCHAR(08) /* 법인코드    */
          , @UserId         NVARCHAR(100) /* 사용자ID    */
          , @LangType       NVARCHAR(2)  /* 언어구분    */
          , @RefItem        NVARCHAR(01) /* 명칭 참조 유형  */
          , @DateFormat     NVARCHAR(10) /* 날짜 포맷 유형 설정 */

    SET @CompCode = #{S_COMP_CODE}
    SET @UserId   = #{S_USER_ID}
    SET @LangType = #{S_LANG_CODE}   

    /* 명칭 참조 유형 */
    SELECT TOP 1 @RefItem = REF_ITEM
      FROM BSA300T WITH (NOLOCK)
     WHERE USER_ID = @UserId

    SET @RefItem = ISNULL(@RefItem, N'0')

    /* 날짜 포맷 유형 설정 */
    SELECT TOP 1 @DateFormat = CODE_NAME
      FROM BSA100T WITH (NOLOCK)
     WHERE COMP_CODE = @CompCode
       AND MAIN_CODE = N'B044'
       AND REF_CODE1 = N'Y'

    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

    /* 데이터 조회 */
    SELECT (CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1
                 WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2
                                     ELSE C1.CUSTOM_NAME
             END)                                           AS INOUT_NAME
         , (CASE WHEN ISNULL(A.INOUT_DATE, '') = ''
                 THEN ''
                 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
                                                         , 'MM'  , SUBSTRING(A.INOUT_DATE, 5, 2))
                                                         , 'DD'  , SUBSTRING(A.INOUT_DATE, 7, 2))
             END)                                           AS INOUT_DATE
         , A.INOUT_CODE
         , A.WH_CODE
         , A.WH_CELL_CODE
         , A.DIV_CODE
         , ISNULL(A.INOUT_PRSN,'') AS INOUT_PRSN
         , A.INOUT_NUM
         , A.MONEY_UNIT
         , A.EXCHG_RATE_O
         , (CASE WHEN A.CREATE_LOC = '2'
                 THEN '1'
                 ELSE '2'
             END)                                           AS CREATE_LOC
         , A.DEPT_CODE
         , B.TREE_NAME			AS DEPT_NAME
         , C1.RETURN_CODE
         , SUM(A.INOUT_Q) AS SUM_ORDER_UNIT_Q 
         , SUM(A.INOUT_I + A.INOUT_TAX_AMT) AS SUM_ORDER_UNIT_FOR_O
         
    FROM              BTR100T A  WITH (NOLOCK)
           INNER JOIN BCM100T C1 WITH (NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
                                              AND C1.CUSTOM_CODE = A.INOUT_CODE
           INNER JOIN BSA210T B WITH(NOLOCK) ON	B.COMP_CODE = A.COMP_CODE
            								AND B.TYPE_LEVEL = A.DIV_CODE
											AND B.TREE_CODE = A.DEPT_CODE                                   
    WHERE  A.COMP_CODE        = @CompCode
    AND    A.INOUT_TYPE       = '4'
    AND    A.INOUT_CODE_TYPE  = '4'
    AND    A.CREATE_LOC      IN ('2','6')
<if test="@foren.Ognl@isNotEmpty(INOUT_CODE)">     
    AND    A.INOUT_CODE    LIKE #{INOUT_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_FR)"> 
    AND    A.INOUT_DATE      &gt;= #{INOUT_DATE_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_TO)">
    AND    A.INOUT_DATE      &lt;= #{INOUT_DATE_TO}
</if>
<if test="@foren.Ognl@isNotEmpty(WH_CODE)">
    AND    A.WH_CODE          = #{WH_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(INOUT_PRSN)">
    AND    A.INOUT_PRSN       = #{INOUT_PRSN}
</if>
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
    AND    A.DIV_CODE         = #{DIV_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(INOUT_METH)">
    AND    A.INOUT_METH       = #{INOUT_METH}
</if>
<if test="@foren.Ognl@isNotEmpty(WH_CELL_CODE)">
    AND    A.WH_CELL_CODE     = #{WH_CELL_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">		/*부서*/
    AND    B.TREE_LEVEL          LIKE  (SELECT TREE_LEVEL FROM BSA210T WITH(NOLOCK) WHERE COMP_CODE =B.COMP_CODE AND TYPE_LEVEL=B.TYPE_LEVEL AND TREE_CODE = #{DEPT_CODE}) + '%'
</if>
    GROUP  BY C1.CUSTOM_NAME, C1.CUSTOM_NAME1, C1.CUSTOM_NAME2  , A.INOUT_DATE  , A.INOUT_CODE   
            , A.WH_CODE     , A.WH_CELL_CODE , A.DIV_CODE       , ISNULL(A.INOUT_PRSN,'')  , A.INOUT_NUM
            , A.MONEY_UNIT  , A.EXCHG_RATE_O , A.CREATE_LOC		, A.DEPT_CODE	, B.TREE_NAME
            , C1.RETURN_CODE
    ORDER  BY INOUT_NAME, A.INOUT_DATE

    SET NOCOUNT OFF
    SET ARITHABORT OFF
END

	</select>
<select id="mrt100ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
	/* mms510ukrv.Cmms510ukrv[fnMms510QStd] Query01 */
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON
    
    DECLARE @CompCode       NVARCHAR(08) /* 법인코드                */
          , @UserId         NVARCHAR(100) /* 사용자ID      */
          , @LangType       NVARCHAR(2)  /* 언어구분                */
          , @RefItem        NVARCHAR(01) /* 명칭 참조 유형            */
          , @DateFormat     NVARCHAR(10) /* 날짜 포맷 유형 설정     */
                
    SET @CompCode = #{S_COMP_CODE}
    SET @UserId   = #{S_USER_ID}
    SET @LangType = #{S_LANG_CODE}   
    
    /* 명칭 참조 유형 */
    SELECT TOP 1 @RefItem = REF_ITEM
      FROM BSA300T WITH (NOLOCK)
     WHERE USER_ID = @UserId
    
    SET @RefItem = ISNULL(@RefItem, N'0')
    
    /* 날짜 포맷 유형 설정 */
    SELECT TOP 1 @DateFormat = CODE_NAME
      FROM BSA100T WITH (NOLOCK)
     WHERE COMP_CODE = @CompCode
       AND MAIN_CODE = N'B044'
       AND REF_CODE1 = N'Y'
    
    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

    /* 데이터 조회 */
    SELECT A.INOUT_NUM    
         , A.INOUT_SEQ    
         , A.SORT_SEQ
         , A.INOUT_METH    
         , A.INOUT_TYPE_DETAIL    
         , A.ITEM_CODE    
         , (CASE WHEN @RefItem = '1' THEN C2.ITEM_NAME1    
                 WHEN @RefItem = '2' THEN C2.ITEM_NAME2    
                                     ELSE C2.ITEM_NAME    
             END)                                                   AS ITEM_NAME    
         , C3.ITEM_ACCOUNT    
         , C2.SPEC    
         , ISNULL(A.ORDER_UNIT, C2.STOCK_UNIT)                      AS ORDER_UNIT    
         , A.INOUT_Q												AS ORDER_UNIT_Q    
         , A.ITEM_STATUS    
         , A.INOUT_Q                                                AS ORIGINAL_Q    
         , ISNULL(C.GOOD_STOCK_Q, 0)                                AS GOOD_STOCK_Q    
         , ISNULL(C.BAD_STOCK_Q, 0)                                 AS BAD_STOCK_Q    
         , (CASE WHEN B.ORDER_NUM IS NULL
                 THEN ISNULL(D.QTY,0) - ISNULL(D.RECEIPT_QTY,0)     
                 ELSE ISNULL(B.ORDER_Q, 0) - ISNULL(B.INSTOCK_Q, 0)    
             END)                                                   AS NOINOUT_Q    
         , A.PRICE_YN    
         , A.MONEY_UNIT    
         , A.INOUT_FOR_P    
         , A.INOUT_FOR_O    
         , A.INOUT_P												AS ORDER_UNIT_FOR_P    
         , A.INOUT_I + A.INOUT_TAX_AMT                              AS ORDER_UNIT_FOR_O
         
         , A.INOUT_TAX_AMT
         , A.INOUT_I + A.INOUT_TAX_AMT                          AS INOUT_TOTAL_I
             
         , A.ACCOUNT_YNC    
         , A.EXCHG_RATE_O    
         , A.INOUT_P    
         , A.INOUT_I    
         , A.ORDER_UNIT_P    
         , A.INOUT_I                                                AS ORDER_UNIT_I    
         , ISNULL(A.TRANS_COST,  0)                                 AS TRANS_COST    
         , ISNULL(A.TARIFF_AMT, 0)                                  AS TARIFF_AMT    
         , C2.STOCK_UNIT    
         , A.TRNS_RATE    
         , A.INOUT_Q    
         , A.ORDER_TYPE    
         , A.LC_NUM    
         , A.BL_NUM    
         , A.ORDER_NUM    
         , A.ORDER_SEQ    
         , (CASE WHEN B.ORDER_NUM IS NULL
                 THEN ISNULL(D.QTY,0)     
                 ELSE ISNULL(B.ORDER_Q, 0)     
             END)                                                   AS ORDER_Q    
         , A.INOUT_CODE_TYPE    
         , A.WH_CODE    
         , A.WH_CELL_CODE    
         , (CASE WHEN ISNULL(A.INOUT_DATE, '') = ''
                 THEN ''
                 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
                                                         , 'MM'  , SUBSTRING(A.INOUT_DATE, 5, 2))
                                                         , 'DD'  , SUBSTRING(A.INOUT_DATE, 7, 2))
             END)                                                   AS INOUT_DATE
         , ISNULL(A.INOUT_PRSN,'') AS INOUT_PRSN   
         , A.ACCOUNT_Q    
         , A.CREATE_LOC    
         , A.SALE_C_DATE    
         , A.REMARK    
         , A.PROJECT_NO    
         , A.LOT_NO    
         , A.INOUT_TYPE    
         , A.INOUT_CODE    
         , A.DIV_CODE    
         , (CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1    
                 WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2    
                                     ELSE C1.CUSTOM_NAME    
             END)                                                   AS CUSTOM_NAME    
         , C1.COMPANY_NUM    
         , (CASE WHEN B.ORDER_NUM IS NULL
                 THEN ISNULL(D.RECEIPT_QTY,0)     
                 ELSE ISNULL(B.INSTOCK_Q, 0)          
             END)                                                   AS INSTOCK_Q    
         , A.SALE_DIV_CODE    
         , A.SALE_CUSTOM_CODE    
         , A.BILL_TYPE    
         , A.SALE_TYPE    
         , A.UPDATE_DB_USER    
         , A.UPDATE_DB_TIME    
         , C3.EXCESS_RATE    
         , A.INSPEC_NUM    
         , A.INSPEC_SEQ    
         , A.BASIS_NUM    
         , A.BASIS_SEQ    
         , ISNULL(A.SCM_FLAG_YN, 'N')                               AS SCM_FLAG_YN    
         , A.TRADE_LOC     
         , ISNULL(C2.STOCK_CARE_YN, 'Y')                            AS STOCK_CARE_YN 
         , A.PURCHASE_TYPE
         , A.SALES_TYPE
         , A.PURCHASE_RATE
         , A.TAX_TYPE
         
    --     ,(CASE WHEN ISNULL(A.PURCHASE_RATE,0) = 0
	--			THEN 0 
	--			ELSE ISNULL(ISNULL(A.ORDER_UNIT_FOR_P,0) / ISNULL(A.PURCHASE_RATE,0) *100,0) END)	AS	SALE_BASIS_P
		 , A.SALE_P AS SALE_BASIS_P     
         , A.COMP_CODE    
         , A.DEPT_CODE
        , A.ISSUE_REQ_NUM	AS RETURN_NUM
        , A.ISSUE_REQ_SEQ	AS RETURN_SEQ
         
         
         , A.INSERT_DB_USER    
         , A.INSERT_DB_TIME 
         
    FROM              BTR100T   A  WITH (NOLOCK)    
           LEFT  JOIN MPO200T   B  WITH (NOLOCK) ON B.COMP_CODE     = A.COMP_CODE    
                                                AND B.DIV_CODE      = A.DIV_CODE    
                                                AND B.CUSTOM_CODE   = A.INOUT_CODE    
                                                AND B.ORDER_NUM     = A.ORDER_NUM    
                                                AND B.ORDER_SEQ     = A.ORDER_SEQ    
           LEFT  JOIN TIA110T   D  WITH (NOLOCK) ON D.COMP_CODE     = A.COMP_CODE    
                                                AND D.DIV_CODE      = A.DIV_CODE    
                                                AND D.SO_SER_NO     = A.ORDER_NUM    
                                                AND D.SO_SER        = A.ORDER_SEQ    
           LEFT  JOIN TIA100T   E  WITH (NOLOCK) ON E.COMP_CODE     = A.COMP_CODE    
                                                AND E.DIV_CODE      = A.DIV_CODE    
                                                AND E.EXPORTER      = A.INOUT_CODE    
                                                AND E.SO_SER_NO     = A.ORDER_NUM    
           LEFT  JOIN BIV100T   C  WITH (NOLOCK) ON C.COMP_CODE     = A.COMP_CODE    
                                                AND C.DIV_CODE      = A.DIV_CODE    
                                                AND C.WH_CODE       = A.WH_CODE    
                                                AND C.ITEM_CODE     = A.ITEM_CODE    
           INNER JOIN BCM100T   C1 WITH (NOLOCK) ON C1.COMP_CODE    = A.COMP_CODE    
                                                AND C1.CUSTOM_CODE  = A.INOUT_CODE    
           INNER JOIN BPR100T   C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE    
                                                AND C2.ITEM_CODE    = A.ITEM_CODE    
           INNER JOIN BPR200T   C3 WITH (NOLOCK) ON C3.COMP_CODE    = A.COMP_CODE    
                                                AND C3.DIV_CODE     = A.DIV_CODE    
                                                AND C3.ITEM_CODE    = A.ITEM_CODE    
   
    WHERE  A.COMP_CODE        = @CompCode
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
    AND    A.DIV_CODE         = #{DIV_CODE}
</if>  
<if test="@foren.Ognl@isNotEmpty(INOUT_NUM)">
    AND    A.INOUT_NUM        = #{INOUT_NUM}
</if> 
    AND    A.INOUT_TYPE       = N'4'    
    AND    A.CREATE_LOC      IN (N'2', N'6')    
    AND    A.INOUT_CODE_TYPE  = N'4'    
    ORDER BY A.SORT_SEQ

    SET NOCOUNT OFF
    SET ARITHABORT OFF
END
	</select>
<select id="mrt100ukrvServiceImpl.selectReturningReceiptList" parameterType="Map" resultType="rMap">
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

	SELECT 
		A.COMP_CODE,
		A.DIV_CODE,
		A.RETURN_NUM,
		A.RETURN_SEQ,
		A.ITEM_CODE,
		B.ITEM_NAME,
		A.LOT_NO,
		A.LOT_ASSIGNED_YN,
		A.PURCHASE_TYPE,
		A.SALES_TYPE,
		C.GOOD_STOCK_Q,
		A.SALE_P			AS SALE_BASIS_P,
		A.PURCHASE_RATE,
		A.PURCHASE_P		AS ORDER_UNIT_FOR_P,
		A.RETURN_Q			AS ORDER_UNIT_Q,
		A.INOUT_Q			AS RETURN_CONFIRM_Q,
		A.RETURN_O 		AS ORDER_UNIT_FOR_O,
		A.REMARK,
		A2.WH_CODE,
		A2.CUSTOM_CODE,
		E.CUSTOM_NAME,
		A2.RETURN_CODE,
		A2.INOUT_PRSN,
		A2.RETURN_DATE,
		A2.DEPT_CODE,
		D.TREE_NAME	AS DEPT_NAME
	FROM		MRT200T A WITH (NOLOCK)
	 INNER JOIN MRT100T A2 WITH(NOLOCK) ON A2.COMP_CODE  = A.COMP_CODE
	 								   AND A2.DIV_CODE   = A.DIV_CODE
	 								   AND A2.RETURN_NUM = A.RETURN_NUM  
	 INNER JOIN BPR100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                       AND B.ITEM_CODE = A.ITEM_CODE    
     LEFT  JOIN BIV100T C WITH (NOLOCK) ON C.COMP_CODE = A2.COMP_CODE    
                                       AND C.DIV_CODE  = A2.DIV_CODE    
                                       AND C.WH_CODE   = A2.WH_CODE    
                                       AND C.ITEM_CODE = A.ITEM_CODE   
     INNER JOIN BSA210T D WITH(NOLOCK) ON  D.COMP_CODE = A2.COMP_CODE
            						   AND D.TYPE_LEVEL = A2.DIV_CODE
								       AND D.TREE_CODE = A2.DEPT_CODE 
	 INNER JOIN BCM100T E WITH(NOLOCK) ON E.COMP_CODE  = A2.COMP_CODE
	 								   AND E.CUSTOM_CODE = A2.CUSTOM_CODE
	 								                     
 
	WHERE A.COMP_CODE = #{S_COMP_CODE}
	  AND A.DIV_CODE  = #{DIV_CODE}
	  <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">		/*부서*/
    AND    D.TREE_LEVEL          LIKE  (SELECT TREE_LEVEL FROM BSA210T WITH(NOLOCK) WHERE COMP_CODE =D.COMP_CODE AND TYPE_LEVEL=D.TYPE_LEVEL AND TREE_CODE = #{DEPT_CODE}) + '%'
</if>
<if test="@foren.Ognl@isNotEmpty(WH_CODE)">
    AND    A2.WH_CODE          = #{WH_CODE}
</if>	  
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">     
    AND    A2.CUSTOM_CODE    = #{CUSTOM_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(RETURN_DATE)"> 
    AND    A2.RETURN_DATE   = #{RETURN_DATE}
</if>
<if test="@foren.Ognl@isNotEmpty(INOUT_PRSN)">
    AND    A2.INOUT_PRSN       = #{INOUT_PRSN}
</if>
<if test="@foren.Ognl@isNotEmpty(RETURN_NUM)">
    AND    A.RETURN_NUM       = #{RETURN_NUM}
</if>
	AND   A.RETURN_Q - A.INOUT_Q > 0
	AND   A.CLOSE_YN = 'N'

    SET ARITHABORT OFF
    SET NOCOUNT OFF
END
	</select>

<select id="mrt100ukrvServiceImpl.fnOrderPrice" parameterType="Map" resultType="rMap">

SELECT A.COMP_CODE, 
		A.TYPE, 
		A.DIV_CODE, 
		A.ITEM_CODE, 
		A.CUSTOM_CODE, 
		A.MONEY_UNIT,
		A.ORDER_UNIT, 
		A.PURCHASE_TYPE, 
		A.SALES_TYPE,
		A.ORDER_RATE,
		A.PURCHASE_RATE,
		ISNULL(A.ITEM_P, C.PURCHASE_BASE_P) AS ORDER_P,
		A.APLY_START_DATE
 FROM uniLITE.BPR400T A
 INNER JOIN
   (SELECT COMP_CODE, TYPE, DIV_CODE, ITEM_CODE, CUSTOM_CODE, MONEY_UNIT, ORDER_UNIT, MAX(APLY_START_DATE) AS APLY_START_DATE
    FROM uniLITE.BPR400T
    WHERE APLY_START_DATE &lt;=#{INOUT_DATE}
    GROUP BY COMP_CODE, TYPE, DIV_CODE, ITEM_CODE, CUSTOM_CODE, MONEY_UNIT, ORDER_UNIT
    ) B ON A.COMP_CODE = B.COMP_CODE
       AND A.TYPE                 = B.TYPE
       AND A.DIV_CODE             = B.DIV_CODE                          
       AND A.CUSTOM_CODE          = B.CUSTOM_CODE
       AND A.ITEM_CODE            = B.ITEM_CODE 
       AND A.MONEY_UNIT           = B.MONEY_UNIT
       AND A.ORDER_UNIT           = B.ORDER_UNIT
       AND A.APLY_START_DATE      = B.APLY_START_DATE                          
 INNER JOIN unilite.BPR200T C ON A.COMP_CODE = C.COMP_CODE
                             AND A.DIV_CODE  = C.DIV_CODE
                             AND A.ITEM_CODE = C.ITEM_CODE
WHERE A.ITEM_CODE	= #{ITEM_CODE}
	AND A.CUSTOM_CODE       = #{CUSTOM_CODE}
	AND A.COMP_CODE	        = #{S_COMP_CODE}
	AND A.DIV_CODE	        = #{DIV_CODE}
	AND A.TYPE		        = N'1'			
	AND A.MONEY_UNIT	    = #{MONEY_UNIT}
	AND A.ORDER_UNIT		= #{ORDER_UNIT}
</select>
<select id="mrt100ukrvServiceImpl.userWhcode" parameterType="Map" resultType="rMap">
SELECT
	A.WH_CODE
FROM BSA210T A WITH(NOLOCK)
	LEFT JOIN BSA300T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
									AND B.DEPT_CODE = A.TREE_CODE
WHERE A.COMP_CODE = #{S_COMP_CODE}
AND B.USER_ID = #{S_USER_ID}

</select>
<select id="mrt100ukrvServiceImpl.fnSaleBasisP" parameterType="Map" resultType="rMap">
BEGIN
DECLARE    
	 			@ITEM_CODE			NVARCHAR(20)
	 		,	@COMP_CODE			NVARCHAR(08)

        SET     @ITEM_CODE	        = #{ITEM_CODE}
        SET     @COMP_CODE	        = #{S_COMP_CODE}	

SELECT 
      SALE_BASIS_P
      FROM BPR100T WITH (NOLOCK)
      
      WHERE	COMP_CODE = @COMP_CODE 
      AND ITEM_CODE	=	@ITEM_CODE
END 
</select>
<select id="mrt100ukrvServiceImpl.taxType" parameterType="Map" resultType="rMap">
SELECT
	TAX_TYPE
		FROM BPR100T WITH(NOLOCK)
		WHERE COMP_CODE = #{S_COMP_CODE}
			AND ITEM_CODE = #{ITEM_CODE}
</select>
<select id="mrt100ukrvServiceImpl.fnGetCalcTaxAmt" parameterType="Map" resultType="rMap">
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		SELECT INOUT_I,
				INOUT_TAX_AMT,
				INOUT_TOTAL_I 
			FROM uniLITE.fnGetCalcTaxAmt( #{COMP_CODE}
			                          , #{CUSTOM_CODE}
			                          , #{ITEM_CODE}
			                          , #{ORDER_UNIT_Q} 
			                          , #{ORDER_UNIT_P} )
</select>

<update id="mrt100ukrvServiceImpl.updateMRT200T" parameterType="Map">		
UPDATE MRT200T
	SET
     
     INOUT_Q = (SELECT INOUT_Q FROM MRT200T  WHERE COMP_CODE = #{COMP_CODE}
											  AND DIV_CODE = #{DIV_CODE}
											  AND RETURN_NUM = #{RETURN_NUM}
											  AND RETURN_SEQ = #{RETURN_SEQ}
				)	+	#{ORDER_UNIT_Q}		
     ,UPDATE_DB_USER  = #{S_USER_ID}
     ,UPDATE_DB_TIME = GETDATE()
     WHERE		COMP_CODE = #{COMP_CODE}
     		AND DIV_CODE = #{DIV_CODE}
     		AND RETURN_NUM = #{RETURN_NUM}
     		AND RETURN_SEQ = #{RETURN_SEQ}
</update>



<insert id="mrt100ukrvServiceImpl.insertLogDetail" parameterType="Map">    	
INSERT INTO L_BTR100T
     ( KEY_VALUE		    , OPR_FLAG
     , COMP_CODE            , INOUT_NUM             , INOUT_SEQ             , INOUT_TYPE            , DIV_CODE
     , INOUT_METH           , CREATE_LOC            , INOUT_TYPE_DETAIL     , INOUT_CODE_TYPE       , INOUT_CODE
     , INOUT_DATE           , ITEM_CODE             , ITEM_STATUS           , WH_CODE			    , WH_CELL_CODE         
	 , INOUT_PRSN           , INOUT_Q               , INOUT_P               , INOUT_I			    , INOUT_FOR_P
	 , INOUT_TAX_AMT		, SORT_SEQ
	           
	 , INOUT_FOR_O          , EXCHG_RATE_O          , MONEY_UNIT            , BASIS_NUM             , BASIS_SEQ
     , PROJECT_NO           , LOT_NO                , REMARK		        , ORDER_TYPE            , ORDER_NUM             
	 , ORDER_SEQ            , ORDER_UNIT            , TRNS_RATE		        , ORDER_UNIT_Q          , ORDER_UNIT_P          
	 , ORDER_UNIT_FOR_P     , BILL_TYPE             , SALE_TYPE			    , PRICE_YN              , SALE_DIV_CODE         
	 , SALE_CUSTOM_CODE     , SALE_C_DATE           , LC_NUM			    , BL_NUM                , TRADE_LOC             
	 , ACCOUNT_YNC	        , ACCOUNT_Q 			,TRANS_COST				, TARIFF_AMT			
	 , PURCHASE_TYPE		, SALES_TYPE			, PURCHASE_RATE			, DEPT_CODE				, TAX_TYPE
	 , SALE_P
	 , PURCHASE_CUSTOM_CODE ,PURCHASE_P				, LOT_ASSIGNED_YN		,ISSUE_REQ_NUM			, ISSUE_REQ_SEQ
	 , UPDATE_DB_USER		, UPDATE_DB_TIME		, INSERT_DB_USER    	, INSERT_DB_TIME
	 
	 )
VALUES
     ( #{KEY_VALUE}         , #{OPR_FLAG}		    
	 , #{S_COMP_CODE}       , #{INOUT_NUM}          , #{INOUT_SEQ}          , #{INOUT_TYPE}         , #{DIV_CODE}		    
	 , #{INOUT_METH}        , #{CREATE_LOC}         , #{INOUT_TYPE_DETAIL}  , #{INOUT_CODE_TYPE}    , #{INOUT_CODE}			
	 , #{INOUT_DATE}        , #{ITEM_CODE}          , #{ITEM_STATUS}        , #{WH_CODE}		    , #{WH_CELL_CODE}       
	 , #{INOUT_PRSN}        , #{INOUT_Q}            , #{INOUT_P}            , #{INOUT_I}		    , #{INOUT_FOR_P}
	 , #{INOUT_TAX_AMT}     , #{SORT_SEQ}   
	 , #{INOUT_FOR_O}       , #{EXCHG_RATE_O}       , #{MONEY_UNIT}         , #{BASIS_NUM}          , #{BASIS_SEQ}		    
	 , #{PROJECT_NO}        , #{LOT_NO}             , #{REMARK}		        , #{ORDER_TYPE}         , #{ORDER_NUM}          
	 , #{ORDER_SEQ}         , #{ORDER_UNIT}         , #{TRNS_RATE}	        , #{ORDER_UNIT_Q}       , #{ORDER_UNIT_P}       
	 , #{ORDER_UNIT_FOR_P}  , #{BILL_TYPE}          , #{SALE_TYPE}		    , #{PRICE_YN}           , #{SALE_DIV_CODE}      
	 , #{SALE_CUSTOM_CODE}  , #{SALE_C_DATE}        , #{LC_NUM}			    , #{BL_NUM}             , #{TRADE_LOC}          
	 , #{ACCOUNT_YNC}       , #{ACCOUNT_Q} 			, #{TRANS_COST}			, #{TARIFF_AMT}			
	 , #{PURCHASE_TYPE}		, #{SALES_TYPE}			, #{PURCHASE_RATE}		, #{DEPT_CODE}			, #{TAX_TYPE}
	 , #{SALE_BASIS_P}
	 , #{INOUT_CODE}		, #{INOUT_P}			, #{LOT_ASSIGNED_YN}	, #{RETURN_NUM}			, #{RETURN_SEQ}
	 , #{S_USER_ID}			, GETDATE()				, #{S_USER_ID}    		, GETDATE()
	 
	 )
</insert>
	  
<update id="spReturning" parameterType="Map" statementType="CALLABLE">
		
		{call SP_MATRL_Returning (
			#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{CreateType, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{InOutNum, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
</update>		  
	  
</mapper>