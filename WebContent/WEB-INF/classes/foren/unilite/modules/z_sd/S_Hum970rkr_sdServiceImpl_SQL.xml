<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hum970rkr_sdServiceImpl">
	<select id="s_hum970rkr_sdServiceImpl.fnHum970ini" parameterType="Map" resultType="rMap">
		--s_hum970rkr_sdServiceImpl.fnHum970ini - 증명번호 호출
		<!-- SELECT ISNULL(MAX(ISNULL(CERTI_NUM,0)), 0) AS CERTI_NUM
		  FROM HUM970T
		 WHERE COMP_CODE = #{S_COMP_CODE} -->

        SELECT UNILITE.fnGetProofDocAutoNum(#{S_COMP_CODE}, #{CERTI_TYPE})AS CERTI_NUM
         
	</select>	
	<!-- <select id="fnHum970nQ" parameterType="Map" resultType="rMap" >	 -->
    <select id="s_hum970rkr_sdServiceImpl.PrintList1" parameterType="Map" resultType="rMap" >
	   <if test="DOC_KIND != &quot;3&quot;">	            
            --s_hum970rkr_sdServiceImpl.PrintList1
            SELECT A.KOR_ADDR																AS KOR_ADDR		--주소
			    , CASE WHEN (A.NAME_CHI IS NULL OR A.NAME_CHI = '') 
				 	   THEN A.NAME
			           ELSE A.NAME + ' (' + A.NAME_CHI + ')'
			       END																		AS NAME			--이름
                <if test="ENCRYPT == &quot;Y&quot;">       
                	, unilite.fnCipherDecrypt(A.REPRE_NUM, 'R')                            AS REPRE_NUM 
                </if>
                <if test="ENCRYPT != &quot;Y&quot;">         
                	, unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')                            AS REPRE_NUM 
                </if>    
                 , A.DEPT_NAME															AS DEPT_NAME	--부서
		         , M2.CODE_NAME															AS POST_NAME	--직급
				 , M3.CODE_NAME															AS ABIL_NAME	--직책
				 , M4.CODE_NAME															AS KNOC_NAME	--근무구분
		         , (CASE WHEN A.ORI_JOIN_DATE != '00000000' AND A.ORI_JOIN_DATE != '' 
				 		 THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ORI_JOIN_DATE)
		                 ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE)
		             END)																AS JOIN_DATE	
                 
                <if test="DOC_KIND == &quot;1&quot;">
                -- 재직증명서           
                , uniLITE.fnGetUserDateComp(A.COMP_CODE, #{ISS_DATE})                  AS CURR_DATE
                </if>
                <if test="DOC_KIND == &quot;2&quot;">    
                -- 퇴직증명서
                , (CASE WHEN A.RETR_DATE != '00000000' AND A.RETR_DATE != '' 
                        THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE) 
                        ELSE ''
                    END)                                                           AS CURR_DATE 
                </if>                                                                       
                <if test="DOC_KIND != &quot;1&quot;"> -- 1or2 가 아닐때
                -- 경력증명서
                , (CASE WHEN A.RETR_DATE != '00000000' AND A.RETR_DATE != '' 
                        THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE) 
                        ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, #{ISS_DATE})
                    END)                                                           AS CURR_DATE
                </if>


                 , A.RETR_DATE
                 , REPLACE(unilite.fnHumanDateDiff(#{ANN_FR_DATE},#{ANN_TO_DATE},'LONG_TOT_ALL'),'.','') AS LONG_TOT_ALL
                 
                 , REPLACE(unilite.fnHumanDateDiff(#{ANN_FR_DATE}, CONVERT(NVARCHAR(8), DATEADD(DAY,-1,CONVERT(SMALLDATETIME, #{ANN_TO_DATE})),112), 'LONG_TOT_ALL'),'.','') AS LONG_TOT_ALL_M1
                 
                 , M1.COMP_NAME             AS DIV_NAME
                 , M1.ADDR                  AS DIV_KOR_ADDR
                 , M1.REPRE_NAME  
                 , A.PERSON_NUMB
                 
 				 , (CASE WHEN A.RETR_DATE != '00000000' AND A.RETR_DATE != '' 
				         THEN '퇴사'
                         ELSE ''
                     END)  					  AS RETR_YN
				 , (SELECT COUNT(PERSON_NUMB) AS PERSON_CNT
					  FROM HUM100T
					WHERE COMP_CODE  = #{S_COMP_CODE}
					  AND (RETR_DATE = '00000000' OR RETR_DATE = '' )) AS PERSON_CNT
					  
					  
				, B.FR_ANN_DATE					--근무기간(FR)
				, B.TO_ANN_DATE					--근무기간(TO)

				, B.POST_NAME	AS AF_POST_NAME	--직급	
				, B.BF_ABIL_NAME				--직책
				, B.AF_ABIL_NAME				--직책

				, B.BF_TEMPC_01		--근무구분	
				, B.AF_TEMPC_01		--근무구분	
				, B.BF_TEMP_NAME	--근무부서
				, B.AF_TEMP_NAME	--근무부서
				
				, B.BF_DEPT_NAME
				, B.AF_DEPT_NAME
				 
              FROM      HUM100T A WITH (NOLOCK)
              LEFT JOIN BOR100T M1 WITH (NOLOCK) ON M1.COMP_CODE = A.COMP_CODE
			  --직급
			  LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE = A.COMP_CODE
			                                     AND M2.SUB_CODE  = A.POST_CODE
			                                     AND M2.MAIN_CODE = 'H005'
			  --직책
			  LEFT  JOIN BSA100T M3 WITH (NOLOCK) ON M3.COMP_CODE = A.COMP_CODE
			                                     AND M3.SUB_CODE  = A.ABIL_CODE
			                                     AND M3.MAIN_CODE = 'H006'
			  --근무구분
			  LEFT  JOIN BSA100T M4 WITH (NOLOCK) ON M4.COMP_CODE = A.COMP_CODE
                                                 AND M4.SUB_CODE  = A.KNOC
                                                 AND M4.MAIN_CODE = 'H072'
                                                 
			  --발령정보
			  LEFT  JOIN	(
								SELECT A.COMP_CODE
									 , A.PERSON_NUMB

									 , A.BF_ANNOUNCE_CODE
									 , B.AF_ANNOUNCE_CODE

									 , unilite.fnGetUserdate(A.COMP_CODE, A.ANNOUNCE_DATE) AS FR_ANN_DATE
									 , unilite.fnGetUserdate(A.COMP_CODE, CONVERT(NVARCHAR(08), DATEADD(DAY, -1, B.ANNOUNCE_DATE), 112)) AS TO_ANN_DATE
									 --, A.ANNOUNCE_DATE
									 --, B.ANNOUNCE_DATE
									 , B.POST_CODE
									 , M1.CODE_NAME AS POST_NAME
									 , A.BF_DEPT_CODE
									 , A.BF_DEPT_NAME
	 
									 , M2.CODE_NAME AS BF_ANNOUNCE_NAME
									 , B.AF_DEPT_CODE
									 , B.AF_DEPT_NAME
									 , M3.CODE_NAME AS AF_ANNOUNCE_NAME

									 , A.BF_ABIL_CODE
									 , B.AF_ABIL_CODE
									 , M4.CODE_NAME AS BF_ABIL_NAME
									 , M5.CODE_NAME AS AF_ABIL_NAME

									 , A.BF_TEMPC_01
									 , B.AF_TEMPC_01
									 , M6.CODE_NAME AS BF_TEMP_NAME
									 , M7.CODE_NAME AS AF_TEMP_NAME

	
								  FROM (
											SELECT COMP_CODE 
												 , PERSON_NUMB
												 , ROW_NUMBER() OVER(ORDER BY ANNOUNCE_DATE ASC) AS SEQ
												 , ANNOUNCE_DATE
												 , POST_CODE
												 , AF_DEPT_CODE  AS BF_DEPT_CODE
												 , AF_DEPT_NAME  AS BF_DEPT_NAME
												 , ANNOUNCE_CODE AS BF_ANNOUNCE_CODE
												 , ABIL_CODE     AS BF_ABIL_CODE
												 , TEMPC_01      AS BF_TEMPC_01
											  FROM HUM760T WITH(NOLOCK)
											 WHERE COMP_CODE   = #{S_COMP_CODE}
											   AND PERSON_NUMB = #{PERSON_NUMB}
											   AND ANNOUNCE_CODE IN ('00', '01', '02', '03', '04', '07', '11', '17', '18', '21', '22', '23', '31', '33', '36', '51', 'XX', '12')
									   ) A
									LEFT JOIN (
												SELECT COMP_CODE 
													 , PERSON_NUMB
													 , ROW_NUMBER() OVER(ORDER BY ANNOUNCE_DATE ASC) AS SEQ
													 , ANNOUNCE_DATE
													 , POST_CODE
													 , AF_DEPT_CODE
													 , AF_DEPT_NAME
													 , ANNOUNCE_CODE AS AF_ANNOUNCE_CODE
													 , ABIL_CODE     AS AF_ABIL_CODE
													 , TEMPC_01      AS AF_TEMPC_01
												  FROM HUM760T WITH(NOLOCK)
												 WHERE COMP_CODE   = #{S_COMP_CODE}
												   AND PERSON_NUMB = #{PERSON_NUMB}
												   AND ANNOUNCE_CODE IN ('00', '01', '02', '03', '04', '07', '11', '17', '18', '21', '22', '23', '31', '33', '36', '51', 'XX', '12')
											  ) B ON B.COMP_CODE   = A.COMP_CODE
												 AND B.PERSON_NUMB = A.PERSON_NUMB
												 AND B.SEQ         = A.SEQ + 1
									 LEFT JOIN HUM100T C WITH(NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
																	 AND C.PERSON_NUMB = B.PERSON_NUMB
									 LEFT JOIN BSA100T M1 WITH(NOLOCK) ON M1.COMP_CODE = B.COMP_CODE
																	  AND M1.MAIN_CODE = 'H005'
																	  AND M1.SUB_CODE  = B.POST_CODE

									 LEFT JOIN BSA100T M2 WITH(NOLOCK) ON M2.COMP_CODE = A.COMP_CODE
																	  AND M2.MAIN_CODE = 'H094'
																	  AND M2.SUB_CODE  = A.BF_ANNOUNCE_CODE

									 LEFT JOIN BSA100T M3 WITH(NOLOCK) ON M3.COMP_CODE = B.COMP_CODE
																	  AND M3.MAIN_CODE = 'H094'
																	  AND M3.SUB_CODE  = B.AF_ANNOUNCE_CODE

									 LEFT JOIN BSA100T M4 WITH(NOLOCK) ON M4.COMP_CODE = A.COMP_CODE
																	  AND M4.MAIN_CODE = 'H006'
																	  AND M4.SUB_CODE  = A.BF_ABIL_CODE

									 LEFT JOIN BSA100T M5 WITH(NOLOCK) ON M5.COMP_CODE = B.COMP_CODE
																	  AND M5.MAIN_CODE = 'H006'
																	  AND M5.SUB_CODE  = B.AF_ABIL_CODE

									 LEFT JOIN BSA100T M6 WITH(NOLOCK) ON M6.COMP_CODE = A.COMP_CODE
																	  AND M6.MAIN_CODE = 'H008'
																	  AND M6.SUB_CODE  = A.BF_TEMPC_01

									 LEFT JOIN BSA100T M7 WITH(NOLOCK) ON M7.COMP_CODE = B.COMP_CODE
																	  AND M7.MAIN_CODE = 'H008'
																	  AND M7.SUB_CODE  = B.AF_TEMPC_01


				 			
										--WHERE A.SEQ > 1
							 WHERE C.COMP_CODE   = #{S_COMP_CODE}
							) B ON B.COMP_CODE   = A.COMP_CODE
							   AND B.PERSON_NUMB = A.PERSON_NUMB
                                                 
             WHERE A.COMP_CODE = #{S_COMP_CODE}
             AND A.PERSON_NUMB = #{PERSON_NUMB}
 
	   </if>     
	</select>
	
	<insert id="s_hum970rkr_sdServiceImpl.insertDetail" parameterType="Map">
		--s_hum970rkr_sdServiceImpl.insertDetail
        INSERT INTO HUM970T
             ( COMP_CODE
             , CERTI_NUM
             , CERTI_TYPE
             , CERTI_LANGU
             , CERTI_PRINT_USER
             , CERTI_PRINT_DATE
             , REMARK)
        VALUES
             ( #{S_COMP_CODE}
             , #{PROF_NUM}
             , #{optPrint}
             , #{bParam4}
             , #{PERSON_NUMB}
             , #{ISS_DATE}
             , #{USE} )
	</insert>	
	<select id="s_hum970rkr_sdServiceImpl.selectProfNum" parameterType="Map" resultType="rMap">
		--s_hum970rkr_sdServiceImpl.selectProfNum
        SELECT TOP 1 *
          FROM HUM970T
         WHERE COMP_CODE  = #{S_COMP_CODE}
           AND CERTI_NUM  = #{PROF_NUM}
    </select>   
    
    
	<select id="s_hum970rkr_sdServiceImpl.selectPrintMaster" parameterType="Map" resultType="rMap">
		--s_hum970rkr_sdServiceImpl.PrintList1
		SELECT A.KOR_ADDR														AS KOR_ADDR		--주소
			 , CASE WHEN ISNULL(A.NAME_CHI, '') = ''	THEN A.NAME
					ELSE A.NAME + ' (' + A.NAME_CHI + ')'
			   END																AS NAME			--이름
			 , CASE WHEN #{ENCRYPT} = 'Y'
					THEN unilite.fnCipherDecrypt(A.REPRE_NUM, 'R')
					ELSE unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')
			   END																AS REPRE_NUM
			 , A.DEPT_NAME														AS DEPT_NAME	--부서
			 , M2.CODE_NAME														AS POST_NAME	--직급
			 , M3.CODE_NAME														AS ABIL_NAME	--직책
			 , M4.CODE_NAME														AS KNOC_NAME	--근무구분
			 , CASE WHEN A.ORI_JOIN_DATE != '00000000' AND A.ORI_JOIN_DATE != ''
					THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.ORI_JOIN_DATE)
					ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE)
			   END																AS JOIN_DATE
			 , CASE WHEN A.RETR_DATE != '00000000' AND A.RETR_DATE != ''
					THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE) 
					ELSE uniLITE.fnGetUserDateComp(A.COMP_CODE, #{ISS_DATE})
			   END																AS CURR_DATE
			 , A.RETR_DATE
			 , REPLACE(unilite.fnHumanDateDiff(#{ANN_FR_DATE}, #{ANN_TO_DATE}, 'LONG_TOT_ALL'), '.', '')	AS LONG_TOT_ALL
			 , REPLACE(unilite.fnHumanDateDiff(#{ANN_FR_DATE}, CONVERT(NVARCHAR(8), DATEADD(DAY, -1, CONVERT(SMALLDATETIME, #{ANN_TO_DATE})), 112), 'LONG_TOT_ALL'), '.', '')	AS LONG_TOT_ALL_M1
			 , M1.COMP_NAME														AS DIV_NAME
			 , M1.ADDR															AS DIV_KOR_ADDR
			 , M1.REPRE_NAME
			 , A.PERSON_NUMB
			 , CASE WHEN A.RETR_DATE != '00000000' AND A.RETR_DATE != ''
					THEN '퇴사'
					ELSE ''
			   END																AS RETR_YN
			 , (SELECT COUNT(PERSON_NUMB) AS PERSON_CNT
				  FROM HUM100T
				 WHERE COMP_CODE  = 'MASTER'
				   AND (RETR_DATE = '00000000' OR RETR_DATE = '' ))				AS PERSON_CNT
		  FROM HUM100T A WITH (NOLOCK)
				LEFT JOIN		BOR100T M1 WITH (NOLOCK)
							 ON M1.COMP_CODE = A.COMP_CODE
				--직급
				LEFT JOIN		BSA100T M2 WITH (NOLOCK)
							 ON M2.COMP_CODE = A.COMP_CODE
							AND M2.SUB_CODE  = A.POST_CODE
							AND M2.MAIN_CODE = 'H005'
				--직책
				LEFT JOIN		BSA100T M3 WITH (NOLOCK)
							 ON M3.COMP_CODE = A.COMP_CODE
							AND M3.SUB_CODE  = A.ABIL_CODE
							AND M3.MAIN_CODE = 'H006'
				--근무구분
				LEFT JOIN		BSA100T M4 WITH (NOLOCK)
							 ON M4.COMP_CODE = A.COMP_CODE
							AND M4.SUB_CODE  = A.JOB_CODE
							AND M4.MAIN_CODE = 'H008'
		 WHERE A.COMP_CODE	 = #{S_COMP_CODE}
		   AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>
	
	<select id="s_hum970rkr_sdServiceImpl.selectPrintDetail" parameterType="Map" resultType="rMap">
		SELECT ANNOUNCE_DATE_FR
			 , ANNOUNCE_DATE_TO
			 , PAY_GRADE_NAME
			 , POST_NAME
			 , CAREER_NAME
			 , DEPT_NAME
		  FROM uniLITE.UFN_HUMAN_fnGetCareerList_SD(#{S_COMP_CODE}, #{PERSON_NUMB}, #{ISS_DATE})
	</select>
	
</mapper>