<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hrt705skr_sdServiceImpl">
    
    <select id="s_hrt705skr_sdServiceImpl.selectList1" parameterType="rMap" resultType="rMap">
        --s_hrt705skr_sdServiceImpl.selectList1
        SELECT A.COMP_CODE
             , B.DIV_CODE                			  --사업장
             , B.DEPT_NAME               			  --부서
             , B.POST_CODE               			  --직위
             , B.NAME                    			  --사명
             , A.PERSON_NUMB             			  --사번
             , A.RETR_TYPE               			  --구분
             , B.JOIN_DATE               AS ENTR_DATE --입사일
             , A.JOIN_DATE               			  --정산시작일
             , A.RETR_DATE               			  --정산일
             --, A.SUPP_DATE               			  --지급일
        
             , ISNULL(A.DUTY_YYYY, 0)    AS DUTY_YYYY             --근속기간
             , ISNULL(A.LONG_MONTH, 0)   AS LONG_MONTH            --근속기간
             , ISNULL(A.LONG_DAY, 0)     AS LONG_DAY              --근속기간

             , ISNULL(C.PAY_TOTAL_I,0)   AS PAY_TOTAL_I           --급여총액
             , ISNULL(D.BONUS_TOTAL_I,0) AS BONUS_TOTAL_I         --상여총액
             , ISNULL(D.YEAR_TOTAL_I,0)  AS YEAR_TOTAL_I          --년월차종액
             , ISNULL(C.PAY_TOTAL_I,0)  + ISNULL(D.BONUS_TOTAL_I,0) + ISNULL(D.YEAR_TOTAL_I,0)      AS TOT_WAGES_I             --합계
             , (ISNULL(C.PAY_TOTAL_I,0) + ISNULL(D.BONUS_TOTAL_I,0) + ISNULL(D.YEAR_TOTAL_I,0)) / 3 AS AVG_WAGES_I           --평균임금
             , A.ORI_RETR_ANNU_I         --퇴직금
        
          FROM      HRT500T A WITH(NOLOCK)
         INNER JOIN HUM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                          AND B.PERSON_NUMB = A.PERSON_NUMB
          LEFT OUTER JOIN  (SELECT COMP_CODE --퇴직급여, 상여 ,년월차 금액을 가져오기 위한 조인 START
                                 , RETR_DATE
                                 , RETR_TYPE
                                 , PERSON_NUMB
                                 , ISNULL(SUM(AMOUNT_I),0) AS PAY_TOTAL_I  
                              FROM HRT300T 
                             GROUP BY COMP_CODE
                                    , RETR_DATE
                                    , RETR_TYPE
                                    , PERSON_NUMB) C --틔직급여내역
          ON C.COMP_CODE   = A.COMP_CODE
         AND C.RETR_DATE   = A.RETR_DATE
         AND C.RETR_TYPE   = A.RETR_TYPE
         AND C.PERSON_NUMB = A.PERSON_NUMB  
                                                            
         LEFT OUTER JOIN  (SELECT COMP_CODE
                                , RETR_DATE
                                , RETR_TYPE
                                , PERSON_NUMB
                                , SUM(CASE WHEN BONUS_TYPE = '4' THEN BONUS_I ELSE 0 END) AS BONUS_TOTAL_I
                                , SUM(CASE WHEN BONUS_TYPE = 'F' THEN BONUS_I ELSE 0 END) AS YEAR_TOTAL_I  
                          FROM HRT400T 
                          GROUP BY  COMP_CODE
                                  , RETR_DATE
                                  , RETR_TYPE
                                  , PERSON_NUMB
                        ) D --틔직급여내역
          ON D.COMP_CODE   = A.COMP_CODE
         AND D.RETR_DATE   = A.RETR_DATE
         AND D.RETR_TYPE   = A.RETR_TYPE
         AND D.PERSON_NUMB = A.PERSON_NUMB  --퇴직급여, 상여 ,년월차 금액을 가져오기 위한 조인 END
                                                                                      
       WHERE A.COMP_CODE         = #{S_COMP_CODE}
         AND A.RETR_PENSION_KIND = 'N'
       <if test="@foren.Ognl@isNotEmpty(CODE_NAME)">
	   AND A.RETR_TYPE   = #{CODE_NAME}
	   </if>
       <if test="@foren.Ognl@isNotEmpty(FR_DATE)">
       AND A.RETR_DATE   &gt;= #{BASE_DATE}
       </if>
       <if test="@foren.Ognl@isNotEmpty(TO_DATE)">
       AND A.RETR_DATE   &lt;= #{BASE_DATE}
       </if>
       <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
       AND B.DIV_CODE    = #{DIV_CODE}
       </if>
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE1)">  
       AND B.DEPT_CODE  &gt;= #{DEPT_CODE1}
       </if>
       <if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">  
       AND B.DEPT_CODE  &lt;= #{DEPT_CODE2}
       </if>
       <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
       AND A.PERSON_NUMB  = #{PERSON_NUMB}
       </if>
      ORDER BY B.DIV_CODE, B.DEPT_CODE,B.POST_CODE, B.NAME, A.PERSON_NUMB
    </select>
    
    
    <select id="s_hrt705skr_sdServiceImpl.selectList2" parameterType="rMap" resultType="rMap">
    --s_hrt705skr_sdServiceImpl.selectList2
    BEGIN
    
	    SET NOCOUNT ON
	    SET ARITHABORT ON
	    
	    DECLARE @BASE_DATE	NVARCHAR(08)
			  , @BASE_YEAR	NVARCHAR(04)
	
			SET @BASE_DATE = #{BASE_DATE}
    		SET @BASE_YEAR = LEFT(#{BASE_DATE}, 4)
	
	
	   SELECT M1.COMP_CODE
			, M1.DIV_CODE
			, M1.DEPT_NAME
			, M1.POST_CODE
			, M1.NAME
			, M1.PERSON_NUMB
			, M1.RETR_TYPE
			, MIN(M1.FIRST_RETR_MONTH)		AS FIRST_RETR_MONTH
			, MAX(M1.LAST_RETR_MONTH)		AS LAST_RETR_MONTH
			, MAX(M1.QUATER_TYPE)			AS QUATER_TYPE
	
			, MAX(M1.DUTY_YYYY)				AS DUTY_YYYY
			, SUM(M1.PAY_TOTAL_I)			AS PAY_TOTAL_I
			, SUM(M1.BONUS_TOTAL_I)			AS BONUS_TOTAL_I
			, SUM(M1.YEAR_TOTAL_I)			AS YEAR_TOTAL_I
	
			, SUM(M1.ORI_RETR_ANNU_I)		AS ORI_RETR_ANNU_I
			, SUM(M1.QUAT_RETR_ANNU_I)		AS QUAT_RETR_ANNU_I
			, SUM(M1.PRE_QUAT_RETR_ANNU_I) 	AS PRE_QUAT_RETR_ANNU_I
	
	
		FROM (                
				SELECT A.COMP_CODE
						, B.DIV_CODE                --사업장
						, B.DEPT_NAME               --부서
						, B.POST_CODE               --직위
						, B.NAME                    --사명
						, A.PERSON_NUMB             --사번
						, A.RETR_TYPE               --구분
						--, A.SUPP_DATE             --지급일
	        
						, MIN(A.JOIN_DATE) AS FIRST_RETR_MONTH	--정산시작일
						, MAX(A.RETR_DATE) AS LAST_RETR_MONTH	--정산일
				 
			             <if test="rdoSelect == &quot;1&quot;">
			             , '1분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;2&quot;">
			             , '2분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;3&quot;">
			             , '3분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;4&quot;">
			             , '4분기' AS  QUATER_TYPE  --정산분기
			             </if>
	             
						, MAX(RIGHT('00' + CONVERT(NVARCHAR, A.DUTY_YYYY ), 2) 
						+ '년 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_MONTH ), 2)
						+ '월 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_DAY ), 2)) 
						+ '일'															AS DUTY_YYYY			--근속기간
	
						, 0									AS PAY_TOTAL_I		--급여총액
						, 0									AS BONUS_TOTAL_I	--상여총액
						, 0									AS YEAR_TOTAL_I	    --년월차종액
	                     
						, SUM(ISNULL(A.ORI_RETR_ANNU_I, 0))	AS ORI_RETR_ANNU_I		--퇴직금
						, 0									AS QUAT_RETR_ANNU_I		--전분기퇴직금
						, 0									AS PRE_QUAT_RETR_ANNU_I	--전분기차이금액
	              
	        
					FROM      HRT500T A WITH(NOLOCK)
					INNER JOIN HUM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
													AND B.PERSON_NUMB = A.PERSON_NUMB
	                                          		               
					WHERE A.COMP_CODE            = #{S_COMP_CODE}
					  AND A.RETR_PENSION_KIND    = 'DC'
					  AND LEFT(A.RETR_DATE, 4) &lt; @BASE_YEAR
		          	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		           		AND B.DIV_CODE    = #{DIV_CODE}
		          	</if>
		           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE1)">  
		           		AND B.DEPT_CODE  &gt;= #{DEPT_CODE1}
		           	</if>
		           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">  
		           		AND B.DEPT_CODE  &lt;= #{DEPT_CODE2}
		           	</if>
		           	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		           		AND A.PERSON_NUMB  = #{PERSON_NUMB}
		           	</if>
					  
					GROUP BY A.COMP_CODE, B.DIV_CODE, B.DEPT_NAME, B.POST_CODE, B.NAME, A.PERSON_NUMB, A.RETR_TYPE
	
	
				UNION ALL
	
	
				SELECT A.COMP_CODE
						, B.DIV_CODE                --사업장
						, B.DEPT_NAME               --부서
						, B.POST_CODE               --직위
						, B.NAME                    --사명
						, A.PERSON_NUMB             --사번
						, A.RETR_TYPE               --구분
						--, A.SUPP_DATE             --지급일
	        
						, MIN(A.JOIN_DATE) AS FIRST_RETR_MONTH	--정산시작일
						, MAX(A.RETR_DATE) AS LAST_RETR_MONTH	--정산일
				 
			             <if test="rdoSelect == &quot;1&quot;">
			             , '1분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;2&quot;">
			             , '2분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;3&quot;">
			             , '3분기' AS  QUATER_TYPE  --정산분기
			             </if>
			             
			             <if test="rdoSelect == &quot;4&quot;">
			             , '4분기' AS  QUATER_TYPE  --정산분기
			             </if>
	             
						, MAX(RIGHT('00' + CONVERT(NVARCHAR, A.DUTY_YYYY ), 2) 
						+ '년 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_MONTH ), 2)
						+ '월 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_DAY ), 2)) 
						+ '일'															AS DUTY_YYYY			--근속기간
	             
						, ISNULL(A.PAY_TOTAL_I, 0)										AS PAY_TOTAL_I			--급여총액
						, ISNULL(A.BONUS_TOTAL_I, 0)									AS BONUS_TOTAL_I		--상여총액
						, ISNULL(A.YEAR_TOTAL_I, 0)										AS YEAR_TOTAL_I			--년월차종액
	
						, SUM(A.ORI_RETR_ANNU_I)										AS ORI_RETR_ANNU_I		--퇴직금
						
			             <if test="rdoSelect == &quot;1&quot;">
						, 0                                 							AS QUAT_RETR_ANNU_I		--전분기퇴직금
						, 0																AS PRE_QUAT_RETR_ANNU_I	--전분기차이금액
			             </if>
			             
			             <if test="rdoSelect != &quot;1&quot;">
						, ISNULL(C.ORI_RETR_ANNU_I, 0)                                 	AS QUAT_RETR_ANNU_I		--전분기퇴직금
						, SUM(A.ORI_RETR_ANNU_I) -ISNULL(C.ORI_RETR_ANNU_I, 0)			AS PRE_QUAT_RETR_ANNU_I	--전분기차이금액
			             </if>
	        
					 FROM      HRT500T A WITH(NOLOCK)
					INNER JOIN HUM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
												     AND B.PERSON_NUMB = A.PERSON_NUMB
												     
												     
		             <if test="rdoSelect == &quot;1&quot;">
  					  
		             </if>
		             
		             <if test="rdoSelect == &quot;2&quot;">
						LEFT JOIN (
								   SELECT A.COMP_CODE
										, A.PERSON_NUMB
										, A.RETR_PENSION_KIND
										, A.RETR_TYPE
										, A.ORI_RETR_ANNU_I
									FROM HRT500T A WITH(NOLOCK)
									WHERE A.COMP_CODE         = #{S_COMP_CODE}
									  AND A.RETR_PENSION_KIND = 'DC'
									  AND A.RETR_DATE = (SELECT MAX(RETR_DATE) AS RETR_DATE
														   FROM HRT500T WITH(NOLOCK)
											  			  WHERE COMP_CODE   = A.COMP_CODE
											  				AND PERSON_NUMB = A.PERSON_NUMB
											  				AND RETR_TYPE   = A.RETR_TYPE
											  				AND RETR_PENSION_KIND = A.RETR_PENSION_KIND
											  				AND LEFT(RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
											  				AND LEFT(RETR_DATE, 6) &lt;= @BASE_YEAR + '03'
													     )
								) C ON C.COMP_CODE   = A.COMP_CODE
								   AND C.PERSON_NUMB = A.PERSON_NUMB
								   AND C.RETR_TYPE   = A.RETR_TYPE
								   AND C.RETR_PENSION_KIND = A.RETR_PENSION_KIND
		             </if>
		             
		             <if test="rdoSelect == &quot;3&quot;">
						LEFT JOIN (
								   SELECT A.COMP_CODE
										, A.PERSON_NUMB
										, A.RETR_PENSION_KIND
										, A.RETR_TYPE
										, A.ORI_RETR_ANNU_I
									FROM HRT500T A WITH(NOLOCK)
									WHERE A.COMP_CODE         = #{S_COMP_CODE}
									  AND A.RETR_PENSION_KIND = 'DC'
									  AND A.RETR_DATE = (SELECT MAX(RETR_DATE) AS RETR_DATE
														   FROM HRT500T WITH(NOLOCK)
											  			  WHERE COMP_CODE   = A.COMP_CODE
											  				AND PERSON_NUMB = A.PERSON_NUMB
											  				AND RETR_TYPE   = A.RETR_TYPE
											  				AND RETR_PENSION_KIND = A.RETR_PENSION_KIND
											  				AND LEFT(RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
											  				AND LEFT(RETR_DATE, 6) &lt;= @BASE_YEAR + '06'
													     )
								) C ON C.COMP_CODE   = A.COMP_CODE
								   AND C.PERSON_NUMB = A.PERSON_NUMB
								   AND C.RETR_TYPE   = A.RETR_TYPE
								   AND C.RETR_PENSION_KIND = A.RETR_PENSION_KIND
		             </if>
		             
		             <if test="rdoSelect == &quot;4&quot;">
						LEFT JOIN (
								   SELECT A.COMP_CODE
										, A.PERSON_NUMB
										, A.RETR_PENSION_KIND
										, A.RETR_TYPE
										, A.ORI_RETR_ANNU_I
									FROM HRT500T A WITH(NOLOCK)
									WHERE A.COMP_CODE         = #{S_COMP_CODE}
									  AND A.RETR_PENSION_KIND = 'DC'
									  AND A.RETR_DATE = (SELECT MAX(RETR_DATE) AS RETR_DATE
														   FROM HRT500T WITH(NOLOCK)
											  			  WHERE COMP_CODE   = A.COMP_CODE
											  				AND PERSON_NUMB = A.PERSON_NUMB
											  				AND RETR_TYPE   = A.RETR_TYPE
											  				AND RETR_PENSION_KIND = A.RETR_PENSION_KIND
											  				AND LEFT(RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
											  				AND LEFT(RETR_DATE, 6) &lt;= @BASE_YEAR + '09'
													     )
								) C ON C.COMP_CODE   = A.COMP_CODE
								   AND C.PERSON_NUMB = A.PERSON_NUMB
								   AND C.RETR_TYPE   = A.RETR_TYPE
								   AND C.RETR_PENSION_KIND = A.RETR_PENSION_KIND
		             </if>
	
	
         		               
					WHERE A.COMP_CODE           = #{S_COMP_CODE}
					  AND A.RETR_PENSION_KIND   = 'DC'
					  
  			             <if test="rdoSelect == &quot;1&quot;">
	  					  AND LEFT(A.RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
						  AND LEFT(A.RETR_DATE, 6) &lt;= @BASE_YEAR + '03'
			             </if>
			             
			             <if test="rdoSelect == &quot;2&quot;">
		  				  AND LEFT(A.RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
						  AND LEFT(A.RETR_DATE, 6) &lt;= @BASE_YEAR + '06'
			             </if>
			             
			             <if test="rdoSelect == &quot;3&quot;">
		  				  AND LEFT(A.RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
						  AND LEFT(A.RETR_DATE, 6) &lt;= @BASE_YEAR + '09'
			             </if>
			             
			             <if test="rdoSelect == &quot;4&quot;">
		  				  AND LEFT(A.RETR_DATE, 6) &gt;= @BASE_YEAR + '01'
						  AND LEFT(A.RETR_DATE, 6) &lt;= @BASE_YEAR + '12'
			             </if>
					  

		          	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		           		AND B.DIV_CODE    = #{DIV_CODE}
		          	</if>
		           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE1)">  
		           		AND B.DEPT_CODE  &gt;= #{DEPT_CODE1}
		           	</if>
		           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">  
		           		AND B.DEPT_CODE  &lt;= #{DEPT_CODE2}
		           	</if>
		           	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
		           		AND A.PERSON_NUMB  = #{PERSON_NUMB}
		           	</if>

	           
			 		GROUP BY A.COMP_CODE, B.DIV_CODE, B.DEPT_NAME, B.POST_CODE, B.NAME, A.PERSON_NUMB, A.RETR_TYPE
						, A.PAY_TOTAL_I, A.BONUS_TOTAL_I,A.YEAR_TOTAL_I
						<if test="rdoSelect != &quot;1&quot;">
						, C.ORI_RETR_ANNU_I
						</if>
			) M1
	        
			GROUP BY M1.COMP_CODE, M1.DIV_CODE, M1.DEPT_NAME, M1.POST_CODE, M1.NAME, M1.PERSON_NUMB, M1.RETR_TYPE
			ORDER BY DIV_CODE, DEPT_NAME,POST_CODE, PERSON_NUMB
	
			SET NOCOUNT OFF
			SET ARITHABORT OFF
	    
	END 
    </select>
    
    
    <select id="s_hrt705skr_sdServiceImpl.selectList3" parameterType="rMap" resultType="rMap">
    --s_hrt705skr_sdServiceImpl.selectList3
    BEGIN
    
    	SET NOCOUNT ON
    	SET ARITHABORT ON
    
    	DECLARE @BASE_YEAR	NVARCHAR(04)
        
    		SET @BASE_YEAR = LEFT(#{BASE_DATE}, 4)
        
		SELECT COMP_CODE
		     , DIV_CODE
			 , DEPT_NAME
			 , POST_CODE
			 , NAME
			 , PERSON_NUMB
			 , RETR_TYPE
			 , MIN(FIRST_RETR_MONTH) AS FIRST_RETR_MONTH
			 , MAX(LAST_RETR_MONTH) AS LAST_RETR_MONTH
			 , MAX(DUTY_YYYY) AS DUTY_YYYY
			 , SUM(PAY_TOTAL_I) AS PAY_TOTAL_I
			 , SUM(BONUS_TOTAL_I) AS BONUS_TOTAL_I
			 , SUM(YEAR_TOTAL_I) AS YEAR_TOTAL_I
			 , SUM(ORI_RETR_ANNU_I) AS ORI_RETR_ANNU_I
			 , SUM(PRE_RETR_ANNU_I) AS PRE_RETR_ANNU_I
			 --, ABS(SUM(PRE_RETR_ANNU_I) - SUM(PRE_DIFF_RETR_ANNU_I)) AS PRE_DIFF_RETR_ANNU_I
 			 , CASE WHEN ISNULL(SUM(PRE_RETR_ANNU_I), 0) = 0
			        THEN 0
					ELSE ABS(SUM(PRE_RETR_ANNU_I) - SUM(PRE_DIFF_RETR_ANNU_I))
				END AS PRE_DIFF_RETR_ANNU_I
		  FROM  (
		
		   
					SELECT A.COMP_CODE
							, B.DIV_CODE                --사업장
							, B.DEPT_NAME               --부서
							, B.POST_CODE               --직위
							, B.NAME                    --사명
							, A.PERSON_NUMB             --사번
							, A.RETR_TYPE               --구분
							--, A.SUPP_DATE             --지급일
	        
							, MIN(A.JOIN_DATE) AS FIRST_RETR_MONTH	--정산시작일
							, MAX(A.RETR_DATE) AS LAST_RETR_MONTH	--정산일
				 
	             
						    , MAX(RIGHT('00' + CONVERT(NVARCHAR, A.DUTY_YYYY ), 2) 
						    + '년 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_MONTH ), 2)
						    + '월 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_DAY ), 2)) 
						    + '일'								AS DUTY_YYYY
	
							, 0									AS PAY_TOTAL_I		--급여총액
							, 0									AS BONUS_TOTAL_I	--상여총액
							, 0									AS YEAR_TOTAL_I	    --년월차종액
	                     
							, SUM(ISNULL(A.ORI_RETR_ANNU_I, 0))	AS ORI_RETR_ANNU_I		--퇴직금
							, ISNULL(C.ORI_RETR_ANNU_I, 0)		AS PRE_RETR_ANNU_I		--전분기퇴직금
							, 0									AS PRE_DIFF_RETR_ANNU_I	--전분기차이금액
	              
	        
						 FROM      HRT500T A WITH(NOLOCK)
						INNER JOIN HUM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
														 AND B.PERSON_NUMB = A.PERSON_NUMB

						LEFT JOIN	(
										SELECT COMP_CODE
											 , ORI_RETR_ANNU_I
											 , RETR_DATE
											 , PERSON_NUMB
										  FROM HRT500T WITH(NOLOCK)
										 WHERE COMP_CODE         = #{S_COMP_CODE}
										   AND RETR_PENSION_KIND = 'DB'
										   AND RETR_DATE         = (SELECT MAX(RETR_DATE)
														         	  FROM HRT500T A WITH(NOLOCK)
														         	 WHERE COMP_CODE         = A.COMP_CODE
														         	   AND RETR_PENSION_KIND = A.RETR_PENSION_KIND
														         	   AND RETR_DATE         &lt;= (SELECT MAX(RETR_DATE) AS RETR_DATE
														         						             FROM HRT500T WITH(NOLOCK)
											  			         						            WHERE COMP_CODE          = #{S_COMP_CODE}
											  			         						              AND LEFT(RETR_DATE, 4) &lt; @BASE_YEAR
											  			         						              AND PERSON_NUMB        = A.PERSON_NUMB
											  			         						              AND RETR_PENSION_KIND  = 'DB')
																	)
                                  
									) C ON C.COMP_CODE = A.COMP_CODE
									   AND C.PERSON_NUMB = A.PERSON_NUMB
								   
	                                          		               
						WHERE A.COMP_CODE            = #{S_COMP_CODE}
						  AND A.RETR_PENSION_KIND    = 'DB'
	  		          	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
			           		AND B.DIV_CODE    = #{DIV_CODE}
			          	</if>
			           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE1)">  
			           		AND B.DEPT_CODE  &gt;= #{DEPT_CODE1}
			           	</if>
			           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">  
			           		AND B.DEPT_CODE  &lt;= #{DEPT_CODE2}
			           	</if>
			           	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			           		AND A.PERSON_NUMB  = #{PERSON_NUMB}
			           	</if>
						  AND LEFT(A.RETR_DATE, 4)   &lt;= (
														SELECT MAX(LEFT(RETR_DATE, 4))
														  FROM HRT500T WITH(NOLOCK)
														 WHERE COMP_CODE         = #{S_COMP_CODE}
														   AND LEFT(RETR_DATE, 4) &lt; @BASE_YEAR
														   AND RETR_PENSION_KIND = 'DB'
														   AND PERSON_NUMB       = A.PERSON_NUMB
													  )

						GROUP BY A.COMP_CODE, B.DIV_CODE, B.DEPT_NAME, B.POST_CODE, B.NAME, A.PERSON_NUMB, A.RETR_TYPE
						, C.ORI_RETR_ANNU_I


					UNION ALL

					SELECT A.COMP_CODE
							, B.DIV_CODE                --사업장
							, B.DEPT_NAME               --부서
							, B.POST_CODE               --직위
							, B.NAME                    --사명
							, A.PERSON_NUMB             --사번
							, A.RETR_TYPE               --구분
							--, A.SUPP_DATE             --지급일
	        
							, MIN(A.JOIN_DATE) AS FIRST_RETR_MONTH	--정산시작일
							, MAX(A.RETR_DATE) AS LAST_RETR_MONTH	--정산일
				 	             
						    , MAX(RIGHT('00' + CONVERT(NVARCHAR, A.DUTY_YYYY ), 2) 
						    + '년 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_MONTH ), 2)
						    + '월 ' + RIGHT('00' + CONVERT(NVARCHAR, A.LONG_DAY ), 2)) 
						    + '일'														AS DUTY_YYYY
	
							, ISNULL(A.PAY_TOTAL_I, 0)									AS PAY_TOTAL_I		--급여총액
							, ISNULL(A.BONUS_TOTAL_I, 0)								AS BONUS_TOTAL_I	--상여총액
							, ISNULL(A.YEAR_TOTAL_I, 0)									AS YEAR_TOTAL_I	    --년월차종액
	                     
							, ISNULL(A.ORI_RETR_ANNU_I, 0)								AS ORI_RETR_ANNU_I		--퇴직금
							, 0															AS PRE_RETR_ANNU_I		--전분기퇴직금
							, ISNULL(A.ORI_RETR_ANNU_I, 0)								AS PRE_DIFF_RETR_ANNU_I	--전분기차이금액
	              
						 FROM      HRT500T A WITH(NOLOCK)
						INNER JOIN HUM100T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
														 AND B.PERSON_NUMB = A.PERSON_NUMB
	                                          		               
						WHERE A.COMP_CODE            = #{S_COMP_CODE}
						  AND A.RETR_PENSION_KIND    = 'DB'
	  		          	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
			           		AND B.DIV_CODE    = #{DIV_CODE}
			          	</if>
			           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE1)">  
			           		AND B.DEPT_CODE  &gt;= #{DEPT_CODE1}
			           	</if>
			           	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE2)">  
			           		AND B.DEPT_CODE  &lt;= #{DEPT_CODE2}
			           	</if>
			           	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">  
			           		AND A.PERSON_NUMB  = #{PERSON_NUMB}
			           	</if>
						  AND LEFT(A.RETR_DATE, 4)   = (
														SELECT MAX(LEFT(RETR_DATE, 4))
														  FROM HRT500T WITH(NOLOCK)
														 WHERE COMP_CODE          = #{S_COMP_CODE}
														   AND LEFT(RETR_DATE, 4) = @BASE_YEAR
														   AND RETR_PENSION_KIND  = 'DB'
														   AND PERSON_NUMB        = A.PERSON_NUMB
													   )

						GROUP BY A.COMP_CODE, B.DIV_CODE, B.DEPT_NAME, B.POST_CODE, B.NAME, A.PERSON_NUMB, A.RETR_TYPE
							  , PAY_TOTAL_I, BONUS_TOTAL_I, YEAR_TOTAL_I
							  , A.ORI_RETR_ANNU_I

			) X

			GROUP BY COMP_CODE, DIV_CODE, DEPT_NAME, POST_CODE, NAME, PERSON_NUMB, RETR_TYPE
      
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    
    END 
    </select>
    
    
    <select id="s_hrt705skr_sdServiceImpl.selectSub1" parameterType="rMap" resultType="rMap">
        --s_hrt705skr_sdServiceImpl.selectSub1
        SELECT uniLITE.fnGetUserDateComp(H.COMP_CODE, H.PAY_YYYYMM) AS PAY_YYYYMM
             , (SELECT WAGES_NAME                                  
                  FROM HBS300T                                     
                 WHERE CODE_TYPE = '1'                             
                   AND COMP_CODE = H.COMP_CODE                     
                   AND WAGES_CODE = H.WAGES_CODE) AS WAGES_NAME    
             , AMOUNT_I                                            
          FROM HRT300T H                                           
         WHERE H.COMP_CODE   = #{S_COMP_CODE}
         

         <if test="@foren.Ognl@isNotEmpty(RETR_TYPE)">                
           AND H.RETR_TYPE   = #{RETR_TYPE} 
         </if>    
         <if test="@foren.Ognl@isNotEmpty(RETR_DATE)">              
           AND H.RETR_DATE   = replace(substring(#{RETR_DATE},1,10), '-','')               
         </if>

           AND H.PERSON_NUMB = #{PERSON_NUMB}                 
         ORDER BY PAY_YYYYMM ASC 
    </select>
    
    <select id="s_hrt705skr_sdServiceImpl.selectSub2" parameterType="rMap" resultType="rMap">
        --s_hrt705skr_sdServiceImpl.selectSub2
        SELECT uniLITE.fnGetUserDateComp(A.COMP_CODE, A.BONUS_YYYYMM) AS BONUS_YYYYMM
             , (SELECT CODE_NAME                                   
                  FROM BSA100T                                     
                 WHERE MAIN_CODE = 'H032'                          
                   AND COMP_CODE = A.COMP_CODE                     
                   AND SUB_CODE  = A.BONUS_TYPE) AS BONUS_TYPE     
             , BONUS_I                                             
          FROM HRT400T A                                           
         WHERE COMP_CODE  = #{S_COMP_CODE} 
         <if test="@foren.Ognl@isNotEmpty(RETR_TYPE)">                
           AND A.RETR_TYPE   = #{RETR_TYPE} 
         </if>                    
          AND BONUS_TYPE  NOT IN ('1','E','F','G')                          
          AND PERSON_NUMB = #{PERSON_NUMB}
         ORDER BY BONUS_YYYYMM ASC    
    </select>
    
    <select id="s_hrt705skr_sdServiceImpl.selectSub3" parameterType="rMap" resultType="rMap">
        --s_hrt705skr_sdServiceImpl.selectSub3
        SELECT uniLITE.fnGetUserDateComp(A.COMP_CODE, A.BONUS_YYYYMM) AS BONUS_YYYYMM
             , (SELECT CODE_NAME                                   
                  FROM BSA100T                                     
                 WHERE MAIN_CODE = 'H032'                          
                   AND COMP_CODE = A.COMP_CODE                     
                   AND SUB_CODE = BONUS_TYPE) AS BONUS_TYPE        
             , BONUS_I                                             
          FROM HRT400T A                                           
         WHERE COMP_CODE = #{S_COMP_CODE}
         <if test="@foren.Ognl@isNotEmpty(RETR_TYPE)">                
           AND A.RETR_TYPE   = #{RETR_TYPE} 
         </if>                       
           AND BONUS_TYPE IN ('E','F','G')                                             
           AND PERSON_NUMB = #{PERSON_NUMB}               
         ORDER BY BONUS_YYYYMM ASC        
    </select>
    
    <select id="s_hrt705skr_sdServiceImpl.selectSub4" parameterType="rMap" resultType="rMap">
        --s_hrt705skr_sdServiceImpl.selectSub4
        SELECT uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
             , B.WEL_NAME
             , A.GIVE_I
          FROM HRT350T A INNER JOIN HWE100T B
                            ON A.COMP_CODE = B.COMP_CODE 
                           AND A.APPLY_YYMM = B.APPLY_YYMM
                           AND A.WEL_LEVEL1 = B.WEL_LEVEL1
                           AND A.WEL_LEVEL2 = B.WEL_LEVEL2
                           AND A.WEL_CODE   = B.WEL_CODE
         WHERE A.COMP_CODE   = #{S_COMP_CODE}
         <if test="@foren.Ognl@isNotEmpty(RETR_TYPE)">                
           AND A.RETR_TYPE   = #{RETR_TYPE} 
         </if>        
           AND A.PERSON_NUMB = #{PERSON_NUMB}   
         ORDER BY PAY_YYYYMM ASC   
    </select>
    
    
     <!-- Excel Upload-->
    <update id="s_hrt705skr_sdServiceImpl.insertExcelUpload1" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertExcelUpload1 */
        /* temp Table에 insert */    
        INSERT INTO L_HRT500T
            (
               _EXCEL_JOBID 
             , _EXCEL_ROWNUM 
             , _EXCEL_HAS_ERROR 
             , _EXCEL_ERROR_MSG
             
             , COMP_CODE
             , RETR_DATE
             , RETR_TYPE
             , PERSON_NUMB
             , RETR_RESN
             , RETR_PENSION_KIND
             , JOIN_DATE
                          
             , DUTY_YYYY
             , LONG_MONTH
             , LONG_DAY
             , PAY_TOTAL_I
             , BONUS_TOTAL_I
             , YEAR_TOTAL_I
             , TOT_WAGES_I
             , AVG_WAGES_I
             , ORI_RETR_ANNU_I
             
             , INSERT_DB_USER
             , INSERT_DB_TIME
        )
        VALUES (
               #{_EXCEL_JOBID} 
             , #{_EXCEL_ROWNUM} 
             , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR} 
             , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
                  
             , #{S_COMP_CODE}
             , #{RETR_DATE}
             , #{RETR_TYPE}
             , #{PERSON_NUMB}
             , #{RETR_RESN}
             , #{RETR_PENSION_KIND}
             , #{JOIN_DATE}
             
              
             , #{DUTY_YYYY}
             , #{LONG_MONTH}
             , #{LONG_DAY}
             , #{PAY_TOTAL_I}
             , #{BONUS_TOTAL_I}
             , #{YEAR_TOTAL_I}
             , #{TOT_WAGES_I}
             , #{AVG_WAGES_I}
             , #{ORI_RETR_ANNU_I}
             
             , #{S_USER_ID}
             , GETDATE()
        )
    </update>
     
    <update id="s_hrt705skr_sdServiceImpl.insertExcelUpload2" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertExcelUpload2 */
        /* temp Table에 insert */    
        INSERT INTO L_HRT501T_EXCEL
            (
               _EXCEL_JOBID 
             , _EXCEL_ROWNUM 
             , _EXCEL_HAS_ERROR 
             , _EXCEL_ERROR_MSG
             
             , COMP_CODE
             , RETR_TYPE
             , PERSON_NUMB
             , RETR_DATE
             
             , BONUS_TYPE
             , PAY_STRT_DATE
             , PAY_LAST_DATE
             , AMOUNT_I
             , WAGES_DAY
             
             , INSERT_DB_USER
             , INSERT_DB_TIME
        )
        VALUES (
               #{_EXCEL_JOBID} 
             , #{_EXCEL_ROWNUM} 
             , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR} 
             , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
                  
             , #{S_COMP_CODE}
             , #{RETR_TYPE}
             , #{PERSON_NUMB}
             , #{RETR_DATE}
              
             , #{BONUS_TYPE}
             , #{PAY_STRT_DATE}
             , #{PAY_LAST_DATE}
             , #{AMOUNT_I}
             , #{WAGES_DAY}
             
             , #{S_USER_ID}
             , GETDATE()
        )
    </update>
    
    
 	<select id="s_hrt705skr_sdServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
        /* s_hrt705skr_sdServiceImpl.selectExcelUploadSheet1 */
        SELECT A._EXCEL_JOBID
             , A._EXCEL_ROWNUM
             , A._EXCEL_HAS_ERROR      
             , A._EXCEL_ERROR_MSG
                     
             , A.COMP_CODE
             , B.DIV_CODE                --사업장
             , B.DEPT_NAME               --부서
             , B.POST_CODE               --직위
             , B.NAME                    --사명
             , A.PERSON_NUMB             --사번
             , A.RETR_TYPE               --구분
             , B.JOIN_DATE AS ENTR_DATE  --입사일
             , A.JOIN_DATE               --정산시작일
             
             , A.RETR_DATE               --정산일
             , A.RETR_PENSION_KIND       --퇴직연금가입구분

			 , A.DUTY_YYYY				 --근속년
			 , A.LONG_MONTH				 --근속월
			 , A.LONG_DAY				 --근속일

			 , A.PAY_TOTAL_I			 --급여총액
			 , A.BONUS_TOTAL_I			 --상여총액
			 , A.YEAR_TOTAL_I			 --년월차총액
			 , A.TOT_WAGES_I			 --합계

			 , A.AVG_WAGES_I			 --급여평균임금
			 , A.ORI_RETR_ANNU_I		 --퇴직금
                                 
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
        
          FROM       L_HRT500T A WITH(NOLOCK)          
          LEFT JOIN  HUM100T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                            AND B.PERSON_NUMB = A.PERSON_NUMB
          LEFT JOIN  HRT500T C WITH(NOLOCK) ON C.COMP_CODE    = A.COMP_CODE
                                            AND C.PERSON_NUMB = A.PERSON_NUMB
                                            AND C.RETR_DATE   = A.RETR_DATE
                                            AND C.RETR_TYPE   = A.RETR_TYPE
         WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
         ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>
    
    
    <select id="s_hrt705skr_sdServiceImpl.selectExcelUploadSheet2" parameterType="Map" resultType="rMap">
        /* s_hrt705skr_sdServiceImpl.selectExcelUploadSheet2 */
        SELECT A._EXCEL_JOBID
             , A._EXCEL_ROWNUM
             , A._EXCEL_HAS_ERROR      
             , A._EXCEL_ERROR_MSG
                     
             , A.COMP_CODE
             , B.DIV_CODE                --사업장
             , B.DEPT_NAME               --부서
             , B.POST_CODE               --직위
             , B.NAME                    --사명
             , A.PERSON_NUMB             --사번
             , A.RETR_TYPE               --구분
             , A.RETR_DATE               --정산일
             , A.BONUS_TYPE              --급상여구분
             , A.PAY_STRT_DATE           --급여시작년월일
             , A.PAY_LAST_DATE           --급여종료년월일
             , A.AMOUNT_I                --급여금액
             , A.WAGES_DAY               --일수
             
             , B.JOIN_DATE AS ENTR_DATE  --입사일
             , CASE WHEN ISNULL(C.JOIN_DATE, '') = ''
                    THEN B.JOIN_DATE
                    ELSE C.JOIN_DATE
                 END                  AS JOIN_DATE
             , C.RETR_DATE               --정산일
             --, C.SUPP_DATE             --지급일
        
   
             
             , ISNULL(C.DUTY_YYYY, 0)  AS DUTY_YYYY               --근속기간
             , ISNULL(C.LONG_MONTH, 0) AS LONG_MONTH               --근속기간
             , ISNULL(C.LONG_DAY, 0)   AS LONG_DAY               --근속기간
             
             
             , AA.PAY_TOTAL_I             --급여총액
             , AA.BONUS_TOTAL_I           --상여총액
             , AA.YEAR_TOTAL_I            --년월차종액
             , (AA.PAY_TOTAL_I + AA.BONUS_TOTAL_I + AA.YEAR_TOTAL_I ) AS TOT_WAGES_I             --합계
             , (AA.PAY_TOTAL_I + AA.BONUS_TOTAL_I + AA.YEAR_TOTAL_I ) / 3 AS AVG_WAGES_I             --평균임금
             , C.ORI_RETR_ANNU_I         --퇴직금
                                 
             , A.INSERT_DB_USER
             , A.INSERT_DB_TIME
        
          FROM       L_HRT501T_EXCEL A WITH(NOLOCK)
          LEFT JOIN ( SELECT COMP_CODE
                            , RETR_TYPE
                            , PERSON_NUMB 
                            , SUM(CASE WHEN BONUS_TYPE = '급여' THEN AMOUNT_I ELSE 0 END) AS PAY_TOTAL_I
                            , SUM(CASE WHEN BONUS_TYPE = '상여' THEN AMOUNT_I ELSE 0 END) AS BONUS_TOTAL_I
                            , SUM(CASE WHEN BONUS_TYPE = '연차' THEN AMOUNT_I ELSE 0 END) AS YEAR_TOTAL_I
            FROM L_HRT501T_EXCEL
            WHERE _EXCEL_JOBID = #{_EXCEL_JOBID} 
            GROUP BY COMP_CODE, RETR_TYPE, PERSON_NUMB
          ) AA ON A.COMP_CODE = AA.COMP_CODE
          AND A.RETR_TYPE = AA.RETR_TYPE
          AND A.PERSON_NUMB = AA.PERSON_NUMB
          
          LEFT JOIN  HUM100T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                            AND B.PERSON_NUMB = A.PERSON_NUMB
          LEFT JOIN  HRT500T C WITH(NOLOCK) ON C.COMP_CODE    = A.COMP_CODE
                                            AND C.PERSON_NUMB = A.PERSON_NUMB
                                            AND C.RETR_DATE   = A.RETR_DATE
                                            AND C.RETR_TYPE   = A.RETR_TYPE
         WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
         ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>
    
    
    <!-- 임시 테이블에 insert된 데이터 조회 --> 
    <select id="s_hrt705skr_sdServiceImpl.getData1" parameterType="Map" resultType="rMap">
        SELECT  * FROM L_HRT500T WITH(NOLOCK)
         WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
    </select>
    
    <!-- 임시 테이블에 insert된 데이터 조회 --> 
    <select id="s_hrt705skr_sdServiceImpl.getData2" parameterType="Map" resultType="rMap">
        SELECT  * FROM L_HRT501T_EXCEL WITH(NOLOCK)
         WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
    </select>
    
    
    <!-- 에러메세지 insert -->   
    <update id="s_hrt705skr_sdServiceImpl.insertErrorMsg">
        /* s_hrt705skr_sdServiceImpl.insertErrorMsg */
        UPDATE L_HRT501T_EXCEL
           SET _EXCEL_ERROR_MSG = #{MSG}
             , _EXCEL_HAS_ERROR = 'Y'
         WHERE _EXCEL_JOBID     = #{_EXCEL_JOBID}
           AND _EXCEL_ROWNUM    = #{ROWNUM}
    </update>  
    <update id="s_hrt705skr_sdServiceImpl.insertList" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertList */
        
        --퇴직금연금관리 등록
		IF NOT EXISTS (
						SELECT PERSON_NUMB
						  FROM HRT900T
						 WHERE COMP_CODE          = #{S_COMP_CODE}
						   AND PERSON_NUMB        = #{PERSON_NUMB}
						   AND ANN_KIND           = #{RETR_PENSION_KIND}
						   AND SAVING_YEAR        = LEFT(#{RETR_DATE}, 4)
					  )
		BEGIN 
			INSERT INTO HRT900T
			( COMP_CODE
		    , PERSON_NUMB
			, ANN_KIND
			, SAVING_YEAR
			,INSERT_DB_USER
            ,INSERT_DB_TIME
            ,UPDATE_DB_USER
            ,UPDATE_DB_TIME
			)
			VALUES
			( #{S_COMP_CODE}
		    , #{PERSON_NUMB}
			, #{RETR_PENSION_KIND}
			, LEFT(#{RETR_DATE}, 4)
			, #{S_USER_ID}
            , GETDATE()
            , #{S_USER_ID}
            , GETDATE()
			)
		END 
		
        IF  NOT EXISTS (SELECT PERSON_NUMB
                        FROM HRT500T
                        WHERE COMP_CODE          = #{S_COMP_CODE}
                          AND RETR_DATE          = #{RETR_DATE}
                          AND RETR_TYPE          = 'S'
                          AND RETR_PENSION_KIND  = #{RETR_PENSION_KIND}
                          AND PERSON_NUMB        = #{PERSON_NUMB})
         BEGIN
            INSERT INTO HRT500T
                (
                 COMP_CODE
                ,RETR_DATE
                ,RETR_TYPE
                ,PERSON_NUMB
                ,RETR_RESN
                ,RETR_PENSION_KIND
                
                ,JOIN_DATE
                ,DUTY_YYYY
                ,LONG_MONTH
                ,LONG_DAY
                
                ,PAY_TOTAL_I
                ,BONUS_TOTAL_I
                ,YEAR_TOTAL_I
                ,TOT_WAGES_I
                ,AVG_WAGES_I
                ,ORI_RETR_ANNU_I
                
                ,INSERT_DB_USER
                ,INSERT_DB_TIME
                ,UPDATE_DB_USER
                ,UPDATE_DB_TIME
                
                ) VALUES
                (
                  'MASTER'
                 , #{RETR_DATE}
                 , 'S'
                 , #{PERSON_NUMB}
                 , '6'
                 , #{RETR_PENSION_KIND}
                 
                 , #{JOIN_DATE}
                 , #{DUTY_YYYY}
                 , #{LONG_MONTH}
                 , #{LONG_DAY}
                
                
                 , #{PAY_TOTAL_I}
                 , #{BONUS_TOTAL_I}
                 , #{YEAR_TOTAL_I}
                 , #{TOT_WAGES_I}
                 , #{AVG_WAGES_I}
                 , #{ORI_RETR_ANNU_I}
                 
                 , #{S_USER_ID}
                 , GETDATE()
                 , #{S_USER_ID}
                 , GETDATE()
                )
         END
       ELSE
        BEGIN 
           UPDATE HRT500T
             SET JOIN_DATE		  = #{JOIN_DATE}
                ,DUTY_YYYY        = #{DUTY_YYYY}
                ,LONG_MONTH       = #{LONG_MONTH}
                ,LONG_DAY         = #{LONG_DAY}
                
                ,PAY_TOTAL_I	   = #{PAY_TOTAL_I}
                ,BONUS_TOTAL_I	   = #{BONUS_TOTAL_I}	
                ,YEAR_TOTAL_I      = #{YEAR_TOTAL_I}
                ,TOT_WAGES_I       = #{TOT_WAGES_I}
                ,AVG_WAGES_I       = #{AVG_WAGES_I} 
                ,ORI_RETR_ANNU_I   = #{ORI_RETR_ANNU_I}
                ,UPDATE_DB_USER    = #{S_USER_ID}
                ,UPDATE_DB_TIME    = GETDATE()
              
           WHERE COMP_CODE         = #{S_COMP_CODE}
             AND RETR_DATE         = #{RETR_DATE}
             AND RETR_TYPE         = 'S'
             AND PERSON_NUMB       = #{PERSON_NUMB}
             AND RETR_PENSION_KIND = #{RETR_PENSION_KIND}
        END  
    </update>
    
    <insert id="s_hrt705skr_sdServiceImpl.insertAmount" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertAmount */
      IF  EXISTS (SELECT TOP 1 1
                    FROM HRT300T
                    WHERE COMP_CODE      = #{S_COMP_CODE}
                      AND RETR_DATE      = #{RETR_DATE}
                      AND RETR_TYPE      = 'S'
                      AND PERSON_NUMB    = #{PERSON_NUMB}
                      AND PAY_YYYYMM     = LEFT(#{PAY_LAST_DATE},6)
                      AND WAGES_CODE     = 'BSE')
        BEGIN 
           DELETE  HRT300T 
           WHERE  COMP_CODE   = #{S_COMP_CODE}
              AND RETR_DATE   = #{RETR_DATE}
              AND RETR_TYPE   = 'S'
              AND PERSON_NUMB = #{PERSON_NUMB}
              AND PAY_YYYYMM  = LEFT(#{PAY_LAST_DATE},6)
              AND WAGES_CODE  = 'BSE'
        END
        ELSE
            BEGIN
                INSERT INTO HRT300T
                (
                 COMP_CODE
                ,RETR_DATE
                ,RETR_TYPE
                ,PERSON_NUMB
                ,PAY_YYYYMM
                ,WAGES_CODE
                
                ,PAY_STRT_DATE
                ,PAY_LAST_DATE
                ,WAGES_DAY
                ,AMOUNT_I
                
                ,INSERT_DB_USER
                ,INSERT_DB_TIME
                ,UPDATE_DB_USER
                ,UPDATE_DB_TIME
                
                ) VALUES
                (
                  'MASTER'
                 , #{RETR_DATE}
                 , 'S'
                 , #{PERSON_NUMB}
                 , LEFT(#{PAY_LAST_DATE},6)
                 , 'BSE'
                
                 , #{PAY_STRT_DATE}
                 , #{PAY_LAST_DATE}
                 , #{WAGES_DAY}
                 , #{AMOUNT_I}
                 
                 , #{S_USER_ID}
                 , GETDATE()
                 , #{S_USER_ID}
                 , GETDATE()
                )
            END
    </insert>
    <insert id="s_hrt705skr_sdServiceImpl.insertYear" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertYear */
      IF  EXISTS (SELECT TOP 1 1
                    FROM HRT400T
                    WHERE COMP_CODE      = #{S_COMP_CODE}
                      AND RETR_DATE      = #{RETR_DATE}
                      AND RETR_TYPE      = 'S'
                      AND PERSON_NUMB    = #{PERSON_NUMB}
                      AND BONUS_YYYYMM   = LEFT(#{PAY_LAST_DATE},6)
                      AND BONUS_TYPE     = #{BONUS_TYPE})
        BEGIN 
           DELETE  HRT400T 
           WHERE  COMP_CODE    = #{S_COMP_CODE}
              AND RETR_DATE    = #{RETR_DATE}
              AND RETR_TYPE    = 'S'
              AND PERSON_NUMB  = #{PERSON_NUMB}
              AND BONUS_YYYYMM = LEFT(#{PAY_LAST_DATE},6)
              AND BONUS_TYPE   = #{BONUS_TYPE}
        END
        ELSE
            BEGIN
                INSERT INTO HRT400T
                (
                 COMP_CODE
                ,RETR_DATE
                ,RETR_TYPE
                ,PERSON_NUMB
                ,BONUS_YYYYMM
                ,BONUS_TYPE
                ,BONUS_I
                
                ,INSERT_DB_USER
                ,INSERT_DB_TIME
                ,UPDATE_DB_USER
                ,UPDATE_DB_TIME
                
                ) VALUES
                (
                  'MASTER'
                 , #{RETR_DATE}
                 , 'S'
                 , #{PERSON_NUMB}
                 , CASE WHEN ISNULL(#{PAY_LAST_DATE},'') = '' 
                        THEN '' 
                        ELSE LEFT( #{PAY_LAST_DATE},6)
                   END
                 , #{BONUS_TYPE}
                 , #{AMOUNT_I}
                
                 , #{S_USER_ID}
                 , GETDATE()
                 , #{S_USER_ID}
                 , GETDATE()
                )
            END
    </insert>
    <insert id="s_hrt705skr_sdServiceImpl.insertBonus" parameterType="Map">
        /* s_hrt705skr_sdServiceImpl.insertBonus */
    IF  EXISTS (SELECT TOP 1 1
                    FROM HRT400T
                    WHERE COMP_CODE      = #{S_COMP_CODE}
                      AND RETR_DATE      = #{RETR_DATE}
                      AND RETR_TYPE      = 'S'
                      AND PERSON_NUMB    = #{PERSON_NUMB}
                      AND BONUS_YYYYMM   = LEFT(#{PAY_LAST_DATE},6)
                      AND BONUS_TYPE     = #{BONUS_TYPE})
        BEGIN 
           DELETE  HRT400T 
           WHERE  COMP_CODE     = #{S_COMP_CODE}
              AND RETR_DATE     = #{RETR_DATE}
              AND RETR_TYPE     = 'S'
              AND PERSON_NUMB   = #{PERSON_NUMB}
              AND BONUS_YYYYMM  = LEFT(#{PAY_LAST_DATE},6)
              AND BONUS_TYPE    = #{BONUS_TYPE}
        END
        ELSE
            BEGIN
                INSERT INTO HRT400T
                (
                 COMP_CODE
                ,RETR_DATE
                ,RETR_TYPE
                ,PERSON_NUMB
                ,BONUS_YYYYMM
                ,BONUS_TYPE
                ,BONUS_I
                
                ,INSERT_DB_USER
                ,INSERT_DB_TIME
                ,UPDATE_DB_USER
                ,UPDATE_DB_TIME
                
                ) VALUES
                (
                  'MASTER'
                 , #{RETR_DATE}
                 , 'S'
                 , #{PERSON_NUMB}
                 , CASE WHEN ISNULL(#{PAY_LAST_DATE},'') = '' 
                        THEN '' 
                        ELSE LEFT( #{PAY_LAST_DATE},6)
                   END
                 , #{BONUS_TYPE}
                 , #{AMOUNT_I}
                
                 , #{S_USER_ID}
                 , GETDATE()
                 , #{S_USER_ID}
                 , GETDATE()
                )
            END
    </insert>
    
    
        
</mapper>
