<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cbm140ukrvServiceImpl">
	<select id="cbm140ukrvServiceImpl.selectList1" parameterType="Map" resultType="rMap">

		SELECT   DIV_CODE
		        , WORK_MONTH
				, COST_POOL_CODE
				, COST_POOL_NAME
				, ALLOCATION_CODE	
				, UPDATE_DB_TIME
				<foreach collection="ALLOCATION_COST_POOL_LIST" item="item" index="i" >
				, [${item}] AS ALLOCATION_COST_POOL_${item}
				</foreach> 
		FROM (
				SELECT	  A.DIV_CODE
						, ISNULL(B.WORK_MONTH, #{WORK_MONTH} ) AS WORK_MONTH
						, A.COST_POOL_CODE
						, A.COST_POOL_NAME
						, B.ALLOCATION_CODE	
						, C.ALLOCATION_COST_POOL
						, C.ALLOCATION_VALUE
						, B.UPDATE_DB_TIME
				FROM CBM700T A WITH (NOLOCK)
				LEFT JOIN CBM140T B WITH (NOLOCK)	 ON A.COMP_CODE = B.COMP_CODE
													AND A.DIV_CODE = B.DIV_CODE
													AND A.COST_POOL_CODE = B.COST_POOL_CODE
													AND B.WORK_MONTH = #{WORK_MONTH}
				LEFT JOIN CBM145T C  WITH (NOLOCK)	 ON A.COMP_CODE			= C.COMP_CODE
													AND A.DIV_CODE			= C.DIV_CODE
													AND B.WORK_MONTH		= C.WORK_MONTH
													AND A.COST_POOL_CODE	= C.COST_POOL_CODE
				WHERE A.COMP_CODE =#{S_COMP_CODE}
				  AND A.DIV_CODE = #{DIV_CODE}
				  AND A.ALLOCATION_YN = 'N'
				  AND A.USE_YN = 'Y'
		  ) as T01
			PIVOT (
			MAX(ALLOCATION_VALUE) 
			FOR ALLOCATION_COST_POOL IN 
				<foreach collection="ALLOCATION_COST_POOL_LIST" item="item"  separator="," close=")" open="(">
					   [${item}] 
				</foreach> 
		 ) as TP01
	</select>
	<select id="cbm140ukrvServiceImpl.selectCopy1" parameterType="Map" resultType="rMap">
		SELECT   DIV_CODE
		        , WORK_MONTH
				, COST_POOL_CODE
				, COST_POOL_NAME
				, ALLOCATION_CODE	
				<foreach collection="ALLOCATION_COST_POOL_LIST" item="item" index="i" >
				, [${item}] AS ALLOCATION_COST_POOL_${item}
				</foreach> 
		FROM (
				SELECT	  A.DIV_CODE
						, #{WORK_MONTH} AS WORK_MONTH
						, A.COST_POOL_CODE
						, B.COST_POOL_NAME
						, A.ALLOCATION_CODE	
						, C.ALLOCATION_COST_POOL
						, C.ALLOCATION_VALUE
				FROM CBM140T A WITH (NOLOCK)	
				INNER JOIN CBM700T B WITH(NOLOCK) ON  A.COMP_CODE = B.COMP_CODE
												 AND  A.DIV_CODE = B.DIV_CODE
												 AND  A.COST_POOL_CODE = B.COST_POOL_CODE
				LEFT JOIN CBM145T C  WITH (NOLOCK)	 ON A.COMP_CODE			= C.COMP_CODE
													AND A.DIV_CODE			= C.DIV_CODE
													AND A.WORK_MONTH		= C.WORK_MONTH
													AND A.COST_POOL_CODE	= C.COST_POOL_CODE
				WHERE A.COMP_CODE =#{S_COMP_CODE}
				  AND A.DIV_CODE = #{DIV_CODE}
				  AND A.WORK_MONTH = #{PREV_MONTH}
		  ) as T01
			PIVOT (
			MAX(ALLOCATION_VALUE) 
			FOR ALLOCATION_COST_POOL IN 
				<foreach collection="ALLOCATION_COST_POOL_LIST" item="item"  separator="," close=")" open="(">
					   [${item}] 
				</foreach> 
		 ) as TP01
	</select>
	<delete id="cbm140ukrvServiceImpl.deleteCopyDetail1" parameterType="Map">	
		--Cbm120ukrv.CCbm120ukrv[fnCbm120Save]Query01 "
        DELETE CBM140T
         WHERE COMP_CODE  = #{S_COMP_CODE}
           AND DIV_CODE   = #{DIV_CODE}
           AND WORK_MONTH = #{WORK_MONTH}
	</delete>
	<insert id="cbm140ukrvServiceImpl.insertDetail1" parameterType="Map">
		INSERT INTO CBM140T
           (COMP_CODE
           ,DIV_CODE
           ,WORK_MONTH
           ,COST_POOL_CODE
		   ,ALLOCATION_CODE
           ,INSERT_DB_USER
           ,INSERT_DB_TIME
           ,UPDATE_DB_USER
           ,UPDATE_DB_TIME
	     )
	     VALUES(
	     	#{S_COMP_CODE}
           ,#{DIV_CODE}
           ,#{WORK_MONTH}
           ,#{COST_POOL_CODE}
           ,#{ALLOCATION_CODE}
           ,#{S_USER_ID}
           ,GETDATE()
           ,#{S_USER_ID}
           ,GETDATE()
          )
	</insert>
	<insert id="cbm140ukrvServiceImpl.insertDetail2" parameterType="Map">
		INSERT INTO CBM145T
           (COMP_CODE
           ,DIV_CODE
           ,WORK_MONTH
           ,COST_POOL_CODE
		   ,ALLOCATION_COST_POOL
		   ,ALLOCATION_VALUE
           ,INSERT_DB_USER
           ,INSERT_DB_TIME
           ,UPDATE_DB_USER
           ,UPDATE_DB_TIME
	     )
	     VALUES(
	     	#{S_COMP_CODE}
           ,#{DIV_CODE}
           ,#{WORK_MONTH}
           ,#{COST_POOL_CODE}
           ,#{ALLOCATION_COST_POOL}
           ,#{ALLOCATION_VALUE}
           ,#{S_USER_ID}
           ,GETDATE()
           ,#{S_USER_ID}
           ,GETDATE()
          )
	</insert>
	<update id="cbm140ukrvServiceImpl.updateDetail1" parameterType="Map">
		<if test="ALLOCATION_CODE != &quot;51&quot;">
		IF EXISTS (SELECT COST_POOL_CODE 
					FROM  CBM140T  WITH (NOLOCK)	
					 WHERE COMP_CODE		 = #{S_COMP_CODE}
		   AND DIV_CODE			 = #{DIV_CODE}
		   AND WORK_MONTH		 = #{WORK_MONTH}
		   AND COST_POOL_CODE	 = #{COST_POOL_CODE}
		   AND ALLOCATION_CODE = '51'
		)
		BEGIN 
			DELETE FROM CBM145T  
			WHERE COMP_CODE		 = #{S_COMP_CODE}
		      AND DIV_CODE			 = #{DIV_CODE}
		      AND WORK_MONTH		 = #{WORK_MONTH}
		      AND COST_POOL_CODE	 = #{COST_POOL_CODE}
		END
		</if>
		UPDATE CBM140T
		   SET ALLOCATION_CODE		 = #{ALLOCATION_CODE}
		      ,UPDATE_DB_USER 	 = #{S_USER_ID}
		      ,UPDATE_DB_TIME	 = GETDATE()
		 WHERE COMP_CODE		 = #{S_COMP_CODE}
		   AND DIV_CODE			 = #{DIV_CODE}
		   AND WORK_MONTH		 = #{WORK_MONTH}
		   AND COST_POOL_CODE	 = #{COST_POOL_CODE}
	</update>
	<update id="cbm140ukrvServiceImpl.updateDetail2" parameterType="Map">
		IF NOT EXISTS (SELECT ALLOCATION_COST_POOL 
					FROM  CBM145T  WITH (NOLOCK)	
				   WHERE COMP_CODE		 = #{S_COMP_CODE}
				     AND DIV_CODE			 = #{DIV_CODE}
				     AND WORK_MONTH		 = #{WORK_MONTH}
				     AND COST_POOL_CODE	 = #{COST_POOL_CODE}
				     AND ALLOCATION_COST_POOL = #{ALLOCATION_COST_POOL}
		)
			BEGIN
				INSERT INTO CBM145T
		           (COMP_CODE
		           ,DIV_CODE
		           ,WORK_MONTH
		           ,COST_POOL_CODE
				   ,ALLOCATION_COST_POOL
				   ,ALLOCATION_VALUE
		           ,INSERT_DB_USER
		           ,INSERT_DB_TIME
		           ,UPDATE_DB_USER
		           ,UPDATE_DB_TIME
			     )
			     VALUES(
			     	#{S_COMP_CODE}
		           ,#{DIV_CODE}
		           ,#{WORK_MONTH}
		           ,#{COST_POOL_CODE}
		           ,#{ALLOCATION_COST_POOL}
		           ,#{ALLOCATION_VALUE}
		           ,#{S_USER_ID}
		           ,GETDATE()
		           ,#{S_USER_ID}
		           ,GETDATE()
		          )
			END
		ELSE
			BEGIN
				UPDATE CBM145T
				   SET ALLOCATION_VALUE	 = #{ALLOCATION_VALUE}
				      ,UPDATE_DB_USER 	 = #{S_USER_ID}
				      ,UPDATE_DB_TIME	 = GETDATE()
				 WHERE COMP_CODE		 = #{S_COMP_CODE}
				   AND DIV_CODE			 = #{DIV_CODE}
				   AND WORK_MONTH		 = #{WORK_MONTH}
				   AND COST_POOL_CODE	 = #{COST_POOL_CODE}
				   AND ALLOCATION_COST_POOL = #{ALLOCATION_COST_POOL}
			END
	</update>
	<select id="cbm140ukrvServiceImpl.getCostPool" parameterType="Map" resultType="rMap">
	    SELECT    COST_POOL_CODE 
	         	, COST_POOL_NAME
	         	, DIV_CODE
	      FROM CBM700T  WITH (NOLOCK)
	     WHERE COMP_CODE = #{S_COMP_CODE}
	     <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
	     		AND DIV_CODE = #{DIV_CODE}
	     </if>
	     <if test="@foren.Ognl@isNotEmpty(USE_YN)">
		   	AND ISNULL(USE_YN,'N') = #{USE_YN}
	     </if>
	     <if test="@foren.Ognl@isNotEmpty(ALLOCATION_YN)">
	     	AND ISNULL(ALLOCATION_YN,'N') = #{ALLOCATION_YN}
	     </if>
	</select>
	
	<select id="cbm140ukrvServiceImpl.fnCopyPrevMonth" parameterType="Map" resultType="rMap">
		--	cbm140ukrvServiceImpl.fnCopyPrevMonth
		DECLARE @COMP_CODE		NVARCHAR(08)	= #{S_COMP_CODE}, 
				@DIV_CODE		NVARCHAR(08)	= #{DIV_CODE},
				@WORK_MONTH		NVARCHAR(06)	= #{WORK_MONTH},
				@LANG_TYPE		NVARCHAR(10)	= 'ko',
				@USER_ID		NVARCHAR(100)	= #{S_USER_ID},
				@ERROR_DESC		NVARCHAR(2000)	= ''
		
		BEGIN
			EXEC uniLITE.USP_COST_DisPrevMonthCopy @COMP_CODE
												 , @DIV_CODE
												 , @WORK_MONTH
												 , @LANG_TYPE
												 , @USER_ID
												 , @ERROR_DESC	OUTPUT
			
			SELECT ISNULL(@ERROR_DESC, '')	AS ERROR_DESC
		END
	</select>
	
</mapper>