<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gcd200ukrvServiceImpl">
	<select id="gcd200ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* gcd200ukrvServiceImpl.selectList */
		SELECT  A.DIV_CODE
				, A.DIV_CODE
				, A.CALCULATE_DATE
				, A.OFFICE_CODE
				, A.VEHICLE_CODE
				, A.ROUTE_GROUP
				, A.ROUTE_CODE
				, A.COMPANY_NAME
				, R.ROUTE_NUM
				, V.VEHICLE_REGIST_NO
				, A.RUNNING_KIND
				, A.ADULT_COUNT
				, A.ADULT_AMOUNT
				, A.STUDENT_COUNT
				, A.STUDENT_AMOUNT
				, A.CHILD_COUNT
				, A.CHILD_AMOUNT
				, A.FREE_COUNT
				, A.FREE_AMOUNT
				, A.TOTAL_COUNT
				, A.TOTAL_AMOUNT
		FROM GCD200T A
		LEFT JOIN GRT100T R  ON R.COMP_CODE		= A.COMP_CODE
						    AND R.DIV_CODE		= A.DIV_CODE
						    AND R.ROUTE_CODE	= A.ROUTE_CODE
		LEFT JOIN GVE100T V  ON V.COMP_CODE 	= A.COMP_CODE
		                    AND V.DIV_CODE 		= A.DIV_CODE
		                    AND V.VEHICLE_CODE 	= A.VEHICLE_CODE 
		 WHERE A.COMP_CODE 			= #{S_COMP_CODE}
		   AND A.DIV_CODE 			= #{DIV_CODE}
		   AND A.CALCULATE_DATE 	= #{CALCULATE_DATE}	
		  <if test="@foren.Ognl@isNotEmpty(ROUTE_CODE)">
		   AND A.ROUTE_CODE = #{ROUTE_CODE}
		  </if>	
		  <if test="@foren.Ognl@isNotEmpty(VEHICLE_CODE)">
		   AND A.VEHICLE_CODE = #{VEHICLE_CODE}
		  </if> 
		  <if test="@foren.Ognl@isNotEmpty(VEHICLE_NAME)">
		   AND V.VEHICLE_NAME LIKE '%' + #{VEHICLE_NAME} + '%'
		  </if>
		 ORDER BY A.CALCULATE_DATE, R.ROUTE_NUM, A.VEHICLE_CODE
	</select>	
	<insert id="gcd200ukrvServiceImpl.insert" parameterType="Map">
		
		INSERT INTO GCD200T
		(
			COMP_CODE
			, DIV_CODE
			, CALCULATE_DATE
			, OFFICE_CODE
			, VEHICLE_CODE
			, ROUTE_GROUP
			, ROUTE_CODE
			, COMPANY_NAME
			, ROUTE_NUM
			, VEHICLE_REGIST_NO
			, RUNNING_KIND
			, ADULT_COUNT
			, ADULT_AMOUNT
			, STUDENT_COUNT
			, STUDENT_AMOUNT
			, CHILD_COUNT
			, CHILD_AMOUNT
			, FREE_COUNT
			, FREE_AMOUNT
			, TOTAL_COUNT
			, TOTAL_AMOUNT

			, REMARK
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME

		)
		VALUES
		(
			 #{S_COMP_CODE}
			, #{DIV_CODE}
			, #{CALCULATE_DATE}
			, #{OFFICE_CODE}
			, #{VEHICLE_CODE}
			, #{ROUTE_GROUP}
			, #{ROUTE_CODE}
			, #{COMPANY_NAME}
			, #{ROUTE_NUM}
			, #{VEHICLE_REGIST_NO}
			, #{RUNNING_KIND}
			, #{ADULT_COUNT}
			, #{ADULT_AMOUNT}
			, #{STUDENT_COUNT}
			, #{STUDENT_AMOUNT}
			, #{CHILD_COUNT}
			, #{CHILD_AMOUNT}
			, #{FREE_COUNT}
			, #{FREE_AMOUNT}
			, #{TOTAL_COUNT}
			, #{TOTAL_AMOUNT}

			, #{REMARK}
			, #{S_USER_ID}
			, GETDATE()
			, #{S_USER_ID}
			, GETDATE()
		)
	</insert>
	
	<update id="gcd200ukrvServiceImpl.deleteExcel" parameterType="Map">
		DELETE FROM GCD200T
		WHERE COMP_CODE 		= #{S_COMP_CODE}
		  AND DIV_CODE 			= #{DIV_CODE}
		  AND CALCULATE_DATE 	= #{CALCULATE_DATE}	  
	</update>
	<insert id="gcd200ukrvServiceImpl.insertExcelGcd202t" parameterType="Map">
    	/*gcd200ukrvServiceImpl.insertExcelGCD202T*/
    	INSERT INTO GCD202T
		(_EXCEL_JOBID, _EXCEL_ROWNUM, _EXCEL_HAS_ERROR, _EXCEL_ERROR_MSG, 
		  CALCULATE_DATE,	COMPANY_NAME,		ROUTE_NUM,			VEHICLE_REGIST_NO,  RUNNING_KIND,
		  ADULT_COUNT,		ADULT_AMOUNT,		STUDENT_COUNT,		STUDENT_AMOUNT,		CHILD_COUNT,
		  CHILD_AMOUNT,		FREE_COUNT,			FREE_AMOUNT,		TOTAL_COUNT,		TOTAL_AMOUNT
		)
    	VALUES (
    		#{_EXCEL_JOBID}, #{_EXCEL_ROWNUM}, #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}, #{_EXCEL_ERROR,jdbcType=VARCHAR}, 
			#{CALCULATE_DATE},		#{COMPANY_NAME},	#{ROUTE_NUM},			#{VEHICLE_REGIST_NO},	#{RUNNING_KIND},
		  	#{ADULT_COUNT},			#{ADULT_AMOUNT},	#{STUDENT_COUNT},		#{STUDENT_AMOUNT},		#{CHILD_COUNT},
		  	#{CHILD_AMOUNT},		#{FREE_COUNT},		#{FREE_AMOUNT},			#{TOTAL_COUNT},			#{TOTAL_AMOUNT}
    	)
    </insert>  
    <select id="gcd200ukrvServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
		/*gcd200ukrvServiceImpl.selectExcelUploadSheet1*/
		
		SELECT A._EXCEL_ROWNUM
			 , A._EXCEL_HAS_ERROR
			 , A._EXCEL_ERROR_MSG
			 , R1.OFFICE_CODE AS OFFICE_CODE
			 , A.CALCULATE_DATE
			 , V.VEHICLE_CODE
			 , C.ROUTE_GROUP
			 , R.ROUTE_CODE
			 , A.COMPANY_NAME
			 , A.ROUTE_NUM
			 , A.RUNNING_KIND
			 , A.VEHICLE_REGIST_NO
			 , V.VEHICLE_CODE
			 , A.ADULT_COUNT
			 , A.ADULT_AMOUNT
			 , A.STUDENT_COUNT
			 , A.STUDENT_AMOUNT
			 , A.CHILD_COUNT
			 , A.CHILD_AMOUNT
			 , A.FREE_COUNT
			 , A.FREE_AMOUNT
			 , A.TOTAL_COUNT
			 , A.TOTAL_AMOUNT

		  FROM GCD202T A
			  LEFT JOIN GRT100T R  ON  R.COMP_CODE = #{S_COMP_CODE}
							  	   AND R.DIV_CODE  = #{S_DIV_CODE}
							  	   AND R.ROUTE_NUM =  A.ROUTE_NUM 
			  LEFT JOIN GRT110T R1 ON  R1.COMP_CODE = #{S_COMP_CODE}
							  	   AND R1.DIV_CODE  = #{S_DIV_CODE}
							  	   AND R1.ROUTE_CODE =  R.ROUTE_CODE 
							  	   AND A.CALCULATE_DATE BETWEEN R1.ROUTE_START_DATE AND R1.ROUTE_END_DATE
			  LEFT JOIN GVE100T V  ON  V.COMP_CODE = #{S_COMP_CODE}
							  	   AND V.DIV_CODE  = #{S_DIV_CODE}
							  	   AND V.VEHICLE_REGIST_NO =  A.VEHICLE_REGIST_NO 
			  LEFT JOIN (SELECT SUB_CODE,REF_CODE2 AS ROUTE_GROUP
					 FROM BSA100T 
					WHERE COMP_CODE=#{S_COMP_CODE}
					  AND MAIN_CODE='GO16'
					  AND SUB_CODE !='$'
					  AND USE_YN = 'Y'
					)		C ON C.SUB_CODE = R1.ROUTE_GROUP
		 WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM
	</select>
	<update id="gcd200ukrvServiceImpl.excelValidate" >
		/*gcd200ukrvServiceImpl.excelValidate*/
		
		DELETE FROM GCD202T WHERE _EXCEL_JOBID = #{_EXCEL_JOBID} AND ROUTE_NUM IN ('노선합계','')
		
		UPDATE A
		   SET A._EXCEL_HAS_ERROR = (CASE WHEN B.ROUTE_CODE IS NULL OR ISNULL(A.ROUTE_NUM,'') = '' THEN 'Y' 
										  ELSE A._EXCEL_HAS_ERROR 
									 END),
				A._EXCEL_ERROR_MSG = (CASE WHEN B.ROUTE_CODE IS NULL OR ISNULL(A.ROUTE_NUM,'') = '' THEN ISNULL(_EXCEL_ERROR_MSG,'') + '노선 정보가 존재하지 않습니다. ' 
										   ELSE A._EXCEL_ERROR_MSG END)
		  FROM GCD202T A 
		  LEFT JOIN GRT100T B ON  B.COMP_CODE = #{S_COMP_CODE}
							  AND B.DIV_CODE  = #{S_DIV_CODE}
							  AND B.ROUTE_NUM =  A.ROUTE_NUM 
		  WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
		  
		  UPDATE A
		   SET A._EXCEL_HAS_ERROR = (CASE WHEN B.VEHICLE_REGIST_NO IS NULL OR ISNULL(A.VEHICLE_REGIST_NO,'') = '' THEN 'Y' 
										  ELSE A._EXCEL_HAS_ERROR 
									 END),
				A._EXCEL_ERROR_MSG = (CASE WHEN B.VEHICLE_REGIST_NO IS NULL OR ISNULL(A.VEHICLE_REGIST_NO,'') = '' THEN ISNULL(_EXCEL_ERROR_MSG,'') + '차량 정보가 존재하지 않습니다. ' 
										   ELSE A._EXCEL_ERROR_MSG END)
		  FROM GCD202T A 
		  LEFT JOIN GVE100T B ON  B.COMP_CODE = #{S_COMP_CODE}
							  AND B.DIV_CODE  = #{S_DIV_CODE}
							  AND B.VEHICLE_REGIST_NO =  A.VEHICLE_REGIST_NO 
		  WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	   

	</update>
</mapper>