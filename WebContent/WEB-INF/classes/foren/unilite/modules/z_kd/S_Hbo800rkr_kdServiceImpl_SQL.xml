<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hbo800rkr_kdServiceImpl">
		
	
	<select id="s_hbo800rkr_kdServiceImpl.fnstand100init" parameterType="Map" resultType="rMap">	
		--s_hbo800rkr_kdServiceImpl.fnstand100init
		SELECT  ISNULL(REF_CODE2, '') AS REF_CODE2
		FROM    BSA100T WITH (NOLOCK)
		WHERE   COMP_CODE   = #{S_COMP_CODE}
		AND     MAIN_CODE   = N'H175'
		AND     SUB_CODE    = N'10'
		AND     REF_CODE1   = N'Y'
	</select>
	
	<select id="s_hbo800rkr_kdServiceImpl.getCostPoolList" parameterType="Map" resultType="comboItem">	
			--s_hbo800rkr_kdServiceImpl.getCostPoolList
				SELECT  COST_POOL_CODE AS 'value'
				      , COST_POOL_NAME AS 'text' 
				FROM    CBM600T WITH (NOLOCK)
				WHERE   COMP_CODE   =  #{S_COMP_CODE}
				ORDER BY COST_POOL_CODE  
	</select>
	
	<select id="s_hbo800rkr_kdServiceImpl.createTable" parameterType="Map" statementType="STATEMENT">	
			IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID('HAT200PH_MASTER')) DROP TABLE HAT200PH_MASTER
			IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID('HPA900PH_MASTER')) DROP TABLE HPA900PH_MASTER
			IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID('HBO800PH_MASTER')) DROP TABLE HBO800PH_MASTER
			--UHrpt01Krv.CHpa900SKr [fnHpa900PB] Create HAT200PH_MASTER
			   CREATE TABLE HAT200PH_MASTER
			   (                                                    
			       SEQ              NUMERIC(3)      NOT NULL,       
			       SUB_CODE         NVARCHAR(50)    NULL,           
			       CODE_NAME        NVARCHAR(50)    NULL            
			                                                        
			       CONSTRAINT Hat200PH_MASTER_IDX00 PRIMARY KEY CLUSTERED  
			       (                                                
			               SEQ                                      
			       )                                                
			   )   
		   --UHrpt01Krv.CHpa900SKr [fnHpa900PB] Create HPA900PH_MASTER
			   CREATE TABLE HPA900PH_MASTER
			   (                                                    
			       SEQ              NUMERIC(3)      NOT NULL,       
			       SUB_CODE         NVARCHAR(50)    NULL,           
			       CODE_NAME        NVARCHAR(50)    NULL            
			                                                        
			       CONSTRAINT Hpa900PH_MASTER_IDX00 PRIMARY KEY CLUSTERED  
			       (                                                
			               SEQ                                      
			       )                                                
			   )     
			   --UHrpt01Krv.CHpa900SKr [fnHpa900PB] Create HBO800PH_MASTER
			   CREATE TABLE HBO800PH_MASTER
			   (                                                    
			       W_SEQ            NUMERIC(3)      NOT NULL,       
			       WAGES_CODE       NVARCHAR(50)    NULL,           
			       WAGES_NAME       NVARCHAR(50)    NULL,           
			       WAGES_SEQ        NUMERIC(2)      NULL            
			                                                        
			       CONSTRAINT HBO800PH_MASTER_IDX00 PRIMARY KEY CLUSTERED  
			       (                                                
			               W_SEQ                                    
			       )                                                
			   )      
	</select>
	<select id="s_hbo800rkr_kdServiceImpl.selectDutyCode" parameterType="Map" resultType="rMap">	
		--s_hbo800rkr_kdServiceImpl.selectDutyCode
		SELECT SUB_CODE                
		     , CODE_NAME               
		  FROM BSA100T                 
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'H033'      
		   AND USE_YN    = 'Y'         
		   AND SUB_CODE != '$'         
		 ORDER BY REF_CODE2, SUB_CODE  
	</select>
	<insert id="s_hbo800rkr_kdServiceImpl.insertHAT200PH" parameterType="Map">	
		--s_hbo800rkr_kdServiceImpl.insertHAT200PH
		INSERT INTO HAT200PH_MASTER
		          ( SEQ                                 
		          , SUB_CODE                            
		          , CODE_NAME )                         
		   VALUES (#{TEMP_I}                       
		          , #{SUB_CODE}  
		          , #{CODE_NAME})   
		          
	</insert>
	<select id="s_hbo800rkr_kdServiceImpl.selectBonusCode" parameterType="Map" resultType="rMap">	
	--s_hbo800rkr_kdServiceImpl.selectBonusCode
		SELECT A.DED_CODE AS SUB_CODE                               
		     , B.CODE_NAME                                          
		  FROM HPA400T A INNER JOIN BSA100T B                         
		                    ON A.COMP_CODE = B.COMP_CODE
		                   AND A.DED_CODE = B.SUB_CODE           
		 WHERE B.COMP_CODE  = #{S_COMP_CODE}
		   AND A.PAY_YYYYMM = #{PAY_YYYYMM}   
		   AND A.SUPP_TYPE  = #{PROV_TYPE}                     
		   AND B.MAIN_CODE  = 'H034'                                  
		   AND B.SUB_CODE  != '$'                                     
		 GROUP BY A.DED_CODE, B.CODE_NAME, REF_CODE2                
		 ORDER BY REF_CODE2,  SUB_CODE  
	</select>       
	<select id="s_hbo800rkr_kdServiceImpl.selectH034" parameterType="Map" resultType="rMap">	 
		--s_hbo800rkr_kdServiceImpl.selectH034
		SELECT SUB_CODE            
		     , CODE_NAME           
		  FROM BSA100T             
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'H034'  
		   AND SUB_CODE != '$'     
		   AND USE_YN    = 'Y'     
		 ORDER BY REF_CODE2, SUB_CODE
	 </select>
	 <insert id="s_hbo800rkr_kdServiceImpl.insertHPA900" parameterType="Map">	 
		--s_hbo800rkr_kdServiceImpl.insertHPA900
			INSERT INTO HPA900PH_MASTER
			          ( SEQ                                  
			          , SUB_CODE                             
			          , CODE_NAME )                          
			   VALUES ( #{TEMP_I}                       
			          , #{SUB_CODE}  
			          , #{CODE_NAME})       
	 </insert>
	 <select id="s_hbo800rkr_kdServiceImpl.selectWagesCode" parameterType="Map" resultType="rMap">	 
	       --s_hbo800rkr_kdServiceImpl.selectWagesCode
			SELECT WAGES_CODE               
			     , WAGES_NAME               
			     , WAGES_SEQ                
			  FROM HBS300T                  
			 WHERE COMP_CODE = #{S_COMP_CODE}
			   AND CODE_TYPE = '1'          
			   AND USE_YN    = 'Y'          
			 ORDER BY WAGES_SEQ, WAGES_CODE 
	</select>
	 <insert id="s_hbo800rkr_kdServiceImpl.insertHBO800" parameterType="Map">
	--s_hbo800rkr_kdServiceImpl.insertHBO800
		INSERT INTO HBO800PH_MASTER
		          ( W_SEQ                                    
		          , WAGES_CODE                               
		          , WAGES_NAME                               
		          , WAGES_SEQ )                              
		   VALUES (  #{TEMP_I}                              
		          , #{WAGES_CODE}     
		          , #{WAGES_NAME}     
		          , #{WAGES_SEQ} )
      </insert>
      <select id="s_hbo800rkr_kdServiceImpl.selectSubData" parameterType="Map" resultType="rMap">
      	--s_hbo800rkr_kdServiceImpl.selectSubData
			SELECT MAX(CASE WHEN A.W_SEQ = 1  THEN   A.WAGES_NAME   ELSE '' END) AS '1'      
			     , MAX(CASE WHEN A.W_SEQ = 2  THEN   A.WAGES_NAME   ELSE '' END) AS '2'      
			     , MAX(CASE WHEN A.W_SEQ = 3  THEN   A.WAGES_NAME   ELSE '' END) AS '3'      
			     , MAX(CASE WHEN A.W_SEQ &gt;= 4                                                 
			                     THEN 'z' + uniLITE.fnGetTxt('H0042')                        
			                     ELSE (CASE WHEN A.W_SEQ = 4 THEN A.WAGES_NAME ELSE '' END)  
			            END) AS '4'                                                          
			     , MAX(CASE WHEN B.SEQ = 1    THEN   B.CODE_NAME    ELSE '' END) AS '5'      
			     , MAX(CASE WHEN B.SEQ = 2    THEN   B.CODE_NAME    ELSE '' END) AS '6'      
			     , MAX(CASE WHEN B.SEQ = 3    THEN   B.CODE_NAME    ELSE '' END) AS '7'      
			     , MAX(CASE WHEN B.SEQ = 4    THEN   B.CODE_NAME    ELSE '' END) AS '8'      
			     , MAX(CASE WHEN B.SEQ = 5    THEN   B.CODE_NAME    ELSE '' END) AS '8_1'    
			     , MAX(CASE WHEN B.SEQ = 6    THEN   B.CODE_NAME    ELSE '' END) AS '8_2'    
			     , MAX(CASE WHEN B.SEQ = 7    THEN   B.CODE_NAME    ELSE '' END) AS '8_3'    
			     , MAX(CASE WHEN B.SEQ &gt;= 8                                                   
			                     THEN 'z' + uniLITE.fnGetTxt('H0044')                        
			                     ELSE (CASE WHEN B.SEQ = 8 THEN B.CODE_NAME ELSE '' END)     
			            END) AS '9'                                                          
			  FROM HBO800PH_MASTER A, HPA900PH_MASTER B                                                    
      </select>
      <select id="s_hbo800rkr_kdServiceImpl.selectMainData" parameterType="Map" resultType="rMap">
        --s_hbo800rkr_kdServiceImpl.selectMainData
        SELECT LEFT(M0.PERSON_NUMB, 4) + '-' + RIGHT(M0.PERSON_NUMB, 3)    AS PERSON_NUMB        -- 사원번로
             , M0.NAME                                                     AS NAME               -- 사원명
             , M0.DEPT_NAME                                                AS DEPT_NAME          -- 부서명
             , M0.PAY_GRADE_02                                             AS PAY_GRADE_02       -- 호봉
        

                
		     , CASE WHEN M0.PAY_GRADE_02 = '00'
                    THEN CASE WHEN M0.PAY_GRADE_03 = '00'
				              THEN C1.CODE_NAME
						      ELSE C1.CODE_NAME + ' ' + M0.PAY_GRADE_03 + '기'
					      END
                    WHEN M0.PAY_GRADE_03 = '00'
				    THEN CASE WHEN M0.PAY_GRADE_02 = '00'
				              THEN C1.CODE_NAME
						      ELSE C1.CODE_NAME + ' ' + M0.PAY_GRADE_02 + '직'
			              END 
			        ELSE C1.CODE_NAME + ' ' + M0.PAY_GRADE_02 + '직 ' + M0.PAY_GRADE_03 + '기'
			    END AS PAY_GRADE1
        
             , LEFT(M1.PAY_YYYYMM, 4)                                      AS PAY_YYYY           -- 지급년
             , RIGHT(M1.PAY_YYYYMM, 2)                                     AS PAY_MM             -- 지급월
             
             , '1 차'                                                      AS PAY_CHA            -- 지급차수
             , ISNULL(M1.BONUS_TOTAL_I, 0)                                 AS BONUS_TOTAL_I      -- 지급액계
             , ISNULL(M1.DED_TOTAL_I, 0)                                   AS DED_TOTAL_I        -- 공제액계
             , ISNULL(M1.REAL_AMOUNT_I, 0)                                 AS REAL_AMOUNT_I      -- 실수령액
             , ISNULL(M1.BONUS_STD_I, 0)                                   AS BONUS_STD_I        -- 상여금
             , ISNULL(M1.BONUS_STD_I - M1.SUPP_TOTAL_I, 0)                 AS BONUS_MINUS_I      -- 감봉액
        
             , ISNULL(M2.MED_AMOUNT_I, 0) + ISNULL(M2.LCI_AMOUNT_I, 0)     AS MED_AMOUNT_I       -- 건강보험 + 오양보험
             , ISNULL(M2.S04_AMOUNT_I, 0)                                  AS S04_AMOUNT_I       -- 식대
             , ISNULL(M2.S07_AMOUNT_I, 0)                                  AS S07_AMOUNT_I       -- 가불금
             , ISNULL(M2.ANU_AMOUNT_I, 0)                                  AS ANU_AMOUNT_I       -- 국민연금
             , ISNULL(M2.INC_AMOUNT_I, 0)                                  AS INC_AMOUNT_I       -- 소득세(갑근세)
             , ISNULL(M2.LOC_AMOUNT_I, 0)                                  AS LOC_AMOUNT_I       -- 지방소득세(주민세)
             , ISNULL(M2.HIR_AMOUNT_I, 0)                                  AS HIR_AMOUNT_I       -- 고용보험
        
          FROM            HUM100T M0 WITH (NOLOCK)
               INNER JOIN HPA600T M1 WITH (NOLOCK)   ON M1.COMP_CODE    = M0.COMP_CODE
                                                    AND M1.PERSON_NUMB  = M0.PERSON_NUMB
                                                    AND M1.PAY_YYYYMM   = #{PAY_YYYYMM}
                                                    AND M1.SUPP_TYPE    = #{PROV_TYPE}
        
                    LEFT JOIN (SELECT SUB_CODE  AS SUB_CODE
                                    , CODE_NAME AS CODE_NAME 
                                 FROM BSA100T 
                                WHERE COMP_CODE = #{S_COMP_CODE}
                                  AND MAIN_CODE = 'HX09'
                          ) C1 ON C1.SUB_CODE = M0.PAY_GRADE_01
        
               LEFT JOIN (SELECT M2.COMP_CODE
                               , M2.PERSON_NUMB
                               , M2.PAY_YYYYMM
                               , M2.SUPP_TYPE
                               , SUM(CASE WHEN M2.DED_CODE = 'MED' THEN DED_AMOUNT_I ELSE 0 END) AS MED_AMOUNT_I     -- 건강보험
                               , SUM(CASE WHEN M2.DED_CODE = 'LCI' THEN DED_AMOUNT_I ELSE 0 END) AS LCI_AMOUNT_I     -- 오양보험
                               , SUM(CASE WHEN M2.DED_CODE = 'S04' THEN DED_AMOUNT_I ELSE 0 END) AS S04_AMOUNT_I     -- 식대
                               , SUM(CASE WHEN M2.DED_CODE = 'S07' THEN DED_AMOUNT_I ELSE 0 END) AS S07_AMOUNT_I     -- 가불금
                               , SUM(CASE WHEN M2.DED_CODE = 'ANU' THEN DED_AMOUNT_I ELSE 0 END) AS ANU_AMOUNT_I     -- 국민연금
                               , SUM(CASE WHEN M2.DED_CODE = 'INC' THEN DED_AMOUNT_I ELSE 0 END) AS INC_AMOUNT_I     -- 소득세
                               , SUM(CASE WHEN M2.DED_CODE = 'LOC' THEN DED_AMOUNT_I ELSE 0 END) AS LOC_AMOUNT_I     -- 지방소득세(주민세)
                               , SUM(CASE WHEN M2.DED_CODE = 'HIR' THEN DED_AMOUNT_I ELSE 0 END) AS HIR_AMOUNT_I     -- 고용보험
                            FROM HPA400T M2
                           WHERE M2.COMP_CODE     = #{S_COMP_CODE}
                             AND M2.SUPP_TYPE     = #{PROV_TYPE}
                             AND M2.PAY_YYYYMM    = #{PAY_YYYYMM}
                             AND M2.DED_AMOUNT_I != 0
                           GROUP BY M2.COMP_CODE, M2.PERSON_NUMB, M2.PAY_YYYYMM, M2.SUPP_TYPE
                         ) M2   ON M2.COMP_CODE    = M1.COMP_CODE
                               AND M2.PERSON_NUMB  = M1.PERSON_NUMB
                               AND M2.PAY_YYYYMM   = M1.PAY_YYYYMM
                               AND M2.SUPP_TYPE    = M1.SUPP_TYPE
                               
                LEFT JOIN HUM760T G WITH (NOLOCK)  ON G.COMP_CODE     = M0.COMP_CODE
                                                  AND G.PERSON_NUMB   = M0.PERSON_NUMB
                                                  AND G.ANNOUNCE_DATE = (SELECT MAX(H.ANNOUNCE_DATE) AS ANNOUNCE_DATE
                                                                           FROM HUM760T H WITH (NOLOCK)
                                                                          WHERE H.COMP_CODE      = G.COMP_CODE
                                                                            AND H.PERSON_NUMB    = G.PERSON_NUMB
                                                                            AND H.ANNOUNCE_DATE &lt;= #{PAY_YYYYMM} + '01'
																        )
                               
                LEFT  JOIN BSA100T B1 WITH (NOLOCK) ON B1.COMP_CODE   = M0.COMP_CODE
                                                   AND B1.MAIN_CODE   = 'H024'
                                                   AND B1.SUB_CODE    = M0.EMPLOY_TYPE
                LEFT  JOIN BSA100T B2 WITH (NOLOCK) ON B2.COMP_CODE   = M0.COMP_CODE
                                                    AND B2.MAIN_CODE   = 'H181'
                                                    AND B2.SUB_CODE    = ISNULL(B1.REF_CODE1, '')
        
         WHERE M0.COMP_CODE    = #{S_COMP_CODE}
           AND (M0.RETR_DATE   = '00000000' OR LEFT(RETR_DATE, 6) &gt;= #{PAY_YYYYMM})
           AND  M1.PAY_YYYYMM  = #{PAY_YYYYMM}
           AND M1.SUPP_TYPE    = #{PROV_TYPE}
           
           <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">  
           AND M1.DIV_CODE     = #{DIV_CODE}
           </if> 
           
           <if test="@foren.Ognl@isNotEmpty(FR_DEPT_CODE)">
           AND M1.DEPT_CODE    &gt;= #{FR_DEPT_CODE}
           </if>     
             
           <if test="@foren.Ognl@isNotEmpty(TO_DEPT_CODE)">
           AND M1.DEPT_CODE    &lt;= #{TO_DEPT_CODE}
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">  
           AND M1.PAY_CODE      = #{PAY_CODE}       --급여지급방식
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
           AND M1.PAY_PROV_FLAG = #{PAY_PROV_FLAG}  --지급차수
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
           AND M1.PAY_GUBUN     = #{PAY_GUBUN}      --고용형태
           </if>
           <if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">
           AND M0.EMPLOY_TYPE   = #{EMPLOY_TYPE}    --사원구분
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(EMPLOY_GROUP)">
           AND B2.SUB_CODE      = #{EMPLOY_GROUP}   --사원그룹
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
           AND M0.AFFIL_CODE    = #{AFFIL_CODE}     --직렬
           </if>
           
           <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
           AND M1.PERSON_NUMB   = #{PERSON_NUMB}    --사원
           </if>

    	  ORDER BY CASE WHEN ISNULL(G.AF_AFFIL_CODE, '') = '' THEN M0.AFFIL_CODE ELSE ISNULL(G.AF_AFFIL_CODE, '') END
            , M0.DEPT_CODE, M0.ABIL_CODE, M0.PERSON_NUMB

      </select>
</mapper>