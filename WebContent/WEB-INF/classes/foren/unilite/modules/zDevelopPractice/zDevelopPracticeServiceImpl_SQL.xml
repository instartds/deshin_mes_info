<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="zDevelopPracticeServiceImpl">
	<select id="zDevelopPracticeServiceImpl.selectList" parameterType="Map" resultType="rMap">
		SELECT A.WORK_SHOP_CODE
		     , A.WKORD_NUM
		     , A.PROG_WORK_CODE
		     , B.PROG_WORK_NAME
		     , A.CUSTOM_CODE
		     , A.CUSTOM_NAME
		     , A.ITEM_CODE
		     , C.ITEM_NAME
		     , C.SPEC
		     , D.ORDER_UNIT
		     , A.WKORD_Q
		     , A.REMARK
		     --, A.ORDER_Q
		     --, A.ORDER_NUM
		     --, A.SER_NO
		     , A.TEMPC_01
		  FROM PMP100T A WITH(NOLOCK)   <!-- WITH(NOLOCK): 조회 시 꼭 필요 !-->
		  
		  INNER JOIN PBS200T B WITH(NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
		                                   AND B.DIV_CODE       = A.DIV_CODE
		                                   AND B.WORK_SHOP_CODE = A.WORK_SHOP_CODE
		                                   AND B.PROG_WORK_CODE = A.PROG_WORK_CODE
		  --COMP_CODE, ITEM_CODE
		  INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
		                                   AND C.ITEM_CODE      = A.ITEM_CODE
		  INNER JOIN BPR200T D WITH(NOLOCK) ON D.COMP_CODE      = A.COMP_CODE
		                                   AND D.DIV_CODE       = A.DIV_CODE
		                                   AND D.ITEM_CODE      = A.ITEM_CODE
		 WHERE A.COMP_CODE       = #{S_COMP_CODE}
		   AND A.DIV_CODE        = #{DIV_CODE}
		   AND A.PRODT_WKORD_DATE BETWEEN #{PRODT_START_DATE} AND #{PRODT_END_DATE}
		<if test="@foren.Ognl@isNotEmpty(CONT_GUBUN)">
		   AND A.TEMPC_01        = #{CONT_GUBUN}
		</if>
		<if test="@foren.Ognl@isNotEmpty(WORK_SHOP_CODE)">
		   AND A.WORK_SHOP_CODE  = #{WORK_SHOP_CODE}
		</if>
	</select>



	<select id="zDevelopPracticeServiceImpl.selectWhCodeList" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectWhCodeList */
		SELECT A.COMP_CODE
		     , A.TYPE_LEVEL
		     , A.TREE_CODE
		     , A.TREE_NAME
		     , A.GROUP_CD
		     , A.USE_YN
		  FROM BSA220T_DEV A WITH(NOLOCK)
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND TYPE_LEVEL = #{TYPE_LEVEL}
		<if test="@foren.Ognl@isNotEmpty(TREE_CODE)">
		   AND TREE_CODE  LIKE #{TREE_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(TREE_NAME)">
		   AND TREE_NAME  LIKE #{TREE_NAME} + '%'
		</if>
	</select>

	<select id="zDevelopPracticeServiceImpl.selectMaster2" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectMaster2 */
		SELECT A.COMP_CODE
		     , A.TYPE_LEVEL
		     , A.TREE_CODE
		     , A.TREE_NAME
		     , A.GROUP_CD
		     , A.USE_YN
		  FROM BSA220T_DEV A WITH(NOLOCK)
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND TYPE_LEVEL = #{TYPE_LEVEL}
		<if test="@foren.Ognl@isNotEmpty(TREE_CODE)">
		   AND TREE_CODE  LIKE #{TREE_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(TREE_NAME)">
		   AND TREE_NAME  LIKE #{TREE_NAME} + '%'
		</if>
	</select>

	<select id="zDevelopPracticeServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList2 (masterGrid) */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WH_CODE
		     , A.WH_CELL_CODE
		     , A.WH_CELL_NAME
		     , A.USE_YN
		     , CASE WHEN ISNULL(A.VALID_YN, '')   = '' THEN 'N'
		            ELSE A.VALID_YN
		       END                                               AS VALID_YN
		     , CASE WHEN ISNULL(A.PABSTOCK_YN, '')= '' THEN 'N'
		            ELSE A.PABSTOCK_YN
		       END                                               AS PABSTOCK_YN
		     , CASE WHEN ISNULL(A.DEFAULT_YN, '') = '' THEN 'N'
		            ELSE A.DEFAULT_YN
		       END                                               AS DEFAULT_YN
		     , A.SORT_SEQ
		     , A.WH_CELL_BARCODE
		     , A.CUSTOM_CODE
		     , A.REMARK
		  FROM BSA225T_DEV A WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{TYPE_LEVEL}
		   AND WH_CODE   = #{TREE_CODE}
		 ORDER BY A.SORT_SEQ
	</select>

	<update id="zDevelopPracticeServiceImpl.saveMaster2" parameterType="Map">
		/* zDevelopPracticeServiceImpl.saveMaster2 */
		MERGE INTO BSA220T_DEV                       A
		USING ( SELECT #{S_COMP_CODE}  AS COMP_CODE
		             , #{TREE_CODE}    AS TREE_CODE
		      )                                      B  ON B.COMP_CODE = A.COMP_CODE
		                                               AND B.TREE_CODE = A.TREE_CODE
		WHEN MATCHED THEN
		    UPDATE
		       SET TYPE_LEVEL     = #{TYPE_LEVEL}
		         , TREE_NAME      = #{TREE_NAME}
		         , GROUP_CD       = #{GROUP_CD}
		         , USE_YN         = #{USE_YN}
		         , UPDATE_DB_USER = #{S_USER_ID}
		         , UPDATE_DB_TIME = GETDATE()

		WHEN NOT MATCHED THEN
		    INSERT (
		             COMP_CODE, TYPE_LEVEL, TREE_CODE, TREE_NAME, GROUP_CD, USE_YN
		           , INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME
		    ) VALUES (
		             #{S_COMP_CODE}, #{TYPE_LEVEL}, #{TREE_CODE}, #{TREE_NAME}, #{GROUP_CD}, #{USE_YN}
		           , #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
		    );
	</update>
	<insert id="zDevelopPracticeServiceImpl.insertDetail2" parameterType="Map">
		/* zDevelopPracticeServiceImpl.insertDetail2 */
		INSERT INTO BSA225T_DEV (
		    COMP_CODE
		  , DIV_CODE
		  , WH_CODE
		  , WH_CELL_CODE
		  , WH_CELL_NAME
		  , USE_YN
		  , VALID_YN
		  , PABSTOCK_YN
		  , SORT_SEQ
		  , DEFAULT_YN
		  , WH_CELL_BARCODE
		  , CUSTOM_CODE
		  , REMARK
		  , INSERT_DB_TIME
		  , INSERT_DB_USER
		  , UPDATE_DB_TIME
		  , UPDATE_DB_USER
		) VALUES (
		    #{COMP_CODE}
		  , #{DIV_CODE}
		  , #{WH_CODE}
		  , #{WH_CELL_CODE}
		  , #{WH_CELL_NAME}
		  , #{USE_YN}
		  , #{VALID_YN}
		  , #{PABSTOCK_YN}
		  , #{SORT_SEQ}
		  , #{DEFAULT_YN}
		  , #{WH_CELL_BARCODE}
		  , #{CUSTOM_CODE}
		  , #{REMARK}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		)
	</insert>
	<update id="zDevelopPracticeServiceImpl.updateDetail2" parameterType="Map">
		/* zDevelopPracticeServiceImpl.updateDetail2 */
		UPDATE BSA225T_DEV
		   SET WH_CELL_NAME     = #{WH_CELL_NAME}
		     , USE_YN           = #{USE_YN}
		     , VALID_YN         = #{VALID_YN}
		     , PABSTOCK_YN      = #{PABSTOCK_YN}
		     , SORT_SEQ         = #{SORT_SEQ}
		     , DEFAULT_YN       = #{DEFAULT_YN}
		     , WH_CELL_BARCODE  = #{WH_CELL_BARCODE}
		     , CUSTOM_CODE      = #{CUSTOM_CODE}
		     , REMARK           = #{REMARK}
		     , UPDATE_DB_TIME   = GETDATE()
		     , UPDATE_DB_USER   = #{S_USER_ID}
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     = #{DIV_CODE}
		   AND WH_CODE      = #{WH_CODE}
		   AND WH_CELL_CODE = #{WH_CELL_CODE}
	</update>
	<delete id="zDevelopPracticeServiceImpl.deleteDetail2" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteDetail2 */
		DELETE FROM BSA225T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     = #{DIV_CODE}
		   AND WH_CODE      = #{WH_CODE}
		   AND WH_CELL_CODE = #{WH_CELL_CODE}
	</delete>
	<delete id="zDevelopPracticeServiceImpl.deleteAll2" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteAll2 */
		DELETE FROM BSA220T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND TREE_CODE    = #{TREE_CODE}

		DELETE FROM BSA225T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     = #{TYPE_LEVEL}
		   AND WH_CODE      = #{TREE_CODE}
	</delete>



	<select id="zDevelopPracticeServiceImpl.selectList3" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList3 */
		SELECT A.ISSUE_REQ_NUM	
		   , A.ISSUE_REQ_SEQ	
		   , A.ISSUE_REQ_DATE
		   , A.CUSTOM_CODE	
		   , B.CUSTOM_NAME   
		   , A.ITEM_CODE    	
		   , C.ITEM_NAME     
		   , C.SPEC			
		   , A.ORDER_UNIT	
		   , A.TRANS_RATE	
		   , A.MONEY_UNIT	
		   , A.ISSUE_REQ_QTY	
		   , A.ORDER_NUM		
		   , D.SER_NO		
		   , D.ORDER_Q	
		FROM SRQ100T A WITH(NOLOCK)
		INNER JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
									 AND B.CUSTOM_CODE = A.CUSTOM_CODE
		INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
									 AND C.ITEM_CODE = A.ITEM_CODE
	
		INNER JOIN SOF110T D WITH(NOLOCK) ON D.COMP_CODE = A.COMP_CODE
									 AND D.DIV_CODE = A.DIV_CODE
									 AND D.ORDER_NUM = A.ORDER_NUM
									 AND D.SER_NO = A.SER_NO
   		INNER JOIN SOF100T E WITH(NOLOCK) ON E. COMP_CODE= A.COMP_CODE
										AND E.DIV_CODE = A.DIV_CODE
										AND E.ORDER_NUM = A.ORDER_NUM
	
		WHERE A.COMP_CODE       = #{S_COMP_CODE}
		AND A.DIV_CODE        = #{DIV_CODE}
		AND A.ISSUE_REQ_DATE BETWEEN #{ISSUE_REQ_DATE_FR} AND #{ISSUE_REQ_DATE_TO}
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
			AND A.CUSTOM_CODE       LIKE #{CUSTOM_CODE} + '%'   <!--LIKE: 포함된 문자열 검색 , %:문자열이 포함된 컬럼 조회-->
		</if>
	
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
			 AND B.CUSTOM_NAME       LIKE #{CUSTOM_NAME} + '%'
		</if>
	
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			 AND A.ITEM_CODE        LIKE #{ITEM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			 AND C.ITEM_NAME        LIKE #{ITEM_NAME} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
			 AND E.ORDER_TYPE         = #{ORDER_TYPE} 
		</if>
	</select>
	
	<select id="zDevelopPracticeServiceImpl.print1" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.print1 */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.WH_CODE                                          --창고
		     , P1.TREE_NAME                   AS WH_CODE_NAME     --창고명
		     , A.ISSUE_REQ_NUM                                    --출하지시번호
		     , A.ORDER_NUM
		     , A.SER_NO 
		     , A.CUSTOM_CODE    --거래처
		     , C2.CUSTOM_NAME    --거래처
		     , B1.RECEIVER_ID                 AS CUSTOM_ID      --주문자ID
		     , B1.RECEIVER_NAME               AS CUSTOM_PRSN    --주문자명
		     , A.ISSUE_REQ_DATE                                 --출하지시일
		     , A.ISSUE_REQ_PRSN                                 --등록자
		     , P2.CODE_NAME                   AS WKORD_PRSN_NM  --등록자
		     , ISNULL(A.TEMPC_01, 'N')        AS TEMPC_01
		     , ISNULL(B1.BUNDLE_NO, '')       AS BUNDLE_NO
		     , B1.SHOP_OPT_NAME
		     , A.CUSTOM_CODE                  AS PURCH_CODE     --구매처
		     , C2.CUSTOM_NAME                 AS PURCH_NAME     --구매처
		     , B1.DELIV_METHOD                                  --배송방법
		     , Z2.CODE_NAME                   AS DELIV_METHOD_NM--배송방법
		     , REPLACE(CONVERT(NVARCHAR(10), B1.PAY_TIME), '-', '.') AS PAY_TIME
		     , ISNULL(B1.ADDRESS1, '')
		     + ISNULL(B1.ADDRESS2, '')        AS ADDRESS        --배송지
		     , B1.MSG                                           --배송메세지
		     , B1.INVOICE_NUM                                   --운송장 번호
		     , A.ISSUE_REQ_QTY
		     , ISNULL(A.ISSUE_REQ_AMT, 0) + ISNULL(A.ISSUE_REQ_TAX_AMT, 0) AS ORDER_SUM_O
		  INTO       #S_SRQ100T_WM
		  FROM       SRQ100T           A
		    WITH(NOLOCK)
		  LEFT  JOIN SOF110T           B1 WITH(NOLOCK) ON B1.COMP_CODE   = A.COMP_CODE
		                                              AND B1.DIV_CODE    = A.DIV_CODE
		                                              AND B1.ORDER_NUM   = A.ORDER_NUM
		                                              AND B1.SER_NO      = A.SER_NO
		  LEFT  JOIN SOF100T           B2 WITH(NOLOCK) ON B2.COMP_CODE   = B1.COMP_CODE
		                                              AND B2.DIV_CODE    = B1.DIV_CODE
		                                              AND B2.ORDER_NUM   = B1.ORDER_NUM
		  INNER JOIN BCM100T           C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                              AND C2.CUSTOM_CODE = A.CUSTOM_CODE
		  INNER JOIN BSA220T           P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
		                                              AND P1.TREE_CODE   = A.WH_CODE
		  LEFT  JOIN BSA100T           P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
		                                              AND P2.MAIN_CODE   = 'S010'
		                                              AND P2.SUB_CODE    = A.ISSUE_REQ_PRSN
		  LEFT  JOIN BSA100T           Z2 WITH(NOLOCK) ON Z2.COMP_CODE   = B1.COMP_CODE
		                                              AND Z2.MAIN_CODE   = 'ZM11'
		                                              AND Z2.SUB_CODE    = B1.DELIV_METHOD
		   
		WHERE A.COMP_CODE       = #{S_COMP_CODE}
		AND A.DIV_CODE        = #{DIV_CODE}
		AND A.ISSUE_REQ_DATE BETWEEN #{ISSUE_REQ_DATE_FR} AND #{ISSUE_REQ_DATE_TO}
	
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
			 AND A.CUSTOM_CODE       LIKE #{CUSTOM_CODE} + '%'   <!--LIKE: 포함된 문자열 검색 , %:문자열이 포함된 컬럼 조회-->
		</if>
	
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
			 AND B.CUSTOM_NAME       LIKE #{CUSTOM_NAME} + '%'
		</if>
	
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			 AND A.ITEM_CODE        LIKE #{ITEM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			 AND C.ITEM_NAME        LIKE #{ITEM_NAME} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
			 AND B2.ORDER_TYPE         = #{ORDER_TYPE} 
		</if>

		--송장번호가 같을 경우에는 메인 데이터에 MAX(ISSUE_REQ_NUM)의 데이터를 가져온다., 20210203 수정: GROUP BY 절 추가 / 필요없는 컬럼 삭제
		SELECT COMP_CODE
		     , DIV_CODE
		     , ISSUE_REQ_NUM
		     , CUSTOM_CODE
		     , CUSTOM_NAME
		     , MAX(CUSTOM_PRSN) AS CUSTOM_PRSN
		     , ISSUE_REQ_DATE
		     , WKORD_PRSN_NM
		     , MAX(BUNDLE_NO) AS BUNDLE_NO
		     , PURCH_CODE
		     , PURCH_NAME
		     , MIN(DELIV_METHOD)	AS DELIV_METHOD
		     , MAX(DELIV_METHOD_NM) AS DELIV_METHOD_NM
		     , PAY_TIME
		     , MAX(ADDRESS) AS ADDRESS
		     , ISNULL(MSG, '') AS MSG
		     , INVOICE_NUM
		     , SUM(ISSUE_REQ_QTY) AS SUM_ISSUE_REQ_QTY
		     , SUM(ORDER_SUM_O)   AS SUM_ORDER_SUM_O
		     , WH_CODE_NAME
		 FROM #S_SRQ100T_WM
		 WHERE ISSUE_REQ_NUM IN ( SELECT MAX(ISSUE_REQ_NUM)
		                            FROM #S_SRQ100T_WM
		                           GROUP BY COMP_CODE, DIV_CODE, INVOICE_NUM ) 
		 GROUP BY COMP_CODE, DIV_CODE, ISSUE_REQ_NUM, CUSTOM_CODE, CUSTOM_NAME, ISSUE_REQ_DATE, WKORD_PRSN_NM, PURCH_CODE, PURCH_NAME
		        , PAY_TIME, ISNULL(MSG, ''), INVOICE_NUM , WH_CODE_NAME
	</select>
	<select id="zDevelopPracticeServiceImpl.print2" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.print2 */
		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , A.ITEM_CODE
		     , C1.ITEM_NAME
		     , C1.SPEC
		     , C2.ORDER_UNIT
		     , A.ISSUE_REQ_QTY
		     , B1.SHOP_OPT_NAME
		     , B1.INVOICE_NUM
		     , ISNULL(A.ISSUE_REQ_AMT, 0) + ISNULL(A.ISSUE_REQ_TAX_AMT, 0) AS ORDER_SUM_O
		  FROM       SRQ100T A  WITH(NOLOCK)
		  LEFT  JOIN SOF110T B1 WITH(NOLOCK) ON B1.COMP_CODE   = A.COMP_CODE
		                                    AND B1.DIV_CODE    = A.DIV_CODE
		                                    AND B1.ORDER_NUM   = A.ORDER_NUM
		                                    AND B1.SER_NO      = A.SER_NO
		  INNER JOIN BPR100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
		                                    AND C1.ITEM_CODE   = A.ITEM_CODE
		  INNER JOIN BPR200T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                    AND C2.DIV_CODE    = A.DIV_CODE
		                                    AND C2.ITEM_CODE   = A.ITEM_CODE
			INNER JOIN SOF100T E WITH(NOLOCK) ON E. COMP_CODE= A.COMP_CODE
											AND E.DIV_CODE = A.DIV_CODE
											AND E.ORDER_NUM = A.ORDER_NUM  
	WHERE A.COMP_CODE       = #{S_COMP_CODE}
	AND A.DIV_CODE        = #{DIV_CODE}
	AND A.ISSUE_REQ_DATE BETWEEN #{ISSUE_REQ_DATE_FR} AND #{ISSUE_REQ_DATE_TO}
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
			   AND A.CUSTOM_CODE       LIKE #{CUSTOM_CODE} + '%'   <!--LIKE: 포함된 문자열 검색 , %:문자열이 포함된 컬럼 조회-->
	</if>
	
	<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
			   AND B.CUSTOM_NAME       LIKE #{CUSTOM_NAME} + '%'
	</if>
	
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			   AND A.ITEM_CODE        LIKE #{ITEM_CODE} + '%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			   AND C.ITEM_NAME        LIKE #{ITEM_NAME} + '%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
			   AND E.ORDER_TYPE         = #{ORDER_TYPE} 
	</if>
	</select>



	<select id="zDevelopPracticeServiceImpl.selectList4" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList4 */
		SELECT COMP_CODE
		     , USER_ID
		     , PERSON_NUMB
		     , USER_NAME
		     , PASSWORD
		     , ERP_USER
		     , UPDATE_MAN
		     , UPDATE_DATE
		     , PWD_UPDATE_DATE
		     , DIV_CODE
		     , DEPT_CODE
		     , FAIL_CNT
		     , LOCK_YN
		     , USE_YN
		     , REF_ITEM
		     , USER_LEVEL
		     , USER_GUBUN
		     , SSO_USER
		     , AUTHORITY_LEVEL
		     , MAIN_COMP_YN
		     , END_DATE
		     , GRADE_LEVEL
		     , AUTH_TYPE
		     , LOCK_FLAG
		     , APPROVE_FLAG
		     , LAST_LOGIN_DATE
		     , GROUP_CODE
		     , JOIN_DATE
		     , RETR_DATE
		     , POST_CODE
		     , ABIL_CODE
		     , BIRTH_DATE
		     , SEX_CODE
		     , MARRY_YN
		     , ZIP_CODE
		     , KOR_ADDR
		     , EMAIL_ADDR
		     , EXT_NO
		     , TELEPHON
		     , PHONE
		     , SELF_INTROE
		     , POS_ID
		     , POS_PASS
		     , POS_LEVEL
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     , MENU_DISPLAY_YN
		     , PASSWORD_SECU
		     , USER_SIGN
		     , DOC_NO
		  FROM BSA300T_DEV WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
	<if test="@foren.Ognl@isNotEmpty(USER_ID)">
		   AND USER_ID   LIKE #{USER_NAME} + '%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(USER_NAME)">
		   AND USER_NAME LIKE #{USER_NAME} + '%'
	</if>
	<if test="@foren.Ognl@isNotEmpty(USE_YN)">
		   AND USE_YN    = #{USE_YN}
	</if>
	</select>

	<insert id="zDevelopPracticeServiceImpl.insertDetail4" parameterType="Map">
		/* zDevelopPracticeServiceImpl.insertDetail4 */
		INSERT INTO BSA300T_DEV (
		       COMP_CODE, USER_ID, USER_NAME, PASSWORD, DIV_CODE, AUTHORITY_LEVEL, USE_YN, DEPT_CODE
		     , INSERT_DB_TIME, INSERT_DB_USER
		     , UPDATE_DB_TIME, UPDATE_DB_USER
		) VALUES (
		       #{S_COMP_CODE}, #{USER_ID}, #{USER_NAME}, CONVERT(VARBINARY, UNILITE.fnCipherEncrypt(#{PASSWORD}, '')), #{DIV_CODE}, #{AUTHORITY_LEVEL}, #{USE_YN}, ''
		     , GETDATE(), #{S_USER_ID}
		     , GETDATE(), #{S_USER_ID}
		)
	</insert>
	<update id="zDevelopPracticeServiceImpl.updateDetail4" parameterType="Map">
		UPDATE BSA300T_DEV
		   SET USER_NAME        = #{USER_NAME}
		     , PASSWORD         = CONVERT(VARBINARY, UNILITE.fnCipherEncrypt(#{PASSWORD}, ''))
		     , DIV_CODE         = #{DIV_CODE}
		     , AUTHORITY_LEVEL  = #{AUTHORITY_LEVEL}
		     , USE_YN           = #{USE_YN}
		     , UPDATE_DB_TIME   = GETDATE()
		     , UPDATE_DB_USER   = #{S_USER_ID}
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND USER_ID   = #{USER_ID}
	</update>
	<delete id="zDevelopPracticeServiceImpl.deleteDetail4" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteDetail4 */
		DELETE FROM BSA300T_DEV
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND USER_ID   = #{USER_ID}
	</delete>



	<select id="zDevelopPracticeServiceImpl.selectList6" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList6 */
		SELECT A.COMP_CODE
		,A.TREE_CODE
		,A.TREE_NAME
		,A.TYPE_LEVEL
		,A.SECTION_CD
		,A.USE_YN
		,A.GROUP_CD
		,A.PABSTOCK_YN
		,A.SORT_SEQ
		,A.DEPT_CODE
		,A.CUSTOM_CODE
		,B.CUSTOM_NAME 
		,A.INSERT_DB_USER
		,A.INSERT_DB_TIME
		,A.UPDATE_DB_USER
		,A.UPDATE_DB_TIME
		,A.TEMPC_01
		,A.TEMPC_02
		,A.TEMPC_03
		,A.TEMPN_01
		,A.TEMPN_02
		,A.TEMPN_03
		FROM BSA220T_DEV A WITH(NOLOCK)
		LEFT JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
										AND B.CUSTOM_CODE = A.CUSTOM_CODE

		WHERE A.COMP_CODE = #{S_COMP_CODE}
		AND A.TYPE_LEVEL  = #{TYPE_LEVEL}
		<if test="@foren.Ognl@isNotEmpty(TREE_CODE)">
		   AND A.TREE_CODE LIKE #{TREE_CODE} + '%'
		</if>
	
	</select>

	<insert id="zDevelopPracticeServiceImpl.insertDetail6" parameterType="Map">
		/* zDevelopPracticeServiceImpl.insertDetail6 */
		INSERT INTO BSA220T_DEV ( COMP_CODE, TREE_CODE, TREE_NAME, CUSTOM_CODE, TYPE_LEVEL, GROUP_CD, USE_YN
						, INSERT_DB_TIME, INSERT_DB_USER
						, UPDATE_DB_TIME, UPDATE_DB_USER
		) VALUES ( #{S_COMP_CODE}, #{TREE_CODE}, #{TREE_NAME}, #{CUSTOM_CODE}, #{TYPE_LEVEL}, #{GROUP_CD}, #{USE_YN}
		   , GETDATE(), #{S_USER_ID}
		   , GETDATE(), #{S_USER_ID}
		)

	</insert>
	<update id="zDevelopPracticeServiceImpl.updateDetail6" parameterType="Map">
		/* zDevelopPracticeServiceImpl.updateDetail6 */
		UPDATE BSA220T_DEV
		   SET TREE_NAME        = #{TREE_NAME}
			 , CUSTOM_CODE		= #{CUSTOM_CODE}
			 , TYPE_LEVEL		= #{TYPE_LEVEL}
		     , USE_YN           = #{USE_YN}
		     , UPDATE_DB_TIME   = GETDATE()
		     , UPDATE_DB_USER   = #{S_USER_ID}
		 WHERE COMP_CODE = #{S_COMP_CODE}
		 AND TREE_NAME   = #{TREE_NAME}
	</update>
	<delete id="zDevelopPracticeServiceImpl.deleteDetail6" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteDetail6 */
		DELETE FROM BSA220T_DEV
		 WHERE COMP_CODE 	= #{S_COMP_CODE}
		   AND TREE_CODE    = #{TREE_CODE}
	</delete>
	
	
	
	
	<select id="zDevelopPracticeServiceImpl.selectWhCodeList5" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectWhCodeList5 */
		SELECT A.COMP_CODE
		     , A.TYPE_LEVEL
		     , A.TREE_CODE
		     , A.TREE_NAME
		     , A.GROUP_CD
		     , A.USE_YN
		  FROM BSA220T_DEV A WITH(NOLOCK)
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND TYPE_LEVEL = #{TYPE_LEVEL}
		<if test="@foren.Ognl@isNotEmpty(TREE_CODE)">
		   AND TREE_CODE  LIKE #{TREE_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(TREE_NAME)">
		   AND TREE_NAME  LIKE #{TREE_NAME} + '%'
		</if>
	</select>
	
	
	<select id="zDevelopPracticeServiceImpl.selectMaster5" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectMaster5 */
		SELECT A.COMP_CODE
		     , A.TYPE_LEVEL
		     , A.TREE_CODE
		     , A.TREE_NAME
		     , A.GROUP_CD
		     , A.USE_YN
		  FROM BSA220T_DEV A WITH(NOLOCK)
		 WHERE COMP_CODE  = #{S_COMP_CODE}
		   AND TYPE_LEVEL = #{TYPE_LEVEL}
		<if test="@foren.Ognl@isNotEmpty(TREE_CODE)">
		   AND TREE_CODE  LIKE #{TREE_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(TREE_NAME)">
		   AND TREE_NAME  LIKE #{TREE_NAME} + '%'
		</if>
	</select>
	
	
	
	<select id="zDevelopPracticeServiceImpl.selectList5" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList5 (masterGrid) */
		SELECT A.COMP_CODE
		     , A.DIV_CODE AS TYPE_LEVEL
		     , A.WH_CODE AS TREE_CODE
		     , A.WH_CELL_CODE
		     , A.WH_CELL_NAME
			 , A.CUSTOM_CODE
			 , B.CUSTOM_NAME
		     , A.USE_YN
		     , CASE WHEN ISNULL(A.VALID_YN, '')   = '' THEN 'N'
		            ELSE A.VALID_YN
		       END                                               AS VALID_YN
		     , CASE WHEN ISNULL(A.PABSTOCK_YN, '')= '' THEN 'N'
		            ELSE A.PABSTOCK_YN
		       END                                               AS PABSTOCK_YN
		     , CASE WHEN ISNULL(A.DEFAULT_YN, '') = '' THEN 'N'
		            ELSE A.DEFAULT_YN
		       END                                               AS DEFAULT_YN
		     , A.SORT_SEQ
		     , A.WH_CELL_BARCODE
		  FROM BSA225T_DEV A WITH(NOLOCK)
		  LEFT JOIN BCM100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
										AND B.CUSTOM_CODE = A.CUSTOM_CODE
										
		 WHERE A.COMP_CODE 		= #{S_COMP_CODE}
		   AND A.DIV_CODE  			= #{TYPE_LEVEL}
		   AND A.WH_CODE   		= #{TREE_CODE}
		 ORDER BY A.SORT_SEQ
	</select>
	
	
	
	<update id="zDevelopPracticeServiceImpl.saveMaster5" parameterType="Map">
		/* zDevelopPracticeServiceImpl.saveMaster5 */
		MERGE INTO BSA220T_DEV                       A
		USING ( SELECT #{S_COMP_CODE}  AS COMP_CODE
		             , #{TREE_CODE}    AS TREE_CODE
		      )                                      B  ON B.COMP_CODE = A.COMP_CODE
		                                               AND B.TREE_CODE = A.TREE_CODE
		WHEN MATCHED THEN
		    UPDATE
		       SET TYPE_LEVEL     		= #{TYPE_LEVEL}
		         , TREE_NAME      		= #{TREE_NAME}
		         , GROUP_CD      			= #{GROUP_CD}
		         , USE_YN         			= #{USE_YN}
		         , UPDATE_DB_USER 		= #{S_USER_ID}
		         , UPDATE_DB_TIME 		= GETDATE()

		WHEN NOT MATCHED THEN
		    INSERT (
		             COMP_CODE, TYPE_LEVEL, TREE_CODE, TREE_NAME, GROUP_CD, USE_YN
		           , INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME
		    ) VALUES (
		             #{S_COMP_CODE}, #{TYPE_LEVEL}, #{TREE_CODE}, #{TREE_NAME}, #{GROUP_CD}, #{USE_YN}
		           , #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
		    );
	</update>
	
	
	
	<insert id="zDevelopPracticeServiceImpl.insertDetail5" parameterType="Map">
		/* zDevelopPracticeServiceImpl.insertDetail5 */
		INSERT INTO BSA225T_DEV (
		    COMP_CODE
		  , DIV_CODE
		  , WH_CODE
		  , WH_CELL_CODE
		  , WH_CELL_NAME
		  , CUSTOM_CODE
		  , USE_YN
		  , PABSTOCK_YN
		  , VALID_YN
		  , WH_CELL_BARCODE
		  , INSERT_DB_TIME
		  , INSERT_DB_USER
		  , UPDATE_DB_TIME
		  , UPDATE_DB_USER
		) VALUES (
		    #{COMP_CODE}
		  , #{TYPE_LEVEL}
		  , #{TREE_CODE}
		  , #{WH_CELL_CODE}
		  , #{WH_CELL_NAME}
		  , #{CUSTOM_CODE}
		  , #{USE_YN}
		  , #{PABSTOCK_YN}
		  , #{VALID_YN}
		  , #{WH_CELL_BARCODE}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		)
	</insert>
	
	
	<update id="zDevelopPracticeServiceImpl.updateDetail5" parameterType="Map">
		/* zDevelopPracticeServiceImpl.updateDetail5 */
		UPDATE BSA225T_DEV
		   SET WH_CELL_NAME     	= #{WH_CELL_NAME}
		     , CUSTOM_CODE     	= #{CUSTOM_CODE}
		     , USE_YN           			= 	#{USE_YN}
		     , PABSTOCK_YN      		= #{PABSTOCK_YN}
		     , VALID_YN         		= #{VALID_YN}
		     , WH_CELL_BARCODE  	= #{WH_CELL_BARCODE}
		     , UPDATE_DB_TIME   	= GETDATE()
		     , UPDATE_DB_USER   	= #{S_USER_ID}
		 WHERE COMP_CODE    	= #{S_COMP_CODE}
		   AND DIV_CODE     		= #{TYPE_LEVEL}
		   AND WH_CODE      		= #{TREE_CODE}
		   AND WH_CELL_CODE 		= #{WH_CELL_CODE}
	</update>
	
	
	<delete id="zDevelopPracticeServiceImpl.deleteDetail5" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteDetail5 */
		DELETE FROM BSA225T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     	= #{TYPE_LEVEL}
		   AND WH_CODE      	= #{TREE_CODE}
		   AND WH_CELL_CODE 	= #{WH_CELL_CODE}
	</delete>
	<delete id="zDevelopPracticeServiceImpl.deleteAll5" parameterType="Map">
		/* zDevelopPracticeServiceImpl.deleteAll5 */
		DELETE FROM BSA220T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND TREE_CODE    	= #{TREE_CODE}

		DELETE FROM BSA225T_DEV
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     	= #{TYPE_LEVEL}
		   AND WH_CODE      	= #{TREE_CODE}
	</delete>
	
	
	
	
	
	<select id="zDevelopPracticeServiceImpl.selectList7" parameterType="Map" resultType="rMap">
		/* zDevelopPracticeServiceImpl.selectList7 */
			SELECT A.COMP_CODE
				,A.DIV_CODE
				,A.TYPE   AS PRICE_TYPE
				,A.CUSTOM_CODE
				,A.ITEM_CODE
				,B.ITEM_NAME
				,B.SPEC
				,A.ITEM_P
				,A.MONEY_UNIT
				,A.ORDER_UNIT
				,A.APLY_START_DATE
				,A.APLY_END_DATE
				FROM BPR400T_DEV A WITH(NOLOCK)
				LEFT JOIN BPR100T B WITH(NOLOCK) ON A.COMP_CODE = B.COMP_CODE
									AND A.ITEM_CODE = B.ITEM_CODE	
				 INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE	= A.COMP_CODE
		  								   AND C.ITEM_CODE	= A.ITEM_CODE	
				WHERE A.COMP_CODE = #{S_COMP_CODE}
				AND A.DIV_CODE = #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(PRICE_TYPE)">
		   AND A.TYPE        = #{PRICE_TYPE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
		   AND A.ITEM_CODE = #{ITEM_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
		   AND C.ITEM_LEVEL1 = #{ITEM_LEVEL1}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
		   AND C.ITEM_LEVEL2 = #{ITEM_LEVEL2}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
		   AND C.ITEM_LEVEL3 = #{ITEM_LEVEL3}
		</if>
	</select>
	
	
		<insert id="zDevelopPracticeServiceImpl.insertList7" parameterType="Map">
		/* zDevelopPracticeServiceImpl.insertList7 */
		INSERT INTO BPR400T_DEV (
		    COMP_CODE
		  , DIV_CODE
		  , TYPE  
		  , CUSTOM_CODE
		  , ITEM_CODE
		  , MONEY_UNIT
		  , ORDER_UNIT
		  , APLY_START_DATE
		  , INSERT_DB_TIME
		  , INSERT_DB_USER
		  , UPDATE_DB_TIME
		  , UPDATE_DB_USER
		) VALUES (
		    #{COMP_CODE}
		  , #{DIV_CODE}
		  , #{PRICE_TYPE}
		  , #{CUSTOM_CODE}
		  , #{ITEM_CODE}
		  , #{MONEY_UNIT}
		  , #{ORDER_UNIT}
		  , #{APLY_START_DATE}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		)
	</insert>
	
	
	
	<update id="zDevelopPracticeServiceImpl.updateList7" parameterType="Map">
		/* zDevelopPracticeServiceImpl.updateList7 */
		UPDATE BPR400T_DEV
		   SET CUSTOM_CODE               = #{CUSTOM_CODE}
		     , ITEM_P          = #{ITEM_P}
		     , APLY_END_DATE   = #{APLY_END_DATE}
		     , UPDATE_DB_USER  = #{S_USER_ID}
		     , UPDATE_DB_TIME  = GETDATE()
		 WHERE COMP_CODE       = #{S_COMP_CODE}
		   AND DIV_CODE        = #{DIV_CODE}
		   AND ITEM_CODE       = #{ITEM_CODE}
		   AND CUSTOM_CODE     = #{CUSTOM_CODE}
		   AND MONEY_UNIT      = #{MONEY_UNIT}
		    AND ORDER_UNIT      = #{ORDER_UNIT}
		   AND APLY_START_DATE = #{APLY_START_DATE}
	</update>
	
	
	
	
	<delete id="zDevelopPracticeServiceImpl.deleteList7" parameterType="Map">
		/*zDevelopPracticeServiceImpl.deleteList7*/
		DELETE FROM BPR400T_DEV
		 WHERE COMP_CODE       = #{S_COMP_CODE}
		   AND TYPE          = #{PRICE_TYPE}
		   AND DIV_CODE        = #{DIV_CODE}
	</delete>
	
	
</mapper>