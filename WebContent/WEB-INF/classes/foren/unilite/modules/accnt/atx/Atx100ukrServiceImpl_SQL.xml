<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="atx100ukrServiceImpl">
					
	
<select id="atx100ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
	/*atx100ukr.Catx100ukr [fnatx100nq] Query01*/
BEGIN
    SET NOCOUNT    ON
    SET ARITHABORT ON

	/*1. 날짜 포맷 유형 설정*/
    DECLARE @DateFormat         NVARCHAR(01)

    SELECT TOP 1 @DateFormat = SUBSTRING(CODE_NAME, 5, 1)
    FROM   BSA100T WITH (NOLOCK)
    WHERE  COMP_CODE = #{S_COMP_CODE}
    AND    MAIN_CODE = 'B044'
    AND    REF_CODE1 = 'Y'

    SET @DateFormat = ISNULL(@DateFormat, '.')

    SELECT A.COMP_CODE
         , SUBSTRING(A.PUB_DATE, 1, 4) + @DateFormat + 
           SUBSTRING(A.PUB_DATE, 5, 2) + @DateFormat + 
           SUBSTRING(A.PUB_DATE, 7, 2)                          AS PUB_DATE
         , A.PUB_DATE                         AS PUB_DATE_DUMMY
         , A.TX_NUM
         , A.CUSTOM_CODE
         , B.CUSTOM_NAME
         --, (CASE WHEN REPLACE(REPLACE(A.COMPANY_NUM,' ',''),'*','') = ''
         --             THEN ''
         --             ELSE SUBSTRING(A.COMPANY_NUM,1,3) + '-'
         --                + SUBSTRING(A.COMPANY_NUM,4,2) + '-'
         --                + SUBSTRING(A.COMPANY_NUM,6,5)
         --    END)                                               AS COMPANY_NUM
         , A.COMPANY_NUM
         , A.INOUT_DIVI
         , A.PROOF_KIND
         , M2.CODE_NAME                                         AS PROOF_KIND_NM
         , A.SUPPLY_AMT_I
         , A.TAX_AMT_I
         , (A.SUPPLY_AMT_I + A.TAX_AMT_I)                       AS TOT_AMT_I
         , A.BILL_DIVI_CODE
         , A.DIV_CODE
         , SUBSTRING(A.AC_DATE, 1, 4) + @DateFormat + 
           SUBSTRING(A.AC_DATE, 5, 2) + @DateFormat + 
           SUBSTRING(A.AC_DATE, 7, 2)                           AS AC_DATE
         , A.SLIP_NUM
         , A.SLIP_SEQ
         , A.REMARK
         , ISNULL(A.PORT_YN,'')                                 AS PORT_YN
         , ISNULL(A.INPUT_PATH,'')                              AS INPUT_PATH
         , ISNULL(A.INPUT_DIVI,'')                              AS INPUT_DIVI
         , ISNULL(M1.REF_CODE6,'')                              AS PUB_PATH
         , ISNULL(A.CREDIT_CODE,'')                             AS CREDIT_CODE
         , ISNULL(A.REASON_CODE,'')                             AS REASON_CODE
         --, CASE WHEN ISNULL(M2.REF_CODE3, '') = '1' AND ISNULL(M2.REF_CODE1, '') = 'F'
         --            THEN unilite.fnCipherDecrypt(A.CREDIT_NUM, '')
         --       ELSE unilite.fnCipherDecrypt(A.CREDIT_NUM, 'C')
         --  END                                                  AS CREDIT_NUM
         
         
         ,ISNULL(M2.REF_CODE3, '')								AS REF_CODE3
         ,ISNULL(M2.REF_CODE1, '')								AS REF_CODE1
         ,unilite.fnCipherDecrypt(A.CREDIT_NUM,'')				AS CREDIT_NUM
         
         , ISNULL(A.EB_YN, '')                                  AS EB_YN
         , ISNULL(A.MONEY_UNIT,'')                              AS MONEY_UNIT
         , ISNULL(A.EXCHG_RATE_O,0)                             AS EXCHG_RATE_O
         , A.TAXNO_YN
         , CASE WHEN A.INPUT_PATH IN ('79', '80') THEN ISNULL(C.AUTO_SLIP_NUM, '')
                ELSE ''
           END                                                  AS AUTO_SLIP_NUM
         , CASE WHEN ISNULL(C.EX_DATE, '') = '' THEN NULL
                ELSE SUBSTRING(C.EX_DATE, 1, 4) + @DateFormat + 
                     SUBSTRING(C.EX_DATE, 5, 2) + @DateFormat + 
                     SUBSTRING(C.EX_DATE, 7, 2)
           END                                                  AS EX_DATE
         , CASE WHEN ISNULL(C.EX_NUM, 0) = 0 THEN NULL
                ELSE C.EX_NUM
           END                                                  AS EX_NUM
         , ''                                                   AS BIGO
         , C.DEPT_CODE      
         , C.DEPT_NAME     
         , A.INSERT_DB_USER
         , A.INSERT_DB_TIME
         , A.UPDATE_DB_USER
         , A.UPDATE_DB_TIME
         
         , CASE WHEN C.AC_CODE1 = 'E2' THEN C.AC_DATA1
                WHEN C.AC_CODE2 = 'E2' THEN C.AC_DATA2
                WHEN C.AC_CODE3 = 'E2' THEN C.AC_DATA3
                WHEN C.AC_CODE4 = 'E2' THEN C.AC_DATA4
                WHEN C.AC_CODE5 = 'E2' THEN C.AC_DATA5
                WHEN C.AC_CODE6 = 'E2' THEN C.AC_DATA6
           END  AS ORG_ACCNT                  --본계정코드
         , D.ACCNT_NAME AS ORG_ACCNT_NAME    --본계정명
         , CASE WHEN C.AC_CODE1 = 'E3' THEN C.AC_DATA1
                WHEN C.AC_CODE2 = 'E3' THEN C.AC_DATA2
                WHEN C.AC_CODE3 = 'E3' THEN C.AC_DATA3
                WHEN C.AC_CODE4 = 'E3' THEN C.AC_DATA4
                WHEN C.AC_CODE5 = 'E3' THEN C.AC_DATA5
                WHEN C.AC_CODE6 = 'E3' THEN C.AC_DATA6
           END  AS BIZ_GUBUN                  --사업구분
         , C2.AC_NAME AS BIZ_GUBUN_NAME    --사업구분명
         
         , A2.R_CUSTOM_GUBUN --휴폐업여부 관련
         
         , A.CHK_GUBUN    
         , A.ASST_SUPPLY_AMT_I
         , A.ASST_TAX_AMT_I
         , A.ASST_DIVI
         
      FROM            ATX100T A  WITH (NOLOCK)
           LEFT  JOIN BCM100T B  WITH (NOLOCK) ON B.COMP_CODE     = A.COMP_CODE
                                              AND B.CUSTOM_CODE   = A.CUSTOM_CODE
           LEFT  JOIN AGJ210T C  WITH (NOLOCK) ON C.COMP_CODE     = A.COMP_CODE
                                              AND C.AC_DATE       = A.AC_DATE
                                              AND C.SLIP_NUM      = A.SLIP_NUM
                                              AND C.SLIP_SEQ      = A.SLIP_SEQ
                                              AND ISNULL(C.MOD_DIVI,'')=''
           LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = A.COMP_CODE
                                              AND M1.MAIN_CODE    = 'A011'
                                              AND M1.SUB_CODE     = A.INPUT_PATH
           LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE    = A.COMP_CODE
                                              AND M2.MAIN_CODE    = 'A022'
                                              AND M2.SUB_CODE     = A.PROOF_KIND
           LEFT  JOIN ABA400T D WITH (NOLOCK) ON D.COMP_CODE = A.COMP_CODE
                                             AND D.ACCNT = CASE WHEN C.AC_CODE1 = 'E2' THEN C.AC_DATA1
                                                                WHEN C.AC_CODE2 = 'E2' THEN C.AC_DATA2
                                                                WHEN C.AC_CODE3 = 'E2' THEN C.AC_DATA3
                                                                WHEN C.AC_CODE4 = 'E2' THEN C.AC_DATA4
                                                                WHEN C.AC_CODE5 = 'E2' THEN C.AC_DATA5
                                                                WHEN C.AC_CODE6 = 'E2' THEN C.AC_DATA6
                                                           END                                   
           LEFT  JOIN ABA210T C2 WITH (NOLOCK) ON C2.COMP_CODE = A.COMP_CODE
                                              AND C2.AC_CD     = 'E3'
                                              AND C2.AC_DATA = CASE WHEN C.AC_CODE1 = 'E3' THEN C.AC_DATA1
                                                                    WHEN C.AC_CODE2 = 'E3' THEN C.AC_DATA2
                                                                    WHEN C.AC_CODE3 = 'E3' THEN C.AC_DATA3
                                                                    WHEN C.AC_CODE4 = 'E3' THEN C.AC_DATA4
                                                                    WHEN C.AC_CODE5 = 'E3' THEN C.AC_DATA5
                                                                    WHEN C.AC_CODE6 = 'E3' THEN C.AC_DATA6
                                                               END
           LEFT  JOIN ATX101T A2  WITH (NOLOCK) ON A2.COMP_CODE     = A.COMP_CODE
                                               AND A2.CUSTOM_CODE   = A.CUSTOM_CODE
                                               AND A2.COMPANY_NUM   = A.COMPANY_NUM

     WHERE A.COMP_CODE = #{S_COMP_CODE}
       AND A.PUB_DATE &gt;= #{txtFrDate}
       AND A.PUB_DATE &lt;= #{txtToDate}
       <if test="@foren.Ognl@isNotEmpty(txtDivi)">
       AND A.INOUT_DIVI        = #{txtDivi}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtOrgCd)">
       AND A.BILL_DIVI_CODE    = #{txtOrgCd}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtProofKind)">
       AND A.PROOF_KIND        = #{txtProofKind}
       </if>
		<if test="@foren.Ognl@isNotEmpty(txtCustom) and @foren.Ognl@isNotEmpty(txtCustomName)">
			AND A.CUSTOM_CODE = #{txtCustom}
		</if>
		<if test="@foren.Ognl@isNotEmpty(txtCustom) and @foren.Ognl@isEmpty(txtCustomName)">
			AND A.CUSTOM_CODE LIKE #{txtCustom} + '%'
		</if>
		<if test="@foren.Ognl@isEmpty(txtCustom) and @foren.Ognl@isNotEmpty(txtCustomName)">
			AND B.CUSTOM_NAME LIKE '%' + #{txtCustomName} + '%' 
		</if>
       <if test="@foren.Ognl@isNotEmpty(txtCompanyNum)">
       AND A.COMPANY_NUM      = #{txtCompanyNum}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtAcFrDate)">
       AND A.AC_DATE &gt;= #{txtAcFrDate}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtAcToDate)">
       AND A.AC_DATE &lt;= #{txtAcToDate}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtFrSlipNum)">
       AND A.SLIP_NUM  &gt;= #{txtFrSlipNum}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtToSlipNum)">
       AND A.SLIP_NUM  &lt;= #{txtToSlipNum}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtBusyPrsn)">
       AND B.BUSI_PRSN  = #{txtBusyPrsn} 
       </if>
      
    <if test="SorGbn == &quot;1&quot;">   
    
       <if test="@foren.Ognl@isNotEmpty(txtFrAmt)">
       AND A.SUPPLY_AMT_I &gt;= #{txtFrAmt}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtToAmt)">
       AND A.SUPPLY_AMT_I &lt;= #{txtToAmt}
       </if>
       
    </if>
    <if test="SorGbn == &quot;2&quot;">    
    
       <if test="@foren.Ognl@isNotEmpty(txtFrAmt)">  
       AND A.TAX_AMT_I &gt;= #{txtFrAmt}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtToAmt)">
       AND A.TAX_AMT_I &lt;= #{txtToAmt}
       </if>
       
    </if>
       
       
       <if test="@foren.Ognl@isNotEmpty(txtDivCode)">
       AND A.DIV_CODE    = #{txtDivCode}
       </if>
       <if test="@foren.Ognl@isNotEmpty(EbNm)">
       AND A.EB_YN    = #{EbNm}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtPubPath)">
       AND M1.REF_CODE6  = #{txtPubPath}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtRemark)">
       AND A.REMARK   LIKE '%' + #{txtRemark} + '%'
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtInputPath)">
       AND A.INPUT_PATH  = #{txtInputPath}
       </if>
       <if test="@foren.Ognl@isNotEmpty(txtInputDivi)">
       AND A.INPUT_DIVI  = #{txtInputDivi}
       </if>
       
       

    <if test="BillGbn == &quot;1&quot;">  
       AND M2.REF_CODE1 IN ('A', 'D')
       </if>
    <if test="BillGbn == &quot;2&quot;">     
       AND M2.REF_CODE1 = 'B'
       </if>
    <if test="BillGbn == &quot;3&quot;">     
       AND M2.REF_CODE1 = 'C'
       </if>
    <if test="BillGbn == &quot;4&quot;">     
       AND M2.REF_CODE1 = 'E'
       </if>
    <if test="BillGbn == &quot;5&quot;">     
       AND M2.REF_CODE1 = 'F'
       </if>    
       
       
    <if test="ChkDed == &quot;Y&quot;">   
       AND M2.REF_CODE5  = #{ChkDed}
    </if>
    <if test="@foren.Ognl@isNotEmpty(cboReasonCode)">
       AND A.REASON_CODE = #{cboReasonCode}
    </if>
    <if test="@foren.Ognl@isNotEmpty(CHK_GUBUN)">
       AND A.CHK_GUBUN  = #{CHK_GUBUN} 
    </if>
    
    <if test="SortGbn == &quot;1&quot;">  
    ORDER BY A.PUB_DATE, A.COMPANY_NUM, B.CUSTOM_NAME
		</if>
    <if test="SortGbn == &quot;2&quot;">  
    ORDER BY A.PUB_DATE, A.AC_DATE, A.SLIP_NUM, A.SLIP_SEQ
    	</if>
    <if test="SortGbn == &quot;3&quot;">  
    ORDER BY A.COMPANY_NUM, A.PUB_DATE
    	</if>
    
    SET NOCOUNT    OFF
    SET ARITHABORT OFF
END
</select>


<select id="atx100ukrServiceImpl.selectGetTxNum" parameterType="Map" resultType="rMap">
	/*atx100ukr.Catx100ukr Setatx100[fnGetTxNum]*/  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT ISNULL((CASE #{PUB_DATE}                                
	                     WHEN ( SELECT ISNULL(PUB_DATE,'')                                         
	                              FROM ATX100T    WITH (NOLOCK)                                                   
	                             WHERE COMP_CODE  = #{COMP_CODE}                      
	                               AND AC_DATE    = #{AC_DATE}       
	                               AND SLIP_NUM   = #{SLIP_NUM}        
	                               AND SLIP_SEQ   = #{SLIP_SEQ}        
	                               AND INPUT_DIVI = #{INPUT_DIVI} )  
	                          THEN 0                                                               
	                          ELSE MAX(ISNULL(TX_NUM,0))+1                                         
	                 END),1) AS TX_NUM                                                             
	FROM ATX100T     WITH (NOLOCK)                                                                              
	WHERE COMP_CODE = #{COMP_CODE}                                                         
		AND PUB_DATE  = #{PUB_DATE}                 
</select>

<select id="atx100ukrServiceImpl.fnCheckCloseDate" parameterType="Map" resultType="rMap">
	--atx100ukr.Catx100ukr [fnCheckCloseDate] Query01
SELECT TAX_CLOSE_FG
  FROM ABA160T WITH (NOLOCK)
 WHERE COMP_CODE  = #{S_COMP_CODE}
   AND CLOSE_DATE = SUBSTRING(#{PUB_DATE},0,7)     
</select>

<insert id="atx100ukrServiceImpl.insertDetail" parameterType="Map">   

INSERT INTO ATX100T
     ( COMP_CODE
     , PUB_DATE
     , TX_NUM
     , CUSTOM_CODE
     , COMPANY_NUM
     , INOUT_DIVI
     , PROOF_KIND
     , SUPPLY_AMT_I
     , TAX_AMT_I
     , BILL_DIVI_CODE
     , DIV_CODE
     , AC_DATE
     , SLIP_NUM
     , SLIP_SEQ
     , REMARK
     , PORT_YN
     , INPUT_PATH
     , INPUT_DIVI
<if test="@foren.Ognl@isNotEmpty(CREDIT_CODE)">     
     , CREDIT_CODE
	</if>
<if test="@foren.Ognl@isNotEmpty(REASON_CODE)">  
     , REASON_CODE
     </if>
<if test="@foren.Ognl@isNotEmpty(CREDIT_NUM)">  
     , CREDIT_NUM
     </if>
     
     , EB_YN
     , MONEY_UNIT
     , EXCHG_RATE_O
     , TAXNO_YN
     , ASST_SUPPLY_AMT_I
     , ASST_TAX_AMT_I
     , ASST_DIVI
   
     , INSERT_DB_USER
     , INSERT_DB_TIME
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     ) 
VALUES
     ( #{COMP_CODE}
     , #{PUB_DATE}
     , #{TX_NUM}
     , #{CUSTOM_CODE}
     , #{COMPANY_NUM}
     , #{INOUT_DIVI}
     , #{PROOF_KIND}
     , #{SUPPLY_AMT_I}
     , #{TAX_AMT_I}
     , #{BILL_DIVI_CODE}
     , #{DIV_CODE}
     , #{AC_DATE}
     , #{SLIP_NUM}
     , #{SLIP_SEQ}
     , #{REMARK}
     , #{PORT_YN}
     , #{INPUT_PATH}
     , #{INPUT_DIVI}
	
<if test="@foren.Ognl@isNotEmpty(CREDIT_CODE)">       
     , #{CREDIT_CODE}
	</if>
<if test="@foren.Ognl@isNotEmpty(REASON_CODE)">
     , #{REASON_CODE}
	</if>
<if test="@foren.Ognl@isNotEmpty(CREDIT_NUM)">
     , uniLITE.fnCipherEncrypt(#{CREDIT_NUM},'')
	</if>
       
     , #{EB_YN}
     , #{MONEY_UNIT}
     , #{EXCHG_RATE_O}
     , #{TAXNO_YN}
     , #{ASST_SUPPLY_AMT_I}
     , #{ASST_TAX_AMT_I}
     , #{ASST_DIVI}

     , #{S_USER_ID}
     , GETDATE()
     , #{S_USER_ID}
     , GETDATE()
     )
</insert>
	
<update id="atx100ukrServiceImpl.updateDetail" parameterType="Map">		
	/*atx100ukr.Catx100ukr[fnatx100set] Query02*/
UPDATE ATX100T
   SET PUB_DATE       	= #{PUB_DATE}
     , TX_NUM         	= #{TX_NUM}
     , CUSTOM_CODE    	= #{CUSTOM_CODE}
     , COMPANY_NUM    	= #{COMPANY_NUM}
     , INOUT_DIVI     	= #{INOUT_DIVI}
     , PROOF_KIND     	= #{PROOF_KIND}
     , SUPPLY_AMT_I   	= #{SUPPLY_AMT_I}
     , TAX_AMT_I      	= #{TAX_AMT_I}
     , BILL_DIVI_CODE 	= #{BILL_DIVI_CODE}
     , DIV_CODE       	= #{DIV_CODE}
     , REMARK         	= #{REMARK}
     , PORT_YN        	= #{PORT_YN}
     , INPUT_PATH     	= #{INPUT_PATH}
     , CREDIT_CODE    	= #{CREDIT_CODE}
     , REASON_CODE    	= #{REASON_CODE}
     , CREDIT_NUM     	= uniLITE.fnCipherEncrypt(#{CREDIT_NUM},'')
     , EB_YN          	= #{EB_YN}
     , MONEY_UNIT    	= #{MONEY_UNIT}
     , EXCHG_RATE_O   	= #{EXCHG_RATE_O}
     , TAXNO_YN      	= #{TAXNO_YN}
     , ASST_SUPPLY_AMT_I= #{ASST_SUPPLY_AMT_I}
     , ASST_TAX_AMT_I	= #{ASST_TAX_AMT_I}
     , ASST_DIVI		= #{ASST_DIVI}
     , UPDATE_DB_USER 	= #{S_USER_ID}
     , UPDATE_DB_TIME 	= GETDATE()
     
 WHERE COMP_CODE      	= #{COMP_CODE}
   AND AC_DATE        	= #{AC_DATE}
   AND SLIP_NUM       	= #{SLIP_NUM}
   AND SLIP_SEQ       	= #{SLIP_SEQ}
   AND INPUT_DIVI     	= #{INPUT_DIVI}
  
</update>

<update id="atx100ukrServiceImpl.ReflectinSlip" parameterType="Map">	
/*atx100ukr.Catx100ukr[fnReflectinSlip] Query01*/
BEGIN
    SET NOCOUNT OFF
    SET ARITHABORT OFF

    DECLARE @COMP_CODE        NVARCHAR(08)      /* 법인코드*/
          , @USER_ID          NVARCHAR(100)     /* 사용자ID*/
                                                
          , @PUB_DATE_NEW     NVARCHAR(08)      /* 계산서일    */
          , @PUB_DATE         NVARCHAR(08)      /* 계산서일    */
          
          , @AC_DATE          NVARCHAR(08)      /* 회계전표일자*/
          , @SLIP_NUM         NUMERIC(07, 0)    /* 회계전표번호*/
          , @SLIP_SEQ         NUMERIC(05, 0)    /* 회계전표순번*/
                                                
          , @EX_DATE          NVARCHAR(08)      /* 결의전표일자*/
          , @EX_NUM           NUMERIC(07, 0)    /* 결의전표번호*/
          , @EX_SEQ           NUMERIC(05, 0)    /* 결의전표순번*/
                                                
          , @DIV_CODE         NVARCHAR(08)      /* 귀속사업장   */
          , @BILL_DIV_CODE    NVARCHAR(08)      /* 신고사업장코드 */
          , @PROOF_KIND       NVARCHAR(02)      /* 증빙유형    */
          , @PROOF_KIND_NM    NVARCHAR(30)      /* 증빙유형명   */
          , @CREDIT_NUM       NVARCHAR(20)      /* 신용카드번호  */
          , @REASON_CODE      NVARCHAR(02)      /* 불공제사유코드 */
          , @SUPPLY_AMT_I     NVARCHAR(18)      /* 공급가액    */
          , @TAX_AMT_I        NVARCHAR(18)      /* 세액      */
          , @EB_YN            NVARCHAR(01)      /* 전자발행여부  */
          , @EB_YN_NM         NVARCHAR(30)      /* 전자발행여부 명*/

    SET @COMP_CODE     = #{COMP_CODE}
    SET @USER_ID       = #{S_USER_ID}

    SET @AC_DATE       = #{AC_DATE}
    SET @SLIP_NUM      = #{SLIP_NUM}
    SET @SLIP_SEQ      = #{SLIP_SEQ}

    SET @DIV_CODE      = #{DIV_CODE}
    SET @BILL_DIV_CODE = #{BILL_DIVI_CODE}
    SET @PROOF_KIND    = #{PROOF_KIND}
    SET @PROOF_KIND_NM = #{PROOF_KIND_NM}
    SET @CREDIT_NUM    = #{CREDIT_NUM}
    SET @REASON_CODE   = #{REASON_CODE}
    SET @SUPPLY_AMT_I  = #{SUPPLY_AMT_I}
    SET @TAX_AMT_I     = #{TAX_AMT_I}
    SET @PUB_DATE_NEW  = #{PUB_DATE}
    SET @PUB_DATE      = #{PUB_DATE_DUMMY}
    SET @EB_YN         = #{EB_YN}

    /*-----------------------------------------------------*/
    /* 0. 전자발행여부 명칭 참조하기(A149)                 */
    /*-----------------------------------------------------*/
    SELECT @EB_YN_NM = CODE_NAME
      FROM BSA100T  WITH (NOLOCK)
     WHERE COMP_CODE = @COMP_CODE
       AND MAIN_CODE = 'A149'
       AND SUB_CODE  = @EB_YN

    SET @EB_YN_NM = ISNULL(@EB_YN_NM, '')

    /*-----------------------------------------------------*/
    /* 1. 회계전표로부터 결의전표 정보 알아내기            */
    /*-----------------------------------------------------*/
    SELECT @EX_DATE = EX_DATE
         , @EX_NUM  = EX_NUM
         , @EX_SEQ  = EX_SEQ
      FROM AGJ210T  WITH (NOLOCK)
     WHERE COMP_CODE = @COMP_CODE
       AND AC_DATE   = @AC_DATE
       AND SLIP_NUM  = @SLIP_NUM
       AND SLIP_SEQ  = @SLIP_SEQ
       AND (MOD_DIVI IS NULL OR MOD_DIVI = '')

    SET @EX_DATE  = ISNULL(@EX_DATE, '')
    SET @EX_NUM   = ISNULL(@EX_NUM, 0)
    SET @EX_SEQ   = ISNULL(@EX_SEQ, 0)
	
    SET @AC_DATE  = ISNULL(@AC_DATE, '')
    SET @SLIP_NUM = ISNULL(@SLIP_NUM, 0)
    SET @SLIP_SEQ = ISNULL(@SLIP_SEQ, 0)
	
    /*------------------------------------------------------*/
    /* 2. 결의전표 정보 UPDATE                              */
    /*------------------------------------------------------*/
    IF ( @EX_DATE != '' )
    BEGIN
    /*------------------------------------------------------*/
    /* 3.5. 부가세 조정내역을 반영할 전표 생성              */
    /*------------------------------------------------------*/
        UPDATE AGJ110T
           SET BILL_DIV_CODE = @BILL_DIV_CODE
             , PROOF_KIND    = @PROOF_KIND
             , CREDIT_NUM    = uniLITE.fnCipherEncrypt(@CREDIT_NUM, '')
             , REASON_CODE   = @REASON_CODE
             , ASST_SUPPLY_AMT_I = #{ASST_SUPPLY_AMT_I}
             , ASST_TAX_AMT_I= #{ASST_TAX_AMT_I}
             , ASST_DIVI	 = #{ASST_DIVI}
             , AC_DATA1      = CASE AC_CODE1 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA1
                                END
             , AC_DATA2      = CASE AC_CODE2 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA2
                                END
             , AC_DATA3      = CASE AC_CODE3 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA3
                                END
             , AC_DATA4      = CASE AC_CODE4 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA4
                                END
             , AC_DATA5      = CASE AC_CODE5 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA5
                                END
             , AC_DATA6      = CASE AC_CODE6 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA6
                                END
             , AC_DATA_NAME1 = CASE AC_CODE1 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME1
                                END
             , AC_DATA_NAME2 = CASE AC_CODE2 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME2
                                END
             , AC_DATA_NAME3 = CASE AC_CODE3 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME3
                                END
             , AC_DATA_NAME4 = CASE AC_CODE4 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME4
                                END
             , AC_DATA_NAME5 = CASE AC_CODE5 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME5
                                END
             , AC_DATA_NAME6 = CASE AC_CODE6 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME6
                                END
         WHERE COMP_CODE = @COMP_CODE
           AND EX_DATE   = @EX_DATE
           AND EX_NUM    = @EX_NUM
           AND EX_SEQ    = @EX_SEQ
           AND (MOD_DIVI IS NULL OR MOD_DIVI = '')
    END

    /*-----------------------------------------------------*/
    /* 3. 회계전표 정보 UPDATE                             */
    /*-----------------------------------------------------*/
    IF ( @AC_DATE != '' )
    BEGIN
    /*------------------------------------------------------*/
    /* 3.4. 부가세 조정내역을 반영할 전표 생성              */
    /*------------------------------------------------------*/
        UPDATE AGJ210T
           SET BILL_DIV_CODE = @BILL_DIV_CODE
             , PROOF_KIND    = @PROOF_KIND
             , CREDIT_NUM    = uniLITE.fnCipherEncrypt(@CREDIT_NUM, '')
             , REASON_CODE   = @REASON_CODE
             , ASST_SUPPLY_AMT_I = #{ASST_SUPPLY_AMT_I}
             , ASST_TAX_AMT_I= #{ASST_TAX_AMT_I}
             , ASST_DIVI	 = #{ASST_DIVI}
             , AC_DATA1      = CASE AC_CODE1 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA1
                                END
             , AC_DATA2      = CASE AC_CODE2 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA2
                                END
             , AC_DATA3      = CASE AC_CODE3 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA3
                                END
             , AC_DATA4      = CASE AC_CODE4 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA4
                                END
             , AC_DATA5      = CASE AC_CODE5 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA5
                                END
             , AC_DATA6      = CASE AC_CODE6 WHEN 'I1' THEN @SUPPLY_AMT_I
                                             WHEN 'I3' THEN @PUB_DATE_NEW
                                             WHEN 'I5' THEN @PROOF_KIND
                                             WHEN 'I6' THEN @TAX_AMT_I
                                             WHEN 'I7' THEN @EB_YN
                                             ELSE AC_DATA6
                                END
             , AC_DATA_NAME1 = CASE AC_CODE1 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME1
                                END
             , AC_DATA_NAME2 = CASE AC_CODE2 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME2
                                END
             , AC_DATA_NAME3 = CASE AC_CODE3 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME3
                                END
             , AC_DATA_NAME4 = CASE AC_CODE4 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME4
                                END
             , AC_DATA_NAME5 = CASE AC_CODE5 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME5
                                END
             , AC_DATA_NAME6 = CASE AC_CODE6 WHEN 'I5' THEN @PROOF_KIND_NM
                                             WHEN 'I7' THEN @EB_YN_NM
                                             ELSE AC_DATA_NAME6
                                END
         WHERE COMP_CODE = @COMP_CODE
           AND AC_DATE   = @AC_DATE
           AND SLIP_NUM  = @SLIP_NUM
           AND SLIP_SEQ  = @SLIP_SEQ
           AND (MOD_DIVI IS NULL OR MOD_DIVI = '')
    END

    SET ARITHABORT ON
    SET NOCOUNT ON
END

</update>


<update id="atx100ukrServiceImpl.deleteDetail" parameterType="Map">
	/*atx100ukr.Catx100ukr[fnatx100set] Query01*/
DELETE FROM ATX100T 
 WHERE COMP_CODE  = #{COMP_CODE}
   AND AC_DATE    = #{AC_DATE}
   AND SLIP_NUM   = #{SLIP_NUM}
   AND SLIP_SEQ   = #{SLIP_SEQ}
   AND INPUT_DIVI = #{INPUT_DIVI}
</update>
<select id="atx100ukrServiceImpl.getProofKind" parameterType="Map" resultType="comboItem">  
/*UBsaExKrv.CBsaExSKr[fnRecordList] Query25*/              
SELECT SUB_CODE AS 'value'                         
     , CODE_NAME AS 'text'
	 , '' AS search
	 , '' AS 'option'
  FROM BSA100T WITH (NOLOCK)             
 WHERE COMP_CODE = #{S_COMP_CODE}   
   AND MAIN_CODE = 'A022'
   AND SUB_CODE != '$'      
   <if test="@foren.Ognl@isNotEmpty(txtDivi)">             
		AND REF_CODE3 = #{txtDivi}               
   </if>
 ORDER BY SORT_SEQ, SUB_CODE  
</select>	
				
<select id="atx100ukrServiceImpl.getLinkID" parameterType="Map" resultType="rMap">
	/*atx100skr.Catx100ukr [fnatx100nq] QUERY04*/
SELECT  MAX(PAY_ID) PAY_ID, MAX(IN_ID) IN_ID
FROM    (
        SELECT  CASE WHEN SUB_CODE = '5' THEN CODE_NAME ELSE '' END    AS PAY_ID      /*지출결의등록 프로그램ID*/
              , CASE WHEN SUB_CODE = '6' THEN CODE_NAME ELSE '' END    AS IN_ID       /*수입결의등록 프로그램ID*/
        FROM    BSA100T WITH (NOLOCK)
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     MAIN_CODE   = N'A125'
        AND     SUB_CODE   IN ('5', '6')
        ) T
</select>
<select id="atx100ukrServiceImpl.getPubPath" parameterType="Map" resultType="rMap">
	/*atx100ukr.Catx100ukr [fnGetPubPath] Query01*/
	SELECT ISNULL(A.REF_CODE6, '') AS PUB_PATH
		FROM   BSA100T   A  WITH (NOLOCK)
		WHERE  A.COMP_CODE      = #{COMP_CODE}
		AND    A.MAIN_CODE      = N'A011'
		AND    A.SUB_CODE       = #{INPUT_PATH}
</select>

<update id="spUspAccntAtx100tukrFnChkAmt" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ATX100TUKR_fnChkAmt (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{PUB_DATE_FR,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{PUB_DATE_TO,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  
</mapper>