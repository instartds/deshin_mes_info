<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="abh200ukrServiceImpl">
    <select id="abh200ukrServiceImpl.fnGetMainAccount" parameterType="Map" resultType="rMap">
        --abh200ukr.htm[fnGetMainAccount] Query01
        SELECT TOP 1
               ISNULL(SAVE_CODE, '')    AS SAVE_CODE
             , ISNULL(SAVE_NAME, '')    AS SAVE_NAME
             , ISNULL(uniLITE.fnCipherDecrypt(BANK_ACCOUNT, 'B'),'') AS BANK_ACCOUNT
        FROM   AFS100T WITH (NOLOCK)
        WHERE  COMP_CODE    = #{S_COMP_CODE}
        AND    MAIN_SAVE_YN = 'Y'
    </select>
<select id="abh200ukrServiceImpl.selectRef1" parameterType="Map" resultType="rMap">
SELECT 
       A.COMP_CODE
     , A.AGREE_YN
     , A.SEND_NUM
     , A.PAY_METH
     , A.SEND_DATE
     , A.PAY_CODE
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN M1.SAVE_NAME
            WHEN ISNULL(PAY_METH,'') = '20' THEN M2.PURCHASE_CARD_NAME
            ELSE ''
       END                                                          AS PAY_NAME
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
            WHEN ISNULL(PAY_METH,'') = '20' THEN uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
            ELSE ''
       END                                                          AS BANK_ACCOUNT
    
     , SUM(ISNULL(B.J_AMT_I, 0))    AS TOT_AMT_I
     , A.EX_DATE  
     , A.EX_NUM   
     , ISNULL(A.AGREE_YN,'1')       AS AGREE_YN
     , A.AC_DATE  
     , A.SLIP_NUM 
FROM               ABH200T   A  WITH (NOLOCK)
        INNER JOIN ABH210T   B  WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                             AND B.SEND_NUM  = A.SEND_NUM
      
        LEFT  JOIN AFS100T   M1 WITH (NOLOCK) ON M1.COMP_CODE         = A.COMP_CODE
                                             AND M1.SAVE_CODE         = A.PAY_CODE
        LEFT  JOIN AFS200T   M2 WITH (NOLOCK) ON M2.COMP_CODE         = A.COMP_CODE
                                             AND M2.PURCHASE_CARD_NUM = A.PAY_CODE

WHERE  A.COMP_CODE     = #{S_COMP_CODE}
  AND  A.SEND_DATE &gt;= #{SEND_DATE_FR}
  AND  A.SEND_DATE &lt;= #{SEND_DATE_TO}
  
  
<if test="@foren.Ognl@isNotEmpty(PAY_METH)">    
  AND    A.PAY_METH   = #{PAY_METH}          
</if>
<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">  
    AND    A.PAY_CODE   = #{PAY_CODE} 
</if>
<if test="@foren.Ognl@isNotEmpty(AC_DATE)">  
    AND    A.AC_DATE    = #{AC_DATE}  
</if>
<if test="@foren.Ognl@isNotEmpty(SLIP_NUM)">  
    AND    A.SLIP_NUM   = #{SLIP_NUM}
</if>
<if test="@foren.Ognl@isNotEmpty(EX_DATE)">  
    AND    A.EX_DATE    = #{EX_DATE}
</if>
<if test="@foren.Ognl@isNotEmpty(EX_NUM)">  
    AND    A.EX_NUM     = #{EX_NUM}
</if>
<if test="@foren.Ognl@isNotEmpty(AGREE_YN)">  
    AND    ISNULL(A.AGREE_YN,'1')   = #{AGREE_YN}
</if>
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">                    
    AND    (CASE WHEN ISNULL(A.PAY_METH,'') = '10' THEN M1.DIV_CODE
                 WHEN ISNULL(A.PAY_METH,'') = '20' THEN M2.DIV_CODE
                 ELSE ''
            END) IN 
    <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
        #{item}
    </foreach>                                  
</if>    
        
        
           
        
GROUP  BY A.COMP_CODE,A.AGREE_YN, A.SEND_NUM, A.SEND_DATE, A.PAY_METH, A.PAY_CODE, A.EX_DATE, A.EX_NUM, A.AGREE_YN
        , A.AC_DATE, A.SLIP_NUM, M1.SAVE_NAME, M2.PURCHASE_CARD_NAME, uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')  
        , uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')   
       
       
ORDER  BY A.COMP_CODE, A.SEND_NUM
    
    
</select>   
    
 <select id="abh200ukrServiceImpl.selectCodeName" parameterType="Map" resultType="rMap">
 	SELECT  CODE_NAME AS PAY_METH_NAME 
 			FROM uniLITE.BSA100T
 	WHERE 	COMP_CODE=#{S_COMP_CODE} 
	 	AND MAIN_CODE= 'A101' 
	 	AND SUB_CODE=#{PAY_METH}    
 </select>  
    
<select id="abh200ukrServiceImpl.selectMaster" parameterType="Map" resultType="rMap">
    SELECT 
       A.COMP_CODE
     , A.SEND_NUM
     , A.PAY_METH
     , A.SEND_DATE
     , A.PAY_CODE
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN M1.SAVE_NAME
            WHEN ISNULL(PAY_METH,'') = '20' THEN M2.PURCHASE_CARD_NAME
            ELSE ''
       END                                                          AS PAY_NAME
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
            WHEN ISNULL(PAY_METH,'') = '20' THEN uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
            ELSE ''
       END                                                          AS BANK_ACCOUNT
    
     , SUM(ISNULL(B.J_AMT_I, 0))    AS TOT_AMT_I
     ,A.EX_DATE
     ,A.EX_NUM
FROM               ABH200T   A  WITH (NOLOCK)
        INNER JOIN ABH210T   B  WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                             AND B.SEND_NUM  = A.SEND_NUM
      
        LEFT  JOIN AFS100T   M1 WITH (NOLOCK) ON M1.COMP_CODE         = A.COMP_CODE
                                             AND M1.SAVE_CODE         = A.PAY_CODE
        LEFT  JOIN AFS200T   M2 WITH (NOLOCK) ON M2.COMP_CODE         = A.COMP_CODE
                                             AND M2.PURCHASE_CARD_NUM = A.PAY_CODE

WHERE  A.COMP_CODE     = #{S_COMP_CODE}
  AND  A.SEND_NUM      = #{SEND_NUM}
  
GROUP BY  A.COMP_CODE
    , A.SEND_NUM
    , A.PAY_METH
    , A.SEND_DATE
    , A.PAY_CODE
    , M1.SAVE_NAME
    , M2.PURCHASE_CARD_NAME
    , uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
    , uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
    ,A.EX_DATE
    ,A.EX_NUM

</select>

<insert id="abh200ukrServiceImpl.insertMaster" parameterType="Map">     
    INSERT INTO ABH200T  
(                    
    COMP_CODE
    ,SEND_NUM
    ,SEND_DATE
    ,PAY_METH 
    ,PAY_CODE 

   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
)          
VALUES (             
    #{S_COMP_CODE}
   ,#{KEY_NUMBER} 
   ,#{SEND_DATE}
   ,#{PAY_METH} 
   ,#{PAY_CODE} 
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()      
)
</insert>
    
<update id="abh200ukrServiceImpl.updateMaster" parameterType="Map"> 
    UPDATE ABH200T
        SET   
            SEND_DATE       = #{SEND_DATE}
           ,PAY_METH        = #{PAY_METH}  
           ,PAY_CODE        = #{PAY_CODE}
           ,UPDATE_DB_USER = #{S_USER_ID}
           ,UPDATE_DB_TIME = GETDATE()    
        
        WHERE COMP_CODE     = #{S_COMP_CODE}
          AND SEND_NUM      = #{SEND_NUM}

          
    
</update>

<update id="abh200ukrServiceImpl.deleteMaster" parameterType="Map">
    DELETE FROM ABH200T 
         WHERE COMP_CODE        = #{S_COMP_CODE}
           AND SEND_NUM         = #{SEND_NUM}
    
</update>
    
    
    
<select id="abh200ukrServiceImpl.masterDeleteCheck" parameterType="Map" resultType="rMap">
    SELECT * FROM ABH210T  WITH (NOLOCK)
    WHERE COMP_CODE = #{S_COMP_CODE}
      AND SEND_NUM = #{SEND_NUM}
</select>

    
                    
<select id="abh200ukrServiceImpl.selectDetail" parameterType="Map" resultType="rMap">
    
<if test="SEND_NUM == &quot;&quot;">
    SELECT 
        A.COMP_CODE
        ,D.AGREE_YN
        ,A.PRE_DATE
        ,A.PAY_CUSTOM_CODE
        
        ,E.CUSTOM_NAME      AS PAY_CUSTOM_NAME
        ,E.COMPANY_NUM
        ,'N'                AS EX_YN
        ,A.SET_METH
        ,A.REMARK           
        ,A.MONEY_UNIT
        ,A.J_AMT_I + A.INC_AMT_I + A.LOC_AMT_I AS REAL_AMT_I --지급액
        ,A.INC_AMT_I
        ,A.LOC_AMT_I
        ,A.J_AMT_I  -- 실지급액
        ,A.EXP_DATE
        ,'N'                AS SEND_YN
        ,'N'                AS RETURN_YN
        ,''                 AS STATE_NUM
        ,A.ORG_AC_DATE
        ,A.ORG_SLIP_NUM
        ,A.ORG_SLIP_SEQ
        ,A.PEND_CODE
        ,A.ACCNT
        ,G.ACCNT_NAME
        
        ,A.BANK_CODE
        ,F.CUSTOM_NAME      AS BANK_NAME
        ,uniLITE.fnCipherDecrypt(A.ACCOUNT_NUM,'')      AS  BANK_ACCOUNT 
        ,A.BANKBOOK_NAME
    
        ,''                 AS RCPT_NAME
        ,''                 AS CMS_TRANS_YN
        ,''                 AS RCPT_RESULT_MSG
        ,''                 AS RCPT_STATE_NUM
        ,D.COMP_CODE   
        ,D.ACCNT       
        ,D.ORG_AC_DATE 
        ,D.ORG_SLIP_NUM
        ,D.ORG_SLIP_SEQ
        ,D.SEQ
    
    
    
    FROM                ABH220T A WITH(NOLOCK)
            LEFT  JOIN  AGB300T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                              AND B.ACCNT        = A.ACCNT
                                              AND B.ORG_AC_DATE  = A.ORG_AC_DATE
                                              AND B.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                                              AND B.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
        --  INNER JOIN  T_GWIF  C WITH(NOLOCK) ON C.GWIF_KEY1    = A.COMP_CODE
        --                                    AND C.GWIF_KEY2    = 'abh220ukr'
        --                                    AND C.GWIF_KEY3    = A.CONF_SEND_NUM
            LEFT  JOIN  ABH210T D WITH(NOLOCK) ON D.COMP_CODE    = A.COMP_CODE
                                              AND D.ACCNT        = A.ACCNT
                                              AND D.ORG_AC_DATE  = A.ORG_AC_DATE 
                                              AND D.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                                              AND D.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
    
            LEFT  JOIN  BCM100T E WITH(NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
                                              AND E.CUSTOM_CODE = A.PAY_CUSTOM_CODE  
    
            LEFT  JOIN  BCM100T F WITH(NOLOCK) ON F.COMP_CODE   = A.COMP_CODE
                                              AND F.CUSTOM_CODE = A.BANK_CODE
                                              AND F.CUSTOM_TYPE = '4' 
            LEFT  JOIN  ABA400T G WITH(NOLOCK) ON G.COMP_CODE   = A.COMP_CODE
                                              AND G.ACCNT       = A.ACCNT   
    WHERE A.COMP_CODE     = #{S_COMP_CODE}
      AND A.ORG_AC_DATE &gt;= #{ORG_AC_DATE_FR}
      AND A.ORG_AC_DATE &lt;= #{ORG_AC_DATE_TO}
    
      AND A.CONFIRM_YN    = 'Y'
      AND A.DOC_STATUS     = '50'
      AND D.COMP_CODE    IS NULL
      AND D.ACCNT        IS NULL 
      AND D.ORG_AC_DATE  IS NULL
      AND D.ORG_SLIP_NUM IS NULL
      AND D.ORG_SLIP_SEQ IS NULL                       
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">                    
        AND A.DIV_CODE IN
        <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
            #{item}
        </foreach>                                  
    </if>
    
    <if test="@foren.Ognl@isNotEmpty(PRE_DATE_FR)"> 
        AND A.PRE_DATE      &gt;= #{PRE_DATE_FR}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PRE_DATE_TO)">
        AND A.PRE_DATE      &lt;= #{PRE_DATE_TO}
    </if>
    
    
    
    <if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">  
        AND A.ACCNT = #{ACCNT_CODE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(BUSINESS_TYPE)">   
        AND E.BUSINESS_TYPE = #{BUSINESS_TYPE}
    </if>
    
    <if test="@foren.Ognl@isNotEmpty(PAY_CUSTOM_CODE_FR)">  
        AND A.PAY_CUSTOM_CODE   &gt;= #{PAY_CUSTOM_CODE_FR}
    </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_CUSTOM_CODE_TO)">  
        AND A.PAY_CUSTOM_CODE   &lt;= #{PAY_CUSTOM_CODE_TO}
    </if>

</if>
<if test="SEND_NUM != &quot;&quot;">
    SELECT 
        A.COMP_CODE
        ,A.AGREE_YN
        ,B.PRE_DATE
        ,A.PAY_CUSTOM_CODE
        ,C.CUSTOM_NAME      AS PAY_CUSTOM_NAME
        ,C.COMPANY_NUM
        ,'Y'    AS EX_YN
        ,B.SET_METH
        ,B.REMARK   
        ,A.MONEY_UNIT
        ,A.J_AMT_I + A.INC_AMT_I + A.LOC_AMT_I AS REAL_AMT_I --지급액
        ,A.INC_AMT_I
        ,A.LOC_AMT_I
        ,A.J_AMT_I -- 실지급액
        ,A.EXP_DATE
        ,A.SEND_YN
        ,A.RETURN_YN
        ,A.REASON_MSG
        ,A.STATE_NUM
        ,A.ORG_AC_DATE
        ,A.ORG_SLIP_NUM
        ,A.ORG_SLIP_SEQ
        ,A.PEND_CODE
        ,A.ACCNT
        ,E.ACCNT_NAME
        ,A.BANK_CODE
        ,D.CUSTOM_NAME      AS BANK_NAME
        ,uniLITE.fnCipherDecrypt(A.ACCOUNT_NUM,'')      AS BANK_ACCOUNT
        ,A.BANKBOOK_NAME
        ,A.RCPT_NAME
        ,A.CMS_TRANS_YN
        ,A.RCPT_RESULT_MSG
        ,A.RCPT_STATE_NUM
        ,A.EX_DATE
        ,A.EX_NUM
        ,A.SEQ
    
    
    FROM      ABH210T A WITH(NOLOCK) 
    LEFT JOIN ABH220T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                    AND B.ACCNT        = A.ACCNT
                                    AND B.ORG_AC_DATE  = A.ORG_AC_DATE 
                                    AND B.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                                    AND B.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
    LEFT JOIN BCM100T C WITH(NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                    AND C.CUSTOM_CODE = A.PAY_CUSTOM_CODE   
    LEFT JOIN BCM100T D WITH(NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
                                    AND D.CUSTOM_CODE = A.BANK_CODE
                                    AND D.CUSTOM_TYPE = '4' 
    LEFT JOIN ABA400T E WITH(NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
                                    AND E.ACCNT       = A.ACCNT 
                                        
                                        
    WHERE A.COMP_CODE = #{S_COMP_CODE}
      AND A.SEND_NUM = #{SEND_NUM}      
</if>
</select>

<insert id="abh200ukrServiceImpl.insertDetail" parameterType="Map">     
INSERT INTO ABH210T
    (
        COMP_CODE
       ,SEND_NUM
       ,ACCNT
       ,ORG_AC_DATE
       ,ORG_SLIP_NUM
       ,ORG_SLIP_SEQ
       ,SEQ
       ,DIV_CODE
       ,PEND_CODE
       ,PAY_CUSTOM_CODE
       ,J_AMT_I
       ,INC_AMT_I
       ,LOC_AMT_I
       ,PURCHASE_CARD_NUM
       ,EXP_DATE
       ,BANK_CODE
       ,ACCOUNT_NUM
       ,BANKBOOK_NAME
       ,AGREE_YN
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
       ,UPDATE_DB_USER
       ,UPDATE_DB_TIME

    )
VALUES
    (
        #{S_COMP_CODE}
       ,#{SEND_NUM}
       ,#{ACCNT}
       ,#{ORG_AC_DATE}
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
       ,(SELECT ISNULL(MAX(SEQ),0) + 1  
           FROM ABH210T 
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND SEND_NUM  = #{SEND_NUM}
        )
       ,#{S_DIV_CODE}
       ,#{PEND_CODE}
       ,#{PAY_CUSTOM_CODE}
       ,#{J_AMT_I}
       ,#{INC_AMT_I}
       ,#{LOC_AMT_I}
       ,#{PURCHASE_CARD_NUM}
       ,#{EXP_DATE}
       ,#{BANK_CODE}
       ,unilite.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
       ,#{BANKBOOK_NAME}
       ,'N'
       ,#{S_USER_ID}
       ,GETDATE()
       ,#{S_USER_ID}
       ,GETDATE()
           
           
    )
                      
</insert>
    
<update id="abh200ukrServiceImpl.updateDetail" parameterType="Map"> 

                   
    
</update>

<update id="abh200ukrServiceImpl.deleteDetail" parameterType="Map">
    DELETE FROM ABH210T 
         WHERE COMP_CODE        = #{S_COMP_CODE}
          AND SEND_NUM          = #{SEND_NUM}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = #{ORG_AC_DATE}
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}
      
  
</update>










<select id="abh200ukrServiceImpl.fnCheckQ" parameterType="Map" resultType="rMap">
SELECT * FROM ABH220T A WITH(NOLOCK)
    INNER JOIN T_GWIF  B WITH(NOLOCK) ON B.GWIF_KEY1 = A.COMP_CODE
                                    AND B.GWIF_KEY2 = '1'
                                    AND B.GWIF_KEY3 = A.SEND_NUM

    WHERE COMP_CODE             = #{S_COMP_CODE}
          AND ACCNT             = #{ACCNT}
          AND ORG_AC_DATE       = #{ORG_AC_DATE}
          AND ORG_SLIP_NUM      = #{ORG_SLIP_NUM}
          AND ORG_SLIP_SEQ      = #{ORG_SLIP_SEQ}
          AND SEQ               = #{SEQ}

</select>



<update id="abh200ukrServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
    {call SP_GetAutoNumComp (
        #{COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{DIV_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{TABLE_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{PREFIX, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{BASIS_DATE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{AUTO_TYPE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_NUMBER, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}

</update>


<update id="spUspAccntAbh200ukrFnBanknameQuery" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameQuery (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  
 
<update id="spUspAccntAbh200ukrFnabh200create" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnabh200create (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAbh200ukrFnBankNameresult" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  
 
 
<insert id="abh200ukrServiceImpl.insertLogDetail" parameterType="Map">      
    INSERT INTO L_ABH200T
           (KEY_VALUE          
           ,OPR_FLAG  
           ,COMP_CODE
           ,SEND_NUM        
           ,INSERT_DB_USER
           ,INSERT_DB_TIME        
           )
     VALUES
     (      #{KEY_VALUE}          
           ,#{OPR_FLAG}  
           ,#{S_COMP_CODE}
           ,#{SEND_NUM}        
           ,#{S_USER_ID}
           ,GETDATE()        
     
     )
</insert> 
 
 
<update id="spUspAccntAutoSlip70" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_AutoSlip70 (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAutoSlip70Cancel" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_AutoSlip70Cancel (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

    <!-- Header List -->
    <select id="abh200ukrServiceImpl.selectHeadList" parameterType="Map" resultType="rMap">
    /* abh200ukrServiceImpl.selectHeadList */
    SELECT  JUMIN_BIZ_NO
          , USE_BASE
          , TR_CODE
          , TR_KEY
          , REQUEST_DATE
          , JOB_YN
          , OUT_ACCTNO
    FROM    BRANCH.ERP_HEADER WITH (NOLOCK)
    WHERE   1=1
    AND     JOB_YN = 'N'   
    AND     OUT_ACCTNO <![CDATA[<]]>> ''
    AND     OUT_ACCTNO IS NOT NULL 
    </select>
    
    <!-- Body List -->
    <select id="abh200ukrServiceImpl.selectBodyList" parameterType="Map" resultType="rMap">
    /* abh200ukrServiceImpl.selectBodyList */
    SELECT  JUMIN_BIZ_NO
          , USE_BASE
          , TR_CODE
          , TR_KEY
          , SEQ
          , REQUEST_DATE
          , JOB_YN
          , FIELD_002
          , FIELD_014
    FROM    BRANCH.ERP_BODY WITH (NOLOCK)
    WHERE   1=1
    AND     JOB_YN = 'N'  
    </select>
    
    <!-- ERP_HEADER UPDATE -->
    <update id="abh200ukrServiceImpl.updateHead" parameterType="Map">
    /* abh200ukrServiceImpl.updateHead */
    UPDATE  BRANCH.ERP_HEADER
    SET     OUT_ACCTNO = #{OUT_ACCTNO}
          , JOB_YN     = #{JOB_YN}
    WHERE   1=1
    AND     JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
    AND     USE_BASE     = #{USE_BASE}
    AND     TR_CODE      = #{TR_CODE}
    AND     TR_KEY       = #{TR_KEY}
    AND     REQUEST_DATE = #{REQUEST_DATE}
    AND     JOB_YN = 'N'
    </update>  
    
    <!-- ERP_BODY UPDATE -->
    <update id="abh200ukrServiceImpl.updateBody" parameterType="Map">
    /* abh200ukrServiceImpl.updateBody */
    UPDATE  BRANCH.ERP_BODY
    SET     FIELD_002 = #{FIELD_002}
          , FIELD_014 = #{FIELD_014}
          , JOB_YN    = #{JOB_YN}
    WHERE   1=1
    AND     JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
    AND     USE_BASE     = #{USE_BASE}
    AND     TR_CODE      = #{TR_CODE}
    AND     TR_KEY       = #{TR_KEY}
    AND     SEQ          = #{SEQ}
    AND     REQUEST_DATE = #{REQUEST_DATE}
    AND     JOB_YN = 'N'
    </update>
</mapper>