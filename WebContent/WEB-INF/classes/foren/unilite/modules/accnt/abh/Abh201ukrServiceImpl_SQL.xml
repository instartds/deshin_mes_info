<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="abh201ukrServiceImpl">
	<update id="abh201ukrServiceImpl.deleteABH200T" parameterType="Map">
        DELETE FROM ABH200T 
             WHERE COMP_CODE        = #{S_COMP_CODE}
              AND SEND_NUM          = #{SEND_NUM}
    </update>
	<update id="abh201ukrServiceImpl.deleteABH210T" parameterType="Map">
        DELETE FROM ABH210T 
             WHERE COMP_CODE        = #{S_COMP_CODE}
              AND SEND_NUM          = #{SEND_NUM}
    </update>
	<select id="abh201ukrServiceImpl.fnGetMainAccount" parameterType="Map" resultType="rMap">
		--abh201ukr.htm[fnGetMainAccount] Query01
		SELECT TOP 1
		       ISNULL(SAVE_CODE, '')	AS SAVE_CODE
		     , ISNULL(SAVE_NAME, '')	AS SAVE_NAME
		     , ISNULL(uniLITE.fnCipherDecrypt(BANK_ACCOUNT, 'B'),'') AS BANK_ACCOUNT
		FROM   AFS100T WITH (NOLOCK)
		WHERE  COMP_CODE    = #{S_COMP_CODE}
		AND    MAIN_SAVE_YN = 'Y'
	</select>
<select id="abh201ukrServiceImpl.selectRef1" parameterType="Map" resultType="rMap">
SELECT 
	   A.COMP_CODE
	 , A.AGREE_YN
	 , A.SEND_NUM
     , A.PAY_METH
     , A.SEND_DATE
     , A.PAY_CODE
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN M1.SAVE_NAME
            WHEN ISNULL(PAY_METH,'') = '20' THEN M2.PURCHASE_CARD_NAME
            ELSE ''
       END                                                          AS PAY_NAME
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
            WHEN ISNULL(PAY_METH,'') = '20' THEN uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
            ELSE ''
       END                                                          AS BANK_ACCOUNT
	
     , SUM(ISNULL(B.J_AMT_I, 0))	AS TOT_AMT_I
	 , A.EX_DATE  
	 , A.EX_NUM   
	 , ISNULL(A.AGREE_YN,'1') 		AS AGREE_YN
	 , A.AC_DATE  
	 , A.SLIP_NUM 
	 , B.IN_REMARK
FROM               ABH200T   A  WITH (NOLOCK)
		INNER JOIN ABH210T   B  WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                             AND B.SEND_NUM  = A.SEND_NUM
      
		LEFT  JOIN AFS100T   M1 WITH (NOLOCK) ON M1.COMP_CODE         = A.COMP_CODE
                                             AND M1.SAVE_CODE         = A.PAY_CODE
		LEFT  JOIN AFS200T   M2 WITH (NOLOCK) ON M2.COMP_CODE         = A.COMP_CODE
                                             AND M2.PURCHASE_CARD_NUM = A.PAY_CODE

WHERE  A.COMP_CODE 	   = #{S_COMP_CODE}
  AND  A.SEND_DATE &gt;= #{SEND_DATE_FR}
  AND  A.SEND_DATE &lt;= #{SEND_DATE_TO}
  
  
<if test="@foren.Ognl@isNotEmpty(PAY_METH)">    
  AND    A.PAY_METH   = #{PAY_METH}          
</if>
<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">  
	AND    A.PAY_CODE   = #{PAY_CODE} 
</if>
<if test="@foren.Ognl@isNotEmpty(AC_DATE)">  
	AND    A.AC_DATE    = #{AC_DATE}  
</if>
<if test="@foren.Ognl@isNotEmpty(SLIP_NUM)">  
	AND    A.SLIP_NUM   = #{SLIP_NUM}
</if>
<if test="@foren.Ognl@isNotEmpty(EX_DATE)">  
	AND    A.EX_DATE    = #{EX_DATE}
</if>
<if test="@foren.Ognl@isNotEmpty(EX_NUM)">  
	AND    A.EX_NUM     = #{EX_NUM}
</if>
<if test="@foren.Ognl@isNotEmpty(AGREE_YN)">  
	AND    ISNULL(A.AGREE_YN,'1')   = #{AGREE_YN}
</if>
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
	AND    (CASE WHEN ISNULL(A.PAY_METH,'') = '10' THEN M1.DIV_CODE
		         WHEN ISNULL(A.PAY_METH,'') = '20' THEN M2.DIV_CODE
		         ELSE ''
		    END) IN 
	<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
		#{item}
	</foreach>									
</if>    
		
		
		   
        
GROUP  BY A.COMP_CODE,A.AGREE_YN, A.SEND_NUM, A.SEND_DATE, A.PAY_METH, A.PAY_CODE, A.EX_DATE, A.EX_NUM, A.AGREE_YN
        , A.AC_DATE, A.SLIP_NUM, M1.SAVE_NAME, M2.PURCHASE_CARD_NAME, uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')  
		, uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B'), B.IN_REMARK
       
       
ORDER  BY A.COMP_CODE, A.SEND_NUM
	
	
</select>	
	
	
	
	
<select id="abh201ukrServiceImpl.selectMaster" parameterType="Map" resultType="rMap">
	SELECT 
	   A.COMP_CODE
	 , A.SEND_NUM
     , A.PAY_METH
     , A.SEND_DATE
     , A.PAY_CODE
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN M1.SAVE_NAME
            WHEN ISNULL(PAY_METH,'') = '20' THEN M2.PURCHASE_CARD_NAME
            ELSE ''
       END                                                          AS PAY_NAME
     , CASE WHEN ISNULL(PAY_METH,'') = '10' THEN uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
            WHEN ISNULL(PAY_METH,'') = '20' THEN uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
            ELSE ''
       END                                                          AS BANK_ACCOUNT
	
     , SUM(ISNULL(B.J_AMT_I, 0))	AS TOT_AMT_I
     ,A.EX_DATE
	 ,A.EX_NUM
	 ,B.IN_REMARK
FROM               ABH200T   A  WITH (NOLOCK)
		INNER JOIN ABH210T   B  WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                             AND B.SEND_NUM  = A.SEND_NUM
      
		LEFT  JOIN AFS100T   M1 WITH (NOLOCK) ON M1.COMP_CODE         = A.COMP_CODE
                                             AND M1.SAVE_CODE         = A.PAY_CODE
		LEFT  JOIN AFS200T   M2 WITH (NOLOCK) ON M2.COMP_CODE         = A.COMP_CODE
                                             AND M2.PURCHASE_CARD_NUM = A.PAY_CODE

WHERE  A.COMP_CODE 	   = #{S_COMP_CODE}
  AND  A.SEND_NUM	   = #{SEND_NUM}
  
GROUP BY  A.COMP_CODE
	, A.SEND_NUM
	, A.PAY_METH
	, A.SEND_DATE
	, A.PAY_CODE
	, M1.SAVE_NAME
	, M2.PURCHASE_CARD_NAME
	, uniLITE.fnCipherDecrypt(M1.BANK_ACCOUNT, 'B')
	, uniLITE.fnCipherDecrypt(M2.BANK_ACCOUNT, 'B')
	,A.EX_DATE
	,A.EX_NUM

</select>

<insert id="abh201ukrServiceImpl.insertMaster" parameterType="Map">    	
    INSERT INTO ABH200T  
(	                 
	COMP_CODE
	,SEND_NUM
	,SEND_DATE
	,PAY_METH 
	,PAY_CODE 

   ,INSERT_DB_USER
   ,INSERT_DB_TIME
   ,UPDATE_DB_USER
   ,UPDATE_DB_TIME
)          
VALUES (             
	#{S_COMP_CODE}
   ,#{KEY_NUMBER} 
   ,#{SEND_DATE}
   ,#{PAY_METH} 
   ,#{PAY_CODE} 
   ,#{S_USER_ID}    
   ,GETDATE()       
   ,#{S_USER_ID}    
   ,GETDATE()	   
)
</insert>
	
<update id="abh201ukrServiceImpl.updateMaster" parameterType="Map">	
	UPDATE ABH200T
		SET   
			SEND_DATE       = #{SEND_DATE}
		   ,PAY_METH        = #{PAY_METH}  
		   ,PAY_CODE        = #{PAY_CODE}
		   ,UPDATE_DB_USER = #{S_USER_ID}
     	   ,UPDATE_DB_TIME = GETDATE()    
		
		WHERE COMP_CODE		= #{S_COMP_CODE}
		  AND SEND_NUM 		= #{SEND_NUM}

		  
	
</update>

<update id="abh201ukrServiceImpl.deleteMaster" parameterType="Map">
	DELETE FROM ABH200T 
	     WHERE COMP_CODE		= #{S_COMP_CODE}
		   AND SEND_NUM			= #{SEND_NUM}
	
</update>
	
	
	
<select id="abh201ukrServiceImpl.masterDeleteCheck" parameterType="Map" resultType="rMap">
	SELECT * FROM ABH210T  WITH (NOLOCK)
	WHERE COMP_CODE = #{S_COMP_CODE}
	  AND SEND_NUM = #{SEND_NUM}
</select>

	
					
<select id="abh201ukrServiceImpl.selectDetail" parameterType="Map" resultType="rMap">
	
	SELECT 
		A.COMP_CODE
		,A.AGREE_YN
		,B.PRE_DATE
		,A.PAY_CUSTOM_CODE
		,C.CUSTOM_NAME		AS PAY_CUSTOM_NAME
		,C.COMPANY_NUM
		,'Y'	AS EX_YN
		,B.SET_METH
		,B.REMARK	
		,A.MONEY_UNIT
		,A.J_AMT_I + A.INC_AMT_I + A.LOC_AMT_I AS REAL_AMT_I --지급액
		,A.INC_AMT_I
		,A.LOC_AMT_I
		,A.J_AMT_I -- 실지급액
		,A.EXP_DATE
		,A.SEND_YN
		,A.RETURN_YN
		,A.REASON_MSG
		,A.STATE_NUM
		,A.ORG_AC_DATE
		,A.ORG_SLIP_NUM
		,A.ORG_SLIP_SEQ
		,A.PEND_CODE
		,A.ACCNT
		,E.ACCNT_NAME
		,A.BANK_CODE
		,D.CUSTOM_NAME		AS BANK_NAME
		,uniLITE.fnCipherDecrypt(A.ACCOUNT_NUM,'')		AS BANK_ACCOUNT
		,A.BANKBOOK_NAME
		,A.RCPT_NAME
		,A.CMS_TRANS_YN
		,A.RCPT_RESULT_MSG
		,A.RCPT_STATE_NUM
		,A.EX_DATE
		,A.EX_NUM
		,A.SEQ
	
	
	FROM	  ABH210T A WITH(NOLOCK) 
	LEFT JOIN ABH220T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
									AND B.ACCNT        = A.ACCNT
									AND B.ORG_AC_DATE  = A.ORG_AC_DATE 
									AND B.ORG_SLIP_NUM = A.ORG_SLIP_NUM
									AND B.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
	LEFT JOIN BCM100T C WITH(NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
	                                AND C.CUSTOM_CODE = A.PAY_CUSTOM_CODE  	
	LEFT JOIN BCM100T D WITH(NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
									AND D.CUSTOM_CODE = A.BANK_CODE
									AND D.CUSTOM_TYPE = '4' 
	LEFT JOIN ABA400T E WITH(NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
	                                AND E.ACCNT       = A.ACCNT 
										
										
	WHERE A.COMP_CODE = #{S_COMP_CODE}
	  AND A.SEND_NUM = #{SEND_NUM}		
</select>

<insert id="abh201ukrServiceImpl.insertDetail" parameterType="Map">    	
INSERT INTO ABH210T
	(
		COMP_CODE
       ,SEND_NUM
       ,ACCNT
       ,ORG_AC_DATE
       ,ORG_SLIP_NUM
       ,ORG_SLIP_SEQ
       ,SEQ
       ,DIV_CODE
       ,PEND_CODE
       ,PAY_CUSTOM_CODE
       ,J_AMT_I
       ,INC_AMT_I
       ,LOC_AMT_I
       ,PURCHASE_CARD_NUM
       ,EXP_DATE
       ,BANK_CODE
       ,ACCOUNT_NUM
       ,BANKBOOK_NAME
       ,AGREE_YN
       ,INSERT_DB_USER
       ,INSERT_DB_TIME
       ,UPDATE_DB_USER
       ,UPDATE_DB_TIME

	)
VALUES
	(
        #{S_COMP_CODE}
       ,#{SEND_NUM}
       ,#{ACCNT}
       ,#{ORG_AC_DATE}
       ,#{ORG_SLIP_NUM}
       ,#{ORG_SLIP_SEQ}
       ,(SELECT ISNULL(MAX(SEQ),0) + 1  
           FROM ABH210T 
          WHERE COMP_CODE = #{S_COMP_CODE}
            AND SEND_NUM  = #{SEND_NUM}
        )
       ,#{S_DIV_CODE}
       ,#{PEND_CODE}
       ,#{PAY_CUSTOM_CODE}
       ,#{J_AMT_I}
       ,#{INC_AMT_I}
       ,#{LOC_AMT_I}
       ,#{PURCHASE_CARD_NUM}
       ,#{EXP_DATE}
       ,#{BANK_CODE}
       ,unilite.fnCipherEncrypt(#{BANK_ACCOUNT}, '')
       ,#{BANKBOOK_NAME}
       ,'N'
       ,#{S_USER_ID}
       ,GETDATE()
       ,#{S_USER_ID}
       ,GETDATE()
           
           
	)
	                  
</insert>
	
<update id="abh201ukrServiceImpl.updateDetail" parameterType="Map">	

	               
	
</update>

<update id="abh201ukrServiceImpl.deleteDetail" parameterType="Map">
	DELETE FROM ABH210T 
	     WHERE COMP_CODE		= #{S_COMP_CODE}
	      AND SEND_NUM			= #{SEND_NUM}
		  AND ACCNT 			= #{ACCNT}
		  AND ORG_AC_DATE		= #{ORG_AC_DATE}
		  AND ORG_SLIP_NUM 	    = #{ORG_SLIP_NUM}
		  AND ORG_SLIP_SEQ		= #{ORG_SLIP_SEQ}
		  AND SEQ				= #{SEQ}
	  
  
</update>

<select id="abh201ukrServiceImpl.fnCheckQ" parameterType="Map" resultType="rMap">
SELECT * FROM ABH220T A WITH(NOLOCK)
	INNER JOIN T_GWIF  B WITH(NOLOCK) ON B.GWIF_KEY1 = A.COMP_CODE
								    AND B.GWIF_KEY2 = '1'
									AND B.GWIF_KEY3 = A.SEND_NUM

	WHERE COMP_CODE				= #{S_COMP_CODE}
		  AND ACCNT 			= #{ACCNT}
		  AND ORG_AC_DATE		= #{ORG_AC_DATE}
		  AND ORG_SLIP_NUM 	    = #{ORG_SLIP_NUM}
		  AND ORG_SLIP_SEQ		= #{ORG_SLIP_SEQ}
		  AND SEQ				= #{SEQ}

</select>



<update id="abh201ukrServiceImpl.spAutoNum" parameterType="Map" statementType="CALLABLE">
	{call SP_GetAutoNumComp (
		#{COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{DIV_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{TABLE_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{PREFIX, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{BASIS_DATE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{AUTO_TYPE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{KEY_NUMBER, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}

</update>


<update id="spUspAccntAbh200ukrFnBanknameQuery" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameQuery (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  
 
<update id="spUspAccntAbh200ukrFnBankNameresult" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  
 
 
<insert id="abh201ukrServiceImpl.insertLogDetail" parameterType="Map">      
    INSERT INTO L_ABH200T
           (KEY_VALUE          
           ,OPR_FLAG  
           ,COMP_CODE
           ,SEND_NUM        
           ,INSERT_DB_USER
           ,INSERT_DB_TIME        
           )
     VALUES
     (      #{KEY_VALUE}          
           ,#{OPR_FLAG}  
           ,#{S_COMP_CODE}
           ,#{SEND_NUM}        
           ,#{S_USER_ID}
           ,GETDATE()        
     
     )
</insert> 
 
 
<update id="spUspAccntAutoSlip70" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_AutoSlip70 (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAutoSlip70Cancel" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_AutoSlip70Cancel (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAbh201ukrFnabh201create" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnabh200create (
        #{S_COMP_CODE  , mode=IN    , jdbcType=VARCHAR    , javaType=java.lang.String},
        #{S_SEND_NUM   , mode=IN    , jdbcType=VARCHAR    , javaType=java.lang.String},
        #{S_LANG_CODE  , mode=IN    , jdbcType=VARCHAR    , javaType=java.lang.String},
        #{S_USER_ID    , mode=IN    , jdbcType=VARCHAR    , javaType=java.lang.String},
        #{RTN_VALUE    , mode=OUT   , jdbcType=VARCHAR    , javaType=java.lang.String},
        #{ErrorDesc    , mode=OUT   , jdbcType=VARCHAR    , javaType=java.lang.String}
    )}
</update>   
<update id="spUspAccntAbh201ukrFnBankNameresult" parameterType="Map" statementType="CALLABLE">

    {call USP_ACCNT_ABH200UKR_fnBankNameresult (
        #{S_COMP_CODE, mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_SEND_NUM,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_WORK_GB,   mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LOGIN_ID,  mode=IN,  jdbcType=VARCHAR, javaType=java.lang.String},
        #{ErrorDesc,   mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>  

    <!-- Header List -->
    <select id="abh201ukrServiceImpl.selectHeadList" parameterType="Map" resultType="rMap">
    /* abh201ukrServiceImpl.selectHeadList */
    SELECT  JUMIN_BIZ_NO
          , USE_BASE
          , TR_CODE
          , TR_KEY
          , REQUEST_DATE
          , JOB_YN
          , OUT_ACCTNO
    FROM    L_ERP_HEADER WITH (NOLOCK)
    WHERE   KEY_VALUE = #{KEY_VALUE}
    </select>
    
    <!-- Body List -->
    <select id="abh201ukrServiceImpl.selectBodyList" parameterType="Map" resultType="rMap">
    /* abh201ukrServiceImpl.selectBodyList */
    SELECT  JUMIN_BIZ_NO
          , USE_BASE
          , TR_CODE
          , TR_KEY
          , SEQ
          , REQUEST_DATE
          , JOB_YN
          , FIELD_002
          , FIELD_014
    FROM    L_ERP_BODY WITH (NOLOCK)
    WHERE   KEY_VALUE = #{KEY_VALUE}
    </select>
    
    <!-- ERP_HEADER UPDATE -->
    <update id="abh201ukrServiceImpl.updateHead" parameterType="Map">
    /* abh201ukrServiceImpl.updateHead */
    UPDATE  L_ERP_HEADER
    SET     OUT_ACCTNO   = #{OUT_ACCTNO}
          , JOB_YN       = #{JOB_YN}
    WHERE   KEY_VALUE    = #{KEY_VALUE}
    AND     JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
    AND     USE_BASE     = #{USE_BASE}
    AND     TR_CODE      = #{TR_CODE}
    AND     TR_KEY       = #{TR_KEY}
    AND     REQUEST_DATE = #{REQUEST_DATE}
    </update>  
    

    <insert id="abh201ukrServiceImpl.insTempToHeader" parameterType="Map">
    /* abh201ukrServiceImpl.insTempToHeader */ 
    INSERT INTO BRANCH.ERP_HEADER (
         JUMIN_BIZ_NO
        ,USE_BASE
        ,TR_CODE
        ,TR_KEY
        ,REQUEST_DATE
        ,BUKRS
        ,REQUEST_TIME
        ,EXEC_DATE
        ,STATUS
        ,STATUS_DESC
        ,OUT_BANKCODE
        ,OUT_CURRCODE
        ,OUT_ACCTNO
        ,TOTAL_CNT
        ,TOTAL_AMT
        ,SUCCESS_CNT
        ,SUCCESS_AMT
        ,ERROR_CNT
        ,ERROR_AMT
        ,ERPIF_START_DATE
        ,ERPIF_START_TIME
        ,ERPIF_END_DATE
        ,ERPIF_END_TIME
        ,ERPIF_RES_CODE
        ,ERPIF_RES_DESC
        ,CREATOR
        ,CREATOR_NM
        ,OPERATOR
        ,OPERATOR_NM
        ,APPROVAL_YN
        ,FIELD_01
        ,FIELD_02
        ,FIELD_03
        ,FIELD_04
        ,FIELD_05
        ,FIELD_06
        ,FIELD_07
        ,FIELD_08
        ,FIELD_09
        ,FIELD_10
        ,SEND_NUM
        ,COMP_CODE
        ,JOB_YN
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,OUT_BANKCODE
            ,OUT_CURRCODE
            ,OUT_ACCTNO
            ,TOTAL_CNT
            ,TOTAL_AMT
            ,SUCCESS_CNT
            ,SUCCESS_AMT
            ,ERROR_CNT
            ,ERROR_AMT
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,APPROVAL_YN
            ,FIELD_01
            ,FIELD_02
            ,FIELD_03
            ,FIELD_04
            ,FIELD_05
            ,FIELD_06
            ,FIELD_07
            ,FIELD_08
            ,FIELD_09
            ,FIELD_10
            ,SEND_NUM
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_HEADER WITH (NOLOCK)
         WHERE KEY_VALUE    = #{KEY_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert>
    
    <!-- ERP_BODY UPDATE -->
    <update id="abh201ukrServiceImpl.updateBody" parameterType="Map">
    /* abh201ukrServiceImpl.updateBody */
    UPDATE  L_ERP_BODY
    SET     FIELD_002    = #{FIELD_002}
          , FIELD_014    = #{FIELD_014}
          , JOB_YN       = #{JOB_YN}
    WHERE   KEY_VALUE    = #{KEY_VALUE}
    AND     JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
    AND     USE_BASE     = #{USE_BASE}
    AND     TR_CODE      = #{TR_CODE}
    AND     TR_KEY       = #{TR_KEY}
    AND     SEQ          = #{SEQ}
    AND     REQUEST_DATE = #{REQUEST_DATE}
    </update>

    <insert id="abh201ukrServiceImpl.insTempToBody" parameterType="Map">
    /* abh201ukrServiceImpl.updTempBody */ 
    INSERT INTO BRANCH.ERP_BODY (
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN     
     ) 
        SELECT
             JUMIN_BIZ_NO
            ,USE_BASE
            ,TR_CODE
            ,TR_KEY
            ,SEQ
            ,REQUEST_DATE
            ,BUKRS
            ,REQUEST_TIME
            ,EXEC_DATE
            ,STATUS
            ,STATUS_DESC
            ,ERPIF_START_DATE
            ,ERPIF_START_TIME
            ,ERPIF_END_DATE
            ,ERPIF_END_TIME
            ,ERPIF_RES_CODE
            ,ERPIF_RES_DESC
            ,CREATOR
            ,CREATOR_NM
            ,OPERATOR
            ,OPERATOR_NM
            ,TRANS_AMT
            ,FIELD_001
            ,FIELD_002
            ,FIELD_003
            ,FIELD_004
            ,FIELD_005
            ,FIELD_006
            ,FIELD_007
            ,FIELD_008
            ,FIELD_009
            ,FIELD_010
            ,FIELD_011
            ,FIELD_012
            ,FIELD_013
            ,FIELD_014
            ,FIELD_015
            ,FIELD_016
            ,FIELD_017
            ,FIELD_018
            ,FIELD_019
            ,FIELD_020
            ,FIELD_021
            ,FIELD_022
            ,FIELD_023
            ,FIELD_024
            ,FIELD_025
            ,FIELD_026
            ,FIELD_027
            ,FIELD_028
            ,FIELD_029
            ,FIELD_030
            ,FIELD_031
            ,FIELD_032
            ,FIELD_033
            ,FIELD_034
            ,FIELD_035
            ,FIELD_036
            ,FIELD_037
            ,FIELD_038
            ,FIELD_039
            ,FIELD_040
            ,FIELD_041
            ,FIELD_042
            ,FIELD_043
            ,FIELD_044
            ,FIELD_045
            ,FIELD_046
            ,FIELD_047
            ,FIELD_048
            ,FIELD_049
            ,FIELD_050
            ,FIELD_051
            ,FIELD_052
            ,FIELD_053
            ,FIELD_054
            ,FIELD_055
            ,FIELD_056
            ,FIELD_057
            ,FIELD_058
            ,FIELD_059
            ,FIELD_060
            ,FIELD_061
            ,FIELD_062
            ,FIELD_063
            ,FIELD_064
            ,FIELD_065
            ,FIELD_066
            ,FIELD_067
            ,FIELD_068
            ,FIELD_069
            ,FIELD_070
            ,FIELD_071
            ,FIELD_072
            ,FIELD_073
            ,FIELD_074
            ,FIELD_075
            ,FIELD_076
            ,FIELD_077
            ,FIELD_078
            ,FIELD_079
            ,FIELD_080
            ,FIELD_081
            ,FIELD_082
            ,FIELD_083
            ,FIELD_084
            ,FIELD_085
            ,FIELD_086
            ,FIELD_087
            ,FIELD_088
            ,FIELD_089
            ,FIELD_090
            ,FIELD_091
            ,FIELD_092
            ,FIELD_093
            ,FIELD_094
            ,FIELD_095
            ,FIELD_096
            ,FIELD_097
            ,FIELD_098
            ,FIELD_099
            ,FIELD_100
            ,FIELD_101
            ,FIELD_102
            ,FIELD_103
            ,FIELD_104
            ,FIELD_105
            ,FIELD_106
            ,FIELD_107
            ,FIELD_108
            ,FIELD_109
            ,FIELD_110
            ,FIELD_111
            ,FIELD_112
            ,FIELD_113
            ,FIELD_114
            ,FIELD_115
            ,FIELD_116
            ,FIELD_117
            ,FIELD_118
            ,FIELD_119
            ,FIELD_120
            ,SEND_NUM
            ,STATE_NUM
            ,REFER_YN
            ,COMP_CODE
            ,JOB_YN
          FROM L_ERP_BODY WITH (NOLOCK)
         WHERE KEY_VALUE    = #{KEY_VALUE}
           AND JUMIN_BIZ_NO = #{JUMIN_BIZ_NO}
           AND USE_BASE     = #{USE_BASE}
           AND TR_CODE      = #{TR_CODE}
           AND TR_KEY       = #{TR_KEY}
           AND SEQ          = #{SEQ}
           AND REQUEST_DATE = #{REQUEST_DATE}
    </insert>
</mapper>