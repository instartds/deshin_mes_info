<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb900ukrServiceImpl">
	<select id="afb900ukrServiceImpl.selectCheck1" parameterType="Map" resultType="rMap">
	--afb900ukr.Cafb900ukr[fnAfb900Qstd] QUERY02
	SELECT  MAX(BRANCH_USE) BRANCH_USE
		FROM    (
	        SELECT  CASE WHEN SUB_CODE = '80' THEN REF_CODE1 ELSE '' END    AS BRANCH_USE   --이체지급등록 브랜치연계 사용
	        FROM    BSA100T WITH (NOLOCK)
	        WHERE   COMP_CODE   = #{S_COMP_CODE}
	        AND     MAIN_CODE   = N'A169'
	        AND     SUB_CODE   = '80'
	        ) T
</select>

<select id="afb900ukrServiceImpl.selectCheck2" parameterType="Map" resultType="rMap">
	--afb900ukr.Cafb900ukr[fnAfb900Qstd] QUERY03
	SELECT  ISNULL(SUB_CODE, '') BRANCH_NAME
		FROM    BSA100T WITH (NOLOCK)
		WHERE   COMP_CODE   = #{S_COMP_CODE}
		AND     MAIN_CODE   = 'A100'
		AND     REF_CODE1   = 'Y'
</select>
	
	
	
	
	
	<select id="afb900ukrServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">
	    --afb900ukr.Cafb900ukr[fnAfb900Qstd] QUERY01
    BEGIN
        SET NOCOUNT ON
        SET ARITHABORT ON
    
        DECLARE         @COMP_CODE          NVARCHAR(08)                --(필수) 법인코드
                      , @FR_DATE            NVARCHAR(08)                --(필수) FROM 자금이체일
                      , @TO_DATE            NVARCHAR(08)                --(필수) TO   자금이체일
                      , @DIV_CODE           NVARCHAR(08)                --(선택) 사업장코드
                      , @DIV_NAME           NVARCHAR(30)                --(선택) 사업장명
                      , @SAVE_CODE          NVARCHAR(08)                --(선택) 출금계좌코드
                      , @SAVE_NAME          NVARCHAR(30)                --(선택) 출금계좌명
                      , @SLIP_YN            NVARCHAR(01)                --(선택) 기표여부
                      , @PAY_DRAFT_NO       NVARCHAR(20)                --(선택) 지출결의번호
                        --
                      , @USER_ID            NVARCHAR(100)                --(필수) 사용자ID
                      , @PJT_CODE           NVARCHAR(08)                --(선택) 프로젝트코드
                      , @PJT_NAME           NVARCHAR(30)                --(선택) 프로젝트명
                      , @FR_INPUT_DATE      NVARCHAR(08)                --(선택) FROM 지출작성일
                      , @TO_INPUT_DATE      NVARCHAR(08)                --(선택) TO   지출작성일
                      , @TITLE              NVARCHAR(30)                --(선택) 지출건명
                      , @CMS_TRANS_YN       NVARCHAR(01)                --(선택) CMS전송여부
                      , @TRANS_RESULT_YN    NVARCHAR(01)                --(선택) 이체결과수신여부
    
    --  [ 변수 값 할당 ] ---------------------------------------------------------------------------------------------------
        SET @COMP_CODE       = #{S_COMP_CODE}               
        SET @FR_DATE         = #{FR_DATE}                   
        SET @TO_DATE         = #{TO_DATE}                   
                    
        SET @SAVE_CODE       = #{OUT_SAVE_CODE}             
        SET @SAVE_NAME       = #{OUT_SAVE_NAME}             
        SET @SLIP_YN         = #{RDO_SLIP}                  
        SET @USER_ID         = #{S_USER_ID}                 
        SET @PAY_DRAFT_NO    = #{PAY_DRAFT_NO}              
        SET @PJT_CODE        = #{PJT_CODE}                  
        SET @PJT_NAME        = #{PJT_NAME}                  
        SET @FR_INPUT_DATE   = #{FR_INPUT_DATE}             
        SET @TO_INPUT_DATE   = #{TO_INPUT_DATE}             
        SET @TITLE           = #{TITLE}                     
        SET @CMS_TRANS_YN    = #{RDO_SEND}                  
        SET @TRANS_RESULT_YN = #{RDO_RESULT}                
    
    --  [ 초기화 ] ---------------------------------------------------------------------------------------------------------
        IF ( @FR_DATE = '*' OR @FR_DATE IS NULL )
        BEGIN
            SELECT  TOP 0
                    CONVERT(BIGINT, 0)                                      AS SEQ
                  , CONVERT(BIT, 0)                                         AS CHOICE
                  , CONVERT(NVARCHAR(08) , '')                              AS COMP_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS CMS_TRANS_YN
                  , CONVERT(NVARCHAR(01) , '')                              AS INPUT_GUBUN
                  , CONVERT(NVARCHAR(01) , '')                              AS AMT_GUBUN
                  , CONVERT(NVARCHAR(10) , '')                              AS TRANS_DATE
                  , CONVERT(NVARCHAR(10) , '')                              AS PAY_DATE
                  , CONVERT(NVARCHAR(10) , '')                              AS APP_DATE
                  , CONVERT(NVARCHAR(20) , '')                              AS PROV_DRAFT_NO
                  , CONVERT(NUMERIC(04, 0), 0)                              AS PROV_DRAFT_SEQ
                  , CONVERT(NVARCHAR(08) , '')                              AS OUT_SAVE_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS OUT_SAVE_NAME
                  , CONVERT(NVARCHAR(255), '')                              AS OUT_BANKBOOK_NUM
                  , CONVERT(NVARCHAR(08) , '')                              AS OUT_BANK_CODE
                  , CONVERT(NVARCHAR(100), '')                              AS REMARK
                  , CONVERT(NVARCHAR(100), '')                              AS PJT_CODE
                  , CONVERT(NVARCHAR(100), '')                              AS PJT_NAME
                  , CONVERT(NUMERIC(30, 6), 0)                              AS PROV_AMT_I
                  , CONVERT(NVARCHAR(03) , '')                              AS PEND_CODE
                  , CONVERT(NVARCHAR(10) , '')                              AS PAY_CUSTOM_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS PAY_CUSTOM_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS CUSTOM_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS CUSTOM_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS IN_SAVE_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS IN_SAVE_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS IN_BANK_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS IN_BANK_NAME
                  , CONVERT(NVARCHAR(255), '')                              AS IN_BANKBOOK_NUM
                  , CONVERT(NVARCHAR(50) , '')                              AS IN_BANKBOOK_NAME
                  , CONVERT(NVARCHAR(200), '')                              AS REMARK_DTL
                  , CONVERT(NUMERIC(30, 6), 0)                              AS TOT_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS INC_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS LOC_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS REAL_AMT_I
                  , CONVERT(INT, 0)                                         AS TRANS_SEQ
                  , CONVERT(NVARCHAR(10) , '')                              AS EX_DATE
                  , CONVERT(NUMERIC(07, 0), 0)                              AS EX_NUM
    
                  , CONVERT(NUMERIC(30, 6), 0)                              AS TRANS_FEE
                  , CONVERT(NVARCHAR(30) , '')                              AS TRANS_ID
                  , CONVERT(NVARCHAR(50) , '')                              AS TRANS_STATE_NUM
                  , CONVERT(NVARCHAR(30) , '')                              AS TRANS_RESULT_YN
                  , CONVERT(NVARCHAR(200) , '')                             AS TRANS_RESULT_MSG
    
                  , CONVERT(NVARCHAR(02) , '')                              AS PAY_DIVI
                  , CONVERT(NVARCHAR(08) , '')                              AS DIV_CODE
                  , CONVERT(NVARCHAR(08) , '')                              AS DEPT_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS DEPT_NAME
                  , CONVERT(NVARCHAR(100), '')                              AS REFER_NUM
                  , CONVERT(NUMERIC(30, 6), 0)                              AS PAY_TOT
                  , CONVERT(NUMERIC(30, 6), 0)                              AS INC_TOT
                  , CONVERT(NUMERIC(30, 6), 0)                              AS LOC_TOT
                  , CONVERT(NUMERIC(30, 6), 0)                              AS REAL_TOT
                  , CONVERT(NVARCHAR(20) , '')                              AS INSERT_DB_USER
                  , CONVERT(SMALLDATETIME, NULL)                            AS INSERT_DB_TIME
                  , CONVERT(NVARCHAR(20) , '')                              AS UPDATE_DB_USER
                  , CONVERT(SMALLDATETIME, NULL)                            AS UPDATE_DB_TIME
    
            RETURN
        END
    
    --  [ 명칭 참조 유형 ] ------------------------------------------------------------------------------------------------
        DECLARE         @RefItem            NVARCHAR(01)
    
        SELECT TOP 1 @RefItem = REF_ITEM
        FROM   BSA300T WITH (NOLOCK)
        WHERE  USER_ID = @USER_ID
    
        SET @RefItem = ISNULL(@RefItem, N'0')
    
    --  [ 날짜 포맷 유형 설정 ] --------------------------------------------------------------------------------------------
        DECLARE         @DateFormat         NVARCHAR(10)
    
        SELECT  TOP 1 @DateFormat = CODE_NAME
        FROM    BSA100T WITH (NOLOCK)
        WHERE   COMP_CODE = @COMP_CODE
        AND     MAIN_CODE = N'B044'
        AND     REF_CODE1 = N'Y'
    
        SET @DateFormat = ISNULL(@DateFormat, 'YYYY/MM/DD')
    
    --  [ 데이터 생성 ] ----------------------------------------------------------------------------------------------------
        IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects  WHERE id=object_id('tempdb..#T_AFB900UKR1'))
            DROP TABLE #T_AFB900UKR1
    
        SELECT  ROW_NUMBER() OVER (ORDER BY A.PROV_DRAFT_NO, A.PROV_DRAFT_SEQ, A.TRANS_SEQ)                          AS SEQ
              , CONVERT(BIT, 0)                                                                 AS CHOICE
              , A.COMP_CODE                                                                     AS COMP_CODE
              , ISNULL(M5.CODE_NAME, '')                                                        AS CMS_TRANS_YN
              , A.INPUT_GUBUN                                                                   AS INPUT_GUBUN
              , A.AMT_GUBUN                                                                     AS AMT_GUBUN
              , CASE WHEN ISNULL(A.TRANS_DATE, '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.TRANS_DATE, 1, 4))
                                             , 'MM'  , SUBSTRING(A.TRANS_DATE, 5, 2))
                                             , 'DD'  , SUBSTRING(A.TRANS_DATE, 7, 2))
                END                                                                             AS TRANS_DATE
              , CASE WHEN ISNULL(F2.PAY_DATE, '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(F2.PAY_DATE, 1, 4))
                                             , 'MM'  , SUBSTRING(F2.PAY_DATE, 5, 2))
                                             , 'DD'  , SUBSTRING(F2.PAY_DATE, 7, 2))
                END                                                                             AS PAY_DATE
              , CASE WHEN ISNULL(CONVERT(NVARCHAR(8), J.APP_DATE, 112), '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(CONVERT(NVARCHAR(8), J.APP_DATE, 112), 1, 4))
                                             , 'MM'  , SUBSTRING(CONVERT(NVARCHAR(8), J.APP_DATE, 112), 5, 2))
                                             , 'DD'  , SUBSTRING(CONVERT(NVARCHAR(8), J.APP_DATE, 112), 7, 2))
                END                                                                             AS APP_DATE
              , A.PROV_DRAFT_NO                                                                 AS PROV_DRAFT_NO
              , A.PROV_DRAFT_SEQ                                                                AS PROV_DRAFT_SEQ
              , A.OUT_SAVE_CODE                                                                 AS OUT_SAVE_CODE
              , D1.SAVE_NAME                                                                    AS OUT_SAVE_NAME
              , uniLITE.fnCipherDecrypt(D1.BANK_ACCOUNT, '')                                    AS OUT_BANKBOOK_NUM
              , A.OUT_BANK_CODE                                                                 AS OUT_BANK_CODE
              , A.REMARK                                                                        AS REMARK
              , F.PJT_CODE                                                                      AS PJT_CODE
              , H.PJT_NAME                                                                      AS PJT_NAME
              , ISNULL(A1.PROV_AMT_I, 0)                                                        AS PROV_AMT_I
              , A.PEND_CODE                                                                     AS PEND_CODE
              , A.PAY_CUSTOM_CODE                                                               AS PAY_CUSTOM_CODE
              , E.PAY_CUSTOM_NAME                                                               AS PAY_CUSTOM_NAME
              , A.CUSTOM_CODE                                                                   AS CUSTOM_CODE
              , CASE WHEN @RefItem = N'0' THEN C1.CUSTOM_NAME
                     WHEN @RefItem = N'1' THEN C1.CUSTOM_NAME1
                     WHEN @RefItem = N'2' THEN C1.CUSTOM_NAME2
                END                                                                             AS CUSTOM_NAME
              , A.IN_SAVE_CODE                                                                  AS IN_SAVE_CODE
              , D2.SAVE_NAME                                                                    AS IN_SAVE_NAME
              , A.IN_BANK_CODE                                                                  AS IN_BANK_CODE
              , CASE WHEN @RefItem = N'0' THEN C2.CUSTOM_NAME
                     WHEN @RefItem = N'1' THEN C2.CUSTOM_NAME1
                     WHEN @RefItem = N'2' THEN C2.CUSTOM_NAME2
                END                                                                             AS IN_BANK_NAME
              , CASE WHEN A.INPUT_GUBUN = '2' THEN uniLITE.fnCipherDecrypt(D2.BANK_ACCOUNT, '')
                     ELSE uniLITE.fnCipherDecrypt(A.IN_BANKBOOK_NUM, '')
                END                                                                             AS IN_BANKBOOK_NUM
              , CASE WHEN (A.INPUT_GUBUN = '1' AND ISNULL(M1.REF_CODE2, '') = 'C') THEN B.DIV_FULL_NAME
                     ELSE A.IN_BANKBOOK_NAME
                END                                                                             AS IN_BANKBOOK_NAME
              , ISNULL(A.REMARK_DTL, '')                                                        AS REMARK_DTL
              , A.TOT_AMT_I                                                                     AS TOT_AMT_I
              , A.INC_AMT_I                                                                     AS INC_AMT_I
              , A.LOC_AMT_I                                                                     AS LOC_AMT_I
              , A.REAL_AMT_I                                                                    AS REAL_AMT_I
              , A.TRANS_SEQ                                                                     AS TRANS_SEQ
              , CASE WHEN ISNULL(A.EX_DATE, '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.EX_DATE, 1, 4))
                                             , 'MM'  , SUBSTRING(A.EX_DATE, 5, 2))
                                             , 'DD'  , SUBSTRING(A.EX_DATE, 7, 2))
                END                                                                             AS EX_DATE
              , A.EX_NUM                                                                        AS EX_NUM
    
                -- CMS 이체하기
              , A.TRANS_FEE                                                                     AS TRANS_FEE
              , A.TRANS_ID                                                                      AS TRANS_ID
              , A.TRANS_STATE_NUM                                                               AS TRANS_STATE_NUM
              , ISNULL(M6.CODE_NAME, '')                                                        AS TRANS_RESULT_YN
              , A.TRANS_RESULT_MSG                                                              AS TRANS_RESULT_MSG
              
              , A.PAY_DIVI                                                                      AS PAY_DIVI
              , A.DIV_CODE                                                                      AS DIV_CODE
              , A.DEPT_CODE                                                                     AS DEPT_CODE
              , A.DEPT_NAME                                                                     AS DEPT_NAME
              , A.PROV_DRAFT_NO + RIGHT('0000' + CONVERT(NVARCHAR(5), A.PROV_DRAFT_SEQ), 4)     AS REFER_NUM
              , CONVERT(NUMERIC(30, 6), 0)                                                      AS PAY_TOT
              , CONVERT(NUMERIC(30, 6), 0)                                                      AS INC_TOT
              , CONVERT(NUMERIC(30, 6), 0)                                                      AS LOC_TOT
              , CONVERT(NUMERIC(30, 6), 0)                                                      AS REAL_TOT
              , A.INSERT_DB_USER
              , A.INSERT_DB_TIME
              , A.UPDATE_DB_USER
              , A.UPDATE_DB_TIME
        INTO    #T_AFB900UKR1
        FROM                AFB900T   A  WITH (NOLOCK)
                LEFT  JOIN  (SELECT COMP_CODE
                                  , CASE WHEN INPUT_GUBUN = '1' THEN PROV_DRAFT_NO
                                         WHEN INPUT_GUBUN = '2' THEN CONVERT(NVARCHAR(10), TRANS_SEQ)
                                    END             AS PROV_DRAFT_NO
                                  , SUM(TOT_AMT_I) AS PROV_AMT_I
                             FROM   AFB900T WITH (NOLOCK)
                             WHERE  COMP_CODE    = @COMP_CODE
                             AND    TRANS_DATE  &gt;= @FR_DATE
                             AND    TRANS_DATE  &lt;= @TO_DATE
                             GROUP  BY COMP_CODE
                                     , CASE WHEN INPUT_GUBUN = '1' THEN PROV_DRAFT_NO
                                            WHEN INPUT_GUBUN = '2' THEN CONVERT(NVARCHAR(10), TRANS_SEQ)
                                       END
                             )        A1               ON A1.COMP_CODE      = A.COMP_CODE
                                                      AND A1.PROV_DRAFT_NO  = CASE WHEN A.INPUT_GUBUN = '1' THEN A.PROV_DRAFT_NO
                                                                                   WHEN A.INPUT_GUBUN = '2' THEN CONVERT(NVARCHAR(10), A.TRANS_SEQ)
                                                                              END
                LEFT  JOIN  BOR120T   B  WITH (NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                      AND B.DIV_CODE        = A.DIV_CODE
                LEFT  JOIN  BCM100T   C1 WITH (NOLOCK) ON C1.COMP_CODE      = A.COMP_CODE
                                                      AND C1.CUSTOM_CODE    = A.CUSTOM_CODE
                LEFT  JOIN  BCM100T   C2 WITH (NOLOCK) ON C2.COMP_CODE      = A.COMP_CODE
                                                      AND C2.CUSTOM_CODE    = A.IN_BANK_CODE
                LEFT  JOIN  AFS100T   D1 WITH (NOLOCK) ON D1.COMP_CODE      = A.COMP_CODE
                                                      AND D1.SAVE_CODE      = A.OUT_SAVE_CODE
                LEFT  JOIN  AFS100T   D2 WITH (NOLOCK) ON D2.COMP_CODE      = A.COMP_CODE
                                                      AND D2.SAVE_CODE      = A.IN_SAVE_CODE
                LEFT  JOIN  ABH200TV  E  WITH (NOLOCK) ON E.COMP_CODE       = A.COMP_CODE
                                                      AND E.PEND_CODE       = A.PEND_CODE
                                                      AND E.PAY_CUSTOM_CODE = A.PAY_CUSTOM_CODE
                LEFT  JOIN  AFB710T   F  WITH (NOLOCK) ON F.COMP_CODE       = A.COMP_CODE
                                                      AND F.PAY_DRAFT_NO    = A.PROV_DRAFT_NO
                                                      AND F.SEQ             = A.PROV_DRAFT_SEQ
                LEFT JOIN  AFB700T   F2 WITH (NOLOCK) ON F2.COMP_CODE      = F.COMP_CODE
                                                      AND F2.PAY_DRAFT_NO   = F.PAY_DRAFT_NO
                LEFT  JOIN  BCM600T   H  WITH (NOLOCK) ON H.COMP_CODE       = F.COMP_CODE
                                                      AND H.PJT_CODE        = F.PJT_CODE
                LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
                                                      AND M1.MAIN_CODE      = N'A172'
                                                      AND M1.SUB_CODE       = A.PAY_DIVI
                LEFT  JOIN  BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE      = A.COMP_CODE
                                                      AND M2.MAIN_CODE      = N'S091'
                                                      AND M2.SUB_CODE       = A.COMP_CODE
                LEFT  JOIN  BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE      = A.COMP_CODE
                                                      AND M4.MAIN_CODE      = N'A210'
                                                      AND M4.SUB_CODE       = A.PEND_CODE
                LEFT  JOIN  BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE      = A.COMP_CODE
                                                      AND M5.MAIN_CODE      = N'A020'
                                                      AND M5.SUB_CODE       = ISNULL(A.CMS_TRANS_YN, 'N')
                LEFT  JOIN  BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE      = A.COMP_CODE
                                                      AND M6.MAIN_CODE      = N'A020'
                                                      AND M6.SUB_CODE       = ISNULL(A.TRANS_RESULT_YN, 'N')
                LEFT  JOIN  T_GWIF    J  WITH (NOLOCK) ON J.GWIF_ID         = M2.REF_CODE1 + N'1' + A.PROV_DRAFT_NO
        WHERE   A.COMP_CODE              =        @COMP_CODE
        AND     A.TRANS_DATE            &gt;=        @FR_DATE
        AND     A.TRANS_DATE            &lt;=        @TO_DATE
        AND   ((A.OUT_SAVE_CODE       LIKE        @SAVE_CODE + '%'    AND @SAVE_CODE  != '') OR (@SAVE_CODE   = ''))
        AND   ((D1.SAVE_NAME          LIKE N'%' + @SAVE_NAME + '%'    AND @SAVE_NAME  != '') OR (@SAVE_NAME   = ''))
     --   AND   ((B.DIV_NAME            LIKE N'%' + @DIV_NAME  + '%'    AND @DIV_NAME   != '') OR (@DIV_NAME    = '')) 
        AND   ((ISNULL(A.EX_DATE, '')   !=        ''                  AND @SLIP_YN     = 'Y')
        OR     (ISNULL(A.EX_DATE, '')    =        ''                  AND @SLIP_YN     = 'N')
        OR     (@SLIP_YN = ''))
        AND   ((A.PROV_DRAFT_NO       LIKE        @PAY_DRAFT_NO + '%' AND @PAY_DRAFT_NO != '') OR (@PAY_DRAFT_NO = ''))
        AND   ((F.PJT_CODE      LIKE        @PJT_CODE  + '%'    AND @PJT_CODE   != '') OR (@PJT_CODE    = ''))
        AND   ((H.PJT_NAME      LIKE N'%' + @PJT_NAME  + '%'    AND @PJT_NAME   != '') OR (@PJT_NAME    = ''))
        AND   ((F2.TITLE        LIKE N'%' + @TITLE     + '%'    AND @TITLE      != '') OR (@TITLE       = ''))
    
        AND   ((ISNULL(A.CMS_TRANS_YN, 'N')  =   'Y'                  AND @CMS_TRANS_YN     = 'Y')
        OR     (ISNULL(A.CMS_TRANS_YN, 'N')  =   'N'                  AND @CMS_TRANS_YN     = 'N')
        OR     (@CMS_TRANS_YN = ''))
    
        AND   ((ISNULL(A.TRANS_RESULT_YN, '') != ''                   AND @TRANS_RESULT_YN  = 'Y')
        OR     (ISNULL(A.TRANS_RESULT_YN, '') =  ''                   AND @TRANS_RESULT_YN  = 'N')
        OR     (@TRANS_RESULT_YN = ''))
        
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
    AND     A.DIV_CODE IN
		<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
		 #{item}
		</foreach>									
 	</if>
    
    <if test="@foren.Ognl@isNotEmpty(FR_INPUT_DATE)">
     AND     F2.PAY_DATE      &gt;= #{FR_INPUT_DATE}
    </if>
    <if test="@foren.Ognl@isNotEmpty(TO_INPUT_DATE)">
     AND     F2.PAY_DATE      &lt;= #{TO_INPUT_DATE}
    </if>
    
    
    
    --  [ 실지급액 합계 계산 ] ---------------------------------------------------------------------------------------------
        DECLARE         @TotAmtI            NUMERIC(30, 6)
                      , @IncAmtI            NUMERIC(30, 6)
                      , @LocAmtI            NUMERIC(30, 6)
                      , @RealAmtI           NUMERIC(30, 6)
    
        SET @TotAmtI  = 0
        SET @IncAmtI  = 0
        SET @LocAmtI  = 0
        SET @RealAmtI = 0
    
        UPDATE  #T_AFB900UKR1
        SET     @TotAmtI    = @TotAmtI  + ISNULL(TOT_AMT_I , 0)
              , @IncAmtI    = @IncAmtI  + ISNULL(INC_AMT_I , 0)
              , @LocAmtI    = @LocAmtI  + ISNULL(LOC_AMT_I , 0)
              , @RealAmtI   = @RealAmtI + ISNULL(REAL_AMT_I, 0)
              , PAY_TOT     = @TotAmtI
              , INC_TOT     = @IncAmtI
              , LOC_TOT     = @LocAmtI
              , REAL_TOT    = @RealAmtI
    
    --  [ 지출결의/계좌이체 Merge를 위한 공백행 추가 ] ---------------------------------------------------------------------
        INSERT  INTO #T_AFB900UKR1 (PROV_DRAFT_NO, PROV_DRAFT_SEQ
                                  , SEQ, COMP_CODE, CMS_TRANS_YN, INPUT_GUBUN, TRANS_DATE, TRANS_RESULT_YN
                                  , PROV_AMT_I, TOT_AMT_I, INC_AMT_I, LOC_AMT_I, REAL_AMT_I, TRANS_SEQ, REMARK_DTL
                                  , INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME)
        SELECT  CASE WHEN INPUT_GUBUN = '1' THEN PROV_DRAFT_NO
                     WHEN INPUT_GUBUN = '2' THEN CONVERT(NVARCHAR, TRANS_SEQ)
                END
              , MAX(ISNULL(PROV_DRAFT_SEQ, 0)) + 1
              , MAX(SEQ), COMP_CODE, CMS_TRANS_YN, INPUT_GUBUN, 'B', TRANS_RESULT_YN
              , 0, 0, 0, 0, 0, 0, ''
              , MAX(INSERT_DB_USER), MAX(INSERT_DB_TIME), MAX(UPDATE_DB_USER), MAX(UPDATE_DB_TIME)
        FROM    #T_AFB900UKR1  WITH (NOLOCK)
        GROUP   BY COMP_CODE, CMS_TRANS_YN, INPUT_GUBUN, TRANS_RESULT_YN
              , CASE WHEN INPUT_GUBUN = '1' THEN PROV_DRAFT_NO
                     WHEN INPUT_GUBUN = '2' THEN CONVERT(NVARCHAR, TRANS_SEQ)
                END
    
    --  [ 데이터 조회 ] ----------------------------------------------------------------------------------------------------
        SELECT  * , 
        	TOT_AMT_I 	AS TOT_AMT_I_USE_SUMMARY
        FROM    #T_AFB900UKR1  WITH (NOLOCK)
        
        WHERE  TRANS_DATE != 'B'
        
        ORDER   BY SEQ
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END
	</select>
	<select id="afb900ukrServiceImpl.selectFundingTargetList" parameterType="Map" resultType="rMap">
		--afb900ukr.Cafb900ukr[fnAfb900Qref] QUERY01
    BEGIN
        SET NOCOUNT ON
        SET ARITHABORT ON
    
        DECLARE         @COMP_CODE          NVARCHAR(08)                --(필수) 법인코드
                      , @FR_PAY_DATE        NVARCHAR(08)                --(필수) FROM 지출작성일
                      , @TO_PAY_DATE        NVARCHAR(08)                --(필수) TO   지출작성일
                      , @SAVE_CODE          NVARCHAR(08)                --(선택) 출금계좌코드
                      , @SAVE_NAME          NVARCHAR(30)                --(선택) 출금계좌명
                      , @DEPT_CODE          NVARCHAR(08)                --(선택) 예산부서코드
                      , @DEPT_NAME          NVARCHAR(30)                --(선택) 예산부서명
                      , @TITLE              NVARCHAR(100)               --(선택) 지출건명
                      , @USER_ID            NVARCHAR(100)                --(필수) 사용자ID
                      , @PJT_CODE           NVARCHAR(08)                --(선택) 프로젝트코드
                      , @PJT_NAME           NVARCHAR(30)                --(선택) 프로젝트명
    
    --  [ 변수 값 할당 ] ---------------------------------------------------------------------------------------------------
        SET @COMP_CODE      = #{S_COMP_CODE}
        SET @FR_PAY_DATE    = #{FR_PAY_DATE}
        SET @TO_PAY_DATE    = #{TO_PAY_DATE}
        SET @SAVE_CODE      = #{SAVE_CODE}
        SET @SAVE_NAME      = #{SAVE_NAME}
        SET @DEPT_CODE      = #{DEPT_CODE}
        SET @DEPT_NAME      = #{DEPT_NAME}
        SET @TITLE          = #{TITLE}
        SET @USER_ID        = #{S_USER_ID}
        SET @PJT_CODE       = #{PJT_CODE}
        SET @PJT_NAME       = #{PJT_NAME}
    
    --  [ 초기화 ] ---------------------------------------------------------------------------------------------------------
        IF ( @FR_PAY_DATE = '*' OR @FR_PAY_DATE IS NULL )
        BEGIN
            SELECT  TOP 0
                    CONVERT(BIGINT, 0)                                      AS SEQ
                  , CONVERT(BIT, 0)                                         AS CHOICE
                  , CONVERT(NVARCHAR(20) , '')                              AS PROV_DRAFT_NO
                  , CONVERT(NUMERIC(04, 0), 0)                              AS PROV_DRAFT_SEQ
                  , CONVERT(NVARCHAR(01) , '')                              AS AMT_GUBUN
                  , CONVERT(NVARCHAR(10) , '')                              AS PAY_DATE
                  , CONVERT(NVARCHAR(10) , '')                              AS APP_DATE
                  , CONVERT(NVARCHAR(100), '')                              AS TITLE
                  , CONVERT(NVARCHAR(100), '')                              AS PJT_CODE
                  , CONVERT(NVARCHAR(100), '')                              AS PJT_NAME
                  , CONVERT(NUMERIC(30, 6), 0)                              AS PROV_AMT_I
                  , CONVERT(NVARCHAR(02) , '')                              AS PAY_DIVI
                  , CONVERT(NVARCHAR(100), '')                              AS PAY_DIVI_NAME
                  , CONVERT(NUMERIC(30, 6), 0)                              AS TOT_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS INC_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS LOC_AMT_I
                  , CONVERT(NUMERIC(30, 6), 0)                              AS REAL_AMT_I
                  , CONVERT(NVARCHAR(30) , '')                              AS PEND_CODE
                  , CONVERT(NVARCHAR(10) , '')                              AS PAY_CUSTOM_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS PAY_CUSTOM_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS CUSTOM_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS CUSTOM_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS IN_SAVE_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS IN_SAVE_NAME
                  , CONVERT(NVARCHAR(08) , '')                              AS IN_BANK_CODE
                  , CONVERT(NVARCHAR(50) , '')                              AS IN_BANK_NAME
                  , CONVERT(NVARCHAR(255), '')                              AS IN_BANKBOOK_NUM
                  , CONVERT(NVARCHAR(50) , '')                              AS IN_BANKBOOK_NAME
                  , CONVERT(NVARCHAR(255), '')                              AS REMARK_DTL
                  , CONVERT(NVARCHAR(08) , '')                              AS OUT_SAVE_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS OUT_SAVE_NAME
                  , CONVERT(NVARCHAR(255), '')                              AS OUT_BANKBOOK_NUM
                  , CONVERT(NVARCHAR(08) , '')                              AS OUT_BANK_CODE
                  , CONVERT(NVARCHAR(08) , '')                              AS DIV_CODE
                  , CONVERT(NVARCHAR(08) , '')                              AS DEPT_CODE
                  , CONVERT(NVARCHAR(30) , '')                              AS DEPT_NAME
                  , CONVERT(NVARCHAR(100), '')                              AS REFER_NUM
    
            RETURN
        END
    
    --  [ 명칭 참조 유형 ] ------------------------------------------------------------------------------------------------
        DECLARE         @RefItem            NVARCHAR(01)
    
        SELECT TOP 1 @RefItem = REF_ITEM
        FROM   BSA300T WITH (NOLOCK)
        WHERE  USER_ID = @USER_ID
    
        SET @RefItem = ISNULL(@RefItem, N'0')
    
    --  [ 날짜 포맷 유형 설정 ] --------------------------------------------------------------------------------------------
        DECLARE         @DateFormat         NVARCHAR(10)
    
        SELECT  TOP 1 @DateFormat = CODE_NAME
        FROM    BSA100T WITH (NOLOCK)
        WHERE   COMP_CODE = @COMP_CODE
        AND     MAIN_CODE = N'B044'
        AND     REF_CODE1 = N'Y'
    
        SET @DateFormat = ISNULL(@DateFormat, 'YYYY/MM/DD')
    
    --  [ 그룹웨어 연동여부 설정 ] ----------------------------------------------------------------------------------------
        DECLARE         @LinkedGW           NVARCHAR(01)
    
        SELECT TOP 1 @LinkedGW = REF_CODE1
        FROM   BSA100T WITH (NOLOCK)
        WHERE  COMP_CODE = @COMP_CODE
        AND    MAIN_CODE = N'A169'
        AND    SUB_CODE  = N'20'
    
        SET @LinkedGW = ISNULL(@LinkedGW, 'N')
    
    
    --  [ 데이터 생성 ] ----------------------------------------------------------------------------------------------------
        IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#T_AFB900UKR2'))
            DROP TABLE #T_AFB900UKR2
    
        CREATE TABLE #T_AFB900UKR2
               ( PROV_DRAFT_NO               NVARCHAR(20)
               , PROV_DRAFT_SEQ              NUMERIC(4,0)
               , AMT_GUBUN                   NVARCHAR(01)
               , PAY_DATE                    NVARCHAR(10)
               , APP_DATE                    NVARCHAR(10)
               , TITLE                       NVARCHAR(200)
               , PJT_CODE                    NVARCHAR(10)
               , PJT_NAME                    NVARCHAR(50)
               , PROV_AMT_I                  NUMERIC(30,6)
               , PAY_DIVI                    NVARCHAR(10)
               , PAY_DIVI_NAME               NVARCHAR(30)
               , TOT_AMT_I                   NUMERIC(30,6)
               , INC_AMT_I                   NUMERIC(30,6)
               , LOC_AMT_I                   NUMERIC(30,6)
               , REAL_AMT_I                  NUMERIC(30,6)
               , PEND_CODE                   NVARCHAR(03)
               , PAY_CUSTOM_CODE             NVARCHAR(20)
               , PAY_CUSTOM_NAME             NVARCHAR(50)
               , CUSTOM_CODE                 NVARCHAR(20)
               , CUSTOM_NAME                 NVARCHAR(20)
               , IN_SAVE_CODE                NVARCHAR(10)
               , IN_SAVE_NAME                NVARCHAR(30)
               , IN_BANK_CODE                NVARCHAR(10)
               , IN_BANK_NAME                NVARCHAR(30)
               , IN_BANKBOOK_NUM             NVARCHAR(50)
               , IN_BANKBOOK_NAME            NVARCHAR(50)
               , REMARK_DTL                  NVARCHAR(255)
               , OUT_SAVE_CODE               NVARCHAR(10)
               , OUT_SAVE_NAME               NVARCHAR(30)
               , OUT_BANKBOOK_NUM            NVARCHAR(50)
               , OUT_BANK_CODE               NVARCHAR(10)
               , DIV_CODE                    NVARCHAR(08)
               , DEPT_CODE                   NVARCHAR(08)
               , DEPT_NAME                   NVARCHAR(30)
               , REFER_NUM                   NVARCHAR(30)
              )
    
        -- 1. 지출액
        INSERT INTO #T_AFB900UKR2
        SELECT  B.PAY_DRAFT_NO                                                      AS PROV_DRAFT_NO
              , B.SEQ                                                               AS PROV_DRAFT_SEQ
              , '1'                                                                 AS AMT_GUBUN
              , CASE WHEN ISNULL(A.PAY_DATE, '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.PAY_DATE, 1, 4))
                                             , 'MM'  , SUBSTRING(A.PAY_DATE, 5, 2))
                                             , 'DD'  , SUBSTRING(A.PAY_DATE, 7, 2))
                END                                                                 AS PAY_DATE
              , CASE WHEN ISNULL(CONVERT(NVARCHAR(8), F.APP_DATE, 112), '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 1, 4))
                                             , 'MM'  , SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 5, 2))
                                             , 'DD'  , SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 7, 2))
                END                                                                 AS APP_DATE
              , A.TITLE                                                             AS TITLE
              , B.PJT_CODE                                                          AS PJT_CODE
              , H.PJT_NAME                                                          AS PJT_NAME
              , ISNULL(B1.PROV_AMT_I, 0)                                            AS PROV_AMT_I
              , B.PAY_DIVI                                                          AS PAY_DIVI
              , M1.CODE_NAME                                                        AS PAY_DIVI_NAME
              , CASE WHEN ISNULL(M5.REF_CODE1, 'Y') = 'Y' THEN B.REAL_AMT_I
                     ELSE B.TOT_AMT_I
                END                                                                 AS TOT_AMT_I
              , CASE WHEN ISNULL(M5.REF_CODE1, 'Y') = 'Y' THEN 0
                     ELSE B.INC_AMT_I
                END                                                                 AS INC_AMT_I
              , CASE WHEN ISNULL(M5.REF_CODE1, 'Y') = 'Y' THEN 0
                     ELSE B.LOC_AMT_I
                END                                                                 AS LOC_AMT_I
              , B.REAL_AMT_I                                                        AS REAL_AMT_I
              , B.PEND_CODE                                                         AS PEND_CODE
              , B.PAY_CUSTOM_CODE                                                   AS PAY_CUSTOM_CODE
              , E.PAY_CUSTOM_NAME                                                   AS PAY_CUSTOM_NAME
              , B.CUSTOM_CODE                                                       AS CUSTOM_CODE
              , CASE WHEN @RefItem = N'0' THEN D1.CUSTOM_NAME
                     WHEN @RefItem = N'1' THEN D1.CUSTOM_NAME1
                     WHEN @RefItem = N'2' THEN D1.CUSTOM_NAME2
                END                                                                 AS CUSTOM_NAME
              , CASE WHEN ISNULL(M1.REF_CODE2, '') = 'C' THEN ISNULL(M3.REF_CODE1, '')
                     WHEN ISNULL(M1.REF_CODE2, '') = 'D' THEN ISNULL(M6.REF_CODE1, '')
                     ELSE ''
                END                                                                 AS IN_SAVE_CODE
              , CASE WHEN ISNULL(M1.REF_CODE2, '') = 'C' THEN C2.SAVE_NAME
                     WHEN ISNULL(M1.REF_CODE2, '') = 'D' THEN C3.SAVE_NAME
                     ELSE ''
                END                                                                 AS IN_SAVE_NAME
              , CASE WHEN ISNULL(M1.REF_CODE2, '') = 'C' THEN C2.BANK_CODE
                     WHEN ISNULL(M1.REF_CODE2, '') = 'D' THEN C2.BANK_CODE
                     ELSE B.IN_BANK_CODE
                END                                                                 AS IN_BANK_CODE
              , CASE WHEN ISNULL(M1.REF_CODE2, '') = 'C'
                          THEN CASE WHEN @RefItem = N'0' THEN D3.CUSTOM_NAME
                                    WHEN @RefItem = N'1' THEN D3.CUSTOM_NAME1
                                    WHEN @RefItem = N'2' THEN D3.CUSTOM_NAME2
                               END
                     WHEN ISNULL(M1.REF_CODE2, '') = 'D'
                          THEN CASE WHEN @RefItem = N'0' THEN D4.CUSTOM_NAME
                                    WHEN @RefItem = N'1' THEN D4.CUSTOM_NAME1
                                    WHEN @RefItem = N'2' THEN D4.CUSTOM_NAME2
                               END
                     ELSE CASE WHEN @RefItem = N'0' THEN D2.CUSTOM_NAME
                               WHEN @RefItem = N'1' THEN D2.CUSTOM_NAME1
                               WHEN @RefItem = N'2' THEN D2.CUSTOM_NAME2
                          END
                END                                                                 AS IN_BANK_NAME
              , CASE WHEN ISNULL(M1.REF_CODE2, '') = 'C' THEN uniLITE.fnCipherDecrypt(C2.BANK_ACCOUNT, '') 
                     WHEN ISNULL(M1.REF_CODE2, '') = 'D' THEN uniLITE.fnCipherDecrypt(C3.BANK_ACCOUNT, '') 
                     ELSE uniLITE.fnCipherDecrypt(B.IN_BANKBOOK_NUM, '')
                END                                                                 AS IN_BANKBOOK_NUM
              , CASE WHEN ISNULL(M1.REF_CODE2, '') IN ('C', 'D') THEN G.DIV_FULL_NAME
                     ELSE B.IN_BANKBOOK_NAME
                END                                                                 AS IN_BANKBOOK_NAME
              , B.REMARK                                                            AS REMARK_DTL
              , B.SAVE_CODE                                                         AS OUT_SAVE_CODE
              , C1.SAVE_NAME                                                        AS OUT_SAVE_NAME
              , uniLITE.fnCipherDecrypt(C1.BANK_ACCOUNT, '')                        AS OUT_BANKBOOK_NUM
              , C1.BANK_CODE                                                        AS OUT_BANK_CODE
              , B.DIV_CODE                                                          AS DIV_CODE
              , B.DEPT_CODE                                                         AS DEPT_CODE
              , B.DEPT_NAME                                                         AS DEPT_NAME
              , B.PAY_DRAFT_NO + RIGHT('0000' + CONVERT(NVARCHAR(5), B.SEQ), 4)     AS REFER_NUM
        FROM                AFB700T   A  WITH (NOLOCK)
                INNER JOIN  AFB710T   B  WITH (NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                      AND B.PAY_DRAFT_NO    = A.PAY_DRAFT_NO
                INNER JOIN  (SELECT COMP_CODE
                                  , PAY_DRAFT_NO
                                  , SUM(TOT_AMT_I) AS PROV_AMT_I
                             FROM   AFB710T WITH (NOLOCK)
                             WHERE  COMP_CODE    = @COMP_CODE
                             GROUP  BY COMP_CODE, PAY_DRAFT_NO
                             )        B1               ON B1.COMP_CODE      = A.COMP_CODE
                                                      AND B1.PAY_DRAFT_NO   = A.PAY_DRAFT_NO
                LEFT  JOIN  AFS100T   C1 WITH (NOLOCK) ON C1.COMP_CODE      = B.COMP_CODE
                                                      AND C1.SAVE_CODE      = B.SAVE_CODE
                LEFT  JOIN  BCM100T   D1 WITH (NOLOCK) ON D1.COMP_CODE      = B.COMP_CODE
                                                      AND D1.CUSTOM_CODE    = B.CUSTOM_CODE
                LEFT  JOIN  BCM100T   D2 WITH (NOLOCK) ON D2.COMP_CODE      = B.COMP_CODE
                                                      AND D2.CUSTOM_CODE    = B.IN_BANK_CODE
                LEFT  JOIN  ABH200TV  E  WITH (NOLOCK) ON E.COMP_CODE       = B.COMP_CODE
                                                      AND E.PEND_CODE       = B.PEND_CODE
                                                      AND E.PAY_CUSTOM_CODE = B.PAY_CUSTOM_CODE
                LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
                                                      AND M1.MAIN_CODE      = N'A172'
                                                      AND M1.SUB_CODE       = B.PAY_DIVI
                LEFT  JOIN  BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE      = A.COMP_CODE
                                                      AND M2.MAIN_CODE      = N'S091'
                                                      AND M2.SUB_CODE       = A.COMP_CODE
                LEFT  JOIN  BSA100T   M3 WITH (NOLOCK) ON M3.COMP_CODE      = B.COMP_CODE
                                                      AND M3.MAIN_CODE      = N'A175'
                                                      AND M3.SUB_CODE       = N'1'   -- 법인카드 입금계좌
                LEFT  JOIN  BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE      = B.COMP_CODE
                                                      AND M4.MAIN_CODE      = N'A210'
                                                      AND M4.SUB_CODE       = B.PEND_CODE
                LEFT  JOIN  BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE      = A.COMP_CODE
                                                      AND M5.MAIN_CODE      = N'A169'
                                                      AND M5.SUB_CODE       = N'78'
                LEFT  JOIN  BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE      = B.COMP_CODE
                                                      AND M6.MAIN_CODE      = N'A175'
                                                      AND M6.SUB_CODE       = N'3'   -- 자동이체 입금계좌
                LEFT  JOIN  AFS100T   C2 WITH (NOLOCK) ON C2.COMP_CODE      = B.COMP_CODE
                                                      AND C2.SAVE_CODE      = M3.REF_CODE1
                LEFT  JOIN  AFS100T   C3 WITH (NOLOCK) ON C3.COMP_CODE      = B.COMP_CODE
                                                      AND C3.SAVE_CODE      = M6.REF_CODE1
                LEFT  JOIN  BCM100T   D3 WITH (NOLOCK) ON D3.COMP_CODE      = B.COMP_CODE
                                                      AND D3.CUSTOM_CODE    = C2.BANK_CODE
                LEFT  JOIN  BCM100T   D4 WITH (NOLOCK) ON D4.COMP_CODE      = B.COMP_CODE
                                                      AND D4.CUSTOM_CODE    = C3.BANK_CODE
                LEFT  JOIN  T_GWIF    F  WITH (NOLOCK) ON F.GWIF_ID         = M2.REF_CODE1 + N'1' + A.PAY_DRAFT_NO
                LEFT  JOIN  BOR120T   G  WITH (NOLOCK) ON G.COMP_CODE       = B.COMP_CODE
                                                      AND G.DIV_CODE        = B.DIV_CODE
                LEFT  JOIN  BCM600T   H  WITH (NOLOCK) ON H.COMP_CODE       = B.COMP_CODE
                                                      AND H.PJT_CODE        = B.PJT_CODE

        WHERE   A.COMP_CODE        =        @COMP_CODE
        AND     A.PAY_DATE        &gt;=        @FR_PAY_DATE
        AND     A.PAY_DATE        &lt;=        @TO_PAY_DATE
        AND   ((B.SAVE_CODE     LIKE        @SAVE_CODE + '%'    AND @SAVE_CODE  != '') OR (@SAVE_CODE   = ''))
        AND   ((C1.SAVE_NAME    LIKE N'%' + @SAVE_NAME + '%'    AND @SAVE_NAME  != '') OR (@SAVE_NAME   = ''))
        AND   ((B.DEPT_CODE     LIKE        @DEPT_CODE + '%'    AND @DEPT_CODE  != '') OR (@DEPT_CODE   = ''))
        AND   ((B.DEPT_NAME     LIKE N'%' + @DEPT_NAME + '%'    AND @DEPT_NAME  != '') OR (@DEPT_NAME   = ''))
        AND   ((B.PJT_CODE      LIKE        @PJT_CODE  + '%'    AND @PJT_CODE   != '') OR (@PJT_CODE    = ''))
        AND   ((H.PJT_NAME      LIKE N'%' + @PJT_NAME  + '%'    AND @PJT_NAME   != '') OR (@PJT_NAME    = ''))
        AND   ((A.TITLE         LIKE N'%' + @TITLE     + '%'    AND @TITLE      != '') OR (@TITLE       = ''))
        AND   ((ISNULL(A.STATUS   , '0') = '9'                  AND @LinkedGW    = 'N')
        OR     (ISNULL(F.GW_STATUS, '0') = '9'                  AND @LinkedGW    = 'Y'))
        AND     ISNULL(B.TRANS_SEQ, 0)   = 0
        AND     B.REAL_AMT_I != 0
    
    
        -- 2. 소득세/주민세 합계
        INSERT INTO #T_AFB900UKR2
        SELECT  B.PAY_DRAFT_NO                                                      AS PROV_DRAFT_NO
              , B.SEQ                                                               AS PROV_DRAFT_SEQ
              , '2'                                                                 AS AMT_GUBUN
              , CASE WHEN ISNULL(A.PAY_DATE, '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.PAY_DATE, 1, 4))
                                             , 'MM'  , SUBSTRING(A.PAY_DATE, 5, 2))
                                             , 'DD'  , SUBSTRING(A.PAY_DATE, 7, 2))
                END                                                                 AS PAY_DATE
              , CASE WHEN ISNULL(CONVERT(NVARCHAR(8), F.APP_DATE, 112), '') = '' THEN ''
                     ELSE REPLACE(
                          REPLACE(
                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 1, 4))
                                             , 'MM'  , SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 5, 2))
                                             , 'DD'  , SUBSTRING(CONVERT(NVARCHAR(8), F.APP_DATE, 112), 7, 2))
                END                                                                 AS APP_DATE
              , A.TITLE                                                             AS TITLE
              , B.PJT_CODE                                                          AS PJT_CODE
              , H.PJT_NAME                                                          AS PJT_NAME
              , ISNULL(B1.PROV_AMT_I, 0)                                            AS PROV_AMT_I
              , B.PAY_DIVI                                                          AS PAY_DIVI
              , M1.CODE_NAME                                                        AS PAY_DIVI_NAME
              , (B.INC_AMT_I + B.LOC_AMT_I)                                         AS TOT_AMT_I
              , B.INC_AMT_I                                                         AS INC_AMT_I
              , B.LOC_AMT_I                                                         AS LOC_AMT_I
              , (B.INC_AMT_I + B.LOC_AMT_I)                                         AS REAL_AMT_I
              , B.PEND_CODE                                                         AS PEND_CODE
              , B.PAY_CUSTOM_CODE                                                   AS PAY_CUSTOM_CODE
              , E.PAY_CUSTOM_NAME                                                   AS PAY_CUSTOM_NAME
              , B.CUSTOM_CODE                                                       AS CUSTOM_CODE
              , CASE WHEN @RefItem = N'0' THEN D1.CUSTOM_NAME
                     WHEN @RefItem = N'1' THEN D1.CUSTOM_NAME1
                     WHEN @RefItem = N'2' THEN D1.CUSTOM_NAME2
                END                                                                 AS CUSTOM_NAME
              , ISNULL(M3.REF_CODE1, '')                                            AS IN_SAVE_CODE
              , ISNULL(C2.SAVE_NAME, '')                                            AS IN_SAVE_NAME
              , ISNULL(C2.BANK_CODE, '')                                            AS IN_BANK_CODE
              , CASE WHEN @RefItem = N'0' THEN D3.CUSTOM_NAME
                     WHEN @RefItem = N'1' THEN D3.CUSTOM_NAME1
                     WHEN @RefItem = N'2' THEN D3.CUSTOM_NAME2
                END                                                                 AS IN_BANK_NAME
              , uniLITE.fnCipherDecrypt(C2.BANK_ACCOUNT, '')                        AS IN_BANKBOOK_NUM
              , G.DIV_FULL_NAME                                                     AS IN_BANKBOOK_NAME
              , B.REMARK                                                            AS REMARK_DTL
              , B.SAVE_CODE                                                         AS OUT_SAVE_CODE
              , C1.SAVE_NAME                                                        AS OUT_SAVE_NAME
              , uniLITE.fnCipherDecrypt(C1.BANK_ACCOUNT, '')                        AS OUT_BANKBOOK_NUM
              , C1.BANK_CODE                                                        AS OUT_BANK_CODE
              , B.DIV_CODE                                                          AS DIV_CODE
              , B.DEPT_CODE                                                         AS DEPT_CODE
              , B.DEPT_NAME                                                         AS DEPT_NAME
              , B.PAY_DRAFT_NO + RIGHT('0000' + CONVERT(NVARCHAR(5), B.SEQ), 4)     AS REFER_NUM
        FROM                AFB700T   A  WITH (NOLOCK)
                INNER JOIN  AFB710T   B  WITH (NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                      AND B.PAY_DRAFT_NO    = A.PAY_DRAFT_NO
                INNER JOIN  (SELECT COMP_CODE
                                  , PAY_DRAFT_NO
                                  , SUM(TOT_AMT_I) AS PROV_AMT_I
                             FROM   AFB710T WITH (NOLOCK)
                             WHERE  COMP_CODE    = @COMP_CODE
                             GROUP  BY COMP_CODE, PAY_DRAFT_NO
                             )        B1               ON B1.COMP_CODE      = A.COMP_CODE
                                                      AND B1.PAY_DRAFT_NO   = A.PAY_DRAFT_NO
                LEFT  JOIN  AFS100T   C1 WITH (NOLOCK) ON C1.COMP_CODE      = B.COMP_CODE
                                                      AND C1.SAVE_CODE      = B.SAVE_CODE
                LEFT  JOIN  BCM100T   D1 WITH (NOLOCK) ON D1.COMP_CODE      = B.COMP_CODE
                                                      AND D1.CUSTOM_CODE    = B.CUSTOM_CODE
                LEFT  JOIN  BCM100T   D2 WITH (NOLOCK) ON D2.COMP_CODE      = B.COMP_CODE
                                                      AND D2.CUSTOM_CODE    = B.IN_BANK_CODE
                LEFT  JOIN  ABH200TV  E  WITH (NOLOCK) ON E.COMP_CODE       = B.COMP_CODE
                                                      AND E.PEND_CODE       = B.PEND_CODE
                                                      AND E.PAY_CUSTOM_CODE = B.PAY_CUSTOM_CODE
                LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
                                                      AND M1.MAIN_CODE      = N'A172'
                                                      AND M1.SUB_CODE       = B.PAY_DIVI
                LEFT  JOIN  BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE      = A.COMP_CODE
                                                      AND M2.MAIN_CODE      = N'S091'
                                                      AND M2.SUB_CODE       = A.COMP_CODE
                LEFT  JOIN  BSA100T   M3 WITH (NOLOCK) ON M3.COMP_CODE      = B.COMP_CODE
                                                      AND M3.MAIN_CODE      = N'A175'
                                                      AND M3.SUB_CODE       = N'2'
                LEFT  JOIN  BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE      = B.COMP_CODE
                                                      AND M4.MAIN_CODE      = N'A210'
                                                      AND M4.SUB_CODE       = B.PEND_CODE
                LEFT  JOIN  BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE      = A.COMP_CODE
                                                      AND M5.MAIN_CODE      = N'A169'
                                                      AND M5.SUB_CODE       = N'78'
                LEFT  JOIN  AFS100T   C2 WITH (NOLOCK) ON C2.COMP_CODE      = B.COMP_CODE
                                                      AND C2.SAVE_CODE      = M3.REF_CODE1
                LEFT  JOIN  BCM100T   D3 WITH (NOLOCK) ON D3.COMP_CODE      = B.COMP_CODE
                                                      AND D3.CUSTOM_CODE    = C2.BANK_CODE
                LEFT  JOIN  T_GWIF    F  WITH (NOLOCK) ON F.GWIF_ID         = M2.REF_CODE1 + N'1' + A.PAY_DRAFT_NO
                LEFT  JOIN  BOR120T   G  WITH (NOLOCK) ON G.COMP_CODE       = B.COMP_CODE
                                                      AND G.DIV_CODE        = B.DIV_CODE
                LEFT  JOIN  BCM600T   H  WITH (NOLOCK) ON H.COMP_CODE       = B.COMP_CODE
                                                      AND H.PJT_CODE        = B.PJT_CODE

        WHERE   A.COMP_CODE        =        @COMP_CODE
        AND     A.PAY_DATE        &gt;=        @FR_PAY_DATE
        AND     A.PAY_DATE        &lt;=        @TO_PAY_DATE
        AND   ((B.SAVE_CODE     LIKE        @SAVE_CODE + '%'    AND @SAVE_CODE  != '') OR (@SAVE_CODE   = ''))
        AND   ((C1.SAVE_NAME    LIKE N'%' + @SAVE_NAME + '%'    AND @SAVE_NAME  != '') OR (@SAVE_NAME   = ''))
        AND   ((B.DEPT_CODE     LIKE        @DEPT_CODE + '%'    AND @DEPT_CODE  != '') OR (@DEPT_CODE   = ''))
        AND   ((B.DEPT_NAME     LIKE N'%' + @DEPT_NAME + '%'    AND @DEPT_NAME  != '') OR (@DEPT_NAME   = ''))
        AND   ((B.PJT_CODE      LIKE        @PJT_CODE  + '%'    AND @PJT_CODE   != '') OR (@PJT_CODE    = ''))
        AND   ((H.PJT_NAME      LIKE N'%' + @PJT_NAME  + '%'    AND @PJT_NAME   != '') OR (@PJT_NAME    = ''))
        AND   ((A.TITLE         LIKE N'%' + @TITLE     + '%'    AND @TITLE      != '') OR (@TITLE       = ''))
        AND   ((ISNULL(A.STATUS   , '0')  = '9'                 AND @LinkedGW    = 'N')
        OR     (ISNULL(F.GW_STATUS, '0')  = '9'                 AND @LinkedGW    = 'Y'))
        AND     ISNULL(B.TRANS_SEQ,  0 )  = 0
        AND    (B.INC_AMT_I != 0 OR B.LOC_AMT_I != 0)
        AND     ISNULL(M5.REF_CODE1, 'Y') = 'Y'
    
    
    
    --  [ 데이터 조회 ] ----------------------------------------------------------------------------------------------------
        SELECT  ROW_NUMBER() OVER (ORDER BY PROV_DRAFT_NO, PROV_DRAFT_SEQ, AMT_GUBUN) AS SEQ
              , CONVERT(BIT, 0)                                                       AS CHOICE
              , PROV_DRAFT_NO
              , PROV_DRAFT_SEQ
              , AMT_GUBUN
              , PAY_DATE
              , APP_DATE
              , TITLE
              , PJT_CODE
              , PJT_NAME
              , PROV_AMT_I
              , PAY_DIVI
              , PAY_DIVI_NAME
              , TOT_AMT_I
              , TOT_AMT_I 	AS TOT_AMT_I_USE_SUMMARY
              , INC_AMT_I
              , LOC_AMT_I
              , REAL_AMT_I
              , PEND_CODE
              , PAY_CUSTOM_CODE
              , PAY_CUSTOM_NAME
              , CUSTOM_CODE
              , CUSTOM_NAME
              , IN_SAVE_CODE
              , IN_SAVE_NAME
              , IN_BANK_CODE
              , IN_BANK_NAME
              , IN_BANKBOOK_NUM
              , IN_BANKBOOK_NAME
              , REMARK_DTL
              , OUT_SAVE_CODE
              , OUT_SAVE_NAME
              , OUT_BANKBOOK_NUM
              , OUT_BANK_CODE
              , DIV_CODE
              , DEPT_CODE
              , DEPT_NAME
              , REFER_NUM
        FROM    #T_AFB900UKR2  WITH (NOLOCK)
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END
	</select>

<insert id="afb900ukrServiceImpl.insertLogBranch" parameterType="Map">    	
 	INSERT INTO L_AFB900T_BR
          (
            KEY_VALUE           ,OPR_FLAG
           ,TRANS_SEQ           ,COMP_CODE          ,INPUT_GUBUN           ,AMT_GUBUN           ,TRANS_DATE
           ,PROV_DRAFT_NO       ,PROV_DRAFT_SEQ     ,INSERT_DB_USER        ,INSERT_DB_TIME      ,UPDATE_DB_USER
           ,UPDATE_DB_TIME      ,TEMPC_01           ,TEMPC_02              ,TEMPC_03            ,TEMPN_01
           ,TEMPN_02            ,TEMPN_03
           )
    VALUES
     	  ( 
     	    #{KEY_VALUE}        ,#{OPR_FLAG}
           ,#{TRANS_SEQ}        ,#{S_COMP_CODE}       ,#{INPUT_GUBUN}         ,#{AMT_GUBUN}        ,#{TRANS_DATE}
           ,#{PROV_DRAFT_NO}    ,#{PROV_DRAFT_SEQ}  ,#{S_USER_ID}           ,GETDATE()           ,#{S_USER_ID}
           ,GETDATE()           ,NULL               ,NULL                   ,NULL                ,NULL
           ,NULL                ,NULL
           )
</insert>

<update id="spUspAccntAfb900ukrBrBatch" parameterType="Map" statementType="CALLABLE">
	{call USP_ACCNT_AFB900UKR_BR_Batch (
		#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{FrDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ToDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{UserId, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}
</update>	

<update id="spUspAccntAfb900ukrBrCaseBy" parameterType="Map" statementType="CALLABLE">
	{call USP_ACCNT_AFB900UKR_BR_CaseBy (
		#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{FrDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ToDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{UserId, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}
</update>	

<update id="spUspAccntAfb900ukrBrResult" parameterType="Map" statementType="CALLABLE">
	{call USP_ACCNT_AFB900UKR_BR_Result (
		#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{FrDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ToDate, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{UserId, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}
</update>	

<insert id="afb900ukrServiceImpl.insertLogDetail" parameterType="Map">    	
 	INSERT INTO L_AFB900T
           (KEY_VALUE           ,OPR_FLAG   
           ,COMP_CODE           ,INPUT_GUBUN           ,AMT_GUBUN           ,TRANS_DATE           ,REMARK
           ,TOT_AMT_I           ,INC_AMT_I             ,LOC_AMT_I           ,REAL_AMT_I           ,PAY_DIVI
           ,CUSTOM_CODE         ,PEND_CODE             ,PAY_CUSTOM_CODE     ,OUT_BANK_CODE        ,OUT_SAVE_CODE
           ,IN_BANK_CODE        ,IN_BANKBOOK_NUM       ,IN_BANKBOOK_NAME    ,IN_SAVE_CODE         ,REMARK_DTL
           ,PROV_DRAFT_NO       ,PROV_DRAFT_SEQ        ,DIV_CODE            ,DEPT_CODE            ,DEPT_NAME
           ,EX_DATE             ,EX_NUM                ,TRANS_FEE           ,TRANS_ID             ,TRANS_STATE_NUM
           ,CMS_TRANS_YN        ,CMS_TRANS_DATE        ,TRANS_RESULT_YN     ,TRANS_RESULT_CODE    ,TRANS_RESULT_MSG
           ,INSERT_DB_USER      ,INSERT_DB_TIME        ,UPDATE_DB_USER      ,UPDATE_DB_TIME       ,TEMPC_01
           ,TEMPC_02            ,TEMPC_03              ,TEMPN_01            ,TEMPN_02             ,TEMPN_03
           ) 
     VALUES
     (		#{KEY_VALUE}        ,#{OPR_FLAG}
     	   ,#{S_COMP_CODE}      ,#{INPUT_GUBUN}        ,#{AMT_GUBUN}         ,#{TRANS_DATE}        ,#{REMARK}
           ,#{TOT_AMT_I}        ,#{INC_AMT_I}          ,#{LOC_AMT_I}         ,#{REAL_AMT_I}        ,#{PAY_DIVI}
           ,#{CUSTOM_CODE}      ,#{PEND_CODE}          ,#{PAY_CUSTOM_CODE}   ,#{OUT_BANK_CODE}     ,#{OUT_SAVE_CODE}
           ,#{IN_BANK_CODE}     ,uniLITE.fnCipherEncrypt(#{IN_BANKBOOK_NUM}, '')   ,#{IN_BANKBOOK_NAME}  ,#{IN_SAVE_CODE}      ,#{REMARK_DTL}
           ,#{PROV_DRAFT_NO}    ,#{PROV_DRAFT_SEQ}     ,#{DIV_CODE}          ,#{DEPT_CODE}         ,#{DEPT_NAME}
           ,NULL				,NULL             	   ,NULL         		 ,NULL          	   ,NULL
           ,NULL    		    ,NULL     			   ,NULL				 ,NULL				   ,NULL
           ,#{S_USER_ID}        ,GETDATE()             ,#{S_USER_ID}         ,GETDATE()            ,NULL
           ,NULL                ,NULL                  ,NULL                 ,NULL                 ,NULL
     
     )
</insert>
	  	

	  	
<update id="spUspAccntAfb900ukr" parameterType="Map" statementType="CALLABLE">
	{call USP_ACCNT_AFB900UKR (
		#{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{LangCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{UserId, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
		#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
	)}
</update>	




</mapper>