<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb020ukrServiceImpl">
	<!--
	1. result Class 확인(foren.framework.lib.tree.GenericTreeDataMap)!
	2. SQL의 수행 결과 순서는 parent가 child보더 먼저 나오게 구성 되어야 함.
	3. id와 parentId는 필수 !
	4. 최상의 node는 parentId가 root로 지정 되어야 함.
	-->
	<select id="afb020ukrServiceImpl.selectTreeList" parameterType="Map" resultType="foren.framework.lib.tree.GenericTreeDataMap">
		/* afb020ukrServiceImpl.selectTreeList */
		SELECT 
			  S.ID											AS 'id'
			, S.PARENT_NODE 								AS 'parentId'
			, CASE WHEN LEN(TREE_LEVEL) = 1 THEN 1
	                 ELSE ((LEN(TREE_LEVEL) - 1) / 3) + 1
	            END                                         AS LVL
	         ,  ''                                          AS ONLY_CODE
	         ,  ''                                          AS LEVEL1
	         ,  ''                                          AS LEVEL2
	         ,  ''                                          AS LEVEL3
	         ,  ''                                          AS LEVEL4
	         ,  ''                                          AS LEVEL5
	         ,  TREE_CODE                                 AS TREE_CODE
	         ,  TREE_NAME                                 AS TREE_NAME
	         ,  TREE_LEVEL                                AS TREE_LEVEL
	         ,  TYPE_LEVEL                                AS TYPE_LEVEL
	         ,  SECTION_CD                                AS SECTION_CD
	         ,  MAKE_SALE                                 AS MAKE_SALE
	         ,  USE_YN                                    AS USE_YN
	         ,  SORT_SEQ                                  AS SORT_SEQ
	         ,  BUDG_TREE_CODE                            AS BUDG_TREE_CODE
	         ,  S.BUDG_TREE_NAME                          AS BUDG_TREE_NAME
	         ,  REMARK                                    AS REMARK
	         , ''                                         AS UPLEVE_CODE
	         ,  COMP_CODE                                 AS COMP_CODE
	         ,  UPDATE_DB_USER                            AS UPDATE_DB_USER
	         ,  UPDATE_DB_TIME                            AS UPDATE_DB_TIME  
		FROM (
			SELECT a.TREE_LEVEL ID
				 , c.TREE_NAME as BUDG_TREE_NAME
				,CASE 
					WHEN LEN(a.TREE_LEVEL) = 1
						THEN 'root' 
					ELSE SUBSTRING(a.tree_level, 1, LEN(a.TREE_LEVEL) - 3)
					END parent_node
				,a.*
			FROM 			BSA210T A WITH (NOLOCK)
				 LEFT JOIN (
                        SELECT  MAX(TREE_LEVEL) AS B1
                             ,  COMP_CODE       AS B2
                        FROM    BSA210T WITH (NOLOCK)
                        GROUP   BY TREE_LEVEL, COMP_CODE
                      ) AS B ON B.B1 = A.TREE_LEVEL
                            AND B.B2 = A.COMP_CODE
				LEFT JOIN BSA210T AS C WITH (NOLOCK) ON C.COMP_CODE = A.COMP_CODE
                                                	AND C.TREE_CODE = A.BUDG_TREE_CODE
			WHERE A.COMP_CODE = #{S_COMP_CODE}
			<if test="@foren.Ognl@isNotEmpty(USE_YN)">
				AND A.USE_YN = #{USE_YN}
			</if>
			)  s
		ORDER BY s.TREE_LEVEL

	</select>
	
	<update id="afb020ukrServiceImpl.update" parameterType="Map"> 
		--afb020ukr.Cafb020ukr[fnAfb020Save] Query04
		UPDATE BSA210T
		   SET BUDG_TREE_CODE = #{BUDG_TREE_CODE}
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		     
		 WHERE TREE_CODE      = #{TREE_CODE}
		   AND COMP_CODE      = #{S_COMP_CODE} 
	</update>
</mapper>