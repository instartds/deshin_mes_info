<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afb220skrServiceImpl">
	<select id="afb220skrServiceImpl.getAmtPoint" parameterType="Map" resultType="rMap">
	/*==단수 처리====================================================================*/
		 SELECT AMT_POINT
		   FROM ABA100T  WITH (NOLOCK)
		  WHERE COMP_CODE = #{S_COMP_CODE}
	</select>

	<select id="afb220skrServiceImpl.selectList1" parameterType="Map" resultType="rMap">
	/*==1. 금액 단위====================================================================*/
		--UArpt08KR.Cafb220SKR[fnMakeSQL]Query2
		DECLARE @lUnit		NVARCHAR(10)
		 SELECT @lUnit = REF_CODE1
		   FROM BSA100T  WITH (NOLOCK)
		  WHERE COMP_CODE	= #{S_COMP_CODE}
		    AND MAIN_CODE	= 'B042'
		    AND SUB_CODE	= #{AMT_UNIT}
	
	 /*==Main Query==================================================================
	    0 재무제표양식 차수 가져오기
	   ==============================================================================*/
		--UArpt08KR.Cafb220SKR[fnMakeSQL]Query3
		DECLARE @sGubun NVARCHAR(10) 
		 SELECT @sGubun = SUB_CODE
		   FROM BSA100T   WITH (NOLOCK)
		  WHERE COMP_CODE = #{S_COMP_CODE}
		    AND MAIN_CODE = 'A093' 
		    AND ISNULL(REF_CODE1,'') = 'Y' 
	    
	 /*==============================================================================
	    ① 과목 데이터
	   ==============================================================================*/
		--UArpt08KR.Cafb220SKR[fnMakeSQL]Query4
		SELECT T.ACCNT_CD
		     , T.ACCNT
		     , T.ACCNT_NAME
		     , T.OPT_DIVI
	
		<if test="AMT_POINT == &quot;1&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BUDG ELSE 0 
		                         END) /  @lUnit,0,1), 0) AS [BUDG${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.RESULT ELSE 0 
		                         END) /  @lUnit, 0, 1), 0) AS [RESULT${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BALANCE ELSE 0 
		                         END) /  @lUnit, 0, 1), 0) AS [BALANCE${index+1}]
		     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                             THEN T.BUDG ELSE 0
		                                    END), 0)>0 
		                        THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.RESULT ELSE 0 
		                                         END), 0) / 
		                             ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.BUDG ELSE 0 
		                                         END), 0) * 100 
		                        ELSE 0 
		               END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0, 1), 0)    BUDG_T
		     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0, 1), 0)  RESULT_T
		     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0, 1), 0) BALANCE_T
		     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
		                         THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
		               END , 0) ACHIEVE_T
	    </if>
		<if test="AMT_POINT == &quot;2&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BUDG ELSE 0
		                         END) /@lUnit + 0.49,0,1), 0) AS [BUDG${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.RESULT ELSE 0 
		                         END) /@lUnit + 0.49, 0, 1), 0) AS [RESULT${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BALANCE ELSE 0 
		                         END) /@lUnit + 0.49, 0, 1), 0) AS [BALANCE${index+1}]
		     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                             THEN T.BUDG ELSE 0
		                                    END), 0) >0 
		                        THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.RESULT ELSE 0 
		                                         END), 0) / 
		                             ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.BUDG ELSE 0 
		                                         END), 0) * 100 
		                        ELSE 0 
		               END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit + 0.49, 0, 1), 0)    BUDG_T
		     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit + 0.49, 0, 1), 0)  RESULT_T
		     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit + 0.49, 0, 1), 0) BALANCE_T
		     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
		               END , 0) ACHIEVE_T
		</if> 
		--AMT_POINT가 1 또는 2가 아닐때,
		<if test="AMT_POINT != &quot;1&quot; and AMT_POINT != &quot;2&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BUDG ELSE 0 
		                         END) / @lUnit,0), 0) AS [BUDG${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.RESULT ELSE 0
		                         END) / @lUnit, 0), 0) AS [RESULT${index+1}]
		     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                  THEN T.BALANCE ELSE 0 
		                         END) / @lUnit, 0), 0) AS [BALANCE${index+1}]
		     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                             THEN T.BUDG ELSE 0 
		                                    END), 0) >0 
		                        THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.RESULT ELSE 0 
		                                         END), 0) / 
		                             ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                  THEN T.BUDG ELSE 0 
		                                         END), 0) * 100 
		                        ELSE 0 
		               END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0), 0)    BUDG_T
		     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0), 0)  RESULT_T
		     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0), 0) BALANCE_T
		     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
		                        THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
		               END , 0) ACHIEVE_T
	    </if>
		     , CASE WHEN (SELECT SUBJECT_DIVI 
		                    FROM ABA400T  WITH (NOLOCK)
		                   WHERE COMP_CODE = #{S_COMP_CODE}
		                     AND ACCNT     = T.ACCNT) = '2' 
		                     AND (SELECT ACCNT_CD 
		                            FROM ABA400T   WITH (NOLOCK)
		                           WHERE COMP_CODE = #{S_COMP_CODE}
		                             AND ACCNT     = T.ACCNT) != 'ACCNT'
		                 THEN '2' ELSE '1'
		        END ACCNT_DIVI
	    
		  FROM(
		       (SELECT A.BUDG_YYYYMM
		             , B.ACCNT_CD ACCNT_CD
		             , (SELECT ACCNT_CD 
		                  FROM ABA400T  WITH (NOLOCK)
		                 WHERE COMP_CODE = #{S_COMP_CODE}
		                   AND ACCNT     = A.ACCNT) ACCNT
		             , (SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = #{S_COMP_CODE}
		                   AND ACCNT     = (SELECT ACCNT_CD 
		                                      FROM ABA400T   WITH (NOLOCK)
		                                     WHERE COMP_CODE = #{S_COMP_CODE}
		                                       AND ACCNT     = A.ACCNT)) ACCNT_NAME
		             , '0' OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) - ISNULL(D.DIVERT_BUDG_I, 0)) AS BUDG
		             , A.EX_AMT_I+A.AC_AMT_I RESULT
		             , ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) -A.EX_AMT_I-A.AC_AMT_I - ISNULL(D.DIVERT_BUDG_I, 0) BALANCE
		          FROM AFB110T A   WITH (NOLOCK)
		                      INNER JOIN ABA121T B  WITH (NOLOCK)
		                              ON B.COMP_CODE = #{S_COMP_CODE}
		                             AND A.ACCNT     = B.ACCNT 
		                             AND B.GUBUN     = @SGUBUN  
		                             AND B.DIVI      ='50' 
		                             AND B.OPT_DIVI  ='4'
		                      LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE	= #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
		           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
		           AND NOT A.ACCNT IN (SELECT ACCNT 
		                                 FROM ABA400T   WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT       = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
				<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
				)
	    
		         UNION ALL
	    
		       (SELECT A.BUDG_YYYYMM
		             , B.ACCNT_CD
		             , '0' ACCNT
		             , B.ACCNT_NAME
		             , B.OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
		             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT 
		             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
		          FROM AFB110T A  WITH (NOLOCK)
		                       INNER JOIN ABA121T B   WITH (NOLOCK)
		                               ON B.COMP_CODE = #{S_COMP_CODE}
		                              AND A.ACCNT     = B.ACCNT 
		                              AND B.GUBUN     = @SGUBUN 
		                              AND B.DIVI      ='50' 
		                              AND B.OPT_DIVI  ='4'
		                       LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE	= #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
		           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO}
	    		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
		           AND NOT A.ACCNT IN (SELECT ACCNT
		                                 FROM ABA400T  WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT       = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
		         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
	    
		         UNION ALL
	    
		       (SELECT A.BUDG_YYYYMM
		             , B.ACCNT_CD ACCNT_CD
		             , '0' ACCNT
		             , B.ACCNT_NAME
		             , B.OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
		             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT 
		             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
		          FROM AFB110T A   WITH (NOLOCK)
		                       INNER JOIN ABA121T B   WITH (NOLOCK)
		                               ON B.COMP_CODE = #{S_COMP_CODE}
		                              AND A.ACCNT     = B.ACCNT 
		                              AND B.GUBUN     = @SGUBUN 
		                              AND B.DIVI      = '50' 
		                              AND B.OPT_DIVI  = '5'
		                       LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE	= #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR} AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO}
	    		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
		           AND NOT A.ACCNT IN (SELECT ACCNT 
		                                 FROM ABA400T   WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT       = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
		         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
		)T
		 GROUP BY T.ACCNT_CD, T.ACCNT, T.ACCNT_NAME, T.OPT_DIVI
		 UNION
	
	 /*==============================================================================
	    ② 세목 데이터
	   ==============================================================================*/
		
		<if test="rdoSelect == &quot;2&quot;"> 
		--UArpt08KR.Cafb220SKR[fnMakeSQL]Query5
	    	SELECT T.ACCNT_CD
	    	     , T.ACCNT
	    	     , T.ACCNT_NAME
	    	     , T.OPT_DIVI
			<if test="AMT_POINT == &quot;1&quot;"> 
				<foreach collection="monthRange" item="month" index="index" >
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.BUDG ELSE 0
	    	                         END) /@lUnit,0,1), 0) AS [BUDG${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.RESULT ELSE 0 
	    	                         END) /@lUnit, 0, 1), 0) AS [RESULT${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.BALANCE ELSE 0 
	    	                         END) /@lUnit, 0, 1), 0) AS [BALANCE${index+1}]
	    	     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                             THEN T.BUDG ELSE 0 
	    	                                    END), 0)>0 
	    	                        THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                                  THEN T.RESULT ELSE 0 
	    	                                         END), 0) / 
	    	                             ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                                  THEN T.BUDG ELSE 0 
	    	                                         END), 0) * 100 
	    	                        ELSE 0 
	    	               END , 0) AS [ACHIEVE_RATE${index+1}]
				</foreach>
	    	     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0, 1), 0) BUDG_T
	    	     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0, 1), 0) RESULT_T
	    	     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0, 1), 0) BALANCE_T
	    	     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
	    	                        THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0
	    	               END , 0) ACHIEVE_T
			</if>
	
			<if test="AMT_POINT == &quot;2&quot;"> 
				<foreach collection="monthRange" item="month" index="index" >
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.BUDG ELSE 0 
	    	                         END) /@lUnit + 0.49,0,1), 0) AS [BUDG${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.RESULT ELSE 0 
	    	                         END) /@lUnit + 0.49, 0, 1), 0) AS [RESULT${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}' 
	    	                                  THEN T.BALANCE ELSE 0 
	    	                         END) /@lUnit + 0.49, 0, 1), 0) AS [BALANCE${index+1}]
	    	     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                             THEN T.BUDG ELSE 0 
	    	                                    END), 0) >0 
	    	                        THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                                  THEN T.RESULT ELSE 0 
	    	                                         END), 0) / 
	    	                             ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}' 
	    	                                                  THEN T.BUDG ELSE 0 
	    	                                         END), 0) * 100 
	    	                        ELSE 0 
	    	               END , 0) AS [ACHIEVE_RATE${index+1}]
				</foreach>
	    	     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit + 0.49, 0, 1), 0)    BUDG_T
	    	     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit + 0.49, 0, 1), 0)  RESULT_T
	    	     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit + 0.49, 0, 1), 0) BALANCE_T
	    	     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
	    	                   THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
	    	               END , 0) ACHIEVE_T
			</if>
	
		--AMT_POINT가 1 또는 2가 아닐때,
		<if test="AMT_POINT != &quot;1&quot; and AMT_POINT != &quot;2&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
			     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.BUDG ELSE 0 
	    	                         END) /@lUnit,0), 0) AS [BUDG${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.RESULT ELSE 0 
	    	                         END) /@lUnit, 0), 0) AS [RESULT${index+1}]
	    	     , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                  THEN T.BALANCE ELSE 0
	    	                         END) /@lUnit, 0), 0) AS [BALANCE${index+1}]
	    	     , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                             THEN T.BUDG ELSE 0 
	    	                                    END), 0) >0 
	    	                         THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                                   THEN T.RESULT ELSE 0 
	    	                                          END), 0) / 
	    	                              ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
	    	                                                   THEN T.BUDG ELSE 0
	    	                                          END), 0) * 100 
	    	                          ELSE 0
	    	               END , 0) AS [ACHIEVE_RATE${index+1}]
				</foreach>
	    	     , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0), 0)    BUDG_T
	    	     , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0), 0)  RESULT_T
	    	     , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0), 0) BALANCE_T
	    	     , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
	    	                        THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
	    	               END , 0) ACHIEVE_T
			</if>
	    	     , CASE WHEN (SELECT SUBJECT_DIVI 
	    	                    FROM ABA400T  WITH (NOLOCK)
	    	                   WHERE COMP_CODE = #{S_COMP_CODE}
	    	                     AND ACCNT     = T.ACCNT) = '2' 
	    	                     AND (SELECT ACCNT_CD 
	    	                            FROM ABA400T   WITH (NOLOCK)
	    	                           WHERE COMP_CODE   = #{S_COMP_CODE}
	    	                             AND ACCNT       = T.ACCNT) != 'ACCNT'
	    	                 THEN '2' ELSE '1'
	    	        END ACCNT_DIVI
	        
	    	  FROM(
	    	       (SELECT A.BUDG_YYYYMM
	    	             , B.ACCNT_CD
	    	             , A.ACCNT 
	    	             , (SELECT ACCNT_NAME 
	    	                  FROM ABA400T  WITH (NOLOCK)
	    	                 WHERE COMP_CODE = #{S_COMP_CODE}
	    	                   AND ACCNT     = A.ACCNT) ACCNT_NAME
	    	             , '0' OPT_DIVI
	    	             , A.DEPT_CODE
	    	             , A.DEPT_NAME
	    	             , (ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) - ISNULL(D.DIVERT_BUDG_I, 0)) AS BUDG
	    	             , A.EX_AMT_I+A.AC_AMT_I RESULT
	    	             , ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) -A.EX_AMT_I-A.AC_AMT_I - ISNULL(D.DIVERT_BUDG_I, 0) BALANCE
	    	          FROM AFB110T A   WITH (NOLOCK)
	    	                       INNER JOIN ABA121T B   WITH (NOLOCK)
	    	                               ON B.COMP_CODE = #{S_COMP_CODE}
	    	                              AND A.ACCNT     = B.ACCNT 
	    	                              AND B.GUBUN     = @SGUBUN
	    	                              AND B.DIVI      = '50' 
	    	                              AND B.OPT_DIVI  = '4'
	    	                       LEFT  JOIN (
                                       SELECT X.COMP_CODE
                                            , X.ACCNT
                                            , X.DEPT_CODE
                                            , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                         FROM AFB121T X WITH (NOLOCK)
                                        WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                          AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                          AND X.DIVERT_DIVI IN ('1', '3')
                                          AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                          AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                        GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                                   ) D  ON D.COMP_CODE = A.COMP_CODE
                                       AND D.DEPT_CODE = A.DEPT_CODE
                                       AND D.ACCNT     = A.ACCNT
	    	         WHERE A.COMP_CODE	=  #{S_COMP_CODE}
	    	           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
	    	           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
	    			<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
					   AND A.DEPT_CODE = #{DEPT_CODE}
					</if>
					)
	        
	    	         UNION ALL
	        
	    	       (SELECT A.BUDG_YYYYMM
	    	             , B.ACCNT_CD
	    	             , '0' ACCNT
	    	             , B.ACCNT_NAME
	    	             , B.OPT_DIVI
	    	             , A.DEPT_CODE
	    	             , A.DEPT_NAME
	    	             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
	    	             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT
	    	             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
	    	          FROM AFB110T A   WITH (NOLOCK)
	    	                       INNER JOIN ABA121T B   WITH (NOLOCK)
	    	                               ON B.COMP_CODE = #{S_COMP_CODE}
	    	                              AND A.ACCNT     = B.ACCNT 
	    	                              AND B.GUBUN     = @SGUBUN  
	    	                              AND B.DIVI      = '50' 
	    	                              AND B.OPT_DIVI  = '4'
	    	                       LEFT  JOIN (
                                       SELECT X.COMP_CODE
                                            , X.ACCNT
                                            , X.DEPT_CODE
                                            , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                         FROM AFB121T X WITH (NOLOCK)
                                        WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                          AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                          AND X.DIVERT_DIVI IN ('1', '3')
                                          AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                          AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                        GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                                   ) D  ON D.COMP_CODE = A.COMP_CODE
                                       AND D.DEPT_CODE = A.DEPT_CODE
                                       AND D.ACCNT     = A.ACCNT
	    	         WHERE A.COMP_CODE = #{S_COMP_CODE}
	    	           AND BUDG_YYYYMM&gt;=  #{BUDGET_YYMM_FR}
	    	           AND BUDG_YYYYMM&lt;=  #{BUDGET_YYMM_TO} 
	    			<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
					   AND A.DEPT_CODE = #{DEPT_CODE}
					</if>
	    	         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
	        
	    	         UNION ALL
	        
	    	       (SELECT A.BUDG_YYYYMM
	    	             , B.ACCNT_CD
	    	             , '0' ACCNT
	    	             , B.ACCNT_NAME
	    	             , B.OPT_DIVI
	    	             , A.DEPT_CODE
	    	             , A.DEPT_NAME
	    	             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
	    	             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT 
	    	             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
	    	          FROM AFB110T A   WITH (NOLOCK)
	    	                       INNER JOIN ABA121T B   WITH (NOLOCK)
	    	                               ON B.COMP_CODE = #{S_COMP_CODE}
	    	                              AND A.ACCNT     = B.ACCNT 
	    	                              AND B.GUBUN     = @SGUBUN  
	    	                              AND B.DIVI      = '50' 
	    	                              AND B.OPT_DIVI  = '5'
	    	                       LEFT  JOIN (
                                       SELECT X.COMP_CODE
                                            , X.ACCNT
                                            , X.DEPT_CODE
                                            , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                         FROM AFB121T X WITH (NOLOCK)
                                        WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                          AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                          AND X.DIVERT_DIVI IN ('1', '3')
                                          AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                          AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                        GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                                   ) D  ON D.COMP_CODE = A.COMP_CODE
                                       AND D.DEPT_CODE = A.DEPT_CODE
                                       AND D.ACCNT     = A.ACCNT
	    	         WHERE A.COMP_CODE = #{S_COMP_CODE}
	    	           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
	    	           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
	    			<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
					   AND A.DEPT_CODE = #{DEPT_CODE}
					</if>
	    	         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
	    	)T
	    	 WHERE ACCNT IN (SELECT ACCNT 
	    	                   FROM ABA400T   WITH (NOLOCK)
	    	                  WHERE COMP_CODE    = #{S_COMP_CODE}
	    	                    AND ACCNT       != ACCNT_CD
	    	                    AND SUBJECT_DIVI ='2')
	    	 GROUP BY T.ACCNT_CD, T.ACCNT, T.ACCNT_NAME, T.OPT_DIVI
	    	 UNION
		</if>
	
	 /*==============================================================================
	    ③ 총계 데이터
	   ==============================================================================*/
		--UArpt08KR.Cafb220SKR[fnMakeSQL]Query6
		SELECT '99999' ACCNT_CD
		     , '' ACCNT
		     , N'총계' ACCNT_NAME
		     , '' OPT_DIVI
	
		<foreach collection="monthRange" item="month" index="index" >
		     , ISNULL(SUM( BUDG${index+1} ),0) AS [BUDG${index+1}]
		     , ISNULL(SUM( RESULT${index+1} ),0) AS [RESULT${index+1}]
		     , ISNULL(SUM( BALANCE${index+1} ),0) AS [BALANCE${index+1}]
		     , ISNULL((CASE WHEN ISNULL(SUM( BUDG${index+1} ),0) >0 
		                         THEN ISNULL(ROUND((SUM( RESULT${index+1} ) / SUM( BUDG${index+1} ) * 100) 
								<if test="AMT_POINT == &quot;1&quot;"> 
									, 2, 1)
								</if>
	
								<if test="AMT_POINT == &quot;2&quot;"> 
									+0.0045, 2, 1)
								</if>
	
								<if test="AMT_POINT != &quot;1&quot; and AMT_POINT != &quot;2&quot;"> 
									, 2)
								</if>
								 ,0) ELSE 0
		                END),0) AS [ACHIEVE_RATE${index+1}]
		</foreach>    
		     , ISNULL(SUM(BUDG_T),0)
		     , ISNULL(SUM(RESULT_T),0)
		     , ISNULL(SUM(BALANCE_T),0)
		     , ISNULL((CASE WHEN ISNULL(SUM(BUDG_T),0) > 0
		                         THEN ISNULL(ROUND((SUM(RESULT_T) / SUM(BUDG_T) * 100) 
								<if test="AMT_POINT == &quot;1&quot;"> 
									, 2, 1)
								</if>
	
								<if test="AMT_POINT == &quot;2&quot;"> 
									+0.0045, 2, 1)
								</if>
	
								<if test="AMT_POINT != &quot;1&quot; and AMT_POINT != &quot;2&quot;"> 
									, 2)
								</if>
								 ,0) ELSE 0 
		                END),0)
		     , '1' ACCNT_DIVI
		  FROM
		       (
		        SELECT T.DEPT_CODE
		             , T.DEPT_NAME
		             , T.ACCNT_CD
		             , T.ACCNT
		             , T.ACCNT_NAME
		             , T.OPT_DIVI
		<if test="AMT_POINT == &quot;1&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BUDG ELSE 0
		                                 END) /@lUnit,0,1), 0) AS [BUDG${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.RESULT ELSE 0 
		                                 END) /@lUnit, 0, 1), 0) AS [RESULT${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BALANCE ELSE 0 
		                                 END) /@lUnit, 0, 1), 0) AS [BALANCE${index+1}]
		             , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}' 
		                                                     THEN T.BUDG ELSE 0 
		                                            END), 0)>0 
		                                THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.RESULT ELSE 0 
		                                                 END), 0) / 
		                                     ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.BUDG ELSE 0 
		                                                 END), 0) * 100 
		                                ELSE 0
		                       END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		             , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0, 1), 0) BUDG_T
		             , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0, 1), 0) RESULT_T
		             , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0, 1), 0) BALANCE_T
		             , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
		                                THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
		                       END , 0) ACHIEVE_T
	    </if>
	
		<if test="AMT_POINT == &quot;2&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BUDG 
		                                          ELSE 0 END) /@lUnit + 0.49,0,1), 0) AS [BUDG${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.RESULT 
		                                          ELSE 0 
		                                 END) /@lUnit + 0.49, 0, 1), 0) AS [RESULT${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BALANCE 
		                                          ELSE 0 END) /@lUnit + 0.49, 0, 1), 0) AS [BALANCE${index+1}]
		             , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                     THEN T.BUDG ELSE 0 
		                                            END), 0) >0 
		                                THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.RESULT ELSE 0 
		                                                 END), 0) / 
		                                     ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.BUDG ELSE 0 
		                                                 END), 0) * 100 
		                                ELSE 0 
		                       END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		             , ISNULL(ROUND(SUM(T.BUDG) / @lUnit + 0.49, 0, 1), 0) BUDG_T
		             , ISNULL(ROUND(SUM(T.RESULT) / @lUnit + 0.49, 0, 1), 0) RESULT_T
		             , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit + 0.49, 0, 1), 0) BALANCE_T
		             , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
		                                THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 
		                                ELSE 0
		                       END , 0) ACHIEVE_T
		</if> 
	
		--AMT_POINT가 1 또는 2가 아닐때,
		<if test="AMT_POINT != &quot;1&quot; and AMT_POINT != &quot;2&quot;"> 
			<foreach collection="monthRange" item="month" index="index" >
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BUDG ELSE 0
		                                 END) /@lUnit,0), 0) AS [BUDG${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.RESULT ELSE 0 
		                                 END) /@lUnit, 0), 0) AS [RESULT${index+1}]
		             , ISNULL(ROUND(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                          THEN T.BALANCE ELSE 0
		                                 END) /@lUnit, 0), 0) AS [BALANCE${index+1}]
		             , ISNULL(CASE WHEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                     THEN T.BUDG ELSE 0
		                                            END), 0) >0 
		                                THEN ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.RESULT ELSE 0 
		                                                 END), 0) / 
		                                     ISNULL(SUM(CASE WHEN T.BUDG_YYYYMM = '${month}'
		                                                          THEN T.BUDG ELSE 0
		                                                 END), 0) * 100 
		                                ELSE 0 
		                       END , 0) AS [ACHIEVE_RATE${index+1}]
			</foreach>
		            , ISNULL(ROUND(SUM(T.BUDG) / @lUnit, 0), 0)    BUDG_T
		            , ISNULL(ROUND(SUM(T.RESULT) / @lUnit, 0), 0)  RESULT_T
		            , ISNULL(ROUND(SUM(T.BALANCE) / @lUnit, 0), 0) BALANCE_T
		            , ISNULL(CASE WHEN ISNULL(SUM(T.BUDG), 0) > 0 
		                               THEN ISNULL(SUM(T.RESULT), 0) / ISNULL(SUM(T.BUDG), 0) * 100 ELSE 0 
		                      END , 0) ACHIEVE_T
		</if> 
	    
		  FROM(
		       (SELECT A.BUDG_YYYYMM
		             , B.ACCNT_CD
		             , A.ACCNT 
		             , (SELECT ACCNT_NAME 
		                  FROM ABA400T   WITH (NOLOCK)
		                 WHERE COMP_CODE = #{S_COMP_CODE}
		                   AND ACCNT     = A.ACCNT) ACCNT_NAME
		             , '0' OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) - ISNULL(D.DIVERT_BUDG_I, 0)) AS BUDG
		             , A.EX_AMT_I+A.AC_AMT_I RESULT
		             , ISNULL(A.BUDG_CONF_I,0) + ISNULL(A.BUDG_CONV_I,0) + ISNULL(A.BUDG_ASGN_I,0) + ISNULL(A.BUDG_SUPP_I,0) + ISNULL(A.BUDG_IWALL_I,0) -A.EX_AMT_I-A.AC_AMT_I - ISNULL(D.DIVERT_BUDG_I, 0) BALANCE
		          FROM AFB110T A   WITH (NOLOCK)
		                       INNER JOIN ABA121T B   WITH (NOLOCK)
		                               ON B.COMP_CODE = #{S_COMP_CODE}
		                              AND A.ACCNT     = B.ACCNT 
		                              AND B.GUBUN     = @SGUBUN 
		                              AND B.DIVI      = '50' 
		                              AND B.OPT_DIVI  = '4'
		                       LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE = #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
		           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
		           AND NOT A.ACCNT IN (SELECT ACCNT
		                                 FROM ABA400T   WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
				<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
				)
	    
		         UNION ALL
	    
		       (SELECT A.BUDG_YYYYMM
		             ,  B.ACCNT_CD
		             , '0' ACCNT
		             , B.ACCNT_NAME
		             , B.OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
		             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT
		             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
		          FROM AFB110T A  WITH (NOLOCK)
		                       INNER JOIN ABA121T B   WITH (NOLOCK)
		                               ON B.COMP_CODE = #{S_COMP_CODE}
		                              AND A.ACCNT     = B.ACCNT 
		                              AND B.GUBUN     = @SGUBUN 
		                              AND B.DIVI      ='50' 
		                              AND B.OPT_DIVI  ='4'
		                       LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE = #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
		           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
	    		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
		           AND NOT A.ACCNT IN (SELECT ACCNT 
		                                 FROM ABA400T   WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
		         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
	    
		         UNION ALL
	    
		       (SELECT A.BUDG_YYYYMM
		             , B.ACCNT_CD
		             , '0' ACCNT
		             , B.ACCNT_NAME
		             , B.OPT_DIVI
		             , A.DEPT_CODE
		             , A.DEPT_NAME
		             , (SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) - SUM(ISNULL(D.DIVERT_BUDG_I, 0))) AS BUDG
		             , SUM(A.EX_AMT_I)+SUM(A.AC_AMT_I) RESULT 
		             , SUM(ISNULL(A.BUDG_CONF_I,0)) + SUM(ISNULL(A.BUDG_CONV_I,0)) + SUM(ISNULL(A.BUDG_ASGN_I,0)) + SUM(ISNULL(A.BUDG_SUPP_I,0)) + SUM(ISNULL(A.BUDG_IWALL_I,0)) -SUM(A.EX_AMT_I)-SUM(A.AC_AMT_I) - SUM(ISNULL(D.DIVERT_BUDG_I, 0)) BALANCE
		          FROM AFB110T A  WITH (NOLOCK)
		                       INNER JOIN ABA121T B   WITH (NOLOCK)
		                               ON B.COMP_CODE = #{S_COMP_CODE}
		                              AND A.ACCNT     = B.ACCNT 
		                              AND B.GUBUN     = @SGUBUN 
		                              AND B.DIVI      = '50' 
		                              AND B.OPT_DIVI  = '5'
		                       LEFT  JOIN (
                                   SELECT X.COMP_CODE
                                        , X.ACCNT
                                        , X.DEPT_CODE
                                        , ISNULL(SUM(X.DIVERT_BUDG_I), 0) AS DIVERT_BUDG_I
                                     FROM AFB121T X WITH (NOLOCK)
                                    WHERE X.COMP_CODE    = #{S_COMP_CODE}
                                      AND X.DOC_STATUS  IN ('10', '15', '20', '30')
                                      AND X.DIVERT_DIVI IN ('1', '3')
                                      AND LEFT(X.BUDG_YYYYMM,4) &gt;= #{BUDGET_YYMM_FR}
                                      AND LEFT(X.BUDG_YYYYMM,4) &lt;= #{BUDGET_YYMM_TO}
                                    GROUP BY X.COMP_CODE, X.ACCNT, X.DEPT_CODE, X.BUDG_YYYYMM
                               ) D  ON D.COMP_CODE = A.COMP_CODE
                                   AND D.DEPT_CODE = A.DEPT_CODE
                                   AND D.ACCNT     = A.ACCNT
		         WHERE A.COMP_CODE = #{S_COMP_CODE}
		           AND BUDG_YYYYMM &gt;=  #{BUDGET_YYMM_FR}
		           AND BUDG_YYYYMM &lt;=  #{BUDGET_YYMM_TO} 
	    		<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
				   AND A.DEPT_CODE = #{DEPT_CODE}
				</if>
		           AND NOT A.ACCNT IN (SELECT ACCNT 
		                                 FROM ABA400T   WITH (NOLOCK)
		                                WHERE COMP_CODE   = #{S_COMP_CODE}
		                                  AND ACCNT       = ACCNT_CD 
		                                  AND SUBJECT_DIVI='1'
		                                  AND GROUP_YN    ='Y')
		         GROUP BY A.BUDG_YYYYMM, B.ACCNT_CD, B.ACCNT_NAME, B.OPT_DIVI, A.DEPT_CODE, A.DEPT_NAME)
		       )T
		 GROUP BY T.DEPT_CODE, T.DEPT_NAME, T.ACCNT_CD, T.ACCNT, T.ACCNT_NAME, T.OPT_DIVI
	    
		      ) A
		 WHERE OPT_DIVI='0'
		 ORDER BY ACCNT_CD, ACCNT , OPT_DIVI
	</select>
</mapper>