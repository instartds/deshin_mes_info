<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agj500ukrServiceImpl">
					
<select id="agj500ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
SELECT 	
	 ROW_NUMBER() OVER (ORDER BY A.COMP_CODE,EXC_DATE) AS ROW_NUMBER
	,A.COMP_CODE  
	,A.AUTO_NUM      
	,A.EXC_DATE        
	,A.EXC_NUM         
	,A.EXC_SEQ         
	,A.ACCNT    
	,B.ACCNT_NAME		AS ACCNT_NAME       
	,A.CUSTOM_CODE     
	,C.CUSTOM_NAME		AS CUSTOM_NAME
	,A.MONEY_UNIT      
	,A.EXCHG_RATE_O    
	,A.DR_AMT_I        
	,A.CR_AMT_I        
	,A.FOR_AMT_I       
	,A.REMARK          
	,A.DIV_CODE        
	,A.DEPT_CODE       
	,A.DEPT_NAME       
	,A.BILL_DIV_CODE   
	                
	,A.SAVE_CODE       
	,D.SAVE_NAME		AS SAVE_NAME
	,A.BANK_CODE       
	,E.CUSTOM_NAME		AS BANK_NAME
	,A.PJT_CODE        
	,F.PJT_NAME			AS PJT_NAME
	,A.CRDT_NUM        
	,G.CRDT_NAME		AS CRDT_NAME
	,A.NOTE_NUM        
	,A.EXP_DATE        
	,A.LOANNO          
	,H.LOAN_NAME		AS LOAN_NAME
	,A.PERSON_NUMB     
	,I.NAME				AS PERSON_NAME
	,A.ASST            
	,J.ASST_NAME		AS ASST_NAME
	,A.PAY_EX_DATE     
	,A.REC_EX_DATE   
	          
	,A.PROOF_KIND      
	,A.PUB_DATE        
	,A.SUPPLY_AMT_I    
	,A.TAX_AMT_I       
	,A.EB_YN           
	,uniLITE.fnCipherDecrypt(A.CREDIT_NUM,'')    
	,A.REASON_CODE     
	,A.ORG_AC_DATE     
	,A.ORG_SLIP_NUM    
	,A.ORG_SLIP_SEQ    
	,A.EX_DATE         
	,A.EX_NUM          
	,A.EX_SEQ          
	,A.INSERT_DB_USER  
	,A.INSERT_DB_TIME  
	,A.UPDATE_DB_USER  
	,A.UPDATE_DB_TIME 
	,(
	  SELECT USER_NAME 
	    FROM BSA300T K WITH(NOLOCK)
	   WHERE K.COMP_CODE= #{S_COMP_CODE}
	     AND K.USER_ID	= A.INSERT_DB_USER
	  )									AS INSERT_USER_NAME
	FROM		AGJ500T	A WITH(NOLOCK)
	LEFT JOIN	ABA400T	B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
									  AND B.ACCNT	  = A.ACCNT
	LEFT JOIN	BCM100T	C WITH(NOLOCK) ON C.COMP_CODE = A.COMP_CODE
									  AND C.CUSTOM_CODE = A.CUSTOM_CODE
	LEFT JOIN	AFS100T D WITH(NOLOCK) ON D.COMP_CODE	= A.COMP_CODE
									  AND D.SAVE_CODE   = A.SAVE_CODE
	LEFT JOIN	BCM100T	E WITH(NOLOCK) ON E.COMP_CODE = A.COMP_CODE
									  AND E.CUSTOM_CODE = A.BANK_CODE
									  AND E.CUSTOM_TYPE = '4'
	LEFT JOIN	BCM600T F WITH(NOLOCK) ON F.COMP_CODE = A.COMP_CODE
									  AND F.PJT_CODE  = A.PJT_CODE
	LEFT JOIN	ABA500T	G WITH(NOLOCK) ON G.COMP_CODE = A.COMP_CODE
									  AND G.CRDT_NUM  = A.CRDT_NUM
	LEFT JOIN	AFN300T H WITH(NOLOCK) ON H.COMP_CODE = A.COMP_CODE
									  AND H.LOANNO    = A.LOANNO
	LEFT JOIN	HUM100T I WITH(NOLOCK) ON I.COMP_CODE = A.COMP_CODE
									  AND I.PERSON_NUMB = A.PERSON_NUMB
	LEFT JOIN   AISS300T J WITH(NOLOCK) ON J.COMP_CODE	= A.COMP_CODE
									   AND J.ASST		= A.ASST
	
	WHERE   A.COMP_CODE = #{S_COMP_CODE}
		AND A.EXC_DATE &gt;= #{EXC_DATE_FR}
		AND A.EXC_DATE &lt;= #{EXC_DATE_TO} 
	<if test="HAVE_EX_DATE == &quot;Y&quot;">
		AND ISNULL(A.EX_DATE,'') != ''  
	</if>
	<if test="HAVE_EX_DATE == &quot;N&quot;">
		AND ISNULL(A.EX_DATE,'') = ''
	</if>
	  
	<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
		AND A.DIV_CODE IN
	<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
		#{item}
	</foreach>									
	</if>
	<if test="@foren.Ognl@isNotEmpty(USER_ID)">    
		AND A.INSERT_DB_USER	= #{USER_ID}
	</if>
	ORDER BY ROW_NUMBER
</select>

<insert id="agj500ukrServiceImpl.insertDetail" parameterType="Map">    	
INSERT INTO AGJ500T  
(	                 
	COMP_CODE        
	,EXC_DATE        
	,EXC_NUM         
	,EXC_SEQ         
	,ACCNT           
	,CUSTOM_CODE     
	,MONEY_UNIT   
	<if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O)">    
	,EXCHG_RATE_O    
	</if>
	<if test="@foren.Ognl@isNotEmpty(DR_AMT_I)"> 
	,DR_AMT_I  
	</if>
	<if test="@foren.Ognl@isNotEmpty(CR_AMT_I)">       
	,CR_AMT_I        
	</if>
	<if test="@foren.Ognl@isNotEmpty(FOR_AMT_I)"> 
	,FOR_AMT_I       
	</if>
	
	,REMARK          
	,DIV_CODE        
	,DEPT_CODE       
	,DEPT_NAME       
	,BILL_DIV_CODE   
	                 
	,SAVE_CODE       
	,BANK_CODE       
	,PJT_CODE        
	,CRDT_NUM        
	,NOTE_NUM        
	,EXP_DATE        
	,LOANNO          
	,PERSON_NUMB     
	,ASST            
	,PAY_EX_DATE     
	,REC_EX_DATE     
	                 
	                 
	,PROOF_KIND      
	,PUB_DATE      
	
	<if test="@foren.Ognl@isNotEmpty(SUPPLY_AMT_I)">   
	,SUPPLY_AMT_I    
	</if>
	<if test="@foren.Ognl@isNotEmpty(TAX_AMT_I)"> 
	,TAX_AMT_I       
	</if>
	
	,EB_YN           
	,CREDIT_NUM      
	,REASON_CODE   
	
	<if test="@foren.Ognl@isNotEmpty(ORG_AC_DATE)">   
	,ORG_AC_DATE     
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM)"> 
	,ORG_SLIP_NUM    
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_SEQ)"> 
	,ORG_SLIP_SEQ    
	</if>
	 
    
	,INSERT_DB_USER  
	,INSERT_DB_TIME  
	,UPDATE_DB_USER  
	,UPDATE_DB_TIME  
)                    
VALUES (             
	#{S_COMP_CODE}   
	,#{EXC_DATE}     
	,#{EXC_NUM}      
	,#{EXC_SEQ}      
	,#{ACCNT}        
	,#{CUSTOM_CODE}  
	,#{MONEY_UNIT}  
	
	<if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O)">  
	,#{EXCHG_RATE_O} 
	</if>
	<if test="@foren.Ognl@isNotEmpty(DR_AMT_I)"> 
	,#{DR_AMT_I}     
	</if>
	<if test="@foren.Ognl@isNotEmpty(CR_AMT_I)"> 
	,#{CR_AMT_I}     
	</if>
	<if test="@foren.Ognl@isNotEmpty(FOR_AMT_I)"> 
	,#{FOR_AMT_I}    
	</if>
	
	,#{REMARK}       
	,#{DIV_CODE}     
	,#{DEPT_CODE}    
	,#{DEPT_NAME}    
	,'01'
	                 
	,#{SAVE_CODE}    
	,#{BANK_CODE}    
	,#{PJT_CODE}     
	,#{CRDT_NUM}     
	,#{NOTE_NUM}     
	,#{EXP_DATE}     
	,#{LOANNO}       
	,#{PERSON_NUMB}  
	,#{ASST}         
	,#{PAY_EX_DATE}  
	,#{REC_EX_DATE}  
	                 
	,#{PROOF_KIND}   
	,#{PUB_DATE}     
	
	<if test="@foren.Ognl@isNotEmpty(SUPPLY_AMT_I)"> 
	,#{SUPPLY_AMT_I} 
	</if>
	<if test="@foren.Ognl@isNotEmpty(TAX_AMT_I)"> 
	,#{TAX_AMT_I}    
	</if>
	
	,#{EB_YN}        
	,uniLITE.fnCipherEncrypt(#{CREDIT_NUM}, '')           
	,#{REASON_CODE}
	
	<if test="@foren.Ognl@isNotEmpty(ORG_AC_DATE)">   
	,#{ORG_AC_DATE}  
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM)"> 
	,#{ORG_SLIP_NUM} 
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_SEQ)"> 
	,#{ORG_SLIP_SEQ} 
	</if>
	
    
	,#{S_USER_ID}    
	,GETDATE()       
	,#{S_USER_ID}    
	,GETDATE()       
                     
)                    
</insert>
	
<update id="agj500ukrServiceImpl.updateDetail" parameterType="Map">	

	UPDATE AGJ500T
		SET     
			 EXC_DATE     = #{EXC_DATE}       
			,EXC_NUM      = #{EXC_NUM}        
			,EXC_SEQ      = #{EXC_SEQ}        
			,ACCNT        = #{ACCNT}        
			,CUSTOM_CODE  = #{CUSTOM_CODE}    
			,MONEY_UNIT   = #{MONEY_UNIT}     
			,EXCHG_RATE_O = #{EXCHG_RATE_O}   
			,DR_AMT_I     = #{DR_AMT_I}       
			,CR_AMT_I     = #{CR_AMT_I}       
			,FOR_AMT_I    = #{FOR_AMT_I}      
			,REMARK       = #{REMARK}         
			,DIV_CODE     = #{DIV_CODE}       
			,DEPT_CODE    = #{DEPT_CODE}      
			,DEPT_NAME    = #{DEPT_NAME}     
		 
			,SAVE_CODE    = #{SAVE_CODE}      
			,BANK_CODE    = #{BANK_CODE}      
			,PJT_CODE     = #{PJT_CODE}       
			,CRDT_NUM     = #{CRDT_NUM}       
			,NOTE_NUM     = #{NOTE_NUM}       
			,EXP_DATE     = #{EXP_DATE}       
			,LOANNO       = #{LOANNO}         
			,PERSON_NUMB  = #{PERSON_NUMB}    
			,ASST         = #{ASST}           
			,PAY_EX_DATE  = #{PAY_EX_DATE}    
			,REC_EX_DATE  = #{REC_EX_DATE}  
			,PROOF_KIND   = #{PROOF_KIND}     
			,PUB_DATE     = #{PUB_DATE}       
			,SUPPLY_AMT_I = #{SUPPLY_AMT_I}  
			,TAX_AMT_I    = #{TAX_AMT_I}      
			,EB_YN        = #{EB_YN}          
			,CREDIT_NUM   = uniLITE.fnCipherEncrypt(#{CREDIT_NUM}, '')          
			,REASON_CODE  = #{REASON_CODE}    
			,ORG_AC_DATE  = #{ORG_AC_DATE}    
			,ORG_SLIP_NUM = #{ORG_SLIP_NUM}   
			,ORG_SLIP_SEQ = #{ORG_SLIP_SEQ}   
			,UPDATE_DB_USER = #{S_USER_ID}  
			,UPDATE_DB_TIME = GETDATE()     
		
		WHERE COMP_CODE	= #{S_COMP_CODE}
		  AND EXC_DATE	= #{EXC_DATE}	   
          AND EXC_NUM 	= #{EXC_NUM} 	   
          AND EXC_SEQ 	= #{EXC_SEQ} 	   
	      AND ACCNT 	= #{ACCNT} 	
	      AND DIV_CODE 	= #{DIV_CODE} 
		  AND DEPT_CODE	= #{DEPT_CODE}
		  AND DEPT_NAME	= #{DEPT_NAME}
	               
	
</update>

<update id="agj500ukrServiceImpl.deleteDetail" parameterType="Map">
	DELETE FROM AGJ500T 
	WHERE COMP_CODE	= #{S_COMP_CODE}
		  AND EXC_DATE	= #{EXC_DATE}	   
          AND EXC_NUM 	= #{EXC_NUM} 	   
          AND EXC_SEQ 	= #{EXC_SEQ} 	   
	      AND ACCNT 	= #{ACCNT} 	
	      AND DIV_CODE 	= #{DIV_CODE} 
		  AND DEPT_CODE	= #{DEPT_CODE}
		  AND DEPT_NAME	= #{DEPT_NAME}
	  
  
</update>




<insert id="agj500ukrServiceImpl.insertLogDetail" parameterType="Map">     
        INSERT INTO L_AGJ500T
               (
                 KEY_VALUE
               , OPR_FLAG
               , COMP_CODE
               , AUTO_NUM
               , EXC_DATE
               , EXC_NUM
               , EXC_SEQ
               , INSERT_DB_USER
               , INSERT_DB_TIME   
               )
         VALUES
               ( 
                 #{KEY_VALUE}
               , #{OPR_FLAG}    
               , #{S_COMP_CODE}     
               , #{AUTO_NUM}
               , #{EXC_DATE}
               , #{EXC_NUM}
               , #{EXC_SEQ}
               , #{S_USER_ID}       
               , GETDATE()   
               ) 
    </insert>
    
    
<update id="spUspAccntAgj500ukr_fnAgj110tInsert" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AGJ500UKR_fnAgj110tInsert (
        #{S_COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{WORK_TYPE,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,  mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   

<update id="spUspAccntAgj500ukr_fnAgj110tDelete" parameterType="Map" statementType="CALLABLE">
    {call USP_ACCNT_AGJ500UKR_fnAgj110tDelete (
        #{S_COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{KEY_VALUE,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{WORK_TYPE,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_LANG_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{S_USER_ID,   mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
        #{ERROR_DESC,  mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
    )}
</update>   








<insert id="agj500ukrServiceImpl.insertExcelagj500upload" parameterType="Map">

          
	DECLARE  @EXCHG_RATE_O    numeric(30, 6) 
            ,@DR_AMT_I        numeric(30, 6) 
            ,@CR_AMT_I        numeric(30, 6) 
            ,@FOR_AMT_I       numeric(30, 6) 
        	,@SUPPLY_AMT_I    numeric(30, 6) 
            ,@TAX_AMT_I       numeric(30, 6)
	
	SET @EXCHG_RATE_O  = #{EXCHG_RATE_O}
    SET @DR_AMT_I      = #{DR_AMT_I}
    SET @CR_AMT_I      = #{CR_AMT_I}
    SET @FOR_AMT_I     = #{FOR_AMT_I}
    SET @SUPPLY_AMT_I  = #{SUPPLY_AMT_I}
    SET @TAX_AMT_I     = #{TAX_AMT_I}
	
INSERT INTO AGJ500T_XLS 
(	       
	_EXCEL_JOBID 
    ,_EXCEL_ROWNUM 
    ,_EXCEL_HAS_ERROR 
    ,_EXCEL_ERROR_MSG           
	,COMP_CODE        
	,EXC_DATE        
	,EXC_NUM         
	,EXC_SEQ         
	,ACCNT           
	,CUSTOM_CODE     
	,MONEY_UNIT  
	 
	,EXCHG_RATE_O 
	,DR_AMT_I  
	,CR_AMT_I  
	,FOR_AMT_I  
	
	,REMARK          
	,DIV_CODE        
	,DEPT_CODE       
      
	,BILL_DIV_CODE   
	                 
	,SAVE_CODE       
	,BANK_CODE       
	,PJT_CODE        
	,CRDT_NUM        
	,NOTE_NUM        
	,EXP_DATE        
	,LOANNO          
	,PERSON_NUMB     
	,ASST            
	,PAY_EX_DATE     
	,REC_EX_DATE     
	                 
	                 
	,PROOF_KIND      
	,PUB_DATE      
 
	,SUPPLY_AMT_I    
	,TAX_AMT_I       
	
	,EB_YN       
	<if test="@foren.Ognl@isNotEmpty(CREDIT_NUM)">       
	,CREDIT_NUM      
	</if>
	,REASON_CODE    
	,ORG_AC_DATE    
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM)">        
	,ORG_SLIP_NUM    
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_SEQ)">       
	,ORG_SLIP_SEQ    
	</if>
			 
		      
		)                    
VALUES ( 
	 #{_EXCEL_JOBID} 
	,#{_EXCEL_ROWNUM} 
	,#{_EXCEL_HAS_ERROR	,jdbcType=VARCHAR} 
	,#{_EXCEL_ERROR		,jdbcType=VARCHAR}              
	,#{S_COMP_CODE}   
	,#{EXC_DATE}     
	,#{EXC_NUM}      
	,#{EXC_SEQ}      
	,#{ACCNT}        
	,#{CUSTOM_CODE}  
	,#{MONEY_UNIT}  
	
	,ISNULL(@EXCHG_RATE_O,0) 
	,ISNULL(@DR_AMT_I,0)    
	,ISNULL(@CR_AMT_I,0)  
	,ISNULL(@FOR_AMT_I,0)    
	
	,#{REMARK}       
	,#{DIV_CODE}     
	,#{DEPT_CODE}    
	

	
	
	,#{BILL_DIV_CODE}
	                 
	,#{SAVE_CODE}    
	,#{BANK_CODE}    
	,#{PJT_CODE}     
	,#{CRDT_NUM}     
	,#{NOTE_NUM}     
	,#{EXP_DATE}     
	,#{LOANNO}       
	,#{PERSON_NUMB}  
	,#{ASST}         
	,#{PAY_EX_DATE}  
	,#{REC_EX_DATE}  
	                 
	,#{PROOF_KIND}   
	,#{PUB_DATE}     
	    
	,ISNULL(@SUPPLY_AMT_I,0) 
	,ISNULL(@TAX_AMT_I,0)   
	
	,#{EB_YN}        
	<if test="@foren.Ognl@isNotEmpty(CREDIT_NUM)">       
	,uniLITE.fnCipherEncrypt(ISNULL(#{CREDIT_NUM},''), '')
	</if>           
	,#{REASON_CODE}
	
	,#{ORG_AC_DATE}  
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_NUM)">  
	,#{ORG_SLIP_NUM} 
	</if>
	<if test="@foren.Ognl@isNotEmpty(ORG_SLIP_SEQ)">  
	,#{ORG_SLIP_SEQ} 
	</if>
	)

</insert>

<update id="agj500ukrServiceImpl.excelValidate" >
	/*agj500ukrServiceImpl.excelValidate*/
	/*다국어 메세지 처리 함수 필요. S_LANG_CODE와 msg_no를 파라미터로 받아 BSA000T에서 조회*/
	
	INSERT AGJ500T(
		 COMP_CODE        
		,EXC_DATE        
		,EXC_NUM         
		,EXC_SEQ         
		,ACCNT           
		,CUSTOM_CODE     
		,MONEY_UNIT   
		,EXCHG_RATE_O    
		,DR_AMT_I  
		,CR_AMT_I        
		,FOR_AMT_I       
		
		,REMARK          
		,DIV_CODE        
		,DEPT_CODE       
		,DEPT_NAME       
		,BILL_DIV_CODE   
		               
		,SAVE_CODE       
		,BANK_CODE       
		,PJT_CODE        
		,CRDT_NUM        
		,NOTE_NUM        
		,EXP_DATE        
		,LOANNO          
		,PERSON_NUMB     
		,ASST            
		,PAY_EX_DATE     
		,REC_EX_DATE     
		               
		               
		,PROOF_KIND      
		,PUB_DATE      
		
		,SUPPLY_AMT_I    
		,TAX_AMT_I       
		
		,EB_YN           
		,CREDIT_NUM     
		,REASON_CODE   
		
		,ORG_AC_DATE     
		,ORG_SLIP_NUM    
		,ORG_SLIP_SEQ 
       , INSERT_DB_USER
       , INSERT_DB_TIME   
       , UPDATE_DB_USER
       , UPDATE_DB_TIME    
	)
	SELECT 
		A.COMP_CODE        
		,A.EXC_DATE        
		,A.EXC_NUM         
		,A.EXC_SEQ         
		,A.ACCNT           
		,A.CUSTOM_CODE     
		,A.MONEY_UNIT   
		,A.EXCHG_RATE_O    
		,A.DR_AMT_I  
		,A.CR_AMT_I        
		,A.FOR_AMT_I       
		
		,A.REMARK          
		,A.DIV_CODE        
		,A.DEPT_CODE       
		,ISNULL(C.TREE_NAME,'')       
		,A.BILL_DIV_CODE   
		                 
		,A.SAVE_CODE       
		,A.BANK_CODE       
		,A.PJT_CODE        
		,A.CRDT_NUM        
		,A.NOTE_NUM        
		,A.EXP_DATE        
		,A.LOANNO          
		,A.PERSON_NUMB     
		,A.ASST            
		,A.PAY_EX_DATE     
		,A.REC_EX_DATE     
		                 
		                 
		,A.PROOF_KIND      
		,A.PUB_DATE      
		
		,A.SUPPLY_AMT_I    
		,A.TAX_AMT_I       
		
		,A.EB_YN          
		,uniLITE.fnCipherEncrypt(uniLITE.fnCipherDecrypt(A.CREDIT_NUM,''), '')
		       
		,A.REASON_CODE   
		
		,A.ORG_AC_DATE     
		,A.ORG_SLIP_NUM    
		,A.ORG_SLIP_SEQ  
       , #{S_USER_ID}
       , GETDATE()   
       , #{S_USER_ID}
       , GETDATE()   
		
	  
	FROM 		AGJ500T_XLS  A WITH(NOLOCK)
		
		LEFT JOIN 	BOR120T	B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
										  AND B.DIV_CODE  = A.DIV_CODE 
		LEFT JOIN   BSA210T C WITH(NOLOCK) ON C.COMP_CODE = A.COMP_CODE
										  AND C.TREE_CODE = A.DEPT_CODE

	WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
	ORDER BY A.EXC_DATE, A.EXC_NUM, A.EXC_SEQ         
    </update>	
</mapper>