<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agj110ukrServiceImpl">
    <select id="agj110ukrServiceImpl.selectFnDate" parameterType="Map" resultType="rMap">
        SELECT ISNULL(FN_DATE,'') FN_DATE 
          FROM BOR100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
    </select>
    
    <select id="agj110ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
        SELECT 
               RIGHT(A.EX_DATE,2)                           AC_DAY
             , A.EX_DATE                                    OLD_AC_DATE
             , A.EX_NUM                                     OLD_SLIP_NUM
             , A.EX_SEQ                                     OLD_SLIP_SEQ
             , A.EX_SEQ                                     SLIP_SEQ
             , A.SLIP_DIVI
             , A.DR_CR
             , A.ACCNT
             , ISNULL(B.ACCNT_NAME, '')                     ACCNT_NAME
             , ISNULL(A.CUSTOM_CODE,'')                     CUSTOM_CODE
             , CASE WHEN ISNULL(A.CUSTOM_NAME,'') = '' 
                    THEN ISNULL(C2.CUSTOM_NAME,'')
                    ELSE ISNULL(A.CUSTOM_NAME ,'')
                END                                         CUSTOM_NAME
             , CASE A.DR_CR WHEN '1' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END DR_AMT_I
             , CASE A.DR_CR WHEN '2' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END CR_AMT_I
             , ISNULL(A.AMT_I, 0.0)                         AMT_I
             , ISNULL(A.REMARK,'')                          REMARK
             , ISNULL(M1.CODE_NAME,'')                      PROOF_KIND_NM
             , CASE WHEN M1.REF_CODE1 = 'E' THEN uniLITE.fnCipherDecrypt(A.CREDIT_NUM, 'C')
                    ELSE uniLITE.fnCipherDecrypt(A.CREDIT_NUM, '')
               END                                          CREDIT_NUM_EXPOS
             , ISNULL(A.CREDIT_NUM,'')						CREDIT_NUM
             , ISNULL(A.DEPT_NAME,'')                       DEPT_NAME
             , ISNULL(M2.CODE_NAME,'')                      AP_CHARGE_NAME
             , ISNULL(A.DIV_CODE,'')                        DIV_CODE
             , ISNULL(A.DEPT_CODE,'')                       DEPT_CODE
             , ISNULL(A.P_ACCNT,'')                         P_ACCNT
             , ISNULL(A.PROOF_KIND,'')                      PROOF_KIND
             , ISNULL(A.MONEY_UNIT,'')                      MONEY_UNIT
             , ISNULL(A.EXCHG_RATE_O,0.0)                   EXCHG_RATE_O
             , ISNULL(A.FOR_AMT_I,0.0)                      FOR_AMT_I
             , ISNULL(A.IN_DIV_CODE,'')                     IN_DIV_CODE
             , ISNULL(A.IN_DEPT_CODE,'')                    IN_DEPT_CODE
             , ISNULL(A.IN_DEPT_NAME,'')                    IN_DEPT_NAME
             , ISNULL(A.BILL_DIV_CODE,'')                   BILL_DIV_CODE
             , ISNULL(A.AC_CODE1,'')                        AC_CODE1,        ISNULL(A.AC_CODE2,'')        AC_CODE2
             , ISNULL(A.AC_CODE3,'')                        AC_CODE3,        ISNULL(A.AC_CODE4,'')        AC_CODE4
             , ISNULL(A.AC_CODE5,'')                        AC_CODE5,        ISNULL(A.AC_CODE6,'')        AC_CODE6
             , ISNULL(A.AC_DATA1,'')                        AC_DATA1,        ISNULL(A.AC_DATA2,'')        AC_DATA2
             , ISNULL(A.AC_DATA3,'')                        AC_DATA3,        ISNULL(A.AC_DATA4,'')        AC_DATA4
             , ISNULL(A.AC_DATA5,'')                        AC_DATA5,        ISNULL(A.AC_DATA6,'')        AC_DATA6
             , ISNULL(A.AC_DATA_NAME1,'')                   AC_DATA_NAME1,   ISNULL(A.AC_DATA_NAME2,'')   AC_DATA_NAME2
             , ISNULL(A.AC_DATA_NAME3,'')                   AC_DATA_NAME3,   ISNULL(A.AC_DATA_NAME4,'')   AC_DATA_NAME4
             , ISNULL(A.AC_DATA_NAME5,'')                   AC_DATA_NAME5,   ISNULL(A.AC_DATA_NAME6,'')   AC_DATA_NAME6
             , ISNULL(A.BOOK_CODE1,'')                      BOOK_CODE1,      ISNULL(A.BOOK_CODE2,'')      BOOK_CODE2
             , ISNULL(A.BOOK_DATA1,'')                      BOOK_DATA1,      ISNULL(A.BOOK_DATA2,'')      BOOK_DATA2
             , ISNULL(A.BOOK_DATA_NAME1,'')                 BOOK_DATA_NAME1, ISNULL(A.BOOK_DATA_NAME2,'') BOOK_DATA_NAME2
             , ISNULL(A.ACCNT_SPEC,'')                      ACCNT_SPEC,      ISNULL(A.SPEC_DIVI,'')       SPEC_DIVI
             , ISNULL(A.PROFIT_DIVI,'')                     PROFIT_DIVI,     ISNULL(A.JAN_DIVI,'')        JAN_DIVI
             , ISNULL(A.PEND_YN,'N')                        PEND_YN,         ISNULL(A.PEND_CODE,'')       PEND_CODE
             , ISNULL(A.PEND_DATA_CODE,'')                  PEND_DATA_CODE,  ISNULL(A.BUDG_YN,'N')        BUDG_YN
             , ISNULL(A.BUDGCTL_YN,'N')                     BUDGCTL_YN,      ISNULL(A.FOR_YN,'N')         FOR_YN
             , ISNULL(A.POSTIT_YN,'')                       POSTIT_YN,       ISNULL(A.POSTIT,'')          POSTIT
             , ISNULL(A.POSTIT_USER_ID,'')                  POSTIT_USER_ID,  ISNULL(A.INPUT_PATH,'')      INPUT_PATH
             , ISNULL(A.INPUT_DIVI,'')                      INPUT_DIVI,      ISNULL(A.AUTO_SLIP_NUM,'')   AUTO_SLIP_NUM
             , ISNULL(A.CLOSE_FG,'')                        CLOSE_FG,        ISNULL(A.INPUT_DATE,'')      INPUT_DATE
             , ISNULL(A.INPUT_USER_ID,'')                   INPUT_USER_ID,   ISNULL(A.CHARGE_CODE,'')     CHARGE_CODE
             , ISNULL(M3.CODE_NAME,'')                      CHARGE_NAME
             , ISNULL(A.CREDIT_CODE,'')                     CREDIT_CODE,     ISNULL(A.REASON_CODE,'')     REASON_CODE
             , ISNULL(A.AP_STS,'')                          AP_STS
             , ISNULL(A.AP_DATE,'')                         AP_DATE,         ISNULL(A.AP_USER_ID,'')      AP_USER_ID
             , ISNULL(A.EX_DATE,'')                         EX_DATE,         ISNULL(A.SLIP_NUM,0)         EX_NUM
             , ISNULL(A.EX_DATE,'')                         AC_DATE
             , ISNULL(A.EX_NUM,0)         SLIP_NUM
             --, ISNULL(RIGHT(A.AC_DATE,2),'')              AC_DAY
             , ISNULL(A.SLIP_SEQ,0)                         EX_SEQ
             , ISNULL(N1.AC_NAME ,'' )                      AC_NAME1 ,       ISNULL(N2.AC_NAME ,'' )      AC_NAME2
             , ISNULL(N3.AC_NAME ,'' )                      AC_NAME3 ,       ISNULL(N4.AC_NAME ,'' )      AC_NAME4
             , ISNULL(N5.AC_NAME ,'' )                      AC_NAME5 ,       ISNULL(N6.AC_NAME ,'' )      AC_NAME6
             , ISNULL(A.AC_CTL1  ,'N')                      AC_CTL1  ,       ISNULL(A.AC_CTL2  ,'N')      AC_CTL2
             , ISNULL(A.AC_CTL3  ,'N')                      AC_CTL3  ,       ISNULL(A.AC_CTL4  ,'N')      AC_CTL4
             , ISNULL(A.AC_CTL5  ,'N')                      AC_CTL5  ,       ISNULL(A.AC_CTL6  ,'N')      AC_CTL6
             , ISNULL(N1.DT_TYPE ,0  )                      AC_TYPE1 ,       ISNULL(N2.DT_TYPE ,0  )      AC_TYPE2
             , ISNULL(N3.DT_TYPE ,0  )                      AC_TYPE3 ,       ISNULL(N4.DT_TYPE ,0  )      AC_TYPE4
             , ISNULL(N5.DT_TYPE ,0  )                      AC_TYPE5 ,       ISNULL(N6.DT_TYPE ,0  )      AC_TYPE6
             , ISNULL(N1.DT_LEN  ,0  )                      AC_LEN1  ,       ISNULL(N2.DT_LEN  ,0  )      AC_LEN2
             , ISNULL(N3.DT_LEN  ,0  )                      AC_LEN3  ,       ISNULL(N4.DT_LEN  ,0  )      AC_LEN4
             , ISNULL(N5.DT_LEN  ,0  )                      AC_LEN5  ,       ISNULL(N6.DT_LEN  ,0  )      AC_LEN6
             , ISNULL(N1.DT_POPUP,'N')                      AC_POPUP1,       ISNULL(N2.DT_POPUP,'N')      AC_POPUP2
             , ISNULL(N3.DT_POPUP,'N')                      AC_POPUP3,       ISNULL(N4.DT_POPUP,'N')      AC_POPUP4
             , ISNULL(N5.DT_POPUP,'N')                      AC_POPUP5,       ISNULL(N6.DT_POPUP,'N')      AC_POPUP6
             , CONVERT(BIT,0) 								AS CHK	 , 		 ISNULL(A.DRAFT_YN, '')       DRAFT_YN
             , ISNULL(N1.DT_FMT,'0')                        AC_FORMAT1,      ISNULL(N2.DT_FMT,'0')        AC_FORMAT2
             , ISNULL(N3.DT_FMT,'0')                        AC_FORMAT3,      ISNULL(N4.DT_FMT,'0')        AC_FORMAT4
             , ISNULL(N5.DT_FMT,'0')                        AC_FORMAT5,      ISNULL(N6.DT_FMT,'0')        AC_FORMAT6
             , ISNULL(A.ASST_SUPPLY_AMT_I, 0.0)			    ASST_SUPPLY_AMT_I
             , ISNULL(A.ASST_TAX_AMT_I, 0.0)			   	ASST_TAX_AMT_I
             , A.ASST_DIVI
          FROM         AGJ110T  AS A  WITH (NOLOCK)
            LEFT  JOIN ABA400T  AS B  WITH (NOLOCK) ON  B.COMP_CODE  = A.COMP_CODE 
                                                    AND B.ACCNT      = A.ACCNT
            LEFT  JOIN BCM100T  AS C2 WITH (NOLOCK) ON  C2.COMP_CODE   = A.COMP_CODE
                                                    AND C2.CUSTOM_CODE = A.CUSTOM_CODE
            LEFT  JOIN BSA100T  AS M1 WITH (NOLOCK) ON  M1.COMP_CODE = A.COMP_CODE
                                                    AND M1.MAIN_CODE = 'A022' 
                                                    AND M1.SUB_CODE  = A.PROOF_KIND
            LEFT  JOIN BSA100T  AS M2 WITH (NOLOCK) ON  M2.COMP_CODE = A.COMP_CODE
                                                    AND M2.MAIN_CODE = 'A009' 
                                                    AND M2.SUB_CODE  = A.AP_CHARGE_CODE
            LEFT  JOIN BSA100T  AS M3 WITH (NOLOCK) ON  M3.COMP_CODE = A.COMP_CODE
                                                    AND M3.MAIN_CODE = 'A009' 
                                                    AND M3.SUB_CODE  = A.CHARGE_CODE
            LEFT  JOIN ABA200T  AS N1 WITH (NOLOCK) ON  N1.COMP_CODE = A.COMP_CODE
                                                    AND N1.AC_CD     = A.AC_CODE1
            LEFT  JOIN ABA200T  AS N2 WITH (NOLOCK) ON  N2.COMP_CODE = A.COMP_CODE
                                                    AND N2.AC_CD     = A.AC_CODE2
            LEFT  JOIN ABA200T  AS N3 WITH (NOLOCK) ON  N3.COMP_CODE = A.COMP_CODE
                                                    AND N3.AC_CD     = A.AC_CODE3
            LEFT  JOIN ABA200T  AS N4 WITH (NOLOCK) ON  N4.COMP_CODE = A.COMP_CODE
                                                    AND N4.AC_CD     = A.AC_CODE4
            LEFT  JOIN ABA200T  AS N5 WITH (NOLOCK) ON  N5.COMP_CODE = A.COMP_CODE
                                                    AND N5.AC_CD     = A.AC_CODE5
            LEFT  JOIN ABA200T  AS N6 WITH (NOLOCK) ON  N6.COMP_CODE = A.COMP_CODE
                                                    AND N6.AC_CD     = A.AC_CODE6
         WHERE A.COMP_CODE   = #{S_COMP_CODE}    --(조회값)법인코드
           AND A.EX_DATE     = #{AC_DATE}      --(조회값)결의전표일자
           AND A.EX_NUM      = #{EX_NUM}       --(조회값)결의전표번호
           AND NOT A.EX_SEQ IN (SELECT J_EX_SEQ 
                                  FROM AGB320T WITH (NOLOCK)
                                 WHERE COMP_CODE = A.COMP_CODE 
                                   AND J_EX_DATE = #{AC_DATE}  --(조회값)결의전표일자 
                                   AND J_EX_NUM  = #{EX_NUM})    --(조회값)결의전표번호
           AND ISNULL(A.MOD_DIVI,'')=''
           AND A.INPUT_DIVI = '3'           --   AND A.INPUT_PATH = 'X1'
        
           <if test="@foren.Ognl@isNotEmpty(CHARGE_DIVI)">
                <if test="CHARGE_DIVI != &quot;1&quot;">
               AND A.CHARGE_CODE  = #{CHARGE_CODE} --(조회값)
                </if>
           </if>
         ORDER BY EX_DATE, EX_NUM, EX_SEQ
    </select>

    <select id="agj110ukrServiceImpl.selectList4" parameterType="Map" resultType="rMap">
        SELECT A.J_EX_DATE OLD_AC_DATE
             , A.J_EX_NUM  OLD_SLIP_NUM
             , A.J_EX_SEQ  OLD_SLIP_SEQ
             
             , A.SEQ
             , A.SEQ AS SLIP_SEQ
             , A.ACCNT
             , ISNULL(N1.ACCNT_NAME,'') ACCNT_NAME
             , A.ACCNT AS P_ACCNT
             , A.ORG_AC_DATE + '' + CAST(A.ORG_SLIP_NUM AS NVARCHAR(7)) + '' + CAST(A.ORG_SLIP_SEQ AS NVARCHAR(5)) + '' + A.ACCNT AS ORG_DATA
             , CASE WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 8 THEN UNILITE.fnGetUserDateComp(A.COMP_CODE, A.ORG_AC_DATE)
                    WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 6 THEN UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.ORG_AC_DATE, 'M')
                    ELSE '' 
                END AS ORG_AC_DATE
             , A.ORG_SLIP_NUM
             , A.ORG_SLIP_SEQ
             , A.PEND_CODE
             , ISNULL(N2.AC_NAME, '') PEND_NAME
             , A.PEND_DATA_CODE 
             , ISNULL(N3.AC_NAME, '') PEND_DATA_NAME
             , A.INPUT_PATH
             , A.J_AMT_I
             , A.FOR_J_AMT_I
             , A.EXCHG_RATE_O
             , A.MONEY_UNIT
             , B.REMARK
             , A.FOR_J_AMT_I   AS FOR_BLN_I
             , A.J_AMT_I       AS BLN_I
             , A.DEPT_CODE
             , A.DEPT_NAME
             , A.DIV_CODE
             , ISNULL(C.BILL_DIV_CODE, '') BILL_DIV_CODE
             , A.J_EX_DATE
             , A.J_EX_NUM
             , A.J_EX_SEQ
             , CASE ISNULL(N1.JAN_DIVI, '')
                   WHEN '1' THEN '2' 
                   ELSE          '1'
                END DR_CR
             , B.CUSTOM_CODE
             , B.CUSTOM_NAME
             , B.ACCNT_SPEC
             , B.SPEC_DIVI
             , B.PROFIT_DIVI
             , B.JAN_DIVI
             , B.BUDG_YN
             , B.BUDGCTL_YN
             , B.FOR_YN
             , B.AC_CODE1, B.AC_CODE2, B.AC_CODE3, B.AC_CODE4, B.AC_CODE5, B.AC_CODE6
             , B.AC_DATA1, B.AC_DATA2, B.AC_DATA3, B.AC_DATA4, B.AC_DATA5, B.AC_DATA6
             , B.AC_DATA_NAME1,        B.AC_DATA_NAME2,        B.AC_DATA_NAME3
             , B.AC_DATA_NAME4,        B.AC_DATA_NAME5,        B.AC_DATA_NAME6
             , B.AC_CTL1,  B.AC_CTL2,  B.AC_CTL3,  B.AC_CTL4,  B.AC_CTL5,  B.AC_CTL6
             , B.BOOK_CODE1,           B.BOOK_CODE2,           B.BOOK_DATA1
             , B.BOOK_DATA2,           B.BOOK_DATA_NAME1,      B.BOOK_DATA_NAME2
             , B.AP_STS					AP_STS
             , ISNULL(M1.CODE_NAME, '') AP_CHARGE_NAME
             , N1.PEND_YN
             , B.INPUT_USER_ID
          FROM         AGB320T  AS A  WITH (NOLOCK)
            INNER JOIN AGJ110T  AS B  WITH (NOLOCK) ON  B.COMP_CODE  = A.COMP_CODE
                                                    AND B.ACCNT      = A.ACCNT
                                                    AND B.EX_DATE    = A.J_EX_DATE
                                                    AND B.EX_NUM     = A.J_EX_NUM
                                                    AND B.EX_SEQ     = A.J_EX_SEQ
                                                    AND ISNULL(B.MOD_DIVI,'')=''
                                                    AND B.INPUT_DIVI = '3'           --   AND B.INPUT_PATH='X1'
            LEFT  JOIN BOR120T  AS C  WITH (NOLOCK) ON  C.COMP_CODE  = A.COMP_CODE
                                                    AND C.DIV_CODE   = A.DIV_CODE
            LEFT  JOIN ABA400T  AS N1 WITH (NOLOCK) ON  N1.COMP_CODE = A.COMP_CODE
                                                    AND N1.ACCNT     = A.ACCNT
            LEFT  JOIN ABA200T  AS N2 WITH (NOLOCK) ON  N2.COMP_CODE = A.COMP_CODE 
                                                    AND N2.AC_CD     = A.PEND_CODE
            LEFT  JOIN ABA200TV AS N3 WITH (NOLOCK) ON  N3.COMP_CODE = A.COMP_CODE
                                                    AND N3.AC_CODE   = A.PEND_CODE 
                                                    AND N3.AC_DATA   = A.PEND_DATA_CODE
            LEFT  JOIN BSA100T  AS M1 WITH (NOLOCK) ON  M1.COMP_CODE = A.COMP_CODE 
                                                    AND M1.MAIN_CODE = 'A009' 
                                                    AND M1.SUB_CODE  = ''
         WHERE A.COMP_CODE = #{S_COMP_CODE}
           AND A.J_EX_DATE = #{AC_DATE}
           AND A.J_EX_NUM  = #{EX_NUM}
           
    </select>

    <select id="agj110ukrServiceImpl.selectSearch" parameterType="Map" resultType="rMap">
        SELECT uniLITE.fnGetUserDateComp(B.COMP_CODE, B.EX_DATE) AS J_EX_DATE
             , B.EX_NUM                                          AS J_EX_NUM
             , B.IN_DIV_CODE
             , B.IN_DEPT_CODE
             , B.CHARGE_CODE
             , SUM(CASE B.DR_CR WHEN '1' THEN AMT_I ELSE 0 END)  AS DR_AMT_I
             , SUM(CASE B.DR_CR WHEN '2' THEN AMT_I ELSE 0 END)  AS CR_AMT_I
             , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.AC_DATE) AS J_AC_DATE 
             , B.SLIP_NUM                                        AS J_SLIP_NUM
             , B.AP_STS
             , MAX(M.CODE_NAME)                                  AS AP_STS_NM
             , B.INPUT_PATH
             , B.INPUT_DIVI
             , B.DRAFT_YN
             , M2.CODE_NAME                                      AS CHARGE_NAME
          FROM            AGJ110T B WITH (NOLOCK, INDEX(AGJ110T_IDX02))
               LEFT  JOIN AGB320T A WITH (NOLOCK)   ON  A.COMP_CODE = B.COMP_CODE
                                                    AND A.J_EX_DATE = B.EX_DATE
                                                    AND A.J_EX_NUM  = B.EX_NUM
                                                    AND A.J_EX_SEQ  = B.EX_SEQ
               INNER JOIN BOR120T C WITH (NOLOCK)   ON  C.COMP_CODE = B.COMP_CODE
                                                    AND C.DIV_CODE  = B.DIV_CODE
               LEFT  JOIN BSA100T M WITH (NOLOCK)   ON  M.COMP_CODE = B.COMP_CODE
                                                    AND M.MAIN_CODE = 'A014'
                                                    AND M.SUB_CODE  = B.AP_STS
               LEFT  JOIN BSA100T M2 WITH (NOLOCK)   ON  M2.COMP_CODE = B.COMP_CODE
                                                    AND M2.MAIN_CODE = 'A009'
                                                    AND M2.SUB_CODE  = B.CHARGE_CODE
         WHERE B.COMP_CODE  = #{S_COMP_CODE}
           AND B.INPUT_DIVI = N'3'
           AND (B.MOD_DIVI IS NULL OR B.MOD_DIVI = '')
        
            <if test="@foren.Ognl@isNotEmpty(FR_AC_DATE)">
                   AND B.EX_DATE &gt;= #{FR_AC_DATE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(TO_AC_DATE)">
                    AND B.EX_DATE &lt;= #{TO_AC_DATE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(FR_AC_NUM)">
                    AND B.EX_NUM &gt;= #{FR_AC_NUM}
            </if>
            <if test="@foren.Ognl@isNotEmpty(TO_AC_NUM)">
                    AND B.EX_NUM &lt;= #{TO_AC_NUM}
            </if>
            <if test="@foren.Ognl@isNotEmpty(AP_STS)">
                    AND B.AP_STS = #{AP_STS}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                    AND B.DIV_CODE IN (#{DIV_CODE})
            </if>
            <if test="@foren.Ognl@isEmpty(DIV_CODE)">
                <if test="@foren.Ognl@isNotEmpty(DIV_NAME)">
                AND C.DIV_NAME LIKE '%' +#{DIV_NAME} +'%'
                </if>
            </if>
         GROUP BY B.COMP_CODE, B.EX_DATE , B.EX_NUM, B.IN_DIV_CODE, B.IN_DEPT_CODE, B.CHARGE_CODE
                , B.AC_DATE  , B.SLIP_NUM, B.AP_STS, B.INPUT_PATH , B.INPUT_DIVI  , B.DRAFT_YN, M2.CODE_NAME
    </select>
    
    <select id="agj110ukrServiceImpl.selectPendRef" parameterType="Map" resultType="rMap">
        SELECT CHOICE
             , ACCNT
             , ACCNT_NAME
             , ORG_DATA
             , ORG_AC_DATE
             , ORG_SLIP_NUM
             , ORG_SLIP_SEQ
             , PEND_CODE
             
             , PEND_NAME
             , PEND_DATA_CODE
             , PEND_DATA_NAME 
             , ORG_AMT_I
             , BLN_I
             , EX_AMT_I
             , J_AMT_I
             , FOR_ORG_AMT_I
             , FOR_BLN_I
             , FOR_EX_AMT_I
             , FOR_J_AMT_I
             , MONEY_UNIT
             , REMARK
             , INPUT_PATH
             , EXCHG_RATE_O
             , DEPT_CODE
             , DEPT_NAME
             , DIV_CODE
             , BILL_DIV_CODE
             , DR_CR
             , CUSTOM_CODE
             , CUSTOM_NAME
             , ACCNT_SPEC
             , SPEC_DIVI
             , PROFIT_DIVI
             , JAN_DIVI
             , BUDG_YN
             , BUDGCTL_YN
             , FOR_YN
             , PEND_YN
             , AC_CODE1
             , AC_CODE2
             , AC_CODE3
             , AC_CODE4
             , AC_CODE5
             , AC_CODE6
             , AC_DATA1
             , AC_DATA2
             , AC_DATA3
             , AC_DATA4
             , AC_DATA5
             , AC_DATA6
             , AC_DATA_NAME1
             , AC_DATA_NAME2
             , AC_DATA_NAME3
             , AC_DATA_NAME4
             , AC_DATA_NAME5
             , AC_DATA_NAME6
             , AC_CTL1
             , AC_CTL2
             , AC_CTL3
             , AC_CTL4
             , AC_CTL5
             , AC_CTL6
             , BOOK_CODE1
             , BOOK_CODE2
             , BOOK_DATA1
             , BOOK_DATA2
             , BOOK_DATA_NAME1
             , BOOK_DATA_NAME2
             , INPUT_USER_NAME
             , PAYMENT_DAY
          FROM (
                SELECT CAST(0 AS BIT) AS CHOICE 
                     , A.ACCNT
                     , F.ACCNT_NAME ACCNT_NAME
                     , A.ORG_AC_DATE + '' + CAST(A.ORG_SLIP_NUM AS NVARCHAR(7)) + '' + CAST(A.ORG_SLIP_SEQ AS NVARCHAR(5)) + '' + A.ACCNT AS ORG_DATA
                     , CASE WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 8 THEN UNILITE.fnGetUserDateComp(A.COMP_CODE, A.ORG_AC_DATE)
                            WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 6 THEN UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.ORG_AC_DATE, 'M')
                            ELSE '' 
                        END AS ORG_AC_DATE
                     , A.ORG_SLIP_NUM
                     , A.ORG_SLIP_SEQ
                     , A.PEND_CODE
                     , ISNULL(D.AC_NAME,'') PEND_NAME
                     , A.PEND_DATA_CODE
                     , ISNULL(N3.AC_NAME, '') PEND_DATA_NAME
                     , A.ORG_AMT_I
                     , ISNULL(A.ORG_AMT_I,0) - ISNULL(A.J_AMT_I,0) BLN_I
                     , ISNULL(G.J_AMT_I, 0) EX_AMT_I
                     , ISNULL(A.ORG_AMT_I,0) - ISNULL(A.J_AMT_I,0) - ISNULL(G.J_AMT_I, 0) J_AMT_I
                     , A.FOR_ORG_AMT_I
                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) FOR_BLN_I
                     , ISNULL(G.FOR_J_AMT_I, 0) FOR_EX_AMT_I
                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0) FOR_J_AMT_I
                     , A.MONEY_UNIT
                     , ISNULL(C.REMARK, '') + N'결제' REMARK 
                     , A.INPUT_PATH
                     , A.EXCHG_RATE_O
                     , A.DEPT_CODE
                     , A.DEPT_NAME
                     , A.DIV_CODE
                     , ISNULL(B.BILL_DIV_CODE, '') BILL_DIV_CODE
                     , CASE ISNULL(F.JAN_DIVI, '')
                             WHEN '1' THEN '2'
                             ELSE          '1' END DR_CR
                     , C.CUSTOM_CODE
                     , C.CUSTOM_NAME
                     , C.ACCNT_SPEC
                     , C.SPEC_DIVI
                     , C.PROFIT_DIVI
                     , C.JAN_DIVI
                     , C.BUDG_YN
                     , C.BUDGCTL_YN 
                     , C.FOR_YN
                     , C.PEND_YN
                     , C.AC_CODE1, C.AC_CODE2, C.AC_CODE3, C.AC_CODE4, C.AC_CODE5, C.AC_CODE6
                     , C.AC_DATA1, C.AC_DATA2, C.AC_DATA3, C.AC_DATA4, C.AC_DATA5, C.AC_DATA6
                     , C.AC_DATA_NAME1,        C.AC_DATA_NAME2,        C.AC_DATA_NAME3
                     , C.AC_DATA_NAME4,        C.AC_DATA_NAME5,        C.AC_DATA_NAME6
                     , C.AC_CTL1,  C.AC_CTL2,  C.AC_CTL3,  C.AC_CTL4,  C.AC_CTL5,  C.AC_CTL6
                     , C.BOOK_CODE1,           C.BOOK_CODE2,           C.BOOK_DATA1
                     , C.BOOK_DATA2,           C.BOOK_DATA_NAME1,      C.BOOK_DATA_NAME2
                     , Z1.CODE_NAME AS INPUT_USER_NAME
                     , A.PAYMENT_DAY
                  FROM         AGB300T  AS A  WITH (NOLOCK INDEX(AGB300T_IDX00))
                    INNER JOIN BOR120T  AS B  WITH (NOLOCK) ON  B.COMP_CODE  = A.COMP_CODE
                                                            AND B.DIV_CODE   = A.DIV_CODE
                    INNER JOIN AGJ210T  AS C  WITH (NOLOCK INDEX(AGJ210T_IDX05))
                    										 ON  C.COMP_CODE  = A.COMP_CODE
                                                            AND C.AC_DATE    = A.ORG_AC_DATE
                                                            AND C.SLIP_NUM   = A.ORG_SLIP_NUM
                                                            AND C.SLIP_SEQ   = A.ORG_SLIP_SEQ
                                                            AND C.ACCNT      = A.ACCNT   
                                                            AND ISNULL(C.MOD_DIVI,'')=''
                    LEFT  JOIN (SELECT  COMP_CODE
                    				 ,	DIV_CODE
                                     ,  ORG_AC_DATE
                                     ,  ORG_SLIP_NUM
                                     ,  ORG_SLIP_SEQ
                                     ,  ACCNT
                                     ,  SUM(ISNULL(J_AMT_I    , 0)) AS J_AMT_I
                                     ,  SUM(ISNULL(FOR_J_AMT_I, 0)) AS FOR_J_AMT_I
                                FROM    AGB320T WITH (NOLOCK)
                                WHERE   COMP_CODE           = #{S_COMP_CODE}
                                AND     ISNULL(J_AC_DATE,'')= ''
                                GROUP BY COMP_CODE,	DIV_CODE, ORG_AC_DATE, ORG_SLIP_NUM, ORG_SLIP_SEQ, ACCNT
                               )        AS G                ON  G.COMP_CODE    = A.COMP_CODE
															AND G.DIV_CODE     = A.DIV_CODE
                                                            AND G.ORG_AC_DATE  = A.ORG_AC_DATE
                                                            AND G.ORG_SLIP_NUM = A.ORG_SLIP_NUM
                                                            AND G.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
                                                            AND G.ACCNT        = A.ACCNT
                    LEFT JOIN ABA200T  AS D  WITH (NOLOCK) ON  D.COMP_CODE    = A.COMP_CODE
                                                            AND D.AC_CD        = A.PEND_CODE
                    INNER JOIN ABA400T  AS F  WITH (NOLOCK) ON  F.COMP_CODE    = A.COMP_CODE
                                                            AND F.ACCNT        = A.ACCNT
                    LEFT  JOIN ABA200TV AS N3 WITH (NOLOCK) ON  N3.COMP_CODE   = A.COMP_CODE
                                                            AND N3.AC_CODE     = A.PEND_CODE 
                                                            AND N3.AC_DATA     = A.PEND_DATA_CODE
                    LEFT JOIN BSA100T   AS Z1 WITH (NOLOCK) ON  Z1.COMP_CODE   = C.COMP_CODE
                                                            AND Z1.MAIN_CODE   = 'A009'
                                                            AND Z1.REF_CODE1   = C.INPUT_USER_ID
                 WHERE A.COMP_CODE    = #{S_COMP_CODE}
                   AND LEN(A.ORG_AC_DATE) != 6
                   AND (ISNULL(A.FOR_BLN_I,0) != 0 OR ISNULL(A.BLN_I,0) != 0)
                <if test="@foren.Ognl@isNotEmpty(MANAGE_CODE)">
                   AND A.PEND_CODE LIKE '%'+ #{MANAGE_CODE} + '%'
                </if>
        
                <if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">
                   AND A.ACCNT LIKE '%'+ #{ACCNT_CODE} + '%'
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(AC_DATE_FR)">
                   AND A.ORG_AC_DATE &gt;= #{AC_DATE_FR}
                </if>
                <if test="@foren.Ognl@isNotEmpty(AC_DATE_TO)">
                   AND A.ORG_AC_DATE &lt;= #{AC_DATE_TO}
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">     
                    AND A.DIV_CODE IN
                    <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
                        #{item}
                    </foreach>         
                </if>

                <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE)">
                   AND  C.CHARGE_CODE LIKE  '%' + #{CHARGE_CODE} + '%'
                </if>

                <if test="@foren.Ognl@isNotEmpty(REMARK)">
                   AND  C.REMARK LIKE  '%' + #{REMARK} + '%'
                </if>

                <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                   AND  C.IN_DEPT_CODE LIKE  '%' + #{DEPT_CODE} + '%'
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(PAYMENT_DAY_FR)">
                   AND A.PAYMENT_DAY &gt;= #{PAYMENT_DAY_FR}
                </if>
                <if test="@foren.Ognl@isNotEmpty(PAYMENT_DAY_TO)">
                   AND A.PAYMENT_DAY &lt;= #{PAYMENT_DAY_TO}
                </if>
                

         UNION 
        
                SELECT CAST(0 AS BIT) AS CHOICE
                     , A.ACCNT
                     , F.ACCNT_NAME ACCNT_NAME
                     , A.ORG_AC_DATE + '' + CAST(A.ORG_SLIP_NUM AS NVARCHAR(7)) + '' + CAST(A.ORG_SLIP_SEQ AS NVARCHAR(5)) + '' + A.ACCNT AS ORG_DATA
                     , CASE WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 8 THEN UNILITE.fnGetUserDateComp(A.COMP_CODE, A.ORG_AC_DATE)
                            --20190711::hans WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 6 THEN UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.ORG_AC_DATE, 'M')
                            WHEN LEN(ISNULL(A.ORG_AC_DATE, '')) = 6 THEN UNILITE.fnGetUserTypeDate(A.COMP_CODE, A.ORG_AC_DATE, 'M')
                            ELSE '' 
                        END AS ORG_AC_DATE
                     , A.ORG_SLIP_NUM
                     , A.ORG_SLIP_SEQ
                     , A.PEND_CODE
                     , ISNULL(D.AC_NAME,'') PEND_NAME
                     , A.PEND_DATA_CODE
                     , ISNULL(N3.AC_NAME, '') PEND_DATA_NAME
                     , A.ORG_AMT_I
                     , ISNULL(A.ORG_AMT_I,0) - ISNULL(A.J_AMT_I,0) BLN_I
                     , ISNULL(G.J_AMT_I, 0) EX_AMT_I
                     , ISNULL(A.ORG_AMT_I,0) - ISNULL(A.J_AMT_I,0) - ISNULL(G.J_AMT_I, 0) J_AMT_I
                     , A.FOR_ORG_AMT_I
                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) FOR_BLN_I
                     , ISNULL(G.FOR_J_AMT_I, 0) FOR_EX_AMT_I
                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0) FOR_J_AMT_I
                     , A.MONEY_UNIT
                     , N'결제' REMARK
                     , A.INPUT_PATH
                     , A.EXCHG_RATE_O
                     , A.DEPT_CODE
                     , A.DEPT_NAME
                     , A.DIV_CODE
                     , ISNULL(B.BILL_DIV_CODE, '') BILL_DIV_CODE
                     , CASE ISNULL(F.JAN_DIVI, '')
                             WHEN '1' THEN '2'
                             ELSE          '1' 
                        END DR_CR
                     , CASE 'A4' WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                                 WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                                 ELSE '' 
                        END CUSTOM_CODE
                     , CASE 'A4' WHEN C.BOOK_CODE1 THEN ISNULL(N1.CUSTOM_NAME, '')
                                 WHEN C.BOOK_CODE2 THEN ISNULL(N2.CUSTOM_NAME, '')
                                 ELSE '' 
                        END CUSTOM_CODE
                     , C.ACCNT_SPEC
                     , C.SPEC_DIVI 
                     , C.PROFIT_DIVI
                     , C.JAN_DIVI
                     , F.BUDG_YN
                     , F.BUDGCTL_YN 
                     , F.FOR_YN
                     , F.PEND_YN
                     , F.AC_CODE1
                     , F.AC_CODE2
                     , F.AC_CODE3
                     , F.AC_CODE4
                     , F.AC_CODE5
                     , F.AC_CODE6
                     , CASE F.AC_CODE1 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA1
                     , CASE F.AC_CODE2 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA2
                     , CASE F.AC_CODE3 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA3
                     , CASE F.AC_CODE4 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA4
                     , CASE F.AC_CODE5 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA5
                     , CASE F.AC_CODE6 WHEN C.BOOK_CODE1 THEN C.BOOK_DATA1 
                     				   WHEN C.BOOK_CODE2 THEN C.BOOK_DATA2 
                     				   WHEN 'D1'		 THEN CONVERT(NVARCHAR(30),(ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0)))  	-- 외화금액 
                     				   WHEN 'D2'		 THEN A.MONEY_UNIT																	  							-- 화폐단위 
                     				   WHEN 'D3'		 THEN CONVERT(NVARCHAR(30), A.EXCHG_RATE_O)  																  	-- 환율 
                     				   ELSE '' END AC_DATA6
                     , CASE F.AC_CODE1 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                     				   WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME1
                     , CASE F.AC_CODE2 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                                       WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME2
                     , CASE F.AC_CODE3 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                                       WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME3
                     , CASE F.AC_CODE4 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                                       WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME4
                     , CASE F.AC_CODE5 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                                       WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME5
                     , CASE F.AC_CODE6 WHEN C.BOOK_CODE1 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE1, C.BOOK_DATA1)
                                       WHEN C.BOOK_CODE2 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, C.BOOK_CODE2, C.BOOK_DATA2) 
                                       WHEN 'D2'		 THEN UNILITE.fnGetAcNameComp(C.COMP_CODE, 'D2', A.MONEY_UNIT) 						  -- 화폐단위 
                                       ELSE '' 
                        END AC_DATA_NAME6
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL1 ELSE F.CR_CTL1 END AC_CTL1
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL2 ELSE F.CR_CTL2 END AC_CTL2
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL3 ELSE F.CR_CTL3 END AC_CTL3
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL4 ELSE F.CR_CTL4 END AC_CTL4
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL5 ELSE F.CR_CTL5 END AC_CTL5
                     , CASE 0 WHEN ISNULL(C.DR_AMT_I,0) THEN F.DR_CTL6 ELSE F.CR_CTL6 END AC_CTL6
                     , C.BOOK_CODE1
                     , C.BOOK_CODE2
                     , C.BOOK_DATA1
                     , C.BOOK_DATA2
                     , ISNULL(N4.AC_NAME, '') BOOK_DATA_NAME1
                     , ISNULL(N5.AC_NAME, '') BOOK_DATA_NAME2
                     , '' INPUT_USER_NAME
                     , A.PAYMENT_DAY
                  FROM         AGB300T  AS A  WITH (NOLOCK INDEX(AGB300T_IDX00))
                    INNER JOIN BOR120T  AS B  WITH (NOLOCK) ON  B.COMP_CODE    = A.COMP_CODE
                                                            AND B.DIV_CODE     = A.DIV_CODE
                    INNER JOIN AGB200T  AS C  WITH (NOLOCK) ON  C.COMP_cODE    = A.COMP_CODE
                                                            AND C.AC_DATE      = A.ORG_AC_DATE
                                                            AND C.ACCNT        = A.ACCNT
                                                            AND C.DEPT_CODE    = A.DEPT_CODE
                                                            AND ((C.BOOK_CODE1 = A.PEND_CODE AND
                                                                  C.BOOK_DATA1 = A.PEND_DATA_CODE) 
                                                            OR   (C.BOOK_CODE2 = A.PEND_CODE AND
                                                                  C.BOOK_DATA2 = A.PEND_DATA_CODE))
                    --20190711::hans INNER JOIN AGJ210T  AS Z  WITH (NOLOCK INDEX(AGJ210T_IDX05))
                    left outer JOIN AGJ210T  AS Z  WITH (NOLOCK INDEX(AGJ210T_IDX05))
                    										 ON  Z.COMP_CODE  = A.COMP_CODE
                                                            AND Z.AC_DATE    = A.ORG_AC_DATE
                                                            AND Z.SLIP_NUM   = A.ORG_SLIP_NUM
                                                            AND Z.SLIP_SEQ   = A.ORG_SLIP_SEQ
                                                            AND Z.ACCNT      = A.ACCNT   
                                                            AND ISNULL(Z.MOD_DIVI,'')=''
                    LEFT  JOIN (SELECT  COMP_CODE
                    				 ,	DIV_CODE
                                     ,  ORG_AC_DATE
                                     ,  ORG_SLIP_NUM
                                     ,  ORG_SLIP_SEQ
                                     ,  ACCNT
                                     ,  SUM(ISNULL(J_AMT_I    , 0)) AS J_AMT_I
                                     ,  SUM(ISNULL(FOR_J_AMT_I, 0)) AS FOR_J_AMT_I
                                FROM    AGB320T WITH (NOLOCK)
                                WHERE   COMP_CODE           = #{S_COMP_CODE}
                                AND     ISNULL(J_AC_DATE,'')= ''
                                GROUP BY COMP_CODE,	DIV_CODE, ORG_AC_DATE, ORG_SLIP_NUM, ORG_SLIP_SEQ, ACCNT
                               )        AS G                ON  G.COMP_CODE      = A.COMP_CODE
															AND G.DIV_CODE     = A.DIV_CODE
                                                            AND G.ORG_AC_DATE    = A.ORG_AC_DATE
                                                            AND G.ORG_SLIP_NUM   = A.ORG_SLIP_NUM
                                                            AND G.ORG_SLIP_SEQ   = A.ORG_SLIP_SEQ
                                                            AND G.ACCNT          = A.ACCNT
                    LEFT JOIN ABA200T  AS D  WITH (NOLOCK) ON  D.COMP_CODE     = A.COMP_CODE
                                                            AND D.AC_CD        = A.PEND_CODE
                    INNER JOIN ABA400T  AS F  WITH (NOLOCK) ON  F.COMP_CODE    = A.COMP_CODE
                                                            AND F.ACCNT        = A.ACCNT
                    LEFT  JOIN BCM100T  AS N1 WITH (NOLOCK) ON  N1.COMP_cODE   = C.COMP_CODE
                                                            AND N1.CUSTOM_CODE = C.BOOK_DATA1
                    LEFT  JOIN BCM100T  AS N2 WITH (NOLOCK) ON  N2.COMP_CODE   = C.COMP_CODE
                                                            AND N2.CUSTOM_CODE = C.BOOK_DATA2
                    LEFT  JOIN ABA200TV AS N3 WITH (NOLOCK) ON  N3.COMP_CODE   = A.COMP_CODE 
                                                            AND N3.AC_CODE     = A.PEND_CODE 
                                                            AND N3.AC_DATA     = A.PEND_DATA_CODE
                    LEFT  JOIN ABA200TV AS N4 WITH (NOLOCK) ON  N4.COMP_CODE   = C.COMP_CODE
                                                            AND N4.AC_CODE     = C.BOOK_CODE1
                                                            AND N4.AC_DATA     = C.BOOK_DATA1
                    LEFT  JOIN ABA200TV AS N5 WITH (NOLOCK) ON  N5.COMP_CODE   = C.COMP_CODE
                                                            AND N5.AC_CODE     = C.BOOK_CODE2
                                                            AND N5.AC_DATA     = C.BOOK_DATA2
                 WHERE A.COMP_CODE          = #{S_COMP_CODE}
                   AND LEN(A.ORG_AC_DATE)   = 6
                   AND (ISNULL(A.FOR_BLN_I,0) != 0 OR ISNULL(A.BLN_I,0) != 0)
        
                <if test="@foren.Ognl@isNotEmpty(MANAGE_CODE)">
                   AND A.PEND_CODE LIKE '%'+#{MANAGE_CODE}+'%'
                </if>
                <if test="@foren.Ognl@isNotEmpty(ACCNT_CODE)">
                    AND A.ACCNT LIKE '%'+#{ACCNT_CODE}+'%'
                </if>
                <if test="@foren.Ognl@isNotEmpty(AC_DATE_FR)">
                   AND A.ORG_AC_DATE &gt;= Left(#{AC_DATE_FR}, 6)
                </if>
                <if test="@foren.Ognl@isNotEmpty(AC_DATE_TO)">
                    AND A.ORG_AC_DATE &lt;= Left(#{AC_DATE_TO}, 6)
                </if>
                <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">     
                    AND A.DIV_CODE IN
                    <foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
                        #{item}
                    </foreach>         
                </if>

                <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE)">
                   AND  Z.CHARGE_CODE LIKE  '%' + #{CHARGE_CODE} + '%'
                </if>

                <if test="@foren.Ognl@isNotEmpty(REMARK)">
                   AND  Z.REMARK LIKE  '%' + #{REMARK} + '%'
                </if>

                <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                   AND  Z.IN_DEPT_CODE LIKE  '%' + #{DEPT_CODE} + '%'
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(CHARGE_DIVI)">
                    <if test="CHARGE_DIVI != &quot;1&quot;">
                   AND A.CHARGE_CODE  = #{CHARGE_CODE} --(조회값)
                    </if>
               </if>
               
               <if test="@foren.Ognl@isNotEmpty(PAYMENT_DAY_FR)">
                   AND A.PAYMENT_DAY &gt;= #{PAYMENT_DAY_FR}
                </if>
                <if test="@foren.Ognl@isNotEmpty(PAYMENT_DAY_TO)">
                   AND A.PAYMENT_DAY &lt;= #{PAYMENT_DAY_TO}
                </if>
               
                ) A        
                WHERE 1=1
                <if test="@foren.Ognl@isNotEmpty(DYNAMIC_CODE_FR)">
                AND  A.PEND_DATA_CODE LIKE '%' + #{DYNAMIC_CODE_FR} + '%'
                </if>
                
                <if test="@foren.Ognl@isNotEmpty(PEND_DATA_NAME)">
                AND  A.PEND_DATA_NAME LIKE '%' + #{PEND_DATA_NAME} + '%'
                </if>
                
         ORDER BY A.ORG_AC_DATE, A.ORG_SLIP_NUM, A.ORG_SLIP_SEQ  
    </select>
    
    <update id="agj110ukrServiceImpl.insertLog110" parameterType="Map">
        INSERT INTO L_AGB320T (                                                                                                                       
                                                                                                                                                    
        KEY_VALUE        ,OPR_FLAG                ,COMP_CODE                    
        
          
        ,ACCNT             ,                  
        ORG_AC_DATE       ,
        ORG_SLIP_NUM      ,
        ORG_SLIP_SEQ      ,
        SEQ               ,
    --  일반 정보
        DIV_CODE          ,
        DEPT_CODE         ,
        DEPT_NAME         ,
        MONEY_UNIT        ,
        EXCHG_RATE_O      ,
        INPUT_PATH        ,  
        PEND_CODE         ,  
        PEND_DATA_CODE    , 
        J_EX_DATE         , 
        J_EX_NUM          ,   
        J_EX_SEQ          ,   
        J_AMT_I           ,   
        FOR_J_AMT_I       ,  
        J_AC_DATE         ,   
        J_SLIP_NUM        ,  
        J_SLIP_SEQ                                                                                                     
       ,INSERT_DB_USER              ,INSERT_DB_TIME                 ,UPDATE_DB_USER             ,UPDATE_DB_TIME                                     
                                                                                                                                              
        ) VALUES (                                                                                                                                  
            #{KEY_VALUE}                    ,#{OPR_FLAG}        ,#{S_COMP_CODE}                             
        ,    #{ACCNT}               ,                  
        REPLACE(#{ORG_AC_DATE}, '.', '')          ,
        #{ORG_SLIP_NUM}         ,
        #{ORG_SLIP_SEQ}         ,
        #{SEQ}                  ,
    --  일반 정보
        #{DIV_CODE}            ,
        #{DEPT_CODE}            ,
        #{DEPT_NAME}            ,
        #{MONEY_UNIT}          ,
        #{EXCHG_RATE_O}       ,
        #{INPUT_PATH}        ,  
        #{PEND_CODE}         ,  
        #{PEND_DATA_CODE}    , 
        #{J_EX_DATE}         , 
        #{J_EX_NUM}          ,   
        #{J_EX_SEQ}          ,   
        #{J_AMT_I}           ,   
        #{FOR_J_AMT_I}       ,  
        #{J_AC_DATE}         ,   
        #{J_SLIP_NUM}        ,  
        #{J_SLIP_SEQ}        
            ,#{S_USER_ID}                   ,GETDATE()                      ,#{S_USER_ID}           ,GETDATE()              
                                             
        )
    </update>
    <select id="agj110ukrServiceImpl.selectLimitAmt" parameterType="Map" resultType="rMap">
	    DECLARE @CompCode   NVARCHAR(8)
		      , @KeyValue   NVARCHAR(20)
		
		SET @CompCode = #{S_COMP_CODE}
		SET @KeyValue = #{KEY_VALUE}
		
		SELECT  CONVERT(NVARCHAR(10), CONVERT(DATETIME, A.ORG_AC_DATE, 112), 102) AS ORG_AC_DATE
              , A.ORG_SLIP_NUM
              , A.ORG_SLIP_SEQ
              , A.ACCNT
              , A.J_AMT_I
              , A.FOR_J_AMT_I
              , B.J_AMT_I  		AS ORG_J_AMT_I
              , B.FOR_J_AMT_I	AS ORG_FOR_J_AMT_I
		  FROM (SELECT COMP_CODE
		             , DIV_CODE
		             , ORG_AC_DATE
		             , ORG_SLIP_NUM
		             , ORG_SLIP_SEQ
		             , ACCNT
		             , SUM(J_AMT_I)     AS J_AMT_I
		             , SUM(FOR_J_AMT_I) AS FOR_J_AMT_I
		          FROM L_AGB320T WITH (NOLOCK) 
		         WHERE COMP_CODE = @CompCode
		           AND KEY_VALUE = @KeyValue
		           AND OPR_FLAG  = 'N'
		         GROUP BY COMP_CODE, DIV_CODE, ORG_AC_DATE, ORG_SLIP_NUM, ORG_SLIP_SEQ, ACCNT) A  
		       LEFT JOIN
		       (SELECT A.COMP_CODE
		             , A.DIV_CODE
		             , A.ORG_AC_DATE
		             , A.ORG_SLIP_NUM
		             , A.ORG_SLIP_SEQ
		             , A.ACCNT
		             , A.J_AMT_I
		             , A.FOR_J_AMT_I
		          FROM (SELECT A.COMP_CODE
		                     , A.DIV_CODE
		                     , A.ORG_AC_DATE
		                     , A.ORG_SLIP_NUM
		                     , A.ORG_SLIP_SEQ
		                     , A.ACCNT
		                     , ISNULL(A.ORG_AMT_I    ,0) - ISNULL(A.J_AMT_I    ,0) - ISNULL(G.J_AMT_I    , 0) AS J_AMT_I
		                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0) AS FOR_J_AMT_I
		                  FROM         AGB300T A  WITH (NOLOCK INDEX(AGB300T_IDX00))
		                       LEFT  JOIN (SELECT COMP_CODE
		                                        , DIV_CODE
		                                        , ORG_AC_DATE
		                                        , ORG_SLIP_NUM
		                                        , ORG_SLIP_SEQ
		                                        , ACCNT
		                                        , SUM(ISNULL(J_AMT_I    , 0)) AS J_AMT_I
		                                        , SUM(ISNULL(FOR_J_AMT_I, 0)) AS FOR_J_AMT_I
		                                     FROM AGB320T WITH (NOLOCK)
		                                    WHERE COMP_CODE            = @CompCode
		                                      AND ISNULL(J_AC_DATE,'') = ''
		                                    GROUP BY COMP_CODE, DIV_CODE, ORG_AC_DATE, ORG_SLIP_NUM, ORG_SLIP_SEQ, ACCNT) G ON G.COMP_CODE    = A.COMP_CODE
		                                                                                                                   AND G.DIV_CODE     = A.DIV_CODE
		                                                                                                                   AND G.ORG_AC_DATE  = A.ORG_AC_DATE
		                                                                                                                   AND G.ORG_SLIP_NUM = A.ORG_SLIP_NUM
		                                                                                                                   AND G.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
		                                                                                                                   AND G.ACCNT        = A.ACCNT
		                 WHERE A.COMP_CODE         = @CompCode
		                   AND LEN(A.ORG_AC_DATE) != 6
		                   AND (ISNULL(A.FOR_BLN_I,0) != 0 OR ISNULL(A.BLN_I,0) != 0)
		
		                UNION 
		        
		                SELECT A.COMP_CODE
		                     , A.DIV_CODE
		                     , A.ORG_AC_DATE
		                     , A.ORG_SLIP_NUM
		                     , A.ORG_SLIP_SEQ
		                     , A.ACCNT
		                     , ISNULL(A.ORG_AMT_I    ,0) - ISNULL(A.J_AMT_I    ,0) - ISNULL(G.J_AMT_I    , 0) AS J_AMT_I
		                     , ISNULL(A.FOR_ORG_AMT_I,0) - ISNULL(A.FOR_J_AMT_I,0) - ISNULL(G.FOR_J_AMT_I, 0) AS FOR_J_AMT_I
		                  FROM         AGB300T  AS A  WITH (NOLOCK INDEX(AGB300T_IDX00))
		                       LEFT  JOIN (SELECT COMP_CODE
		                                        , DIV_CODE
		                                        , ORG_AC_DATE
		                                        , ORG_SLIP_NUM
		                                        , ORG_SLIP_SEQ
		                                        , ACCNT
		                                        , SUM(ISNULL(J_AMT_I    , 0)) AS J_AMT_I
		                                        , SUM(ISNULL(FOR_J_AMT_I, 0)) AS FOR_J_AMT_I
		                                     FROM AGB320T WITH (NOLOCK)
		                                    WHERE COMP_CODE            = @CompCode
		                                      AND ISNULL(J_AC_DATE,'') = ''
		                                    GROUP BY COMP_CODE, DIV_CODE, ORG_AC_DATE, ORG_SLIP_NUM, ORG_SLIP_SEQ, ACCNT) G ON G.COMP_CODE    = A.COMP_CODE
		                                                                                                                   AND G.DIV_CODE     = A.DIV_CODE
		                                                                                                                   AND G.ORG_AC_DATE  = A.ORG_AC_DATE
		                                                                                                                   AND G.ORG_SLIP_NUM = A.ORG_SLIP_NUM
		                                                                                                                   AND G.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
		                                                                                                                   AND G.ACCNT        = A.ACCNT
		                 WHERE A.COMP_CODE          = @CompCode
		                   AND LEN(A.ORG_AC_DATE)   = 6
		                   AND (ISNULL(A.FOR_BLN_I,0) != 0 OR ISNULL(A.BLN_I,0) != 0) ) A ) B ON B.COMP_CODE    = A.COMP_CODE
		                                                                                     AND B.DIV_CODE     = A.DIV_CODE
		                                                                                     AND B.ORG_AC_DATE  = A.ORG_AC_DATE
		                                                                                     AND B.ORG_SLIP_NUM = A.ORG_SLIP_NUM
		                                                                                     AND B.ORG_SLIP_SEQ = A.ORG_SLIP_SEQ
		                                                                                     AND B.ACCNT        = A.ACCNT
		 WHERE ABS(A.J_AMT_I)     > ABS(B.J_AMT_I)
		    OR ABS(A.FOR_J_AMT_I) > ABS(B.FOR_J_AMT_I)
    </select>
    <select id="agj110ukrServiceImpl.getAutoNum" parameterType="Map" resultType="rMap">
    	SELECT AUTO_NUM
    	  FROM  L_AGB320T  WITH (NOLOCK)
         WHERE  KEY_VALUE = #{KEY_VALUE} 
           AND  J_EX_DATE = #{J_EX_DATE}        
           AND  J_EX_NUM  = #{J_EX_NUM}     
		   AND  J_EX_SEQ  = #{J_EX_SEQ}     
		   AND  OPR_FLAG  = #{OPR_FLAG}
    </select>
     <update id="agj110ukrServiceImpl.spAccntExSlipX1" parameterType="Map" statementType="CALLABLE">
       
        <!-- 1) parameterMap 정의 후 사용하는 법  -->
        <!-- {call SP_SALES_SalesOrder (?,?,?,?)} -->
        
        <!-- 2) parameterMap 없이 사용하는 법  -->
        {call USP_ACCNT_ExSlipX1 (
            #{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserLang, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
       
     </update>
    <select id="agj110ukrServiceImpl.getExNum" parameterType="Map" resultType="rMap">   
        SELECT DISTINCT J_EX_NUM, J_EX_SEQ  , J_EX_NUM as EX_NUM                
        FROM  L_AGB320T  WITH (NOLOCK)
        WHERE KEY_VALUE = #{KEY_VALUE}
         AND AUTO_NUM = #{AUTO_NUM2}     
    </select>
</mapper>