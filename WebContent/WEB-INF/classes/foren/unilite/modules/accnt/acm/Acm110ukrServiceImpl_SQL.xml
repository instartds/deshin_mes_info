<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="acm110ukrServiceImpl">
    <select id="acm110ukrServiceImpl.selectFnDate" parameterType="Map" resultType="rMap">
        SELECT ISNULL(FN_DATE,'') FN_DATE 
          FROM BOR100T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
    </select>
    
    <select id="acm110ukrServiceImpl.getSlipNum" parameterType="Map" resultType="rMap">
        SELECT ISNULL(MAX(SLIP_NUM), 0) + 1  AS SLIP_NUM
          FROM AGJ210T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND AC_DATE = #{AC_DATE}
    </select>
    
    <!-- masterGrid1 조회 -->
    <select id="acm110ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
        SELECT 
               RIGHT(A.AC_DATE,2)                           AC_DAY
             , A.AC_DATE                                    OLD_AC_DATE
             , A.SLIP_NUM                                   OLD_SLIP_NUM
             , A.SLIP_SEQ                                   OLD_SLIP_SEQ
             , A.SLIP_SEQ                                   SLIP_SEQ
             , A.SLIP_DIVI
             , A.DR_CR
             , A.ACCNT
             , ISNULL(B.ACCNT_NAME, '')                     ACCNT_NAME
             , ISNULL(A.CUSTOM_CODE,'')                     CUSTOM_CODE
             , CASE WHEN ISNULL(A.CUSTOM_NAME,'') = '' 
                    THEN ISNULL(C2.CUSTOM_NAME,'')
                    ELSE ISNULL(A.CUSTOM_NAME ,'')
                END                                         CUSTOM_NAME
             , CASE A.DR_CR WHEN '1' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END DR_AMT_I
             , CASE A.DR_CR WHEN '2' THEN ISNULL(A.AMT_I, 0.0) ELSE 0.0 END CR_AMT_I
             , ISNULL(A.AMT_I, 0.0)                         AMT_I
             , ISNULL(A.REMARK,'')                          REMARK
             , ISNULL(M1.CODE_NAME,'')                      PROOF_KIND_NM
             , CASE WHEN M1.REF_CODE1 = 'E' THEN uniLITE.fnCipherDecrypt(A.CREDIT_NUM, 'C')
                    ELSE uniLITE.fnCipherDecrypt(A.CREDIT_NUM, '')
               END                                          CREDIT_NUM_EXPOS
             , ISNULL(A.CREDIT_NUM,'')						CREDIT_NUM
             , ISNULL(A.DEPT_NAME,'')                       DEPT_NAME
             , ISNULL(M2.CODE_NAME,'')                      AP_CHARGE_NAME
             , ISNULL(A.DIV_CODE,'')                        DIV_CODE
             , ISNULL(A.DEPT_CODE,'')                       DEPT_CODE
             , ISNULL(A.P_ACCNT,'')                         P_ACCNT
             , ISNULL(A.PROOF_KIND,'')                      PROOF_KIND
             , ISNULL(A.MONEY_UNIT,'')                      MONEY_UNIT
             , ISNULL(A.EXCHG_RATE_O,0.0)                   EXCHG_RATE_O
             , ISNULL(A.FOR_AMT_I,0.0)                      FOR_AMT_I
             , ISNULL(A.IN_DIV_CODE,'')                     IN_DIV_CODE
             , ISNULL(A.IN_DEPT_CODE,'')                    IN_DEPT_CODE
             , ISNULL(A.IN_DEPT_NAME,'')                    IN_DEPT_NAME
             , ISNULL(A.BILL_DIV_CODE,'')                   BILL_DIV_CODE
             , ISNULL(A.AC_CODE1,'')                        AC_CODE1,        ISNULL(A.AC_CODE2,'')        AC_CODE2
             , ISNULL(A.AC_CODE3,'')                        AC_CODE3,        ISNULL(A.AC_CODE4,'')        AC_CODE4
             , ISNULL(A.AC_CODE5,'')                        AC_CODE5,        ISNULL(A.AC_CODE6,'')        AC_CODE6
             , ISNULL(A.AC_DATA1,'')                        AC_DATA1,        ISNULL(A.AC_DATA2,'')        AC_DATA2
             , ISNULL(A.AC_DATA3,'')                        AC_DATA3,        ISNULL(A.AC_DATA4,'')        AC_DATA4
             , ISNULL(A.AC_DATA5,'')                        AC_DATA5,        ISNULL(A.AC_DATA6,'')        AC_DATA6
             , ISNULL(A.AC_DATA_NAME1,'')                   AC_DATA_NAME1,   ISNULL(A.AC_DATA_NAME2,'')   AC_DATA_NAME2
             , ISNULL(A.AC_DATA_NAME3,'')                   AC_DATA_NAME3,   ISNULL(A.AC_DATA_NAME4,'')   AC_DATA_NAME4
             , ISNULL(A.AC_DATA_NAME5,'')                   AC_DATA_NAME5,   ISNULL(A.AC_DATA_NAME6,'')   AC_DATA_NAME6
             , ISNULL(A.BOOK_CODE1,'')                      BOOK_CODE1,      ISNULL(A.BOOK_CODE2,'')      BOOK_CODE2
             , ISNULL(A.BOOK_DATA1,'')                      BOOK_DATA1,      ISNULL(A.BOOK_DATA2,'')      BOOK_DATA2
             , ISNULL(A.BOOK_DATA_NAME1,'')                 BOOK_DATA_NAME1, ISNULL(A.BOOK_DATA_NAME2,'') BOOK_DATA_NAME2
             , ISNULL(A.ACCNT_SPEC,'')                      ACCNT_SPEC,      ISNULL(A.SPEC_DIVI,'')       SPEC_DIVI
             , ISNULL(A.PROFIT_DIVI,'')                     PROFIT_DIVI,     ISNULL(A.JAN_DIVI,'')        JAN_DIVI
             , ISNULL(A.PEND_YN,'N')                        PEND_YN,         ISNULL(A.PEND_CODE,'')       PEND_CODE
             , ISNULL(A.PEND_DATA_CODE,'')                  PEND_DATA_CODE,  ISNULL(A.BUDG_YN,'N')        BUDG_YN
             , ISNULL(A.BUDGCTL_YN,'N')                     BUDGCTL_YN,      ISNULL(A.FOR_YN,'N')         FOR_YN
             , ISNULL(A.POSTIT_YN,'')                       POSTIT_YN,       ISNULL(A.POSTIT,'')          POSTIT
             , ISNULL(A.POSTIT_USER_ID,'')                  POSTIT_USER_ID,  ISNULL(A.INPUT_PATH,'')      INPUT_PATH
             , ISNULL(A.INPUT_DIVI,'')                      INPUT_DIVI,      ISNULL(A.AUTO_SLIP_NUM,'')   AUTO_SLIP_NUM
             , ISNULL(A.CLOSE_FG,'')                        CLOSE_FG,        ISNULL(A.INPUT_DATE,'')      INPUT_DATE
             , ISNULL(A.INPUT_USER_ID,'')                   INPUT_USER_ID,   ISNULL(A.CHARGE_CODE,'')     CHARGE_CODE
             , ISNULL(M3.CODE_NAME,'')                      CHARGE_NAME
             , ISNULL(A.CREDIT_CODE,'')                     CREDIT_CODE,     ISNULL(A.REASON_CODE,'')     REASON_CODE
             , ISNULL(A.AP_DATE,'')                         AP_DATE,         ISNULL(A.AP_USER_ID,'')      AP_USER_ID
             , ISNULL(A.EX_DATE,'')                         EX_DATE,         ISNULL(A.EX_NUM,0)           EX_NUM
             , ISNULL(A.AC_DATE,'')                         AC_DATE
             , ISNULL(A.SLIP_NUM,0)                         SLIP_NUM
             , ISNULL(A.EX_SEQ,0)                           EX_SEQ
             , ISNULL(N1.AC_NAME ,'' )                      AC_NAME1 ,       ISNULL(N2.AC_NAME ,'' )      AC_NAME2
             , ISNULL(N3.AC_NAME ,'' )                      AC_NAME3 ,       ISNULL(N4.AC_NAME ,'' )      AC_NAME4
             , ISNULL(N5.AC_NAME ,'' )                      AC_NAME5 ,       ISNULL(N6.AC_NAME ,'' )      AC_NAME6
             , ISNULL(A.AC_CTL1  ,'N')                      AC_CTL1  ,       ISNULL(A.AC_CTL2  ,'N')      AC_CTL2
             , ISNULL(A.AC_CTL3  ,'N')                      AC_CTL3  ,       ISNULL(A.AC_CTL4  ,'N')      AC_CTL4
             , ISNULL(A.AC_CTL5  ,'N')                      AC_CTL5  ,       ISNULL(A.AC_CTL6  ,'N')      AC_CTL6
             , ISNULL(N1.DT_TYPE ,0  )                      AC_TYPE1 ,       ISNULL(N2.DT_TYPE ,0  )      AC_TYPE2
             , ISNULL(N3.DT_TYPE ,0  )                      AC_TYPE3 ,       ISNULL(N4.DT_TYPE ,0  )      AC_TYPE4
             , ISNULL(N5.DT_TYPE ,0  )                      AC_TYPE5 ,       ISNULL(N6.DT_TYPE ,0  )      AC_TYPE6
             , ISNULL(N1.DT_LEN  ,0  )                      AC_LEN1  ,       ISNULL(N2.DT_LEN  ,0  )      AC_LEN2
             , ISNULL(N3.DT_LEN  ,0  )                      AC_LEN3  ,       ISNULL(N4.DT_LEN  ,0  )      AC_LEN4
             , ISNULL(N5.DT_LEN  ,0  )                      AC_LEN5  ,       ISNULL(N6.DT_LEN  ,0  )      AC_LEN6
             , ISNULL(N1.DT_POPUP,'N')                      AC_POPUP1,       ISNULL(N2.DT_POPUP,'N')      AC_POPUP2
             , ISNULL(N3.DT_POPUP,'N')                      AC_POPUP3,       ISNULL(N4.DT_POPUP,'N')      AC_POPUP4
             , ISNULL(N5.DT_POPUP,'N')                      AC_POPUP5,       ISNULL(N6.DT_POPUP,'N')      AC_POPUP6
             , CONVERT(BIT,0) 								AS CHK
             , ISNULL(N1.DT_FMT,'0')                        AC_FORMAT1,      ISNULL(N2.DT_FMT,'0')        AC_FORMAT2
             , ISNULL(N3.DT_FMT,'0')                        AC_FORMAT3,      ISNULL(N4.DT_FMT,'0')        AC_FORMAT4
             , ISNULL(N5.DT_FMT,'0')                        AC_FORMAT5,      ISNULL(N6.DT_FMT,'0')        AC_FORMAT6
             , ISNULL(A.ASST_SUPPLY_AMT_I, 0.0)			    ASST_SUPPLY_AMT_I
             , ISNULL(A.ASST_TAX_AMT_I, 0.0)			   	ASST_TAX_AMT_I
             , A.ASST_DIVI
          FROM         AGJ210T  AS A  WITH (NOLOCK)
            LEFT  JOIN ABA400T  AS B  WITH (NOLOCK) ON  B.COMP_CODE    = A.COMP_CODE 
                                                    AND B.ACCNT        = A.ACCNT
            LEFT  JOIN BCM100T  AS C2 WITH (NOLOCK) ON  C2.COMP_CODE   = A.COMP_CODE
                                                    AND C2.CUSTOM_CODE = A.CUSTOM_CODE
            LEFT  JOIN BSA100T  AS M1 WITH (NOLOCK) ON  M1.COMP_CODE   = A.COMP_CODE
                                                    AND M1.MAIN_CODE   = 'A022' 
                                                    AND M1.SUB_CODE    = A.PROOF_KIND
            LEFT  JOIN BSA100T  AS M2 WITH (NOLOCK) ON  M2.COMP_CODE   = A.COMP_CODE
                                                    AND M2.MAIN_CODE   = 'A009' 
                                                    AND M2.SUB_CODE    = A.AP_CHARGE_CODE
            LEFT  JOIN BSA100T  AS M3 WITH (NOLOCK) ON  M3.COMP_CODE   = A.COMP_CODE
                                                    AND M3.MAIN_CODE   = 'A009' 
                                                    AND M3.SUB_CODE    = A.CHARGE_CODE
            LEFT  JOIN ABA200T  AS N1 WITH (NOLOCK) ON  N1.COMP_CODE   = A.COMP_CODE
                                                    AND N1.AC_CD       = A.AC_CODE1
            LEFT  JOIN ABA200T  AS N2 WITH (NOLOCK) ON  N2.COMP_CODE   = A.COMP_CODE
                                                    AND N2.AC_CD       = A.AC_CODE2
            LEFT  JOIN ABA200T  AS N3 WITH (NOLOCK) ON  N3.COMP_CODE   = A.COMP_CODE
                                                    AND N3.AC_CD       = A.AC_CODE3
            LEFT  JOIN ABA200T  AS N4 WITH (NOLOCK) ON  N4.COMP_CODE   = A.COMP_CODE
                                                    AND N4.AC_CD       = A.AC_CODE4
            LEFT  JOIN ABA200T  AS N5 WITH (NOLOCK) ON  N5.COMP_CODE   = A.COMP_CODE
                                                    AND N5.AC_CD       = A.AC_CODE5
            LEFT  JOIN ABA200T  AS N6 WITH (NOLOCK) ON  N6.COMP_CODE   = A.COMP_CODE
                                                    AND N6.AC_CD       = A.AC_CODE6
         WHERE A.COMP_CODE   = #{S_COMP_CODE}  --(조회값)법인코드
           AND A.AC_DATE     = #{AC_DATE}      --(조회값)회계전표일자
           AND A.SLIP_NUM    = #{SLIP_NUM}     --(조회값)회계전표번호
           AND A.INPUT_PATH  = 'C2'
           AND ISNULL(A.MOD_DIVI,'') = ''
           AND A.SLIP_SEQ NOT IN (SELECT SLIP_SEQ 
                                FROM ACM100T WITH (NOLOCK)
                               WHERE COMP_CODE = A.COMP_CODE 
                                 AND AC_DATE   = #{AC_DATE}    --(조회값)회계전표일자 
                                 AND SLIP_NUM  = #{SLIP_NUM})  --(조회값)회계전표번호
        
           <if test="@foren.Ognl@isNotEmpty(CHARGE_DIVI)">
                <if test="CHARGE_DIVI != &quot;1&quot;">
               AND A.CHARGE_CODE  = #{CHARGE_CODE} --(조회값)
                </if>
           </if>
         ORDER BY AC_DATE, SLIP_NUM, SLIP_SEQ
    </select>

	<!-- inOutGrid 조회 -->
    <select id="acm110ukrServiceImpl.selectList4" parameterType="Map" resultType="rMap">
    SELECT A.AC_DATE                   AS OLD_AC_DATE
         , A.SLIP_NUM                  AS OLD_SLIP_NUM
         , A.SLIP_SEQ                  AS OLD_SLIP_SEQ
         
         , A.AC_DATE
         , A.SLIP_NUM
         , A.SLIP_SEQ

         , A1.ACCNT
         , ISNULL(N1.ACCNT_NAME,'')    AS ACCNT_NAME
         , A1.ACCNT                    AS P_ACCNT
         , B.CHARGE_CODE
         , M1.CODE_NAME                AS CHARGE_NAME

         , B.PEND_YN
         , A.MONEY_UNIT
         , B.REMARK
         
         , B.SLIP_DIVI

         , A.IN_AMT_I
         , A.OUT_AMT_I
         , A.JAN_AMT_I
         
         , CASE B.DR_CR WHEN '1' THEN ISNULL(B.AMT_I, 0.0) ELSE 0.0 END AS DR_AMT_I
         , CASE B.DR_CR WHEN '2' THEN ISNULL(B.AMT_I, 0.0) ELSE 0.0 END AS CR_AMT_I
         , ISNULL(B.AMT_I, 0.0)                                         AS AMT_I

         , B.DEPT_CODE
         , B.DEPT_NAME
         , B.DIV_CODE
         , ISNULL(C.BILL_DIV_CODE, '') AS BILL_DIV_CODE
         , B.IN_DIV_CODE
         , B.IN_DEPT_CODE

         , unilite.fnCipherDecrypt(A.BANK_ACCOUNT, '')                  AS BANK_ACCOUNT
         , A1.SAVE_CODE
         , A1.SAVE_NAME
         , A1.BANK_CODE
         , A2.CUSTOM_NAME              AS BANK_NAME

         , B.INPUT_PATH
         , B.DR_CR
         , B.CUSTOM_CODE
         , B.CUSTOM_NAME

         , B.ACCNT_SPEC
         , B.SPEC_DIVI
         , B.PROFIT_DIVI
         , B.JAN_DIVI
         , B.BUDG_YN
         , B.BUDGCTL_YN
         , B.FOR_YN

         , B.AC_CODE1             , B.AC_CODE2
         , B.AC_CODE3             , B.AC_CODE4
         , B.AC_CODE5             , B.AC_CODE6
         , B.AC_DATA1             , B.AC_DATA2
         , B.AC_DATA3             , B.AC_DATA4
         , B.AC_DATA5             , B.AC_DATA6
         , B.AC_DATA_NAME1        , B.AC_DATA_NAME2
         , B.AC_DATA_NAME3        , B.AC_DATA_NAME4
         , B.AC_DATA_NAME5        , B.AC_DATA_NAME6
         , B.AC_CTL1              , B.AC_CTL2
         , B.AC_CTL3              , B.AC_CTL4
         , B.AC_CTL5              , B.AC_CTL6

         , B.BOOK_CODE1           , B.BOOK_CODE2
         , B.BOOK_DATA1           , B.BOOK_DATA2
         , B.BOOK_DATA_NAME1      , B.BOOK_DATA_NAME2

         , A.INOUT_DATE
         , A.AUTO_NUM  AS CMS_SEQ

      FROM         ACM100T  AS A  WITH (NOLOCK)
      -- 통장정보
      LEFT OUTER JOIN AFS100T A1 WITH(NOLOCK)   ON A1.COMP_CODE    = A.COMP_CODE
                                               AND REPLACE(unilite.fnCipherDecrypt(A1.BANK_ACCOUNT, ''), '-', '') = REPLACE(unilite.fnCipherDecrypt(A.BANK_ACCOUNT, ''), '-', '')
      -- 거래처정보
      LEFT OUTER JOIN BCM100T A2 WITH(NOLOCK)   ON A2.COMP_CODE    = A1.COMP_CODE
                                               AND A2.CUSTOM_CODE  = A1.BANK_CODE
      INNER JOIN AGJ210T  AS B  WITH (NOLOCK)   ON B.COMP_CODE     = A.COMP_CODE
                                               AND B.ACCNT         = A1.ACCNT
                                               AND B.AC_DATE       = A.AC_DATE
                                               AND B.SLIP_NUM      = A.SLIP_NUM
                                               AND B.SLIP_SEQ      = A.SLIP_SEQ
                                               AND B.INPUT_PATH    = 'C2'
                                               AND ISNULL(B.MOD_DIVI, '') = ''
      LEFT  JOIN BOR120T  AS C  WITH (NOLOCK)   ON C.COMP_CODE     = B.COMP_CODE
                                               AND C.DIV_CODE      = B.DIV_CODE
      LEFT  JOIN ABA400T  AS N1 WITH (NOLOCK)   ON N1.COMP_CODE    = A.COMP_CODE
                                               AND N1.ACCNT        = A1.ACCNT
      LEFT  JOIN BSA100T  AS M1 WITH (NOLOCK)   ON M1.COMP_CODE    = A.COMP_CODE 
                                               AND M1.MAIN_CODE    = 'A009' 
                                               AND M1.SUB_CODE     = B.CHARGE_CODE
     WHERE A.COMP_CODE = #{S_COMP_CODE}
       AND A.AC_DATE   = #{AC_DATE}
       AND A.SLIP_NUM  = #{SLIP_NUM}
           
    </select>

    <!-- 조회팝업 조회 -->
    <select id="acm110ukrServiceImpl.selectSearch" parameterType="Map" resultType="rMap">
        SELECT uniLITE.fnGetUserDateComp(A.COMP_CODE, A.AC_DATE) AS J_AC_DATE
             , A.SLIP_NUM                                        AS J_SLIP_NUM
             , A.DIV_CODE
             
             , SUM(CASE A.DR_CR WHEN '1' THEN AMT_I ELSE 0 END)  AS DR_AMT_I
             , SUM(CASE A.DR_CR WHEN '2' THEN AMT_I ELSE 0 END)  AS CR_AMT_I
             , A.INPUT_PATH
             , M2.CODE_NAME                                      AS INPUT_NAME
             , A.INPUT_DIVI
             , A.CHARGE_CODE
             , M1.CODE_NAME                                      AS CHARGE_NAME
          FROM            AGJ210T A WITH (NOLOCK)
               LEFT  JOIN BSA100T M1 WITH (NOLOCK)   ON M1.COMP_CODE = A.COMP_CODE
                                                    AND M1.MAIN_CODE = 'A009'
                                                    AND M1.SUB_CODE  = A.CHARGE_CODE
               LEFT  JOIN BSA100T M2 WITH (NOLOCK)   ON M2.COMP_CODE = A.COMP_CODE
                                                    AND M2.MAIN_CODE = 'A011'
                                                    AND M2.SUB_CODE  = A.INPUT_PATH
         WHERE A.COMP_CODE  = #{S_COMP_CODE}
           AND A.INPUT_PATH = 'C2'
           AND ISNULL(A.MOD_DIVI,'') = ''
            <if test="@foren.Ognl@isNotEmpty(FR_AC_DATE)">
                   AND A.AC_DATE &gt;= #{FR_AC_DATE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(TO_AC_DATE)">
                    AND A.AC_DATE &lt;= #{TO_AC_DATE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                    AND A.DIV_CODE = #{DIV_CODE}
            </if>

         GROUP BY A.COMP_CODE  , A.AC_DATE   , A.SLIP_NUM  , A.DIV_CODE
                , A.CHARGE_CODE, A.INPUT_PATH, M1.CODE_NAME, A.INPUT_DIVI, M2.CODE_NAME
    </select>
    
    <!-- 참조데이터 조회 -->
    <select id="acm110ukrServiceImpl.selectInOutRef" parameterType="Map" resultType="rMap">
    SELECT unilite.fnCipherDecrypt(A.BANK_ACCOUNT, '')   AS BANK_ACCOUNT   -- 계좌번호
         , B.SAVE_CODE                                                     -- 통장코드
         , B.SAVE_NAME                                                     -- 통장명
         , B.BANK_CODE                                                     -- 은행코드
         , C.CUSTOM_NAME                                 AS BANK_NAME      -- 은행명
         , A.IN_AMT_I                                                      -- 입금액
         , A.OUT_AMT_I                                                     -- 출금액
         , A.JAN_AMT_I                                                     -- 잔액
         , A.REMARK                                                        -- 적요
         , B.ACCNT                                                         -- 계정코드
         , D.ACCNT_NAME                                                    -- 계정명
         , A.MONEY_UNIT                                                    -- 화폐단위
         , A.INOUT_DATE                                                    -- 입출금일자
         , A.AUTO_NUM                                    AS CMS_SEQ        -- 자동순번
      FROM ACM100T A            WITH(NOLOCK)   -- CMS입출금정보
      -- 통장정보
      LEFT OUTER JOIN AFS100T B WITH(NOLOCK)  ON B.COMP_CODE    = A.COMP_CODE
                                             AND REPLACE(unilite.fnCipherDecrypt(B.BANK_ACCOUNT, ''), '-', '') = REPLACE(unilite.fnCipherDecrypt(A.BANK_ACCOUNT, ''), '-', '')
      -- 거래처정보
      LEFT OUTER JOIN BCM100T C WITH(NOLOCK)  ON C.COMP_CODE    = B.COMP_CODE
                                             AND C.CUSTOM_CODE  = B.BANK_CODE
      -- 계정코드정보
      LEFT OUTER JOIN ABA400T D WITH(NOLOCK)  ON D.COMP_CODE    = B.COMP_CODE
                                             AND D.ACCNT        = B.ACCNT

     WHERE A.COMP_CODE = #{S_COMP_CODE}
       AND A.INOUT_DATE BETWEEN #{FROM_TRADE_DATE} AND #{TO_TRADE_DATE}
       AND ISNULL(A.AC_DATE, '') = ''

    <if test="@foren.Ognl@isNotEmpty(BANK_ACCOUNT)">
       AND (REPLACE(unilite.fnCipherDecrypt(A.BANK_ACCOUNT, ''), '-', '') LIKE '%' + REPLACE(#{BANK_ACCOUNT}, '-', '') + '%'
           OR B.SAVE_NAME                                                 LIKE '%' + REPLACE(#{BANK_ACCOUNT}, '-', '') + '%'
           )
    </if>
    </select>

    <select id="acm110ukrServiceImpl.getMaxAutoNum" parameterType="Map" resultType="rMap">
        SELECT ISNULL(MAX(AUTO_NUM),0) +1 AS "MAX_AUTO_NUM" FROM L_AGJ210T  WITH (NOLOCK)
    </select>


	<update id="acm110ukrServiceImpl.insertLog" parameterType="Map">
    INSERT INTO L_AGJ210T (
           KEY_VALUE        ,OPR_FLAG               ,COMP_CODE          ,AUTO_NUM
                <if test="@foren.Ognl@isNotEmpty(AC_DATE         )">,AC_DATE                   </if><if test="@foren.Ognl@isNotEmpty(SLIP_NUM        )">,SLIP_NUM
           </if><if test="@foren.Ognl@isNotEmpty(SLIP_SEQ        )">,SLIP_SEQ                  </if><if test="@foren.Ognl@isNotEmpty(SLIP_DIVI       )">,SLIP_DIVI
           </if><if test="@foren.Ognl@isNotEmpty(DR_CR           )">,DR_CR                     </if><if test="@foren.Ognl@isNotEmpty(CASH_NUM        )">,CASH_NUM
           </if><if test="@foren.Ognl@isNotEmpty(ACCNT           )">,ACCNT                     </if><if test="@foren.Ognl@isNotEmpty(P_ACCNT         )">,P_ACCNT
           </if><if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE     )">,CUSTOM_CODE               </if><if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME     )">,CUSTOM_NAME
           </if><if test="@foren.Ognl@isNotEmpty(MONEY_UNIT      )">,MONEY_UNIT                </if><if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O    )">,EXCHG_RATE_O
           </if><if test="@foren.Ognl@isNotEmpty(AMT_I           )">,AMT_I                     </if><if test="@foren.Ognl@isNotEmpty(FOR_AMT_I       )">,FOR_AMT_I
           </if><if test="@foren.Ognl@isNotEmpty(REMARK          )">,REMARK                    </if><if test="@foren.Ognl@isNotEmpty(IN_DIV_CODE     )">,IN_DIV_CODE
           </if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_CODE    )">,IN_DEPT_CODE              </if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_NAME    )">,IN_DEPT_NAME
           </if><if test="@foren.Ognl@isNotEmpty(DIV_CODE        )">,DIV_CODE                  </if><if test="@foren.Ognl@isNotEmpty(DEPT_CODE       )">,DEPT_CODE
           </if><if test="@foren.Ognl@isNotEmpty(DEPT_NAME       )">,DEPT_NAME                 </if><if test="@foren.Ognl@isNotEmpty(BILL_DIV_CODE   )">,BILL_DIV_CODE
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE1        )">,AC_CODE1                  </if><if test="@foren.Ognl@isNotEmpty(AC_CODE2        )">,AC_CODE2
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE3        )">,AC_CODE3                  </if><if test="@foren.Ognl@isNotEmpty(AC_CODE4        )">,AC_CODE4
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE5        )">,AC_CODE5                  </if><if test="@foren.Ognl@isNotEmpty(AC_CODE6        )">,AC_CODE6
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA1        )">,AC_DATA1                  </if><if test="@foren.Ognl@isNotEmpty(AC_DATA2        )">,AC_DATA2
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA3        )">,AC_DATA3                  </if><if test="@foren.Ognl@isNotEmpty(AC_DATA4        )">,AC_DATA4
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA5        )">,AC_DATA5                  </if><if test="@foren.Ognl@isNotEmpty(AC_DATA6        )">,AC_DATA6
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME1   )">,AC_DATA_NAME1             </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME2   )">,AC_DATA_NAME2
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME3   )">,AC_DATA_NAME3             </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME4   )">,AC_DATA_NAME4
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME5   )">,AC_DATA_NAME5             </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME6   )">,AC_DATA_NAME6
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE1      )">,BOOK_CODE1                </if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE2      )">,BOOK_CODE2
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA1      )">,BOOK_DATA1                </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA2      )">,BOOK_DATA2
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME1 )">,BOOK_DATA_NAME1           </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME2 )">,BOOK_DATA_NAME2
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL1         )">,AC_CTL1                   </if><if test="@foren.Ognl@isNotEmpty(AC_CTL2         )">,AC_CTL2
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL3         )">,AC_CTL3                   </if><if test="@foren.Ognl@isNotEmpty(AC_CTL4         )">,AC_CTL4
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL5         )">,AC_CTL5                   </if><if test="@foren.Ognl@isNotEmpty(AC_CTL6         )">,AC_CTL6
           </if><if test="@foren.Ognl@isNotEmpty(ACCNT_SPEC      )">,ACCNT_SPEC                </if><if test="@foren.Ognl@isNotEmpty(SPEC_DIVI       )">,SPEC_DIVI
           </if><if test="@foren.Ognl@isNotEmpty(PROFIT_DIVI     )">,PROFIT_DIVI               </if><if test="@foren.Ognl@isNotEmpty(JAN_DIVI        )">,JAN_DIVI
           </if><if test="@foren.Ognl@isNotEmpty(PEND_YN         )">,PEND_YN                   </if><if test="@foren.Ognl@isNotEmpty(PEND_CODE       )">,PEND_CODE
           </if><if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE  )">,PEND_DATA_CODE            </if><if test="@foren.Ognl@isNotEmpty(BUDG_YN         )">,BUDG_YN
           </if><if test="@foren.Ognl@isNotEmpty(BUDGCTL_YN      )">,BUDGCTL_YN                </if><if test="@foren.Ognl@isNotEmpty(FOR_YN          )">,FOR_YN
           </if><if test="@foren.Ognl@isNotEmpty(PROOF_KIND      )">,PROOF_KIND                </if><if test="@foren.Ognl@isNotEmpty(CREDIT_NUM      )">,CREDIT_NUM

           </if><if test="@foren.Ognl@isNotEmpty(CREDIT_CODE     )">,CREDIT_CODE               </if><if test="@foren.Ognl@isNotEmpty(REASON_CODE     )">,REASON_CODE
           </if><if test="@foren.Ognl@isNotEmpty(POSTIT_YN       )">,POSTIT_YN                 </if><if test="@foren.Ognl@isNotEmpty(POSTIT          )">,POSTIT
           </if><if test="@foren.Ognl@isNotEmpty(POSTIT_USER_ID  )">,POSTIT_USER_ID            </if><if test="@foren.Ognl@isNotEmpty(INPUT_PATH      )">,INPUT_PATH
           </if><if test="@foren.Ognl@isNotEmpty(INPUT_DIVI      )">,INPUT_DIVI                </if><if test="@foren.Ognl@isNotEmpty(CMS_SEQ         )">,AUTO_SLIP_NUM
           </if><if test="@foren.Ognl@isNotEmpty(CLOSE_FG        )">,CLOSE_FG</if>             ,INPUT_DATE    ,INPUT_USER_ID
                <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE     )">,CHARGE_CODE
           </if><if test="@foren.Ognl@isNotEmpty(AP_DATE         )">,AP_DATE
           </if><if test="@foren.Ognl@isNotEmpty(AP_USER_ID      )">,AP_USER_ID                </if>,AP_CHARGE_CODE
                <if test="@foren.Ognl@isNotEmpty(DRAFT_YN        )">,DRAFT_YN
           </if><if test="@foren.Ognl@isNotEmpty(AGREE_YN        )">,AGREE_YN                  </if><if test="@foren.Ognl@isNotEmpty(OLD_AC_DATE     )">,OLD_AC_DATE
           </if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_NUM    )">,OLD_SLIP_NUM              </if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_SEQ    )">,OLD_SLIP_SEQ
           </if><if test="@foren.Ognl@isNotEmpty(EX_DATE         )">,EX_DATE                   </if><if test="@foren.Ognl@isNotEmpty(EX_NUM          )">,EX_NUM
           </if><if test="@foren.Ognl@isNotEmpty(EX_SEQ          )">,EX_SEQ 
           </if><if test="@foren.Ognl@isNotEmpty(ASST_SUPPLY_AMT_I)">,ASST_SUPPLY_AMT_I         </if><if test="@foren.Ognl@isNotEmpty(ASST_TAX_AMT_I )">,ASST_TAX_AMT_I
           </if><if test="@foren.Ognl@isNotEmpty(ASST_DIVI       )">,ASST_DIVI                 </if>
         , INSERT_DB_USER                   ,INSERT_DB_TIME         ,UPDATE_DB_USER            ,UPDATE_DB_TIME

         ) VALUES (
           #{KEY_VALUE}                     ,#{OPR_FLAG}
         , #{S_COMP_CODE}                   ,#{AUTO_NUM}
                <if test="@foren.Ognl@isNotEmpty(AC_DATE         )">,#{AC_DATE}                 </if><if test="@foren.Ognl@isNotEmpty(SLIP_NUM        )">,#{SLIP_NUM}
           </if><if test="@foren.Ognl@isNotEmpty(SLIP_SEQ        )">,#{SLIP_SEQ}                </if><if test="@foren.Ognl@isNotEmpty(SLIP_DIVI       )">,#{SLIP_DIVI}
           </if><if test="@foren.Ognl@isNotEmpty(DR_CR           )">,#{DR_CR}                   </if><if test="@foren.Ognl@isNotEmpty(CASH_NUM        )">,0
           </if><if test="@foren.Ognl@isNotEmpty(ACCNT           )">,#{ACCNT}                   </if><if test="@foren.Ognl@isNotEmpty(P_ACCNT         )">,#{P_ACCNT}
           </if><if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE     )">,#{CUSTOM_CODE}             </if><if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME     )">,#{CUSTOM_NAME}
           </if><if test="@foren.Ognl@isNotEmpty(MONEY_UNIT      )">,#{MONEY_UNIT}              </if><if test="@foren.Ognl@isNotEmpty(EXCHG_RATE_O    )">,#{EXCHG_RATE_O}
           </if><if test="@foren.Ognl@isNotEmpty(AMT_I           )">,#{AMT_I}                   </if><if test="@foren.Ognl@isNotEmpty(FOR_AMT_I       )">,#{FOR_AMT_I}
           </if><if test="@foren.Ognl@isNotEmpty(REMARK          )">,#{REMARK}                  </if><if test="@foren.Ognl@isNotEmpty(IN_DIV_CODE     )">,#{IN_DIV_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_CODE    )">,#{IN_DEPT_CODE}            </if><if test="@foren.Ognl@isNotEmpty(IN_DEPT_NAME    )">,#{IN_DEPT_NAME}
           </if><if test="@foren.Ognl@isNotEmpty(DIV_CODE        )">,#{DIV_CODE}                </if><if test="@foren.Ognl@isNotEmpty(DEPT_CODE       )">,#{DEPT_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(DEPT_NAME       )">,#{DEPT_NAME}               </if><if test="@foren.Ognl@isNotEmpty(BILL_DIV_CODE   )">,#{BILL_DIV_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE1        )">,#{AC_CODE1}                </if><if test="@foren.Ognl@isNotEmpty(AC_CODE2        )">,#{AC_CODE2}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE3        )">,#{AC_CODE3}                </if><if test="@foren.Ognl@isNotEmpty(AC_CODE4        )">,#{AC_CODE4}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CODE5        )">,#{AC_CODE5}                </if><if test="@foren.Ognl@isNotEmpty(AC_CODE6        )">,#{AC_CODE6}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA1        )">,#{AC_DATA1}                </if><if test="@foren.Ognl@isNotEmpty(AC_DATA2        )">,#{AC_DATA2}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA3        )">,#{AC_DATA3}                </if><if test="@foren.Ognl@isNotEmpty(AC_DATA4        )">,#{AC_DATA4}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA5        )">,#{AC_DATA5}                </if><if test="@foren.Ognl@isNotEmpty(AC_DATA6        )">,#{AC_DATA6}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME1   )">,#{AC_DATA_NAME1}           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME2   )">,#{AC_DATA_NAME2}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME3   )">,#{AC_DATA_NAME3}           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME4   )">,#{AC_DATA_NAME4}
           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME5   )">,#{AC_DATA_NAME5}           </if><if test="@foren.Ognl@isNotEmpty(AC_DATA_NAME6   )">,#{AC_DATA_NAME6}
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE1      )">,#{BOOK_CODE1}              </if><if test="@foren.Ognl@isNotEmpty(BOOK_CODE2      )">,#{BOOK_CODE2}
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA1      )">,#{BOOK_DATA1}              </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA2      )">,#{BOOK_DATA2}
           </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME1 )">,#{BOOK_DATA_NAME1}         </if><if test="@foren.Ognl@isNotEmpty(BOOK_DATA_NAME2 )">,#{BOOK_DATA_NAME2}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL1         )">,#{AC_CTL1}                 </if><if test="@foren.Ognl@isNotEmpty(AC_CTL2         )">,#{AC_CTL2}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL3         )">,#{AC_CTL3}                 </if><if test="@foren.Ognl@isNotEmpty(AC_CTL4         )">,#{AC_CTL4}
           </if><if test="@foren.Ognl@isNotEmpty(AC_CTL5         )">,#{AC_CTL5}                 </if><if test="@foren.Ognl@isNotEmpty(AC_CTL6         )">,#{AC_CTL6}
           </if><if test="@foren.Ognl@isNotEmpty(ACCNT_SPEC      )">,#{ACCNT_SPEC}              </if><if test="@foren.Ognl@isNotEmpty(SPEC_DIVI       )">,#{SPEC_DIVI}
           </if><if test="@foren.Ognl@isNotEmpty(PROFIT_DIVI     )">,#{PROFIT_DIVI}             </if><if test="@foren.Ognl@isNotEmpty(JAN_DIVI        )">,#{JAN_DIVI}
           </if><if test="@foren.Ognl@isNotEmpty(PEND_YN         )">,#{PEND_YN}                 </if><if test="@foren.Ognl@isNotEmpty(PEND_CODE       )">,#{PEND_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(PEND_DATA_CODE  )">,#{PEND_DATA_CODE}          </if><if test="@foren.Ognl@isNotEmpty(BUDG_YN         )">,#{BUDG_YN}
           </if><if test="@foren.Ognl@isNotEmpty(BUDGCTL_YN      )">,#{BUDGCTL_YN}              </if><if test="@foren.Ognl@isNotEmpty(FOR_YN          )">,#{FOR_YN}
           </if><if test="@foren.Ognl@isNotEmpty(PROOF_KIND      )">,#{PROOF_KIND}              </if><if test="@foren.Ognl@isNotEmpty(CREDIT_NUM      )">,#{CREDIT_NUM}

           </if><if test="@foren.Ognl@isNotEmpty(CREDIT_CODE     )">,#{CREDIT_CODE}             </if><if test="@foren.Ognl@isNotEmpty(REASON_CODE     )">,#{REASON_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(POSTIT_YN       )">,#{POSTIT_YN}               </if><if test="@foren.Ognl@isNotEmpty(POSTIT          )">,#{POSTIT}
           </if><if test="@foren.Ognl@isNotEmpty(POSTIT_USER_ID  )">,#{POSTIT_USER_ID}          </if><if test="@foren.Ognl@isNotEmpty(INPUT_PATH      )">,#{INPUT_PATH}
           </if><if test="@foren.Ognl@isNotEmpty(INPUT_DIVI      )">,#{INPUT_DIVI}              </if><if test="@foren.Ognl@isNotEmpty(CMS_SEQ         )">,#{CMS_SEQ}
           </if><if test="@foren.Ognl@isNotEmpty(CLOSE_FG        )">,#{CLOSE_FG}</if>           ,CONVERT(NVARCHAR(8), GETDATE(),112)  ,ISNULL(#{INPUT_USER_ID},#{S_USER_ID} )
                <if test="@foren.Ognl@isNotEmpty(CHARGE_CODE     )">,#{CHARGE_CODE}
           </if><if test="@foren.Ognl@isNotEmpty(AP_DATE         )">,#{AP_DATE}
           </if><if test="@foren.Ognl@isNotEmpty(AP_USER_ID      )">,#{AP_USER_ID}              </if>,isnull(#{AP_CHARGE_CODE}, #{CHARGE_CODE}  )
                <if test="@foren.Ognl@isNotEmpty(DRAFT_YN        )">,#{DRAFT_YN}
           </if><if test="@foren.Ognl@isNotEmpty(AGREE_YN        )">,#{AGREE_YN}                </if><if test="@foren.Ognl@isNotEmpty(OLD_AC_DATE     )">,#{OLD_AC_DATE}
           </if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_NUM    )">,#{OLD_SLIP_NUM}            </if><if test="@foren.Ognl@isNotEmpty(OLD_SLIP_SEQ    )">,#{OLD_SLIP_SEQ}
           </if><if test="@foren.Ognl@isNotEmpty(EX_DATE         )">,#{EX_DATE}                 </if><if test="@foren.Ognl@isNotEmpty(EX_NUM          )">,#{EX_NUM}
           </if><if test="@foren.Ognl@isNotEmpty(EX_SEQ          )">,#{EX_SEQ}                  </if>
               <if test="@foren.Ognl@isNotEmpty(ASST_SUPPLY_AMT_I)">,#{ASST_SUPPLY_AMT_I}       </if><if test="@foren.Ognl@isNotEmpty(ASST_TAX_AMT_I  )">,#{ASST_TAX_AMT_I}
           </if><if test="@foren.Ognl@isNotEmpty(ASST_DIVI       )">,#{ASST_DIVI}               </if>
           , #{S_USER_ID}                    ,GETDATE()             ,#{S_USER_ID}               ,GETDATE()
    )
    </update>


    <update id="acm110ukrServiceImpl.spAccntInsertAcSlip" parameterType="Map" statementType="CALLABLE">
        {call USP_ACCNT_InsertAcSlip (
            #{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{CallPath, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserLang, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
       
    </update>
    <update id="acm110ukrServiceImpl.spAccntDeleteAcSlip" parameterType="Map" statementType="CALLABLE">
        {call USP_ACCNT_DeleteAcSlip (
            #{CompCode, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{KeyValue, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{CallPath, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserLang, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{UserID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
       
    </update>
    
    <select id="acm110ukrServiceImpl.getChkData" parameterType="Map" resultType="rMap">
    SELECT AC_DATE
         , SLIP_NUM
      FROM AGJ210T
     WHERE COMP_CODE = #{S_COMP_CODE}
       AND AC_DATE   = #{AC_DATE}
       AND SLIP_NUM  = #{SLIP_NUM}
       AND ISNULL(MOD_DIVI,'') = ''
    </select>
</mapper>