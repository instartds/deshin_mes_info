<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agd160ukrServiceImpl">
	<select id="agd160ukrServiceImpl.selectList1" parameterType="Map" resultType="rMap">
	--UAgd02Krv.Cagd160UKR[fnagd160nq] Query1
	 SELECT CAST(0 AS BIT)         CHK
          , A.NOTE_NUM
          , ISNULL(A.OC_AMT_I,0)   OC_AMT_I
          , (ISNULL(A.OC_AMT_I,0)-ISNULL(J_AMT_I,0)) AMT_I
          , A.EXP_DATE
          , A.CUSTOM_CODE
          , C.CUSTOM_NAME
          , B.REMARK
          , A.AC_DATE
          , A.SLIP_NUM
          , A.SLIP_SEQ
	  FROM             AFN100T AS A WITH (NOLOCK)
         LEFT  JOIN AGJ210T AS B WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                                 AND B.AC_DATE      = A.AC_DATE
                                                 AND B.SLIP_NUM     = A.SLIP_NUM
                                                 AND B.SLIP_SEQ     = A.SLIP_SEQ
                                                 AND (B.MOD_DIVI    = '' OR B.MOD_DIVI IS NULL)
         LEFT  JOIN BCM100T AS C WITH (NOLOCK) ON  C.COMP_CODE   = A.COMP_CODE
                                               AND C.CUSTOM_CODE = A.CUSTOM_CODE
         
	 WHERE A.COMP_CODE =  #{S_COMP_CODE}
	   AND A.NOTE_STS IN ('1', '6')
	   AND A.AC_CD    IN ('D1','D3')
	   AND A.AC_CD     = #{AC_CODE}
	   AND A.EXP_DATE &gt;= #{EXT_DATE_FR}
	   AND A.EXP_DATE &lt;= #{EXT_DATE_TO}
	   AND ISNULL(A.OC_AMT_I,0) != ISNULL(J_AMT_I,0)
	   AND ISNULL(A.EX_DATE,'') = ''
	   <if test="@foren.Ognl@isNotEmpty(CUST_CODE_FR)"> 
	   AND A.CUSTOM_CODE &gt;= #{CUST_CODE_FR}
	   </if>
	   <if test="@foren.Ognl@isNotEmpty(CUST_CODE_TO)"> 
	   AND A.CUSTOM_CODE &lt;= #{CUST_CODE_TO}
	   </if>
		<if test="@foren.Ognl@isEmpty(CUST_CODE_FR) and @foren.Ognl@isNotEmpty(CUST_NAME_FR)">
			AND C.CUSTOM_NAME &gt;= #{CUST_NAME_FR}
		</if>
   		<if test="@foren.Ognl@isEmpty(CUST_CODE_TO) and @foren.Ognl@isNotEmpty(CUST_NAME_TO)">
			AND C.CUSTOM_NAME &lt;= #{CUST_NAME_TO}
		</if>
	   
	</select>
	
	<select id="agd160ukrServiceImpl.selectList2" parameterType="Map" resultType="rMap">
	--UAgd02Krv.Cagd160UKR[fnagd160nq] Query2
	DECLARE @COMP_CODE      NVARCHAR(08)
	      , @FR_EX_DATE     NVARCHAR(08)
	      , @TO_EX_DATE     NVARCHAR(08)
	
	SET     @COMP_CODE      = #{S_COMP_CODE}
	SET     @FR_EX_DATE     = #{EXT_DATE_FR}
	SET     @TO_EX_DATE     = #{EXT_DATE_TO}
	
	SELECT CAST(0 AS BIT) CHK
	     , A.NOTE_NUM
	     , A.OC_AMT_I
	     , A.J_AMT_I
	     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EXP_DATE) EXP_DATE
	     , A.CUSTOM_CODE
	     , C.CUSTOM_NAME
	     , unilite.fnGetUserDateComp(A.COMP_CODE, A.EX_DATE)  EX_DATE
	     , A.EX_NUM 
	     , ISNULL(B.AP_STS, '1') AS AGREE_YN
	     , A.COMP_CODE
	     , B.DIV_CODE
	     , CASE WHEN ISNULL(B.AP_STS, '1') = '1' THEN D.SLIP_NUM ELSE B.SLIP_NUM END	AS OLD_SLIP_NUM
	     , CASE WHEN ISNULL(B.AP_STS, '1') = '1' THEN D.AC_DATE  ELSE B.AC_DATE  END	AS OLD_AC_DATE
	  FROM             AFN100T AS A WITH (NOLOCK)
	        LEFT  JOIN (SELECT  DISTINCT
	                            COMP_CODE, EX_DATE, EX_NUM, DIV_CODE, AP_STS, AC_DATE, SLIP_NUM
	                    FROM    AGJ110T WITH (NOLOCK)
	                    WHERE   COMP_CODE  = @COMP_CODE
	                    AND     EX_DATE   &gt;= @FR_EX_DATE
	                    AND     EX_DATE   &lt;= @TO_EX_DATE
	                    AND     (MOD_DIVI IS NULL         OR MOD_DIVI     = '')
	                   )       AS B               ON  B.COMP_CODE   = A.COMP_CODE
	                                              AND B.EX_DATE     = A.EX_DATE
	                                              AND B.EX_NUM      = A.EX_NUM
	        LEFT  JOIN BCM100T AS C WITH (NOLOCK) ON  C.COMP_CODE   = A.COMP_CODE
	                                              AND C.CUSTOM_CODE = A.CUSTOM_CODE
	        LEFT  JOIN AGJ210T AS D WITH (NOLOCK) ON  D.COMP_CODE   = A.COMP_CODE
												 AND D.AC_DATE   = A.AC_DATE
												 AND D.SLIP_NUM  = A.SLIP_NUM
												 AND D.SLIP_SEQ  = A.SLIP_SEQ
												 AND (D.MOD_DIVI = '' OR D.MOD_DIVI IS NULL)
	 WHERE A.COMP_CODE = @COMP_CODE
	   AND A.EXP_DATE &gt;= #{EXT_DATE_FR}
	   AND A.EXP_DATE &lt;= #{EXT_DATE_TO}
	--   AND A.EX_DATE  &gt;= @FR_EX_DATE
	--   AND A.EX_DATE  &lt;= @TO_EX_DATE
	--   AND D.AC_DATE  &gt;= @FR_EX_DATE
	--   AND D.AC_DATE  &lt;= @TO_EX_DATE
	   AND ISNULL(A.EX_DATE,'') != ''
	   <if test="@foren.Ognl@isNotEmpty(EX_NUM_FR)"> 
	   AND A.EX_NUM &gt;= #{EX_NUM_FR}
	   </if>
	   <if test="@foren.Ognl@isNotEmpty(EX_NUM_TO)"> 
   	   AND A.EX_NUM &lt;= #{EX_NUM_TO}
	   </if>
	   <if test="@foren.Ognl@isNotEmpty(SP_STS)"> 
	   		<if test="SP_STS == &quot;1&quot;">
   	   		AND ISNULL(A.AGREE_YN,'N') = 'N'
	   		</if>
	   		<if test="SP_STS == &quot;2&quot;">
   	   		AND ISNULL(A.AGREE_YN,'N') = 'Y'
	   		</if>
	   </if>
	</select>
	

	<!-- INSERT LOG TABLE -->
	<insert id="agd160ukrServiceImpl.insertLogMaster" parameterType="Map">     
	    INSERT INTO L_AGD160T_M
		SELECT   #{KEY_VALUE}
	       	   , #{OPR_FLAG}
			   , #{S_COMP_CODE}     
			   , #{ACCNT_CODE}	
			   , ISNULL(AC_CODE1    , '')     AS BOOK_CODE1
			   , #{AC_DATA1}	
			   , #{AC_DATA_NAME1}	
			   , ISNULL(AC_CODE2    , '')     AS BOOK_CODE2
			   , #{AC_DATA2}	
			   , #{AC_DATA_NAME2}	
			   , ISNULL(AC_CODE3    , '')     AS BOOK_CODE3
			   , #{AC_DATA3}	
			   , #{AC_DATA_NAME3}	
			   , ISNULL(AC_CODE4    , '')     AS BOOK_CODE4
			   , #{AC_DATA4}	
			   , #{AC_DATA_NAME4}	
			   , ISNULL(AC_CODE5    , '')     AS BOOK_CODE5
			   , #{AC_DATA5}	
			   , #{AC_DATA_NAME5}	
			   , ISNULL(AC_CODE6    , '')     AS BOOK_CODE6
			   , #{AC_DATA6}	
			   , #{AC_DATA_NAME6}	
			   , #{SLIP_DATE}
			   , #{CHARGE_CODE}
		       , #{S_USER_ID}       
		       , GETDATE()   
		       , #{S_USER_ID}       
		       , GETDATE()   
			   , ''
			   , ''
			   , ''
			   , 0
			   , 0
			   , 0      
		  FROM            ABA400T AS A  WITH (NOLOCK)
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.ACCNT     = #{ACCNT_CODE}
	</insert>
	
	<insert id="agd160ukrServiceImpl.insertLogTable" parameterType="Map">     
	    INSERT INTO L_AGD160T_D
	           (
				  KEY_VALUE
				, OPR_FLAG
				, COMP_CODE
				, NOTE_NUM
				, OC_AMT_I
				, AMT_I
				, EXP_DATE
				, CUSTOM_CODE
				, AC_DATE
				<if test="@foren.Ognl@isNotEmpty(SLIP_NUM)">
				, SLIP_NUM
				</if>
				<if test="@foren.Ognl@isNotEmpty(SLIP_SEQ)">
				, SLIP_SEQ
				</if>
				, EX_DATE
				<if test="@foren.Ognl@isNotEmpty(EX_NUM)">
				, EX_NUM
				</if>
				, AGREE_YN
				, INSERT_DB_USER
				, INSERT_DB_TIME
	           )
	     VALUES
	           ( 
				  #{KEY_VALUE}
				, #{OPR_FLAG}
				, #{S_COMP_CODE}
				, #{NOTE_NUM}
				, #{OC_AMT_I}
				, #{AMT_I}
				, #{EXP_DATE}
				, #{CUSTOM_CODE}
				, #{AC_DATE}
				<if test="@foren.Ognl@isNotEmpty(SLIP_NUM)">
                , #{SLIP_NUM}
                </if>
                <if test="@foren.Ognl@isNotEmpty(SLIP_SEQ)">
                , #{SLIP_SEQ}
                </if>
				, #{EX_DATE}
				<if test="@foren.Ognl@isNotEmpty(EX_NUM)">
                , #{EX_NUM}
                </if>
				, #{AGREE_YN}
				, #{S_USER_ID}
				, GETDATE()
	           ) 
	</insert>

	<update id="agd160ukrServiceImpl.runAutoSlip" parameterType="Map" statementType="CALLABLE">
		{call USP_ACCNT_AutoSlip57 (
			#{COMP_CODE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{KEY_VALUE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{LANG_TYPE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{USER_ID		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ERROR_DESC	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update> 
	
	<update id="agd160ukrServiceImpl.cancelSlip" parameterType="Map" statementType="CALLABLE">
		{call USP_ACCNT_AutoSlip57Cancel (
			#{COMP_CODE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{KEY_VALUE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{LANG_TYPE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{USER_ID		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ERROR_DESC	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update> 
</mapper>