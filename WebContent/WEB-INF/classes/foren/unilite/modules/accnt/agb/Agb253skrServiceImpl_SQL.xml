<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="agb253skrServiceImpl">
	<select id="agb253skrServiceImpl.selectRefCode" parameterType="Map" resultType="rMap">
		/* agb253skr.Cagb253skr[fnAgb250QStd] Query02 */
		BEGIN
		    DECLARE @RefCode1   NVARCHAR(01)

		    SELECT  @RefCode1 = REF_CODE1
		      FROM  BSA100T WITH (NOLOCK)
		     WHERE  COMP_CODE = #{S_COMP_CODE}
		       AND  MAIN_CODE = 'A155'
		       AND  SUB_CODE  = '1'

		    SET     @RefCode1 = ISNULL(@RefCode1, '')

		    SELECT  @RefCode1 AS REF_CODE1
		END
	</select>

	<select id="agb253skrServiceImpl.selectList1" parameterType="Map" resultType="rMap">
		--agb253skr.Cagb253skr[fnAgb250QSt1] Query01
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		------- 1. 변수선언
		    DECLARE @COMP_CODE  NVARCHAR(08)
		          , @AC_DATE    NVARCHAR(08)

		          , @BasisDate  NVARCHAR(08)
		          , @TermDate   NVARCHAR(08)

		-------- 2. 변수값 설정
		    SET     @COMP_CODE  = #{S_COMP_CODE}
		    SET     @AC_DATE    = #{AC_DATE}

		-------- 3-1. 기초잔액 입력일자 조회 및 설정
		    SELECT  @BasisDate  = AC_DATE
		      FROM  AGJ800T WITH (NOLOCK)
		     WHERE  COMP_CODE   = @COMP_CODE
		       AND  PROC_YN     = 'Y'
		       AND  INPUT_DIVI  = '1'

		    SET     @BasisDate  = ISNULL(@BasisDate, '')

		-------- 3-2. 거래합계 입력일자 조회 및 설정
		    SELECT  @TermDate  = AC_DATE
		      FROM  AGJ800T WITH (NOLOCK)
		     WHERE  COMP_CODE   = @COMP_CODE
		       AND  PROC_YN     = 'Y'
		       AND  INPUT_DIVI  = '2'

		    SET     @TermDate  = ISNULL(@TermDate, '')

		-------- 4. 임시테이블 존재여부검사 및 삭제
		    IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects  WITH (NOLOCK) WHERE ID=OBJECT_ID('tempdb..#agb253skr1'))
		        DROP TABLE #agb253skr1
		
		-------- 5. 데이터조회 및 임시테이블 생성
		    SELECT T1.AGENT_TYPE
		         , T1.AGENT_NAME
		         , T1.CUSTOM_CODE
		         , T1.CUSTOM_NAME
		         <![CDATA[
		         --	1년 이내
		         , SUM(CASE WHEN                     T1.AC_TERM <=  1 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_1
		         , SUM(CASE WHEN T1.AC_TERM >  1 AND T1.AC_TERM <=  2 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_2
		         , SUM(CASE WHEN T1.AC_TERM >  2 AND T1.AC_TERM <=  3 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_3
		         , SUM(CASE WHEN T1.AC_TERM >  3 AND T1.AC_TERM <=  4 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_4
		         , SUM(CASE WHEN T1.AC_TERM >  4 AND T1.AC_TERM <=  5 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_5
		         , SUM(CASE WHEN T1.AC_TERM >  5 AND T1.AC_TERM <=  6 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_6
		         , SUM(CASE WHEN T1.AC_TERM >  6 AND T1.AC_TERM <=  7 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_7
		         , SUM(CASE WHEN T1.AC_TERM >  7 AND T1.AC_TERM <=  8 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_8
		         , SUM(CASE WHEN T1.AC_TERM >  8 AND T1.AC_TERM <=  9 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_9
		         , SUM(CASE WHEN T1.AC_TERM >  9 AND T1.AC_TERM <= 10 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_10
		         , SUM(CASE WHEN T1.AC_TERM > 10 AND T1.AC_TERM <= 11 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_11
		         , SUM(CASE WHEN T1.AC_TERM > 11 AND T1.AC_TERM <= 12 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_12
		         --, SUM(CASE WHEN                   T1.AC_TERM <= 12 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_13
		         -- 1년 ~ 2년
		         , SUM(CASE WHEN T1.AC_TERM > 12 AND T1.AC_TERM <= 13 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_14
		         , SUM(CASE WHEN T1.AC_TERM > 13 AND T1.AC_TERM <= 14 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_15
		         , SUM(CASE WHEN T1.AC_TERM > 14 AND T1.AC_TERM <= 15 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_16
		         , SUM(CASE WHEN T1.AC_TERM > 15 AND T1.AC_TERM <= 16 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_17
		         , SUM(CASE WHEN T1.AC_TERM > 16 AND T1.AC_TERM <= 17 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_18
		         , SUM(CASE WHEN T1.AC_TERM > 17 AND T1.AC_TERM <= 18 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_19
		         , SUM(CASE WHEN T1.AC_TERM > 18 AND T1.AC_TERM <= 19 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_20
		         , SUM(CASE WHEN T1.AC_TERM > 19 AND T1.AC_TERM <= 20 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_21
		         , SUM(CASE WHEN T1.AC_TERM > 20 AND T1.AC_TERM <= 21 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_22
		         , SUM(CASE WHEN T1.AC_TERM > 21 AND T1.AC_TERM <= 22 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_23
		         , SUM(CASE WHEN T1.AC_TERM > 22 AND T1.AC_TERM <= 23 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_24
		         , SUM(CASE WHEN T1.AC_TERM > 23 AND T1.AC_TERM <= 24 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_25
		         --, SUM(CASE WHEN T1.AC_TERM > 12 AND T1.AC_TERM <= 24 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_26
		         -- 2년 ~ 3년
		         , SUM(CASE WHEN T1.AC_TERM > 24 AND T1.AC_TERM <= 25 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_27
		         , SUM(CASE WHEN T1.AC_TERM > 25 AND T1.AC_TERM <= 26 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_28
		         , SUM(CASE WHEN T1.AC_TERM > 26 AND T1.AC_TERM <= 27 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_29
		         , SUM(CASE WHEN T1.AC_TERM > 27 AND T1.AC_TERM <= 28 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_30
		         , SUM(CASE WHEN T1.AC_TERM > 28 AND T1.AC_TERM <= 29 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_31
		         , SUM(CASE WHEN T1.AC_TERM > 29 AND T1.AC_TERM <= 30 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_32
		         , SUM(CASE WHEN T1.AC_TERM > 30 AND T1.AC_TERM <= 31 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_33
		         , SUM(CASE WHEN T1.AC_TERM > 31 AND T1.AC_TERM <= 32 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_34
		         , SUM(CASE WHEN T1.AC_TERM > 32 AND T1.AC_TERM <= 33 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_35
		         , SUM(CASE WHEN T1.AC_TERM > 33 AND T1.AC_TERM <= 34 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_36
		         , SUM(CASE WHEN T1.AC_TERM > 34 AND T1.AC_TERM <= 35 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_37
		         , SUM(CASE WHEN T1.AC_TERM > 35 AND T1.AC_TERM <= 36 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_38
		         --, SUM(CASE WHEN T1.AC_TERM > 24 AND T1.AC_TERM <= 36 THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_39
		         --	3년 초과
		         , SUM(CASE WHEN T1.AC_TERM > 36                      THEN T1.DR_AMT_I ELSE 0 END)  AS AMT_40
		         , SUM(T1.DR_AMT_I) - SUM(T1.CR_AMT_I)                                              AS AMT_TOT
		         , SUM(T1.CR_AMT_I)                                                                 AS CR_AMT_I
		         , CONVERT(NVARCHAR(01), '1')                                                       AS GUBUN
		         ]]>
		      INTO #agb253skr1
		      FROM (
		            SELECT 
		                   A.COMP_CODE                                          AS COMP_CODE
		                 , DATEDIFF(MONTH, CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                                        WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                                        WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                                        WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                                        WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                                        WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                                        ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                                  ELSE A.AC_DATE
		                                             END
		                                    END
		                                 , @AC_DATE) + 1                        AS AC_TERM
		                 , CASE WHEN A.BOOK_CODE1 = 'A4' THEN A.BOOK_DATA1
		                        WHEN A.BOOK_CODE2 = 'A4' THEN A.BOOK_DATA2
		                    END                                                 AS CUSTOM_CODE
		                 , ISNULL(C1.CUSTOM_NAME, '' )                          AS CUSTOM_NAME
		                 , ISNULL(C1.AGENT_TYPE , '1')                          AS AGENT_TYPE
		                 , ISNULL(M1.CODE_NAME  , '' )                          AS AGENT_NAME
		                 , SUM(CASE WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 THEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0)
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 THEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) - ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0)
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 THEN 0 
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 THEN ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) * (-1)
		                            ELSE 0
		                        END)                                            AS DR_AMT_I 
		                 , SUM(CASE WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 THEN ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) 
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 THEN 0 
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &gt;= 0 THEN ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) - ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0)
		                            WHEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 AND ISNULL(CASE WHEN A.DR_CR = '2' THEN A.AMT_I ELSE 0 END, 0) &lt;  0 THEN ISNULL(CASE WHEN A.DR_CR = '1' THEN A.AMT_I ELSE 0 END, 0) * (-1)
		                            ELSE 0 
		                        END)                                            AS CR_AMT_I
		              FROM            AGJ210T A  WITH (NOLOCK)
		                   INNER JOIN BCM100T C1 WITH (NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
		                                                      AND C1.CUSTOM_CODE = (CASE WHEN A.BOOK_CODE1 = 'A4' THEN A.BOOK_DATA1
		                                                                                 WHEN A.BOOK_CODE2 = 'A4' THEN A.BOOK_DATA2
		                                                                             END)
		                   INNER JOIN ABA400T C2 WITH (NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                                      AND C2.ACCNT       = A.ACCNT
		                                                      AND C2.SPEC_DIVI  IN ('G1', 'D1')
		                   INNER JOIN BOR120T D  WITH (NOLOCK) ON D.COMP_CODE    = A.COMP_CODE
		                                                      AND D.DIV_CODE     = A.DIV_CODE
		                   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE   = C1.COMP_CODE
		                                                      AND M1.MAIN_CODE   = 'B055'
		                                                      AND M1.SUB_CODE    = C1.AGENT_TYPE
		             WHERE A.COMP_CODE      = @COMP_CODE
		               AND ISNULL(A.MOD_DIVI, '') != 'D'
		               AND CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                        WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                        WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                        WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                        WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                        WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                        ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                  ELSE A.AC_DATE
		                             END
		                        END       &lt;= @AC_DATE
		               AND (
		                    LEN(CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                             WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                             WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                             WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                             WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                             WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                             ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                       ELSE A.AC_DATE
		                                  END
		                             END) &gt;  6
		                 OR CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                         WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                         WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                         WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                         WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                         WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                         ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                   ELSE A.AC_DATE
		                              END
		                         END       = @BasisDate
		                 OR CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                         WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                         WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                         WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                         WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                         WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                         ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                   ELSE A.AC_DATE
		                              END
		                         END       = @TermDate
		               )
		               AND (A.BOOK_CODE1    = 'A4'     OR A.BOOK_CODE2    = 'A4')
		           <if test="@foren.Ognl@isNotEmpty(ACCNT_DIV_CODE)">
		               AND D.DIV_CODE IN
		                 <foreach collection="ACCNT_DIV_CODE" item="item" separator="," close=")" open="(">
		                      #{item}
		                 </foreach>
		           </if>
		           <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE_FR)">
		               AND A.ACCNT         &gt;= #{ACCOUNT_CODE_FR}
		           </if>
		           <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE_TO)">
		               AND A.ACCNT         &lt;= #{ACCOUNT_CODE_TO}
		           </if>
		           <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
		               AND C1.AGENT_TYPE    = #{AGENT_TYPE}
		           </if>
		           <if test="@foren.Ognl@isNotEmpty(CUST_CODE_FR)">
		               AND ((A.BOOK_CODE1   = 'A4'    AND A.BOOK_DATA1   &gt;= #{CUST_CODE_FR}) OR 
		                    (A.BOOK_CODE2   = 'A4'    AND A.BOOK_DATA2   &gt;= #{CUST_CODE_FR}))
		           </if>
		           <if test="@foren.Ognl@isNotEmpty(CUST_CODE_TO)">
		               AND ((A.BOOK_CODE1   = 'A4'    AND A.BOOK_DATA1   &lt;= #{CUST_CODE_TO}) OR
		                    (A.BOOK_CODE2   = 'A4'    AND A.BOOK_DATA2   &lt;= #{CUST_CODE_TO}))
		           </if>
		           <if test="@foren.Ognl@isEmpty(CUST_CODE_FR) and @foren.Ognl@isNotEmpty(CUSTOM_NAME_FR)">
		               AND ISNULL(C1.CUSTOM_NAME, '' ) &gt;= #{CUSTOM_NAME_FR}
		           </if>
		           <if test="@foren.Ognl@isEmpty(CUST_CODE_TO) and @foren.Ognl@isNotEmpty(CUSTOM_NAME_TO)">
		               AND ISNULL(C1.CUSTOM_NAME, '' ) &lt;= #{CUSTOM_NAME_TO}
		           </if>
		            GROUP BY A.COMP_CODE
		                   , CASE WHEN A.AC_CODE1 = 'L4' THEN A.AC_DATA1
		                          WHEN A.AC_CODE2 = 'L4' THEN A.AC_DATA2
		                          WHEN A.AC_CODE3 = 'L4' THEN A.AC_DATA3
		                          WHEN A.AC_CODE4 = 'L4' THEN A.AC_DATA4
		                          WHEN A.AC_CODE5 = 'L4' THEN A.AC_DATA5
		                          WHEN A.AC_CODE6 = 'L4' THEN A.AC_DATA6
		                          ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                  ELSE A.AC_DATE
		                               END
		                     END
		                   , A.BOOK_CODE1  , A.BOOK_CODE2 , A.BOOK_DATA1 , A.BOOK_DATA2
		                   , C1.CUSTOM_NAME, C1.AGENT_TYPE, M1.CODE_NAME
		           ) AS T1
		     GROUP BY T1.AGENT_TYPE, T1.AGENT_NAME, T1.CUSTOM_CODE, T1.CUSTOM_NAME
		     HAVING SUM(T1.DR_AMT_I) - SUM(T1.CR_AMT_I) != 0

		-------- 6.1 오래된 채권부터 금액 차감
		    <![CDATA[
		    UPDATE #agb253skr1
		       SET AMT_40	= (CASE WHEN AMT_40 >= CR_AMT_I THEN AMT_40 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_40 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_40	END)
		     WHERE AMT_40	!= 0
		       AND CR_AMT_I	!= 0
		       
		    --UPDATE #agb253skr1
		    --   SET AMT_39	= (CASE WHEN AMT_39 >= CR_AMT_I THEN AMT_39 - CR_AMT_I	ELSE 0					END)
		    --     , CR_AMT_I	= (CASE WHEN AMT_39 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_39	END)
		    -- WHERE AMT_39	!= 0
		       --AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_38	= (CASE WHEN AMT_38 >= CR_AMT_I THEN AMT_38 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_38 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_38	END)
		     WHERE AMT_38	!= 0
		       AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_37	= (CASE WHEN AMT_37 >= CR_AMT_I THEN AMT_37 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_37 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_37	END)
		     WHERE AMT_37	!= 0
		       AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_36	= (CASE WHEN AMT_36 >= CR_AMT_I THEN AMT_36 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_36 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_36	END)
		     WHERE AMT_36	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_35	= (CASE WHEN AMT_35 >= CR_AMT_I THEN AMT_35 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_35 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_35	END)
		     WHERE AMT_35	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_34	= (CASE WHEN AMT_34 >= CR_AMT_I THEN AMT_34 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_34 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_34	END)
		     WHERE AMT_34	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_33	= (CASE WHEN AMT_33 >= CR_AMT_I THEN AMT_33 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_33 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_33	END)
		     WHERE AMT_33	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_32	= (CASE WHEN AMT_32 >= CR_AMT_I THEN AMT_32 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_32 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_32	END)
		     WHERE AMT_32	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_31	= (CASE WHEN AMT_31 >= CR_AMT_I THEN AMT_31 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_31 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_31	END)
		     WHERE AMT_31	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_30	= (CASE WHEN AMT_30 >= CR_AMT_I THEN AMT_30 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_30 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_30	END)
		     WHERE AMT_30	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_29	= (CASE WHEN AMT_29 >= CR_AMT_I THEN AMT_29 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_29 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_29	END)
		     WHERE AMT_29	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_28	= (CASE WHEN AMT_28 >= CR_AMT_I THEN AMT_28 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_28 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_28	END)
		     WHERE AMT_28	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_27	= (CASE WHEN AMT_27 >= CR_AMT_I THEN AMT_27 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_27 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_27	END)
		     WHERE AMT_27	!= 0
			   AND CR_AMT_I	!= 0
	
		    --UPDATE #agb253skr1
		    --   SET AMT_26	= (CASE WHEN AMT_26 >= CR_AMT_I THEN AMT_26 - CR_AMT_I	ELSE 0					END)
		    --     , CR_AMT_I	= (CASE WHEN AMT_26 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_26	END)
		    -- WHERE AMT_26	!= 0
			   --AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_25	= (CASE WHEN AMT_25 >= CR_AMT_I THEN AMT_25 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_25 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_25	END)
		     WHERE AMT_25	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_24	= (CASE WHEN AMT_24 >= CR_AMT_I THEN AMT_24 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_24 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_24	END)
		     WHERE AMT_24	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_23	= (CASE WHEN AMT_23 >= CR_AMT_I THEN AMT_23 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_23 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_23	END)
		     WHERE AMT_23	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_22	= (CASE WHEN AMT_22 >= CR_AMT_I THEN AMT_22 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_22 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_22	END)
		     WHERE AMT_22	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_21	= (CASE WHEN AMT_21 >= CR_AMT_I THEN AMT_21 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_21 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_21	END)
		     WHERE AMT_21	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_20	= (CASE WHEN AMT_20 >= CR_AMT_I THEN AMT_20 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_20 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_20	END)
		     WHERE AMT_20	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_19	= (CASE WHEN AMT_19 >= CR_AMT_I THEN AMT_19 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_19 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_19	END)
		     WHERE AMT_19	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_18	= (CASE WHEN AMT_18 >= CR_AMT_I THEN AMT_18 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_18 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_18	END)
		     WHERE AMT_18	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_17	= (CASE WHEN AMT_17 >= CR_AMT_I THEN AMT_17 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_17 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_17	END)
		     WHERE AMT_17	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_16	= (CASE WHEN AMT_16 >= CR_AMT_I THEN AMT_16 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_16 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_16	END)
		     WHERE AMT_16	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_15	= (CASE WHEN AMT_15 >= CR_AMT_I THEN AMT_15 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_15 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_15	END)
		     WHERE AMT_15	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_14	= (CASE WHEN AMT_14 >= CR_AMT_I THEN AMT_14 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_14 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_14	END)
		     WHERE AMT_14	!= 0
			   AND CR_AMT_I	!= 0
			   
		    --UPDATE #agb253skr1
		    --   SET AMT_13	= (CASE WHEN AMT_13 >= CR_AMT_I THEN AMT_13 - CR_AMT_I	ELSE 0					END)
		    --     , CR_AMT_I	= (CASE WHEN AMT_13 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_13	END)
		    -- WHERE AMT_13	!= 0
			   --AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_12	= (CASE WHEN AMT_12 >= CR_AMT_I THEN AMT_12 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_12 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_12	END)
		     WHERE AMT_12	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_11	= (CASE WHEN AMT_11 >= CR_AMT_I THEN AMT_11 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_11 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_11	END)
		     WHERE AMT_11	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_10	= (CASE WHEN AMT_10 >= CR_AMT_I THEN AMT_10 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_10 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_10	END)
		     WHERE AMT_10	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_9	= (CASE WHEN AMT_9 >= CR_AMT_I THEN AMT_9 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_9 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_9	END)
		     WHERE AMT_9	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_8	= (CASE WHEN AMT_8 >= CR_AMT_I THEN AMT_8 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_8 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_8	END)
		     WHERE AMT_8	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_7	= (CASE WHEN AMT_7 >= CR_AMT_I THEN AMT_7 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_7 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_7	END)
		     WHERE AMT_7	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_6	= (CASE WHEN AMT_6 >= CR_AMT_I THEN AMT_6 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_6 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_6	END)
		     WHERE AMT_6	!= 0
			   AND CR_AMT_I	!= 0
	
		    UPDATE #agb253skr1
		       SET AMT_5	= (CASE WHEN AMT_5 >= CR_AMT_I THEN AMT_5 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_5 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_5	END)
		     WHERE AMT_5	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_4	= (CASE WHEN AMT_4 >= CR_AMT_I THEN AMT_4 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_4 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_4	END)
		     WHERE AMT_4	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_3	= (CASE WHEN AMT_3 >= CR_AMT_I THEN AMT_3 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_3 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_3	END)
		     WHERE AMT_3	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_2	= (CASE WHEN AMT_2 >= CR_AMT_I THEN AMT_2 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_2 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_2	END)
		     WHERE AMT_2	!= 0
			   AND CR_AMT_I	!= 0
			   
		    UPDATE #agb253skr1
		       SET AMT_1	= (CASE WHEN AMT_1 >= CR_AMT_I THEN AMT_1 - CR_AMT_I	ELSE 0					END)
		         , CR_AMT_I	= (CASE WHEN AMT_1 >= CR_AMT_I THEN 0					ELSE CR_AMT_I - AMT_1	END)
		     WHERE AMT_1	!= 0
			   AND CR_AMT_I	!= 0
			]]>
			
		
		-------- 6.2 금액을 모두 차감하고도 반제할 금액이 남아있는 경우 처리
			<![CDATA[
		    UPDATE #agb253skr1
		       SET AMT_1	= (CASE WHEN AMT_1 < CR_AMT_I THEN AMT_1 - CR_AMT_I ELSE 0 END)
		         , CR_AMT_I	= 0
		     WHERE AMT_1	 = 0
			   AND CR_AMT_I	!= 0
			]]>
		
		-------- 7. 소계생성
	--    INSERT INTO #agb253skr1
	--    SELECT AGENT_TYPE   AS AGENT_TYPE
	--         , ''           AS AGENT_NAME
	--         , ''           AS CUSTOM_CODE
	--         , ''           AS CUSTOM_NAME
	--         , SUM(AMT_1) AS AMT_1
	--         , SUM(AMT_2) AS AMT_2
	--         , SUM(AMT_3) AS AMT_3
	--         , SUM(AMT_4) AS AMT_4
	--         , SUM(AMT_5) AS AMT_5
	--         , SUM(AMT_6) AS AMT_6
	--         , SUM(AMT_7) AS AMT_7
	--         , SUM(AMT_8) AS AMT_8
	--         , SUM(AMT_9) AS AMT_9
	--         , SUM(AMT_10) AS AMT_10
	--         , SUM(AMT_11) AS AMT_11
	--         , SUM(AMT_12) AS AMT_12
	--         , SUM(AMT_13) AS AMT_13
	--         , SUM(AMT_14) AS AMT_14
	--         , SUM(AMT_15) AS AMT_15
	--         , SUM(AMT_TOT) AS AMT_TOT
	--         , 0            AS CR_AMT_I
	--         , '2'          AS GUBUN
	--      FROM #agb253skr1  WITH (NOLOCK)
	--     WHERE GUBUN = '1'
	--     GROUP BY AGENT_TYPE
	--
	---------- 8. 총계생성
	--    INSERT INTO #agb253skr1
	--    SELECT ISNULL(MAX(AGENT_TYPE), '')  AS AGENT_TYPE
	--         , ''           AS AGENT_NAME
	--         , ''           AS CUSTOM_CODE
	--         , ''           AS CUSTOM_NAME
	--         , SUM(AMT_1) AS AMT_1
	--         , SUM(AMT_2) AS AMT_2
	--         , SUM(AMT_3) AS AMT_3
	--         , SUM(AMT_4) AS AMT_4
	--         , SUM(AMT_5) AS AMT_5
	--         , SUM(AMT_6) AS AMT_6
	--         , SUM(AMT_7) AS AMT_7
	--         , SUM(AMT_8) AS AMT_8
	--         , SUM(AMT_9) AS AMT_9
	--         , SUM(AMT_10) AS AMT_10
	--         , SUM(AMT_11) AS AMT_11
	--         , SUM(AMT_12) AS AMT_12
	--         , SUM(AMT_13) AS AMT_13
	--         , SUM(AMT_14) AS AMT_14
	--         , SUM(AMT_15) AS AMT_15
	--         , SUM(AMT_TOT) AS AMT_TOT
	--         , 0            AS CR_AMT_I
	--         , '3'          AS GUBUN
	--      FROM #agb253skr1  WITH (NOLOCK)
	--     WHERE GUBUN = '2'
	--
	--    SET NOCOUNT OFF
	--    SET ARITHABORT OFF
		
		-------- 9. 결과값 리턴
		    SELECT 
		           AGENT_TYPE , AGENT_NAME
		         , CUSTOM_CODE, CUSTOM_NAME
		         , AMT_1
		         , AMT_2
		         , AMT_3
		         , AMT_4
		         , AMT_5
		         , AMT_6
		         , AMT_7
		         , AMT_8
		         , AMT_9
		         , AMT_10
		         , AMT_11
		         , AMT_12
		         , AMT_1	+ AMT_2		+ AMT_3		+ AMT_4
		         + AMT_5	+ AMT_6		+ AMT_7		+ AMT_8
				 + AMT_9	+ AMT_10	+ AMT_11	+ AMT_12	AS AMT_13
		         , AMT_14
		         , AMT_15
		         , AMT_16
		         , AMT_17
		         , AMT_18
		         , AMT_19
		         , AMT_20
		         , AMT_21
		         , AMT_22
		         , AMT_23
		         , AMT_24
		         , AMT_25
				 , AMT_14	+ AMT_15	+ AMT_16	+ AMT_17
				 + AMT_18	+ AMT_19	+ AMT_20	+ AMT_21
				 + AMT_22	+ AMT_23	+ AMT_24	+ AMT_25	AS AMT_26
		         , AMT_27
		         , AMT_28
		         , AMT_29
		         , AMT_30
		         , AMT_31
		         , AMT_32
		         , AMT_33
		         , AMT_34
		         , AMT_35
		         , AMT_36
		         , AMT_37
		         , AMT_38
		         , AMT_27	+ AMT_28	+ AMT_29	+ AMT_30
		         + AMT_31	+ AMT_32	+ AMT_33	+ AMT_34
		         + AMT_35	+ AMT_36	+ AMT_37	+ AMT_38	AS AMT_39
		         , AMT_40
		         , AMT_TOT
		         , GUBUN
		      FROM #agb253skr1  WITH (NOLOCK)
		     ORDER BY AGENT_TYPE, GUBUN, CUSTOM_CODE
		END
		</select>



		<select id="agb253skrServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		--agb253skr.Cagb253skr[fnAgb250QSt2] Query01
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		-------- 1. 변수선언
		    DECLARE @COMP_CODE  NVARCHAR(08)
		          , @AC_DATE    NVARCHAR(08)

		-------- 2. 변수값 설정
		    SET     @COMP_CODE  = #{S_COMP_CODE}
		    SET     @AC_DATE    = #{AC_DATE}

		-------- 3. 임시테이블 존재여부검사 및 삭제
		    IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects   WHERE ID=OBJECT_ID('tempdb..#agb253skr2'))
		        DROP TABLE #agb253skr2

		-------- 4. 데이터조회 및 임시테이블 생성
		    SELECT T1.AGENT_TYPE
		         , T1.AGENT_NAME
		         , T1.CUSTOM_CODE
		         , T1.CUSTOM_NAME
		         <![CDATA[
		         --	1년 이내
		         , SUM(CASE WHEN                     T1.AC_TERM <=  1 THEN T1.AMT_I ELSE 0 END)	AS AMT_1
		         , SUM(CASE WHEN T1.AC_TERM >  1 AND T1.AC_TERM <=  2 THEN T1.AMT_I ELSE 0 END)	AS AMT_2
		         , SUM(CASE WHEN T1.AC_TERM >  2 AND T1.AC_TERM <=  3 THEN T1.AMT_I ELSE 0 END)	AS AMT_3
		         , SUM(CASE WHEN T1.AC_TERM >  3 AND T1.AC_TERM <=  4 THEN T1.AMT_I ELSE 0 END)	AS AMT_4
		         , SUM(CASE WHEN T1.AC_TERM >  4 AND T1.AC_TERM <=  5 THEN T1.AMT_I ELSE 0 END)	AS AMT_5
		         , SUM(CASE WHEN T1.AC_TERM >  5 AND T1.AC_TERM <=  6 THEN T1.AMT_I ELSE 0 END)	AS AMT_6
		         , SUM(CASE WHEN T1.AC_TERM >  6 AND T1.AC_TERM <=  7 THEN T1.AMT_I ELSE 0 END)	AS AMT_7
		         , SUM(CASE WHEN T1.AC_TERM >  7 AND T1.AC_TERM <=  8 THEN T1.AMT_I ELSE 0 END)	AS AMT_8
		         , SUM(CASE WHEN T1.AC_TERM >  8 AND T1.AC_TERM <=  9 THEN T1.AMT_I ELSE 0 END)	AS AMT_9
		         , SUM(CASE WHEN T1.AC_TERM >  9 AND T1.AC_TERM <= 10 THEN T1.AMT_I ELSE 0 END)	AS AMT_10
		         , SUM(CASE WHEN T1.AC_TERM > 10 AND T1.AC_TERM <= 11 THEN T1.AMT_I ELSE 0 END)	AS AMT_11
		         , SUM(CASE WHEN T1.AC_TERM > 11 AND T1.AC_TERM <= 12 THEN T1.AMT_I ELSE 0 END)	AS AMT_12
		         --, SUM(CASE WHEN                   T1.AC_TERM <= 12 THEN T1.AMT_I ELSE 0 END)	AS AMT_13
		         --	1년 ~ 2년
		         , SUM(CASE WHEN T1.AC_TERM > 12 AND T1.AC_TERM <= 13 THEN T1.AMT_I ELSE 0 END)	AS AMT_14
		         , SUM(CASE WHEN T1.AC_TERM > 13 AND T1.AC_TERM <= 14 THEN T1.AMT_I ELSE 0 END)	AS AMT_15
		         , SUM(CASE WHEN T1.AC_TERM > 14 AND T1.AC_TERM <= 15 THEN T1.AMT_I ELSE 0 END)	AS AMT_16
		         , SUM(CASE WHEN T1.AC_TERM > 15 AND T1.AC_TERM <= 16 THEN T1.AMT_I ELSE 0 END)	AS AMT_17
		         , SUM(CASE WHEN T1.AC_TERM > 16 AND T1.AC_TERM <= 17 THEN T1.AMT_I ELSE 0 END)	AS AMT_18
		         , SUM(CASE WHEN T1.AC_TERM > 17 AND T1.AC_TERM <= 18 THEN T1.AMT_I ELSE 0 END)	AS AMT_19
		         , SUM(CASE WHEN T1.AC_TERM > 18 AND T1.AC_TERM <= 19 THEN T1.AMT_I ELSE 0 END)	AS AMT_20
		         , SUM(CASE WHEN T1.AC_TERM > 19 AND T1.AC_TERM <= 20 THEN T1.AMT_I ELSE 0 END)	AS AMT_21
		         , SUM(CASE WHEN T1.AC_TERM > 20 AND T1.AC_TERM <= 21 THEN T1.AMT_I ELSE 0 END)	AS AMT_22
		         , SUM(CASE WHEN T1.AC_TERM > 21 AND T1.AC_TERM <= 22 THEN T1.AMT_I ELSE 0 END)	AS AMT_23
		         , SUM(CASE WHEN T1.AC_TERM > 22 AND T1.AC_TERM <= 23 THEN T1.AMT_I ELSE 0 END)	AS AMT_24
		         , SUM(CASE WHEN T1.AC_TERM > 23 AND T1.AC_TERM <= 24 THEN T1.AMT_I ELSE 0 END)	AS AMT_25
		         --, SUM(CASE WHEN T1.AC_TERM > 12 AND T1.AC_TERM <= 24 THEN T1.AMT_I ELSE 0 END)	AS AMT_26
		         --	2년 ~ 3년
		         , SUM(CASE WHEN T1.AC_TERM > 24 AND T1.AC_TERM <= 25 THEN T1.AMT_I ELSE 0 END)	AS AMT_27
		         , SUM(CASE WHEN T1.AC_TERM > 25 AND T1.AC_TERM <= 26 THEN T1.AMT_I ELSE 0 END)	AS AMT_28
		         , SUM(CASE WHEN T1.AC_TERM > 26 AND T1.AC_TERM <= 27 THEN T1.AMT_I ELSE 0 END)	AS AMT_29
		         , SUM(CASE WHEN T1.AC_TERM > 27 AND T1.AC_TERM <= 28 THEN T1.AMT_I ELSE 0 END)	AS AMT_30
		         , SUM(CASE WHEN T1.AC_TERM > 28 AND T1.AC_TERM <= 29 THEN T1.AMT_I ELSE 0 END)	AS AMT_31
		         , SUM(CASE WHEN T1.AC_TERM > 29 AND T1.AC_TERM <= 30 THEN T1.AMT_I ELSE 0 END)	AS AMT_32
		         , SUM(CASE WHEN T1.AC_TERM > 30 AND T1.AC_TERM <= 31 THEN T1.AMT_I ELSE 0 END)	AS AMT_33
		         , SUM(CASE WHEN T1.AC_TERM > 31 AND T1.AC_TERM <= 32 THEN T1.AMT_I ELSE 0 END)	AS AMT_34
		         , SUM(CASE WHEN T1.AC_TERM > 32 AND T1.AC_TERM <= 33 THEN T1.AMT_I ELSE 0 END)	AS AMT_35
		         , SUM(CASE WHEN T1.AC_TERM > 33 AND T1.AC_TERM <= 34 THEN T1.AMT_I ELSE 0 END)	AS AMT_36
		         , SUM(CASE WHEN T1.AC_TERM > 34 AND T1.AC_TERM <= 35 THEN T1.AMT_I ELSE 0 END)	AS AMT_37
		         , SUM(CASE WHEN T1.AC_TERM > 35 AND T1.AC_TERM <= 36 THEN T1.AMT_I ELSE 0 END)	AS AMT_38
		         --, SUM(CASE WHEN T1.AC_TERM > 24 AND T1.AC_TERM <= 36 THEN T1.AMT_I ELSE 0 END)	AS AMT_39
		         --	3년 초과
		         , SUM(CASE WHEN T1.AC_TERM > 36                      THEN T1.AMT_I ELSE 0 END) AS AMT_40
		         , SUM(T1.AMT_I)                                                                AS AMT_TOT
		         , CONVERT(NVARCHAR(01), '1')                                                   AS GUBUN
		         ]]>
		      INTO #agb253skr2
		      FROM (
		            SELECT 
		                   A.COMP_CODE                                              AS COMP_CODE
		                 , DATEDIFF(MONTH, CASE WHEN B2.AC_CODE1 = 'L4' THEN B2.AC_DATA1
		                                        WHEN B2.AC_CODE2 = 'L4' THEN B2.AC_DATA2
		                                        WHEN B2.AC_CODE3 = 'L4' THEN B2.AC_DATA3
		                                        WHEN B2.AC_CODE4 = 'L4' THEN B2.AC_DATA4
		                                        WHEN B2.AC_CODE5 = 'L4' THEN B2.AC_DATA5
		                                        WHEN B2.AC_CODE6 = 'L4' THEN B2.AC_DATA6
		                                        ELSE CASE WHEN LEN(A.ORG_AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.ORG_AC_DATE + '01'), 112)
		                                                  ELSE A.ORG_AC_DATE
		                                             END
		                                    END
		                                 , @AC_DATE) + 1                        AS AC_TERM
		                 , CASE WHEN A1.BOOK_CODE1 = 'A4' THEN A1.BOOK_DATA1
		                        WHEN A1.BOOK_CODE2 = 'A4' THEN A1.BOOK_DATA2
		                    END                                                     AS CUSTOM_CODE
		                 , ISNULL(C1.CUSTOM_NAME, '' )                              AS CUSTOM_NAME
		                 , ISNULL(C1.AGENT_TYPE , '1')                              AS AGENT_TYPE
		                 , ISNULL(M1.CODE_NAME  , '' )                              AS AGENT_NAME
		                 , MAX(ISNULL(A.ORG_AMT_I, 0)) - SUM(ISNULL(B.J_AMT_I, 0))  AS AMT_I
		              FROM            AGB300T A  WITH (NOLOCK)
		                   LEFT  JOIN AGB310T B  WITH (NOLOCK) ON B.COMP_CODE     = A.COMP_CODE
		                                                      AND B.ACCNT         = A.ACCNT
		                                                      AND B.ORG_AC_DATE   = A.ORG_AC_DATE
		                                                      AND B.ORG_SLIP_NUM  = A.ORG_SLIP_NUM
		                                                      AND B.ORG_SLIP_SEQ  = A.ORG_SLIP_SEQ
		                   LEFT  JOIN AGJ210T B2 WITH (NOLOCK) ON B2.COMP_CODE   = A.COMP_CODE
		                                                      AND B2.AC_DATE     = A.ORG_AC_DATE
		                                                      AND B2.SLIP_NUM    = A.ORG_SLIP_NUM
		                                                      AND B2.SLIP_SEQ    = A.ORG_SLIP_SEQ
		                                                      AND ISNULL(B2.MOD_DIVI, '') != 'D'
		                   INNER JOIN AGB200T A1 WITH (NOLOCK) ON A1.COMP_CODE    = A.COMP_CODE
		                                                      AND A1.DIV_CODE     = A.DIV_CODE
		                                                      AND A1.DEPT_CODE    = A.DEPT_CODE
		                                                      AND A1.ACCNT        = A.ACCNT
		                                                      AND A1.AC_DATE      = A.ORG_AC_DATE
		                                                      AND A1.INPUT_PATH   = A.INPUT_PATH
		                                                      AND ((A1.BOOK_CODE1 = A.PEND_CODE AND A1.BOOK_DATA1 = A.PEND_DATA_CODE) OR
		                                                           (A1.BOOK_CODE2 = A.PEND_CODE AND A1.BOOK_DATA2 = A.PEND_DATA_CODE))
		                   INNER JOIN BCM100T C1 WITH (NOLOCK) ON C1.COMP_CODE    = A1.COMP_CODE
		                                                      AND C1.CUSTOM_CODE  = (CASE WHEN A1.BOOK_CODE1 = 'A4' THEN A1.BOOK_DATA1
		                                                                                  WHEN A1.BOOK_CODE2 = 'A4' THEN A1.BOOK_DATA2
		                                                                              END)
		                   INNER JOIN ABA400T C2 WITH (NOLOCK) ON C2.COMP_CODE    = A.COMP_CODE
		                                                      AND C2.ACCNT        = A.ACCNT
		                                                      AND C2.SPEC_DIVI   IN ('G1', 'D1')
		                   INNER JOIN BOR120T D  WITH (NOLOCK) ON D.COMP_CODE     = A.COMP_CODE
		                                                      AND D.DIV_CODE      = A.DIV_CODE
		                   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE    = C1.COMP_CODE
		                                                      AND M1.MAIN_CODE    = 'B055'
		                                                      AND M1.SUB_CODE     = C1.AGENT_TYPE
		             WHERE A.COMP_CODE       = @COMP_CODE
		               AND CASE WHEN B2.AC_CODE1 = 'L4' THEN B2.AC_DATA1
		                            WHEN B2.AC_CODE2 = 'L4' THEN B2.AC_DATA2
		                            WHEN B2.AC_CODE3 = 'L4' THEN B2.AC_DATA3
		                            WHEN B2.AC_CODE4 = 'L4' THEN B2.AC_DATA4
		                            WHEN B2.AC_CODE5 = 'L4' THEN B2.AC_DATA5
		                            WHEN B2.AC_CODE6 = 'L4' THEN B2.AC_DATA6
		                            ELSE CASE WHEN LEN(A.ORG_AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.ORG_AC_DATE + '01'), 112)
		                                      ELSE A.AC_DATE
		                                 END
		                        END    &lt;= @AC_DATE
		               AND (A1.BOOK_CODE1    = 'A4'     OR A1.BOOK_CODE2    = 'A4')
		               <if test="@foren.Ognl@isNotEmpty(ACCNT_DIV_CODE)">
					   AND D.DIV_CODE IN
					   		<foreach collection="ACCNT_DIV_CODE" item="item" separator="," close=")" open="(">
						   	#{item}
							</foreach>
					   </if>
					   <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE_FR)">
		               AND A.ACCNT         &gt;= #{ACCOUNT_CODE_FR}
					   </if>
					   <if test="@foren.Ognl@isNotEmpty(ACCOUNT_CODE_TO)">
		               AND A.ACCNT         &lt;= #{ACCOUNT_CODE_TO}
					   </if>
					   <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
		               AND C1.AGENT_TYPE    = #{AGENT_TYPE}
					   </if>
					   <if test="@foren.Ognl@isNotEmpty(CUST_CODE_FR)">
		               AND ((A1.BOOK_CODE1   = 'A4'    AND A1.BOOK_DATA1   &gt;= #{CUST_CODE_FR}) OR
		                    (A1.BOOK_CODE2   = 'A4'    AND A1.BOOK_DATA2   &gt;= #{CUST_CODE_FR}))
					   </if>
					   <if test="@foren.Ognl@isNotEmpty(CUST_CODE_TO)">
		               AND ((A1.BOOK_CODE1   = 'A4'    AND A1.BOOK_DATA1   &lt;= #{CUST_CODE_TO}) OR
		                    (A1.BOOK_CODE2   = 'A4'    AND A1.BOOK_DATA2   &lt;= #{CUST_CODE_TO}))
					   </if>
	                	<if test="@foren.Ognl@isEmpty(CUST_CODE_FR) and @foren.Ognl@isNotEmpty(CUSTOM_NAME_FR)">
							AND ISNULL(C1.CUSTOM_NAME, '' ) &gt;= #{CUSTOM_NAME_FR}
						</if>
	                	<if test="@foren.Ognl@isEmpty(CUST_CODE_TO) and @foren.Ognl@isNotEmpty(CUSTOM_NAME_TO)">
							AND ISNULL(C1.CUSTOM_NAME, '' ) &lt;= #{CUSTOM_NAME_TO}
						</if>
		             GROUP BY A.COMP_CODE
		                    , CASE WHEN B2.AC_CODE1 = 'L4' THEN B2.AC_DATA1
		                           WHEN B2.AC_CODE2 = 'L4' THEN B2.AC_DATA2
		                           WHEN B2.AC_CODE3 = 'L4' THEN B2.AC_DATA3
		                           WHEN B2.AC_CODE4 = 'L4' THEN B2.AC_DATA4
		                           WHEN B2.AC_CODE5 = 'L4' THEN B2.AC_DATA5
		                           WHEN B2.AC_CODE6 = 'L4' THEN B2.AC_DATA6
		                           ELSE CASE WHEN LEN(A.AC_DATE) = 6 THEN CONVERT(NVARCHAR(08), DATEADD(DAY, -1, A.AC_DATE + '01'), 112)
		                                     ELSE A.AC_DATE
		                                END
		                      END
		                    , A.SLIP_NUM, A.SLIP_SEQ
		                    , A1.BOOK_CODE1 , A1.BOOK_CODE2, A1.BOOK_DATA1 , A1.BOOK_DATA2
		                    , C1.CUSTOM_NAME, C1.AGENT_TYPE, M1.CODE_NAME
		           ) AS T1
		     GROUP BY T1.AGENT_TYPE, T1.AGENT_NAME, T1.CUSTOM_CODE, T1.CUSTOM_NAME
		     HAVING SUM(T1.AMT_I) != 0
		
		-------- 5. 소계생성
	--	    INSERT INTO #agb253skr2
	--	    SELECT AGENT_TYPE   AS AGENT_TYPE
	--	         , ''           AS AGENT_NAME
	--	         , ''           AS CUSTOM_CODE
	--	         , ''           AS CUSTOM_NAME
	--	         , SUM(AMT_1) AS AMT_1
	--	         , SUM(AMT_2) AS AMT_2
	--	         , SUM(AMT_3) AS AMT_3
	--	         , SUM(AMT_4) AS AMT_4
	--	         , SUM(AMT_5) AS AMT_5
	--	         , SUM(AMT_6) AS AMT_6
	--	         , SUM(AMT_7) AS AMT_7
	--	         , SUM(AMT_8) AS AMT_8
	--	         , SUM(AMT_9) AS AMT_9
	--	         , SUM(AMT_10) AS AMT_10
	--	         , SUM(AMT_11) AS AMT_11
	--	         , SUM(AMT_12) AS AMT_12
	--	         , SUM(AMT_13) AS AMT_13
	--	         , SUM(AMT_14) AS AMT_14
	--	         , SUM(AMT_15) AS AMT_15
	--	         , SUM(AMT_TOT) AS AMT_TOT
	--	         , '2'          AS GUBUN
	--	      FROM #agb253skr2  WITH (NOLOCK)
	--	     WHERE GUBUN = '1'
	--	     GROUP BY AGENT_TYPE
	--	
	--	-------- 6. 총계생성
	--	    INSERT INTO #agb253skr2
	--	    SELECT ISNULL(MAX(AGENT_TYPE), '')  AS AGENT_TYPE
	--	         , ''           AS AGENT_NAME
	--	         , ''           AS CUSTOM_CODE
	--	         , ''           AS CUSTOM_NAME
	--	         , SUM(AMT_1) AS AMT_1
	--	         , SUM(AMT_2) AS AMT_2
	--	         , SUM(AMT_3) AS AMT_3
	--	         , SUM(AMT_4) AS AMT_4
	--	         , SUM(AMT_5) AS AMT_5
	--	         , SUM(AMT_6) AS AMT_6
	--	         , SUM(AMT_7) AS AMT_7
	--	         , SUM(AMT_8) AS AMT_8
	--	         , SUM(AMT_9) AS AMT_9
	--	         , SUM(AMT_10) AS AMT_10
	--	         , SUM(AMT_11) AS AMT_11
	--	         , SUM(AMT_12) AS AMT_12
	--	         , SUM(AMT_13) AS AMT_13
	--	         , SUM(AMT_14) AS AMT_14
	--	         , SUM(AMT_15) AS AMT_15
	--	         , SUM(AMT_TOT) AS AMT_TOT
	--	         , '3'          AS GUBUN
	--	      FROM #agb253skr2  WITH (NOLOCK)
	--	     WHERE GUBUN = '2'
		
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		
		-------- 7. 결과값 리턴
		    SELECT 
		           AGENT_TYPE , AGENT_NAME
		         , CUSTOM_CODE, CUSTOM_NAME
		         , AMT_1
		         , AMT_2
		         , AMT_3
		         , AMT_4
		         , AMT_5
		         , AMT_6
		         , AMT_7
		         , AMT_8
		         , AMT_9
		         , AMT_10
		         , AMT_11
		         , AMT_12
		         , AMT_1	+ AMT_2		+ AMT_3		+ AMT_4
		         + AMT_5	+ AMT_6		+ AMT_7		+ AMT_8
				 + AMT_9	+ AMT_10	+ AMT_11	+ AMT_12	AS AMT_13
		         , AMT_14
		         , AMT_15
		         , AMT_16
		         , AMT_17
		         , AMT_18
		         , AMT_19
		         , AMT_20
		         , AMT_21
		         , AMT_22
		         , AMT_23
		         , AMT_24
		         , AMT_25
				 , AMT_14	+ AMT_15	+ AMT_16	+ AMT_17
				 + AMT_18	+ AMT_19	+ AMT_20	+ AMT_21
				 + AMT_22	+ AMT_23	+ AMT_24	+ AMT_25	AS AMT_26
		         , AMT_27
		         , AMT_28
		         , AMT_29
		         , AMT_30
		         , AMT_31
		         , AMT_32
		         , AMT_33
		         , AMT_34
		         , AMT_35
		         , AMT_36
		         , AMT_37
		         , AMT_38
		         , AMT_27	+ AMT_28	+ AMT_29	+ AMT_30
		         + AMT_31	+ AMT_32	+ AMT_33	+ AMT_34
		         + AMT_35	+ AMT_36	+ AMT_37	+ AMT_38	AS AMT_39
		         , AMT_40
		         , AMT_TOT
		         , GUBUN
		      FROM #agb253skr2  WITH (NOLOCK)
		     ORDER BY AGENT_TYPE, GUBUN, CUSTOM_CODE
		END
	</select>
</mapper>