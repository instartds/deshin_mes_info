<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="afd520skrService">
	
	<select id="afd520skrService.selectMasterList" parameterType="Map" resultType="rMap">
		--UArpt11KR.Cafd520skr[fnafd520nq] Query2
		DECLARE @acctDiff NUMERIC(10,0)
		SET @acctDiff =  DateDiff("D", CONVERT(DATETIME, #{ST_DATE}, 112), GETDATE()) + 1
		
			SELECT T.ACCNT                                                                                              
			     , T.ACCNT_NAME                                                                                          
			     , T.BANK_CODE                                                                                           
			     , T.BANK_NAME                                                                                           
			     , T.BANK_ACCOUNT                                                                                        
			     , T.SAVE_DESC                                                                                           
			     , T.PUB_DATE                                                                                            
			     , T.EXP_DATE                                                                                            
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			            WHEN 'C' THEN CONVERT(NVARCHAR,CONVERT(NUMERIC(10,0),T.TOT_CNT))  + N'회'
			            ELSE CONVERT(NVARCHAR,T.TOT_DAYS) + N'일'
			       END AS TOT_CNT                                                                                        
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			            WHEN 'C' THEN CONVERT(NVARCHAR,CONVERT(NUMERIC(10,0),T.NOW_CNT))  + N'회'
			            ELSE CONVERT(NVARCHAR,T.NOW_DAYS) + N'일'
			       END AS NOW_CNT                                                                                        
			     , T.DISP_INT_RATE                                                                                       
			     , T.EXP_AMT_I                                                                                           
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			            WHEN 'C' Then Round(Round((T.MONTH_AMT*T.INT_RATE/12) ${ROUND_AMT_POINT}) * (T.TOT_CNT+1) 
			            				* Round((T.TOT_CNT/2) ${ROUND_AMT_POINT}) 
			            				* Round((T.NOW_CNT*(T.NOW_CNT+1)/2) ${ROUND_AMT_POINT}) 
			            				/ Round((T.TOT_CNT*(T.TOT_CNT+1)/2) ${ROUND_AMT_POINT}) ${ROUND_AMT_POINT})         
			
			            ELSE Round(T.EXP_AMT_I * T.INT_RATE * T.TOT_DAYS / @acctDiff ${ROUND_AMT_POINT})
			        END AS TOTRATE_AMT_I                                                                              		                                         
			     , T.EXP_AMT_I + CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                         
			                          WHEN 'C' THEN Round(Round((T.MONTH_AMT*T.INT_RATE/12)${ROUND_AMT_POINT}) * (T.TOT_CNT+1) * Round((T.TOT_CNT/2)${ROUND_AMT_POINT})${ROUND_AMT_POINT})
			                          ELSE Round(T.EXP_AMT_I * T.INT_RATE * T.TOT_DAYS / @acctDiff, 2)
			                      END AS FULLCLOSE_AMT_I                                                                 
			     , T.NOW_AMT_I                                                                                           
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			            WHEN 'C'
			                 THEN Round(Round((T.EXP_AMT_I*T.INT_RATE*T.TOT_DAYS/@acctDiff)${ROUND_AMT_POINT}) * Round((T.NOW_CNT*(T.NOW_CNT+1)/2) ${ROUND_AMT_POINT}) / Round((T.TOT_CNT*(T.TOT_CNT+1)/2) ${ROUND_AMT_POINT}) ${ROUND_AMT_POINT})         
			                 ELSE Round(T.NOW_AMT_I * T.INT_RATE * T.NOW_DAYS / @acctDiff, 2)                 
			        END AS RCV_BENEFIT                                                                                   
			     , T.MONEY_UNIT                                                                                          
			     , T.EXP_FOR_AMT_I                                                                                       
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			             WHEN 'C'
			                  THEN Round(Round((T.MONTH_FOR_AMT*T.INT_RATE/12) ${ROUND_AMT_POINT}) * (T.TOT_CNT+1) * Round((T.TOT_CNT/2) ${ROUND_AMT_POINT})${ROUND_AMT_POINT})
			                  ELSE Round(T.EXP_FOR_AMT_I * T.INT_RATE * T.TOT_DAYS / @acctDiff, 2)
			        END AS TOTRATE_FOR_AMT_I                                                                                 
			--   , Round(T.EXP_FOR_AMT_I * T.INT_RATE * T.TOT_DAYS / @acctDiff, 2) AS TOTRATE_FOR_AMT_I           
			--   , T.EXP_FOR_AMT_I + Round((T.EXP_FOR_AMT_I*T.INT_RATE*T.TOT_DAYS/@acctDiff), 2) AS FULLCLOSE_FOR_AMT_I
			     , T.EXP_FOR_AMT_I + CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                         
			                              WHEN 'C' THEN Round(Round((T.MONTH_FOR_AMT*T.INT_RATE/12), 2) * (T.TOT_CNT+1) * Round((T.TOT_CNT/2), 2), 2)
			                                       ELSE Round(T.EXP_FOR_AMT_I * T.INT_RATE * T.TOT_DAYS / @acctDiff, 2)
			                          END AS FULLCLOSE_FOR_AMT_I                                                                 
			     , T.NOW_FOR_AMT_I                                                                                       
			     , CASE SUBSTRING(T.SPEC_DIVI,1,1)                                                                       
			            WHEN 'C' THEN Round(Round((T.EXP_FOR_AMT_I*T.INT_RATE*T.TOT_DAYS/@acctDiff), 2) * Round((T.NOW_CNT*(T.NOW_CNT+1)/2), 2) / Round((T.TOT_CNT*(T.TOT_CNT+1)/2), 2), 2)       
			                     ELSE Round(T.NOW_FOR_AMT_I * T.INT_RATE * T.NOW_DAYS / @acctDiff, 2)            
			        END AS RCV_BENEFIT_FOR                                                                               
			  FROM (SELECT A.ACCNT                                                                                              
			             , MAX(M1.ACCNT_NAME) AS ACCNT_NAME                                                                      
			             , MAX(M1.SPEC_DIVI) AS SPEC_DIVI                                                                        
			             , A.BANK_CODE                                                                                           
			             , MAX(M2.CUSTOM_NAME) AS BANK_NAME                                                                      
			             , uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT, 'B') AS BANK_ACCOUNT
			             , MAX(B.SAVE_DESC) AS SAVE_DESC                                                                         
			             , UNILITE.fnGetUserDateComp(N'MASTER', MAX(B.PUB_DATE)) AS PUB_DATE                                                    
			             , UNILITE.fnGetUserDateComp(N'MASTER', MAX(B.EXP_DATE)) AS EXP_DATE                                                    
			             , MAX(B.TOT_CNT) AS TOT_CNT                                                                             
			             , CASE SUBSTRING(ISNULL(MAX(M1.SPEC_DIVI),''),1,1)
			                    WHEN 'B' THEN 1
			                    ELSE ROUND(CASE ISNULL(MAX(M4.REF_CODE1),'')                                                                                               
			                                    WHEN 'Y' THEN CASE WHEN ISNULL(SUM(C.DR_AMT_I),0)/ISNULL(MAX(B.MONTH_AMT),1) >= MAX(B.TOT_CNT) 
			                                                       THEN MAX(B.TOT_CNT)         
			                                                       ELSE ISNULL(SUM(C.DR_AMT_I),0)/ISNULL(MAX(B.MONTH_AMT),1)                                               
			                                                   END                                                                                                          
			                                              ELSE CASE WHEN ISNULL(SUM(C.DR_FOR_AMT_I),0)/ISNULL(MAX(B.MONTH_FOR_AMT),1) >= MAX(B.TOT_CNT) 
			                                                        THEN MAX(B.TOT_CNT) 
			                                                        ELSE ISNULL(SUM(C.DR_FOR_AMT_I),0)/ISNULL(MAX(B.MONTH_FOR_AMT),1)                                       
			                                                    END                                                                                                          
			                                END
			, 0)                                                                                   
			                END AS NOW_CNT                                                                                       
			             , DATEDIFF(D, MAX(B.PUB_DATE), MAX(B.EXP_DATE))+1 AS TOT_DAYS                                           
			             , DATEDIFF(D, MAX(B.PUB_DATE), #{AC_DATE})+1 AS NOW_DAYS    
			             <if test="APPLY_RATE != &quot;std_rate&quot;">                      
			             , ISNULL(MAX(B.INT_RATE),0)/100 AS INT_RATE                                                             
			             , ISNULL(MAX(B.INT_RATE),0) AS DISP_INT_RATE  
			             </if>         
			             <if test="APPLY_RATE == &quot;std_rate&quot;">                      
			             , CONVERT(NUMERIC(18,4),#{STD_RATE})/100 AS INT_RATE                                                             
			             , CONVERT(NUMERIC(18,4),#{STD_RATE}) AS DISP_INT_RATE  
			             </if>                                                   
			             , MAX(B.MONEY_UNIT) AS MONEY_UNIT                                                                       
			             , 0 AS FORMAT_IN2                                                                         
			             , 2 AS FORMAT_OUT2                                                                        
			             , ISNULL(MAX(B.EXP_AMT_I),0)     AS EXP_AMT_I                                                               
			             , ISNULL(MAX(B.MONTH_AMT),0)     AS MONTH_AMT                                                               
			             , ISNULL(SUM(C.DR_AMT_I),0)      AS NOW_AMT_I                                                                
			             , ISNULL(MAX(B.EXP_FOR_AMT_I),0) AS EXP_FOR_AMT_I                                                       
			             , ISNULL(MAX(B.MONTH_FOR_AMT),0) AS MONTH_FOR_AMT                                                       
			             , ISNULL(SUM(C.DR_FOR_AMT_I),0)  AS NOW_FOR_AMT_I                                                        
			          FROM AFS100T A  WITH (NOLOCK)
			                      INNER JOIN AFN400T B WITH (NOLOCK)
			                              ON B.COMP_CODE    = #{S_COMP_CODE}
			                             AND B.SAVE_CODE    = A.SAVE_CODE                                      
			                 LEFT OUTER JOIN AGB200T C  WITH (NOLOCK)
			                              ON C.COMP_CODE    = #{S_COMP_CODE}
			                             AND C.AC_DATE     &gt;= #{ST_DATE}                
			                             AND C.AC_DATE     &lt;= #{AC_DATE}              
			                             AND C.ACCNT        = A.ACCNT                                           
			                             AND ((C.BOOK_CODE1 = 'O1' AND C.BOOK_DATA1=B.SAVE_CODE)           
			                              OR  (C.BOOK_CODE2 = 'O1' AND C.BOOK_DATA2=B.SAVE_CODE))          
			                      INNER JOIN ABA400T M1  WITH (NOLOCK)
			                              ON M1.COMP_CODE   = #{S_COMP_CODE}
			                             AND M1.ACCNT       = A.ACCNT                                            
			                             AND M1.SPEC_DIVI IN ('B3','B4','C')                             
			                      INNER JOIN BCM100T M2  WITH (NOLOCK)
			                              ON M2.COMP_CODE   = #{S_COMP_CODE}
			                             AND M2.CUSTOM_CODE = A.BANK_CODE                                  
			                      INNER JOIN BOR120T M3  WITH (NOLOCK)
			                              ON M3.COMP_CODE   = #{S_COMP_CODE}
			                             AND M3.DIV_CODE    = A.DIV_CODE                                      
			                      INNER JOIN BSA100T M4 WITH (NOLOCK)
			                              ON M4.COMP_CODE   = #{S_COMP_CODE}
			                             AND M4.MAIN_CODE   = 'B004'                                         
			                             AND M4.SUB_CODE    = B.MONEY_UNIT                                  
			 WHERE A.COMP_CODE = #{S_COMP_CODE}
			 	<if test="@foren.Ognl@isNotEmpty(AC_DATE)">
			   AND B.PUB_DATE &lt;= #{AC_DATE}                                                         
			   AND (B.CLOSE_DATE &gt;= #{AC_DATE} OR ISNULL(B.CLOSE_DATE,'') = '')    
			 	</if> 
			   <if test="@foren.Ognl@isNotEmpty(ACCNT)">
			   AND A.ACCNT = #{ACCNT}                     
			   </if>
			   <if test="@foren.Ognl@isNotEmpty(BANK_CD)">                     
			   AND A.BANK_CODE = #{BANK_CD}               
			   </if>
			   <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">	                    
			   AND A.DIV_CODE IN 	
			   		<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
						#{item}
					</foreach>									
				</if>                             
	         GROUP BY A.ACCNT, A.BANK_CODE, uniLITE.fnCipherDecrypt(A.BANK_ACCOUNT, 'B'), A.ACCNT 
	       ) T                                                                                                    
			 ORDER BY T.ACCNT_NAME, T.BANK_NAME, T.BANK_ACCOUNT                                                                                                         
	</select>

</mapper>