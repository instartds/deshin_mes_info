<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sea210ukrvServiceImpl">
	<!-- 조회 팝업 쿼리 -->
	<select id="sea210ukrvServiceImpl.searchPopupList" parameterType="Map" resultType="rMap">
		/* sea210ukrvServiceImpl.searchPopupList */
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.ESTI_NUM
			 , A.CUSTOM_CODE
		     , CASE WHEN ISNULL(A.CUSTOM_NAME, '') = '' THEN C1.CUSTOM_NAME
		            ELSE A.CUSTOM_NAME
		       END                                      AS CUSTOM_NAME       --20210818 수정: 
			 , A.ESTI_REQ_DATE
			 , A.SALE_PRSN
			 , A.ESTI_ITEM_CODE
			 , A.ESTI_ITEM_NAME
			 , A.ESTI_QTY
			 , A.ESTI_TYPE
			 , A.PROD_PART
			 , A.RES_PART
			 , A.FILL_UNIT
			 , A.AGREE_YN
			 , A.AGREE_PRSN
			 , A.BOM_SPEC
			 , A.REMARK
			 , A.CASE_SM_REMARK
			 , A.INSERT_DB_USER
			 , A.INSERT_DB_TIME
			 , A.UPDATE_DB_USER
			 , A.UPDATE_DB_TIME
			 , Z1.REF_CODE1
		  FROM		 SEA100T A  WITH(NOLOCK)
		  LEFT  JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
											AND C1.CUSTOM_CODE = A.CUSTOM_CODE
		  LEFT  JOIN BSA100T Z1 WITH(NOLOCK) ON Z1.COMP_CODE   = A.COMP_CODE
											AND Z1.MAIN_CODE   = 'SE06'
											AND Z1.SUB_CODE    = A.PROD_PART
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(FR_ESTI_REQ_DATE)">
		   AND A.ESTI_REQ_DATE &gt;= #{FR_ESTI_REQ_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_ESTI_REQ_DATE)">
		   AND A.ESTI_REQ_DATE &lt;= #{TO_ESTI_REQ_DATE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ESTI_NUM)">
		   AND A.ESTI_NUM       LIKE #{ESTI_NUM} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(SALE_PRSN)">
		   AND A.SALE_PRSN      = #{SALE_PRSN}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE) and @foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		   AND A.CUSTOM_CODE    = #{CUSTOM_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		   AND A.CUSTOM_CODE    LIKE #{CUSTOM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		   AND C1.CUSTOM_NAME   LIKE #{CUSTOM_NAME} + '%'
		</if>
		<if test="AGREE_YN != &quot;A&quot;">
		   AND A.AGREE_YN       = #{AGREE_YN}		--Y/N
		</if>
	</select>

	<!-- 비중체크로직 - 20210907 추가 -->
	<select id="sea210ukrvServiceImpl.checkSpecGravity" parameterType="Map" resultType="int">
		/* sea210ukrvServiceImpl.checkSpecGravity */
		SELECT COUNT(SPEC_GRAVITY) AS COUNT
		  FROM SEA110T WITH(NOLOCK)
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DIV_CODE     = #{DIV_CODE}
		   AND ESTI_NUM     = #{ESTI_NUM}
		   AND SPEC_GRAVITY = 0
	</select>

	<!-- 원재료 조회 쿼리 -->
	<select id="sea210ukrvServiceImpl.selectDetail" parameterType="Map" resultType="rMap">
		/* sea210ukrvServiceImpl.selectDetail */
		IF EXISTS ( SELECT TOP 1 1
					  FROM SEA210T WITH(NOLOCK)
					 WHERE COMP_CODE = #{S_COMP_CODE}
					   AND DIV_CODE  = #{DIV_CODE}
					   AND ESTI_NUM  = #{ESTI_NUM})
			BEGIN
				SELECT 'N'			AS ISNEW_FLAG
		             , A.LAB_NO				-- LAB_NO
		             , A.COMP_CODE			-- 법인
		             , A.DIV_CODE			-- 사업장
		             , A.ESTI_NUM
		             , B.PROD_ITEM_CODE		-- 내용물코드
		             , B.PROD_ITEM_NAME		-- 내용물
		             , B.ITEM_CODE			-- 품목코드
		             , B.ITEM_NAME			-- 품목
		             , B.UNIT_Q				-- 비율
		             , B.INPUT_QTY			-- 투입량
		             , B.PURCH_PRICE		-- 구매단가
		             , B.PURCH_PRICE AS PURCH_PRICE_ORG	-- 구매단가
		             , B.FILL_AMT			-- 충전가(최초)
		             , B.BASE_FILL_AMT		-- 충전가(기본)
		             , B.SPEC_FILL_AMT		-- 충전가(기획)
		             , B.FILL_QTY			-- 내용물 충진량
		             , A.SPEC_GRAVITY		-- 비중
		          FROM 		 SEA110T A  WITH(NOLOCK)
		          LEFT  JOIN SEA210T B  WITH(NOLOCK) ON B.COMP_CODE			= A.COMP_CODE
		                                            AND B.DIV_CODE			= A.DIV_CODE
		                                            AND B.ESTI_NUM			= A.ESTI_NUM
		                                            AND B.PROD_ITEM_NAME	= A.FILL_NAME
		         WHERE A.COMP_CODE = #{S_COMP_CODE}
		           AND A.DIV_CODE  = #{DIV_CODE}
		           AND A.ESTI_NUM  = #{ESTI_NUM}
		         ORDER BY B.PROD_ITEM_NAME, B.ITEM_CODE
		    END
		ELSE
		    BEGIN
		        SELECT 'Y'							AS ISNEW_FLAG
		             , A.LAB_NO											-- LAB_NO
		             , A.COMP_CODE										-- 법인
		             , A.DIV_CODE										-- 사업장
		             , A.ESTI_NUM
		             , A.ITEM_CODE					AS PROD_ITEM_CODE	-- 내용물코드
		             , A.FILL_NAME					AS PROD_ITEM_NAME	-- 내용물
		             , X.MTR_CODE_NO				AS ITEM_CODE		-- 품목코드
		             , X.MTR_NM						AS ITEM_NAME		-- 품목
		             , X.MTR_RATE					AS UNIT_Q			-- 비율
		             , A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY							AS INPUT_QTY	-- 투입량(충진량 * 비율/100 *비중)
		             --20210721 수정: 단가 가져오는 로직 수정 (발주단가 없으면 품목정보 단가에서 단가 가져오는 로직에서 품목정보 단가 없으면 발주단가에서 가져오는 로직으로 변경, CASE문 처리)
		             --, CASE WHEN ISNULL(D.PURCHASE_BASE_P, 0) = 0 THEN ISNULL(C.ORDER_UNIT_P,0)
		             --       ELSE ISNULL(D.PURCHASE_BASE_P, 0)
		             --  END                                              					AS PURCH_PRICE	-- 구매단가

		             , CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
		                    ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
		               END                                              					AS PURCH_PRICE	-- 구매단가
		               
		             , CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0)
		                    ELSE ISNULL(C.ORDER_UNIT_P, 0) 
		               END                                              					AS PURCH_PRICE_ORG	-- 구매단가

		             , (A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																			ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																	    END					AS FILL_AMT		-- 충전가(최초)(투입량 * 단가/1000)
		             , CASE WHEN #{ESTI_TYPE} = 'A'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M1.REF_CODE2 / 100
		                    WHEN #{ESTI_TYPE} = 'B'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M1.REF_CODE3 / 100
		                    WHEN #{ESTI_TYPE} = 'C'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M1.REF_CODE4 / 100
		                    ELSE 0
		                    END						AS BASE_FILL_AMT	-- 충전가(기본) (최초충전가 * 원재료마진율(견적기준(SE01)에 따른 견적가(SE02) ))

		             , CASE WHEN #{ESTI_TYPE} = 'A'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M2.REF_CODE2 / 100
		                    WHEN #{ESTI_TYPE} = 'B'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M2.REF_CODE3 / 100
		                    WHEN #{ESTI_TYPE} = 'C'
		                        THEN ((A.FILL_QTY * X.MTR_RATE/100 * A.SPEC_GRAVITY) * CASE WHEN ISNULL(C.ORDER_UNIT_P, 0) = 0 THEN ISNULL(D.PURCHASE_BASE_P, 0) / D.TRNS_RATE
																							ELSE ISNULL(C.ORDER_UNIT_P, 0) / C.TRNS_RATE
																						END	) * M2.REF_CODE4 / 100
		                    ELSE 0
		                    END						AS SPEC_FILL_AMT	-- 충전가(기획) (최초충전가 * 원재료마진율(견적기준(SE01)에 따른 견적가(SE02) ))

		             , A.FILL_QTY					AS FILL_QTY			-- 내용물 충진량
		             , A.SPEC_GRAVITY									-- 비중
		             , CASE WHEN #{ESTI_TYPE} = 'A' THEN M1.REF_CODE2
		                    WHEN #{ESTI_TYPE} = 'B' THEN M1.REF_CODE3
		                    WHEN #{ESTI_TYPE} = 'C' THEN M1.REF_CODE4
		                    ELSE 0
		               END							AS BASE_MTRL_RATE		-- 기본가 비율
		             , CASE WHEN #{ESTI_TYPE} = 'A' THEN M2.REF_CODE2
		                    WHEN #{ESTI_TYPE} = 'B' THEN M2.REF_CODE3
		                    WHEN #{ESTI_TYPE} = 'C' THEN M2.REF_CODE4
		                    ELSE 0
		               END							AS SPEC_MTRL_RATE		-- 기획가 비율
		                    
		          FROM       SEA110T A  WITH(NOLOCK)
		          LEFT  JOIN SAM110T X  WITH(NOLOCK) ON X.COMP_CODE = A.COMP_CODE      --20210907 수정: INNER -> LEFT
		                                            AND X.LAB_NO    = A.LAB_NO
		                                            AND X.SAMPLE_KEY = A.LAB_SRAL_NO
		                                            
		          LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE, A.ORDER_NUM, A.ITEM_CODE, A.ORDER_UNIT_P, TRNS_RATE
		                        FROM       MPO200T A WITH(NOLOCK)
		                       INNER JOIN (SELECT COMP_CODE, MAX(DIV_CODE) AS DIV_CODE, MAX(ORDER_NUM) AS ORDER_NUM, ITEM_CODE
		                                     FROM MPO200T WITH(NOLOCK)
		                                    WHERE COMP_CODE = #{S_COMP_CODE}
		                                      -- AND DIV_CODE  = '01'
		                                    GROUP BY COMP_CODE, ITEM_CODE) B ON B.COMP_CODE = A.COMP_CODE
		                                                                              -- AND B.DIV_CODE  = A.DIV_CODE
		                                                                              AND B.ITEM_CODE = A.ITEM_CODE
--		                                                                              AND B.ORDER_NUM = A.ORDER_NUM) C ON C.COMP_CODE = A.COMP_CODE
--		                                                                                                              AND C.DIV_CODE  = A.DIV_CODE --@@확인
--		                                                                                                              AND C.ITEM_CODE = A.ITEM_CODE
		                                                                              AND B.ORDER_NUM = A.ORDER_NUM) C ON C.COMP_CODE = X.COMP_CODE
		                                                                                                              AND C.ITEM_CODE = X.MTR_CODE_NO

--		          LEFT  JOIN BPR200T D  WITH(NOLOCK) ON D.COMP_CODE		= A.COMP_CODE -- 품목정보
--		                                            AND D.ITEM_CODE		= A.ITEM_CODE
		          LEFT  JOIN BPR200T D  WITH(NOLOCK) ON D.COMP_CODE		= X.COMP_CODE -- 품목정보
		                                            AND D.ITEM_CODE		= X.MTR_CODE_NO
		                                            AND D.DIV_CODE		= A.DIV_CODE
		                                            
		          LEFT  JOIN BSA100T M1	WITH(NOLOCK) ON M1.COMP_CODE	= A.COMP_CODE
		                                            AND M1.MAIN_CODE	= 'SE02'	--견적기준(기본)
		                                            AND M1.SUB_CODE		= 'B10'		-- 원재료비
		          LEFT  JOIN BSA100T M2	WITH(NOLOCK) ON M2.COMP_CODE	= A.COMP_CODE
		                                            AND M2.MAIN_CODE	= 'SE02'	--견적기준(기획)
		                                            AND M2.SUB_CODE		= 'S10'		-- 원재료비
		         WHERE A.COMP_CODE	= #{S_COMP_CODE}
		           AND A.DIV_CODE	= #{DIV_CODE}
		           AND A.ESTI_NUM	= #{ESTI_NUM}
		        ORDER BY A.FILL_NAME, X.MTR_CODE_NO
		    END
	</select>
	<!-- 부재료 조회 쿼리 -->
	<select id="sea210ukrvServiceImpl.selectDetail2" parameterType="Map" resultType="rMap">
		/* sea210ukrvServiceImpl.selectDetail2 */
		SELECT COMP_CODE		/* 법인코드 */
			 , DIV_CODE			/* 사업장코드 */
			 , ESTI_NUM			/* 견적의뢰번호 */
		
			 , ITEM_CODE		/* 품목코드(원재료) */
			 , ITEM_NAME		/* 품목명(원재료) */
			 , ESTI_UNIT		/* 단위 */
			 , ESTI_QTY			/* 수량 */
			 , ESTI_PRICE		/* 단가 */
			 , ESTI_AMT			/* 금액 */
			 , FREE_PAY_TYPE	/* 유/무상 구분 */
			 , REMARK			/* 비고 */
		  FROM SEA220T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND DIV_CODE		= #{DIV_CODE}
		   AND ESTI_NUM		= #{ESTI_NUM}
	</select>





	<!-- 저장 로직(원재료) -->
	<update id="sea210ukrvServiceImpl.updateDetail" parameterType="Map">
		/* sea210ukrvServiceImpl.updateList */
		MERGE INTO SEA210T								A
		USING ( SELECT #{S_COMP_CODE}		AS COMP_CODE
					 , #{DIV_CODE}			AS DIV_CODE
					 , #{ESTI_NUM}			AS ESTI_NUM
					 , #{PROD_ITEM_NAME}	AS PROD_ITEM_NAME
					 , #{ITEM_CODE}			AS ITEM_CODE
			  )											B	ON B.COMP_CODE		= A.COMP_CODE
														   AND B.DIV_CODE		= A.DIV_CODE
														   AND B.ESTI_NUM		= A.ESTI_NUM
														   AND B.PROD_ITEM_NAME	= A.PROD_ITEM_NAME
														   AND B.ITEM_CODE		= A.ITEM_CODE
		WHEN MATCHED THEN
		UPDATE 
		   SET PURCH_PRICE		= #{PURCH_PRICE}
			 , FILL_AMT			= #{FILL_AMT}
			 , BASE_FILL_AMT	= #{BASE_FILL_AMT}
			 , SPEC_FILL_AMT	= #{SPEC_FILL_AMT}
			 , UPDATE_DB_USER	= #{S_USER_ID}
			 , UPDATE_DB_TIME	= GETDATE()

		WHEN NOT MATCHED THEN
		INSERT ( 
			  COMP_CODE
			, DIV_CODE
			, ESTI_NUM
			, PROD_ITEM_CODE
			, PROD_ITEM_NAME
			, ITEM_CODE
			, ITEM_NAME
			, UNIT_Q
			, INPUT_QTY
			, PURCH_PRICE
			, FILL_AMT
			, BASE_FILL_AMT
			, SPEC_FILL_AMT
			, FILL_QTY
			, BASE_MTRL_RATE
			, SPEC_MTRL_RATE
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME
		) VALUES (
			  #{S_COMP_CODE}
			, #{DIV_CODE}
			, #{ESTI_NUM}
			, #{PROD_ITEM_CODE}
			, #{PROD_ITEM_NAME}
			, #{ITEM_CODE}
			, #{ITEM_NAME}
			, #{UNIT_Q}
			, #{INPUT_QTY}
			, #{PURCH_PRICE}
			, #{FILL_AMT}
			, #{BASE_FILL_AMT}
			, #{SPEC_FILL_AMT}
			, #{FILL_QTY}
			, #{BASE_MTRL_RATE}
			, #{SPEC_MTRL_RATE}
			, #{S_USER_ID}
			, GETDATE()
			, #{S_USER_ID}
			, GETDATE()
		);
	</update>




	<!-- 저장로직(부재료) -->
	<insert id="sea210ukrvServiceImpl.insertDetail2" parameterType="Map" useGeneratedKeys="false">
	/* sea210ukrvServiceImpl.insertDetail2 */
	INSERT INTO SEA220T
		 ( COMP_CODE
		 , DIV_CODE
		 , ESTI_NUM
		 , ITEM_CODE
		 , ITEM_NAME
		 , ESTI_UNIT
		 , ESTI_QTY
		 , ESTI_PRICE
		 , ESTI_AMT
		 , FREE_PAY_TYPE
		 , REMARK
		 , INSERT_DB_USER
		 , INSERT_DB_TIME
		 , UPDATE_DB_USER
		 , UPDATE_DB_TIME
	) VALUES (
		   #{S_COMP_CODE}
		 , #{DIV_CODE}
		 , #{ESTI_NUM}
		 , #{ITEM_CODE}
		 , #{ITEM_NAME}
		 , #{ESTI_UNIT}
		 , #{ESTI_QTY}
		 , #{ESTI_PRICE}
		 , #{ESTI_AMT}
		 , #{FREE_PAY_TYPE}
		 , #{REMARK}
		 , #{S_USER_ID}
		 , GETDATE()
		 , #{S_USER_ID}
		 , GETDATE()
		 )
	</insert>

	<update id="sea210ukrvServiceImpl.updateDetail2" parameterType="Map">
	/* sea210ukrvServiceImpl.updateDetail2 */
	UPDATE SEA220T
	   SET ESTI_UNIT		= #{ESTI_UNIT}
		 , ESTI_QTY			= #{ESTI_QTY}
		 , ESTI_PRICE		= #{ESTI_PRICE}
		 , ESTI_AMT			= #{ESTI_AMT}
		 , FREE_PAY_TYPE	= #{FREE_PAY_TYPE}
		 , REMARK			= #{REMARK}
		 , UPDATE_DB_USER	= #{S_USER_ID}
		 , UPDATE_DB_TIME	= GETDATE()
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND ESTI_NUM			= #{ESTI_NUM}
	   AND ITEM_CODE		= #{ITEM_CODE}
	</update>


	<delete id="sea210ukrvServiceImpl.deleteDetail2" parameterType="Map">
	/* sea210ukrvServiceImpl.deleteDetail2 */
	DELETE FROM SEA220T
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND ESTI_NUM			= #{ESTI_NUM}
	   AND ITEM_CODE		= #{ITEM_CODE}
	</delete>
	
	<select id="sea210ukrvServiceImpl.checkSubData" parameterType="Map" resultType="rMap">
	/* sea210ukrvServiceImpl.checkSubData */
	SELECT ISNULL(COUNT(ITEM_CODE), 0) AS CHECK_ROW
	  FROM SEA220T
	 WHERE COMP_CODE	= #{S_COMP_CODE}
	   AND DIV_CODE		= #{DIV_CODE}
	   AND ESTI_NUM		= #{ESTI_NUM}
	   AND ITEM_CODE	= #{ITEM_CODE}
	</select>
</mapper>