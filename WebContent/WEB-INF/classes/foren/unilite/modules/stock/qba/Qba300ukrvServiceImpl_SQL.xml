<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qba300ukrvServiceImpl">

	<select id="qba300ukrvServiceImpl.getCntQba300t" parameterType="Map" resultType="rMap">
		SELECT	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS USE_YN
		FROM QBA300T WITH (NOLOCK)
		WHERE	COMP_CODE		= #{S_COMP_CODE}
		AND		DIV_CODE		= #{DIV_CODE}
		AND		SPEC			= #{SPEC}
		<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
		AND		REVISION_DATE 	BETWEEN '19990101' AND #{REVISION_DATE}
		</if>
	</select>

	<select id="qba300ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		SELECT	DISTINCT
				A.DIV_CODE
			 ,	B.SPEC
			 ,	CASE WHEN ISNULL(C.COMP_CODE, '') = '' THEN 'N' ELSE 'Y' END AS USE_YN
		FROM BPR200T A WITH (NOLOCK)
		INNER JOIN		BPR100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE AND A.ITEM_CODE = B.ITEM_CODE
		LEFT OUTER JOIN 
		(
			SELECT	DISTINCT
 					COMP_CODE
				 ,	DIV_CODE
				 ,  SPEC
			FROM QBA300T WITH (NOLOCK)
			WHERE	COMP_CODE	= #{S_COMP_CODE}
			AND		DIV_CODE	= #{DIV_CODE}
			<if test="@foren.Ognl@isNotEmpty(SPEC)">
			AND		SPEC		LIKE #{SPEC} + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
			AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
			</if>
		) C 									ON A.COMP_CODE = C.COMP_CODE AND A.DIV_CODE = C.DIV_CODE AND B.SPEC = C.SPEC
		WHERE	A.COMP_CODE		= #{S_COMP_CODE}
		AND		A.DIV_CODE		= #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(SPEC)">  
		AND		B.SPEC			LIKE #{SPEC} + '%'
		</if>
		AND		ISNULL(B.SPEC,'') &lt;&gt; ''
		AND		(
					( 'ALL' = #{CHK_RDO} )
				 OR ( 'Y'	= #{CHK_RDO} AND C.COMP_CODE IS NOT NULL)
				 OR ( 'N'	= #{CHK_RDO} AND C.COMP_CODE IS NULL)
				)
		ORDER BY USE_YN DESC, SPEC 
	</select>

	<select id="qba300ukrvServiceImpl.selectTestList" parameterType="Map" resultType="rMap">
		SELECT	A.DIV_CODE
			 ,	A.SPEC
			 ,	A.TEST_CODE
			 ,	A.TEST_COND
			 ,	A.TEST_METHOD
			 ,	A.EQU_CODE
			 ,	C.EQU_NAME
			 ,	A.REVISION_DATE
			 ,	A.REVISION_DATE AS REVISION_DATE_ORG 
		FROM QBA300T A WITH (NOLOCK)
		--LEFT OUTER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE AND B.MAIN_CODE = 'Q041' AND A.TEST_CODE = B.SUB_CODE
		LEFT OUTER JOIN EQU200T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE AND A.DIV_CODE  = C.DIV_CODE AND A.EQU_CODE = C.EQU_CODE 
		WHERE	A.COMP_CODE		= #{S_COMP_CODE}
		AND		A.DIV_CODE		= #{DIV_CODE}
		AND		A.SPEC			= #{SPEC}
		AND 	A.REVISION_DATE	= (	
									SELECT MAX(REVISION_DATE)
									FROM 	QBA300T
									WHERE 	COMP_CODE	= A.COMP_CODE
									AND		DIV_CODE	= A.DIV_CODE
									AND		SPEC		= A.SPEC
									AND		TEST_CODE	= A.TEST_CODE
									<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
									AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
									</if>
								  )
		
		ORDER BY TEST_CODE
	</select>

	<insert id="qba300ukrvServiceImpl.insertDetail" parameterType="Map">
	DECLARE
		@TEST_NAME			NVARCHAR(100)
	BEGIN
	
		SET @TEST_NAME			= (SELECT CODE_NAME FROM BSA100T WHERE COMP_CODE = #{S_COMP_CODE} AND MAIN_CODE = 'Q041' AND SUB_CODE = #{TEST_CODE});
	
		INSERT INTO QBA300T
		(
			COMP_CODE, 		DIV_CODE, 		SPEC, 			TEST_CODE, 			REVISION_DATE, 		
			TEST_COND, 		TEST_METHOD, 	EQU_CODE,	 	INSERT_DB_USER,		INSERT_DB_TIME,
			TEST_NAME
	
		)
		VALUES
		(
			#{S_COMP_CODE}, #{DIV_CODE}, 		#{SPEC}, 		#{TEST_CODE}, 		#{REVISION_DATE}, 		
			#{TEST_COND}, 	#{TEST_METHOD}, 	#{EQU_CODE}, 	#{S_USER_ID},		GETDATE(),
			@TEST_NAME
		)
	END
	</insert>

	<delete id="qba300ukrvServiceImpl.deleteDetail" parameterType="Map">
		DELETE FROM QBA300T 
		WHERE 	COMP_CODE 		= #{S_COMP_CODE}
		AND		DIV_CODE		= #{DIV_CODE}
		AND		SPEC			= #{SPEC}
		AND		TEST_CODE		= #{TEST_CODE}
		AND		REVISION_DATE	= #{REVISION_DATE}
	</delete>
	
	<update id="qba300ukrvServiceImpl.updateDetail" parameterType="Map">
		UPDATE QBA300T
		SET
			TEST_METHOD		=	#{TEST_METHOD},
			TEST_COND		=	#{TEST_COND},
			EQU_CODE		=	#{EQU_CODE},
			UPDATE_DB_USER	= 	#{S_USER_ID},
			UPDATE_DB_TIME	= 	GETDATE()
		WHERE 	COMP_CODE 		= #{S_COMP_CODE}
		AND		DIV_CODE		= #{DIV_CODE}
		AND		SPEC			= #{SPEC}
		AND		TEST_CODE		= #{TEST_CODE}
		AND		REVISION_DATE	= #{REVISION_DATE}
	</update>
	
	
	<update id="qba300ukrvServiceImpl.insertAnUpdateDetail" parameterType="Map">
	DECLARE
			@COMP_CODE			NVARCHAR(08),
			@DIV_CODE			NVARCHAR(08),
			@SPEC				NVARCHAR(20),
			@TEST_CODE			NVARCHAR(20),
			@TEST_NAME			NVARCHAR(100),
			@TEST_COND			NVARCHAR(100),
			@TEST_METHOD		NVARCHAR(2000),
			@EQU_CODE			NVARCHAR(60),
			@REVISION_DATE		NVARCHAR(08),
			@REVISION_DATE_ORG	NVARCHAR(08),
			@USER_ID			NVARCHAR(100)
		BEGIN
		
			SET	@COMP_CODE			= #{S_COMP_CODE};
			SET	@DIV_CODE			= #{DIV_CODE};
			SET	@SPEC				= #{SPEC};
			SET	@TEST_CODE			= #{TEST_CODE};
			SET @TEST_NAME			= (SELECT CODE_NAME FROM BSA100T WHERE COMP_CODE = #{S_COMP_CODE} AND MAIN_CODE = 'Q041' AND SUB_CODE = #{TEST_CODE});
			SET	@TEST_METHOD		= #{TEST_METHOD};
			SET	@TEST_COND			= #{TEST_COND};
			SET	@EQU_CODE			= #{EQU_CODE};
			SET	@REVISION_DATE		= #{REVISION_DATE};
			SET	@REVISION_DATE_ORG	= #{REVISION_DATE_ORG};
			SET	@USER_ID			= #{S_USER_ID};
		
			IF(ISNULL(@REVISION_DATE_ORG,'') &lt;&gt; '' AND @REVISION_DATE &lt;&gt; @REVISION_DATE_ORG)
			BEGIN
				DELETE FROM QBA300T 
				WHERE 	COMP_CODE 		= #{S_COMP_CODE}
				AND		DIV_CODE		= #{DIV_CODE}
				AND		SPEC			= #{SPEC}
				AND		TEST_CODE		= #{TEST_CODE}
				AND		REVISION_DATE	= #{REVISION_DATE_ORG}
			END 
			
			
			MERGE INTO QBA300T A
			USING
			(
				SELECT 	@COMP_CODE		AS COMP_CODE
						,@DIV_CODE		AS DIV_CODE
						,@SPEC			AS SPEC
						,@TEST_CODE		AS TEST_CODE
						,@TEST_NAME		AS TEST_NAME
						,@TEST_METHOD	AS TEST_METHOD
						,@TEST_COND		AS TEST_COND
						,@EQU_CODE		AS EQU_CODE
						,@REVISION_DATE	AS REVISION_DATE
						,@USER_ID		AS USER_ID
			) B
			ON 
			(
					A.COMP_CODE		= B.COMP_CODE
				AND	A.DIV_CODE		= B.DIV_CODE
				AND	A.SPEC			= B.SPEC
				AND	A.TEST_CODE		= B.TEST_CODE
				AND A.REVISION_DATE = B.REVISION_DATE 
			)
			WHEN NOT MATCHED THEN
			INSERT 
			(
				COMP_CODE, 		DIV_CODE, 		SPEC, 			TEST_CODE, 			REVISION_DATE, 		
				TEST_COND, 		TEST_METHOD, 	EQU_CODE,	 	INSERT_DB_USER,		INSERT_DB_TIME,
				TEST_NAME
		
			)
			VALUES
			(
				B.COMP_CODE, 		B.DIV_CODE, 		B.SPEC, 		B.TEST_CODE, 		B.REVISION_DATE, 		
				B.TEST_COND, 		B.TEST_METHOD, 		B.EQU_CODE, 	B.USER_ID,			GETDATE(),
				B.TEST_NAME
			)
			WHEN MATCHED THEN
			UPDATE 
			SET
				TEST_METHOD		=	B.TEST_METHOD,
				TEST_COND		=	B.TEST_COND,
				EQU_CODE		=	B.EQU_CODE,
				UPDATE_DB_USER	= 	B.USER_ID,
				UPDATE_DB_TIME	= 	GETDATE()
			;
		
		END
		
	
	
	</update>

	
</mapper>