<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qba210ukrvServiceImpl">

	<select id="qba210ukrvServiceImpl.getCntQba210t" parameterType="Map" resultType="rMap">
	SELECT	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS USE_YN
	FROM QBA210T WITH (NOLOCK)
	WHERE	COMP_CODE		= #{S_COMP_CODE}
	AND		DIV_CODE		= #{DIV_CODE}
	AND		ITEM_CODE		= #{ITEM_CODE}
	<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
	AND		REVISION_DATE 	BETWEEN '19990101' AND #{REVISION_DATE}
	</if>
	</select>

	<select id="qba210ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
	SELECT A.DIV_CODE
		 , A.ITEM_CODE
		 , A.ITEM_NAME
		 , C.SPEC
		 , CASE WHEN ISNULL(B.COMP_CODE, '') = ''	THEN 'N' ELSE 'Y' END AS USE_YN
	FROM BPR200T A WITH (NOLOCK) 
	LEFT OUTER JOIN (
						SELECT	DISTINCT
			 					COMP_CODE
							 ,	DIV_CODE
							 ,  ITEM_CODE
						FROM QBA210T WITH (NOLOCK)
						WHERE	COMP_CODE	= #{S_COMP_CODE}
						AND		DIV_CODE	= #{DIV_CODE}
						<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
						AND		ITEM_CODE	= #{ITEM_CODE}
						</if>
						<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
						AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
						</if>
					) B	ON	A.COMP_CODE = B.COMP_CODE 
						AND A.DIV_CODE	= B.DIV_CODE 
						AND A.ITEM_CODE = B.ITEM_CODE
	LEFT OUTER JOIN BPR100T C WITH (NOLOCK) ON	A.COMP_CODE = C.COMP_CODE 
											AND A.ITEM_CODE = C.ITEM_CODE
	WHERE	A.COMP_CODE		= #{S_COMP_CODE}
	AND		A.DIV_CODE		= #{DIV_CODE}
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">  
	AND		A.ITEM_CODE		= #{ITEM_CODE}
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">  
	AND		A.ITEM_ACCOUNT 	= #{ITEM_ACCOUNT}
	</if>
	AND		(
				( 'ALL' = #{CHK_RDO} )
			 OR ( 'Y'	= #{CHK_RDO} AND B.COMP_CODE IS NOT NULL)
			 OR ( 'N'	= #{CHK_RDO} AND B.COMP_CODE IS NULL)
			)
	ORDER BY USE_YN DESC, ITEM_CODE 
	</select>

	<select id="qba210ukrvServiceImpl.selectTestList" parameterType="Map" resultType="rMap">
	SELECT	DISTINCT
			B.DIV_CODE
		 ,	B.ITEM_CODE
		 ,	B.TEST_CODE
		 ,	B.TEST_METH
		 ,	B.TEST_COND
	 	 ,	B.TEST_VALUE
		 ,	B.REVISION_DATE
		 ,	B.TEST_VER
		 ,	CASE WHEN ISNULL(B.COMP_CODE, '') = '' THEN 'N' ELSE 'Y' END AS USE_YN
	FROM	QBA210T B WITH (NOLOCK)
	WHERE 	B.COMP_CODE 	= #{S_COMP_CODE}
	AND		B.DIV_CODE		= #{DIV_CODE}
	AND		B.ITEM_CODE		= #{ITEM_CODE}
	AND 	B.REVISION_DATE	= 	(	
									SELECT MAX(REVISION_DATE)
									FROM 	QBA210T
									WHERE 	COMP_CODE	= B.COMP_CODE
									AND		DIV_CODE	= B.DIV_CODE
									AND		ITEM_CODE	= B.ITEM_CODE
									AND		TEST_CODE	= B.TEST_CODE
									<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
									AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
									</if>
								)
					
	ORDER BY TEST_CODE
	</select>
	<insert id="qba210ukrvServiceImpl.insertDetail" parameterType="Map">
	DECLARE
		@TEST_NAME			NVARCHAR(100)
	BEGIN
		SET @TEST_NAME			= (SELECT CODE_NAME FROM BSA100T WHERE COMP_CODE = #{S_COMP_CODE} AND MAIN_CODE = 'Q040' AND SUB_CODE = #{TEST_CODE});
	
		INSERT INTO QBA210T
		(
			COMP_CODE, 		DIV_CODE, 		ITEM_CODE, 			TEST_CODE, 		TEST_METH, 		
			TEST_COND, 		TEST_VALUE, 	REVISION_DATE, 		TEST_VER, 		INSERT_DB_USER,	
			INSERT_DB_TIME
	
		)
		VALUES
		(
			#{S_COMP_CODE}, 	#{DIV_CODE}, 	#{ITEM_CODE}, 		#{TEST_CODE}, 		#{TEST_METH}, 		
			#{TEST_COND}, 		#{TEST_VALUE}, 	#{REVISION_DATE}, 	#{TEST_VER}, 		#{S_USER_ID},	
			GETDATE()
		)
	END
	</insert>
	
	<update id="qba210ukrvServiceImpl.updateDetail" parameterType="Map">
		UPDATE QBA210T
		SET
			TEST_METH		=	#{TEST_METH},
			TEST_COND		=	#{TEST_COND},
			TEST_VALUE		=	#{TEST_VALUE},
			TEST_VER		=	#{TEST_VER},
			UPDATE_DB_USER	= 	#{S_USER_ID},
			UPDATE_DB_TIME	= 	GETDATE()
		WHERE 	COMP_CODE 		= #{S_COMP_CODE}
		AND		DIV_CODE		= #{DIV_CODE}
		AND		ITEM_CODE		= #{ITEM_CODE}
		AND		TEST_CODE		= #{TEST_CODE}
		AND		REVISION_DATE	= #{REVISION_DATE}
	</update>
	
	<delete id="qba210ukrvServiceImpl.deleteDetail" parameterType="Map">
	DELETE FROM QBA210T 
	WHERE 	COMP_CODE 		= #{S_COMP_CODE}
	AND		DIV_CODE		= #{DIV_CODE}
	AND		ITEM_CODE		= #{ITEM_CODE}
	AND		TEST_CODE		= #{TEST_CODE}
	AND		REVISION_DATE	= #{REVISION_DATE}
	</delete>

	<update id="qba210ukrvServiceImpl.insertAnUpdateDetail" parameterType="Map">
		DECLARE
			@COMP_CODE			NVARCHAR(08),
			@DIV_CODE			NVARCHAR(08),
			@ITEM_CODE			NVARCHAR(20),
			@TEST_CODE			NVARCHAR(20),
			@TEST_METH			NVARCHAR(2000),
			@TEST_COND			NVARCHAR(60),
			@TEST_VALUE			NVARCHAR(30),
			@REVISION_DATE		NVARCHAR(08),
			@REVISION_DATE_ORG	NVARCHAR(08),
			@TEST_VER			NUMERIC(10, 2),
			@USER_ID			NVARCHAR(100)
		BEGIN
		
			SET	@COMP_CODE		= #{S_COMP_CODE};
			SET	@DIV_CODE		= #{DIV_CODE};
			SET	@ITEM_CODE		= #{ITEM_CODE};
			SET	@TEST_CODE		= #{TEST_CODE};
			SET	@TEST_METH		= #{TEST_METH};
			SET	@TEST_COND		= #{TEST_COND};
			SET	@TEST_VALUE		= #{TEST_VALUE};
			SET	@REVISION_DATE	= #{REVISION_DATE};
			SET	@REVISION_DATE_ORG	= #{REVISION_DATE_ORG};
			SET	@TEST_VER		= #{TEST_VER};
			SET	@USER_ID		= #{S_USER_ID};
		
		
			MERGE INTO QBA210T A
			USING
			(
				SELECT 	@COMP_CODE		AS COMP_CODE
						,@DIV_CODE		AS DIV_CODE
						,@ITEM_CODE		AS ITEM_CODE
						,@TEST_CODE		AS TEST_CODE
						,@TEST_METH		AS TEST_METH
						,@TEST_COND		AS TEST_COND
						,@TEST_VALUE	AS TEST_VALUE
						,@REVISION_DATE	AS REVISION_DATE
						,@TEST_VER		AS TEST_VER
						,@USER_ID		AS USER_ID
			) B
			ON 
			(
					A.COMP_CODE		= B.COMP_CODE
				AND	A.DIV_CODE		= B.DIV_CODE
				AND	A.ITEM_CODE		= B.ITEM_CODE
				AND	A.TEST_CODE		= B.TEST_CODE
				AND A.REVISION_DATE = B.REVISION_DATE 
			)
			WHEN NOT MATCHED THEN
			INSERT 
			(
				COMP_CODE, 		DIV_CODE, 		ITEM_CODE, 			TEST_CODE, 		TEST_METH, 		
				TEST_COND, 		TEST_VALUE, 	REVISION_DATE, 		TEST_VER, 		INSERT_DB_USER,	
				INSERT_DB_TIME
		
			)
			VALUES
			(
				B.COMP_CODE, 		B.DIV_CODE, 		B.ITEM_CODE, 		B.TEST_CODE, 		B.TEST_METH, 		
				B.TEST_COND, 		B.TEST_VALUE, 	B.REVISION_DATE, 		B.TEST_VER, 		B.USER_ID,	
				GETDATE()
			)
			WHEN MATCHED THEN
			UPDATE 
			SET
				TEST_METH		=	B.TEST_METH,
				TEST_COND		=	B.TEST_COND,
				TEST_VALUE		=	B.TEST_VALUE,
				TEST_VER		=	B.TEST_VER,
				UPDATE_DB_USER	= 	B.USER_ID,
				UPDATE_DB_TIME	= 	GETDATE()
			;
		
		END
	
	
	
	</update>

	
</mapper>