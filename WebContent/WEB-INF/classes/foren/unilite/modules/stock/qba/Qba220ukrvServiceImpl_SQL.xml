<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qba220ukrvServiceImpl">

	<select id="qba220ukrvServiceImpl.getCntQba220t" parameterType="Map" resultType="rMap">
	SELECT	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS USE_YN
	FROM QBA210T WITH (NOLOCK)
	WHERE	COMP_CODE		= #{S_COMP_CODE}
	AND		DIV_CODE		= #{DIV_CODE}
	AND		ITEM_CODE		= #{ITEM_CODE}
	<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
	AND		REVISION_DATE 	BETWEEN '19990101' AND #{REVISION_DATE}
	</if>
	</select>

	<select id="qba220ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
	SELECT A.DIV_CODE
		 , A.ITEM_CODE
		 , A.ITEM_NAME
		 , C.SPEC
		 , A.ITEM_ACCOUNT
		 , CASE WHEN ISNULL(B.COMP_CODE, '') = ''	THEN 'N' ELSE 'Y' END AS USE_YN
		 , ISNULL(B.CNT, 0) AS CNT
	FROM BPR200T A WITH (NOLOCK)
	LEFT OUTER JOIN (
						SELECT	COMP_CODE
							 ,	DIV_CODE
							 ,  ITEM_CODE
							 , COUNT(TEST_CODE) AS CNT
						FROM QBA210T WITH (NOLOCK)
						WHERE	COMP_CODE	= #{S_COMP_CODE}
						AND		DIV_CODE	= #{DIV_CODE}
						<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
						AND		ITEM_CODE	= #{ITEM_CODE}
						</if>
						<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
						AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
						</if>
						GROUP BY COMP_CODE ,	DIV_CODE,  ITEM_CODE
					) B	ON	A.COMP_CODE = B.COMP_CODE
						AND A.DIV_CODE	= B.DIV_CODE
						AND A.ITEM_CODE = B.ITEM_CODE
	LEFT OUTER JOIN BPR100T C WITH (NOLOCK) ON	A.COMP_CODE = C.COMP_CODE
											AND A.ITEM_CODE = C.ITEM_CODE
	WHERE	A.COMP_CODE		= #{S_COMP_CODE}
	AND		A.DIV_CODE		= #{DIV_CODE}
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	AND		A.ITEM_CODE		= #{ITEM_CODE}
	</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
	AND		A.ITEM_ACCOUNT 	= #{ITEM_ACCOUNT}
	</if>
	AND		(
				( 'ALL' = #{CHK_RDO} )
			 OR ( 'Y'	= #{CHK_RDO} AND B.COMP_CODE IS NOT NULL)
			 OR ( 'N'	= #{CHK_RDO} AND B.COMP_CODE IS NULL)
			)
	<if test="@foren.Ognl@isNotEmpty(ITEM_USE_YN)">
	AND	C.USE_YN	= #{ITEM_USE_YN}
	</if>
	ORDER BY USE_YN DESC, ITEM_CODE
	</select>

	<select id="qba220ukrvServiceImpl.selectTestList" parameterType="Map" resultType="rMap">
  SELECT	DISTINCT
			A.DIV_CODE
		 ,	A.ITEM_CODE
		 ,	A.TEST_CODE
		 ,  A.TEST_CODE AS TEST_NAME
		 ,  A.TEST_NAME AS TEST_NAME_DB
		 ,  A.TEST_NAME_ENG
		 ,	A.TEST_METH
		 ,	A.TEST_COND
		 ,  A.TEST_COND_ENG
		 ,  A.TEST_COND_FROM
		 ,  A.TEST_COND_TO
	 	 ,	A.TEST_VALUE
		 ,  A.TEST_RESULT
		 ,  B.TEST_UNIT
		 ,  B.TEST_PRSN
		 ,	A.REVISION_DATE
		 ,	A.TEST_VER
		 ,	A.USE_YN
		 ,  A.SEQ
		 ,  A.REMARK
		 ,  A.VALUE_POINT
	FROM	QBA210T A WITH (NOLOCK)
	        LEFT JOIN QBA100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
			                                AND B.DIV_CODE  = A.DIV_CODE
											AND B.TEST_CODE = A.TEST_CODE
	WHERE 	A.COMP_CODE 	= #{S_COMP_CODE}
	AND		A.DIV_CODE		= #{DIV_CODE}
	AND		A.ITEM_CODE		= #{ITEM_CODE}
	AND 	A.REVISION_DATE	= 	(
									SELECT MAX(REVISION_DATE)
									FROM 	QBA210T
									WHERE 	COMP_CODE	= A.COMP_CODE
									AND		DIV_CODE	= A.DIV_CODE
									AND		ITEM_CODE	= A.ITEM_CODE
									AND		TEST_CODE	= A.TEST_CODE
									<if test="@foren.Ognl@isNotEmpty(REVISION_DATE)">
									AND		REVISION_DATE BETWEEN '19990101' AND #{REVISION_DATE}
									</if>
								)

	ORDER BY TEST_CODE

	</select>

	<select id="qba220ukrvServiceImpl.selectTestListNew" parameterType="Map" resultType="rMap">
		SELECT DIV_CODE
		     , '' AS ITEM_CODE
			 , TEST_CODE
			 , TEST_NAME
			 , TEST_METH
			 , TEST_COND
			 , TEST_COND_FROM
			 , TEST_COND_TO
			 , TEST_VALUE
			 , TEST_RESULT
			 , TEST_UNIT
			 , TEST_PRSN
			 , '' AS REVISION_DATE
			 , SEQ
			 , REMARK
			 , VALUE_POINT
		  FROM QBA100T WITH (NOLOCK)
		 WHERE COMP_CODE =  #{S_COMP_CODE}
		   AND DIV_CODE =  #{DIV_CODE}
		   AND USE_YN = 'Y'
	ORDER BY TEST_CODE
	</select>

	<insert id="qba220ukrvServiceImpl.insertDetail" parameterType="Map">
	DECLARE
		@TEST_NAME			NVARCHAR(100)
	BEGIN
		SET @TEST_NAME			= (SELECT CODE_NAME FROM BSA100T WHERE COMP_CODE = #{S_COMP_CODE} AND MAIN_CODE = 'Q040' AND SUB_CODE = #{TEST_CODE});

		INSERT INTO QBA210T


		(
			COMP_CODE,      DIV_CODE,       ITEM_CODE,         TEST_CODE,       REVISION_DATE,
			TEST_METH,      TEST_NAME,      TEST_COND,         TEST_COND_FROM,  TEST_COND_TO,
			TEST_VALUE,     SEQ,            TEST_VER,          USE_YN,          REMARK,
			TEST_RESULT,    TEST_NAME_ENG,  TEST_COND_ENG,
			INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER,    UPDATE_DB_TIME

		)
		VALUES
		(
			#{S_COMP_CODE}, 	#{DIV_CODE}, 	#{ITEM_CODE}, 		#{TEST_CODE}, 		#{REVISION_DATE},
			#{TEST_METH}, 		#{TEST_NAME_DB}, 	#{TEST_COND}, 	    #{TEST_COND_FROM},  #{TEST_COND_TO},
			#{TEST_VALUE}, 		#{SEQ}, 	    #{TEST_VER}, 	    #{USE_YN}, 		    #{REMARK},
			#{TEST_RESULT},    #{TEST_NAME_ENG},  #{TEST_COND_ENG},
			#{S_USER_ID},       GETDATE(),      #{S_USER_ID},       GETDATE()
		)
	END
	</insert>

	<update id="qba220ukrvServiceImpl.updateDetail" parameterType="Map">
		UPDATE QBA210T
		SET
			TEST_METH		=	#{TEST_METH},
			TEST_COND		=	#{TEST_COND},
			TEST_COND_FROM	=	#{TEST_COND_FROM},
			TEST_COND_TO	=	#{TEST_COND_TO},
			TEST_VALUE		=	#{TEST_VALUE},
			TEST_RESULT		=	#{TEST_RESULT},
			SEQ		        =	#{SEQ},
			REMARK		    =	#{REMARK},
			TEST_NAME_ENG	=	#{TEST_NAME_ENG},
			TEST_COND_ENG	=	#{TEST_COND_ENG},
			UPDATE_DB_USER	= 	#{S_USER_ID},
			UPDATE_DB_TIME	= 	GETDATE()
		WHERE 	COMP_CODE 		= #{S_COMP_CODE}
		AND		DIV_CODE		= #{DIV_CODE}
		AND		ITEM_CODE		= #{ITEM_CODE}
		AND		TEST_CODE		= #{TEST_CODE}
		AND		REVISION_DATE	= #{REVISION_DATE}
	</update>

	<delete id="qba220ukrvServiceImpl.deleteDetail" parameterType="Map">
	DELETE FROM QBA210T
	WHERE 	COMP_CODE 		= #{S_COMP_CODE}
	AND		DIV_CODE		= #{DIV_CODE}
	AND		ITEM_CODE		= #{ITEM_CODE}
	AND		TEST_CODE		= #{TEST_CODE}
	AND		REVISION_DATE	= #{REVISION_DATE}
	</delete>

	<insert id="qba220ukrvServiceImpl.testcodeCopy" parameterType="Map">
	IF NOT EXISTS(  SELECT TOP 1 TEST_CODE
					  FROM QBA210T WITH(NOLOCK)
					 WHERE COMP_CODE = #{S_COMP_CODE}
					   AND DIV_CODE  = #{DIV_CODE}
					   AND ITEM_CODE = #{ITEM_CODE}
					   )

	BEGIN

			INSERT INTO QBA210T
			(
				COMP_CODE,      DIV_CODE,       ITEM_CODE,         TEST_CODE,       REVISION_DATE,
				TEST_METH,      TEST_NAME,      TEST_COND,         TEST_COND_FROM,  TEST_COND_TO,
				TEST_VALUE,     SEQ,            TEST_VER,          USE_YN,          REMARK,
				TEST_RESULT,
				INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER,    UPDATE_DB_TIME

			)

			SELECT COMP_CODE,      DIV_CODE,       #{ITEM_CODE},         TEST_CODE,       REVISION_DATE,
				   TEST_METH,      TEST_NAME,      TEST_COND,         TEST_COND_FROM,  TEST_COND_TO,
				   TEST_VALUE,     SEQ,            TEST_VER,          USE_YN,          REMARK,
				   TEST_RESULT,
				   INSERT_DB_USER, GETDATE(),      UPDATE_DB_USER,    GETDATE()
			  FROM QBA210T WITH(NOLOCK)
			 WHERE COMP_CODE = #{S_COMP_CODE}
			   AND DIV_CODE  = #{DIV_CODE}
			   AND ITEM_CODE = #{SEL_ITEM_CODE}

	END
	</insert>

	<update id="qba220ukrvServiceImpl.insertAnUpdateDetail" parameterType="Map">
		DECLARE
			@COMP_CODE			NVARCHAR(08),
			@DIV_CODE			NVARCHAR(08),
			@ITEM_CODE			NVARCHAR(20),
			@TEST_CODE			NVARCHAR(20),
			@TEST_METH			NVARCHAR(2000),
			@TEST_COND			NVARCHAR(60),
			@TEST_VALUE			NVARCHAR(30),
			@REVISION_DATE		NVARCHAR(08),
			@REVISION_DATE_ORG	NVARCHAR(08),
			@TEST_VER			NUMERIC(10, 2),
			@USER_ID			NVARCHAR(100)
		BEGIN

			SET	@COMP_CODE		= #{S_COMP_CODE};
			SET	@DIV_CODE		= #{DIV_CODE};
			SET	@ITEM_CODE		= #{ITEM_CODE};
			SET	@TEST_CODE		= #{TEST_CODE};
			SET	@TEST_METH		= #{TEST_METH};
			SET	@TEST_COND		= #{TEST_COND};
			SET	@TEST_VALUE		= #{TEST_VALUE};
			SET	@REVISION_DATE	= #{REVISION_DATE};
			SET	@REVISION_DATE_ORG	= #{REVISION_DATE_ORG};
			SET	@TEST_VER		= #{TEST_VER};
			SET	@USER_ID		= #{S_USER_ID};


			MERGE INTO QBA210T A
			USING
			(
				SELECT 	@COMP_CODE		AS COMP_CODE
						,@DIV_CODE		AS DIV_CODE
						,@ITEM_CODE		AS ITEM_CODE
						,@TEST_CODE		AS TEST_CODE
						,@TEST_METH		AS TEST_METH
						,@TEST_COND		AS TEST_COND
						,@TEST_VALUE	AS TEST_VALUE
						,@REVISION_DATE	AS REVISION_DATE
						,@TEST_VER		AS TEST_VER
						,@USER_ID		AS USER_ID
			) B
			ON
			(
					A.COMP_CODE		= B.COMP_CODE
				AND	A.DIV_CODE		= B.DIV_CODE
				AND	A.ITEM_CODE		= B.ITEM_CODE
				AND	A.TEST_CODE		= B.TEST_CODE
				AND A.REVISION_DATE = B.REVISION_DATE
			)
			WHEN NOT MATCHED THEN
			INSERT
			(
				COMP_CODE, 		DIV_CODE, 		ITEM_CODE, 			TEST_CODE, 		TEST_METH,
				TEST_COND, 		TEST_VALUE, 	REVISION_DATE, 		TEST_VER, 		INSERT_DB_USER,
				INSERT_DB_TIME

			)
			VALUES
			(
				B.COMP_CODE, 		B.DIV_CODE, 		B.ITEM_CODE, 		B.TEST_CODE, 		B.TEST_METH,
				B.TEST_COND, 		B.TEST_VALUE, 	B.REVISION_DATE, 		B.TEST_VER, 		B.USER_ID,
				GETDATE()
			)
			WHEN MATCHED THEN
			UPDATE
			SET
				TEST_METH		=	B.TEST_METH,
				TEST_COND		=	B.TEST_COND,
				TEST_VALUE		=	B.TEST_VALUE,
				TEST_VER		=	B.TEST_VER,
				UPDATE_DB_USER	= 	B.USER_ID,
				UPDATE_DB_TIME	= 	GETDATE()
			;

		END



	</update>


</mapper>