<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biv301skrvServiceImpl">

	<select id="biv301skrvServiceImpl.userWhcode" parameterType="Map" resultType="rMap">	/* 창고 초기화 */
		SELECT
			A.WH_CODE
		FROM BSA210T A WITH(NOLOCK)
			LEFT JOIN BSA300T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
											AND B.DEPT_CODE = A.TREE_CODE
		WHERE A.COMP_CODE = #{S_COMP_CODE}
		  AND B.USER_ID = #{S_USER_ID}
	</select>

	<select id="biv301skrvServiceImpl.selectMasterList" parameterType="Map" resultType="rMap">		/* 품목별 */
        --biv301skrv.Cbiv301skrv[fnBiv300QSt1] Query03
        /*
        현재고 현황 조회(품목/창고별)
        */
        BEGIN
            DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                          , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장코드


                          , @ITEM_CODE          NVARCHAR(20)                -- (선택) 품목코드
                          , @ITEM_NAME          NVARCHAR(200)               -- (선택) 품목명
        --
                          , @ITEM_LEVEL1        NVARCHAR(10)                -- 대분류
                          , @ITEM_LEVEL2        NVARCHAR(10)                -- 중분류
                          , @ITEM_LEVEL3        NVARCHAR(10)                -- 소분류
        --
                          , @SUBCON_FLAG        NVARCHAR(02)                -- 외주재고 포함 여부(Y/N)
                          , @QUERY_TYPE         NVARCHAR(02)                -- 조회유형 (1: 품목별,  2: 창고별)
                          , @USER_ID            NVARCHAR(100)                -- (필수) USER ID

            SET NOCOUNT ON
            SET ARITHABORT ON

            SET @COMP_CODE       = #{S_COMP_CODE}
            SET @DIV_CODE        = #{DIV_CODE}

            SET @ITEM_CODE       = #{ITEM_CODE}
            SET @ITEM_NAME       = REPLACE(#{ITEM_NAME}, '[', '[[]')
        --
            SET @ITEM_LEVEL1     = #{TXTLV_L1}
            SET @ITEM_LEVEL2     = #{TXTLV_L2}
            SET @ITEM_LEVEL3     = #{TXTLV_L3}
        --
            SET @SUBCON_FLAG     = #{SUBCON_FLAG}   -- 외주재고 포함 여부(1: 미포함, 2: 포함)
            SET @QUERY_TYPE      = #{QUERY_TYPE}   -- 조회유형          (1: 품목별, 2: 창고별)
            SET @USER_ID         = #{S_USER_ID}

            SET @QUERY_TYPE      = CASE WHEN @QUERY_TYPE  = ''  THEN '1' ELSE SUBSTRING(@QUERY_TYPE, 1, 1) END
            SET @SUBCON_FLAG     = CASE WHEN @SUBCON_FLAG = ''  THEN '1'
                                        WHEN @QUERY_TYPE  = '2' THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'N'  THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'Y'  THEN '2'
                                        ELSE SUBSTRING(@SUBCON_FLAG, 1, 1)
                                   END  -- 창고별 조회일 경우, 외주재고는 제외 처리함.

        -----------------------------------------------------------------------------------------------------------------------
            DECLARE @RefItem            NVARCHAR(01)

            SELECT TOP 1 @RefItem = REF_ITEM
            FROM   BSA300T WITH (NOLOCK)
            WHERE  USER_ID = @USER_ID

            SET @RefItem = ISNULL(@RefItem, '')

        -----------------------------------------------------------------------------------------------------------------------

            SELECT
                   CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT_NAME
                        WHEN @QUERY_TYPE = '2' THEN A.WH_NAME
                        ELSE ''
                   END                                                                                                  AS ITEM_ACCOUNT
                 , CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT
                        WHEN @QUERY_TYPE = '2' THEN A.WH_CODE
                        ELSE ''
                   END                                                                                                  AS ACCOUNT1
                 , A.DIV_CODE                                                                                           AS DIV_CODE
                 , A.ITEM_CODE                                                                                          AS ITEM_CODE
                 , A.ITEM_NAME                                                                                          AS ITEM_NAME
                 , A.SPEC                                                                                               AS SPEC
                 , A.STOCK_UNIT                                                                                         AS STOCK_UNIT
                 , CASE WHEN SUM(ISNULL(STOCK_Q, 0)) = 0 THEN 0
                        ELSE SUM(ROUND(ISNULL(STOCK_AMT, 0), 5)) / SUM(ISNULL(STOCK_Q, 0))
                   END                                                                                                  AS STOCK_P
                 , SUM(ISNULL(STOCK_Q, 0))                                                                              AS STOCK_Q
                 , SUM(ISNULL(STOCK_AMT, 0))                                                                  AS STOCK_AMT
                 
                 , SUM(USEABLE_STOCK_QTY)																				AS USEABLE_STOCK_QTY	--20190114
				 , SUM(ISSUE_REQ_QTY)																					AS ISSUE_REQ_QTY		--20190114
				
                 , SUM(ISNULL(GOOD_STOCK_Q, 0))                                                                         AS GOOD_STOCK_Q
                 , SUM(ISNULL(GOOD_STOCK_AMT, 0))                                                             AS GOOD_STOCK_AMT
                 , SUM(ISNULL(BAD_STOCK_Q, 0))                                                                          AS BAD_STOCK_Q
                 , SUM(ISNULL(BAD_STOCK_AMT, 0))                                                              AS BAD_STOCK_AMT
                 , ISNULL(LOCATION, '')                                                                                 AS LOCATION
                 , ISNULL(CUSTOM_CODE, '')                                                                              AS CUSTOM_CODE
                 , ISNULL(CUSTOM_NAME, '')                                                                              AS CUSTOM_NAME

            FROM   (
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE A.WH_CODE    END                                     AS WH_CODE
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE D1.TREE_NAME END                                     AS WH_NAME

        ---- 입고+(1), 출고-(2), 반품+(3)
        --                , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
        --                , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
        --                            THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
        --                       ELSE ISNULL(A.STOCK_I, 0)
        --                  END                                                                                           AS STOCK_AMT
        ----
        --                , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
        --                , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
        --                            THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
        --                       ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
        --                  END                                                                                           AS GOOD_STOCK_AMT
        ----
        --                , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
        --                , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
        --                            THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
        --                                 CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
        --                       ELSE ISNULL(A.STOCK_I, 0) -
        --                            CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
        --                  END                                                                                           AS BAD_STOCK_AMT

        -- 입고+(1), 출고-(2), 반품+(3)
                        , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0)
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
                               		THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
 							   ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              -- -- ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
                          	  	 THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0) -
                               ----     CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
 								THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
 							  ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))

                          END                                                                                           AS BAD_STOCK_AMT
							
						 
						 , (ISNULL(D2.ISSUE_REQ_QTY,0)) AS ISSUE_REQ_QTY		
						 , (A.GOOD_STOCK_Q)	 - (ISNULL(D2.ISSUE_REQ_QTY,0)) AS USEABLE_STOCK_QTY

                         , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                   FROM              BIV100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             -- 품목
                                                              AND C1.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             -- 사업장 품목
                                                              AND C2.DIV_CODE   = A.DIV_CODE
                                                              AND C2.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE  = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE= C2.CUSTOM_CODE
                          LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             -- 창고
                                                              AND D1.TYPE_LEVEL = A.DIV_CODE
                                                              AND D1.TREE_CODE  = A.WH_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M4 WITH (NOLOCK) ON M4.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M4.MAIN_CODE   = 'B069'
                                                              AND M4.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M4.REF_CODE2   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE  = C2.COMP_CODE
                                                              AND M2.MAIN_CODE  = 'B020'                                                  -- 계정구분
                                                              AND M2.SUB_CODE   = C2.ITEM_ACCOUNT
                          LEFT  JOIN (
											SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
											FROM SRQ100T A WITH (NOLOCK)
													INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
											WHERE A.COMP_CODE= @COMP_CODE
											AND A.DIV_CODE= @DIV_CODE
											AND B.ORDER_STATUS ='N'
											AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
											GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
									   ) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE
									   
                   WHERE  A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		 AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0) OR (A.STOCK_Q       = 0.0) OR (A.GOOD_STOCK_Q = 0.0) OR (A.BAD_STOCK_Q = 0.0))
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		 AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0))
                   </if>

                   <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
					   AND A.WH_CODE IN
							<foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
								#{item}
							</foreach>									 -- 창고
					</if>

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					   AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
					   AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					   AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                ELSE C1.ITEM_NAME
                           END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                   AND  ((C1.ITEM_LEVEL1   = @ITEM_LEVEL1     AND @ITEM_LEVEL1  != '') OR (@ITEM_LEVEL1  = ''))        -- 대분류
                   AND  ((C1.ITEM_LEVEL2   = @ITEM_LEVEL2     AND @ITEM_LEVEL2  != '') OR (@ITEM_LEVEL2  = ''))        -- 중분류
                   AND  ((C1.ITEM_LEVEL3   = @ITEM_LEVEL3     AND @ITEM_LEVEL3  != '') OR (@ITEM_LEVEL3  = ''))        -- 소분류
                   UNION ALL  -- 외주처 현재고
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , ''                                                                                            AS WH_CODE
                        , ''                                                                                            AS WH_NAME

        -- 입고+(1), 출고-(2), 반품+(3)
                        , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS BAD_STOCK_AMT
                        , 0 AS ISSUE_REQ_QTY
						, 0 AS USEABLE_STOCK_QTY  
                        , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE 
                        
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                   FROM              BIZ100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE                                            -- 품목
                                                              AND C1.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE                                            -- 사업장 품목
                                                              AND C2.DIV_CODE    = A.DIV_CODE
                                                              AND C2.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE   = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE = C2.CUSTOM_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                            -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                    -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE   = C2.COMP_CODE
                                                              AND M2.MAIN_CODE   = 'B020'                                                 -- 계정구분
                                                              AND M2.SUB_CODE    = C2.ITEM_ACCOUNT
                   WHERE  @SUBCON_FLAG     = '2'
                   AND    A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0) OR (A.STOCK_Q  = 0.0) OR (A.GOOD_STOCK_Q = 0.0) OR (A.BAD_STOCK_Q = 0.0))
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0))
                   </if>
                   
					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					   AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
					   AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					   AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                ELSE C1.ITEM_NAME
                           END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                   AND  ((C1.ITEM_LEVEL1   = @ITEM_LEVEL1     AND @ITEM_LEVEL1  != '') OR (@ITEM_LEVEL1  = ''))        -- 대분류
                   AND  ((C1.ITEM_LEVEL2   = @ITEM_LEVEL2     AND @ITEM_LEVEL2  != '') OR (@ITEM_LEVEL2  = ''))        -- 중분류
                   AND  ((C1.ITEM_LEVEL3   = @ITEM_LEVEL3     AND @ITEM_LEVEL3  != '') OR (@ITEM_LEVEL3  = ''))        -- 소분류
                   ) A
             WHERE 1=1
                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.LOCATION
                          , A.ITEM_ACCOUNT, A.ITEM_ACCOUNT_NAME, A.WH_CODE, A.WH_NAME
                          , A.ITEM_CODE, A.ITEM_NAME, A.SPEC, A.STOCK_UNIT, A.CUSTOM_CODE, A.CUSTOM_NAME
                   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		  HAVING (SUM(ISNULL(STOCK_Q, 0)) != 0 OR  SUM(ISNULL(STOCK_Q, 0)) = 0)
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		   HAVING SUM(ISNULL(STOCK_Q, 0)) != 0
                   </if>

                   ORDER BY ITEM_ACCOUNT, A.ITEM_CODE

            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END
	</select>

	<select id="biv301skrvServiceImpl.selectMasterList2" parameterType="Map" resultType="rMap">		/* 창고별 */
        --biv301skrv.Cbiv301skrv[fnBiv300QSt1] Query03
        /*
        현재고 현황 조회(품목/창고별)
        */
        BEGIN
            DECLARE         @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                          , @DIV_CODE           NVARCHAR(08)                -- (필수) 사업장코드


                          , @ITEM_CODE          NVARCHAR(20)                -- (선택) 품목코드
                          , @ITEM_NAME          NVARCHAR(200)               -- (선택) 품목명
        --
                          , @ITEM_LEVEL1        NVARCHAR(10)                -- 대분류
                          , @ITEM_LEVEL2        NVARCHAR(10)                -- 중분류
                          , @ITEM_LEVEL3        NVARCHAR(10)                -- 소분류
        --
                          , @SUBCON_FLAG        NVARCHAR(02)                -- 외주재고 포함 여부(Y/N)
                          , @QUERY_TYPE         NVARCHAR(02)                -- 조회유형 (1: 품목별,  2: 창고별)
                          , @USER_ID            NVARCHAR(100)                -- (필수) USER ID

            SET NOCOUNT ON
            SET ARITHABORT ON

            SET @COMP_CODE       = #{S_COMP_CODE}
            SET @DIV_CODE        = #{DIV_CODE}


            SET @ITEM_CODE       = #{ITEM_CODE}
            SET @ITEM_NAME       = REPLACE(#{ITEM_NAME}, '[', '[[]')
        --
            SET @ITEM_LEVEL1     = #{TXTLV_L1}
            SET @ITEM_LEVEL2     = #{TXTLV_L2}
            SET @ITEM_LEVEL3     = #{TXTLV_L3}
        --
            SET @SUBCON_FLAG     = #{SUBCON_FLAG}   -- 외주재고 포함 여부(1: 미포함, 2: 포함)
            SET @QUERY_TYPE      = #{QUERY_TYPE}   -- 조회유형          (1: 품목별, 2: 창고별)
            SET @USER_ID         = #{S_USER_ID}

            SET @QUERY_TYPE      = CASE WHEN @QUERY_TYPE  = ''  THEN '1' ELSE SUBSTRING(@QUERY_TYPE, 1, 1) END
            SET @SUBCON_FLAG     = CASE WHEN @SUBCON_FLAG = ''  THEN '1'
                                        WHEN @QUERY_TYPE  = '2' THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'N'  THEN '1'
                                        WHEN SUBSTRING(@SUBCON_FLAG, 2, 1) = 'Y'  THEN '2'
                                        ELSE SUBSTRING(@SUBCON_FLAG, 1, 1)
                                   END  -- 창고별 조회일 경우, 외주재고는 제외 처리함.

        -----------------------------------------------------------------------------------------------------------------------
            DECLARE @RefItem            NVARCHAR(01)

            SELECT TOP 1 @RefItem = REF_ITEM
            FROM   BSA300T WITH (NOLOCK)
            WHERE  USER_ID = @USER_ID

            SET @RefItem = ISNULL(@RefItem, '')

        -----------------------------------------------------------------------------------------------------------------------

            SELECT
                   CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT_NAME
                        WHEN @QUERY_TYPE = '2' THEN A.WH_NAME
                        ELSE ''
                   END                                                                                                  AS ITEM_ACCOUNT
                 , CASE WHEN @QUERY_TYPE = '1' THEN A.ITEM_ACCOUNT
                        WHEN @QUERY_TYPE = '2' THEN A.WH_CODE
                        ELSE ''
                   END                                                                                                  AS ACCOUNT1
                 , A.DIV_CODE                                                                                           AS DIV_CODE
                 , A.ITEM_CODE                                                                                          AS ITEM_CODE
                 , A.ITEM_NAME                                                                                          AS ITEM_NAME
                 , A.SPEC                                                                                               AS SPEC
                 , A.STOCK_UNIT                                                                                         AS STOCK_UNIT
                 , CASE WHEN SUM(ISNULL(STOCK_Q, 0)) = 0 THEN 0
                        ELSE SUM(ROUND(ISNULL(STOCK_AMT, 0), 5)) / SUM(ISNULL(STOCK_Q, 0))
                   END                                                                                                  AS STOCK_P
                 , SUM(ISNULL(STOCK_Q, 0))                                                                              AS STOCK_Q
                 , SUM(ISNULL(STOCK_AMT, 0))                                                                  AS STOCK_AMT
                 
                 , SUM(USEABLE_STOCK_QTY) 	AS USEABLE_STOCK_QTY	--20190114
				 , SUM(ISSUE_REQ_QTY)		AS ISSUE_REQ_QTY		--20190114
				 
                 , SUM(ISNULL(GOOD_STOCK_Q, 0))                                                                         AS GOOD_STOCK_Q
                 , SUM(ISNULL(GOOD_STOCK_AMT, 0))                                                             AS GOOD_STOCK_AMT
                 , SUM(ISNULL(BAD_STOCK_Q, 0))                                                                          AS BAD_STOCK_Q
                 , SUM(ISNULL(BAD_STOCK_AMT, 0))                                                              AS BAD_STOCK_AMT
                 , ISNULL(LOCATION, '')                                                                                 AS LOCATION
                 , ISNULL(CUSTOM_CODE, '')                                                                              AS CUSTOM_CODE
                 , ISNULL(CUSTOM_NAME, '')                                                                              AS CUSTOM_NAME

            FROM   (
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE A.WH_CODE    END                                     AS WH_CODE
                        , CASE WHEN @QUERY_TYPE = '1' THEN '' ELSE D1.TREE_NAME END                                     AS WH_NAME

      --  -- 입고+(1), 출고-(2), 반품+(3)
      --                  , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
      --                  , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
      --                              THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
      --                         ELSE ISNULL(A.STOCK_I, 0)
      --                    END                                                                                           AS STOCK_AMT
      --  --
      --                  , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
      --                  , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
      --                              THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
      --                         ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
      --                    END                                                                                           AS GOOD_STOCK_AMT
      --  --
      --                  , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
      --                  , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
      --                              THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
      --                                  CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
      --                         ELSE ISNULL(A.STOCK_I, 0) -
      --                              CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
      --                    END                                                                                           AS BAD_STOCK_AMT


                         , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0)
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
                               		THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
 							   ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              -- -- ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                              --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
                          	  	 THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          	  ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ----ELSE ISNULL(A.STOCK_I, 0) -
                               ----     CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               --ELSE CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
                          	  WHEN ISNULL(M4.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) NOT IN ('1', '2')
 								THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.BAD_STOCK_Q, 0))
 							  ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))

                          END                                                                                           AS BAD_STOCK_AMT


						, (A.GOOD_STOCK_Q)- (ISNULL(D2.ISSUE_REQ_QTY,0)) AS USEABLE_STOCK_QTY
						, (ISNULL(D2.ISSUE_REQ_QTY,0)) AS ISSUE_REQ_QTY
						
                        , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                   FROM              BIV100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             -- 품목
                                                              AND C1.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             -- 사업장 품목
                                                              AND C2.DIV_CODE   = A.DIV_CODE
                                                              AND C2.ITEM_CODE  = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE  = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE= C2.CUSTOM_CODE
                          LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             -- 창고
                                                              AND D1.TYPE_LEVEL = A.DIV_CODE
                                                              AND D1.TREE_CODE  = A.WH_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M4 WITH (NOLOCK) ON M4.COMP_CODE   = A.COMP_CODE                                             -- 단가처리 기준
                                                              AND M4.MAIN_CODE   = 'B069'
                                                              AND M4.SUB_CODE    = '1'                                                     -- 기준재고단가
                                                              AND M4.REF_CODE2   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE  = C2.COMP_CODE
                                                              AND M2.MAIN_CODE  = 'B020'                                                  -- 계정구분
                                                              AND M2.SUB_CODE   = C2.ITEM_ACCOUNT
                          LEFT  JOIN (
										SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
										FROM SRQ100T A WITH (NOLOCK)
										INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
										WHERE A.COMP_CODE= @COMP_CODE
										AND A.DIV_CODE= @DIV_CODE
										AND ISNULL(B.ORDER_STATUS,'N')='N'
										AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
										GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
							) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE
							
                   WHERE  A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                    <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		 AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0) OR (A.STOCK_Q       = 0.0) OR (A.GOOD_STOCK_Q = 0.0) OR (A.BAD_STOCK_Q = 0.0))
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		 AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0))
                   </if>
                   <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
					   AND A.WH_CODE IN
							<foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
								#{item}
							</foreach>									 -- 창고
					</if>

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
                   <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
					AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                             ELSE C1.ITEM_NAME
                        END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                   AND  ((C1.ITEM_LEVEL1   = @ITEM_LEVEL1     AND @ITEM_LEVEL1  != '') OR (@ITEM_LEVEL1  = ''))        -- 대분류
                   AND  ((C1.ITEM_LEVEL2   = @ITEM_LEVEL2     AND @ITEM_LEVEL2  != '') OR (@ITEM_LEVEL2  = ''))        -- 중분류
                   AND  ((C1.ITEM_LEVEL3   = @ITEM_LEVEL3     AND @ITEM_LEVEL3  != '') OR (@ITEM_LEVEL3  = ''))        -- 소분류
                   
                   UNION ALL  -- 외주처 현재고
                   
                   SELECT A.COMP_CODE, A.DIV_CODE, ISNULL(C2.LOCATION, '') AS LOCATION
                        , A.ITEM_CODE
                        , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                               WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                               WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                               ELSE C1.ITEM_NAME
                          END                                                                                           AS ITEM_NAME
                        , C2.ITEM_ACCOUNT                                                                               AS ITEM_ACCOUNT
                        , M2.CODE_NAME                                                                                  AS ITEM_ACCOUNT_NAME
                        , ISNULL(C1.SPEC, '')                                                                           AS SPEC
                        , ISNULL(C1.STOCK_UNIT, '')                                                                     AS STOCK_UNIT
                        , ''                                                                                            AS WH_CODE
                        , ''                                                                                            AS WH_NAME

        -- 입고+(1), 출고-(2), 반품+(3)
                        , ISNULL(A.STOCK_Q, 0)                                                                          AS STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')    -- 기준단가 적용 제품/반제품 금액
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0)
                          END                                                                                           AS STOCK_AMT
        --
                        , ISNULL(A.GOOD_STOCK_Q, 0)                                                                     AS GOOD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS GOOD_STOCK_AMT
        --
                        , ISNULL(A.BAD_STOCK_Q, 0)                                                                      AS BAD_STOCK_Q
                        , CASE WHEN ISNULL(M1.SUB_CODE, '') = '1' AND SUBSTRING(ISNULL(C2.ITEM_ACCOUNT, ''), 1, 1) IN ('1', '2')
                                    THEN CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.STOCK_Q, 0)) -
                                         CONVERT(NUMERIC(30, 6), ISNULL(C2.BASIS_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                               ELSE ISNULL(A.STOCK_I, 0) -
                                    CONVERT(NUMERIC(30, 6), ISNULL(A.AVERAGE_P, 0) * ISNULL(A.GOOD_STOCK_Q, 0))
                          END                                                                                           AS BAD_STOCK_AMT
                          
                        , 0 AS ISSUE_REQ_QTY
						, 0 AS USEABLE_STOCK_QTY    
                        , C2.CUSTOM_CODE                                                                                AS CUSTOM_CODE
                        , CASE WHEN @RefItem = '0' THEN C3.CUSTOM_NAME
                               WHEN @RefItem = '1' THEN C3.CUSTOM_NAME1
                               WHEN @RefItem = '2' THEN C3.CUSTOM_NAME2
                               ELSE C3.CUSTOM_NAME
                          END                                                                                           AS CUSTOM_NAME
                   FROM              BIZ100T  A  WITH (NOLOCK)
                          LEFT  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE                                            -- 품목
                                                              AND C1.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE                                            -- 사업장 품목
                                                              AND C2.DIV_CODE    = A.DIV_CODE
                                                              AND C2.ITEM_CODE   = A.ITEM_CODE
                          LEFT  JOIN BCM100T  C3 WITH (NOLOCK) ON C3.COMP_CODE   = C2.COMP_CODE                                            -- 주거래처
                                                              AND C3.CUSTOM_CODE = C2.CUSTOM_CODE
                          LEFT  JOIN BSA100T  M1 WITH (NOLOCK) ON M1.COMP_CODE   = A.COMP_CODE                                            -- 단가처리 기준
                                                              AND M1.MAIN_CODE   = 'B069'
                                                              AND M1.SUB_CODE    = '1'                                                    -- 기준재고단가
                                                              AND M1.REF_CODE1   = 'Y'
                          LEFT  JOIN BSA100T  M2 WITH (NOLOCK) ON M2.COMP_CODE   = C2.COMP_CODE
                                                              AND M2.MAIN_CODE   = 'B020'                                                 -- 계정구분
	
                   WHERE  @SUBCON_FLAG     = '2'
                   AND    A.COMP_CODE      = @COMP_CODE
                   AND    A.DIV_CODE       = @DIV_CODE
                   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0) OR (A.STOCK_Q  = 0.0) OR (A.GOOD_STOCK_Q = 0.0) OR (A.BAD_STOCK_Q = 0.0))
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		AND  ((A.STOCK_Q       != 0.0) OR (A.GOOD_STOCK_Q != 0.0) OR (A.BAD_STOCK_Q != 0.0))
                   </if>

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
				   <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
					AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
					AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                             ELSE C1.ITEM_NAME
                        END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                   AND  ((C1.ITEM_LEVEL1   = @ITEM_LEVEL1     AND @ITEM_LEVEL1  != '') OR (@ITEM_LEVEL1  = ''))        -- 대분류
                   AND  ((C1.ITEM_LEVEL2   = @ITEM_LEVEL2     AND @ITEM_LEVEL2  != '') OR (@ITEM_LEVEL2  = ''))        -- 중분류
                   AND  ((C1.ITEM_LEVEL3   = @ITEM_LEVEL3     AND @ITEM_LEVEL3  != '') OR (@ITEM_LEVEL3  = ''))        -- 소분류
                   ) A
             WHERE 1=1
                   GROUP BY A.COMP_CODE, A.DIV_CODE, A.LOCATION
                          , A.ITEM_ACCOUNT, A.ITEM_ACCOUNT_NAME, A.WH_CODE, A.WH_NAME
                          , A.ITEM_CODE, A.ITEM_NAME, A.SPEC, A.STOCK_UNIT, A.CUSTOM_CODE, A.CUSTOM_NAME
                   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                   		  HAVING (SUM(ISNULL(STOCK_Q, 0)) != 0 OR  SUM(ISNULL(STOCK_Q, 0)) = 0)
                   </if>
                   <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                   		   HAVING SUM(ISNULL(STOCK_Q, 0)) != 0
                   </if>
                   ORDER BY ITEM_ACCOUNT, A.ITEM_CODE

            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END
	</select>

	<select id="biv301skrvServiceImpl.selectMasterList3" parameterType="Map" resultType="rMap">		/* LOT별 */
		/* biv301skrv.Cbiv301skrv[fnBiv300QSt4] Query02 */
		/* 현재고 현황 조회(LOT별) */
             BEGIN
				SET NOCOUNT ON
				SET ARITHABORT ON

				DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
					  , @DIV_CODE    NVARCHAR(08) /* 사업장코드    */
					  , @UserId      NVARCHAR(20) /* 사용자ID    */
					  , @LangType    NVARCHAR(2)  /* 언어구분    */
					  , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
					  , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */

		    SET @CompCode = #{S_COMP_CODE}
		    SET @DIV_CODE = #{DIV_CODE}
		    SET @UserId   = #{S_USER_ID}
		    SET @LangType = #{S_LANG_CODE}

				/* 명칭 참조 유형 */
				SELECT TOP 1 @RefItem = REF_ITEM
				  FROM BSA300T WITH (NOLOCK)
				 WHERE USER_ID = @UserId

				SET @RefItem = ISNULL(@RefItem, N'0')

				/* 날짜 포맷 유형 설정 */
				SELECT TOP 1 @DateFormat = CODE_NAME
				  FROM BSA100T WITH (NOLOCK)
				 WHERE COMP_CODE = @CompCode
				   AND MAIN_CODE = N'B044'
				   AND REF_CODE1 = N'Y'

				SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

				/* 데이터 조회 */
				SELECT TOP 1 @RefItem = REF_ITEM
                 FROM   BSA300T WITH (NOLOCK)
                 WHERE  USER_ID = #{S_USER_ID}

                 SET @RefItem = ISNULL(@RefItem, '0')


                 DECLARE         @LotYN               NVARCHAR(01)

                 SELECT TOP 1 @LotYN = REF_CODE1
                 FROM   BSA100T WITH (NOLOCK)
                 WHERE  COMP_CODE = @CompCode
                 AND    MAIN_CODE = 'B084'                                   /* 재고합산 유형 */
                 AND    SUB_CODE  = 'C'                                      /* Lot No. 합산 */

                 SET @LotYN = ISNULL(@LotYN, 'N')


                 IF @LotYN = 'N'
                 BEGIN
                     SELECT
                            A.LOT_NO                                                                                       AS LOT_NO
                          , D1.TREE_CODE                                                                                   AS WH_CODE
                          , D1.TREE_NAME                                                                                   AS WH_NAME
                          , A.ITEM_CODE                                                                                    AS ITEM_CODE
                          , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                 WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                 WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                 ELSE C1.ITEM_NAME
                            END                                                                                            AS ITEM_NAME
                          , ISNULL(C1.SPEC, '')                                                                            AS SPEC
                          , ISNULL(C1.STOCK_UNIT, '')                                                                      AS STOCK_UNIT
                          , SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0))                               AS STOCK
                          
                          , SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)) - SUM(ISNULL(D2.ISSUE_REQ_QTY,0))	AS USEABLE_STOCK_QTY /*20190114*/
 						  , SUM(ISNULL(D2.ISSUE_REQ_QTY,0))  AS ISSUE_REQ_QTY		/*20190114*/
                          
                          , SUM(CASE WHEN A.ITEM_STATUS = '1' THEN ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)
                                     ELSE 0 END)                                                                           AS GOOD_STOCK
                          , SUM(CASE WHEN A.ITEM_STATUS = '2' THEN ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)
                                     ELSE 0 END)                                                                           AS BAD_STOCK
                          --, A.REMARK
                          , A.DIV_CODE                                                                                     AS DIV_CODE
                          , '' AS REMARK
                          , C1.EXPIRATION_DAY                                                                              AS EXPIRATION_DAY             
                     FROM              BTR100T  A  WITH (NOLOCK, INDEX(BTR100T_IDX07))
                            INNER  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목 */
                                                                AND C1.ITEM_CODE  = A.ITEM_CODE
                                                                AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
                            INNER  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목 */
                                                                AND C2.DIV_CODE   = A.DIV_CODE
                                                                AND C2.ITEM_CODE  = A.ITEM_CODE
                            LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             /* 창고 */
                                                                AND D1.TYPE_LEVEL = A.DIV_CODE
                                                                AND D1.TREE_CODE  = A.WH_CODE
                             LEFT  JOIN (
								SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
								FROM SRQ100T A WITH (NOLOCK)
								INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
								WHERE A.COMP_CODE= @CompCode
								AND A.DIV_CODE= @DIV_CODE
								AND ISNULL(B.ORDER_STATUS,'N')='N'
								AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
								GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
								) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE AND D2.LOT_NO=A.LOT_NO
                     WHERE  A.COMP_CODE      = @CompCode
                     <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                     AND    A.DIV_CODE       = #{DIV_CODE}
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(FR_LOT)">
                     AND    A.LOT_NO        &gt;= #{FR_LOT}              /* FR LOT_NO */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(TO_LOT)">
                     AND    A.LOT_NO        &lt;= #{TO_LOT}              /* TO LOT_NO */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
					   AND A.WH_CODE IN
							<foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
								#{item}
							</foreach>									 -- 창고
					</if>

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
                     <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
						AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
	                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
	                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
	                             ELSE C1.ITEM_NAME
	                        END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                     GROUP BY A.COMP_CODE, A.DIV_CODE
                            , A.ITEM_CODE
                            , C1.ITEM_NAME, C1.ITEM_NAME1, C1.ITEM_NAME2, C1.SPEC, C1.STOCK_UNIT
                            , A.LOT_NO, A.WH_CODE, D1.TREE_CODE, D1.TREE_NAME, C1.EXPIRATION_DAY--, A.REMARK
                     HAVING SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)) != 0
                     ORDER BY A.LOT_NO, A.ITEM_CODE
                 END

                 IF @LotYN = 'Y'
                 BEGIN
                     SELECT
                            A.LOT_NO                                                                                       AS LOT_NO
                          , A.WH_CODE                                                                                      AS WH_CODE                            
                          , D1.TREE_NAME                                                                                   AS WH_NAME
                          , A.ITEM_CODE                                                                                    AS ITEM_CODE
                          , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                 WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                 WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                 ELSE C1.ITEM_NAME
                            END                                                                                            AS ITEM_NAME
                          , ISNULL(C1.SPEC, '')                                                                            AS SPEC
                          , ISNULL(C1.STOCK_UNIT, '')                                                                      AS STOCK_UNIT
                          , SUM(A.STOCK_Q)																				   AS STOCK
                          
                          , SUM(A.GOOD_STOCK_Q)	 - SUM(ISNULL(D2.ISSUE_REQ_QTY,0))											AS USEABLE_STOCK_QTY	/*20190114*/
						  , SUM(ISNULL(D2.ISSUE_REQ_QTY,0))																	AS ISSUE_REQ_QTY		/*20190114*/
                          
                          , SUM(A.GOOD_STOCK_Q)																			   AS GOOD_STOCK
                          , SUM(A.BAD_STOCK_Q)																			   AS BAD_STOCK
                          , A.DIV_CODE                                                                                     AS DIV_CODE
                          , (SELECT  TOP 1 REMARK FROM PMP100TV5_IN WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND LOT_NO=A.LOT_NO AND PLAN_ITEM_CODE=A.ITEM_CODE AND LINE_END_YN='Y' AND ISNULL(WK_PLAN_NUM,'') != '' AND ISNULL(REMARK,'') != '') AS REMARK
                          , C1.EXPIRATION_DAY                                                                              AS EXPIRATION_DAY
                     FROM  (  SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
	                                ,A.GOOD_STOCK_Q, A.BAD_STOCK_Q, A.STOCK_Q
	                           FROM BIV150T  A  WITH (NOLOCK)

	                           WHERE A.COMP_CODE = @CompCode
		                       <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		                     		AND A.DIV_CODE = #{DIV_CODE}
						       </if>
			                     AND A.SUM_TYPE  = 'C'
			                   <if test="INCLUSION == NULL">
			                    -- AND A.STOCK_Q  != 0.0
			                   </if>
							   <if test="ZERO_STOCK_YN == &quot;Y&quot;">
							 		AND (A.STOCK_Q  != 0.0 OR A.STOCK_Q  = 0.0)
							   </if>
							    <if test="ZERO_STOCK_YN != &quot;Y&quot;">
							   		AND A.STOCK_Q  != 0.0
							   </if>


						       UNION ALL

	                           SELECT COMP_CODE, DIV_CODE, WH_CODE, ITEM_CODE, LOT_NO
	                                  ,(CASE WHEN INOUT_TYPE IN ('1', '3') THEN INOUT_Q ELSE (-1) * INOUT_Q END) AS GOOD_STOCK_Q
	                                  ,0 AS BAD_STOCK_Q
	                                  ,(CASE WHEN INOUT_TYPE IN ('1', '3') THEN INOUT_Q ELSE (-1) * INOUT_Q END) AS STOCK_Q
	                           FROM  BTR100T WITH (NOLOCK)
	                           WHERE COMP_CODE = @CompCode
		                       <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		                     		AND DIV_CODE = #{DIV_CODE}
						       </if>
							   AND INOUT_DATE &gt;= CONVERT(NVARCHAR(08), GETDATE(), 112)
						       AND INOUT_DATE &lt;= CONVERT(NVARCHAR(08), DATEADD(D,-1,GETDATE()),112)

                             ) A

                            INNER  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목 */
                                                                AND C1.ITEM_CODE  = A.ITEM_CODE
                                                                AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
                            INNER  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목 */
                                                                AND C2.DIV_CODE   = A.DIV_CODE
                                                                AND C2.ITEM_CODE  = A.ITEM_CODE
                            LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             /* 창고 */
                                                                AND D1.TYPE_LEVEL = A.DIV_CODE
                                                                AND D1.TREE_CODE  = A.WH_CODE
                            LEFT  JOIN (
											SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
											FROM SRQ100T A WITH (NOLOCK)
													INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
											WHERE A.COMP_CODE= @CompCode
											AND A.DIV_CODE= @DIV_CODE
											AND ISNULL(B.ORDER_STATUS,'N')='N'
											AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
											GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
									   ) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE AND D2.LOT_NO=A.LOT_NO
                                                                
                     WHERE  A.COMP_CODE      = @CompCode
                     /*
                     AND    A.SUM_TYPE       = 'C'
                     AND    A.STOCK_Q       != 0.0
                     */
                     <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                     AND    A.DIV_CODE       = #{DIV_CODE}
				     </if>
                     <if test="@foren.Ognl@isNotEmpty(FR_LOT)">
                     AND    A.LOT_NO        &gt;= #{FR_LOT}                 /* FR LOT_NO */
				     </if>
                     <if test="@foren.Ognl@isNotEmpty(TO_LOT)">
                     AND    A.LOT_NO        &lt;= #{TO_LOT}                 /* TO LOT_NO */
				     </if>
                      <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
					   AND A.WH_CODE IN
							<foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
								#{item}
							</foreach>									 -- 창고
					</if>

					<if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
					   AND C2.ITEM_ACCOUNT IN
							<foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
								#{item2}
							</foreach>								 -- 계정
					</if>
                     <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
						AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
	                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
	                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
	                             ELSE C1.ITEM_NAME
	                        END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
				     <if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
                     AND    C1.ITEM_LEVEL1   = #{TXTLV_L1}             /* 대분류 */
				     </if>
                     <if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
                     AND    C1.ITEM_LEVEL2   = #{TXTLV_L2}             /* 중분류 */
				     </if>
                     <if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
                     AND    C1.ITEM_LEVEL3   = #{TXTLV_L3}             /* 소분류 */
				     </if>

                     GROUP BY A.COMP_CODE, A.DIV_CODE
                            , A.ITEM_CODE
                            , C1.ITEM_NAME, C1.ITEM_NAME1, C1.ITEM_NAME2, C1.SPEC, C1.STOCK_UNIT
                            , A.LOT_NO, A.WH_CODE, D1.TREE_CODE, D1.TREE_NAME, C1.EXPIRATION_DAY
                     <if test="INCLUSION == NULL">
                   --  HAVING ( (	   SUM(ISNULL(A.STOCK_Q, 0)) 	  != 0
                  --   			OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0
			       --             OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0 )
			       --          )
                     </if>
                     <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                     	  HAVING ( SUM(ISNULL(A.STOCK_Q, 0)) 	  != 0 	OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0	OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0
                     	  				OR  SUM(ISNULL(A.STOCK_Q, 0)) 	  = 0 	OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) = 0	OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  = 0 )

                     </if>
                     <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                     	    HAVING ( (  SUM(ISNULL(A.STOCK_Q, 0)) 	  != 0
                 						OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0
			                 			OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0 ))

                     </if>
			    /*2010.07.01 총재고, 양품재고, 불량재고 등이 모두 0이면 안보이도록 수정 Park Dong Young*/
			    /*
			                     AND (ISNULL(A.STOCK_Q, 0)      != 0
			                      OR  ISNULL(A.GOOD_STOCK_Q, 0) != 0
			                      OR  ISNULL(A.BAD_STOCK_Q, 0)  != 0 )
			    */
			     ORDER BY A.LOT_NO, A.ITEM_CODE
	          END

		    SET NOCOUNT OFF
	        SET ARITHABORT OFF

		  END
	</select>

	<select id="biv301skrvServiceImpl.getgsWHGroupYN" parameterType="Map" resultType="rMap">	/* 창고그룹 사용여부 */
		SELECT ISNULL(MAX(GROUP_CD),'') GROUP_CD FROM BSA220T WITH (NOLOCK)
        WHERE  COMP_CODE  = #{S_COMP_CODE}
	</select>



<!-- 20190715 추가: LOT별 현재고 현황 -->
	<select id="biv301skrvServiceImpl.detailDataList" parameterType="Map" resultType="rMap">
		/* biv301skrvServiceImpl.20190715 추가: LOT별 현재고 현황  */
             BEGIN
                SET NOCOUNT ON
                SET ARITHABORT ON

                DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
                      , @DIV_CODE    NVARCHAR(08) /* 사업장코드    */
                      , @UserId      NVARCHAR(20) /* 사용자ID    */
                      , @LangType    NVARCHAR(2)  /* 언어구분    */
                      , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
                      , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */

            SET @CompCode = #{S_COMP_CODE}
            SET @DIV_CODE = #{DIV_CODE}
            SET @UserId   = #{S_USER_ID}
            SET @LangType = #{S_LANG_CODE}

                /* 명칭 참조 유형 */
                SELECT TOP 1 @RefItem = REF_ITEM
                  FROM BSA300T WITH (NOLOCK)
                 WHERE USER_ID = @UserId

                SET @RefItem = ISNULL(@RefItem, N'0')

                /* 날짜 포맷 유형 설정 */
                SELECT TOP 1 @DateFormat = CODE_NAME
                  FROM BSA100T WITH (NOLOCK)
                 WHERE COMP_CODE = @CompCode
                   AND MAIN_CODE = N'B044'
                   AND REF_CODE1 = N'Y'

                SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

                /* 데이터 조회 */
                SELECT TOP 1 @RefItem = REF_ITEM
                 FROM   BSA300T WITH (NOLOCK)
                 WHERE  USER_ID = #{S_USER_ID}

                 SET @RefItem = ISNULL(@RefItem, '0')


                 DECLARE         @LotYN               NVARCHAR(01)

                 SELECT TOP 1 @LotYN = REF_CODE1
                 FROM   BSA100T WITH (NOLOCK)
                 WHERE  COMP_CODE = @CompCode
                 AND    MAIN_CODE = 'B084'                                   /* 재고합산 유형 */
                 AND    SUB_CODE  = 'C'                                      /* Lot No. 합산 */

                 SET @LotYN = ISNULL(@LotYN, 'N')


                 IF @LotYN = 'N'
                 BEGIN
                     SELECT
                            A.LOT_NO                                                                                       AS LOT_NO
                          , D1.TREE_CODE                                                                                   AS WH_CODE
                          , D1.TREE_NAME                                                                                   AS WH_NAME
                          , A.ITEM_CODE                                                                                    AS ITEM_CODE
                          , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                 WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                 WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                 ELSE C1.ITEM_NAME
                            END                                                                                            AS ITEM_NAME
                          , ISNULL(C1.SPEC, '')                                                                            AS SPEC
                          , ISNULL(C1.STOCK_UNIT, '')                                                                      AS STOCK_UNIT
                          , SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0))                               AS STOCK
                          
                          , SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)) - SUM(ISNULL(D2.ISSUE_REQ_QTY,0))    AS USEABLE_STOCK_QTY /*20190114*/
                           , SUM(ISNULL(D2.ISSUE_REQ_QTY,0))  AS ISSUE_REQ_QTY        /*20190114*/
                          
                          , SUM(CASE WHEN A.ITEM_STATUS = '1' THEN ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)
                                     ELSE 0 END)                                                                           AS GOOD_STOCK
                          , SUM(CASE WHEN A.ITEM_STATUS = '2' THEN ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)
                                     ELSE 0 END)                                                                           AS BAD_STOCK
                          --, A.REMARK
                          , A.DIV_CODE                                                                                     AS DIV_CODE
                          , '' AS REMARK
                          , C1.EXPIRATION_DAY
                     FROM              BTR100T  A  WITH (NOLOCK, INDEX(BTR100T_IDX07))
                            INNER  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목 */
                                                                AND C1.ITEM_CODE  = A.ITEM_CODE
                                                                AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
                            INNER  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목 */
                                                                AND C2.DIV_CODE   = A.DIV_CODE
                                                                AND C2.ITEM_CODE  = A.ITEM_CODE
                            LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             /* 창고 */
                                                                AND D1.TYPE_LEVEL = A.DIV_CODE
                                                                AND D1.TREE_CODE  = A.WH_CODE
                             LEFT  JOIN (
                                SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
                                FROM SRQ100T A WITH (NOLOCK)
                                INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
                                WHERE A.COMP_CODE= @CompCode
                                AND A.DIV_CODE= @DIV_CODE
                                AND ISNULL(B.ORDER_STATUS,'N')='N'
                                AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
                                GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
                                ) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE AND D2.LOT_NO=A.LOT_NO
                     WHERE  A.COMP_CODE      = @CompCode
                     <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                     AND    A.DIV_CODE       = #{DIV_CODE}
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(FR_LOT)">
                     AND    A.LOT_NO        &gt;= #{FR_LOT}              /* FR LOT_NO */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(TO_LOT)">
                     AND    A.LOT_NO        &lt;= #{TO_LOT}              /* TO LOT_NO */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
                       AND A.WH_CODE IN
                            <foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
                                #{item}
                            </foreach>                                     -- 창고
                    </if>

                    <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
                       AND C2.ITEM_ACCOUNT IN
                            <foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
                                #{item2}
                            </foreach>                                 -- 계정
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
						AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
	                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
	                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
	                             ELSE C1.ITEM_NAME
	                    END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                     GROUP BY A.COMP_CODE, A.DIV_CODE
                            , A.ITEM_CODE
                            , C1.ITEM_NAME, C1.ITEM_NAME1, C1.ITEM_NAME2, C1.SPEC, C1.STOCK_UNIT
                            , A.LOT_NO, A.WH_CODE, D1.TREE_CODE, D1.TREE_NAME, C1.EXPIRATION_DAY--, A.REMARK
                     HAVING SUM(ISNULL(A.IN_Q, 0) - ISNULL(A.OUT_Q, 0) + ISNULL(A.RTN_Q, 0)) != 0
                     ORDER BY A.LOT_NO, A.ITEM_CODE
                 END

                 IF @LotYN = 'Y'
                 BEGIN
                     SELECT
                            A.LOT_NO                                                                                       AS LOT_NO
                          , A.WH_CODE                                                                                      AS WH_CODE                            
                          , D1.TREE_NAME                                                                                   AS WH_NAME
                          , A.ITEM_CODE                                                                                    AS ITEM_CODE
                          , CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
                                 WHEN @RefItem = '1' THEN C1.ITEM_NAME1
                                 WHEN @RefItem = '2' THEN C1.ITEM_NAME2
                                 ELSE C1.ITEM_NAME
                            END                                                                                            AS ITEM_NAME
                          , ISNULL(C1.SPEC, '')                                                                            AS SPEC
                          , ISNULL(C1.STOCK_UNIT, '')                                                                      AS STOCK_UNIT
                          , SUM(A.STOCK_Q)                                                                                   AS STOCK
                          
                          , SUM(A.GOOD_STOCK_Q)     - SUM(ISNULL(D2.ISSUE_REQ_QTY,0))                                            AS USEABLE_STOCK_QTY    /*20190114*/
                          , SUM(ISNULL(D2.ISSUE_REQ_QTY,0))                                                                    AS ISSUE_REQ_QTY        /*20190114*/
                          
                          , SUM(A.GOOD_STOCK_Q)                                                                               AS GOOD_STOCK
                          , SUM(A.BAD_STOCK_Q)                                                                               AS BAD_STOCK
                          , A.DIV_CODE                                                                                     AS DIV_CODE
                          , (SELECT  TOP 1 REMARK FROM PMP100TV5_IN WHERE COMP_CODE=A.COMP_CODE AND DIV_CODE=A.DIV_CODE AND LOT_NO=A.LOT_NO AND PLAN_ITEM_CODE=A.ITEM_CODE AND LINE_END_YN='Y' AND ISNULL(WK_PLAN_NUM,'') != '' AND ISNULL(REMARK,'') != '') AS REMARK
                          , C1.EXPIRATION_DAY
                     FROM  (  SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
                                    ,A.GOOD_STOCK_Q, A.BAD_STOCK_Q, A.STOCK_Q
                               FROM BIV150T  A  WITH (NOLOCK)

                               WHERE A.COMP_CODE = @CompCode
                               <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                                     AND A.DIV_CODE = #{DIV_CODE}
                               </if>
                                 AND A.SUM_TYPE  = 'C'
                               <if test="INCLUSION == NULL">
                                -- AND A.STOCK_Q  != 0.0
                               </if>
                               <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                                     AND (A.STOCK_Q  != 0.0 OR A.STOCK_Q  = 0.0)
                               </if>
                                <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                                       AND A.STOCK_Q  != 0.0
                               </if>


                               UNION ALL

                               SELECT COMP_CODE, DIV_CODE, WH_CODE, ITEM_CODE, LOT_NO
                                      ,(CASE WHEN INOUT_TYPE IN ('1', '3') THEN INOUT_Q ELSE (-1) * INOUT_Q END) AS GOOD_STOCK_Q
                                      ,0 AS BAD_STOCK_Q
                                      ,(CASE WHEN INOUT_TYPE IN ('1', '3') THEN INOUT_Q ELSE (-1) * INOUT_Q END) AS STOCK_Q
                               FROM  BTR100T WITH (NOLOCK)
                               WHERE COMP_CODE = @CompCode
                               <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                                     AND DIV_CODE = #{DIV_CODE}
                               </if>
                               AND INOUT_DATE &gt;= CONVERT(NVARCHAR(08), GETDATE(), 112)
                               AND INOUT_DATE &lt;= CONVERT(NVARCHAR(08), DATEADD(D,-1,GETDATE()),112)

                             ) A

                            INNER  JOIN BPR100T  C1 WITH (NOLOCK) ON C1.COMP_CODE  = A.COMP_CODE                                             /* 품목 */
                                                                AND C1.ITEM_CODE  = A.ITEM_CODE
                                                                AND ISNULL(C1.STOCK_CARE_YN,'N') = 'Y'                                      /* 2015.10.02 추가 */
                            INNER  JOIN BPR200T  C2 WITH (NOLOCK) ON C2.COMP_CODE  = A.COMP_CODE                                             /* 사업장 품목 */
                                                                AND C2.DIV_CODE   = A.DIV_CODE
                                                                AND C2.ITEM_CODE  = A.ITEM_CODE
                            LEFT  JOIN BSA220T  D1 WITH (NOLOCK) ON D1.COMP_CODE  = A.COMP_CODE                                             /* 창고 */
                                                                AND D1.TYPE_LEVEL = A.DIV_CODE
                                                                AND D1.TREE_CODE  = A.WH_CODE
                            LEFT  JOIN (
                                            SELECT A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO, SUM((A.ISSUE_REQ_QTY-A.ISSUE_QTY)*A.TRANS_RATE) AS ISSUE_REQ_QTY
                                            FROM SRQ100T A WITH (NOLOCK)
                                                    INNER JOIN SOF110T B WITH (NOLOCK) ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.ORDER_NUM=B.ORDER_NUM AND A.SER_NO=B.SER_NO
                                            WHERE A.COMP_CODE= @CompCode
                                            AND A.DIV_CODE= @DIV_CODE
                                            AND ISNULL(B.ORDER_STATUS,'N')='N'
                                            AND A.ISSUE_REQ_QTY <![CDATA[<>]]> A.ISSUE_QTY
                                            GROUP BY A.COMP_CODE, A.DIV_CODE, A.WH_CODE, A.ITEM_CODE, A.LOT_NO
                                       ) D2 ON D2.COMP_CODE=A.COMP_CODE AND D2.DIV_CODE=A.DIV_CODE AND D2.WH_CODE=A.WH_CODE AND D2.ITEM_CODE=A.ITEM_CODE AND D2.LOT_NO=A.LOT_NO
                                                                
                     WHERE  A.COMP_CODE      = @CompCode
                     /*
                     AND    A.SUM_TYPE       = 'C'
                     AND    A.STOCK_Q       != 0.0
                     */
                     <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                     AND    A.DIV_CODE       = #{DIV_CODE}
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(FR_LOT)">
                     AND    A.LOT_NO        &gt;= #{FR_LOT}                 /* FR LOT_NO */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(TO_LOT)">
                     AND    A.LOT_NO        &lt;= #{TO_LOT}                 /* TO LOT_NO */
                     </if>
                      <if test="@foren.Ognl@isNotEmpty(WH_CODE)">
                       AND A.WH_CODE IN
                            <foreach collection="WH_CODE" item="item" separator="," close=")" open="(">
                                #{item}
                            </foreach>                                     -- 창고
                    </if>

                    <if test="@foren.Ognl@isNotEmpty(ITEM_ACCOUNT)">
                       AND C2.ITEM_ACCOUNT IN
                            <foreach collection="ITEM_ACCOUNT" item="item2" separator="," close=")" open="(">
                                #{item2}
                            </foreach>                                 -- 계정
                    </if>
                     <if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND A.ITEM_CODE = #{ITEM_CODE}
					</if>
					<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
						AND A.ITEM_CODE LIKE #{ITEM_CODE} + '%'
					</if>
					<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
						AND CASE WHEN @RefItem = '0' THEN C1.ITEM_NAME
	                             WHEN @RefItem = '1' THEN C1.ITEM_NAME1
	                             WHEN @RefItem = '2' THEN C1.ITEM_NAME2
	                             ELSE C1.ITEM_NAME
	                        END LIKE '%' + #{ITEM_NAME} + '%' 
					</if>
                     <if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
                     AND    C1.ITEM_LEVEL1   = #{TXTLV_L1}             /* 대분류 */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
                     AND    C1.ITEM_LEVEL2   = #{TXTLV_L2}             /* 중분류 */
                     </if>
                     <if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
                     AND    C1.ITEM_LEVEL3   = #{TXTLV_L3}             /* 소분류 */
                     </if>

                     GROUP BY A.COMP_CODE, A.DIV_CODE
                            , A.ITEM_CODE
                            , C1.ITEM_NAME, C1.ITEM_NAME1, C1.ITEM_NAME2, C1.SPEC, C1.STOCK_UNIT
                            , A.LOT_NO, A.WH_CODE, D1.TREE_CODE, D1.TREE_NAME, C1.EXPIRATION_DAY
                     <if test="INCLUSION == NULL">
                   --  HAVING ( (       SUM(ISNULL(A.STOCK_Q, 0))       != 0
                  --               OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0
                   --             OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0 )
                   --          )
                     </if>
                     <if test="ZERO_STOCK_YN == &quot;Y&quot;">
                           HAVING ( SUM(ISNULL(A.STOCK_Q, 0))       != 0     OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0    OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0
                                           OR  SUM(ISNULL(A.STOCK_Q, 0))       = 0     OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) = 0    OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  = 0 )

                     </if>
                     <if test="ZERO_STOCK_YN != &quot;Y&quot;">
                             HAVING ( (  SUM(ISNULL(A.STOCK_Q, 0))       != 0
                                         OR SUM(ISNULL(A.GOOD_STOCK_Q, 0)) != 0
                                         OR SUM(ISNULL(A.BAD_STOCK_Q, 0))  != 0 ))

                     </if>
                /*2010.07.01 총재고, 양품재고, 불량재고 등이 모두 0이면 안보이도록 수정 Park Dong Young*/
                /*
                                 AND (ISNULL(A.STOCK_Q, 0)      != 0
                                  OR  ISNULL(A.GOOD_STOCK_Q, 0) != 0
                                  OR  ISNULL(A.BAD_STOCK_Q, 0)  != 0 )
                */
                 ORDER BY A.LOT_NO, A.ITEM_CODE
              END

            SET NOCOUNT OFF
            SET ARITHABORT OFF

          END
	</select>
	
	<select id="biv301skrvServiceImpl.selectIssuereqList" parameterType="Map" resultType="rMap">
		/* biv301skrvServiceImpl.selectIssuereqList */
			SELECT A.ITEM_CODE
				 , G.ITEM_NAME
				 , A.LOT_NO
				 , A.CUSTOM_CODE
				 , B.CUSTOM_NAME
				 , A.ISSUE_REQ_DATE	--출하지시일
				 , A.ISSUE_REQ_QTY	--출하지시량
				 , A.ORDER_UNIT		--판매단위
				 , A.TRANS_RATE		--입수
				 , A.ISSUE_REQ_QTY*A.TRANS_RATE AS STOCK_REQ_QTY 	--출고수량(재고단위)
				 , A.ISSUE_QTY		--출고수량(판매단위)
				 , A.ISSUE_REQ_QTY-A.ISSUE_QTY AS REMAIN_ISSUE_QTY	--미출고(판매단위)
				 , E.TREE_NAME AS WH_NAME	--출고창고
				 , F.WH_CELL_NAME			--출고창고CELL
				 , C.INOUT_DATE				--출고일
				 , D.CODE_NAME AS INOUT_TYPE_DETAIL_NAME			--출고유형
				 , A.REMARK		--비고
				 , A.REMARK_INTER	--내부비고
			  FROM SRQ100T A
		INNER JOIN BCM100T B WITH (NOLOCK) ON B.COMP_CODE 		= A.COMP_CODE
										  AND B.CUSTOM_CODE		= A.CUSTOM_CODE
		LEFT  JOIN BTR100T C WITH (NOLOCK) ON C.COMP_CODE		= A.COMP_CODE
										  AND C.DIV_CODE		= A.DIV_CODE
										  AND C.ISSUE_REQ_NUM	= A.ISSUE_REQ_NUM
										  AND C.ISSUE_REQ_SEQ	= A.ISSUE_REQ_SEQ
		LEFT  JOIN BSA100T D WITH (NOLOCK) ON D.COMP_CODE		= C.COMP_CODE 
										  AND D.SUB_CODE		= A.INOUT_TYPE_DETAIL
										  AND D.MAIN_CODE		= 'S007'
		LEFT  JOIN BSA220T E WITH (NOLOCK) ON E.COMP_CODE		= C.COMP_CODE
										  AND E.TYPE_LEVEL		= C.DIV_CODE
										  AND E.TREE_CODE		= C.WH_CODE
		LEFT  JOIN BSA225T F WITH (NOLOCK) ON F.COMP_CODE		= C.COMP_CODE
										  AND F.DIV_CODE		= C.DIV_CODE
										  AND F.WH_CODE			= C.WH_CODE
										  AND F.WH_CELL_CODE	= C.WH_CELL_CODE
		INNER JOIN BPR100T G WITH (NOLOCK) ON A.COMP_CODE 		= G.COMP_CODE
										  AND A.ITEM_CODE 		= G.ITEM_CODE
										  
		WHERE A.COMP_CODE 	= #{S_COMP_CODE}
		  AND A.DIV_CODE 	= #{DIV_CODE}
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		  AND A.ITEM_CODE 	= #{ITEM_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
		  AND A.ITEM_CODE	LIKE #{ITEM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		  AND G.ITEM_NAME 	LIKE '%' + #{ITEM_NAME} + '%' 
		</if>
		  AND A.LOT_NO 		LIKE #{LOT_NO} + '%'
		<if test="ISSUE_YN == &quot;N&quot;">
		  AND C.COMP_CODE IS NULL
		</if>
		<if test="ISSUE_YN == &quot;Y&quot;">
		  AND C.COMP_CODE IS NOT NULL
		</if>
		  
	 ORDER BY A.LOT_NO, A.ISSUE_REQ_DATE DESC
	</select>
</mapper>