<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="btr901ukrvServiceImpl">
<!-- 조회팝업 쿼리 -->
	<select id="btr901ukrvServiceImpl.searchPopupList" parameterType="Map" resultType="rMap">
		/* btr901ukrvServiceImpl.searchPopupList (btr901ukrv.Cbtr901ukrv[fnbtr901pop] Query01) (조회팝업 쿼리) */
		DECLARE     @COMP_CODE      NVARCHAR(08)    --법인코드
		          , @DIV_CODE       NVARCHAR(20)    --사업장
		          , @FR_DATE        NVARCHAR(08)    --분해일(FR)
		          , @TO_DATE        NVARCHAR(08)    --분해일(TO)
		          , @WH_CODE        NVARCHAR(08)    --분해창고
		          , @ITEM_CODE      NVARCHAR(20)    --품목코드
		          , @ITEM_NAME      NVARCHAR(40)    --품목명
		          , @INOUT_NUM      NVARCHAR(20)    --분해번호
		          , @PROJECT_NO     NVARCHAR(20)    --관리번호
		          , @USER_ID        NVARCHAR(20)    --USER_ID

		SET    @COMP_CODE  = #{S_COMP_CODE}
		SET    @USER_ID    = #{S_USER_ID}
		SET    @DIV_CODE   = #{DIV_CODE}
		SET    @FR_DATE    = #{FR_DATE}
		SET    @TO_DATE    = #{TO_DATE}
		SET    @WH_CODE    = #{WH_CODE}
		SET    @ITEM_CODE  = #{ITEM_CODE}
		SET    @ITEM_NAME  = #{ITEM_NAME}
		SET    @INOUT_NUM  = #{INOUT_NUM}
		SET    @PROJECT_NO = #{PROJECT_NO}

		SELECT
		       B.DIV_CODE
		     , B.DIV_NAME
		     , A.ITEM_CODE
		     , uniLITE.fnItemNameComp(@COMP_CODE, @USER_ID, A.ITEM_CODE) AS ITEM_NAME
		     , C.SPEC
		     , uniLITE.fnGetUserDateComp(@COMP_CODE, A.INOUT_DATE)       AS INOUT_DATE
		     , A.INOUT_Q
		     , A.WH_CODE
		     --, D.TREE_NAME                                               AS WH_NAME
		     , A.WH_CELL_CODE                                            --20210405 추가
		     --, E.WH_CELL_NAME                                            --20210405 추가
		     , A.INOUT_NUM
		     , A.PROJECT_NO
		     , A.ITEM_STATUS
		     , A.LOT_NO
		  FROM       BTR100T A WITH (NOLOCK)
		  INNER JOIN BOR120T B WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
		                                    AND B.DIV_CODE     = A.DIV_CODE
		  INNER JOIN BPR100T C WITH (NOLOCK) ON C.COMP_CODE    = A.COMP_CODE
		                                    AND C.ITEM_CODE    = A.ITEM_CODE
		  --INNER JOIN BSA220T D WITH (NOLOCK) ON D.COMP_CODE    = A.COMP_CODE
		  --                                  AND D.TREE_CODE    = A.WH_CODE
		  ----20210405 추가
		  --LEFT  JOIN BSA225T E WITH (NOLOCK) ON E.COMP_CODE    = A.COMP_CODE
		  --                                  AND E.DIV_CODE     = A.DIV_CODE
		  --                                  AND E.WH_CODE      = A.WH_CODE
		  --                                  AND E.WH_CELL_CODE = A.WH_CELL_CODE
		  WHERE 1 = 1
		    AND A.COMP_CODE   = @COMP_CODE
		    AND A.INOUT_METH  ='D'
		    AND A.INOUT_TYPE  ='2'
		    AND A.DIV_CODE    = @DIV_CODE
		    AND A.INOUT_DATE &gt;= @FR_DATE
		    AND A.INOUT_DATE &lt;= @TO_DATE
		<if test="@foren.Ognl@isNotEmpty(WH_CODE)">
		    AND A.WH_CODE     = @WH_CODE
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
		    AND A.ITEM_CODE   LIKE @ITEM_CODE + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
		    AND C.ITEM_NAME   LIKE @ITEM_NAME + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(INOUT_NUM)">
		    AND A.INOUT_NUM   LIKE @INOUT_NUM + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(PROJECT_NO)">
		    AND A.PROJECT_NO  LIKE @PROJECT_NO + '%'
		</if>
		  ORDER BY
		     A.INOUT_NUM, B.DIV_CODE, A.ITEM_CODE
	</select>

<!-- LOT별 재고수량 가져오기 -->
	<select id="btr901ukrvServiceImpl.findLotStockQ" parameterType="Map" resultType="rMap">
		/* btr901ukrvServiceImpl.findLotStockQ (UBtr10krv.Cbtr901n[fnbtr901strockq]Query01) (LOT별 재고수량 가져오기) */
		--UBtr10krv.Cbtr901n[fnbtr901strockq]Query01
		SELECT  A.ITEM_CODE
		      , B.ITEM_NAME
		      , ISNULL(A.STOCK_Q     , 0)   AS STOCK_Q
		      , ISNULL(A.GOOD_STOCK_Q, 0)   AS GOOD_STOCK_Q
		      , ISNULL(A.BAD_STOCK_Q , 0)   AS BAD_STOCK_Q
		  FROM        BIV150T     A  WITH (NOLOCK)
		  INNER JOIN  BPR200T     B  WITH (NOLOCK) ON  B.COMP_CODE =  A.COMP_CODE
		                                          AND  B.DIV_CODE  =  A.DIV_CODE
		                                          AND  B.ITEM_CODE =  A.ITEM_CODE
		 WHERE A.COMP_CODE    = #{S_COMP_CODE}
		   AND A.DIV_CODE     = #{DIV_CODE}
		   AND A.ITEM_CODE    = #{ITEM_CODE}
		   AND A.WH_CODE      = #{WH_CODE}
<!-- 20210405 추가: WH_CELL_CODE 추가로 로직 변경 -->
		<if test="@foren.Ognl@isNotEmpty(WH_CELL_CODE)">
		   AND A.WH_CELL_CODE = #{WH_CELL_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(LOT_NO)">
		   AND A.LOT_NO       = #{LOT_NO}
		</if>
	</select>

<!-- 재고수량 가져오기 -->
	<select id="btr901ukrvServiceImpl.findStockQ" parameterType="Map" resultType="rMap">
		/* btr901ukrvServiceImpl.findStockQ (UBtr10krv.Cbtr901n[fnbtr901strockq]Query01) (재고수량 가져오기) */
		SELECT  A.ITEM_CODE
		      , B.ITEM_NAME
		      , ISNULL(A.STOCK_Q     , 0)   AS STOCK_Q
		      , ISNULL(A.GOOD_STOCK_Q, 0)   AS GOOD_STOCK_Q
		      , ISNULL(A.BAD_STOCK_Q , 0)   AS BAD_STOCK_Q
		  FROM        BIV100T     A  WITH (NOLOCK)
		  INNER JOIN  BPR200T     B  WITH (NOLOCK) ON  B.COMP_CODE =  A.COMP_CODE
		                                          AND  B.DIV_CODE  =  A.DIV_CODE
		                                          AND  B.ITEM_CODE =  A.ITEM_CODE
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.DIV_CODE  = #{DIV_CODE}
		   AND A.WH_CODE   = #{WH_CODE}
		   AND A.ITEM_CODE = #{ITEM_CODE}
	</select>

<!-- 자료생성 버튼 로직 -->
	<select id="btr901ukrvServiceImpl.BtnCreateStock" parameterType="Map" resultType="rMap">
		/* btr901ukrvServiceImpl.BtnCreateStock (자료생성 버튼 로직) */
		DECLARE     @COMP_CODE      NVARCHAR(08)       -- 법인코드
		          , @DIV_CODE       NVARCHAR(08)       -- 사업장
		          , @INOUT_DATE     NVARCHAR(08)       -- 분해일
		          , @ITEM_CODE      NVARCHAR(20)       -- 분해 품목코드
		          , @ITEM_NAME      NVARCHAR(40)       -- 분해 품목명
		          , @USE_YN         NVARCHAR(02)       -- BOM사용여부
		          , @STOCK_Q        NUMERIC(18,6)      -- 분해수량
		          , @USER_ID        NVARCHAR(20)       -- USER_ID

		SET    @COMP_CODE  = #{S_COMP_CODE}
		SET    @DIV_CODE   = #{DIV_CODE}
		SET    @INOUT_DATE = #{INOUT_DATE}
		SET    @ITEM_CODE  = #{ITEM_CODE}
		SET    @ITEM_NAME  = #{ITEM_NAME}
		SET    @USE_YN     = #{useBom}
		SET    @STOCK_Q    = #{CHANGESTOCK_Q}
		SET    @USER_ID    = #{S_USER_ID}

		SELECT A.COMP_CODE
		     , A.DIV_CODE
		     , ''                                                              AS INOUT_NUM
		     , ROW_NUMBER() OVER(ORDER BY A.SEQ)                               AS INOUT_SEQ
		     , 0                                                               AS INOUT_SEQ
		     , 0                                                               AS INOUT_SEQ_NEW
		     , '1'                                                             AS INOUT_TYPE
		     , A.CHILD_ITEM_CODE                                               AS ITEM_CODE
		     , B.ITEM_NAME
		     , C.SPEC
		     , C.STOCK_UNIT
		     , ISNULL(A.UNIT_Q, 1.0) / ISNULL(A.PROD_UNIT_Q, 1.0)              AS UNIT_Q
		     , B.WH_CODE
		     , CASE WHEN ISNULL(B.WH_CELL_CODE, '') = '' THEN E.WH_CELL_CODE
		            ELSE B.WH_CELL_CODE
		       END                                                             AS WH_CELL_CODE  --20250405 추가
		     , (@STOCK_Q * ISNULL(A.UNIT_Q, 1.0) / ISNULL(A.PROD_UNIT_Q, 1.0)) AS SUM_INOUT_Q
		     , (@STOCK_Q * ISNULL(A.UNIT_Q, 1.0) / ISNULL(A.PROD_UNIT_Q, 1.0)) AS GOOD_INOUT_Q
		     , 0                                                               AS BAD_INOUT_Q
		     , ''                                                              AS LOT_NO
		     , @USER_ID                                                        AS UPDATE_DB_USER
		     , ''                                                              AS UPDATE_DB_TIME
		     , uniLITE.fnGetUserDateComp(@COMP_CODE, @INOUT_DATE)              AS INOUT_DATE
		     , B.BASIS_P                                                       AS INOUT_P
		     , ((@STOCK_Q * A.UNIT_Q) * B.BASIS_P)                             AS INOUT_I
		     , A.USE_YN
		     , 'N'                                                             AS ACCOUNT_YNC
		     , '2'                                                             AS INOUT_CODE_TYPE
		     , 1                                                               AS TRNS_RATE
		     , B.ITEM_ACCOUNT
		  FROM       BPR500T A WITH (NOLOCK)
		  INNER JOIN BPR200T B WITH (NOLOCK) ON B.COMP_CODE  = A.COMP_CODE
		                                    AND B.ITEM_CODE  = A.CHILD_ITEM_CODE
		  INNER JOIN BPR100T C WITH (NOLOCK) ON C.COMP_CODE  = B.COMP_CODE
		                                    AND C.ITEM_CODE  = B.ITEM_CODE
		  INNER JOIN BSA220T D WITH (NOLOCK) ON D.COMP_CODE = B.COMP_CODE
		                                    AND D.TREE_CODE = B.WH_CODE
		  LEFT  JOIN BSA225T E WITH (NOLOCK) ON E.COMP_CODE  = B.COMP_CODE     --20250405 추가
		                                    AND E.DIV_CODE   = B.DIV_CODE
		                                    AND E.WH_CODE    = B.WH_CODE
		                                    AND E.DEFAULT_YN = 'Y'
		 WHERE 1 = 1
		   AND A.COMP_CODE             = @COMP_CODE
		   AND A.CHILD_ITEM_CODE      != '$'
		   AND ISNULL(D.GROUP_CD, '') != 'Z'
		   AND A.DIV_CODE              = @DIV_CODE
		   AND A.PROD_ITEM_CODE        = @ITEM_CODE
		   AND A.USE_YN                = CASE WHEN ISNULL(@USE_YN, '') = '' THEN A.USE_YN
		                                      ELSE @USE_YN
		                                 END
		 ORDER BY A.SEQ
	</select>

<!-- 데이터 조회 -->
	<select id="btr901ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* btr901ukrvServiceImpl.selectList (btr901ukrv.Cbtr901ukrv[fnbtr901q] Query01) (데이터 조회) */
		DECLARE      @COMP_CODE      NVARCHAR(08)       -- 법인코드
		           , @DIV_CODE       NVARCHAR(08)       -- 사업장
		           , @ITEM_CODE      NVARCHAR(20)       -- 분해 품목코드
		           , @ITEM_NAME      NVARCHAR(40)       -- 분해 품목명
		           , @USE_YN         NVARCHAR(02)       -- BOM사용여부
		           , @INOUT_NUM      NVARCHAR(20)       -- 분해번호
		           , @USER_ID        NVARCHAR(20)       -- USER_ID

		SET    @COMP_CODE  = #{S_COMP_CODE}
		SET    @DIV_CODE   = #{DIV_CODE}
		SET    @ITEM_CODE  = #{ITEM_CODE}
		SET    @ITEM_NAME  = #{ITEM_NAME}
		SET    @USE_YN     = #{useBom}
		SET    @INOUT_NUM  = #{INOUT_NUM}
		SET    @USER_ID    = #{S_USER_ID}

		SELECT  A.COMP_CODE
		      , A.DIV_CODE
		      , A.INOUT_NUM
		      , '0'                                                                 AS INOUT_SEQ
--		      , ROW_NUMBER() OVER(ORDER BY A.INOUT_NUM, A.INOUT_SEQ)                AS INOUT_SEQ_NEW
		      , A.INOUT_TYPE
		      , A.ITEM_CODE
		      , uniLITE.fnItemNameComp(@COMP_CODE, @USER_ID, A.ITEM_CODE)           AS ITEM_NAME
		      , C.SPEC
		      , C.STOCK_UNIT
		      , CASE WHEN ISNULL(E.UNIT_Q, 0) != 0 THEN ISNULL(E.UNIT_Q, 1.0) / ISNULL(E.PROD_UNIT_Q, 1.0)
		             ELSE 1
		        END                                                                 AS UNIT_Q
		      , A.WH_CODE
		      , A.WH_CELL_CODE                                                      --20210405 추가
		      , SUM(ISNULL(A.INOUT_Q, 0))                                           AS SUM_INOUT_Q
		      , SUM(CASE A.ITEM_STATUS WHEN '1' THEN ISNULL(INOUT_Q, 0) ELSE 0 END) AS GOOD_INOUT_Q
		      , SUM(CASE A.ITEM_STATUS WHEN '2' THEN ISNULL(INOUT_Q, 0) ELSE 0 END) AS BAD_INOUT_Q
		      , A.LOT_NO
		      , A.UPDATE_DB_USER
		      , GETDATE()                                                           AS UPDATE_DB_TIME
		      , uniLITE.fnGetUserDateComp(@COMP_CODE, A.INOUT_DATE)                 AS INOUT_DATE
		      , A.INOUT_P
		      , SUM(ISNULL(A.INOUT_I, 0))                                           AS INOUT_I
		      , ISNULL(E.USE_YN, '2')                                               AS USE_YN            --20210406 수정: ISNULL처리
		      , A.ACCOUNT_YNC
		      , A.INOUT_CODE_TYPE
		      , A.TRNS_RATE
		      , B.ITEM_ACCOUNT
		FROM       BTR100T A WITH (NOLOCK)
		INNER JOIN BPR200T B WITH (NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
		                                  AND B.ITEM_CODE       = A.ITEM_CODE
		INNER JOIN BPR100T C WITH (NOLOCK) ON C.COMP_CODE       = B.COMP_CODE
		                                  AND C.ITEM_CODE       = B.ITEM_CODE
		INNER JOIN BSA220T D WITH (NOLOCK) ON D.COMP_CODE       = B.COMP_CODE
		                                  AND D.TREE_CODE       = B.WH_CODE
		LEFT  JOIN BPR500T E WITH (NOLOCK) ON E.COMP_CODE       = A.COMP_CODE                            --20210406 수정: INNER -> LEFT
		                                  AND E.CHILD_ITEM_CODE = A.ITEM_CODE
		                                  AND E.PROD_ITEM_CODE  = @ITEM_CODE
		 WHERE 1 = 1
		   AND A.COMP_CODE             = @COMP_CODE
		   AND ISNULL(D.GROUP_CD, '') != 'Z'
		   AND A.DIV_CODE              = @DIV_CODE
		   AND A.INOUT_NUM             = @INOUT_NUM
		   AND A.INOUT_TYPE            = 1                                                               --20210406 추가
		   AND ISNULL(E.USE_YN, '2')   = CASE WHEN ISNULL(@USE_YN, '') = '' THEN ISNULL(E.USE_YN, '2')   --20210406 수정: ISNULL 처리
		                                      ELSE @USE_YN
		                                 END
		 GROUP BY A.COMP_CODE ,   A.DIV_CODE,     A.INOUT_NUM,    A.INOUT_TYPE,     A.ITEM_CODE,        C.SPEC,
		          C.STOCK_UNIT,   E.UNIT_Q,       A.WH_CODE,      A.UPDATE_DB_USER, A.UPDATE_DB_TIME,   A.WH_CELL_CODE, --20210405 추가: , A.WH_CELL_CODE
		          A.INOUT_DATE,   A.INOUT_P,      E.USE_YN,       A.ACCOUNT_YNC,    A.INOUT_CODE_TYPE,
		          A.TRNS_RATE ,   E.PROD_UNIT_Q,  A.LOT_NO,       B.ITEM_ACCOUNT--,   A.INOUT_SEQ
		 ORDER BY A.INOUT_NUM
	</select>





<!-- 저장 -->
	<insert id="btr901ukrvServiceImpl.insertMLogTable" parameterType="Map">
		/* btr901ukrvServiceImpl.insertMLogTable */
		INSERT INTO L_BTR100T (
		    COMP_CODE
		  , KEY_VALUE
		  , OPR_FLAG
		  , DIV_CODE
		  , INOUT_NUM
		  , INOUT_SEQ
		  , INOUT_TYPE
		  , INOUT_METH
		  , INOUT_TYPE_DETAIL
		  , INOUT_CODE_TYPE
		  , INOUT_CODE
		  , ITEM_CODE
		  , WH_CODE
		  , WH_CELL_CODE    --20210405 추가
		  , INOUT_DATE
		  , ITEM_STATUS
		  , INOUT_Q
		  , INOUT_P
		  , INOUT_I
		  , EXPENSE_I
		  , MONEY_UNIT
		  , INOUT_FOR_P
		  , INOUT_FOR_O
		  , EXCHG_RATE_O
		  , ACCOUNT_YNC
		  , CREATE_LOC
		  , ORDER_UNIT_Q
		  , ORDER_UNIT_P
		  , ORDER_UNIT_FOR_P
		  , SALE_DIV_CODE
		  , SALE_CUSTOM_CODE
		  , BILL_TYPE
		  , SALE_TYPE
		  , LOT_NO
		  , UPDATE_DB_USER
		  , UPDATE_DB_TIME
		  , INSERT_DB_USER
		  , INSERT_DB_TIME
		) VALUES (
		    #{COMP_CODE}
		  , #{KEY_VALUE}
		  , #{OPR_FLAG}
		  , #{DIV_CODE}
		  , #{INOUT_NUM}
		  , #{INOUT_SEQ}
		  , #{INOUT_TYPE}
		  , #{INOUT_METH}
		  , #{INOUT_TYPE_DETAIL}
		  , #{INOUT_CODE_TYPE}
		  , #{INOUT_CODE}
		  , #{ITEM_CODE}
		  , #{WH_CODE}
		  , #{WH_CELL_CODE}    --20210405 추가
		  , #{INOUT_DATE}
		  , #{ITEM_STATUS}
		  , #{INOUT_Q}
		  , #{INOUT_P}
		  , #{INOUT_I}
		  , #{EXPENSE_I}
		  , #{MONEY_UNIT}
		  , #{INOUT_FOR_P}
		  , #{INOUT_FOR_O}
		  , #{EXCHG_RATE_O}
		  , #{ACCOUNT_YNC}
		  , #{CREATE_LOC}
		  , #{ORDER_UNIT_Q}
		  , #{ORDER_UNIT_P}
		  , #{ORDER_UNIT_FOR_P}
		  , #{DIV_CODE}
		  , #{INOUT_CODE}
		  , '*'
		  , '*'
		  , #{LOT_NO}
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		)
	</insert>

	<insert id="btr901ukrvServiceImpl.insertDLogTable" parameterType="Map">
		/* btr901ukrvServiceImpl.insertDLogTable */
		INSERT INTO L_BTR100T (
		    COMP_CODE
		  , KEY_VALUE
		  , OPR_FLAG
		  , DIV_CODE
		  , INOUT_NUM
		  , INOUT_SEQ
		  , INOUT_TYPE
		  , INOUT_METH
		  , INOUT_TYPE_DETAIL
		  , INOUT_CODE_TYPE
		  , INOUT_CODE
		  , ITEM_CODE
		  , WH_CODE
		  , WH_CELL_CODE    --20210405 추가
		  , INOUT_DATE
		  , ITEM_STATUS
		  , INOUT_Q
		  , INOUT_P
		  , INOUT_I
		  , EXPENSE_I
		  , MONEY_UNIT
		  , INOUT_FOR_P
		  , INOUT_FOR_O
		  , EXCHG_RATE_O
		  , ACCOUNT_YNC
		  , CREATE_LOC
		  , ORDER_UNIT_Q
		  , ORDER_UNIT_P
		  , ORDER_UNIT_FOR_P
		  , SALE_DIV_CODE
		  , SALE_CUSTOM_CODE
		  , BILL_TYPE
		  , SALE_TYPE
		  , LOT_NO
		  , GOOD_INOUT_Q
		  , BAD_INOUT_Q
		  , UPDATE_DB_USER
		  , UPDATE_DB_TIME
		  , INSERT_DB_USER
		  , INSERT_DB_TIME
		) VALUES (
		    #{COMP_CODE}
		  , #{KEY_VALUE}
		  , #{OPR_FLAG}
		  , #{DIV_CODE}
		  , #{INOUT_NUM}
		  , #{INOUT_SEQ}
		  , #{INOUT_TYPE}
		  , 'D'
		  , 'D1'
		  , '2'
		  , #{WH_CODE}
		  , #{ITEM_CODE}
		  , #{WH_CODE}
		  , #{WH_CELL_CODE}    --20210405 추가
		  , #{INOUT_DATE}
		  , #{ITEM_STATUS}
		  , #{SUM_INOUT_Q}
		  , #{INOUT_P}
		  , #{INOUT_I}
		  , 0
		  , 'KRW'
		  , #{INOUT_P}
		  , #{INOUT_I}
		  , 1
		  , 'N'
		  , '4'
		  , #{INOUT_Q}
		  , #{INOUT_P}
		  , #{INOUT_P}
		  , #{DIV_CODE}
		  , #{WH_CODE}
		  , '*'
		  , '*'
		  , #{LOT_NO}
		  , #{GOOD_INOUT_Q}
		  , #{BAD_INOUT_Q}
		  , #{S_USER_ID}
		  , GETDATE()
		  , #{S_USER_ID}
		  , GETDATE()
		)
	</insert>

	<update id="btr901ukrvServiceImpl.spReceiving" parameterType="Map" statementType="CALLABLE">
		{call USP_STOCK_Btr901ukrv (
			#{KEY_VALUE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{COMP_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{PRODT_ITEM_CODE	, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{USER_ID			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{INOUT_NUM			, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
			#{ErrorDesc			, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
		)}
	</update>
</mapper>