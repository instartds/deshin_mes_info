<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_qms500ukrv_mekServiceImpl">
	

<select id="s_qms500ukrv_mekServiceImpl.selectBadData" parameterType="Map" resultType="rMap">	
	
	SELECT TOP 1
		   A.ORDER_TYPE									/* 발주유형	*/
		 , A.INSPEC_NUM													/* 검사번호	*/
		 , A.INSPEC_SEQ													/* 검사순번 */
		 , ISNULL(uniLITE.fnCustNameComp(#{S_COMP_CODE},#{S_USER_ID},A.CUSTOM_CODE),'') AS CUSTOM_NAME												/* 거래처명	*/
		 , ISNULL(uniLITE.fnItemNameComp(#{S_COMP_CODE},#{S_USER_ID},A.ITEM_CODE),'') AS ITEM_NAME												/* 품명		*/
		 , CAST(CONVERT(NUMERIC(30,2),ISNULL(A.INSPEC_Q,0)) AS NVARCHAR(50)) AS INSPEC_Q					/* 검사수량	*/
		 , C.SO_NUM															/* 수주번호	*/
		 , E.BAD_INSPEC_CODE1 AS BAD_CODE1
		 , E.BAD_INSPEC_CODE2 AS BAD_CODE2
		 , E.BAD_INSPEC_CODE3 AS BAD_CODE3
		 , ISNULL(R1.CODE_NAME,'') AS BAD_NAME1
		 , ISNULL(R2.CODE_NAME,'') AS BAD_NAME2
		 , ISNULL(R3.CODE_NAME,'') AS BAD_NAME3
		 , E.BAD_INSPEC_Q1 AS BAD_Q1
		 , E.BAD_INSPEC_Q2 AS BAD_Q2
		 , E.BAD_INSPEC_Q3 AS BAD_Q3
		 , ISNULL(E.INSPEC_REMARK1,'') AS INSPEC_REMARK1
		 , ISNULL(E.INSPEC_REMARK2,'') AS INSPEC_REMARK2
		 , ISNULL(E.INSPEC_REMARK3,'') AS INSPEC_REMARK3
		 
		 , CASE WHEN ISNULL(E.BAD_INSPEC_CODE1,'') != '' AND  ISNULL(E.BAD_INSPEC_CODE2,'')  = '' AND ISNULL(E.BAD_INSPEC_CODE3,'')  = ''  THEN ISNULL(R1.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK1,'') + '('+ CAST(CONVERT(NUMERIC(30,1),ISNULL(E.BAD_INSPEC_Q1,0)) AS NVARCHAR(50)) +')'
				WHEN ISNULL(E.BAD_INSPEC_CODE1,'') != '' AND (ISNULL(E.BAD_INSPEC_CODE2,'') != ''  OR ISNULL(E.BAD_INSPEC_CODE3,'') != '') THEN ISNULL(R1.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK1,'') + '('+ CAST(CONVERT(NUMERIC(30,1),ISNULL(E.BAD_INSPEC_Q1,0)) AS NVARCHAR(50)) +')' + ', '
				ELSE ''
		   END
		   +
		   CASE WHEN ISNULL(E.BAD_INSPEC_CODE2,'') != '' AND ISNULL(E.BAD_INSPEC_CODE3,'')  = '' THEN ISNULL(R2.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK2,'') + '('+ CAST(CONVERT(NUMERIC(30,1),ISNULL(E.BAD_INSPEC_Q2,0)) AS NVARCHAR(50)) +')'
				WHEN ISNULL(E.BAD_INSPEC_CODE2,'') != '' AND ISNULL(E.BAD_INSPEC_CODE3,'') != '' THEN ISNULL(R2.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK2,'') + '('+ CAST(CONVERT(NUMERIC(30,1),ISNULL(E.BAD_INSPEC_Q2,0)) AS NVARCHAR(50)) +')' + ', '
				ELSE ''
		   END
		   +
		   CASE WHEN ISNULL(E.BAD_INSPEC_CODE3,'') != '' THEN ISNULL(R3.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK3,'') + '('+ CAST(CONVERT(NUMERIC(30,1),ISNULL(E.BAD_INSPEC_Q3,0)) AS NVARCHAR(50)) +')'
				ELSE ''
		   END
		   AS BAD_REMARK
	--	 , ISNULL(R1.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK1,'') + ',' + ISNULL(R2.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK2,'') + ',' + ISNULL(R3.CODE_NAME,'') + '-' + ISNULL(E.INSPEC_REMARK3,'') AS BAD_REMARK
		FROM		S_QMS500T_MEK A WITH (NOLOCK)
		LEFT JOIN	MPO200T C WITH (NOLOCK) ON  A.COMP_CODE = C.COMP_CODE
											AND A.DIV_CODE  = C.IN_DIV_CODE
											AND A.ORDER_NUM = C.ORDER_NUM
											AND A.ORDER_SEQ = C.ORDER_SEQ
		INNER JOIN	BPR100T B WITH (NOLOCK) ON  A.COMP_CODE = B.COMP_CODE
											AND A.ITEM_CODE = B.ITEM_CODE
		LEFT JOIN (
			SELECT 
				 T.COMP_CODE
				,T.DIV_CODE
				,T.INSPEC_NUM
				,T.INSPEC_SEQ
				,MAX(T.BAD_INSPEC_CODE1) AS BAD_INSPEC_CODE1
				,MAX(T.BAD_INSPEC_CODE2) AS BAD_INSPEC_CODE2
				,MAX(T.BAD_INSPEC_CODE3) AS BAD_INSPEC_CODE3
				,MAX(T.BAD_INSPEC_Q1) AS BAD_INSPEC_Q1
				,MAX(T.BAD_INSPEC_Q2) AS BAD_INSPEC_Q2
				,MAX(T.BAD_INSPEC_Q3) AS BAD_INSPEC_Q3
				,MAX(T.INSPEC_REMARK1) AS INSPEC_REMARK1
				,MAX(T.INSPEC_REMARK2) AS INSPEC_REMARK2
				,MAX(T.INSPEC_REMARK3) AS INSPEC_REMARK3
			 FROM (
				SELECT COMP_CODE
					,DIV_CODE
					,INSPEC_NUM
					,INSPEC_SEQ
					,CASE WHEN SEQ =1 THEN BAD_INSPEC_CODE
						  ELSE NULL
					 END BAD_INSPEC_CODE1
					 ,CASE WHEN SEQ =2 THEN BAD_INSPEC_CODE
						  ELSE NULL
					 END BAD_INSPEC_CODE2
					 ,CASE WHEN SEQ =3 THEN BAD_INSPEC_CODE
						  ELSE NULL
					 END BAD_INSPEC_CODE3

					 ,CASE WHEN SEQ =1 THEN BAD_INSPEC_Q
						  ELSE NULL
					 END BAD_INSPEC_Q1
					 ,CASE WHEN SEQ =2 THEN BAD_INSPEC_Q
						  ELSE NULL
					 END BAD_INSPEC_Q2
					 ,CASE WHEN SEQ =3 THEN BAD_INSPEC_Q
						  ELSE NULL
					 END BAD_INSPEC_Q3

					  ,CASE WHEN SEQ =1 THEN INSPEC_REMARK
						  ELSE NULL
					 END INSPEC_REMARK1
					 ,CASE WHEN SEQ =2 THEN INSPEC_REMARK
						  ELSE NULL
					 END INSPEC_REMARK2
					 ,CASE WHEN SEQ =3 THEN INSPEC_REMARK
						  ELSE NULL
					 END INSPEC_REMARK3

					,SEQ
				FROM S_QMS510T_MEK WITH(NOLOCK)
				WHERE SEQ IN (1,2,3)
			GROUP BY COMP_CODE
					,DIV_CODE
					,INSPEC_NUM
					,INSPEC_SEQ
					,BAD_INSPEC_CODE
					,BAD_INSPEC_Q
					,INSPEC_REMARK
					,SEQ
			) T

			GROUP BY T.COMP_CODE
				,T.DIV_CODE
				,T.INSPEC_NUM
				,T.INSPEC_SEQ
			  
		) E ON E.COMP_CODE = A.COMP_CODE
			AND E.DIV_CODE = A.DIV_CODE
			AND E.INSPEC_NUM = A.INSPEC_NUM
			AND E.INSPEC_SEQ = A.INSPEC_SEQ
		LEFT JOIN BSA100T R1 WITH(NOLOCK) ON R1.COMP_CODE = E.COMP_CODE
										 AND R1.MAIN_CODE = (CASE WHEN A.ORDER_TYPE = '4' THEN 'Q012'
																 ELSE 'Q011'
															END)
										 AND R1.SUB_CODE = E.BAD_INSPEC_CODE1
		LEFT JOIN BSA100T R2 WITH(NOLOCK) ON R2.COMP_CODE = E.COMP_CODE
										 AND R2.MAIN_CODE = (CASE WHEN A.ORDER_TYPE = '4' THEN 'Q012'
																 ELSE 'Q011'
															END)
										 AND R2.SUB_CODE = E.BAD_INSPEC_CODE2
		LEFT JOIN BSA100T R3 WITH(NOLOCK) ON R3.COMP_CODE = E.COMP_CODE
										 AND R3.MAIN_CODE = (CASE WHEN A.ORDER_TYPE = '4' THEN 'Q012'
																 ELSE 'Q011'
															END)
										 AND R3.SUB_CODE = E.BAD_INSPEC_CODE3

		
	WHERE A.COMP_CODE = #{S_COMP_CODE}
		AND A.DIV_CODE = #{DIV_CODE}
		AND A.INSPEC_NUM = #{INSPEC_NUM}
		AND A.INSPEC_SEQ = #{INSPEC_SEQ}
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectExpirationdate" parameterType="Map" resultType="rMap">
	SELECT ISNULL(EXPIRATION_DAY,0) AS EXPIRATION_DAY
	  FROM BPR100T WITH(NOLOCK)
	 WHERE COMP_CODE = #{S_COMP_CODE}
	   AND ITEM_CODE = #{ITEM_CODE}
	   AND CIR_PERIOD_YN ='Y'
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectreceiptNumMasterList" parameterType="Map" resultType="rMap">
/* mms200ukrv.Cmms200ukrv[fnQms200QPop] Query01 */
BEGIN
	SET NOCOUNT ON
	SET ARITHABORT ON

	DECLARE @CompCode  NVARCHAR(08) /* 법인코드 */
		  , @UserId   NVARCHAR(100)  /* 사용자ID */
		  , @LangType  NVARCHAR(2)  /* 언어구분 */

	SET @CompCode = #{S_COMP_CODE}
	SET @UserId   = #{S_USER_ID}
	SET @LangType = #{S_LANG_CODE}

	SELECT A.INSPEC_NUM
		 , A.INSPEC_SEQ
		 , uniLite.fnGetUserdate(@CompCode, A.INSPEC_DATE) AS INSPEC_DATE
		 , A.CUSTOM_CODE
		 , ''	AS CUSTOM_NAME
		 , A.ITEM_CODE
		 , B.ITEM_NAME
		 , B.SPEC
		 , A.INSPEC_Q
		 , A.GOOD_INSPEC_Q
		 , A.BAD_INSPEC_Q
		 , A.INSPEC_TYPE
		 , A.INSPEC_PRSN
		 , A.RECEIPT_NUM
		 , A.RECEIPT_SEQ
		 , A.LOT_NO
	  FROM			S_QMS500T_MEK A WITH (NOLOCK)
		 INNER JOIN BPR100T B WITH (NOLOCK) ON  A.COMP_CODE   = B.COMP_CODE
											AND A.ITEM_CODE   = B.ITEM_CODE
	  WHERE A.COMP_CODE = @CompCode
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		AND A.DIV_CODE	 = #{DIV_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_DATE_FR)">
		AND A.INSPEC_DATE &gt;= #{INSPEC_DATE_FR}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_DATE_TO)">
		AND A.INSPEC_DATE &lt;= #{INSPEC_DATE_TO}
</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		   AND A.ITEM_CODE		= #{ITEM_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
		   AND A.ITEM_CODE	 LIKE #{ITEM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		   AND B.ITEM_NAME	 LIKE '%' + #{ITEM_NAME} + '%'
		</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_TYPE)">
		AND A.INSPEC_TYPE  = #{INSPEC_TYPE}
</if>
<if test="@foren.Ognl@isNotEmpty(GOODBAD_TYPE)">
		AND A.GOODBAD_TYPE = #{GOODBAD_TYPE}
</if>
		AND A.ORDER_TYPE	= '4'
	  ORDER BY A.INSPEC_NUM, A.INSPEC_SEQ

	SET ARITHABORT OFF
	SET NOCOUNT OFF
END
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectreceiptList" parameterType="Map" resultType="rMap">
/* mms200ukrv.Cmms200ukrv[fnQms200QRef] Query01 */
BEGIN
	SET NOCOUNT ON
	SET ARITHABORT ON
	
	DECLARE @CompCode		NVARCHAR(08)	/* 법인코드			*/
		  , @UserId			NVARCHAR(100)	/* 사용자ID		*/
		  , @LangType		NVARCHAR(2)		/* 언어구분			*/
		  , @RefItem		NVARCHAR(01)	/* 명칭 참조 유형 		*/
		  , @DateFormat		NVARCHAR(10)	/* 날짜 포맷 유형 설정	*/
	
	SET @CompCode	= #{S_COMP_CODE}
	SET @UserId		= #{S_USER_ID}
	SET @LangType	= #{S_LANG_CODE}
	
	/* 명칭 참조 유형 */
	SELECT TOP 1 @RefItem = REF_ITEM
	  FROM BSA300T WITH (NOLOCK)
	 WHERE USER_ID = @UserId
	
	SET @RefItem = ISNULL(@RefItem, N'0')
	
	/* 날짜 포맷 유형 설정 */
	SELECT TOP 1 @DateFormat = CODE_NAME
	  FROM BSA100T WITH (NOLOCK)
	 WHERE COMP_CODE = @CompCode
	   AND MAIN_CODE = N'B044'
	   AND REF_CODE1 = N'Y'
	
	SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

	SELECT A.COMP_CODE
		 , A.DIV_CODE
		 , A.INOUT_NUM
		 , A.INOUT_SEQ
		 , A.ITEM_CODE
		 , (CASE WHEN @RefItem = '1' THEN C.ITEM_NAME1
				 WHEN @RefItem = '2' THEN C.ITEM_NAME2
				 ELSE					  C.ITEM_NAME
		   END)													AS ITEM_NAME
		 , A.LOT_NO
		 , C.SPEC
		 , (CASE WHEN ISNULL(A.INOUT_DATE, '') = ''
				 THEN ''
				 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
														 , 'MM'  , SUBSTRING(A.INOUT_DATE, 5, 2))
														 , 'DD'  , SUBSTRING(A.INOUT_DATE, 7, 2))
		   END)													AS INOUT_DATE
		 , (A.INOUT_Q - ISNULL(A.INSPEC_Q, 0))					AS RECEIPT_Q
		 , (A.INOUT_Q - ISNULL(A.INSPEC_Q, 0)) * A.TRNS_RATE	AS INSPEC_Q
		 , A.WH_CODE
		 , D.INOUT_NUM											AS REP_INOUT_NUM
		 , D.INOUT_SEQ											AS REP_INOUT_SEQ
		 , D.ITEM_CODE											AS REP_ITEM_CODE
		 , (CASE WHEN @RefItem = '1' THEN E.ITEM_NAME1
				 WHEN @RefItem = '2' THEN E.ITEM_NAME2
				 ELSE					  E.ITEM_NAME
		   END)													AS REP_ITEM_NAME
		 , D.LOT_NO												AS REP_LOT_NO
		 , ISNULL(B.INSPEC_METH_MATRL, '02')					AS INSPEC_METH_MATRL
		 , A.TRNS_RATE
		 , ISNULL(A.ORDER_UNIT, B.ORDER_UNIT)					AS ORDER_UNIT
	  FROM					BTR100T A	WITH (NOLOCK)
			INNER JOIN		BPR200T B	WITH (NOLOCK)
						 ON B.COMP_CODE			= A.COMP_CODE
						AND B.DIV_CODE			= A.DIV_CODE
						AND B.ITEM_CODE			= A.ITEM_CODE
						AND B.SUPPLY_TYPE		= '3'
			INNER JOIN		BPR100T C	WITH (NOLOCK)
						 ON C.COMP_CODE			= A.COMP_CODE
						AND C.ITEM_CODE			= A.ITEM_CODE
			LEFT OUTER JOIN	BTR100T D	WITH (NOLOCK)
						 ON D.COMP_CODE			= A.COMP_CODE
						AND D.BASIS_NUM			= A.INOUT_NUM
						AND D.BASIS_SEQ			= A.INOUT_SEQ
						AND D.CREATE_LOC		= A.CREATE_LOC
						AND D.INOUT_METH		= A.INOUT_METH
						AND D.INOUT_TYPE_DETAIL	= A.INOUT_TYPE_DETAIL
			INNER JOIN		BPR100T E	WITH (NOLOCK)
						 ON E.COMP_CODE			= D.COMP_CODE
						AND E.ITEM_CODE			= D.ITEM_CODE
	 WHERE A.COMP_CODE			= #{S_COMP_CODE}
	   AND A.DIV_CODE			= #{DIV_CODE}
	   AND A.INOUT_TYPE_DETAIL	= '97'
	   AND A.INOUT_METH			= '6'
	   AND A.CREATE_LOC			= '4'
	   AND A.INOUT_TYPE			= '1'
	   AND (A.INOUT_Q - ISNULL(A.INSPEC_Q, 0)) &gt; 0
	<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_FR)">
	   AND A.INOUT_DATE		   &gt;= #{INOUT_DATE_FR}
	</if>
	<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_TO)">
	   AND A.INOUT_DATE		   &lt;= #{INOUT_DATE_TO}
	</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		   AND A.ITEM_CODE		= #{ITEM_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(ITEM_CODE) and @foren.Ognl@isEmpty(ITEM_NAME)">
		   AND A.ITEM_CODE	 LIKE #{ITEM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isEmpty(ITEM_CODE) and @foren.Ognl@isNotEmpty(ITEM_NAME)">
		   AND C.ITEM_NAME	 LIKE '%' + #{ITEM_NAME} + '%'
		</if>
	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
	   AND A.ITEM_CODE			= #{ITEM_CODE}
	</if>
	
	SET NOCOUNT OFF
	SET ARITHABORT OFF
END
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectList1" parameterType="Map" resultType="rMap">
/* mms200ukrv.Cmms200ukrv[fnQms200QStd] Query01 */
BEGIN
	SET NOCOUNT ON
	SET ARITHABORT ON

	DECLARE @CompCode		NVARCHAR(08)	/* 법인코드			*/
		  , @UserId			NVARCHAR(100)	/* 사용자ID		*/
		  , @LangType		NVARCHAR(2)		/* 언어구분			*/
		  , @RefItem		NVARCHAR(01)	/* 명칭 참조 유형		*/
		  , @DateFormat		NVARCHAR(10)	/* 날짜 포맷 유형 설정	*/

	SET @CompCode = #{S_COMP_CODE}
	SET @UserId   = #{S_USER_ID}
	SET @LangType = #{S_LANG_CODE}

	/* 명칭 참조 유형 */
	SELECT TOP 1 @RefItem = REF_ITEM
	  FROM BSA300T WITH (NOLOCK)
	 WHERE USER_ID = @UserId

	SET @RefItem = ISNULL(@RefItem, N'0')

	/* 날짜 포맷 유형 설정 */
	SELECT TOP 1 @DateFormat = CODE_NAME
	  FROM BSA100T WITH (NOLOCK)
	 WHERE COMP_CODE = @CompCode
	   AND MAIN_CODE = N'B044'
	   AND REF_CODE1 = N'Y'

	SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

	/* 데이터 조회 */
	SELECT A.DIV_CODE
		 , A.INSPEC_NUM
		 , A.INSPEC_SEQ
		 , A.ITEM_CODE
		 , CASE WHEN @RefItem = '1' THEN B.ITEM_NAME1
				WHEN @RefItem = '2' THEN B.ITEM_NAME2
									ELSE B.ITEM_NAME
		   END													AS ITEM_NAME
		 , B.SPEC
		 , A.ORDER_UNIT
		 , A.INSPEC_TYPE
		 , A.END_DECISION
		 , ISNULL(A.RECEIPT_Q		, 0)						AS RECEIPT_Q
		 , ISNULL(E.TRNS_RATE		, 0)						AS TRNS_RATE
		 , ISNULL(A.INSPEC_Q		, 0)						AS INSPEC_Q
		 , ISNULL(A.GOOD_INSPEC_Q	, 0)						AS GOOD_INSPEC_Q
		 , ISNULL(A.BAD_INSPEC_Q	, 0)						AS BAD_INSPEC_Q
		 , ISNULL(A.INSTOCK_Q		, 0)						AS INSTOCK_Q

		 , CASE WHEN A.INSPEC_Q = 0 THEN 0
				ELSE A.BAD_INSPEC_Q / A.INSPEC_Q * 100
		   END													AS BAD_INSPEC_PER
		 , A.INSPEC_PRSN
		 , A.CUSTOM_CODE
		 , ''													AS CUSTOM_NAME
		 , A.RECEIPT_NUM
		 , A.RECEIPT_SEQ
		 , A.REMARK
		 , A.PROJECT_NO
		 , uniLite.fnGetUserdate(@CompCode, A.INSPEC_DATE)		AS INSPEC_DATE
		 , A.ORDER_TYPE
		 , A.LOT_NO
		 , A.ORDER_NUM
		 , A.ORDER_SEQ
		 , A.INOUT_NUM
		 , A.INOUT_SEQ
		 , A.GOODBAD_TYPE
		 , E.WH_CODE											AS GOOD_WH_CODE
		 , E.WH_CODE											AS BAD_WH_CODE
		 , A.MAKE_LOT_NO		--거래처LOT
		 , A.MAKE_DATE			--제조일자
		 , A.MAKE_EXP_DATE		--유통기한
		 --20191029 추가: 수주번호, 수주처, 수주품목명
		 , ''													AS SO_NUM
		 , ''													AS SO_CUSTOM_NAME
		 , ''													AS SO_ITEM_NAME
		 --20210813 MEK ICS 프로젝트 진행하며 추가 : 입고유형, hw, sw, 검사완료일
		 , A.IN_TYPE
		 , A.HW
		 , A.SW
		 , A.COMPLETE_DATE
		 , A.LOT_NO												AS ORI_LOT_NO
		 , ISNULL(A.INSPEC_Q		, 0)						AS ORI_INSPEC_Q
	  FROM			  S_QMS500T_MEK A WITH (NOLOCK)
		   INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
											 AND A.ITEM_CODE	= B.ITEM_CODE
		   INNER JOIN BTR100T E WITH (NOLOCK) ON A.COMP_CODE	= E.COMP_CODE
											 AND A.DIV_CODE		= E.DIV_CODE
											 AND A.INOUT_NUM	= E.INOUT_NUM
											 AND A.INOUT_SEQ	= E.INOUT_SEQ
	 WHERE A.COMP_CODE		= @CompCode
<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
	   AND A.DIV_CODE		= #{DIV_CODE}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_TYPE)">
	   AND A.INSPEC_TYPE	= #{INSPEC_TYPE}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_DATE)">
	   AND A.INSPEC_DATE	= #{INSPEC_DATE}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_PRSN)">
	   AND A.INSPEC_PRSN	= #{INSPEC_PRSN}
</if>
<if test="@foren.Ognl@isNotEmpty(INSPEC_NUM)">
	   AND A.INSPEC_NUM		= #{INSPEC_NUM}
</if>
<if test="@foren.Ognl@isNotEmpty(GOODBAD_TYPE)">
	   AND A.GOODBAD_TYPE	= #{GOODBAD_TYPE}
</if>
	 ORDER BY A.INSPEC_SEQ

	SET ARITHABORT OFF
	SET NOCOUNT OFF
END
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectList2" parameterType="Map" resultType="rMap">
	/* mms200ukrv.Cmms200ukrv[fnQms200QBad] Query01 */
	BEGIN
		SET NOCOUNT ON
		SET ARITHABORT ON

		DECLARE @CompCode		NVARCHAR(08)	/* 법인코드				*/
			  , @UserId			NVARCHAR(100)	/* 사용자ID	   */
			  , @LangType		NVARCHAR(2)		/* 언어구분				*/
			  , @RefItem		NVARCHAR(01)	/* 명칭 참조 유형			*/
			  , @DateFormat		NVARCHAR(10)	/* 날짜 포맷 유형 설정	 */

		SET @CompCode = #{S_COMP_CODE}
		SET @UserId   = #{S_USER_ID}
		SET @LangType = #{S_LANG_CODE}

		/* 명칭 참조 유형 */
		SELECT TOP 1 @RefItem = REF_ITEM
		  FROM BSA300T WITH (NOLOCK)
		 WHERE USER_ID = @UserId

		SET @RefItem = ISNULL(@RefItem, N'0')

		/* 날짜 포맷 유형 설정 */
		SELECT TOP 1 @DateFormat = CODE_NAME
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = @CompCode
		   AND MAIN_CODE = N'B044'
		   AND REF_CODE1 = N'Y'

		SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

		IF '${INSPEC_NUM}' != '' AND '${ITEM_CODE}' != ''
		BEGIN
			/* 데이터 조회 */
			SELECT A.DIV_CODE
				 , A.INSPEC_NUM
				 , A.INSPEC_SEQ
				 , B.SUB_CODE  AS BAD_INSPEC_CODE
				 , B.CODE_NAME AS BAD_INSPEC_NAME
				 , A.BAD_INSPEC_Q
				 , A.INSPEC_REMARK
				 , A.MANAGE_REMARK
				 , A.SEQ	--표기순번
			  FROM S_QMS510T_MEK A WITH (NOLOCK)
				   RIGHT JOIN (SELECT A.SUB_CODE
									, A.COMP_CODE
									, (CASE WHEN @LangType = 'ko' THEN A.CODE_NAME
											WHEN @LangType = 'en' THEN A.CODE_NAME_EN
											WHEN @LangType = 'zh' THEN A.CODE_NAME_CN
											WHEN @LangType = 'ja' THEN A.CODE_NAME_JP
																  ELSE A.CODE_NAME
											END)	AS CODE_NAME
								 FROM			BSA100T A WITH (NOLOCK)
									  INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE				 = B.COMP_CODE
																		AND ISNULL(A.REF_CODE1, '*') = (CASE WHEN ISNULL(A.REF_CODE1,'*')	= '*'	THEN '*'
																											 WHEN RTRIM(A.REF_CODE1)		= ''	THEN ''
																											 ELSE ISNULL(B.ITEM_LEVEL1,'*')
																										END)
																	<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
																		AND B.ITEM_CODE				 = #{ITEM_CODE}
																	</if>
								WHERE A.COMP_CODE = @CompCode
								<if test="ORDER_TYPE == &quot;4&quot;">
								  AND A.MAIN_CODE = 'Q012'
								</if>
								<if test="ORDER_TYPE != &quot;4&quot;">
								  AND A.MAIN_CODE = 'Q011'
								</if>
								  AND A.SUB_CODE != '$') B ON A.COMP_CODE		= B.COMP_CODE
														  AND A.BAD_INSPEC_CODE = B.SUB_CODE
														<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
														  AND A.DIV_CODE		= #{DIV_CODE}
														</if>
														<if test="@foren.Ognl@isNotEmpty(INSPEC_NUM)">
														  AND A.INSPEC_NUM		= #{INSPEC_NUM}
														</if>
														<if test="@foren.Ognl@isNotEmpty(INSPEC_SEQ)">
														  AND A.INSPEC_SEQ		= #{INSPEC_SEQ}
														</if>
		END
		ELSE
		BEGIN
			SELECT NULL				AS DIV_CODE
				 , NULL				AS INSPEC_NUM
				 , NULL				AS INSPEC_SEQ
				 , A.SUB_CODE		AS BAD_INSPEC_CODE
				 , CASE WHEN @LangType = 'ko' THEN A.CODE_NAME
						WHEN @LangType = 'en' THEN A.CODE_NAME_EN
						WHEN @LangType = 'zh' THEN A.CODE_NAME_CN
						WHEN @LangType = 'ja' THEN A.CODE_NAME_JP
						ELSE					   A.CODE_NAME
				   END				AS BAD_INSPEC_NAME
				 , NULL				AS BAD_INSPEC_Q
				 , NULL				AS INSPEC_REMARK
				 , NULL				AS MANAGE_REMARK
				 , NULL				AS SEQ
			  FROM BSA100T A WITH (NOLOCK)
			 WHERE A.COMP_CODE = @CompCode
			<if test="ORDER_TYPE == &quot;4&quot;">
			   AND A.MAIN_CODE = 'Q012'
			</if>
			<if test="ORDER_TYPE != &quot;4&quot;">
			   AND A.MAIN_CODE = 'Q011'
			</if>
			   AND A.SUB_CODE != '$'
		END
		
		SET ARITHABORT OFF
		SET NOCOUNT OFF
	END
</select>

<select id="s_qms500ukrv_mekServiceImpl.inspecQtyCheck" parameterType="Map" resultType="rMap">
	  /*  mms200ukrv.Cmms200ukrv[fnQms200QChk] Query01*/
	SELECT INOUT_Q
	  FROM BTR100T
	 WHERE COMP_CODE  = #{S_COMP_CODE}
	   AND DIV_CODE   = #{DIV_CODE}
	   AND INSPEC_NUM = #{INSPEC_NUM}
	   AND INSPEC_SEQ = #{INSPEC_SEQ}
	   AND CREATE_LOC = '2'
</select>

<update id="s_qms500ukrv_mekServiceImpl.spSP_GetAutoNumComp" parameterType="Map" statementType="CALLABLE">
	{call SP_GetAutoNumComp (
		#{COMP_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{DIV_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{TABLE_ID			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{PREFIX			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{BASIS_DATE		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{AUTO_TYPE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{INSPEC_NUM		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
	)}
</update>

<insert id="s_qms500ukrv_mekServiceImpl.insertMaster" parameterType="Map">
	INSERT INTO S_QMS500T_MEK
		 ( COMP_CODE		, DIV_CODE			, INSPEC_NUM		, INSPEC_SEQ		, INSPEC_DATE
		 , ORDER_TYPE		, ITEM_CODE			, CUSTOM_CODE		, ORDER_UNIT		, INSPEC_Q
		 , GOOD_INSPEC_Q	, BAD_INSPEC_Q		, INSPEC_TYPE		, INSPEC_METHOD		, INSTOCK_Q
		 , INSPEC_PRSN		, LOT_NO			, ORDER_NUM			, ORDER_SEQ			, RECEIPT_NUM
		 , RECEIPT_SEQ		, REMARK			, PROJECT_NO		, GOODBAD_TYPE		, RECEIPT_Q
		 , END_DECISION		, PJT_CODE			, MAKE_LOT_NO		, MAKE_DATE			, MAKE_EXP_DATE
		 , IN_TYPE			, HW				, SW				, COMPLETE_DATE		, TEMPC_01
		 , INOUT_NUM		, INOUT_SEQ
		 , INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME
		 )
	VALUES
		 ( #{S_COMP_CODE}	, #{DIV_CODE}		, #{INSPEC_NUM}		, #{INSPEC_SEQ}		, #{INSPEC_DATE}
		 , #{ORDER_TYPE}	, #{ITEM_CODE}		, #{CUSTOM_CODE}	, #{ORDER_UNIT}		, #{INSPEC_Q}
		 , #{GOOD_INSPEC_Q}	, #{BAD_INSPEC_Q}	, #{INSPEC_TYPE}	, #{INSPEC_METHOD}	, #{INSTOCK_Q}
		 , #{INSPEC_PRSN}	, #{LOT_NO}			, #{ORDER_NUM}		, #{ORDER_SEQ}		, #{RECEIPT_NUM}
		 , #{RECEIPT_SEQ}	, #{REMARK}			, #{PROJECT_NO}		, #{GOODBAD_TYPE}	, #{RECEIPT_Q}
		 , #{END_DECISION}	, #{PJT_CODE}		, #{MAKE_LOT_NO}	, #{MAKE_DATE}		, #{MAKE_EXP_DATE}
		 , #{IN_TYPE}		, #{HW}				, #{SW}				, #{COMPLETE_DATE}	, #{ORI_LOT_NO}
		 , #{INOUT_NUM}		, #{INOUT_SEQ}
		 , #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()
		 )
</insert>

<update id="s_qms500ukrv_mekServiceImpl.updateMaster" parameterType="Map" >
	UPDATE S_QMS500T_MEK
	   SET INSPEC_DATE		= #{INSPEC_DATE}
		 , ORDER_TYPE		= #{ORDER_TYPE}
		 , ITEM_CODE		= #{ITEM_CODE}
		 , CUSTOM_CODE		= #{CUSTOM_CODE}
		 , ORDER_UNIT		= #{ORDER_UNIT}
		 , INSPEC_Q			= #{INSPEC_Q}
		 , GOOD_INSPEC_Q	= #{GOOD_INSPEC_Q}
		 , BAD_INSPEC_Q		= #{BAD_INSPEC_Q}
		 , INSPEC_TYPE		= #{INSPEC_TYPE}
		 , INSPEC_METHOD	= #{INSPEC_METHOD}
		 , INSTOCK_Q		= #{INSTOCK_Q}
		 , INSPEC_PRSN		= #{INSPEC_PRSN}
		 , LOT_NO			= #{LOT_NO}
		 , ORDER_NUM		= #{ORDER_NUM}
		 , ORDER_SEQ		= #{ORDER_SEQ}
		 , RECEIPT_NUM		= #{RECEIPT_NUM}
		 , RECEIPT_SEQ		= #{RECEIPT_SEQ}
		 , REMARK			= #{REMARK}
		 , PROJECT_NO		= #{PROJECT_NO}
		 , GOODBAD_TYPE		= #{GOODBAD_TYPE}
		 , RECEIPT_Q		= #{RECEIPT_Q}
		 , END_DECISION		= #{END_DECISION}
		 , PJT_CODE			= #{PJT_CODE}
		 , MAKE_LOT_NO		= #{MAKE_LOT_NO}
		 , MAKE_DATE		= #{MAKE_DATE}
		 , MAKE_EXP_DATE	= #{MAKE_EXP_DATE}
		 , IN_TYPE			= #{IN_TYPE}
		 , HW				= #{HW}
		 , SW				= #{SW}
		 , COMPLETE_DATE	= #{COMPLETE_DATE}
		 , UPDATE_DB_USER	= #{S_USER_ID}
		 , UPDATE_DB_TIME	= GETDATE()
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND INSPEC_NUM		= #{INSPEC_NUM}
	   AND INSPEC_SEQ		= #{INSPEC_SEQ}
</update>

<delete id="s_qms500ukrv_mekServiceImpl.deleteMaster" parameterType="Map" >
	DELETE
	  FROM S_QMS500T_MEK
	 WHERE COMP_CODE	= #{S_COMP_CODE}
	   AND DIV_CODE		= #{DIV_CODE}
	   AND INSPEC_NUM	= #{INSPEC_NUM}
	   AND INSPEC_SEQ	= #{INSPEC_SEQ}
</delete>

<update id="s_qms500ukrv_mekServiceImpl.updateBTR100T_inspecNum" parameterType="Map" >
	UPDATE BTR100T
	   SET INSPEC_NUM		= #{INSPEC_NUM}
		 , INSPEC_SEQ		= #{INSPEC_SEQ}
	<if test="@foren.Ognl@isNotEmpty(INSPEC_NUM)">
		 , INSPEC_Q			= ISNULL(INSPEC_Q, 0) + #{INSPEC_Q} - #{ORI_INSPEC_Q}
	</if>
	<if test="@foren.Ognl@isEmpty(INSPEC_NUM)">
		 , INSPEC_Q			= ISNULL(INSPEC_Q, 0) - #{INSPEC_Q}
	</if>
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND INOUT_NUM		= #{INOUT_NUM}
	   AND INOUT_SEQ		= #{INOUT_SEQ}
</update>

<select id="s_qms500ukrv_mekServiceImpl.selectBTR100T_inspecQ" parameterType="Map" resultType="Double">
	SELECT TOP 1
		   INOUT_DATE
	  FROM BTR100T
	 WHERE COMP_CODE	= #{S_COMP_CODE}
	   AND DIV_CODE		= #{DIV_CODE}
	   AND INOUT_NUM	= #{INOUT_NUM}
	   AND INOUT_SEQ	= #{INOUT_SEQ}
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectBTR100T_inoutDate" parameterType="Map" resultType="String">
	SELECT TOP 1
		   INOUT_DATE
	  FROM BTR100T
	 WHERE COMP_CODE	= #{S_COMP_CODE}
	   AND DIV_CODE		= #{DIV_CODE}
	   AND INOUT_NUM	= #{INOUT_NUM}
	   AND INOUT_SEQ	= #{INOUT_SEQ}
</select>

<update id="s_qms500ukrv_mekServiceImpl.updateBTR100T_lotNo" parameterType="Map" >
	UPDATE BTR100T
	   SET LOT_NO			= #{LOT_NO}
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND INOUT_NUM		= #{INOUT_NUM}
	   AND INOUT_SEQ		= #{INOUT_SEQ}
</update>

<update id="s_qms500ukrv_mekServiceImpl.spSP_STOCK_PeriodicAverageClosing4Div_ITEM" parameterType="Map" statementType="CALLABLE">
	{call SP_STOCK_PeriodicAverageClosing4Div_ITEM (
		#{COMP_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{DIV_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{START_MONTH		, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{END_MONTH			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{ITEM_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{USER_ID			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{ERROR_DESC		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
	)}
</update>

<insert id="s_qms500ukrv_mekServiceImpl.insertQms210" parameterType="Map">
/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query10 */
	INSERT S_QMS510T_MEK
		 ( DIV_CODE		, COMP_CODE		, INSPEC_NUM	, INSPEC_SEQ	, BAD_INSPEC_CODE	, BAD_INSPEC_Q
		 , INSPEC_REMARK, MANAGE_REMARK	, SEQ			, UPDATE_DB_USER, UPDATE_DB_TIME	)
	VALUES
		 ( #{DIV_CODE}
		 , #{S_COMP_CODE}
		 , #{INSPEC_NUM}
		 , #{INSPEC_SEQ}
		 , #{BAD_INSPEC_CODE}
		 , #{BAD_INSPEC_Q}
		 , #{INSPEC_REMARK}
		 , #{MANAGE_REMARK}
		 , #{SEQ}
		 , #{S_USER_ID}
		 , GETDATE() 
		 )
</insert>

<select id="s_qms500ukrv_mekServiceImpl.selectQMS200" parameterType="Map" resultType="rMap">
	 /*mms200ukrv.Cmms200ukrv[fnQms200Save] Query10-1*/
	 SELECT ORDER_NUM, ORDER_SEQ
	   FROM S_QMS500T_MEK
	  WHERE COMP_CODE  = #{S_COMP_CODE}
		AND DIV_CODE   = #{DIV_CODE}
		AND INSPEC_NUM = #{INSPEC_NUM}
		AND INSPEC_SEQ = #{INSPEC_SEQ}
</select>

<update id="s_qms500ukrv_mekServiceImpl.updateMpo200" parameterType="Map">
	/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query10-2*/
<!--	 UPDATE MPO200T
	  SET BAD_RETURN_Q = ISNULL(BAD_RETURN_Q,0) + #{BAD_INSPEC_Q}
	 WHERE COMP_CODE  = #{S_COMP_CODE}
	   AND DIV_CODE   = #{DIV_CODE}
	   AND ORDER_NUM  = #{ORDER_NUM}
	   AND ORDER_SEQ  = #{ORDER_SEQ} -->
</update>

<update id="s_qms500ukrv_mekServiceImpl.updateQms210" parameterType="Map">
	/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query11*/
	UPDATE S_QMS510T_MEK
	   SET BAD_INSPEC_Q		= #{BAD_INSPEC_Q}
		 , INSPEC_REMARK	= #{INSPEC_REMARK}
		 , MANAGE_REMARK	= #{MANAGE_REMARK}
		 , SEQ				= #{SEQ}
		 , UPDATE_DB_USER	= #{S_USER_ID}
		 , UPDATE_DB_TIME	= GETDATE()
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND INSPEC_NUM		= #{INSPEC_NUM}
	   AND INSPEC_SEQ		= #{INSPEC_SEQ}
	   AND BAD_INSPEC_CODE	= #{BAD_INSPEC_CODE}
</update>

<delete id="s_qms500ukrv_mekServiceImpl.deleteQms210" parameterType="Map">
	/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query10-2*/
	DELETE S_QMS510T_MEK
	 WHERE COMP_CODE		= #{S_COMP_CODE}
	   AND DIV_CODE			= #{DIV_CODE}
	   AND INSPEC_NUM		= #{INSPEC_NUM}
	   AND INSPEC_SEQ		= #{INSPEC_SEQ}
	   AND BAD_INSPEC_CODE	= #{BAD_INSPEC_CODE}
	   AND BAD_INSPEC_Q		= 0
</delete>

<update id="s_qms500ukrv_mekServiceImpl.updateQms200" parameterType="Map">
	/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query13*/
	/*
--불량정보를 검사정보로 변경하면서 불량수량 업데이트 않하기로 함. 20190228
--		   UPDATE A SET GOOD_INSPEC_Q = ISNULL(A.RECEIPT_Q,0) * ISNULL(C.TRNS_RATE,1) - ISNULL(B.SUM_BADQTY ,0)
--						, BAD_INSPEC_Q  = ISNULL(B.SUM_BADQTY ,0)
*/

<!--  		 UPDATE A SET INSPEC_Q = ISNULL(B.SUM_BADQTY ,0)
		   FROM S_QMS500T_MEK A
				LEFT JOIN (
							SELECT COMP_CODE, DIV_CODE, INSPEC_NUM, SUM(ISNULL(BAD_INSPEC_Q, 0)) AS SUM_BADQTY
							  FROM S_QMS510T_MEK
							 WHERE COMP_CODE  = #{S_COMP_CODE}
							   AND DIV_CODE   = #{DIV_CODE}
							   AND INSPEC_NUM = #{INSPEC_NUM}
							 GROUP BY COMP_CODE, DIV_CODE, INSPEC_NUM, INSPEC_SEQ
				) B ON A.COMP_CODE=B.COMP_CODE AND A.DIV_CODE=B.DIV_CODE AND A.INSPEC_NUM=B.INSPEC_NUM AND A.INSEPC_SEQ = B.INSPEC_SEQ
				LEFT JOIN MPO200T C ON A.COMP_CODE=C.COMP_CODE AND A.DIV_CODE=C.IN_DIV_CODE AND A.ORDER_NUM=C.ORDER_NUM AND A.ORDER_SEQ=C.ORDER_SEQ
		WHERE A.COMP_CODE  = #{S_COMP_CODE}
		AND A.DIV_CODE   = #{DIV_CODE}
		AND A.INSPEC_NUM = #{INSPEC_NUM} -->

</update>

<update id="s_qms500ukrv_mekServiceImpl.updateQms200AndQms100" parameterType="Map">
	/*mms200ukrv.Cmms200ukrv[fnQms200Save] Query14*/
<!--	 BEGIN
		SET NOCOUNT ON
		SET ARITHABORT ON

		UPDATE QMS100T
		   SET INSPEC_Q = B.PASS_Q
			 , UPDATE_DB_TIME=GETDATE()
		  FROM QMS100T A
					   INNER JOIN (
				  									SELECT X1.COMP_CODE, X1.DIV_CODE, X1.INSPEC_NUM, X1.RECEIPT_NUM, X1.RECEIPT_SEQ, X2.PASS_Q
				  									FROM S_QMS500T_MEK X1 WITH (NOLOCK)
				  										 INNER JOIN (
				  														SELECT S1.COMP_CODE, S1.DIV_CODE, S1.RECEIPT_NUM, S1.RECEIPT_SEQ, SUM(S1.RECEIPT_Q * S2.TRNS_RATE)  AS PASS_Q
				  														FROM  S_QMS500T_MEK S1 WITH (NOLOCK)
				  															  INNER JOIN MPO200T S2 WITH (NOLOCK) ON S1.COMP_CODE=S2.COMP_CODE AND S1.DIV_CODE=S2.DIV_CODE AND S1.ORDER_NUM=S2.ORDER_NUM AND S1.ORDER_SEQ=S2.ORDER_SEQ
				  														GROUP BY S1.COMP_CODE, S1.DIV_CODE, S1.RECEIPT_NUM, S1.RECEIPT_SEQ
				  													) X2 ON X1.COMP_CODE=X2.COMP_CODE AND X1.DIV_CODE=X2.DIV_CODE AND X1.RECEIPT_NUM=X2.RECEIPT_NUM AND X1.RECEIPT_SEQ=X2.RECEIPT_SEQ
				  									WHERE X1.COMP_CODE=#{S_COMP_CODE}
				  									AND X1.DIV_CODE=#{DIV_CODE}
				  									AND X1.INSPEC_NUM = #{S_INSPEC_NUM}

					   ) B ON A.COMP_CODE   = B.COMP_CODE
							  AND A.DIV_CODE	= B.DIV_CODE
							  AND A.RECEIPT_NUM = B.RECEIPT_NUM
							  AND A.RECEIPT_SEQ = B.RECEIPT_SEQ

		 WHERE B.COMP_CODE   = #{S_COMP_CODE}
		   AND B.DIV_CODE	= #{DIV_CODE}
		   AND B.INSPEC_NUM  = #{S_INSPEC_NUM}

	SET ARITHABORT OFF
	SET NOCOUNT OFF
	END -->
</update>

<update id="s_qms500ukrv_mekServiceImpl.spUSP_MATRL_MMS200UKRV" parameterType="Map" statementType="CALLABLE">
	{call USP_MATRL_MMS200UKRV (
		#{KEY_VALUE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{LANG_CODE			, mode=IN	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{INSPEC_NUM		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{ERROR_DESC		, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String},
		#{AUTO_INPUT_FLAG	, mode=OUT	, jdbcType=VARCHAR	, javaType=java.lang.String}
	)}
</update>

<select id="s_qms500ukrv_mekServiceImpl.autoInputCheck" parameterType="Map" resultType="Int">
	SELECT COUNT(1)
	  FROM BSA100T
	 WHERE MAIN_CODE	= N'M025'
	   AND ISNULL(UPPER(LEFT(REF_CODE1,1)),'')	= N'Y'
	   AND SUB_CODE		= 'Y'
	   AND COMP_CODE	= #{COMP_CODE}
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputBeforeDeletetList" parameterType="Map" resultType="rMap">
		SELECT A.INOUT_NUM
			 , A.INOUT_SEQ
			 , A.INOUT_METH
			 , A.INOUT_TYPE_DETAIL
			 , A.ITEM_CODE
			 , E.ITEM_ACCOUNT
			 , B.SPEC
			 , ISNULL(A.ORDER_UNIT, B.STOCK_UNIT)			AS ORDER_UNIT
			 , A.ORDER_UNIT_Q
			 , A.ITEM_STATUS
			 , A.INOUT_Q									AS ORIGINAL_Q
			 , 0											AS GOOD_STOCK_Q
			 , 0											AS BAD_STOCK_Q
			 , ISNULL((SELECT ISNULL(ORDER_Q,0) - ISNULL(INSTOCK_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS NOINOUT_Q
			 , A.PRICE_YN
			 , A.MONEY_UNIT
			 , A.INOUT_FOR_P
			 , A.INOUT_FOR_O
			 , A.ORDER_UNIT_FOR_P
			 , A.INOUT_FOR_O								AS ORDER_UNIT_FOR_O
			 , A.ACCOUNT_YNC
			 , A.EXCHG_RATE_O
			 , A.INOUT_P
			 , A.INOUT_I
			 , A.ORDER_UNIT_P
			 , A.INOUT_I									AS ORDER_UNIT_I
			 , B.STOCK_UNIT
			 , A.TRNS_RATE
			 , A.INOUT_Q
			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , A.BL_NUM
			 , A.ORDER_NUM
			 , A.ORDER_SEQ
			 , ISNULL((SELECT ISNULL(ORDER_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS ORDER_Q
			 , A.INOUT_CODE_TYPE
			 , A.WH_CODE
			 , A.INOUT_DATE
			 , A.INOUT_PRSN
			 , A.ACCOUNT_Q
			 , A.CREATE_LOC
			 , A.SALE_C_DATE
			 , A.REMARK
			 , A.PROJECT_NO
			 , A.LOT_NO
			 , A.INOUT_TYPE
			 , A.INOUT_CODE
			 , A.DIV_CODE
			 , C.COMPANY_NUM
			 , ISNULL((SELECT ISNULL(INSTOCK_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS INSTOCK_Q
			 , A.SALE_DIV_CODE
			 , A.SALE_CUSTOM_CODE
			 , A.BILL_TYPE
			 , A.SALE_TYPE
			 , A.UPDATE_DB_USER
			 , A.UPDATE_DB_TIME
			 , E.EXCESS_RATE
			 , A.INSPEC_NUM
			 , A.INSPEC_SEQ
			 , A.COMP_CODE									AS S_COMP_CODE
		  FROM			  BTR100T A WITH (NOLOCK)
			   INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE  = B.COMP_CODE
												 AND A.ITEM_CODE  = B.ITEM_CODE
			   INNER JOIN BCM100T C WITH (NOLOCK) ON A.COMP_CODE  = C.COMP_CODE
												 AND A.INOUT_CODE = C.CUSTOM_CODE
			   INNER JOIN BPR200T E WITH (NOLOCK) ON A.COMP_CODE  = E.COMP_CODE
												 AND A.DIV_CODE   = E.DIV_CODE
												 AND A.ITEM_CODE  = E.ITEM_CODE
			   LEFT  JOIN MPO200T G WITH (NOLOCK) ON A.COMP_CODE  = G.COMP_CODE
												 AND A.DIV_CODE   = G.IN_DIV_CODE
												 AND A.ORDER_NUM  = G.ORDER_NUM
												 AND A.ORDER_SEQ  = G.ORDER_SEQ
			   LEFT  JOIN MPO100T F WITH (NOLOCK) ON G.COMP_CODE  = F.COMP_CODE
			   									 AND G.DIV_CODE   = F.DIV_CODE
												 AND G.ORDER_NUM  = F.ORDER_NUM
		 WHERE A.COMP_CODE  = #{COMP_CODE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.INSPEC_NUM = #{INSPEC_NUM}
		   AND F.ORDER_TYPE <![CDATA[<>]]> N'4'
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputBeforeDeletetOutList" parameterType="Map" resultType="rMap">
		 SELECT A.INOUT_NUM
			 , A.INOUT_SEQ
			 , A.INOUT_METH
			 , A.INOUT_TYPE_DETAIL
			 , A.ITEM_CODE
			 , E.ITEM_ACCOUNT
			 , B.SPEC
			 , ISNULL(A.ORDER_UNIT, B.STOCK_UNIT)			AS ORDER_UNIT
			 , A.ORDER_UNIT_Q
			 , A.ITEM_STATUS
			 , A.INOUT_Q									AS ORIGINAL_Q
			 , 0											AS GOOD_STOCK_Q
			 , 0											AS BAD_STOCK_Q
			 , ISNULL((SELECT ISNULL(ORDER_Q,0) - ISNULL(INSTOCK_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS NOINOUT_Q
			 , A.PRICE_YN
			 , A.MONEY_UNIT
			 , A.INOUT_FOR_P
			 , A.INOUT_FOR_O
			 , A.ORDER_UNIT_FOR_P
			 , A.INOUT_FOR_O								AS ORDER_UNIT_FOR_O
			 , A.ACCOUNT_YNC
			 , A.EXCHG_RATE_O
			 , A.INOUT_P
			 , A.INOUT_I
			 , A.ORDER_UNIT_P
			 , A.INOUT_I									AS ORDER_UNIT_I
			 , B.STOCK_UNIT
			 , A.TRNS_RATE
			 , A.INOUT_Q
			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , A.BL_NUM
			 , A.ORDER_NUM
			 , A.ORDER_SEQ
			 , ISNULL((SELECT ISNULL(ORDER_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS ORDER_Q
			 , A.INOUT_CODE_TYPE
			 , A.WH_CODE
			 , A.INOUT_DATE
			 , A.INOUT_PRSN
			 , A.ACCOUNT_Q
			 , A.CREATE_LOC
			 , A.SALE_C_DATE
			 , A.REMARK
			 , A.PROJECT_NO
			 , A.LOT_NO
			 , A.INOUT_TYPE
			 , A.INOUT_CODE
			 , A.DIV_CODE
			 , C.COMPANY_NUM
			 , ISNULL((SELECT ISNULL(INSTOCK_Q,0)
						 FROM MPO200T
						WHERE COMP_CODE = A.COMP_CODE
						  AND ORDER_NUM = A.ORDER_NUM
						  AND ORDER_SEQ = A.ORDER_SEQ),0)	AS INSTOCK_Q
			 , A.SALE_DIV_CODE
			 , A.SALE_CUSTOM_CODE
			 , A.BILL_TYPE
			 , A.SALE_TYPE
			 , A.UPDATE_DB_USER
			 , A.UPDATE_DB_TIME
			 , E.EXCESS_RATE
			 , A.INSPEC_NUM
			 , A.INSPEC_SEQ
			 , A.COMP_CODE									AS S_COMP_CODE
		  FROM			  BTR100T A WITH (NOLOCK)
			   INNER JOIN BPR100T B WITH (NOLOCK) ON A.COMP_CODE  = B.COMP_CODE
												 AND A.ITEM_CODE  = B.ITEM_CODE
			   INNER JOIN BCM100T C WITH (NOLOCK) ON A.COMP_CODE  = C.COMP_CODE
												 AND A.INOUT_CODE = C.CUSTOM_CODE
			   INNER JOIN BPR200T E WITH (NOLOCK) ON A.COMP_CODE  = E.COMP_CODE
												 AND A.DIV_CODE   = E.DIV_CODE
												 AND A.ITEM_CODE  = E.ITEM_CODE
			   LEFT  JOIN MPO200T G WITH (NOLOCK) ON A.COMP_CODE  = G.COMP_CODE
												 AND A.DIV_CODE   = G.IN_DIV_CODE
												 AND A.ORDER_NUM  = G.ORDER_NUM
												 AND A.ORDER_SEQ  = G.ORDER_SEQ
			   LEFT  JOIN MPO100T F WITH (NOLOCK) ON G.COMP_CODE  = F.COMP_CODE
												 AND G.DIV_CODE   = F.DIV_CODE
												 AND G.ORDER_NUM  = F.ORDER_NUM
		  WHERE A.COMP_CODE = #{COMP_CODE}
		   AND A.DIV_CODE   = #{DIV_CODE}
		   AND A.INSPEC_NUM = #{INSPEC_NUM}
		   AND F.ORDER_TYPE = N'4'
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputList" parameterType="Map" resultType="rMap">
		SELECT ''																		AS INOUT_NUM
			 , E.INSPEC_SEQ																AS INOUT_SEQ
			 , '1'																		AS INOUT_METH
			 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
					ELSE  (SELECT MIN(SUB_CODE)
							 FROM BSA100T
							WHERE COMP_CODE = A.COMP_CODE
							  AND MAIN_CODE = N'M103'
							  AND SUB_CODE <![CDATA[<>]]> N'$')
			   END						 												AS INOUT_TYPE_DETAIL
			 , B.ITEM_CODE
			 , D.ITEM_ACCOUNT
			 , C.SPEC
			 , B.ORDER_UNIT
			 , ISNULL(E.GOOD_INSPEC_Q,0)												AS INOUT_Q	--재고단위 수량
			 , (B.ORDER_P  * ISNULL(A.EXCHG_RATE_O ,1))									AS INOUT_P
			 , (B.ORDER_P  * ISNULL(E.GOOD_INSPEC_Q,0) * A.EXCHG_RATE_O)				AS INOUT_I

			 , ISNULL(E.GOOD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1)						AS ORDER_UNIT_Q
			 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)								AS ORDER_UNIT_P
			 , (B.ORDER_UNIT_P * ISNULL(E.GOOD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) / ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I

			 , B.ORDER_UNIT_P															AS ORDER_UNIT_FOR_P
			 , (B.ORDER_UNIT_P * ISNULL(E.GOOD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_FOR_O

			 , B.ORDER_P																AS INOUT_FOR_P
			 , (B.ORDER_P * ISNULL(E.GOOD_INSPEC_Q,0))									AS INOUT_FOR_O

			 , ISNULL(B.TRNS_RATE,1)													AS TRNS_RATE

			 , '1'																		AS ITEM_STATUS
			 , 0																		AS ORIGINAL_Q
			 , 0																		AS GOOD_STOCK_Q
			 , 0																		AS BAD_STOCK_Q
			 , ISNULL(E.GOOD_INSPEC_Q,0) 												AS NOINOUT_Q
			 , B.UNIT_PRICE_TYPE														AS PRICE_YN
			 , A.MONEY_UNIT

			 , 'Y'																		AS ACCOUNT_YNC
			 , A.EXCHG_RATE_O

			 , C.STOCK_UNIT

			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , ''																		AS BL_NUM
			 , B.ORDER_NUM
			 , B.ORDER_SEQ
			 , B.ORDER_Q
			 , '4'																		AS INOUT_CODE_TYPE
			 , CASE WHEN ISNULL(#{GOOD_WH_CODE},'') = '' THEN B.WH_CODE
			 			ELSE 	#{GOOD_WH_CODE}
			 	END																		AS WH_CODE
			 , E.INSPEC_DATE															AS INOUT_DATE
			 , ''																		AS INOUT_PRSN
			 , 0																		AS ACCOUNT_Q
			 , '2'																		AS CREATE_LOC
			 , ''																		AS SALE_C_DATE
			 , E.REMARK
			 , E.PROJECT_NO
			 , E.LOT_NO																	AS LOT_NO
			 , '1'																		AS INOUT_TYPE
			 , A.CUSTOM_CODE															AS INOUT_CODE
			 , B.IN_DIV_CODE AS DIV_CODE
			 , ''																		AS COMPANY_NUM
			 , ISNULL(B.INSTOCK_Q,0)													AS INSTOCK_Q
			 , '*'																		AS SALE_DIV_CODE
			 , '*'																		AS SALE_CUSTOM_CODE
			 , '*'																		AS BILL_TYPE
			 , '*'																		AS SALE_TYPE
			 , #{USER_ID}																AS UPDATE_DB_USER
			 , GETDATE()																AS UPDATE_DB_TIME
			 , D.EXCESS_RATE
			 , E.INSPEC_NUM
			 , E.INSPEC_SEQ
			 , A.COMP_CODE AS S_COMP_CODE
			 , E.MAKE_LOT_NO
			 , E.MAKE_DATE
			 , E.MAKE_EXP_DATE
			 , E.RECEIPT_NUM
			 , E.RECEIPT_SEQ
			 , ISNULL(E.INSPEC_Q,0) AS INSPEC_Q
		  FROM			MPO100T A WITH (NOLOCK)
			   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
												 AND A.DIV_CODE		= B.DIV_CODE
												 AND A.ORDER_NUM	= B.ORDER_NUM
			   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
												 AND B.ITEM_CODE	= C.ITEM_CODE
			   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
												 AND B.DIV_CODE		= D.DIV_CODE
												 AND B.ITEM_CODE	= D.ITEM_CODE
			   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
												 AND B.IN_DIV_CODE	= E.DIV_CODE
												 AND B.ORDER_NUM	= E.ORDER_NUM
												 AND B.ORDER_SEQ	= E.ORDER_SEQ
			   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
												 AND E.DIV_CODE		= F.DIV_CODE
												 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
												 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
		 WHERE A.COMP_CODE				 = #{COMP_CODE}
		   AND B.IN_DIV_CODE			 = #{DIV_CODE}
		   AND A.ORDER_TYPE				<![CDATA[<>]]> N'4'
		   AND ISNULL(A.AGREE_STATUS,'1') <![CDATA[>]]> N'1'
		   AND B.CONTROL_STATUS			<![CDATA[<>]]> N'9'
		   AND ISNULL(F.INSPEC_FLAG, B.INSPEC_FLAG)	= N'Y'
		   AND E.INSPEC_NUM				 =  #{INSPEC_NUM}
		   AND E.GOOD_INSPEC_Q			 <![CDATA[>]]> 0
		   AND E.END_DECISION			<![CDATA[<>]]> N'03'
		<if test="GOOD_WH_CODE == BAD_WH_CODE">
			--양품창고랑 불량창고가 같은 경우에는 불량이 같은 수불번호에 입고되어야 함
		UNION ALL
		SELECT ''																	AS INOUT_NUM
			 , E.INSPEC_SEQ															AS INOUT_SEQ
			 , '1'																	AS INOUT_METH
			 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
					ELSE  (SELECT MIN(SUB_CODE)
							 FROM BSA100T
							WHERE COMP_CODE = A.COMP_CODE
							  AND MAIN_CODE = N'M103'
							  AND SUB_CODE <![CDATA[<>]]> N'$')
			   END																	AS INOUT_TYPE_DETAIL
			 , B.ITEM_CODE
			 , D.ITEM_ACCOUNT
			 , C.SPEC
			 , B.ORDER_UNIT
			 , ISNULL(E.BAD_INSPEC_Q, 0)											AS INOUT_Q
			 , (B.ORDER_P  *  ISNULL(A.EXCHG_RATE_O,1))								AS INOUT_P
			 , (B.ORDER_P  * ISNULL(E.BAD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) )	AS INOUT_I
			 , ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1)					AS ORDER_UNIT_Q
			 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)							AS ORDER_UNIT_P
			 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) / ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I
			 , B.ORDER_UNIT_P														AS ORDER_UNIT_FOR_P
			 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_FOR_O
			 , B.ORDER_P															AS INOUT_FOR_P
			 , (B.ORDER_P * ISNULL(E.BAD_INSPEC_Q,0))								AS INOUT_FOR_O
			 , ISNULL(B.TRNS_RATE,1)												AS TRNS_RATE
			 , '2'																	AS ITEM_STATUS
			 , 0																	AS ORIGINAL_Q
			 , 0																	AS GOOD_STOCK_Q
			 , 0																	AS BAD_STOCK_Q
			 , ISNULL(E.BAD_INSPEC_Q,0)												AS NOINOUT_Q
			 , B.UNIT_PRICE_TYPE													AS PRICE_YN
			 , A.MONEY_UNIT
			 , 'Y'																	AS ACCOUNT_YNC
			 , A.EXCHG_RATE_O
			 , C.STOCK_UNIT

			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , ''																	AS BL_NUM
			 , B.ORDER_NUM
			 , B.ORDER_SEQ
			 , B.ORDER_Q
			 , '4'																	AS INOUT_CODE_TYPE
			 , CASE WHEN ISNULL(#{BAD_WH_CODE},'') = '' THEN B.WH_CODE
					ELSE #{BAD_WH_CODE}
			   END																	AS WH_CODE
			 , E.INSPEC_DATE														AS INOUT_DATE
			 , ''																	AS INOUT_PRSN
			 , 0																	AS ACCOUNT_Q
			 , '2'																	AS CREATE_LOC
			 , ''																	AS SALE_C_DATE
			 , E.REMARK
			 , E.PROJECT_NO
			 , E.LOT_NO																AS LOT_NO
			 , '1'																	AS INOUT_TYPE
			 , A.CUSTOM_CODE														AS INOUT_CODE
			  , B.IN_DIV_CODE AS DIV_CODE
			 , ''																	AS COMPANY_NUM
			 , ISNULL(B.INSTOCK_Q,0)												AS INSTOCK_Q
			 , '*'																	AS SALE_DIV_CODE
			 , '*'																	AS SALE_CUSTOM_CODE
			 , '*'																	AS BILL_TYPE
			 , '*'																	AS SALE_TYPE
			 , #{USER_ID}															AS UPDATE_DB_USER
			 , GETDATE()															AS UPDATE_DB_TIME
			 , D.EXCESS_RATE
			 , E.INSPEC_NUM
			 , E.INSPEC_SEQ
			 , A.COMP_CODE AS S_COMP_CODE
			 , E.MAKE_LOT_NO
			 , E.MAKE_DATE
			 , E.MAKE_EXP_DATE
			 , E.RECEIPT_NUM
			 , E.RECEIPT_SEQ
			 , ISNULL(E.INSPEC_Q,0) AS INSPEC_Q
		  FROM			  MPO100T A WITH (NOLOCK)
			   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
												 AND A.DIV_CODE		= B.DIV_CODE
												 AND A.ORDER_NUM	= B.ORDER_NUM
			   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
												 AND B.ITEM_CODE	= C.ITEM_CODE
			   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
												 AND B.IN_DIV_CODE	= D.DIV_CODE
												 AND B.ITEM_CODE	= D.ITEM_CODE
			   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
												 AND B.IN_DIV_CODE	= E.DIV_CODE
												 AND B.ORDER_NUM	= E.ORDER_NUM
												 AND B.ORDER_SEQ	= E.ORDER_SEQ
			   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
												 AND E.DIV_CODE		= F.DIV_CODE
												 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
												 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
			   LEFT JOIN BSA100T G WITH (NOLOCK)  ON G.COMP_CODE	= F.COMP_CODE
												 AND G.MAIN_CODE	= 'M022'
												 AND G.SUB_CODE	   != '$'
												 AND G.SUB_CODE		= '1'
												 AND G.REF_CODE1	= 'Y'
		 WHERE A.COMP_CODE				  = #{COMP_CODE}
		   AND B.IN_DIV_CODE			  = #{DIV_CODE}
		   AND A.ORDER_TYPE				 <![CDATA[<>]]> N'4'
		   AND ISNULL(A.AGREE_STATUS,'1') > N'1'
		   AND B.CONTROL_STATUS			 <![CDATA[<>]]> N'9'
		   AND ISNULL(F.INSPEC_FLAG, B.INSPEC_FLAG)	= N'Y'
		   AND E.INSPEC_NUM				  = #{INSPEC_NUM}
		   AND E.BAD_INSPEC_Q			  <![CDATA[>]]> 0
		   AND E.END_DECISION			 <![CDATA[<>]]> N'03'
		   AND ISNULL(G.SUB_CODE, '')	 != ''
		</if>
		  ORDER BY E.INSPEC_SEQ
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputBadList" parameterType="Map" resultType="rMap">
	SELECT ''																			AS INOUT_NUM
		 , E.INSPEC_SEQ																	AS INOUT_SEQ
		 , '1'																			AS INOUT_METH
		 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
				ELSE   (SELECT MIN(SUB_CODE)
						  FROM BSA100T
						 WHERE COMP_CODE = A.COMP_CODE
						   AND MAIN_CODE = N'M103'
						   AND SUB_CODE <![CDATA[<>]]> N'$')
				   END						 											AS INOUT_TYPE_DETAIL
				 , B.ITEM_CODE
				 , D.ITEM_ACCOUNT
				 , C.SPEC
				 , B.ORDER_UNIT
				 , '2'																	AS ITEM_STATUS
				 , 0																	AS ORIGINAL_Q
				 , 0																	AS GOOD_STOCK_Q
				 , 0																	AS BAD_STOCK_Q
				 , ISNULL(E.BAD_INSPEC_Q,0)												AS NOINOUT_Q
				 , B.UNIT_PRICE_TYPE													AS PRICE_YN
				 , A.MONEY_UNIT
				 , ISNULL(E.BAD_INSPEC_Q,0) / ISNULL(B.TRNS_RATE,1)						AS ORDER_UNIT_Q
				 , B.ORDER_P	  														AS INOUT_FOR_P
				 , (B.ORDER_P * ISNULL(E.BAD_INSPEC_Q,0))								AS INOUT_FOR_O
				 , B.ORDER_UNIT_P														AS ORDER_UNIT_FOR_P
				 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) / ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_FOR_O
				 , 'Y'																	AS ACCOUNT_YNC
				 , A.EXCHG_RATE_O
				 , (B.ORDER_P  *  ISNULL(A.EXCHG_RATE_O,1)) 							AS INOUT_P
				 , (B.ORDER_P  * ISNULL(E.BAD_INSPEC_Q,0) * A.EXCHG_RATE_O )			AS INOUT_I
				 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)							AS ORDER_UNIT_P
				 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) /  ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I
				 , C.STOCK_UNIT
				 , ISNULL(B.TRNS_RATE,1)												AS TRNS_RATE
				 , ISNULL(E.BAD_INSPEC_Q,0)												AS INOUT_Q   --재고단위 수량
				 , A.ORDER_TYPE
				 , A.LC_NUM
				 , ''																	AS BL_NUM
				 , B.ORDER_NUM
				 , B.ORDER_SEQ
				 , B.ORDER_Q
				 , '4'																	AS INOUT_CODE_TYPE
				 , CASE WHEN ISNULL(#{BAD_WH_CODE},'') = '' THEN B.WH_CODE
						ELSE  #{BAD_WH_CODE}
				   END																	AS WH_CODE
				 , E.INSPEC_DATE														AS INOUT_DATE
				 , ''																	AS INOUT_PRSN
				 , 0																	AS ACCOUNT_Q
				 , '2'																	AS CREATE_LOC
				 , ''																	AS SALE_C_DATE
				 , E.REMARK
				 , E.PROJECT_NO
				 , E.LOT_NO																AS LOT_NO
				 , '1'																	AS INOUT_TYPE
				 , A.CUSTOM_CODE														AS INOUT_CODE
				 , B.IN_DIV_CODE														AS DIV_CODE
				 , ''																	AS COMPANY_NUM
				 , ISNULL(B.INSTOCK_Q,0)												AS INSTOCK_Q
				 , '*'																	AS SALE_DIV_CODE
				 , '*'																	AS SALE_CUSTOM_CODE
				 , '*'																	AS BILL_TYPE
				 , '*'																	AS SALE_TYPE
				 , #{USER_ID}															AS UPDATE_DB_USER
				 , GETDATE()															AS UPDATE_DB_TIME
				 , D.EXCESS_RATE
				 , E.INSPEC_NUM
				 , E.INSPEC_SEQ
				 , A.COMP_CODE AS S_COMP_CODE
				 , E.MAKE_LOT_NO
				 , E.MAKE_DATE
				 , E.MAKE_EXP_DATE
				 , E.RECEIPT_NUM
				 , E.RECEIPT_SEQ
				 , ISNULL(E.INSPEC_Q,0)													AS INSPEC_Q
			  FROM			  MPO100T A WITH (NOLOCK)
				   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
													 AND A.DIV_CODE		= B.DIV_CODE
													 AND A.ORDER_NUM	= B.ORDER_NUM
				   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
													 AND B.ITEM_CODE	= C.ITEM_CODE
				   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
													 AND B.IN_DIV_CODE	= D.DIV_CODE
													 AND B.ITEM_CODE	= D.ITEM_CODE
				   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
													 AND B.IN_DIV_CODE	= E.DIV_CODE
													 AND B.ORDER_NUM	= E.ORDER_NUM
													 AND B.ORDER_SEQ	= E.ORDER_SEQ
				   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
													 AND E.DIV_CODE		= F.DIV_CODE
													 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
													 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
				   LEFT JOIN BSA100T G WITH (NOLOCK)  ON G.COMP_CODE	= F.COMP_CODE
													 AND G.MAIN_CODE	= 'M022'
													 AND G.SUB_CODE	   != '$'
													 AND G.SUB_CODE		= '1'
													 AND G.REF_CODE1	= 'Y'
			 WHERE A.COMP_CODE				  = #{COMP_CODE}
			   AND B.IN_DIV_CODE			  = #{DIV_CODE}
			   AND A.ORDER_TYPE				 <![CDATA[<>]]> N'4'
			   AND ISNULL(A.AGREE_STATUS,'1') <![CDATA[>]]> N'1'
			   AND B.CONTROL_STATUS			 <![CDATA[<>]]> N'9'
			   AND ISNULL(F.INSPEC_FLAG, B.INSPEC_FLAG)	= N'Y'
			   AND E.INSPEC_NUM				  = #{INSPEC_NUM}
			   AND E.BAD_INSPEC_Q			  <![CDATA[>]]> 0
			   AND E.END_DECISION			 <![CDATA[<>]]> N'03'
			   AND ISNULL(G.SUB_CODE, '')	 != ''
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputOutList" parameterType="Map" resultType="rMap">
		SELECT ''																		AS INOUT_NUM
			 , E.INSPEC_SEQ																AS INOUT_SEQ
			 , '1'																		AS INOUT_METH
			 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
					ELSE   (SELECT MIN(SUB_CODE)
							  FROM BSA100T
							 WHERE COMP_CODE = A.COMP_CODE
							   AND MAIN_CODE = N'M103'
							   AND SUB_CODE <![CDATA[<>]]> N'$')
			   END						 												AS INOUT_TYPE_DETAIL
			 , B.ITEM_CODE
			 , D.ITEM_ACCOUNT
			 , C.SPEC
			 , B.ORDER_UNIT
			 , '1'																		AS ITEM_STATUS
			 , 0																		AS ORIGINAL_Q
			 , 0																		AS GOOD_STOCK_Q
			 , 0																		AS BAD_STOCK_Q
			 , ISNULL(E.GOOD_INSPEC_Q,0)												AS NOINOUT_Q
			 , B.UNIT_PRICE_TYPE														AS PRICE_YN
			 , A.MONEY_UNIT
			 , ISNULL(E.GOOD_INSPEC_Q,0) / ISNULL(B.TRNS_RATE,1)						AS ORDER_UNIT_Q
			 , B.ORDER_P	  															AS INOUT_FOR_P
			 , (B.ORDER_P * ISNULL(E.GOOD_INSPEC_Q,0))									AS INOUT_FOR_O
			 , B.ORDER_UNIT_P															AS ORDER_UNIT_FOR_P
			 , (B.ORDER_UNIT_P * ISNULL(E.GOOD_INSPEC_Q,0) / ISNULL(B.TRNS_RATE,1))		AS ORDER_UNIT_FOR_O
			 , 'Y'																		AS ACCOUNT_YNC
			 , A.EXCHG_RATE_O
			 , (B.ORDER_P  * ISNULL(A.EXCHG_RATE_O ,1))									AS INOUT_P
			 , (B.ORDER_P  * ISNULL(E.GOOD_INSPEC_Q,0) * A.EXCHG_RATE_O )				AS INOUT_I
			 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)								AS ORDER_UNIT_P
			 , (B.ORDER_UNIT_P * ISNULL(E.GOOD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) / ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I
			 , C.STOCK_UNIT
			 , ISNULL(B.TRNS_RATE,1)													AS TRNS_RATE
			 , ISNULL(E.GOOD_INSPEC_Q,0)												AS INOUT_Q   --재고단위 수량
			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , ''																		AS BL_NUM
			 , B.ORDER_NUM
			 , B.ORDER_SEQ
			 , B.ORDER_Q
			 , '5'																		AS INOUT_CODE_TYPE
			 , CASE WHEN ISNULL(#{GOOD_WH_CODE}, '') = '' THEN B.WH_CODE
					ELSE #{GOOD_WH_CODE}
			   END																		AS WH_CODE
			 , E.INSPEC_DATE															AS INOUT_DATE
			 , ''																		AS INOUT_PRSN
			 , 0																		AS ACCOUNT_Q
			 , '2'																		AS CREATE_LOC
			 , ''																		AS SALE_C_DATE
			 , E.REMARK
			 , E.PROJECT_NO
			 , E.LOT_NO																	AS LOT_NO
			 , '1'																		AS INOUT_TYPE
			 , A.CUSTOM_CODE															AS INOUT_CODE
			 , B.IN_DIV_CODE															AS DIV_CODE
			 , ''																		AS COMPANY_NUM
			 , ISNULL(B.INSTOCK_Q,0)													AS INSTOCK_Q
			 , '*'																		AS SALE_DIV_CODE
			 , '*'																		AS SALE_CUSTOM_CODE
			 , '*'																		AS BILL_TYPE
			 , '*'																		AS SALE_TYPE
			 , #{USER_ID}																AS UPDATE_DB_USER
			 , GETDATE()																AS UPDATE_DB_TIME
			 , D.EXCESS_RATE
			 , E.INSPEC_NUM
			 , E.INSPEC_SEQ
			 , A.COMP_CODE																AS S_COMP_CODE
			 , E.MAKE_LOT_NO
			 , E.MAKE_DATE
			 , E.MAKE_EXP_DATE
			 , E.RECEIPT_NUM
			 , E.RECEIPT_SEQ
			 , ISNULL(E.INSPEC_Q,0)														AS INSPEC_Q
		  FROM			  MPO100T A WITH (NOLOCK)
			   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
												 AND A.DIV_CODE		= B.DIV_CODE
												 AND A.ORDER_NUM	= B.ORDER_NUM
			   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
												 AND B.ITEM_CODE	= C.ITEM_CODE
			   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
												 AND B.IN_DIV_CODE	= D.DIV_CODE
												 AND B.ITEM_CODE	= D.ITEM_CODE
			   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
												 AND B.IN_DIV_CODE	= E.DIV_CODE
												 AND B.ORDER_NUM	= E.ORDER_NUM
												 AND B.ORDER_SEQ	= E.ORDER_SEQ
			   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
												 AND E.DIV_CODE		= F.DIV_CODE
												 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
												 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
		 WHERE A.COMP_CODE				  = #{COMP_CODE}
		   AND B.IN_DIV_CODE			  = #{DIV_CODE}
		   AND A.ORDER_TYPE				  = N'4'
		   AND ISNULL(A.AGREE_STATUS,'1') <![CDATA[>]]> N'1'
		   AND B.CONTROL_STATUS			 <![CDATA[<>]]> N'9'
		   AND ISNULL(F.INSPEC_FLAG, B.INSPEC_FLAG) = N'Y'
		   AND E.INSPEC_NUM				  = #{INSPEC_NUM}
		   AND E.GOOD_INSPEC_Q			  <![CDATA[>]]> 0
		   AND E.END_DECISION			 <![CDATA[<>]]> N'03'
	<if test="GOOD_WH_CODE == BAD_WH_CODE">
		--양품창고랑 불량창고가 같은 경우에는 불량이 같은 수불번호에 입고되어야 함
		UNION ALL
		SELECT ''																		AS INOUT_NUM
			 , E.INSPEC_SEQ																AS INOUT_SEQ
			 , '1'																		AS INOUT_METH
			 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
					ELSE   (SELECT MIN(SUB_CODE)
							  FROM BSA100T
							 WHERE COMP_CODE = A.COMP_CODE
							   AND MAIN_CODE = N'M103'
							   AND SUB_CODE <![CDATA[<>]]> N'$')
			   END						 												AS INOUT_TYPE_DETAIL
			 , B.ITEM_CODE
			 , D.ITEM_ACCOUNT
			 , C.SPEC
			 , B.ORDER_UNIT
			 , '2'																		AS ITEM_STATUS
			 , 0																		AS ORIGINAL_Q
			 , 0																		AS GOOD_STOCK_Q
			 , 0																		AS BAD_STOCK_Q
			 , ISNULL(E.BAD_INSPEC_Q,0)													AS NOINOUT_Q
			 , B.UNIT_PRICE_TYPE														AS PRICE_YN
			 , A.MONEY_UNIT
			 , ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1)						AS ORDER_UNIT_Q
			 , B.ORDER_P	  									   						AS INOUT_FOR_P
			 , (B.ORDER_P * ISNULL(E.BAD_INSPEC_Q,0))									AS INOUT_FOR_O
			 , B.ORDER_UNIT_P															AS ORDER_UNIT_FOR_P
			 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1))		AS ORDER_UNIT_FOR_O
			 , 'Y'																		AS ACCOUNT_YNC
			 , A.EXCHG_RATE_O
			 , (B.ORDER_P  *  ISNULL(A.EXCHG_RATE_O,1)) 								AS INOUT_P
			 , (B.ORDER_P  * ISNULL(E.BAD_INSPEC_Q,0) * A.EXCHG_RATE_O )				AS INOUT_I
			 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)								AS ORDER_UNIT_P
			 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) / ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I
			 , C.STOCK_UNIT
			 , ISNULL(B.TRNS_RATE,1)													AS TRNS_RATE
			 , ISNULL(E.BAD_INSPEC_Q,0)													AS INOUT_Q		--재고단위 수량
			 , A.ORDER_TYPE
			 , A.LC_NUM
			 , ''																		AS BL_NUM
			 , B.ORDER_NUM
			 , B.ORDER_SEQ
			 , B.ORDER_Q
			 , '5'																		AS INOUT_CODE_TYPE
			 , CASE WHEN  ISNULL(#{BAD_WH_CODE},'') = '' THEN B.WH_CODE
					ELSE  #{BAD_WH_CODE}
			   END																		AS WH_CODE
			 , E.INSPEC_DATE															AS INOUT_DATE
			 , ''																		AS INOUT_PRSN
			 , 0																		AS ACCOUNT_Q
			 , '2'																		AS CREATE_LOC
			 , ''																		AS SALE_C_DATE
			 , E.REMARK
			 , E.PROJECT_NO
			 , E.LOT_NO																	AS LOT_NO
			 , '1'																		AS INOUT_TYPE
			 , A.CUSTOM_CODE															AS INOUT_CODE
			 , B.IN_DIV_CODE															AS DIV_CODE
			 , ''																		AS COMPANY_NUM
			 , ISNULL(B.INSTOCK_Q,0)													AS INSTOCK_Q
			 , '*'																		AS SALE_DIV_CODE
			 , '*'																		AS SALE_CUSTOM_CODE
			 , '*'																		AS BILL_TYPE
			 , '*'																		AS SALE_TYPE
			 , #{USER_ID}																AS UPDATE_DB_USER
			 , GETDATE()																AS UPDATE_DB_TIME
			 , D.EXCESS_RATE
			 , E.INSPEC_NUM
			 , E.INSPEC_SEQ
			 , A.COMP_CODE																AS S_COMP_CODE
			 , E.MAKE_LOT_NO
			 , E.MAKE_DATE
			 , E.MAKE_EXP_DATE
			 , E.RECEIPT_NUM
			 , E.RECEIPT_SEQ
			 , ISNULL(E.INSPEC_Q,0)														AS INSPEC_Q
		  FROM			  MPO100T A WITH (NOLOCK)
			   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
												 AND A.DIV_CODE		= B.DIV_CODE
												 AND A.ORDER_NUM	= B.ORDER_NUM
			   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
												 AND B.ITEM_CODE	= C.ITEM_CODE
			   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
												 AND B.DIV_CODE		= D.DIV_CODE
												 AND B.ITEM_CODE	= D.ITEM_CODE
			   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
												 AND B.IN_DIV_CODE	= E.DIV_CODE
												 AND B.ORDER_NUM	= E.ORDER_NUM
												 AND B.ORDER_SEQ	= E.ORDER_SEQ
			   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
												 AND E.DIV_CODE		= F.DIV_CODE
												 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
												 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
			   LEFT  JOIN BSA100T G WITH (NOLOCK) ON G.COMP_CODE	= F.COMP_CODE
												 AND G.MAIN_CODE	= 'M022'
												 AND G.SUB_CODE	   != '$'
												 AND G.SUB_CODE		= '1'
												 AND G.REF_CODE1	= 'Y'
		 WHERE A.COMP_CODE				  = #{COMP_CODE}
		   AND B.IN_DIV_CODE			  = #{DIV_CODE}
		   AND A.ORDER_TYPE				  = N'4'
		   AND ISNULL(A.AGREE_STATUS,'1') <![CDATA[>]]> N'1'
		   AND B.CONTROL_STATUS			 <![CDATA[<>]]> N'9'
		   AND ISNULL(F.INSPEC_FLAG, B.INSPEC_FLAG) = N'Y'
		   AND E.INSPEC_NUM				  = #{INSPEC_NUM}
		   AND E.BAD_INSPEC_Q			  <![CDATA[>]]> 0
		   AND E.END_DECISION			 <![CDATA[<>]]> N'03'
		   AND ISNULL(G.SUB_CODE, '')	 != ''
	</if>
</select>

<select id="s_qms500ukrv_mekServiceImpl.selectAutoInputOutBadList" parameterType="Map" resultType="rMap">
			SELECT ''																	AS INOUT_NUM
				 , E.INSPEC_SEQ															AS INOUT_SEQ
				 , '1'																	AS INOUT_METH
				 , CASE WHEN  B.ORDER_UNIT_P <![CDATA[<=]]> 0 THEN '20'
						ELSE   (SELECT MIN(SUB_CODE)
								  FROM BSA100T
								 WHERE COMP_CODE = A.COMP_CODE
								   AND MAIN_CODE = N'M103'
								   AND SUB_CODE <![CDATA[<>]]> N'$')
				   END						 											AS INOUT_TYPE_DETAIL
				 , B.ITEM_CODE
				 , D.ITEM_ACCOUNT
				 , C.SPEC
				 , B.ORDER_UNIT
				 , ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1)					AS ORDER_UNIT_Q
				 , '2'																	AS ITEM_STATUS
				 , 0																	AS ORIGINAL_Q
				 , 0																	AS GOOD_STOCK_Q
				 , 0																	AS BAD_STOCK_Q
				 , ISNULL(E.BAD_INSPEC_Q,0)												AS NOINOUT_Q
				 , B.UNIT_PRICE_TYPE													AS PRICE_YN
				 , A.MONEY_UNIT
				 , B.ORDER_P	  									   					AS INOUT_FOR_P
				 , (B.ORDER_P * ISNULL(E.BAD_INSPEC_Q,0))								AS INOUT_FOR_O
				 , B.ORDER_UNIT_P														AS ORDER_UNIT_FOR_P
				 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) /  ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_FOR_O
				 , 'Y'																	AS ACCOUNT_YNC
				 , A.EXCHG_RATE_O
				 , (B.ORDER_P  *  ISNULL(A.EXCHG_RATE_O,1)) 							AS INOUT_P
				 , (B.ORDER_P  * ISNULL(E.BAD_INSPEC_Q,0) * A.EXCHG_RATE_O )			AS INOUT_I
				 ,  B.ORDER_UNIT_P * ISNULL(A.EXCHG_RATE_O,1)							AS ORDER_UNIT_P
				 , (B.ORDER_UNIT_P * ISNULL(E.BAD_INSPEC_Q,0) * ISNULL(A.EXCHG_RATE_O,1) /  ISNULL(B.TRNS_RATE,1))	AS ORDER_UNIT_I
				 , C.STOCK_UNIT
				 , ISNULL(B.TRNS_RATE,1)												AS TRNS_RATE
				 , ISNULL(E.BAD_INSPEC_Q,0)												AS INOUT_Q		--재고단위 수량
				 , A.ORDER_TYPE
				 , A.LC_NUM
				 , ''																	AS BL_NUM
				 , B.ORDER_NUM
				 , B.ORDER_SEQ
				 , B.ORDER_Q
				 , '5'																	AS INOUT_CODE_TYPE
				 , CASE WHEN ISNULL(#{BAD_WH_CODE},'') = ''  THEN B.WH_CODE
						ELSE #{BAD_WH_CODE}
				   END																	AS WH_CODE
				 , E.INSPEC_DATE														AS INOUT_DATE
				 , ''																	AS INOUT_PRSN
				 , 0																	AS ACCOUNT_Q
				 , '2'																	AS CREATE_LOC
				 , ''																	AS SALE_C_DATE
				 , E.REMARK
				 , E.PROJECT_NO
				 , E.LOT_NO																AS LOT_NO
				 , '1'																	AS INOUT_TYPE
				 , A.CUSTOM_CODE														AS INOUT_CODE
				 , B.IN_DIV_CODE														AS DIV_CODE
				 , ''																	AS COMPANY_NUM
				 , ISNULL(B.INSTOCK_Q,0)												AS INSTOCK_Q
				 , '*'																	AS SALE_DIV_CODE
				 , '*'																	AS SALE_CUSTOM_CODE
				 , '*'																	AS BILL_TYPE
				 , '*'																	AS SALE_TYPE
				 , #{USER_ID}															AS UPDATE_DB_USER
				 , GETDATE()															AS UPDATE_DB_TIME
				 , D.EXCESS_RATE
				 , E.INSPEC_NUM
				 , E.INSPEC_SEQ
				 , A.COMP_CODE															AS S_COMP_CODE
				 , E.MAKE_LOT_NO
				 , E.MAKE_DATE
				 , E.MAKE_EXP_DATE
				 , E.RECEIPT_NUM
				 , E.RECEIPT_SEQ
				 , ISNULL(E.INSPEC_Q,0)													AS INSPEC_Q
			  FROM			  MPO100T A WITH (NOLOCK)
				   INNER JOIN MPO200T B WITH (NOLOCK) ON A.COMP_CODE	= B.COMP_CODE
													 AND A.DIV_CODE		= B.DIV_CODE
													 AND A.ORDER_NUM	= B.ORDER_NUM
				   INNER JOIN BPR100T C WITH (NOLOCK) ON B.COMP_CODE	= C.COMP_CODE
													 AND B.ITEM_CODE	= C.ITEM_CODE
				   INNER JOIN BPR200T D WITH (NOLOCK) ON B.COMP_CODE	= D.COMP_CODE
													 AND B.IN_DIV_CODE	= D.DIV_CODE
													 AND B.ITEM_CODE	= D.ITEM_CODE
				   INNER JOIN S_QMS500T_MEK E WITH (NOLOCK) ON B.COMP_CODE	= E.COMP_CODE
													 AND B.IN_DIV_CODE	= E.DIV_CODE
													 AND B.ORDER_NUM	= E.ORDER_NUM
													 AND B.ORDER_SEQ	= E.ORDER_SEQ
				   INNER JOIN QMS100T F WITH (NOLOCK) ON E.COMP_CODE	= F.COMP_CODE
													 AND E.DIV_CODE		= F.DIV_CODE
													 AND E.RECEIPT_NUM	= F.RECEIPT_NUM
													 AND E.RECEIPT_SEQ	= F.RECEIPT_SEQ
				   LEFT  JOIN BSA100T G WITH (NOLOCK) ON G.COMP_CODE	= F.COMP_CODE
													 AND G.MAIN_CODE	= 'M022'
													 AND G.SUB_CODE	   != '$'
													 AND G.SUB_CODE		= '1'
													 AND G.REF_CODE1	= 'Y'
			 WHERE A.COMP_CODE				  = #{COMP_CODE}
			   AND B.IN_DIV_CODE			  = #{DIV_CODE}
			   AND A.ORDER_TYPE				  = N'4'
			   AND ISNULL(A.AGREE_STATUS,'1') <![CDATA[>]]> N'1'
			   AND B.CONTROL_STATUS			 <![CDATA[<>]]> N'9'
			   AND ISNULL(F.INSPEC_FLAG, E.INSPEC_FLAG) = N'Y'
			   AND E.INSPEC_NUM				  = #{INSPEC_NUM}
			   AND E.BAD_INSPEC_Q			  <![CDATA[>]]> 0
			   AND E.END_DECISION			 <![CDATA[<>]]> N'03'
			   AND ISNULL(G.SUB_CODE, '')	 != ''
</select>

<select id="s_qms500ukrv_mekServiceImpl.mainReport" parameterType="Map" resultType="rMap">
		/*s_qms500ukrv_mekServiceImpl.mainReport*/
		SELECT  A.COMP_CODE
			  , A.DIV_CODE
			  , A.INSPEC_NUM
			  , A.INSPEC_SEQ
			  , A.INSPEC_DATE																	--검사일자
			  , A.ITEM_CODE																		--자재코드
			  , D.ITEM_NAME																		--품명
			  , D.SPEC																			--규격
			  , A.CUSTOM_CODE
			  , C.CUSTOM_NAME																	--수신 ,공급처
			  , C.TELEPHON																		--연락처
			  , A.INSPEC_Q																		--납품수량
			  , A.GOOD_INSPEC_Q																	--합격수량
			  , ISNULL(A.BAD_INSPEC_Q, 0)								AS BAD_INSPEC_Q			--불량수량
			  , R1.CODE_NAME											AS INSPEC_PRSN_NAME		--검사자명
			  , A.ORDER_NUM																		--발주번호
			  , A.ORDER_SEQ
			  , ( A.INSPEC_NUM +  convert(nvarchar(5),A.INSPEC_SEQ))	AS NOSEQ
			  , A.LOT_NO
			  , A.MAKE_LOT_NO
			  , A.MAKE_DATE
			  , A.MAKE_EXP_DATE
			  , E.RECEIPT_DATE
			  , D.ITEM_LEVEL1
			  , D2.ITEM_ACCOUNT
			  , D.STOCK_UNIT
			  , B2.TRNS_RATE
			  , CASE WHEN (SELECT COUNT(1)
							 FROM S_QMS510T_MEK WITH (NOLOCK)
							WHERE COMP_CODE = A.COMP_CODE
							  AND DIV_CODE = A.DIV_CODE
							  AND INSPEC_NUM = A.INSPEC_NUM
							  AND INSPEC_SEQ = A.INSPEC_SEQ) > 0 THEN 'Y'
					 ELSE  'N'
				END														AS DETAIL_YN
			  , D3.REF_CODE3 AS STD_ITEM_ACCOUNT
			  ,(SELECT STUFF((SELECT ',' + BB.EQU_NAME + '(' +  BB.EQU_CODE + ')'
				  FROM QBA200T AA INNER JOIN EQU200T BB ON AA.COMP_CODE = BB.COMP_CODE
													   AND AA.DIV_CODE  = BB.DIV_CODE
													   AND AA.EQU_CODE  = BB.EQU_CODE
				 WHERE AA.COMP_CODE = A.COMP_CODE
				   AND AA.DIV_CODE  = A.DIV_CODE
				   AND AA.ITEM_CODE = A.ITEM_CODE
				   FOR XML PATH('')),1,1,''))							AS EQU_CODE
			  , D2.RISK_GRADE
		FROM			S_QMS500T_MEK A WITH(NOLOCK)
			  LEFT JOIN MPO200T B2 WITH(NOLOCK) ON B2.COMP_CODE		= A.COMP_CODE
											   AND B2.IN_DIV_CODE	= A.DIV_CODE
											   AND B2.ORDER_NUM		= A.ORDER_NUM
											   AND B2.ORDER_SEQ		= A.ORDER_SEQ
			  LEFT JOIN MPO100T B1 WITH(NOLOCK) ON B1.COMP_CODE		= B2.COMP_CODE
											   AND B1.DIV_CODE		= B2.DIV_CODE
											   AND B1.ORDER_NUM		= B2.ORDER_NUM
			  LEFT JOIN BCM100T C  WITH(NOLOCK) ON C.COMP_CODE		= A.COMP_CODE
											   AND C.CUSTOM_CODE	= A.CUSTOM_CODE
			  LEFT JOIN BPR100T D  WITH(NOLOCK) ON D.COMP_CODE		= A.COMP_CODE
											   AND D.ITEM_CODE		= A.ITEM_CODE
			  LEFT JOIN BSA100T R1 WITH(NOLOCK) ON R1.COMP_CODE		= A.COMP_CODE
											   AND R1.MAIN_CODE		= 'Q022'
											   AND R1.SUB_CODE		= A.INSPEC_PRSN
			  LEFT JOIN QMS100T E  WITH(NOLOCK) ON A.COMP_CODE		= E.COMP_CODE
											   AND A.DIV_CODE		= E.DIV_CODE
											   AND A.RECEIPT_NUM	= E.RECEIPT_NUM
											   AND A.RECEIPT_SEQ	= E.RECEIPT_SEQ
			  LEFT JOIN BPR200T D2 WITH(NOLOCK) ON A.COMP_CODE		= D2.COMP_CODE
											   AND A.DIV_CODE		= D2.DIV_CODE
											   AND A.ITEM_CODE		= D2.ITEM_CODE
			  LEFT JOIN BSA100T D3 WITH(NOLOCK) ON D3.COMP_CODE		= D2.COMP_CODE
											   AND D3.MAIN_CODE		= 'B020'
											   AND D3.SUB_CODE	   != '$'
											   AND D3.SUB_CODE		= D2.ITEM_ACCOUNT
		WHERE A.COMP_CODE	= #{S_COMP_CODE}
		  AND A.DIV_CODE	= #{DIV_CODE}
		  AND A.INSPEC_NUM + CONVERT(VARCHAR(5), A.INSPEC_SEQ) = #{INSPEC_NUM_SEQ}
		ORDER BY NOSEQ
</select>
<select id="s_qms500ukrv_mekServiceImpl.subReport" parameterType="Map" resultType="rMap">
		/* s_qms500ukrv_mekServiceImpl.subReport */
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.ITEM_CODE
			 , A.TEST_CODE
			 , B.CODE_NAME
			 , A.REVISION_DATE
			 , A.TEST_METH
			 , A.TEST_NAME
			 , A.TEST_COND
			 , A.TEST_COND_FROM
			 , A.TEST_COND_TO
			 , A.TEST_VALUE
			 , A.SEQ
			 , A.TEST_VER
			 , A.USE_YN
			 , A.REMARK
			 , C.RISK_GRADE
			 , (SELECT STUFF((SELECT ',' + BB.EQU_NAME
				  FROM QBA200T AA INNER JOIN EQU200T BB ON AA.COMP_CODE = BB.COMP_CODE
													   AND AA.DIV_CODE  = BB.DIV_CODE
													   AND AA.EQU_CODE  = BB.EQU_CODE
				 WHERE AA.COMP_CODE = A.COMP_CODE
				   AND AA.DIV_CODE  = A.DIV_CODE
				   AND AA.ITEM_CODE = A.ITEM_CODE
				   FOR XML PATH('')),1,1,''))								AS EQU_NAMES
		  FROM			QBA210T A
			  LEFT JOIN BSA100T B ON A.COMP_CODE	= B.COMP_CODE
								 AND B.MAIN_CODE	= 'Q040'
								 AND B.SUB_CODE		= A.TEST_CODE
			  LEFT JOIN BPR200T C ON A.COMP_CODE	= C.COMP_CODE
								 AND A.DIV_CODE		= C.DIV_CODE
								 AND A.ITEM_CODE	= C.ITEM_CODE
		 WHERE A.COMP_CODE		= #{S_COMP_CODE}
		   AND A.DIV_CODE		= #{DIV_CODE}
		   AND A.ITEM_CODE		= #{ITEM_CODE}
		   AND REVISION_DATE	= (SELECT MAX(REVISION_DATE)
									 FROM QBA210T
									WHERE COMP_CODE = #{S_COMP_CODE}
									  AND DIV_CODE  = #{DIV_CODE}
									  AND ITEM_CODE = #{ITEM_CODE}
									  AND TEST_CODE = A.TEST_CODE)
</select>
</mapper>