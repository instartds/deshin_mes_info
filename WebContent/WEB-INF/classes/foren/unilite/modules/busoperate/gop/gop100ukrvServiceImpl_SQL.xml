<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gop100ukrvServiceImpl">
	<select id="gop100ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* gop100ukrvServiceImpl.selectList */
		SELECT 
			A1.MAX_OPERATION_COUNT,
			A1.DT_MAX_OPERATION_COUNT,
			MIN(A1.FULL_OPERRATION) OVER() AS FULL_OPERRATION,
			A.OFFICE_CODE+'-'+A.ROUTE_CODE+'-'+A.OPERATION_DATE+'-'+A.TEAM_CODE AS OPERTATION,
			A1.COLSPAN,
			A.COMP_CODE, 
			A.DIV_CODE,  
			A.OPERATION_DATE,  
			A.OFFICE_CODE,  
			B1.OFFICE_NAME,
			A.ROUTE_CODE,  
			A.TEAM_CODE,
			B2.TEAM_NAME,
			A.OPERATION_COUNT,
			A.VEHICLE_CODE,
			V.VEHICLE_NAME,
			R.ROUTE_NUM  ,
			A.CONFIRM_YN,
			CASE WHEN A.CONFIRM_YN = 'Y' THEN '확정' 
				 ELSE '미확정'
			END CONFIRM_YN_TEXT,
			CASE WHEN A1.OPERATION_DW = 1 THEN '일요일'
				 WHEN A1.OPERATION_DW = 2 THEN '월요일'
				 WHEN A1.OPERATION_DW = 3 THEN '화요일'
				 WHEN A1.OPERATION_DW = 4 THEN '수요일'
				 WHEN A1.OPERATION_DW = 5 THEN '목요일'
				 WHEN A1.OPERATION_DW = 6 THEN '금요일'
				 WHEN A1.OPERATION_DW = 7 THEN '토요일'
			END AS OPERATION_DW,
			A.NOTINSERVICE_YN,
			A.OTHER_VEHICLE_YN
		FROM GOP100T A
		/* A1 테이블은 Ext js View를 구성하기 위한 값 Query*/
		LEFT JOIN (SELECT COMP_CODE, DIV_CODE, OPERATION_DATE, OFFICE_CODE, ROUTE_CODE, OPERATION_COUNT, TEAM_CODE, 
						MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER() AS MAX_OPERATION_COUNT,
						MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER(PARTITION BY COMP_CODE, 
														DIV_CODE, 
														OFFICE_CODE,
														ROUTE_CODE,
														OPERATION_DATE, 
														TEAM_CODE) AS DT_MAX_OPERATION_COUNT,
						CASE WHEN MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER()= MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER(PARTITION BY COMP_CODE, 
																						DIV_CODE, 
																						OFFICE_CODE,
																						ROUTE_CODE,
																						OPERATION_DATE, 
																						TEAM_CODE
																						) 
							 THEN OFFICE_CODE+'-'+ROUTE_CODE+'-'+OPERATION_DATE+'-'+TEAM_CODE
						END AS FULL_OPERRATION ,
						CASE WHEN OPERATION_COUNT = MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT)) OVER(PARTITION BY COMP_CODE, 
																				DIV_CODE, 
																				OFFICE_CODE,
																				ROUTE_CODE,
																				OPERATION_DATE, 
																				TEAM_CODE) 
							THEN  MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER()
								- MAX(CONVERT(NUMERIC(18,0), OPERATION_COUNT))OVER(PARTITION BY COMP_CODE, 
																						 DIV_CODE, 
																						 OFFICE_CODE,
																						 ROUTE_CODE,
																						 OPERATION_DATE, 
																						 TEAM_CODE) 
								+1
						ELSE 0 
						END AS COLSPAN,
						DATEPART(DW,(CONVERT(DATETIME, OPERATION_DATE)))  OPERATION_DW
					FROM GOP100T 
					WHERE COMP_CODE = #{S_COMP_CODE}
					  AND DIV_CODE = #{S_DIV_CODE}
					  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_FR)">
					  AND OPERATION_DATE &gt;= #{OPERATION_DATE_FR}
					  </if>
					  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_TO)">
					  AND OPERATION_DATE &lt;= #{OPERATION_DATE_TO}
					  </if>
					  <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
					  AND OFFICE_CODE = #{OFFICE_CODE}
					  </if>
					  <if test="@foren.Ognl@isNotEmpty(TEAM_CODE)">
					  AND TEAM_CODE = #{TEAM_CODE}
					  </if>
					  <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
					  AND ROUTE_GROUP = #{ROUTE_GROUP}
					  </if>
					  <if test="@foren.Ognl@isNotEmpty(ROUTE_CODE)">
					  AND ROUTE_CODE = #{ROUTE_CODE}
					  </if>					 
					) A1 ON  A.COMP_CODE = A1.COMP_CODE 
							  AND A.DIV_CODE = A1.DIV_CODE
							  AND A.OPERATION_DATE = A1.OPERATION_DATE
							  AND A.OFFICE_CODE = A1.OFFICE_CODE
							  AND A.ROUTE_CODE = A1.ROUTE_CODE
							  AND A.OPERATION_COUNT = A1.OPERATION_COUNT
							  AND A.TEAM_CODE = A1.TEAM_CODE
		LEFT JOIN GRT100T R ON A.COMP_CODE = R.COMP_CODE
		                    AND A.DIV_CODE = R.DIV_CODE
		                    AND A.ROUTE_CODE = R.ROUTE_CODE  
		LEFT JOIN GVE100T V ON A.COMP_CODE = V.COMP_CODE
		                    AND A.DIV_CODE = V.DIV_CODE
		                    AND A.VEHICLE_CODE = V.VEHICLE_CODE  
		LEFT JOIN (SELECT SUB_CODE, CODE_NAME AS OFFICE_NAME
					 FROM BSA100T  
					WHERE COMP_CODE = #{S_COMP_CODE}
					  AND MAIN_CODE = 'GO01'
				  )		 B1 ON A.OFFICE_CODE = B1.SUB_CODE 
		LEFT JOIN (SELECT SUB_CODE, CODE_NAME AS TEAM_NAME
					 FROM BSA100T  
					WHERE COMP_CODE = #{S_COMP_CODE}
					  AND MAIN_CODE = 'GO02'
				  )		 B2 ON A.TEAM_CODE = B2.SUB_CODE
		WHERE A.COMP_CODE = #{S_COMP_CODE}
		  AND A.DIV_CODE = #{S_DIV_CODE}
		  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_FR)">
		  AND A.OPERATION_DATE &gt;= #{OPERATION_DATE_FR}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_TO)">
		  AND A.OPERATION_DATE &lt;= #{OPERATION_DATE_TO}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
		  AND A.OFFICE_CODE = #{OFFICE_CODE}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(TEAM_CODE)">
		  AND A.TEAM_CODE = #{TEAM_CODE}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
		  AND A.ROUTE_GROUP = #{ROUTE_GROUP}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(ROUTE_CODE)">
		  AND A.ROUTE_CODE = #{ROUTE_CODE}
		  </if>
		ORDER BY A.OFFICE_CODE, R.ROUTE_NUM, A.OPERATION_DATE, A.TEAM_CODE, CONVERT(NUMERIC(18,0), A.OPERATION_COUNT)
	</select>
	<select id="gop100ukrvServiceImpl.selectListForXls" parameterType="Map" resultType="rMap">
		SELECT  COMP_CODE,			
				DIV_CODE,		
				OFFICE_CODE,	
				OFFICE_NAME,	
				OPERATION_DATE, 	
				ROUTE_CODE,	
				ROUTE_NUM,
				TEAM_CODE,	
				TEAM_NAME,
				CASE WHEN OPERATION_DW = 1 THEN '일요일'
						 WHEN OPERATION_DW = 2 THEN '월요일'
						 WHEN OPERATION_DW = 3 THEN '화요일'
						 WHEN OPERATION_DW = 4 THEN '수요일'
						 WHEN OPERATION_DW = 5 THEN '목요일'
						 WHEN OPERATION_DW = 6 THEN '금요일'
						 WHEN OPERATION_DW = 7 THEN '토요일'
					END AS OPERATION_DW,
				  CONFIRM_YN,
				  CONFIRM_YN_TEXT,
				  [1] AS OP01, [2] AS OP02, [3] AS OP03, [4] AS OP04, [5] AS OP05, 
				  [6] AS OP06, [7] AS OP07, [8] AS OP08, [9] AS OP09, [10] AS OP10,
				  [11] AS OP11, [12] AS OP12, [13] AS OP13, [14] AS OP14, [15] AS OP15,
				  [16] AS OP16, [17] AS OP17, [18] AS OP18, [19] AS OP19, [20] AS OP20,
				  [21] AS OP21, [22] AS OP22, [23] AS OP23, [24] AS OP24, [25] AS OP25,
				  [26] AS OP26, [27] AS OP27, [28] AS OP28, [29] AS OP29, [30] AS OP30,
				  [31] AS OP31, [32] AS OP32, [33] AS OP33, [34] AS OP34, [35] AS OP35,
				  [36] AS OP36, [37] AS OP37, [38] AS OP38, [39] AS OP39, [40] AS OP40,
				  [41] AS OP41, [42] AS OP42, [43] AS OP43, [44] AS OP44, [45] AS OP45,
				  [46] AS OP46, [47] AS OP47, [48] AS OP48, [49] AS OP49, [50] AS OP50						
		FROM (SELECT  G.COMP_CODE,		
					  G.DIV_CODE,	 
					  G.OFFICE_CODE,	
					  B1.CODE_NAME AS OFFICE_NAME,
					  G.ROUTE_CODE,		
					  R1.ROUTE_NUM,
					  G.OPERATION_DATE, 	
					  G.OPERATION_COUNT, 				  
					  G.TEAM_CODE,
					  B2.CODE_NAME AS TEAM_NAME,
					  DATEPART(DW,(CONVERT(DATETIME, G.OPERATION_DATE))) OPERATION_DW,
					  CASE WHEN NOTINSERVICE_YN = 'Y' THEN V.VEHICLE_NAME+'(자차운휴)'
						   WHEN OTHER_VEHICLE_YN = 'Y' THEN '타차' 
						   ELSE V.VEHICLE_NAME 
					  END AS  VEHICLE,
					  G.CONFIRM_YN,
					  CASE WHEN G.CONFIRM_YN = 'Y' THEN '확정' 
						   ELSE '미확정'
					  END AS CONFIRM_YN_TEXT
			    FROM  GOP100T G
			    LEFT JOIN GVE100T V  ON G.COMP_CODE = V.COMP_CODE
									AND G.DIV_CODE = V.DIV_CODE
									AND G.VEHICLE_CODE = V.VEHICLE_CODE
				LEFT JOIN (
					SELECT COMP_CODE, SUB_CODE, CODE_NAME
				   	  FROM BSA100T
				     WHERE COMP_CODE=#{S_COMP_CODE}
				       AND MAIN_CODE='GO01'
				       ) B1 ON G.COMP_CODE = B1.COMP_CODE
				           AND G.OFFICE_CODE = B1.SUB_CODE 
				LEFT JOIN (
					SELECT COMP_CODE, SUB_CODE, CODE_NAME
				   	  FROM BSA100T
				     WHERE COMP_CODE=#{S_COMP_CODE}
				       AND MAIN_CODE='GO02'
				       ) B2 ON G.COMP_CODE = B2.COMP_CODE
				           AND G.TEAM_CODE = B2.SUB_CODE
				LEFT JOIN  GRT100T  R1 ON G.COMP_CODE = R1.COMP_CODE
									   AND G.DIV_CODE = R1.DIV_CODE
				          			   AND G.ROUTE_CODE = R1.ROUTE_CODE
			    WHERE  G.COMP_CODE = #{S_COMP_CODE}
				  AND G.DIV_CODE = #{S_DIV_CODE}
				  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_FR)">
				  AND G.OPERATION_DATE &gt;= #{OPERATION_DATE_FR}
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_TO)">
				  AND G.OPERATION_DATE &lt;= #{OPERATION_DATE_TO}
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
				  AND G.OFFICE_CODE = #{OFFICE_CODE}
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(TEAM_CODE)">
				  AND G.TEAM_CODE = #{TEAM_CODE}
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
				  AND G.ROUTE_GROUP = #{ROUTE_GROUP}
				  </if>
				  <if test="@foren.Ognl@isNotEmpty(ROUTE_CODE)">
				  AND G.ROUTE_CODE = #{ROUTE_CODE}
				  </if>
			    
		) AS A
		PIVOT ( 
			MAX(VEHICLE)
			FOR OPERATION_COUNT IN    ([1],
							  [2], [3], [4], [5], [6], 
							  [7], [8], [9], [10],
							  [11],[12],[13],[14],[15],
							  [16],[17],[18],[19],[20],
							  [21],[22],[23],[24],[25],
							  [26],[27],[28],[29],[30],
							  [31],[32],[33],[34],[35],
							  [36],[37],[38],[39],[40],
							  [41],[42],[43],[44],[45],
							  [46],[47],[48],[49],[50]
							 )
			) AS P
		ORDER BY OFFICE_CODE, ROUTE_CODE, OPERATION_DATE, TEAM_CODE
	</select>
	<update id="gop100ukrvServiceImpl.update" parameterType="Map">
		UPDATE GOP100T
		SET 
			NOTINSERVICE_YN = #{NOTINSERVICE_YN},
			VEHICLE_CODE = #{VEHICLE_CODE},
			OTHER_VEHICLE_YN = #{OTHER_VEHICLE_YN},
			UPDATE_DB_USER = #{S_USER_ID},
			UPDATE_DB_TIME = GETDATE()
		WHERE COMP_CODE = #{S_COMP_CODE} 
		  AND DIV_CODE = #{DIV_CODE}  
		  AND OPERATION_DATE = #{OPERATION_DATE}  		   
		  AND OFFICE_CODE = #{OFFICE_CODE}
		  AND ROUTE_CODE = #{ROUTE_CODE}
		  AND OPERATION_COUNT = #{OPERATION_COUNT} 
	</update>
	<select id="gop100ukrvServiceImpl.selectConfirmList" parameterType="Map" resultType="rMap">
		/* gop100ukrvServiceImpl.selectList */
		SELECT 
			G1.DIV_CODE,  
			G1.OPERATION_DATE,  
			G1.OFFICE_CODE,  
			G1.ROUTE_GROUP,
			G1.ROUTE_CODE,  
			G1.TEAM_CODE,
			G1.CONFIRM_YN,
			R.ROUTE_NUM,
			CASE WHEN G1.CONFIRM_YN = 'Y' THEN '확정' 
				 ELSE '미확정'
			END CONFIRM_YN_TEXT,
			G2.CONFIRM_YN AS CONFIRM_END,
			CASE WHEN G2.CONFIRM_YN = 'Y' THEN '마감' 
				 ELSE '미마감'
			END CONFIRM_END_TEXT
		FROM GOP100T G1 
		LEFT JOIN GOP200T G2 ON G1.COMP_CODE = G2.COMP_CODE
							AND G1.DIV_CODE = G2.DIV_CODE
							AND G1.OPERATION_DATE = G2.OPERATION_DATE
							AND G1.ROUTE_CODE = G2.ROUTE_CODE
		LEFT JOIN GRT100T R  ON G1.COMP_CODE = R.COMP_CODE
							AND G1.DIV_CODE = R.DIV_CODE							
							AND G1.ROUTE_CODE = R.ROUTE_CODE
		WHERE G1.COMP_CODE = #{S_COMP_CODE}
		  AND G1.DIV_CODE = #{S_DIV_CODE}
		  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_FR)">
		  AND G1.OPERATION_DATE &gt;= #{OPERATION_DATE_FR}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(OPERATION_DATE_TO)">
		  AND G1.OPERATION_DATE &lt;= #{OPERATION_DATE_TO}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(OFFICE_CODE)">
		  AND G1.OFFICE_CODE = #{OFFICE_CODE}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(ROUTE_GROUP)">
		  AND G1.ROUTE_GROUP = #{ROUTE_GROUP}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(ROUTE_CODE)">
		  AND G1.ROUTE_CODE = #{ROUTE_CODE}
		  </if>
		  <if test="@foren.Ognl@isNotEmpty(TEAM_CODE)">
		  AND G1.TEAM_CODE = #{TEAM_CODE}
		  </if>
		  
		GROUP BY G1.DIV_CODE, G1.OFFICE_CODE, G1.ROUTE_GROUP, G1.ROUTE_CODE, R.ROUTE_NUM, G1.OPERATION_DATE, G1.TEAM_CODE, G1.CONFIRM_YN, G2.CONFIRM_YN
		ORDER BY G1.DIV_CODE, G1.OFFICE_CODE, G1.ROUTE_GROUP, R.ROUTE_NUM, G1.OPERATION_DATE, G1.TEAM_CODE 
	</select>
	
	<update id="gop100ukrvServiceImpl.updateConfirm" parameterType="Map">
		UPDATE GOP100T
		SET 
			CONFIRM_YN = #{CONFIRM_YN},
			UPDATE_DB_USER = #{S_USER_ID},
			UPDATE_DB_TIME = GETDATE()
		WHERE COMP_CODE = #{S_COMP_CODE} 
		  AND DIV_CODE = #{DIV_CODE}  
		  AND OPERATION_DATE = #{OPERATION_DATE}  		   
		  AND OFFICE_CODE = #{OFFICE_CODE}
		  AND ROUTE_CODE = #{ROUTE_CODE}
		  AND TEAM_CODE = #{TEAM_CODE}
	</update>
	<insert id="gop100ukrvServiceImpl.saveAllocation" parameterType="Map">
		INSERT INTO GOP150T
		     ( KEY_VALUE
		     , COMP_CODE    , DIV_CODE      , OPERATION_DATE_FR     , OPERATION_DATE_TO     , OFFICE_CODE
		     , ROUTE_GROUP	, ROUTE_CODE )
		VALUES
		     ( #{KEY_VALUE}
		     , #{S_COMP_CODE} , #{S_DIV_CODE}   , #{B_OPERATION_DATE_FR}  , #{B_OPERATION_DATE_TO}  , #{B_OFFICE_CODE}
		     , #{B_ROUTE_GROUP}, #{B_ROUTE_CODE} )
	</insert>
	<update id="gop100ukrvServiceImpl.operationVehicleAllocation" parameterType="Map" statementType="CALLABLE">
	 
		{call SP_OPERATION_VehicleAllocation (
			#{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String} 
		)}
	   
	 </update>
	 <insert id="gop100ukrvServiceImpl.saveConfirm" parameterType="Map">
		INSERT INTO GOP160T
		     (	 KEY_VALUE
           		,COMP_CODE           ,DIV_CODE           ,OPERATION_DATE           ,ROUTE_CODE
           		,CONFIRM_YN          ,WORK_USER			 )
		VALUES
		     ( #{KEY_VALUE}
		     , #{S_COMP_CODE} 		, #{DIV_CODE}   	 , #{OPERATION_DATE}  	   ,#{ROUTE_CODE}  
			 , #{CONFIRM_YN}		, #{S_USER_ID}  )
	</insert>
	<update id="gop100ukrvServiceImpl.confirm" parameterType="Map" statementType="CALLABLE">
		{call SP_OPERATION_AllocationConfirm  (
			#{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String} 
		)}
	 </update>
</mapper>