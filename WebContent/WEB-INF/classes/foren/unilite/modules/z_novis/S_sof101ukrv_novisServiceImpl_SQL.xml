<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_sof101ukrv_novisServiceImpl">
	<select id="s_sof101ukrv_novisServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_sof101ukrv_novis.selectList */
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON

			DECLARE @CompCode     NVARCHAR(08)  /*법인코드*/
			      , @UserId       NVARCHAR(100) /*사용자ID*/
			      , @LangType     NVARCHAR(02)  /*언어구분*/
			      , @RefItem      NVARCHAR(01)
			      , @DateFormat   NVARCHAR(10)

			SET @CompCode = #{S_COMP_CODE}
			SET @UserId   = #{S_USER_ID}
			SET @LangType = #{S_LANG_CODE}
		
			/* 명칭 참조 유형 */
			SELECT TOP 1 @RefItem = REF_ITEM
			  FROM BSA300T WITH (NOLOCK)
			 WHERE USER_ID = @UserId

			SET @RefItem = ISNULL(@RefItem, N'0')

			/* 날짜 포맷 유형 설정 */
			SELECT TOP 1 @DateFormat = CODE_NAME
			  FROM BSA100T WITH (NOLOCK)
			 WHERE COMP_CODE = @CompCode
			   AND MAIN_CODE = N'B044'
			   AND REF_CODE1 = N'Y'

			SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
			/* 데이터 조회  - 수주일자/거래처별  */
			SELECT A.COMP_CODE
			     , A.DIV_CODE
			     , (CASE WHEN ISNULL(A.ORDER_DATE, '') = ''
			             THEN ''
			             ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.ORDER_DATE, 1, 4))
			                                                     , 'MM'  , SUBSTRING(A.ORDER_DATE, 5, 2))
			                                                     , 'DD'  , SUBSTRING(A.ORDER_DATE, 7, 2))
			         END)																		AS ORDER_DATE
			     , A.CUSTOM_CODE
			     , (CASE WHEN @RefItem = '1' THEN C.CUSTOM_NAME1
			             WHEN @RefItem = '2' THEN C.CUSTOM_NAME2
			                                 ELSE C.CUSTOM_NAME
			         END)																		AS CUSTOM_NAME
			     , B.ITEM_CODE
			     , (CASE WHEN @RefItem = '1' THEN D.ITEM_NAME1
			             WHEN @RefItem = '2' THEN D.ITEM_NAME2
			                                 ELSE D.ITEM_NAME
			         END)																		AS ITEM_NAME
			     , D.SPEC
			     , B.ORDER_UNIT
			     , B.TRANS_RATE
			     , (CASE WHEN ISNULL(B.DVRY_DATE, '') = ''
			             THEN ''
			             ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(B.DVRY_DATE, 1, 4))
			                                                     , 'MM'  , SUBSTRING(B.DVRY_DATE, 5, 2))
			                                                     , 'DD'  , SUBSTRING(B.DVRY_DATE, 7, 2))
			         END)																		AS DVRY_DATE
			     , (CASE WHEN ISNULL(B.INIT_DVRY_DATE, '') = ''
			             THEN ''
			             ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(B.INIT_DVRY_DATE, 1, 4))
			                                                     , 'MM'  , SUBSTRING(B.INIT_DVRY_DATE, 5, 2))
			                                                     , 'DD'  , SUBSTRING(B.INIT_DVRY_DATE, 7, 2))
			         END)																		AS INIT_DVRY_DATE
			     , ISNULL(B.ORDER_Q, 0)															AS ORDER_Q
			     , ISNULL(B.ORDER_P, 0)															AS ORDER_P
			     , (CASE WHEN A.STATUS = '6'
			             THEN ISNULL(B.ORDER_O, 0)
			             ELSE 0
			         END)																		AS ORDER_O
			     , (CASE WHEN A.STATUS = '6'
			             THEN ISNULL(B.ORDER_TAX_O, 0)
			             ELSE 0
			         END)																		AS ORDER_TAX_O
			     , (CASE WHEN A.STATUS = '6'
			             THEN ISNULL(B.ORDER_O, 0) + ISNULL(B.ORDER_TAX_O, 0)
			             ELSE 0
			         END)																		AS TOT_ORDER_TAX_O
			     , ISNULL(E.INOUT_Q, 0)															AS INOUT_Q
			     , ISNULL(E.INOUT_P, 0) 														AS INOUT_P
			     , ISNULL(E.INOUT_I, 0) 														AS INOUT_I
			     , ISNULL(F.RETURN_Q, 0)														AS RETURN_Q
			     , ISNULL(F.RETURN_P, 0) 														AS RETURN_P
			     , ISNULL(F.RETURN_I, 0) 														AS RETURN_I
			     , ISNULL(G.SALE_Q, 0)   														AS SALE_Q
			     , ISNULL(G.SALE_P, 0)     														AS SALE_P
			     , ISNULL(G.SALE_AMT_O, 0)														AS SALE_AMT_O
			     , A.ORDER_TYPE          														/* 공통코드 'S002' */
			     , B.SO_KIND	         														/* 공통코드 'S065' */
			     , A.ORDER_PRSN          														/* 공통코드 'S010' */
			     , A.ORDER_NUM
			     , B.SER_NO
			     , A.STATUS		           														/* 공통코드 'S046' */
			     , B.ORDER_STATUS          														/* 공통코드 'S011' */
			     , B.REASON1
			     , B.REASON2
			     , B.REASON3
			     , B.REASON4
			     --20191029 추가
			     , B.REASON
				 , I.PLAN_DATE1
				 , I.COMP_DATE1
				 , I.PLAN_DATE2
				 , I.COMP_DATE2
				 , I.PLAN_DATE3
				 , I.COMP_DATE3
				 , I.PLAN_DATE4
				 , I.COMP_DATE4
				 , I.PLAN_DATE5
				 , I.COMP_DATE5
				 , I.PLAN_DATE6
				 , I.COMP_DATE6
				 , I.PLAN_DATE7
				 , I.COMP_DATE7
				 , I.PLAN_DATE8
				 , I.COMP_DATE8
				 , I.PLAN_DATE9
				 , I.COMP_DATE9
				 , I.PLAN_DATE10
				 , I.COMP_DATE10
			  FROM            SOF100T A  WITH (NOLOCK)
			       INNER JOIN SOF110T B  WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
			                                          AND B.DIV_CODE    = A.DIV_CODE
			                                          AND B.ORDER_NUM   = A.ORDER_NUM
			       LEFT  JOIN S_SOF111T_NOVIS I  WITH (NOLOCK) ON I.COMP_CODE   = B.COMP_CODE
			                                          AND I.DIV_CODE    = B.DIV_CODE
			                                          AND I.ORDER_NUM   = B.ORDER_NUM
													  AND I.SER_NO		= B.SER_NO
			       INNER JOIN BCM100T C  WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
			                                          AND C.CUSTOM_CODE = A.CUSTOM_CODE
			       INNER JOIN BPR100T D  WITH (NOLOCK) ON D.COMP_CODE   = B.COMP_CODE
			                                          AND D.ITEM_CODE   = B.ITEM_CODE
			       LEFT  JOIN BPR100T H  WITH (NOLOCK) ON H.COMP_CODE   = D.COMP_CODE
			                                          AND H.ITEM_CODE   = D.ITEM_GROUP
			       LEFT  JOIN (SELECT COMP_CODE
			                        , DIV_CODE
			                        , ORDER_NUM
			                        , ORDER_SEQ
			                        , ITEM_CODE
			                        , SUM(ISNULL(ORDER_UNIT_Q, 0))	AS INOUT_Q
			                        , SUM(ISNULL(ORDER_UNIT_P, 0))	AS INOUT_P
			                        , SUM(ISNULL(ORDER_UNIT_O, 0))	AS INOUT_I
			                     FROM BTR100T WITH (NOLOCK) 
			                    WHERE COMP_CODE       = @CompCode
			                      AND INOUT_TYPE      = '2'
			                      AND CREATE_LOC      = '1'
			                      AND INOUT_CODE_TYPE = '4'
			                    GROUP BY COMP_CODE, DIV_CODE, ORDER_NUM, ORDER_SEQ, ITEM_CODE) E ON E.COMP_CODE = B.COMP_CODE
			                                                                                    AND E.DIV_CODE  = B.OUT_DIV_CODE
			                                                                                    AND E.ORDER_NUM = B.ORDER_NUM 
			                                                                                    AND E.ORDER_SEQ = B.SER_NO
			                                                                                    AND E.ITEM_CODE = B.ITEM_CODE
			       LEFT  JOIN (SELECT COMP_CODE
			                        , DIV_CODE
			                        , ORDER_NUM
			                        , ORDER_SEQ
			                        , ITEM_CODE
			                        , SUM(ISNULL(INOUT_Q, 0))	AS RETURN_Q
			                        , SUM(ISNULL(INOUT_P, 0))	AS RETURN_P
			                        , SUM(ISNULL(INOUT_I, 0))	AS RETURN_I
			                     FROM BTR100T WITH (NOLOCK) 
			                    WHERE COMP_CODE       = @CompCode
			                      AND INOUT_TYPE      = '3'
			                      AND CREATE_LOC      = '1'
			                      AND INOUT_CODE_TYPE = '4'
			                      AND INOUT_TYPE_DETAIL IN('01','02')
			                    GROUP BY COMP_CODE, DIV_CODE, ORDER_NUM, ORDER_SEQ, ITEM_CODE) F ON F.COMP_CODE = B.COMP_CODE
			                                                                                    AND F.DIV_CODE  = B.OUT_DIV_CODE
			                                                                                    AND F.ORDER_NUM = B.ORDER_NUM 
			                                                                                    AND F.ORDER_SEQ = B.SER_NO
			                                                                                    AND F.ITEM_CODE = B.ITEM_CODE
			       LEFT  JOIN (SELECT COMP_CODE
			                        , DIV_CODE
			                        , ORDER_NUM
			                        , SER_NO
			                        , ITEM_CODE
			                        , SUM(ISNULL(SALE_Q, 0))		AS SALE_Q
			                        , SUM(ISNULL(SALE_P, 0))		AS SALE_P
			                        , SUM(ISNULL(SALE_AMT_O, 0))	AS SALE_AMT_O
			                     FROM SSA110T WITH (NOLOCK) 
			                    WHERE COMP_CODE = @CompCode
			                    GROUP BY COMP_CODE, DIV_CODE, ORDER_NUM, SER_NO, ITEM_CODE) G ON G.COMP_CODE = B.COMP_CODE
			                                                                                 AND G.DIV_CODE  = B.OUT_DIV_CODE
			                                                                                 AND G.ORDER_NUM = B.ORDER_NUM 
			                                                                                 AND G.SER_NO    = B.SER_NO
			                                                                                 AND G.ITEM_CODE = B.ITEM_CODE
			       LEFT  JOIN BSA100T S3 WITH (NOLOCK) ON S3.COMP_CODE = A.COMP_CODE
			                                          AND S3.MAIN_CODE = 'S010'
			                                          AND S3.SUB_CODE  = A.ORDER_PRSN
			 WHERE A.COMP_CODE         = @CompCode
			   AND A.DIV_CODE          = #{DIV_CODE}
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_FR)">
			   AND A.ORDER_DATE    &gt;= #{ORDER_DATE_FR}
			</if>
			<if test="@foren.Ognl@isNotEmpty(ORDER_DATE_TO)">
			   AND A.ORDER_DATE    &lt;= #{ORDER_DATE_TO}
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_ORDER_TYPE)">
			   AND A.ORDER_TYPE        = #{TXT_ORDER_TYPE}
			</if>
			<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
			   AND A.CUSTOM_CODE       LIKE #{CUSTOM_CODE} + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
			   AND CASE WHEN @RefItem = '1' THEN C.CUSTOM_NAME1
			            WHEN @RefItem = '2' THEN C.CUSTOM_NAME2
			                                ELSE C.CUSTOM_NAME
			       END                 LIKE #{CUSTOM_NAME} + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
			   AND B.ITEM_CODE         LIKE #{ITEM_CODE} + '%'
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
			   AND CASE WHEN @RefItem = '1' THEN D.ITEM_NAME1
			            WHEN @RefItem = '2' THEN D.ITEM_NAME2
			                                ELSE D.ITEM_NAME
			       END                 LIKE #{ITEM_NAME} + '%'
			</if>
			<if test="COMPLETE_YN == &quot;Y&quot;">
			   --완료인 데이터 조회
			   AND ((ISNULL(B.ORDER_Q, 0) &lt;= ISNULL(E.INOUT_Q, 0) - ISNULL(F.RETURN_Q, 0)) OR (ISNULL(B.ORDER_STATUS, 'N')	= 'Y'))
			</if>
			<if test="COMPLETE_YN == &quot;N&quot;">
			   --미완료인 데이터 조회
			   AND ISNULL(B.ORDER_Q, 0) &gt; ISNULL(E.INOUT_Q, 0) - ISNULL(F.RETURN_Q, 0)
			   AND ISNULL(B.ORDER_STATUS, 'N')	= 'N'
			</if>

		<!-- panelSearch 추가정보 -->
			<if test="@foren.Ognl@isNotEmpty(ORDER_PRSN)">
			   AND A.ORDER_PRSN        = #{ORDER_PRSN}					--영업담당
			</if>
			<if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
			   AND C.AGENT_TYPE        = #{AGENT_TYPE}					--거래처분류
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_MANAGE_CUST_CODE)">
			   AND C.MANAGE_CUSTOM     = #{TXT_MANAGE_CUST_CODE}		--집계거래처
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL1)">
			   AND D.ITEM_LEVEL1       = #{ITEM_LEVEL1}					--대분류
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL2)">
			   AND D.ITEM_LEVEL2       = #{ITEM_LEVEL2}					--중분류
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_LEVEL3)">
			   AND D.ITEM_LEVEL3       = #{ITEM_LEVEL3}					--소분류
			</if>
			<if test="@foren.Ognl@isNotEmpty(ITEM_GROUP)">
			   AND D.ITEM_GROUP        = #{ITEM_GROUP}					--대표품목코드
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_SO_NUM)">
			   AND B.SO_NUM            LIKE #{TXT_SO_NUM} + '%'			--주문번호
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_CUSTOMER_ID)">
			   AND B.CUSTOMER_ID       LIKE  #{TXT_CUSTOMER_ID} + '%'	--주문자
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_TELPHONE1)">
			   AND B.TELEPHONE_NUM1    LIKE  #{TXT_TELPHONE1} + '%'		--전화번호1
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_TELPHONE2)">
			   AND B.TELEPHONE_NUM2    LIKE #{TXT_TELPHONE2} + '%'		--전화번호2
			</if>
			<if test="@foren.Ognl@isNotEmpty(TXT_ADDRESS)">
			   AND (B.ADDRESS1         LIKE  #{TXT_ADDRESS1} + '%'		--주소
			     OR B.ADDRESS2         LIKE  #{TXT_ADDRESS2} + '%')
			</if>
			<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
			   AND S3.REF_CODE2        = #{DEPT_CODE}					--부서코드
			</if>

			 ORDER BY A.ORDER_DATE, A.ORDER_NUM, B.SER_NO, A.CUSTOM_CODE, B.ITEM_CODE
		
			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END
	</select>

	<update id="s_sof101ukrv_novisServiceImpl.updateDetail" parameterType="Map">
		/* s_sof101ukrv_novisServiceImpl.updateDetail */
		IF EXISTS (	SELECT *
					  FROM S_SOF111T_NOVIS
					 WHERE COMP_CODE = #{S_COMP_CODE}
					   AND DIV_CODE  = #{DIV_CODE}
					   AND ORDER_NUM = #{ORDER_NUM}
					   AND SER_NO    = #{SER_NO}	)
		BEGIN
			UPDATE S_SOF111T_NOVIS
			   SET PLAN_DATE1		= #{PLAN_DATE1}
				 , COMP_DATE1		= #{COMP_DATE1}
				 , PLAN_DATE2		= #{PLAN_DATE2}
				 , COMP_DATE2		= #{COMP_DATE2}
				 , PLAN_DATE3		= #{PLAN_DATE3}
				 , COMP_DATE3		= #{COMP_DATE3}
				 , PLAN_DATE4		= #{PLAN_DATE4}
				 , COMP_DATE4		= #{COMP_DATE4}
				 , PLAN_DATE5		= #{PLAN_DATE5}
				 , COMP_DATE5		= #{COMP_DATE5}
				 , PLAN_DATE6		= #{PLAN_DATE6}
				 , COMP_DATE6		= #{COMP_DATE6}
				 , PLAN_DATE7		= #{PLAN_DATE7}
				 , COMP_DATE7		= #{COMP_DATE7}
				 , PLAN_DATE8		= #{PLAN_DATE8}
				 , COMP_DATE8		= #{COMP_DATE8}
				 , PLAN_DATE9		= #{PLAN_DATE9}
				 , COMP_DATE9		= #{COMP_DATE9}
				 , PLAN_DATE10		= #{PLAN_DATE10}
				 , COMP_DATE10		= #{COMP_DATE10}
				 , UPDATE_DB_USER	= #{S_USER_ID}
				 , UPDATE_DB_TIME	= GETDATE()
			 WHERE COMP_CODE = #{S_COMP_CODE}
			   AND DIV_CODE  = #{DIV_CODE}
			   AND ORDER_NUM = #{ORDER_NUM}
			   AND SER_NO    = #{SER_NO}
		END
		ELSE
		BEGIN
			INSERT INTO S_SOF111T_NOVIS
				( COMP_CODE			, DIV_CODE			, ORDER_NUM			, SER_NO
				, PLAN_DATE1		, COMP_DATE1		, PLAN_DATE2		, COMP_DATE2		, PLAN_DATE3		, COMP_DATE3
				, PLAN_DATE4		, COMP_DATE4		, PLAN_DATE5		, COMP_DATE5		, PLAN_DATE6		, COMP_DATE6
				, PLAN_DATE7		, COMP_DATE7		, PLAN_DATE8		, COMP_DATE8		, PLAN_DATE9		, COMP_DATE9
				, PLAN_DATE10		, COMP_DATE10		, INSERT_DB_USER	, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME	)
			VALUES
				( #{COMP_CODE}		, #{DIV_CODE}		, #{ORDER_NUM}		, #{SER_NO}
				, #{PLAN_DATE1}		, #{COMP_DATE1}		, #{PLAN_DATE2}		, #{COMP_DATE2}		, #{PLAN_DATE3}		, #{COMP_DATE3}
				, #{PLAN_DATE4}		, #{COMP_DATE4}		, #{PLAN_DATE5}		, #{COMP_DATE5}		, #{PLAN_DATE6}		, #{COMP_DATE6}
				, #{PLAN_DATE7}		, #{COMP_DATE7}		, #{PLAN_DATE8}		, #{COMP_DATE8}		, #{PLAN_DATE9}		, #{COMP_DATE9}
				, #{PLAN_DATE10}	, #{COMP_DATE10}	, #{S_USER_ID}		, GETDATE()			, #{S_USER_ID}		, GETDATE()			)
		END
	</update>
</mapper>