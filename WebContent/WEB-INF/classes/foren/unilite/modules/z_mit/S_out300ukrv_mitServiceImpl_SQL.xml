<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_out300ukrv_mitServiceImpl">

	<select id="s_out300ukrv_mitServiceImpl.selectList" parameterType="Map" resultType="rMap">
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON 

		    DECLARE  @CompCode         NVARCHAR(08)
			       , @DivCode          NVARCHAR(08)
			       , @PayYyyyMm        NVARCHAR(06)
				   , @ContiUnitAmt     NUMERIC(10, 0)   /* 근속수당(1년)       */
				   , @BirthUnitAmt     NUMERIC(10, 0)   /* 생일축하금          */
			       , @TetanusUnitAmt   NUMERIC(10, 0)   /* 파상품 지원금       */
				   , @RewardAmt_1      NUMERIC(20, 0)   /* 보상비용 1          */
				   , @RewardAmt_2      NUMERIC(20, 0)   /* 보상비용 1          */
				   , @RewardAmt_3      NUMERIC(20, 0)   /* 보상비용 1          */
				   , @RewardQ_1_S      NUMERIC(20, 0)   /* 보상비용 1 시작수량 */
				   , @RewardQ_1_E      NUMERIC(20, 0)   /* 보상비용 1 끝 수량  */
				   , @RewardQ_2_S      NUMERIC(20, 0)   /* 보상비용 2 시작수량 */
				   , @RewardQ_2_E      NUMERIC(20, 0)   /* 보상비용 2 끝 수량  */
				   , @RewardQ_3_S      NUMERIC(20, 0)   /* 보상비용 3 시작수량 */
				   , @RewardQ_3_E      NUMERIC(20, 0)   /* 보상비용 3 끝 수량  */
			
			SET  @CompCode       = #{S_COMP_CODE}
			SET  @DivCode        = #{DIV_CODE}
			SET  @PayYyyyMm      = #{PAY_YYYYMM}
			
			SET  @ContiUnitAmt   = 0
			SET  @BirthUnitAmt   = 0
			SET  @TetanusUnitAmt = 0
			SET  @RewardAmt_1    = 0
			SET  @RewardAmt_2    = 0
			SET  @RewardAmt_3    = 0
			SET  @RewardQ_1_S    = 99999999999
			SET  @RewardQ_1_E    = 99999999999
			SET  @RewardQ_2_S    = 99999999999
			SET  @RewardQ_2_E    = 99999999999
			SET  @RewardQ_3_S    = 99999999999
			SET  @RewardQ_3_E    = 99999999999
			
			SELECT   @ContiUnitAmt   = SUM(CASE WHEN SUB_CODE = 'A1' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )   
			       , @BirthUnitAmt   = SUM(CASE WHEN SUB_CODE = 'A2' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )
				   , @TetanusUnitAmt = SUM(CASE WHEN SUB_CODE = 'A3' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )
			
				   , @RewardAmt_1    = SUM(CASE WHEN SUB_CODE = 'B1' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )
				   , @RewardQ_1_S    = SUM(CASE WHEN SUB_CODE = 'B1' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE2), 0) ELSE 0 END )
				   , @RewardQ_1_E    = SUM(CASE WHEN SUB_CODE = 'B1' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE3), 0) ELSE 0 END )
			
				   , @RewardAmt_2    = SUM(CASE WHEN SUB_CODE = 'B2' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )
				   , @RewardQ_2_S    = SUM(CASE WHEN SUB_CODE = 'B2' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE2), 0) ELSE 0 END )
				   , @RewardQ_2_E    = SUM(CASE WHEN SUB_CODE = 'B2' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE3), 0) ELSE 0 END )
			
				   , @RewardAmt_3    = SUM(CASE WHEN SUB_CODE = 'B3' THEN  ISNULL(CONVERT(NUMERIC(10, 0), REF_CODE1), 0) ELSE 0 END )
				   , @RewardQ_3_S    = SUM(CASE WHEN SUB_CODE = 'B3' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE2), 0) ELSE 0 END )
				   , @RewardQ_3_E    = SUM(CASE WHEN SUB_CODE = 'B3' THEN  ISNULL(CONVERT(NUMERIC(20, 0), REF_CODE3), 0) ELSE 0 END )
			  FROM BSA100T  WITH (NOLOCK) 
			 WHERE COMP_CODE  = @CompCode
			   AND MAIN_CODE  = 'ZP13'
			   AND USE_YN     = 'Y'
			
			   SELECT   T1.COMP_CODE
			          , T1.DIV_CODE
			          , @PayYyyyMm                                          AS PAY_YYYYMM
			   		  , ISNULL(T2.WORKER_CODE       , T3.WORKER_CODE    )   AS WORKER_CODE     
			          , ISNULL(T2.WORKER_NAME       , T3.WORKER_NAME	)   AS WORKER_NAME	
					  , ISNULL(T1.JOIN_DATE         , T3.JOIN_DATE		)   AS JOIN_DATE		
					  , CASE WHEN ISNULL(T1.JOIN_DATE, '') = '' 
							 THEN 0 
							 ELSE  DATEDIFF(YEAR
										, CONVERT(DATETIME, T1.JOIN_DATE, 112) 
										, CONVERT(DATETIME, @PayYyyyMm+'01', 112))
						 END		                                        AS WORKING_YEARS	
					  , ISNULL(T4.GOOD_WORK_Q       , T3.GOOD_WORK_Q	)   AS GOOD_WORK_Q	
					  , ISNULL(T4.BAD_WORK_Q        , T3.BAD_WORK_Q		)   AS BAD_WORK_Q		
					  , ISNULL(T2.PRODT_AMT         , T3.PRODT_AMT		)   AS PRODT_AMT		
					  , ISNULL(T2.CONTI_AMT         , T3.CONTI_AMT		)   AS CONTI_AMT		
					  , ISNULL(T2.EDU_AMT           , T3.EDU_AMT        )   AS EDU_AMT
					  , ISNULL(T2.BIRTH_AMT         , T3.BIRTH_AMT		)   AS BIRTH_AMT		
					  , ISNULL(T2.TETANUS_MAT       , T3.TETANUS_MAT	)   AS TETANUS_MAT	
					  , ISNULL(T2.RETRO_AMT         , T3.RETRO_AMT		)   AS RETRO_AMT		
					  , ISNULL(T2.RETRO_REMARK      , T3.RETRO_REMARK	)   AS RETRO_REMARK	
					  , ISNULL(T2.REWARD_AMT        , T3.REWARD_AMT		)   AS REWARD_AMT		
					  , ISNULL(T2.TOT_AMT           , (T3.PRODT_AMT + T3.CONTI_AMT + T3.EDU_AMT + T3.BIRTH_AMT + T3.TETANUS_MAT + T3.RETRO_AMT + T3.REWARD_AMT)) AS TOT_AMT
					  , CASE WHEN T2.COMP_CODE IS NULL THEN 'S' ELSE '' END AS FLAG
					  , ISNULL(T2.CLOSE_YN          , 'N'		        )   AS CLOSE_YN	
					  , T2.REMARK	
			   FROM      HPB100T        T1 WITH (NOLOCK)
			   LEFT JOIN S_OUT300T_MIT  T2 WITH (NOLOCK)  ON T2.COMP_CODE     = T1.COMP_CODE
													      AND T2.DIV_CODE      = T1.DIV_CODE
			    									      AND T2.WORKER_CODE   = T1.TEMPC_01
			    									      AND T2.PAY_YYYYMM    = @PayYyyyMm 
			   LEFT JOIN  (
						SELECT
							     A.COMP_CODE
							   , A.DIV_CODE
							   , @PayYyyyMm                       AS PAY_YYYYMM
							   , A.TEMPC_01                       AS WORKER_CODE					/*  작업자코드   */
							   , A.NAME                           AS WORKER_NAME                    /*  작업자명     */
							   , A.JOIN_DATE                                                        /*  입사일       */
							   , CASE WHEN ISNULL(A.JOIN_DATE, '') = '' 
									  THEN 0 
									  ELSE  DATEDIFF(YEAR
												   , CONVERT(DATETIME, A.JOIN_DATE, 112) 
												   , CONVERT(DATETIME, @PayYyyyMm+'01', 112))
								 END			                  AS WORKING_YEARS                 /*  근속년수     */
							  , ISNULL(B.GOOD_WORK_Q , 0)         AS GOOD_WORK_Q                   /*  실적수량     */
							  , ISNULL(B.BAD_WORK_Q , 0)          AS BAD_WORK_Q                    /*  부적합수량   */
							  , ISNULL(B.PRODT_AMT , 0)           AS PRODT_AMT                     /*  엮기비용     */
							  , CASE WHEN ISNULL(A.JOIN_DATE, '') = '' 
									  THEN 0 
									  ELSE  DATEDIFF(YEAR
												   , CONVERT(DATETIME, A.JOIN_DATE, 112) 
												   , CONVERT(DATETIME, @PayYyyyMm+'01', 112)) * @ContiUnitAmt
								END                               AS CONTI_AMT                     /*  근속수당     */
							 , ISNULL(C.TOT_EXPENSE_AMT , 0)      AS EDU_AMT                       /*  교육비       */
							 , CASE WHEN  SUBSTRING(ISNULL(A.BIRTH_DATE, '00000000') ,5,2) = RIGHT(@PayYyyyMm, 2) AND ISNULL(A.TEMPC_03, '') != 'Y' 
									 THEN  @BirthUnitAmt 
									 ELSE 0 
								END                              AS BIRTH_AMT                     /*  생일축하금   */
							 , CASE WHEN  LEFT(A.JOIN_DATE,6) = @PayYyyyMm  
									 THEN  @TetanusUnitAmt 
									 ELSE 0 
								END                              AS TETANUS_MAT                   /*  파상풍지원금 */
							 , ISNULL(D.RETRO_AMT , 0)           AS RETRO_AMT                     /*  소급비용     */
							 , D.REMARK                          AS RETRO_REMARK                  /*  소급내역     */
							 , CASE WHEN B.BAD_WORK_Q = 0 AND B.GOOD_WORK_Q BETWEEN @RewardQ_1_S AND @RewardQ_1_E THEN @RewardAmt_1 
									WHEN B.BAD_WORK_Q = 0 AND B.GOOD_WORK_Q BETWEEN @RewardQ_2_S AND @RewardQ_2_E THEN @RewardAmt_2 
									WHEN B.BAD_WORK_Q = 0 AND B.GOOD_WORK_Q BETWEEN @RewardQ_3_S AND @RewardQ_3_E THEN @RewardAmt_3 
									ELSE 0                       
								END                              AS REWARD_AMT                   /*  보상비용    */
						  FROM       HPB100T       A WITH (NOLOCK)
						  LEFT JOIN (
										SELECT  A.COMP_CODE
											  , A.DIV_CODE
											  , A.BASIS_YYYYMM
											  , A.PRODT_PRSN 
											  , SUM(ISNULL(A.GOOD_WORK_Q,0))                          AS GOOD_WORK_Q
											  , SUM(ISNULL(A.BAD_WORK_Q,0))                           AS BAD_WORK_Q
											  , SUM(ISNULL(A.ONEDAY_Q,0)  * uniLITE.fn_S_StentWorkItemPrice_MIT(@CompCode, @DivCode, @PayYyyyMm, A.ITEM_CODE) * 1.1 ) 
												 + SUM(ISNULL(A.PROD_Q,0) * uniLITE.fn_S_StentWorkItemPrice_MIT(@CompCode, @DivCode, @PayYyyyMm, A.ITEM_CODE))	      AS PRODT_AMT
										FROM       S_OUT210T_MIT A WITH (NOLOCK)  
										WHERE A.COMP_CODE     = @CompCode
										  AND A.DIV_CODE      = @DivCode
										  AND A.BASIS_YYYYMM  = @PayYyyyMm
									   GROUP BY A.COMP_CODE , A.DIV_CODE  , A.BASIS_YYYYMM, A.PRODT_PRSN
												  ) B              ON B.COMP_CODE     = A.COMP_CODE
																  AND B.DIV_CODE      = A.DIV_CODE
																  AND B.PRODT_PRSN	  = A.TEMPC_01
						 LEFT JOIN (
										SELECT  A.COMP_CODE
											  , A.DIV_CODE
											  , LEFT(A.EDU_TO_DATE, 6) AS BASIS_YYYYMM
											  , A.WORKER_CODE
											  , SUM(TOT_EXPENSE_AMT)  AS  TOT_EXPENSE_AMT
										  FROM S_OUT100T_MIT A WITH (NOLOCK)
										 WHERE A.COMP_CODE             = @CompCode
										   AND A.DIV_CODE              = @DivCode
										   AND LEFT(A.EDU_TO_DATE, 6)  = @PayYyyyMm
										 GROUP BY A.COMP_CODE  , A.DIV_CODE , A.EDU_TO_DATE , LEFT(A.EDU_TO_DATE, 6) , A.WORKER_CODE
												  ) C              ON C.COMP_CODE     = A.COMP_CODE
																  AND C.DIV_CODE      = A.DIV_CODE
																  AND C.WORKER_CODE	  = A.TEMPC_01
						 LEFT JOIN S_OUT220T_MIT D WITH (NOLOCK)   ON D.COMP_CODE     = A.COMP_CODE
																  AND D.DIV_CODE      = A.DIV_CODE
																  AND D.BASIS_YYYYMM  = @PayYyyyMm
																  AND D.PRODT_PRSN	  = A.TEMPC_01
						  WHERE A.COMP_CODE  = @CompCode
							AND A.DIV_CODE   = @DivCode
		                    AND A.DED_TYPE = '1'
							AND A.BUSI_TYPE  = '20'
							AND A.USER_YN   = '1'
						)    T3       ON  T3.COMP_CODE	    = T1.COMP_CODE	
									 AND  T3.DIV_CODE	    = T1.DIV_CODE	
									 AND  T3.WORKER_CODE	= T1.TEMPC_01
			   LEFT JOIN (
						SELECT  A.COMP_CODE
							  , A.DIV_CODE
							  , A.BASIS_YYYYMM
							  , A.PRODT_PRSN 
							  , SUM(ISNULL(A.GOOD_WORK_Q,0))                          AS GOOD_WORK_Q
							  , SUM(ISNULL(A.BAD_WORK_Q,0))                           AS BAD_WORK_Q
							  , SUM(ISNULL(A.ONEDAY_Q,0)  * uniLITE.fn_S_StentWorkItemPrice_MIT(@CompCode, @DivCode, @PayYyyyMm, A.ITEM_CODE) * 1.1 ) 
								 + SUM(ISNULL(A.PROD_Q,0) * uniLITE.fn_S_StentWorkItemPrice_MIT(@CompCode, @DivCode, @PayYyyyMm, A.ITEM_CODE))	      AS PRODT_AMT    -- 긴급작업수량  1.1배
						FROM       S_OUT210T_MIT A WITH (NOLOCK)  
						WHERE A.COMP_CODE     = @CompCode
						  AND A.DIV_CODE      = @DivCode
						  AND A.BASIS_YYYYMM  = @PayYyyyMm
					   GROUP BY A.COMP_CODE , A.DIV_CODE  , A.BASIS_YYYYMM, A.PRODT_PRSN
								  ) T4             ON T4.COMP_CODE     = T1.COMP_CODE
												  AND T4.DIV_CODE      = T1.DIV_CODE
												  AND T4.PRODT_PRSN	   = T1.TEMPC_01
		WHERE T1.COMP_CODE  = @CompCode
		  AND T1.DIV_CODE   = @DivCode
		  AND T1.BUSI_TYPE  = '20'
		  AND T1.DED_TYPE   = '1'
		  AND T1.USER_YN    = '1'
		  AND ISNULL(T4.GOOD_WORK_Q       , T3.GOOD_WORK_Q	) > 0
		  <if test="@foren.Ognl@isNotEmpty(WORKER_CODE)">
		  AND ISNULL(T2.WORKER_CODE       , T3.WORKER_CODE	) = #{WORKER_CODE}
		  </if>
		ORDER BY ISNULL(T2.WORKER_NAME       , T3.WORKER_NAME	)
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
	<update  id="s_out300ukrv_mitServiceImpl.updateList" parameterType="Map">
	   IF EXISTS(
	   		SELECT    COMP_CODE                               --법인
					, DIV_CODE                                --사업장코드
					, PAY_YYYYMM                              --기준월	
					, WORKER_CODE                             --작업자코드
		     FROM  S_OUT300T_MIT
		    WHERE  COMP_CODE                      = #{S_COMP_CODE}
		      AND  DIV_CODE                       = #{DIV_CODE}
			  AND  PAY_YYYYMM                     = #{PAY_YYYYMM}
			  AND  WORKER_CODE                    = #{WORKER_CODE}
	   )
	   BEGIN
	   		UPDATE  S_OUT300T_MIT
			   SET    PRODT_AMT                   = #{PRODT_AMT}
					, CONTI_AMT                   = #{CONTI_AMT}
					, EDU_AMT                     = #{EDU_AMT}
					, BIRTH_AMT                   = #{BIRTH_AMT}
					, TETANUS_MAT                 = #{TETANUS_MAT}
					, RETRO_AMT                   = #{RETRO_AMT}
					, RETRO_REMARK                = #{RETRO_REMARK}
					, REWARD_AMT                  = #{REWARD_AMT}
					, TOT_AMT                     = #{TOT_AMT}
					, REMARK                      = #{REMARK}
					, CLOSE_YN                    = #{CLOSE_YN}
					, UPDATE_DB_USER              = #{S_USER_ID}
					, UPDATE_DB_TIME              = GETDATE()
		    WHERE   COMP_CODE                     = #{S_COMP_CODE}
		      AND  DIV_CODE                       = #{DIV_CODE}
			  AND  PAY_YYYYMM                     = #{PAY_YYYYMM}
			  AND  WORKER_CODE                    = #{WORKER_CODE}
	   END
	   ELSE
	   BEGIN
	   		INSERT INTO S_OUT300T_MIT
			(
				  COMP_CODE                               --법인
				, DIV_CODE                                --사업장코드	
				, PAY_YYYYMM                              --기준월		
				, WORKER_CODE                             --작업자코드	
				, WORKER_NAME                             --작업자명	
				, PRODT_AMT                               --엮기비용	
				, CONTI_AMT                               --근속수당
				, EDU_AMT                                 --교육비
				, BIRTH_AMT                               --생일축하금
				, TETANUS_MAT                             --파상품지원금
				, RETRO_AMT                               --소급비용
				, RETRO_REMARK                            --소급내역
				, REWARD_AMT                              --보상비용
				, TOT_AMT                                 --총계
				, REMARK                                  --비고
				, CLOSE_YN                                --마감여부
				, INSERT_DB_USER                          --
				, INSERT_DB_TIME                          --
				, UPDATE_DB_USER                          --
				, UPDATE_DB_TIME                          --
			) VALUES (
				  #{S_COMP_CODE}
				, #{DIV_CODE}
				, #{PAY_YYYYMM}
				, #{WORKER_CODE}
				, #{WORKER_NAME}
				, #{PRODT_AMT}
				, #{CONTI_AMT}
				, #{EDU_AMT}
				, #{BIRTH_AMT}
				, #{TETANUS_MAT}
				, #{RETRO_AMT}
				, #{RETRO_REMARK}
				, #{REWARD_AMT}
				, #{TOT_AMT}
				, #{REMARK}
				, #{CLOSE_YN}
				, #{S_USER_ID}
				, GETDATE()
				, #{S_USER_ID}
				, GETDATE()
			)
		END
	</update>
	<update  id="s_out300ukrv_mitServiceImpl.updateClose" parameterType="Map">
		UPDATE  S_OUT300T_MIT
		   SET    CLOSE_YN                    = #{CLOSE_YN}
				, UPDATE_DB_USER              = #{S_USER_ID}
				, UPDATE_DB_TIME              = GETDATE()
	    WHERE   COMP_CODE                     = #{S_COMP_CODE}
	      AND  DIV_CODE                       = #{DIV_CODE}
		  AND  PAY_YYYYMM                     = #{PAY_YYYYMM}
	</update>
	<select id="s_out300ukrv_mitServiceImpl.checkClose" parameterType="Map" resultType="rMap">
		SELECT TOP 1 CLOSE_YN
		  FROM  S_OUT300T_MIT
		 WHERE  COMP_CODE                      = #{S_COMP_CODE}
	       AND  DIV_CODE                       = #{DIV_CODE}
		   AND  PAY_YYYYMM                     = #{PAY_YYYYMM}  
	</select>
	<update id="s_out300ukrv_mitServiceImpl.deleteList" parameterType="Map">
		DELETE  FROM   S_OUT300T_MIT
	    WHERE  COMP_CODE                     = #{S_COMP_CODE}
		  AND  DIV_CODE                      = #{DIV_CODE}
		  AND  PAY_YYYYMM                    = #{PAY_YYYYMM}
		  AND  WORKER_CODE                   = #{WORKER_CODE}
	</update>
	<select id="s_out300ukrv_mitServiceImpl.selectReportLabel" parameterType="Map" resultType="rMap">
		SELECT '작업자코드'                 AS WORKER_CODE
	         , '작업자명'                   AS WORKER_NAME 
			 , '품목코드'                 AS ITEM_CODE
	         , '품목명'                   AS ITEM_NAME
		     , RIGHT(#{PAY_YYYYMM}, 2) + '.01' AS GOOD_WORK_Q1
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.02' AS GOOD_WORK_Q2
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.03' AS GOOD_WORK_Q3
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.04' AS GOOD_WORK_Q4
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.05' AS GOOD_WORK_Q5
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.06' AS GOOD_WORK_Q6
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.07' AS GOOD_WORK_Q7
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.08' AS GOOD_WORK_Q8
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.09' AS GOOD_WORK_Q9
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.10' AS GOOD_WORK_Q10
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.11' AS GOOD_WORK_Q11
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.12' AS GOOD_WORK_Q12
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.13' AS GOOD_WORK_Q13
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.14' AS GOOD_WORK_Q14
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.15' AS GOOD_WORK_Q15
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.16' AS GOOD_WORK_Q16
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.17' AS GOOD_WORK_Q17
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.18' AS GOOD_WORK_Q18
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.19' AS GOOD_WORK_Q19
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.20' AS GOOD_WORK_Q20
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.21' AS GOOD_WORK_Q21
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.22' AS GOOD_WORK_Q22
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.23' AS GOOD_WORK_Q23
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.24' AS GOOD_WORK_Q24
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.25' AS GOOD_WORK_Q25
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.26' AS GOOD_WORK_Q26
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.27' AS GOOD_WORK_Q27
			 , RIGHT(#{PAY_YYYYMM}, 2) + '.28' AS GOOD_WORK_Q28
			 , CASE WHEN RIGHT(MAX(CAL_DATE),2) &lt; '29' THEN '' ELSE RIGHT(#{PAY_YYYYMM}, 2) + '.29' END AS GOOD_WORK_Q29
			 , CASE WHEN RIGHT(MAX(CAL_DATE),2) &lt; '30' THEN '' ELSE RIGHT(#{PAY_YYYYMM}, 2) + '.30' END AS GOOD_WORK_Q30
			 , CASE WHEN RIGHT(MAX(CAL_DATE),2) &lt; '31' THEN '' ELSE RIGHT(#{PAY_YYYYMM}, 2) + '.31' END AS GOOD_WORK_Q31
			 , '단가'                     AS ITEM_P
			 , '소계'                     AS GOOD_WORK_Q
			 , '계'                       AS PRODT_AMT
			 ,'규격명'                    AS SPEC
	  FROM   HBS600T
	 WHERE   COMP_CODE = #{S_COMP_CODE}
	   AND   DIV_CODE  = #{DIV_CODE}
	   AND   LEFT(CAL_DATE, 6) = #{PAY_YYYYMM}
	 GROUP BY LEFT(CAL_DATE, 6)
	</select>
	<select id="s_out300ukrv_mitServiceImpl.selectReportByItemCode" parameterType="Map" resultType="rMap">
		SELECT    A.WORKER_CODE          -- 작업자코드
		        , A.WORKER_NAME          -- 작업자명
		        , P.ITEM_CODE            -- 품목코드
		        , B.ITEM_NAME            -- 품목명
				, P.GOOD_WORK_Q1         -- 1일 작업수량
				, P.GOOD_WORK_Q2         -- 2일 작업수량
				, P.GOOD_WORK_Q3         -- 3일 작업수량
				, P.GOOD_WORK_Q4         -- 4일 작업수량
				, P.GOOD_WORK_Q5         -- 5일 작업수량
				, P.GOOD_WORK_Q6         -- 6일 작업수량
				, P.GOOD_WORK_Q7         -- 7일 작업수량
				, P.GOOD_WORK_Q8         -- 8일 작업수량
				, P.GOOD_WORK_Q9         -- 9일 작업수량
				, P.GOOD_WORK_Q10        -- 10일 작업수량
				, P.GOOD_WORK_Q11        -- 11일 작업수량
				, P.GOOD_WORK_Q12        -- 12일 작업수량
				, P.GOOD_WORK_Q13        -- 13일 작업수량
				, P.GOOD_WORK_Q14        -- 14일 작업수량
				, P.GOOD_WORK_Q15        -- 15일 작업수량
				, P.GOOD_WORK_Q16        -- 16일 작업수량
				, P.GOOD_WORK_Q17        -- 17일 작업수량
				, P.GOOD_WORK_Q18        -- 18일 작업수량
				, P.GOOD_WORK_Q19        -- 19일 작업수량
				, P.GOOD_WORK_Q20        -- 20일 작업수량
				, P.GOOD_WORK_Q21        -- 21일 작업수량
				, P.GOOD_WORK_Q22        -- 22일 작업수량
				, P.GOOD_WORK_Q23        -- 23일 작업수량
				, P.GOOD_WORK_Q24        -- 24일 작업수량
				, P.GOOD_WORK_Q25        -- 25일 작업수량
				, P.GOOD_WORK_Q26        -- 26일 작업수량
				, P.GOOD_WORK_Q27        -- 27일 작업수량
				, P.GOOD_WORK_Q28        -- 28일 작업수량
				, P.GOOD_WORK_Q29        -- 29일 작업수량
				, P.GOOD_WORK_Q30        -- 30일 작업수량
				, P.GOOD_WORK_Q31        -- 31일 작업수량
				, uniLITE.fn_S_StentWorkItemPrice_MIT(A.COMP_CODE, A.DIV_CODE, A.PAY_YYYYMM, P.ITEM_CODE)  AS ITEM_P   -- 단가
		        , C.GOOD_WORK_Q          -- 수량 계
		        , ISNULL(C.ONEDAY_Q,0)  * uniLITE.fn_S_StentWorkItemPrice_MIT(A.COMP_CODE, A.DIV_CODE, A.PAY_YYYYMM, P.ITEM_CODE) * 1.1 
			       + ISNULL(C.PROD_Q,0) * uniLITE.fn_S_StentWorkItemPrice_MIT(A.COMP_CODE, A.DIV_CODE, A.PAY_YYYYMM, P.ITEM_CODE)	       AS PRODT_AMT           -- 금액 계 (긴급작업수량 1.1배)
				, B.SPEC                 -- 규격
		  FROM       S_OUT300T_MIT A WITH (NOLOCK)
		  INNER JOIN (
					  SELECT  COMP_CODE
							, DIV_CODE
							, PRODT_PRSN
							, ITEM_CODE
							, [01] AS GOOD_WORK_Q1,  [02] AS GOOD_WORK_Q2,  [03] AS GOOD_WORK_Q3,  [04] AS GOOD_WORK_Q4,  [05] AS GOOD_WORK_Q5
							, [06] AS GOOD_WORK_Q6,  [07] AS GOOD_WORK_Q7,  [08] AS GOOD_WORK_Q8,  [09] AS GOOD_WORK_Q9,  [10] AS GOOD_WORK_Q10
							, [11] AS GOOD_WORK_Q11, [12] AS GOOD_WORK_Q12, [13] AS GOOD_WORK_Q13, [14] AS GOOD_WORK_Q14, [15] AS GOOD_WORK_Q15
							, [16] AS GOOD_WORK_Q16, [17] AS GOOD_WORK_Q17, [18] AS GOOD_WORK_Q18, [19] AS GOOD_WORK_Q19, [20] AS GOOD_WORK_Q20
							, [21] AS GOOD_WORK_Q21, [22] AS GOOD_WORK_Q22, [23] AS GOOD_WORK_Q23, [24] AS GOOD_WORK_Q24, [25] AS GOOD_WORK_Q25
							, [26] AS GOOD_WORK_Q26, [27] AS GOOD_WORK_Q27, [28] AS GOOD_WORK_Q28, [29] AS GOOD_WORK_Q29, [30] AS GOOD_WORK_Q30, [31] AS GOOD_WORK_Q31
					FROM
						(SELECT   COMP_CODE
								, DIV_CODE
								, PRODT_PRSN
								, ITEM_CODE
								, RIGHT(PRODT_DATE,2) AS PRODT_DATE
								, GOOD_WORK_Q		AS GOOD_WORK_Q        
						   FROM S_OUT211T_MIT WITH (NOLOCK)
						  WHERE COMP_CODE           = #{S_COMP_CODE}
							AND DIV_CODE            = #{DIV_CODE}
							AND LEFT(PRODT_DATE,6)  = #{PAY_YYYYMM}
							AND PRODT_PRSN         IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
						) P1
					PIVOT (  SUM(GOOD_WORK_Q)  FOR PRODT_DATE IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31]) ) AS P2
					 ) AS P                         ON P.COMP_CODE     = A.COMP_CODE
					                               AND P.DIV_CODE      = A.DIV_CODE
											       AND P.PRODT_PRSN    = A.WORKER_CODE
											       AND P.ITEM_CODE     = P.ITEM_CODE
		  INNER JOIN BPR100T       B WITH (NOLOCK)  ON B.COMP_CODE     = P.COMP_CODE
		                                           AND B.ITEM_CODE     = P.ITEM_CODE
		  INNER JOIN S_OUT210T_MIT C WITH (NOLOCK)  ON C.COMP_CODE	   = P.COMP_CODE
					                               AND C.DIV_CODE      = P.DIV_CODE
					                               AND C.BASIS_YYYYMM  = A.PAY_YYYYMM
					                               AND C.ITEM_CODE	   = P.ITEM_CODE
					                               AND C.PRODT_PRSN	   = P.PRODT_PRSN
		 WHERE A.COMP_CODE      = #{S_COMP_CODE}
		   AND A.DIV_CODE       = #{DIV_CODE}
		   AND A.PAY_YYYYMM     = #{PAY_YYYYMM}
		   AND A.WORKER_CODE   IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
		UNION ALL
		SELECT    ''                                   AS WORKER_CODE              -- 작업자코드
				, ''                                   AS WORKER_NAME              -- 작업자명
				, '총계'                                AS ITEM_CODE                -- 품목코드
				, ''                                   AS ITEM_NAME                -- 품목명
				, SUM(ISNULL(P.GOOD_WORK_Q1 ,0))       AS GOOD_WORK_Q1
				, SUM(ISNULL(P.GOOD_WORK_Q2 ,0))       AS GOOD_WORK_Q2
				, SUM(ISNULL(P.GOOD_WORK_Q3 ,0))       AS GOOD_WORK_Q3
				, SUM(ISNULL(P.GOOD_WORK_Q4 ,0))       AS GOOD_WORK_Q4
				, SUM(ISNULL(P.GOOD_WORK_Q5 ,0))       AS GOOD_WORK_Q5
				, SUM(ISNULL(P.GOOD_WORK_Q6 ,0))       AS GOOD_WORK_Q6
				, SUM(ISNULL(P.GOOD_WORK_Q7 ,0))       AS GOOD_WORK_Q7
				, SUM(ISNULL(P.GOOD_WORK_Q8 ,0))       AS GOOD_WORK_Q8
				, SUM(ISNULL(P.GOOD_WORK_Q9 ,0))       AS GOOD_WORK_Q9
				, SUM(ISNULL(P.GOOD_WORK_Q10,0))       AS GOOD_WORK_Q10
				, SUM(ISNULL(P.GOOD_WORK_Q11,0))       AS GOOD_WORK_Q11
				, SUM(ISNULL(P.GOOD_WORK_Q12,0))       AS GOOD_WORK_Q12
				, SUM(ISNULL(P.GOOD_WORK_Q13,0))       AS GOOD_WORK_Q13
				, SUM(ISNULL(P.GOOD_WORK_Q14,0))       AS GOOD_WORK_Q14
				, SUM(ISNULL(P.GOOD_WORK_Q15,0))       AS GOOD_WORK_Q15
				, SUM(ISNULL(P.GOOD_WORK_Q16,0))       AS GOOD_WORK_Q16
				, SUM(ISNULL(P.GOOD_WORK_Q17,0))       AS GOOD_WORK_Q17
				, SUM(ISNULL(P.GOOD_WORK_Q18,0))       AS GOOD_WORK_Q18
				, SUM(ISNULL(P.GOOD_WORK_Q19,0))       AS GOOD_WORK_Q19
				, SUM(ISNULL(P.GOOD_WORK_Q20,0))       AS GOOD_WORK_Q20
				, SUM(ISNULL(P.GOOD_WORK_Q21,0))       AS GOOD_WORK_Q21
				, SUM(ISNULL(P.GOOD_WORK_Q22,0))       AS GOOD_WORK_Q22
				, SUM(ISNULL(P.GOOD_WORK_Q23,0))       AS GOOD_WORK_Q23
				, SUM(ISNULL(P.GOOD_WORK_Q24,0))       AS GOOD_WORK_Q24
				, SUM(ISNULL(P.GOOD_WORK_Q25,0))       AS GOOD_WORK_Q25
				, SUM(ISNULL(P.GOOD_WORK_Q26,0))       AS GOOD_WORK_Q26
				, SUM(ISNULL(P.GOOD_WORK_Q27,0))       AS GOOD_WORK_Q27
				, SUM(ISNULL(P.GOOD_WORK_Q28,0))       AS GOOD_WORK_Q28
				, SUM(ISNULL(P.GOOD_WORK_Q29,0))       AS GOOD_WORK_Q29
				, SUM(ISNULL(P.GOOD_WORK_Q30,0))       AS GOOD_WORK_Q30
				, SUM(ISNULL(P.GOOD_WORK_Q31,0))       AS GOOD_WORK_Q31
				, NULL                  AS ITEM_P                            -- 단가
		        , SUM(C.GOOD_WORK_Q)    AS GOOD_WORK_Q
		        , MAX(A.PRODT_AMT)      AS PRODT_AMT
				, ''                    AS SPEC
		  FROM       S_OUT300T_MIT A WITH (NOLOCK)
		  INNER JOIN (
					  SELECT  COMP_CODE
							, DIV_CODE
							, PRODT_PRSN
							, ITEM_CODE
							, [01] AS GOOD_WORK_Q1,  [02] AS GOOD_WORK_Q2,  [03] AS GOOD_WORK_Q3,  [04] AS GOOD_WORK_Q4,  [05] AS GOOD_WORK_Q5
							, [06] AS GOOD_WORK_Q6,  [07] AS GOOD_WORK_Q7,  [08] AS GOOD_WORK_Q8,  [09] AS GOOD_WORK_Q9,  [10] AS GOOD_WORK_Q10
							, [11] AS GOOD_WORK_Q11, [12] AS GOOD_WORK_Q12, [13] AS GOOD_WORK_Q13, [14] AS GOOD_WORK_Q14, [15] AS GOOD_WORK_Q15
							, [16] AS GOOD_WORK_Q16, [17] AS GOOD_WORK_Q17, [18] AS GOOD_WORK_Q18, [19] AS GOOD_WORK_Q19, [20] AS GOOD_WORK_Q20
							, [21] AS GOOD_WORK_Q21, [22] AS GOOD_WORK_Q22, [23] AS GOOD_WORK_Q23, [24] AS GOOD_WORK_Q24, [25] AS GOOD_WORK_Q25
							, [26] AS GOOD_WORK_Q26, [27] AS GOOD_WORK_Q27, [28] AS GOOD_WORK_Q28, [29] AS GOOD_WORK_Q29, [30] AS GOOD_WORK_Q30, [31] AS GOOD_WORK_Q31
					FROM
						(SELECT   COMP_CODE
								, DIV_CODE
								, PRODT_PRSN
								, ITEM_CODE
								, RIGHT(PRODT_DATE,2) AS PRODT_DATE
								, GOOD_WORK_Q		AS GOOD_WORK_Q        
						   FROM S_OUT211T_MIT WITH (NOLOCK)
						  WHERE COMP_CODE           = #{S_COMP_CODE}
							AND DIV_CODE            = #{DIV_CODE}
							AND LEFT(PRODT_DATE,6)  = #{PAY_YYYYMM}
							AND PRODT_PRSN         IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
						) P1
					PIVOT (  SUM(GOOD_WORK_Q)  FOR PRODT_DATE IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31]) ) AS P2
					 ) AS P                         ON P.COMP_CODE     = A.COMP_CODE
					                               AND P.DIV_CODE      = A.DIV_CODE
											       AND P.PRODT_PRSN    = A.WORKER_CODE
											       AND P.ITEM_CODE     = P.ITEM_CODE
		  INNER JOIN BPR100T       B WITH (NOLOCK)  ON B.COMP_CODE     = P.COMP_CODE
		                                           AND B.ITEM_CODE     = P.ITEM_CODE
		  INNER JOIN S_OUT210T_MIT C WITH (NOLOCK)  ON C.COMP_CODE	   = P.COMP_CODE
					                               AND C.DIV_CODE      = P.DIV_CODE
					                               AND C.BASIS_YYYYMM  = A.PAY_YYYYMM
					                               AND C.ITEM_CODE	   = P.ITEM_CODE
					                               AND C.PRODT_PRSN	   = P.PRODT_PRSN
		 WHERE A.COMP_CODE      = #{S_COMP_CODE}
		   AND A.DIV_CODE       = #{DIV_CODE}
		   AND A.PAY_YYYYMM     = #{PAY_YYYYMM}
		   AND A.WORKER_CODE   IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
		ORDER BY WORKER_CODE DESC
	</select>
	<select id="s_out300ukrv_mitServiceImpl.selectReportBadWorkQ" parameterType="Map" resultType="rMap">
	   SELECT SUM(ISNULL(A.BAD_WORK_Q,0)) AS BAD_WORK_Q    -- 당월부적합
	     FROM S_OUT210T_MIT A WITH (NOLOCK)
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE       = #{DIV_CODE}
		  AND A.BASIS_YYYYMM   = #{PAY_YYYYMM}
		  AND A.PRODT_PRSN    IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
	</select>
	<select id="s_out300ukrv_mitServiceImpl.selectReportAllowance" parameterType="Map" resultType="rMap">
	   SELECT
			    CONTI_AMT           -- 근속수당    
			  , EDU_AMT             -- 교육비      
			  , BIRTH_AMT           -- 생일축하금  
			  , TETANUS_MAT         -- 파상품지원금
			  , REWARD_AMT          -- 보상비용 
	     FROM S_OUT300T_MIT A WITH (NOLOCK)
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE       = #{DIV_CODE}
		  AND A.PAY_YYYYMM     = #{PAY_YYYYMM}
		  AND A.WORKER_CODE   IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
	</select>
	<select id="s_out300ukrv_mitServiceImpl.selectReportRetroAmt" parameterType="Map" resultType="rMap">
	   SELECT
			    RETRO_AMT           -- 소급비용    
			  , REMARK              -- 소급내용 
	     FROM S_OUT220T_MIT A WITH (NOLOCK)
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE       = #{DIV_CODE}
		  AND A.BASIS_YYYYMM   = #{PAY_YYYYMM}
		  AND A.PRODT_PRSN    IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
	</select>
	<select id="s_out300ukrv_mitServiceImpl.selectReportSummary" parameterType="Map" resultType="rMap">
	   SELECT
	   		    PRODT_AMT           -- 엮기비용	
			  , CONTI_AMT           -- 근속수당    
			  , EDU_AMT             -- 교육비      
			  , BIRTH_AMT           -- 생일축하금  
			  , TETANUS_MAT         -- 파상품지원금
			  , RETRO_AMT           -- 소급비용 
			  , REWARD_AMT          -- 보상비용                    
			  , TOT_AMT             -- 총계    
	     FROM S_OUT300T_MIT A WITH (NOLOCK)
		WHERE A.COMP_CODE      = #{S_COMP_CODE}
		  AND A.DIV_CODE       = #{DIV_CODE}
		  AND A.PAY_YYYYMM     = #{PAY_YYYYMM}
		  AND A.WORKER_CODE   IN (	SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ',')	)
	</select>
	
	<select id="s_out300ukrv_mitServiceImpl.selectPrintMaster" parameterType="Map" resultType="rMap">
		--s_out300ukrv_mitServiceImpl.selectPrintMaster
		BEGIN
			IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects   WHERE id=object_id('tempdb..#T_PMR100T'))
				DROP TABLE #T_PMR100T
		
			CREATE TABLE #T_PMR100T ( COMP_CODE			NVARCHAR(08)
									, DIV_CODE			NVARCHAR(08)
									, PRODT_PRSN		NVARCHAR(50)
									, PRODT_PRSN_NAME	NVARCHAR(30)
									, PRODT_DATE		NVARCHAR(10)
									, DATE_ORDER		NUMERIC(2, 0)
									, ITEM_CODE			NVARCHAR(20)
									, ITEM_NAME			NVARCHAR(200)
									, GOOD_WORK_Q		NUMERIC(30, 6)
									, GOOD_WORK_Q_STR	NVARCHAR(20)
									, ITEM_P			NUMERIC(30, 6)
									, SPEC				NVARCHAR(160)	)
			
			INSERT INTO #T_PMR100T
			SELECT P.COMP_CODE
				 , P.DIV_CODE
				 , P.PRODT_PRSN
				 , W.NAME																								AS PRODT_PRSN_NAME
				 , RIGHT(uniLITE.fnGetUserdateComp(P.COMP_CODE, P.PRODT_DATE), 2)										AS PRODT_DATE
				 , DENSE_RANK() OVER(PARTITION BY P.COMP_CODE, P.DIV_CODE, P.PRODT_PRSN ORDER BY P.PRODT_DATE)			AS DATE_ORDER
				 , P.ITEM_CODE
				 , I.ITEM_NAME
				 , P.GOOD_WORK_Q
				 , CONVERT(NVARCHAR, CONVERT(MONEY, P.GOOD_WORK_Q))														AS GOOD_WORK_Q_STR
				 , uniLITE.fn_S_StentWorkItemPrice_MIT(P.COMP_CODE, P.DIV_CODE, LEFT(P.PRODT_DATE, 6), P.ITEM_CODE)		AS ITEM_P
				 , I.SPEC
			  FROM S_OUT211T_MIT P WITH (NOLOCK)
					LEFT OUTER JOIN	BPR100T I WITH (NOLOCK)
								 ON P.COMP_CODE		= I.COMP_CODE
								AND P.ITEM_CODE		= I.ITEM_CODE
					LEFT OUTER JOIN	HPB100T W WITH (NOLOCK)
								 ON P.COMP_CODE		= W.COMP_CODE
								AND P.DIV_CODE		= W.DIV_CODE
								AND P.PRODT_PRSN	= W.TEMPC_01
								AND W.USER_YN 		= '1'
			 WHERE P.COMP_CODE			 = #{S_COMP_CODE}
			   AND P.DIV_CODE			 = #{DIV_CODE}
			   AND LEFT(P.PRODT_DATE, 6) = #{PAY_YYYYMM}
			   AND P.PRODT_PRSN			IN (SELECT VALUE FROM uniLITE.fnSplit(#{WORKERS}, ','))
			   AND W.DED_TYPE			 = '1'
			   AND W.BUSI_TYPE			 = '20'
			
			SELECT H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
				 , '행레이블'															AS ITEM_CODE
				 , ''																AS ITEM_NAME
				 , MAX(CASE WHEN H.DATE_ORDER =  1 THEN H.PRODT_DATE ELSE '' END)	AS WORK_01
				 , MAX(CASE WHEN H.DATE_ORDER =  2 THEN H.PRODT_DATE ELSE '' END)	AS WORK_02
				 , MAX(CASE WHEN H.DATE_ORDER =  3 THEN H.PRODT_DATE ELSE '' END)	AS WORK_03
				 , MAX(CASE WHEN H.DATE_ORDER =  4 THEN H.PRODT_DATE ELSE '' END)	AS WORK_04
				 , MAX(CASE WHEN H.DATE_ORDER =  5 THEN H.PRODT_DATE ELSE '' END)	AS WORK_05
				 , MAX(CASE WHEN H.DATE_ORDER =  6 THEN H.PRODT_DATE ELSE '' END)	AS WORK_06
				 , MAX(CASE WHEN H.DATE_ORDER =  7 THEN H.PRODT_DATE ELSE '' END)	AS WORK_07
				 , MAX(CASE WHEN H.DATE_ORDER =  8 THEN H.PRODT_DATE ELSE '' END)	AS WORK_08
				 , MAX(CASE WHEN H.DATE_ORDER =  9 THEN H.PRODT_DATE ELSE '' END)	AS WORK_09
				 , MAX(CASE WHEN H.DATE_ORDER = 10 THEN H.PRODT_DATE ELSE '' END)	AS WORK_10
				 , MAX(CASE WHEN H.DATE_ORDER = 11 THEN H.PRODT_DATE ELSE '' END)	AS WORK_11
				 , MAX(CASE WHEN H.DATE_ORDER = 12 THEN H.PRODT_DATE ELSE '' END)	AS WORK_12
				 , MAX(CASE WHEN H.DATE_ORDER = 13 THEN H.PRODT_DATE ELSE '' END)	AS WORK_13
				 , MAX(CASE WHEN H.DATE_ORDER = 14 THEN H.PRODT_DATE ELSE '' END)	AS WORK_14
				 , MAX(CASE WHEN H.DATE_ORDER = 15 THEN H.PRODT_DATE ELSE '' END)	AS WORK_15
				 , MAX(CASE WHEN H.DATE_ORDER = 16 THEN H.PRODT_DATE ELSE '' END)	AS WORK_16
				 , MAX(CASE WHEN H.DATE_ORDER = 17 THEN H.PRODT_DATE ELSE '' END)	AS WORK_17
				 , MAX(CASE WHEN H.DATE_ORDER = 18 THEN H.PRODT_DATE ELSE '' END)	AS WORK_18
				 , MAX(CASE WHEN H.DATE_ORDER = 19 THEN H.PRODT_DATE ELSE '' END)	AS WORK_19
				 , MAX(CASE WHEN H.DATE_ORDER = 20 THEN H.PRODT_DATE ELSE '' END)	AS WORK_20
				 , MAX(CASE WHEN H.DATE_ORDER = 20 THEN H.PRODT_DATE ELSE '' END)	AS WORK_20
				 , MAX(CASE WHEN H.DATE_ORDER = 21 THEN H.PRODT_DATE ELSE '' END)	AS WORK_21
				 , MAX(CASE WHEN H.DATE_ORDER = 22 THEN H.PRODT_DATE ELSE '' END)	AS WORK_22
				 , MAX(CASE WHEN H.DATE_ORDER = 23 THEN H.PRODT_DATE ELSE '' END)	AS WORK_23
				 , MAX(CASE WHEN H.DATE_ORDER = 24 THEN H.PRODT_DATE ELSE '' END)	AS WORK_24
				 , MAX(CASE WHEN H.DATE_ORDER = 25 THEN H.PRODT_DATE ELSE '' END)	AS WORK_25
				 , MAX(CASE WHEN H.DATE_ORDER = 26 THEN H.PRODT_DATE ELSE '' END)	AS WORK_26
				 , MAX(CASE WHEN H.DATE_ORDER = 27 THEN H.PRODT_DATE ELSE '' END)	AS WORK_27
				 , MAX(CASE WHEN H.DATE_ORDER = 28 THEN H.PRODT_DATE ELSE '' END)	AS WORK_28
				 , MAX(CASE WHEN H.DATE_ORDER = 29 THEN H.PRODT_DATE ELSE '' END)	AS WORK_29
				 , MAX(CASE WHEN H.DATE_ORDER = 30 THEN H.PRODT_DATE ELSE '' END)	AS WORK_30
				 , MAX(CASE WHEN H.DATE_ORDER = 31 THEN H.PRODT_DATE ELSE '' END)	AS WORK_31
				 , '소계'															AS WORK_SUM
				 , '단가'															AS ITEM_PRICE
				 , '계'																AS SUM_PRICE
				 , '규격명'															AS SPEC
				 , 1																AS ORDER_SEQ
				 , 'H'																AS DATA_TYPE
				 , 'Y'																AS BG_COLOR_YN
				 , 'N'																AS FORMAT_YN
				 , MAX(H.DATE_ORDER)												AS DATE_COUNT
			  FROM #T_PMR100T H
			 GROUP BY H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
			
			UNION ALL
			
			SELECT H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
				 , H.ITEM_CODE
				 , H.ITEM_NAME
				 , MAX(CASE WHEN H.DATE_ORDER =  1 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_01
				 , MAX(CASE WHEN H.DATE_ORDER =  2 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_02
				 , MAX(CASE WHEN H.DATE_ORDER =  3 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_03
				 , MAX(CASE WHEN H.DATE_ORDER =  4 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_04
				 , MAX(CASE WHEN H.DATE_ORDER =  5 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_05
				 , MAX(CASE WHEN H.DATE_ORDER =  6 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_06
				 , MAX(CASE WHEN H.DATE_ORDER =  7 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_07
				 , MAX(CASE WHEN H.DATE_ORDER =  8 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_08
				 , MAX(CASE WHEN H.DATE_ORDER =  9 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_09
				 , MAX(CASE WHEN H.DATE_ORDER = 10 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_10
				 , MAX(CASE WHEN H.DATE_ORDER = 11 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_11
				 , MAX(CASE WHEN H.DATE_ORDER = 12 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_12
				 , MAX(CASE WHEN H.DATE_ORDER = 13 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_13
				 , MAX(CASE WHEN H.DATE_ORDER = 14 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_14
				 , MAX(CASE WHEN H.DATE_ORDER = 15 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_15
				 , MAX(CASE WHEN H.DATE_ORDER = 16 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_16
				 , MAX(CASE WHEN H.DATE_ORDER = 17 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_17
				 , MAX(CASE WHEN H.DATE_ORDER = 18 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_18
				 , MAX(CASE WHEN H.DATE_ORDER = 19 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_19
				 , MAX(CASE WHEN H.DATE_ORDER = 20 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_20
				 , MAX(CASE WHEN H.DATE_ORDER = 20 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_20
				 , MAX(CASE WHEN H.DATE_ORDER = 21 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_21
				 , MAX(CASE WHEN H.DATE_ORDER = 22 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_22
				 , MAX(CASE WHEN H.DATE_ORDER = 23 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_23
				 , MAX(CASE WHEN H.DATE_ORDER = 24 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_24
				 , MAX(CASE WHEN H.DATE_ORDER = 25 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_25
				 , MAX(CASE WHEN H.DATE_ORDER = 26 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_26
				 , MAX(CASE WHEN H.DATE_ORDER = 27 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_27
				 , MAX(CASE WHEN H.DATE_ORDER = 28 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_28
				 , MAX(CASE WHEN H.DATE_ORDER = 29 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_29
				 , MAX(CASE WHEN H.DATE_ORDER = 30 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_30
				 , MAX(CASE WHEN H.DATE_ORDER = 31 THEN H.GOOD_WORK_Q_STR ELSE '' END)		AS WORK_31
				 , CONVERT(NVARCHAR, CONVERT(MONEY, SUM(H.GOOD_WORK_Q)))					AS WORK_SUM
				 , CONVERT(NVARCHAR, CONVERT(MONEY, MAX(H.ITEM_P)))							AS ITEM_PRICE
				 , CONVERT(NVARCHAR, CONVERT(MONEY, SUM(H.GOOD_WORK_Q * H.ITEM_P)))			AS SUM_PRICE
				 , MAX(H.SPEC)																AS SPEC
				 , 10 + ROW_NUMBER() OVER(PARTITION BY H.COMP_CODE, H.DIV_CODE, H.PRODT_PRSN ORDER BY H.SPEC,H.ITEM_CODE)	AS ORDER_SEQ
				 , 'D'																		AS DATA_TYPE
				 , 'N'																		AS BG_COLOR_YN
				 , 'Y'																		AS FORMAT_YN
				 , (SELECT MAX(D.DATE_ORDER)
					  FROM #T_PMR100T D
					 WHERE D.COMP_CODE	= H.COMP_CODE
					   AND D.DIV_CODE	= H.DIV_CODE
					   AND D.PRODT_PRSN	= H.PRODT_PRSN)										AS DATE_COUNT
			  FROM #T_PMR100T H
			 GROUP BY H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
				 , H.ITEM_CODE
				 , H.ITEM_NAME
				 , H.SPEC
			
			UNION ALL
			<![CDATA[
			SELECT H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
				 , '계'																																					AS ITEM_CODE
				 , ''																																					AS ITEM_NAME
				 , CASE WHEN MAX(H.DATE_ORDER) >=  1 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  1 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_01
				 , CASE WHEN MAX(H.DATE_ORDER) >=  2 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  2 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_02
				 , CASE WHEN MAX(H.DATE_ORDER) >=  3 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  3 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_03
				 , CASE WHEN MAX(H.DATE_ORDER) >=  4 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  4 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_04
				 , CASE WHEN MAX(H.DATE_ORDER) >=  5 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  5 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_05
				 , CASE WHEN MAX(H.DATE_ORDER) >=  6 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  6 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_06
				 , CASE WHEN MAX(H.DATE_ORDER) >=  7 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  7 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_07
				 , CASE WHEN MAX(H.DATE_ORDER) >=  8 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  8 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_08
				 , CASE WHEN MAX(H.DATE_ORDER) >=  9 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER =  9 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_09
				 , CASE WHEN MAX(H.DATE_ORDER) >= 10 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 10 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_10
				 , CASE WHEN MAX(H.DATE_ORDER) >= 11 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 11 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_11
				 , CASE WHEN MAX(H.DATE_ORDER) >= 12 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 12 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_12
				 , CASE WHEN MAX(H.DATE_ORDER) >= 13 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 13 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_13
				 , CASE WHEN MAX(H.DATE_ORDER) >= 14 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 14 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_14
				 , CASE WHEN MAX(H.DATE_ORDER) >= 15 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 15 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_15
				 , CASE WHEN MAX(H.DATE_ORDER) >= 16 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 16 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_16
				 , CASE WHEN MAX(H.DATE_ORDER) >= 17 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 17 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_17
				 , CASE WHEN MAX(H.DATE_ORDER) >= 18 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 18 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_18
				 , CASE WHEN MAX(H.DATE_ORDER) >= 19 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 19 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_19
				 , CASE WHEN MAX(H.DATE_ORDER) >= 20 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 20 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_20
				 , CASE WHEN MAX(H.DATE_ORDER) >= 20 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 20 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_20
				 , CASE WHEN MAX(H.DATE_ORDER) >= 21 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 21 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_21
				 , CASE WHEN MAX(H.DATE_ORDER) >= 22 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 22 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_22
				 , CASE WHEN MAX(H.DATE_ORDER) >= 23 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 23 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_23
				 , CASE WHEN MAX(H.DATE_ORDER) >= 24 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 24 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_24
				 , CASE WHEN MAX(H.DATE_ORDER) >= 25 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 25 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_25
				 , CASE WHEN MAX(H.DATE_ORDER) >= 26 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 26 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_26
				 , CASE WHEN MAX(H.DATE_ORDER) >= 27 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 27 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_27
				 , CASE WHEN MAX(H.DATE_ORDER) >= 28 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 28 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_28
				 , CASE WHEN MAX(H.DATE_ORDER) >= 29 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 29 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_29
				 , CASE WHEN MAX(H.DATE_ORDER) >= 30 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 30 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_30
				 , CASE WHEN MAX(H.DATE_ORDER) >= 31 THEN CONVERT(NVARCHAR, CONVERT(MONEY, SUM(CASE WHEN H.DATE_ORDER = 31 THEN H.GOOD_WORK_Q ELSE 0 END))) ELSE '' END	AS DATE_31
				 , CONVERT(NVARCHAR, CONVERT(MONEY, SUM(H.GOOD_WORK_Q)))																								AS WORK_SUM
				 , ''																																					AS ITEM_PRICE
				 , CONVERT(NVARCHAR, CONVERT(MONEY, SUM(H.GOOD_WORK_Q * H.ITEM_P)))																						AS SUM_PRICE
				 , ''																																					AS SPEC
				 , 999																																					AS ORDER_SEQ
				 , 'T'																																					AS DATA_TYPE
				 , 'Y'																																					AS BG_COLOR_YN
				 , 'Y'																																					AS FORMAT_YN
				 , MAX(H.DATE_ORDER)																																	AS DATE_COUNT]]>
			  FROM #T_PMR100T H
			 GROUP BY H.COMP_CODE
				 , H.DIV_CODE
				 , H.PRODT_PRSN
				 , H.PRODT_PRSN_NAME
			
			 ORDER BY COMP_CODE
				 , DIV_CODE
				 , PRODT_PRSN
				 , ORDER_SEQ
				 , ITEM_CODE
				 , SPEC
		END
	</select>
	
	<select id="s_out300ukrv_mitServiceImpl.selectPrintDetail" parameterType="Map" resultType="rMap">
		--	s_out300ukrv_mitServiceImpl.selectPrintDetail
		DECLARE
			  @COMP_CODE	NVARCHAR(08)	= #{S_COMP_CODE}
			, @DIV_CODE		NVARCHAR(08)	= #{DIV_CODE}
			, @PAY_YYYYMM	NVARCHAR(06)	= #{PAY_YYYYMM}
			, @WORKERS		NVARCHAR(1000)	= #{WORKERS}
		
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.BASIS_YYYYMM		AS PAY_YYYYMM
			 , A.PRODT_PRSN			AS WORKER_CODE
			 , 'BAD'				AS GUBUN
			 , SUM(A.BAD_WORK_Q)																							AS EXT_INFO_01		--	부적합 수량
			 , SUM(A.BAD_WORK_Q * uniLITE.fn_S_StentWorkItemPrice_MIT(A.COMP_CODE, A.DIV_CODE, @PAY_YYYYMM, A.ITEM_CODE))	AS EXT_INFO_02		--	부적합 금액
			 , 0																											AS EXT_INFO_03
			 , 0																											AS EXT_INFO_04
			 , 0																											AS EXT_INFO_05
			 , 0																											AS EXT_INFO_06
			 , 0																											AS EXT_INFO_07
			 , ''																											AS EXT_INFO_08
		  FROM S_OUT210T_MIT A WITH (NOLOCK)
		 WHERE A.COMP_CODE		 = @COMP_CODE
		   AND A.DIV_CODE		 = @DIV_CODE
		   AND A.BASIS_YYYYMM	 = @PAY_YYYYMM
		   AND A.PRODT_PRSN		IN ( SELECT VALUE FROM uniLITE.fnSplit(@WORKERS, ',') )
		   AND A.BAD_WORK_Q		!= 0
		 GROUP BY A.COMP_CODE
			 , A.DIV_CODE
			 , A.BASIS_YYYYMM
			 , A.PRODT_PRSN
		
		UNION ALL
		
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.BASIS_YYYYMM		AS PAY_YYYYMM
			 , A.PRODT_PRSN			AS WORKER_CODE
			 , 'RETRO'				AS GUBUN
			 , A.RETRO_AMT			AS EXT_INFO_01	--	소급금액
			 , 0					AS EXT_INFO_02
			 , 0					AS EXT_INFO_03
			 , 0					AS EXT_INFO_04
			 , 0					AS EXT_INFO_05
			 , 0					AS EXT_INFO_06
			 , 0					AS EXT_INFO_07
			 , A.REMARK				AS EXT_INFO_08	--	소급내역
		  FROM S_OUT220T_MIT A WITH (NOLOCK)
		 WHERE A.COMP_CODE		 = @COMP_CODE
		   AND A.DIV_CODE		 = @DIV_CODE
		   AND A.BASIS_YYYYMM	 = @PAY_YYYYMM
		   AND A.PRODT_PRSN		IN ( SELECT VALUE FROM uniLITE.fnSplit(@WORKERS, ',') )
		
		UNION ALL
		
		SELECT A.COMP_CODE
			 , A.DIV_CODE
			 , A.PAY_YYYYMM
			 , A.WORKER_CODE
			 , 'SUM'				AS GUBUN
			 , A.PRODT_AMT			AS EXT_INFO_01	--	엮기 비용
			 , A.CONTI_AMT			AS EXT_INFO_02	--	근속수당
			 , A.EDU_AMT			AS EXT_INFO_03	--	교육비
			 , A.BIRTH_AMT			AS EXT_INFO_04	--	생일축하금
			 , A.TETANUS_MAT		AS EXT_INFO_05	--	파상품지원금
			 , A.RETRO_AMT			AS EXT_INFO_06	--	소급비용
			 , A.REWARD_AMT			AS EXT_INFO_07	--	보상비용
			 , ''					AS EXT_INFO_08
		  FROM S_OUT300T_MIT A WITH (NOLOCK)
		 WHERE A.COMP_CODE		 = @COMP_CODE
		   AND A.DIV_CODE		 = @DIV_CODE
		   AND A.PAY_YYYYMM		 = @PAY_YYYYMM
		   AND A.WORKER_CODE	IN ( SELECT VALUE FROM uniLITE.fnSplit(@WORKERS, ',') )
	</select>
	
</mapper>