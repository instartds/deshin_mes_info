<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hat800ukr_mitServiceImpl">
    <select id="s_hat800ukr_mitServiceImpl.selectList" parameterType="Map" resultType="rMap">
        /* s_hat800ukr_mitServiceImpl.selectList */
        SET NOCOUNT ON
	    SET ARITHABORT ON
	
	    DECLARE @CompCode       NVARCHAR(08)   /* 법인코드            */
	          , @DutyYyyy       NVARCHAR(06)   /* 연차조회월          */
	
	    SET @CompCode = #{S_COMP_CODE}
	    SET @DutyYyyy = #{DUTY_YYYY}
	
	    /* 조회 */
	    SELECT A.COMP_CODE                                                  /* 법인코드           */
	         , A.DUTY_YYYY                                                  /* 연차조회월         */
	         , A.PERSON_NUMB                                                /* 사번               */
	         , A.DIV_CODE                                                   /* 사업장코드         */
	         , A.MAKE_SALE                                                  /* 제조판관구분       */
	         , A.DEPT_CODE                                                  /* 부서코드           */
	         , A.DEPT_NAME                                                  /* 부서명             */
	         , A.PJT_CODE                                                   /* 프로젝트코드       */
	         , A.PJT_NAME                                                   /* 프로젝트명         */
	         , B.NAME                                                       /* 성명               */
	         , B.JOIN_DATE                                                  /* 입사일             */
	         , A.IWALL_SAVE                                                 /* 전년이월연차       */  
	         , A.LONG_YEAR                                                  /* 근속년수           */  
	         , A.YEAR_SAVE                                                  /* 발생연차           */
	         , A.YEAR_NUM                                                   /* 이월반영           */
	         , A.JOIN_YEAR_SAVE                                             /* 1년미만입사자 발생연차 */
	         , A.YEAR_USE                                                   /* 사용연차           */
	         , A.YEAR_PROV                                                  /* 정산연차수         */
	         , A.AMOUNT_I                                                   /* 통상임금(일급)     */
	         , A.AMTTOPAY                                                   /* 지급금액           */
	         , A.NEXT_IWALL_SAVE                                            /* 차년이월연차       */
	         , ''         AS FLAG
	      FROM            S_HAT800T_MIT A WITH (NOLOCK)
	           INNER JOIN HUM100T       B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                                   AND B.PERSON_NUMB = A.PERSON_NUMB
	     WHERE A.COMP_CODE = @CompCode
	       AND A.DUTY_YYYY = @DutyYyyy
	       AND ((B.PAY_GUBUN != '2') OR (B.PAY_GUBUN = '2' AND B.PAY_GUBUN2 = '2'))
	        <if test="rdoSelect == &quot;Y&quot;">
	            AND B.RETR_DATE    = '00000000'
	        </if>
	        <if test="rdoSelect == &quot;N&quot;">
	            AND B.RETR_DATE   != '00000000'
	        </if>
	        <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
	            AND B.DIV_CODE     = #{DIV_CODE}
	        </if>
	        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
	            AND B.PERSON_NUMB  = #{PERSON_NUMB}
	        </if>
	        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
	            AND B.DEPT_CODE IN
	            <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
	                #{item}
	            </foreach>
	        </if>
	     ORDER BY B.JOIN_DATE
	                  
	    SET NOCOUNT OFF
	    SET ARITHABORT OFF
    </select>
    <select id="s_hat800ukr_mitServiceImpl.selectCheckNewDataList" parameterType="Map" resultType="rMap">
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON
		
		    DECLARE @CompCode       NVARCHAR(08)   /* 법인코드            */
		          , @DutyYyyy       NVARCHAR(04)   /* 연차년도            */
		
		    SET @CompCode = #{S_COMP_CODE}
	    	SET @DutyYyyy = #{DUTY_YYYY}
		
		    SELECT COUNT(*) AS CNT
		      FROM S_HAT800T_MIT WITH (NOLOCK)
		     WHERE COMP_CODE     = @CompCode   
		       AND DUTY_YYYY     = @DutyYyyy    
		
		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>
	<select id="s_hat800ukr_mitServiceImpl.selectNewDataList" parameterType="Map" resultType="rMap">
		SET NOCOUNT ON
	    SET ARITHABORT ON
	
	    DECLARE @CompCode       NVARCHAR(08)   /* 법인코드            */
	          , @DutyYyyy       NVARCHAR(06)   /* 연차조회월          */
	          
	    SET @CompCode = #{S_COMP_CODE}
	    SET @DutyYyyy = #{DUTY_YYYY}
	
	    /* 조회 */
	    SELECT A.COMP_CODE                                                  /* 법인코드           */
	         , B.DUTY_YYYY                                                  /* 연차년도           */
	         , A.PERSON_NUMB                                                /* 사번               */
	         , A.DIV_CODE                                                   /* 사업장코드         */
	         , A.MAKE_SALE                                                  /* 제조판관구분       */
	         , A.DEPT_CODE                                                  /* 부서코드           */
	         , A.DEPT_NAME                                                  /* 부서명             */
	         , ISNULL(A.PJT_CODE,'') AS PJT_CODE                            /* 프로젝트코드       */
	         , ISNULL(D.PJT_NAME,'') AS PJT_NAME                            /* 프로젝트명         */
	         , A.NAME                                                       /* 성명               */
	         , A.JOIN_DATE                                                  /* 입사일             */
	         , (CASE WHEN C.YEAR_PROV &lt; 0
                     THEN C.YEAR_PROV
                     ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                 END)                                                                                       AS IWALL_SAVE   /* 전년이월연차              */  
             , uniLITE.fnGetLongYear_MIT(@DutyYyyy, JOIN_DATE)                                              AS LONG_YEAR    /* 근속년수                  */  
	         , B.YEAR_SAVE + B.YEAR_BONUS_I                                                                 AS YEAR_SAVE    /* 발생연차(=OMEGA의 총연차) */
	         , (CASE WHEN C.YEAR_PROV &lt; 0
                     THEN C.YEAR_PROV
                     ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                 END) + (B.YEAR_SAVE + B.YEAR_BONUS_I)                                                      AS YEAR_NUM     /* 이월반영(전년이월연차+발생연차) */
	         , H.JOIN_YEAR_SAVE                                                                                             /* 1년미만입사자 발생연차 */
	         , B.YEAR_USE                                                                                                   /* 사용연차               */
	         , (CASE WHEN C.YEAR_PROV &lt; 0
                     THEN C.YEAR_PROV
                     ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                 END) + (B.YEAR_SAVE + B.YEAR_BONUS_I) + H.JOIN_YEAR_SAVE - B.YEAR_USE                      AS YEAR_PROV    /* 정산연차수             */
	         , ROUND(ISNULL(A.ANNUAL_SALARY_I,0) / 12.0 / 209.0 * 8.0, 0)                                   AS AMOUNT_I     /* 통상임금(일급)     */
	         , CASE WHEN (ROUND((CASE WHEN C.YEAR_PROV &lt; 0
                                      THEN C.YEAR_PROV
                                      ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                                  END) + (B.YEAR_SAVE + B.YEAR_BONUS_I) + H.JOIN_YEAR_SAVE - B.YEAR_USE
                        * ROUND(ISNULL(A.ANNUAL_SALARY_I,0) / 12.0 / 209.0 * 8.0, 0), -1)) &lt; 0
                    THEN 0
	                ELSE (ROUND((CASE WHEN C.YEAR_PROV &lt; 0
                                      THEN C.YEAR_PROV
                                      ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                                  END) + (B.YEAR_SAVE + B.YEAR_BONUS_I) + H.JOIN_YEAR_SAVE - B.YEAR_USE
                        * ROUND(ISNULL(A.ANNUAL_SALARY_I,0) / 12.0 / 209.0 * 8.0, 0), -1))
                END                                                                                         AS AMTTOPAY     /* 지급금액           */
	         , CASE WHEN ((CASE WHEN C.YEAR_PROV &lt; 0
                                THEN C.YEAR_PROV
                                ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                            END) + (B.YEAR_SAVE + B.YEAR_BONUS_I) + H.JOIN_YEAR_SAVE - B.YEAR_USE) &lt; 0  
                    THEN ((CASE WHEN C.YEAR_PROV &lt; 0
                                THEN C.YEAR_PROV
                                ELSE (CASE WHEN C.NEXT_IWALL_SAVE &lt; 0 THEN C.NEXT_IWALL_SAVE ELSE 0 END)
                            END) + (B.YEAR_SAVE + B.YEAR_BONUS_I) + H.JOIN_YEAR_SAVE - B.YEAR_USE)
                    ELSE 0
                END                                                                                         AS NEXT_IWALL_SAVE /* 차년이월연차       */
	         , 'S' AS FLAG
	      FROM            HUM100T A WITH (NOLOCK)
	           INNER JOIN HAT700T B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                             AND B.PERSON_NUMB = A.PERSON_NUMB
	                                             AND B.SUPP_TYPE   = 'F'
	           LEFT  JOIN HAT700T C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
	                                             AND C.DUTY_YYYY   = CONVERT(NVARCHAR(4),DATEADD(YEAR, -1, CONVERT(DATETIME, @DutyYyyy + '0101')), 112)
	                                             AND C.PERSON_NUMB = A.PERSON_NUMB
	                                             AND C.SUPP_TYPE   = 'F'
	           LEFT  JOIN BCM600T D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
	                                             AND D.PJT_CODE    = A.PJT_CODE
               LEFT  JOIN (SELECT COMP_CODE
                                , PERSON_NUMB
                                , uniLITE.fnGetJoinYearSave_MIT(@DutyYyyy, JOIN_DATE) AS JOIN_YEAR_SAVE
                             FROM HUM100T WITH (NOLOCK)
    	                    WHERE COMP_CODE = @CompCode
                              AND ((PAY_GUBUN != '2') OR (PAY_GUBUN = '2' AND PAY_GUBUN2 = '2'))) H ON H.COMP_CODE   = A.COMP_CODE
                                                                                                   AND H.PERSON_NUMB = A.PERSON_NUMB
	     WHERE A.COMP_CODE = @CompCode
	       AND B.DUTY_YYYY = @DutyYyyy
	       AND ((A.PAY_GUBUN != '2') OR (A.PAY_GUBUN = '2' AND A.PAY_GUBUN2 = '2'))
	     ORDER BY A.PERSON_NUMB
	             
	    SET NOCOUNT OFF
	    SET ARITHABORT OFF
	</select>
    <update  id="s_hat800ukr_mitServiceImpl.insertList" parameterType="Map">
	   		INSERT INTO S_HAT800T_MIT
			(
				  COMP_CODE                               --법인
				, DUTY_YYYY                               --연차조회월
				, PERSON_NUMB                             --사번
				, DIV_CODE                                --사업장코드
				, MAKE_SALE                               --제조판관구분
				, DEPT_CODE                               --부서코드
				, DEPT_NAME                               --부서명
				, PJT_CODE                                --프로젝트코드
				, PJT_NAME                                --프로젝트명
				, IWALL_SAVE                              --전년이월연차
				, LONG_YEAR                               --근속년수
				, YEAR_SAVE                               --발생연차
				, YEAR_NUM                                --이월반영
				, JOIN_YEAR_SAVE                          --1년미만입사자 발생연차
				, YEAR_USE                                --사용연차
				, YEAR_PROV                               --정산연차수
				, AMOUNT_I                                --통상임금(일급)
				, AMTTOPAY                                --지급금액
                , NEXT_IWALL_SAVE                         --차년이월연차
				, INSERT_DB_USER                          --
				, INSERT_DB_TIME                          --
				, UPDATE_DB_USER                          --
				, UPDATE_DB_TIME                          --
			) VALUES (
				  #{S_COMP_CODE}
				, #{DUTY_YYYY}
				, #{PERSON_NUMB}
				, #{DIV_CODE}
				, #{MAKE_SALE}
				, #{DEPT_CODE}
				, #{DEPT_NAME}
				, #{PJT_CODE}
				, #{PJT_NAME}
				, #{IWALL_SAVE}
				, #{LONG_YEAR}
				, #{YEAR_SAVE}
				, #{YEAR_NUM}
				, #{JOIN_YEAR_SAVE}
				, #{YEAR_USE}
				, #{YEAR_PROV}
				, #{AMOUNT_I}
				, #{AMTTOPAY}
                , #{NEXT_IWALL_SAVE}
				, #{S_USER_ID}
				, GETDATE()
				, #{S_USER_ID}
				, GETDATE()
			)
	</update>
	<update  id="s_hat800ukr_mitServiceImpl.updateList" parameterType="Map">
	IF EXISTS (	SELECT * FROM S_HAT800T_MIT WITH (NOLOCK) 
					WHERE     COMP_CODE                      = #{S_COMP_CODE}
					  AND     DUTY_YYYY                      = #{DUTY_YYYY}
			          AND     PERSON_NUMB                    = #{PERSON_NUMB}
			          AND     1 = 2
		)
	BEGIN
		UPDATE  S_HAT800T_MIT
		   SET    DIV_CODE                       = #{DIV_CODE}
				, MAKE_SALE                      = #{MAKE_SALE}
				, DEPT_CODE                      = #{DEPT_CODE}
				, DEPT_NAME                      = #{DEPT_NAME}
				, PJT_CODE                       = #{PJT_CODE}
				, PJT_NAME                       = #{PJT_NAME}
				, IWALL_SAVE                     = #{IWALL_SAVE}
				, LONG_YEAR                      = #{LONG_YEAR}
				, YEAR_SAVE                      = #{YEAR_SAVE}
				, YEAR_NUM                       = #{YEAR_NUM}
				, JOIN_YEAR_SAVE                 = #{JOIN_YEAR_SAVE}
				, YEAR_USE                       = #{YEAR_USE}
				, YEAR_PROV                      = #{YEAR_PROV}
				, AMOUNT_I                       = #{AMOUNT_I}
				, AMTTOPAY                       = #{AMTTOPAY}
				, NEXT_IWALL_SAVE                = #{NEXT_IWALL_SAVE}
				, UPDATE_DB_USER                 = #{S_USER_ID}
				, UPDATE_DB_TIME                 = GETDATE()
	    WHERE     COMP_CODE                      = #{S_COMP_CODE}
		  AND     DUTY_YYYY                      = #{DUTY_YYYY}
          AND     PERSON_NUMB                    = #{PERSON_NUMB}
	 END
	 ELSE
	 BEGIN
	 	INSERT INTO S_HAT800T_MIT
		(
			  COMP_CODE                               --법인
			, DUTY_YYYY                               --연차조회월
			, PERSON_NUMB                             --사번
			, DIV_CODE                                --사업장코드
			, MAKE_SALE                               --제조판관구분
			, DEPT_CODE                               --부서코드
			, DEPT_NAME                               --부서명
			, PJT_CODE                                --프로젝트코드
			, PJT_NAME                                --프로젝트명
			, IWALL_SAVE                              --전년이월연차
			, LONG_YEAR                               --근속년수
			, YEAR_SAVE                               --발생연차
			, YEAR_NUM                                --이월반영
			, JOIN_YEAR_SAVE                          --1년미만입사자 발생연차
			, YEAR_USE                                --사용연차
			, YEAR_PROV                               --정산연차수
			, AMOUNT_I                                --통상임금(일급)
			, AMTTOPAY                                --지급금액
            , NEXT_IWALL_SAVE                         --차년이월연차
			, INSERT_DB_USER                          --
			, INSERT_DB_TIME                          --
			, UPDATE_DB_USER                          --
			, UPDATE_DB_TIME                          --
		) VALUES (
			  #{S_COMP_CODE}
			, #{DUTY_YYYY}
			, #{PERSON_NUMB}
			, #{DIV_CODE}
			, #{MAKE_SALE}
			, #{DEPT_CODE}
			, #{DEPT_NAME}
			, #{PJT_CODE}
			, #{PJT_NAME}
			, #{IWALL_SAVE}
			, #{LONG_YEAR}
			, #{YEAR_SAVE}
			, #{YEAR_NUM}
			, #{JOIN_YEAR_SAVE}
			, #{YEAR_USE}
			, #{YEAR_PROV}
			, #{AMOUNT_I}
			, #{AMTTOPAY}
            , #{NEXT_IWALL_SAVE}
			, #{S_USER_ID}
			, GETDATE()
			, #{S_USER_ID}
			, GETDATE()
		)
	 END  
	</update>
	<update id="s_hat800ukr_mitServiceImpl.deleteList" parameterType="Map">
		DELETE  FROM   S_HAT800T_MIT
		WHERE     COMP_CODE                      = #{S_COMP_CODE}
		  AND     DUTY_YYYY                      = #{DUTY_YYYY}
          AND     PERSON_NUMB                    = #{PERSON_NUMB}
	</update>
	<update id="s_hat800ukr_mitServiceImpl.deleteAll" parameterType="Map">
		DELETE  FROM   S_HAT800T_MIT
		WHERE     COMP_CODE                      = #{S_COMP_CODE}
		  AND     DUTY_YYYY                      = #{DUTY_YYYY}
	</update>
	<select id="s_hat800ukr_mitServiceImpl.getLongYearSave_mit" parameterType="Map" resultType="rMap">
		SELECT   uniLITE.fnGetLongYear_MIT(#{DUTY_DATE}, #{JOIN_DATE})     AS LONG_YEAR
		       , uniLITE.fnGetJoinYearSave_MIT(#{DUTY_DATE}, #{JOIN_DATE}) AS JOIN_YEAR_SAVE
	</select>
	
</mapper>