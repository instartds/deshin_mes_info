<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_sas315skrv_mitServiceImpl">
	<select id="s_sas315skrv_mitServiceImpl.selectlist" parameterType="Map" resultType="rMap">
		DECLARE @CompCode       NVARCHAR(08)   /* 법인코드            */
	          , @DivCode        NVARCHAR(08)   /* 사업장코드          */
	          , @ReceiptDateFr     NVARCHAR(08)   /* 수리견적일기간Fr    */
	          , @ReceiptDateTo     NVARCHAR(08)   /* 수리견적일기간To    */
	
	          , @UserId         NVARCHAR(100)  /* 사용자ID            */
	          , @RefItem        NVARCHAR(01)   /* 명칭 참조 유형      */
	
	    SET @CompCode     = #{COMP_CODE}
	    SET @DivCode      = #{DIV_CODE}
	    SET @ReceiptDateFr  = #{RECEIPT_DATE_FR}
		SET @ReceiptDateTo  = #{RECEIPT_DATE_TO}
	
	
	    SET @UserId     = #{S_USER_ID}
	
	    /* 명칭 참조 유형 */
	    SELECT TOP 1 @RefItem = REF_ITEM
	      FROM BSA300T WITH (NOLOCK)
	     WHERE USER_ID = @UserId
	
	    SET @RefItem = ISNULL(@RefItem, N'0')
	
	    /* 조회 */
	     SELECT B.COMP_CODE                                     /* 법인코드       */
	          , B.DIV_CODE                                      /* 사업장         */
	         , A.REPAIR_NUM                                     /* 수리번호       */
	         , A.REPAIR_DATE                                    /* 수리일         */
	         , B.CUSTOM_CODE                                    /* 거래처         */
			 , CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1
			        WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2
			                            ELSE C1.CUSTOM_NAME
			    END AS CUSTOM_NAME                              /* 거래처명       */
	         , B.ITEM_CODE                                      /* 품목코드       */
	         , CASE WHEN @RefItem = '1' THEN C2.ITEM_NAME1
			        WHEN @RefItem = '2' THEN C2.ITEM_NAME2
			                            ELSE C2.ITEM_NAME
			    END AS ITEM_NAME                                /* 품목명         */
			 , ISNULL(C2.SPEC,'') AS SPEC                       /* 규격           */
			 , B.MACHINE_TYPE                                   /* 구분           */
	         , B.SERIAL_NO                                      /* Serial No      */
	         , B.IN_DATE                                        /* 입고일         */
	         , B.SALE_DATE                                      /* 판매일         */
	         , B.WARR_DATE                                      /* 보증일         */
	         , B.SALE_DATE          AS WARR_DATE_FR             /* 보증기간시작일         */
	         , CASE WHEN ISNUMERIC(ISNULL(C6.REF_CODE1,0)) = 1 AND ISNULL(C6.REF_CODE1,0) &gt; 0
	                THEN CONVERT(NVARCHAR(8), DATEADD(DAY, -1, DATEADD(MONTH, CONVERT(INT, ISNULL(C6.REF_CODE1,0)), CONVERT(DATETIME, B.SALE_DATE))), 112)
	                ELSE B.SALE_DATE
	            END AS WARR_DATE_TO                             /* 보증기간종료일 */
             , B.RECEIPT_NUM                                    /* 접수변호       */
			 , B.RECEIPT_DATE                                   /* 접수일         */
			 , C4.USER_NAME         AS RECEIPT_PRSN             /* 접수담당자     */
			 , B.REMARK             AS RECEIPT_REMARK           /* 접수내용       */    
			 , C.QUOT_DATE          AS IN_CHK_DATE              /* 입고검사일     */
			 , C5.USER_NAME         AS IN_CHK_PRSN              /* 입고검사자     */
			 , C.QUOT_DATE                                      /* 견적일         */
			 , C.QUOT_NUM                                       /* 견적번호       */
			 , C5.USER_NAME         AS QUOT_PRSN                /* 견적담당자명   */
			 , C.REMARK             AS QUOT_REMARK              /* 견적담당자코멘트 */     
	         , A.BAD_LOC_CODE                                   /* 위치코드       */
	         , A.BAD_CONDITION_CODE                             /* 증상코드       */
	         , A.BAD_REASON_CODE                                /* 원인코드       */
	         , A.SOLUTION_CODE                                  /* 해결코드       */
	         , A.BAD_LOC_CODE       AS BAD_LOC_NAME             /* 위치코드  콤보용코드    */
	         , A.BAD_CONDITION_CODE AS BAD_CONDITION_NAME       /* 증상코드 콤보용코드     */
	         , A.BAD_REASON_CODE    AS BAD_REASON_NAME          /* 원인코드 콤보용코드     */
	         , A.SOLUTION_CODE      AS SOLUTION_NAME            /* 해결코드 콤보용코드      */
	         , A.BAD_LOC_CODE2                                  /* 위치코드2       */
	         , A.BAD_CONDITION_CODE2                            /* 증상코드2       */
	         , A.BAD_REASON_CODE2                               /* 원인코드2       */
	         , A.SOLUTION_CODE2                                 /* 해결코드2       */
	         , A.BAD_LOC_CODE2       AS BAD_LOC_NAME2           /* 위치코드  콤보용코드2    */
	         , A.BAD_CONDITION_CODE2 AS BAD_CONDITION_NAME2     /* 증상코드 콤보용코드2     */
	         , A.BAD_REASON_CODE2    AS BAD_REASON_NAME2        /* 원인코드 콤보용코드2     */
	         , A.SOLUTION_CODE2      AS SOLUTION_NAME2          /* 해결코드 콤보용코드2      */
	         , A.BAD_LOC_CODE3                                  /* 위치코드3       */
	         , A.BAD_CONDITION_CODE3                            /* 증상코드3       */
	         , A.BAD_REASON_CODE3                               /* 원인코드3       */
	         , A.SOLUTION_CODE3                                 /* 해결코드3       */
	         , A.BAD_LOC_CODE3       AS BAD_LOC_NAME3           /* 위치코드  콤보용코드3    */
	         , A.BAD_CONDITION_CODE3 AS BAD_CONDITION_NAME3     /* 증상코드 콤보용코드3     */
	         , A.BAD_REASON_CODE3    AS BAD_REASON_NAME3        /* 원인코드 콤보용코드3     */
	         , A.SOLUTION_CODE3      AS SOLUTION_NAME3          /* 해결코드 콤보용코드3      */
	         , A.BAD_LOC_CODE4                                  /* 위치코드4       */
	         , A.BAD_CONDITION_CODE4                            /* 증상코드4       */
	         , A.BAD_REASON_CODE4                               /* 원인코드4       */
	         , A.SOLUTION_CODE4                                 /* 해결코드4       */
	         , A.BAD_LOC_CODE4       AS BAD_LOC_NAME4           /* 위치코드  콤보용코드4    */
	         , A.BAD_CONDITION_CODE4 AS BAD_CONDITION_NAME4     /* 증상코드 콤보용코드4     */
	         , A.BAD_REASON_CODE4    AS BAD_REASON_NAME4        /* 원인코드 콤보용코드4     */
	         , A.SOLUTION_CODE4      AS SOLUTION_NAME4          /* 해결코드 콤보용코드4      */
			 , A.REPAIR_RANK                                    /* 수리랭크         */                    
	         , C3.USER_NAME         AS REPAIR_PRSN              /* 수리담당자명   */
	         , A.COST_YN                                        /* 유무상         */
	         , A.REPAIR_REMARK                                  /* 수리내용       */
			 , A.INSPEC_DATE        AS INSPEC_DATE              /* 출고검사일     */
			 , C7.USER_NAME         AS INSPEC_PRSN              /* 출고 검사담당자*/
			 , B.OUT_DATE                                       /* 출고일         */
			 , C8.USER_NAME			AS OUT_PRSN                 /* 출고담당자     */
			 , B.OUT_DATE           AS END_DATE                 /* 종료일         */
			 , B.OUT_PRSN           AS END_PRSN                 /* 종료담당자     */
	         , A.QUOT_NUM                                       /* 수리견적번호   */
	         , A.RECEIPT_NUM                                    /* AS접수번호     */  
			 , E.ITEM_CODE1
			 , F.SERIAL_NO1 
			 , E.ITEM_CODE2
			 , F.SERIAL_NO2
			 , E.ITEM_CODE3
			 , F.SERIAL_NO3
			 , E.ITEM_CODE4
			 , F.SERIAL_NO4
			 , E.ITEM_CODE5
			 , F.SERIAL_NO5  
			 , (SELECT MAX(R.REPAIR_NUM)
			      FROM (SELECT R2.REPAIR_NUM, R2.REPAIR_DATE , RANK() OVER(PARTITION BY R1.COMP_CODE, R1.DIV_CODE, R1.ITEM_CODE ORDER BY R2.REPAIR_DATE DESC) AS RNK
			              FROM      SAS100T R1 WITH (NOLOCK)
			             INNER JOIN SAS300T R2 WITH (NOLOCK)  ON R2.COMP_CODE    = R1.COMP_CODE
			                                                 AND R2.DIV_CODE     = R1.DIV_CODE
			                                                 AND R2.RECEIPT_NUM  = R1.RECEIPT_NUM 
			             WHERE R1.COMP_CODE = A.COMP_CODE
			               AND R1.DIV_CODE  = A.DIV_CODE
			               AND R1.ITEM_CODE = B.ITEM_CODE
			               AND R2.REPAIR_DATE &lt; A.REPAIR_DATE
			            ) AS R 
			       WHERE RNK = 1) AS PRE_REPAIR_NUM
			 , (SELECT MAX(REPAIR_DATE)
			      FROM (SELECT R2.REPAIR_NUM, R2.REPAIR_DATE , RANK() OVER(PARTITION BY R1.COMP_CODE, R1.DIV_CODE, R1.ITEM_CODE ORDER BY R2.REPAIR_DATE DESC) AS RNK
			              FROM      SAS100T R1 WITH (NOLOCK)
			             INNER JOIN SAS300T R2 WITH (NOLOCK)  ON R2.COMP_CODE    = R1.COMP_CODE
			                                                 AND R2.DIV_CODE     = R1.DIV_CODE
			                                                 AND R2.RECEIPT_NUM  = R1.RECEIPT_NUM 
			             WHERE R1.COMP_CODE = A.COMP_CODE
			               AND R1.DIV_CODE  = A.DIV_CODE
			               AND R1.ITEM_CODE = B.ITEM_CODE
			               AND R2.REPAIR_DATE &lt; A.REPAIR_DATE
			            ) AS R 
			       WHERE RNK = 1) AS PRE_REPAIR_DATE  
			 , D.AS_AMT 
			 , B.FDA_Q1_YN        AS RECEIPT_FDA_Q1_YN 
			 , B.FDA_Q2_YN        AS RECEIPT_FDA_Q2_YN 
			 , B.FDA_Q3_YN        AS RECEIPT_FDA_Q3_YN
			 , C.FDA_Q1_YN        AS QUOT_FDA_Q1_YN 
			 , C.FDA_Q2_YN        AS QUOT_FDA_Q2_YN 
			 , C.FDA_Q3_YN        AS QUOT_FDA_Q3_YN
	      FROM            SAS100T B  WITH (NOLOCK)
	           LEFT  JOIN SAS300T A  WITH (NOLOCK) ON A.COMP_CODE    = B.COMP_CODE
	                                              AND A.DIV_CODE     = B.DIV_CODE
	                                              AND A.RECEIPT_NUM  = B.RECEIPT_NUM
               LEFT  JOIN SAS200T C  WITH (NOLOCK) ON C.COMP_CODE    = B.COMP_CODE
	                                              AND C.DIV_CODE     = B.DIV_CODE
	                                              AND C.RECEIPT_NUM  = B.RECEIPT_NUM
	           LEFT  JOIN BCM100T C1 WITH (NOLOCK) ON C1.COMP_CODE   = B.COMP_CODE
	                                              AND C1.CUSTOM_CODE = B.CUSTOM_CODE
	           LEFT  JOIN BPR100T C2 WITH (NOLOCK) ON C2.COMP_CODE   = B.COMP_CODE
	                                              AND C2.ITEM_CODE   = B.ITEM_CODE
			   LEFT  JOIN BSA300T C3 WITH (NOLOCK) ON C3.COMP_CODE   = A.COMP_CODE
			                                      AND C3.USER_ID     = A.REPAIR_PRSN
               LEFT  JOIN BSA300T C4 WITH (NOLOCK) ON C4.COMP_CODE   = B.COMP_CODE
			                                      AND C4.USER_ID     = B.RECEIPT_PRSN
               LEFT  JOIN BSA300T C5 WITH (NOLOCK) ON C5.COMP_CODE   = C.COMP_CODE
			                                      AND C5.USER_ID     = C.QUOT_PRSN
               LEFT  JOIN BSA100T C6 WITH (NOLOCK) ON C6.COMP_CODE   = A.COMP_CODE
			                                      AND C6.MAIN_CODE     = 'S166'
			                                      AND C6.USE_YN      = 'Y'
			                                      AND C6.SUB_CODE    = B.WARR_MONTH
               LEFT  JOIN BSA300T C7 WITH (NOLOCK) ON C7.COMP_CODE   = A.COMP_CODE
			                                      AND C7.USER_ID     = A.INSPEC_PRSN
               LEFT  JOIN BSA300T C8 WITH (NOLOCK) ON C8.COMP_CODE   = B.COMP_CODE
			                                      AND C8.USER_ID     = B.OUT_PRSN
			   LEFT  JOIN (
					   		SELECT D1.COMP_CODE
					   		     , D1.DIV_CODE
					   		     , D1.REPAIR_NUM
					   		     , SUM(ISNULL(D2.TOT_AMT,0))  AS AS_AMT    
					   		  FROM      SAS100T D0 WITH (NOLOCK)
					   		 INNER JOIN SAS300T D1 WITH (NOLOCK)  ON D1.COMP_CODE   = D0.COMP_CODE
					   		                                     AND D1.DIV_CODE    = D0.DIV_CODE
					   		                                     AND D1.RECEIPT_NUM = D0.RECEIPT_NUM
					   		 INNER JOIN SAS310T D2 WITH (NOLOCK)  ON D2.COMP_CODE   = D1.COMP_CODE
					   		                                     AND D2.DIV_CODE    = D1.DIV_CODE
					   		                                     AND D2.REPAIR_NUM  = D1.REPAIR_NUM
					   		 WHERE D0.COMP_CODE = @CompCode
					   		   AND D0.DIV_CODE  = @DivCode
					   		   AND D0.RECEIPT_DATE &gt;= @ReceiptDateFr
							   AND D0.RECEIPT_DATE &lt;= @ReceiptDateTo 
			   		         GROUP BY D1.COMP_CODE, D1.DIV_CODE, D1.REPAIR_NUM
			   		         
			                                 ) D   ON D.COMP_CODE     = A.COMP_CODE
	                                              AND D.DIV_CODE      = A.DIV_CODE
	                                              AND D.REPAIR_NUM    = A.REPAIR_NUM
			   LEFT  JOIN (  
							SELECT  REPAIR_NUM
								  , [1] AS ITEM_CODE1
								  , [2] AS ITEM_CODE2
								  , [3] AS ITEM_CODE3
								  , [4] AS ITEM_CODE4
								  , [5] AS ITEM_CODE5
							FROM
								(SELECT M1.REPAIR_NUM,
										M1.ITEM_CODE,
										RANK() OVER (PARTITION BY M1.REPAIR_NUM ORDER BY REPAIR_SEQ) AS S_SEQ
								   FROM       SAS310T M1 WITH (NOLOCK)
								   INNER JOIN SAS300T M  WITH (NOLOCK)   ON M.COMP_CODE    = M1.COMP_CODE
								                                        AND M.DIV_CODE     = M1.DIV_CODE
																		AND M.REPAIR_NUM   = M1.REPAIR_NUM
								   INNER JOIN SAS100T M2  WITH (NOLOCK)  ON M2.COMP_CODE   = M.COMP_CODE
								                                        AND M2.DIV_CODE    = M.DIV_CODE
																		AND M2.RECEIPT_NUM = M.RECEIPT_NUM									
								  WHERE M1.COMP_CODE   = @CompCode
									AND M1.DIV_CODE    = @DivCode
									AND M2.RECEIPT_DATE &gt;= @ReceiptDateFr
									AND M2.RECEIPT_DATE &lt;= @ReceiptDateTo
									AND ISNULL(M1.SERIAL_NO, '') != ''
								) P1
							PIVOT (  MAX(ITEM_CODE)  FOR S_SEQ IN ([1],[2],[3],[4],[5]) ) AS P2
	                                             ) AS E ON  E.REPAIR_NUM  = A.REPAIR_NUM
              LEFT  JOIN (  
							SELECT  REPAIR_NUM
								  , [1]  AS SERIAL_NO1
								  , [2]  AS SERIAL_NO2
								  , [3]  AS SERIAL_NO3
								  , [4]  AS SERIAL_NO4
								  , [5]  AS SERIAL_NO5
							FROM
								(SELECT M1.REPAIR_NUM,
										M1.SERIAL_NO,
										RANK() OVER (PARTITION BY M1.REPAIR_NUM ORDER BY REPAIR_SEQ) AS S_SEQ
								   FROM SAS310T M1 WITH (NOLOCK)
								   INNER JOIN SAS300T M  WITH (NOLOCK)   ON M.COMP_CODE    = M1.COMP_CODE
								                                        AND M.DIV_CODE     = M1.DIV_CODE
																		AND M.REPAIR_NUM   = M1.REPAIR_NUM
								   INNER JOIN SAS100T M2  WITH (NOLOCK)  ON M2.COMP_CODE   = M.COMP_CODE
								                                        AND M2.DIV_CODE    = M.DIV_CODE
																		AND M2.RECEIPT_NUM = M.RECEIPT_NUM											
								  WHERE M1.COMP_CODE   = @CompCode
									AND M1.DIV_CODE    = @DivCode
									AND M2.RECEIPT_DATE &gt;= @ReceiptDateFr
									AND M2.RECEIPT_DATE &lt;= @ReceiptDateTo
									AND ISNULL(M1.SERIAL_NO, '') != ''
								) P1
							PIVOT (  MAX(SERIAL_NO)  FOR S_SEQ IN ([1],[2],[3],[4],[5]) ) AS P2
	                                             ) AS F ON  F.REPAIR_NUM  = A.REPAIR_NUM
	     WHERE B.COMP_CODE  = @CompCode
	       AND B.DIV_CODE   = @DivCode
	       AND B.RECEIPT_DATE &gt;= @ReceiptDateFr
	       AND B.RECEIPT_DATE &lt;= @ReceiptDateTo
	       <if test="@foren.Ognl@isNotEmpty(SERIAL_NO)">
		   AND   B.SERIAL_NO LIKE '%' + #{SERIAL_NO} +'%'	
		   </if>	
		   <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
		   AND   B.ITEM_CODE = #{ITEM_CODE}	
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		   AND   B.CUSTOM_CODE = #{CUSTOM_CODE}	
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(PARTS_CODE)">
		   AND  (     E.ITEM_CODE1 = #{PARTS_CODE}	
		   		  OR  E.ITEM_CODE2 = #{PARTS_CODE}	
		   		  OR  E.ITEM_CODE3 = #{PARTS_CODE}
		   		  OR  E.ITEM_CODE4 = #{PARTS_CODE}
		   		  OR  E.ITEM_CODE5 = #{PARTS_CODE}
		   		)
		   </if>
		  
	     ORDER BY B.COMP_CODE, B.DIV_CODE, B.RECEIPT_DATE, B.RECEIPT_NUM
		
	</select>
</mapper>