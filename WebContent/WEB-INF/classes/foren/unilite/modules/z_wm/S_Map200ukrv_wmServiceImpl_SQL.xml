<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_map200ukrv_wmServiceImpl">
	<select id="s_map200ukrv_wmServiceImpl.selectRefCode2" parameterType="Map" resultType="rMap">
		--UBFuncKrv.CBFuncKr[fnAutoNo] Query01
		SELECT ISNULL(REF_CODE2, 0) VAT_RATE
		  FROM BSA100T WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND MAIN_CODE = 'A022'
		   AND SUB_CODE  = #{BILL_TYPE}
	</select>

	<select id="s_map200ukrv_wmServiceImpl.billDivCode" parameterType="Map" resultType="rMap">
		SELECT BILL_DIV_CODE
		  FROM BOR120T WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DIV_CODE  = #{DIV_CODE}
	</select>



	<select id="s_map200ukrv_wmServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* s_map200ukrv_wmServiceImpl.selectList */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08)  /* 법인코드    */
		          , @UserId      NVARCHAR(100) /* 사용자ID    */
		          , @RefItem     NVARCHAR(01)  /* 명칭 참조 유형  */

		    SET @CompCode = #{S_COMP_CODE}
		    SET @UserId   = #{S_USER_ID}

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		      FROM BSA300T WITH (NOLOCK)
		     WHERE USER_ID = @UserId

		    SET @RefItem = ISNULL(@RefItem, N'0')

<!-- 미등록된 데이터 조회(MASTER) -->
		<if test="ENTRY_YN == &quot;N&quot;">
		    SELECT 
<!-- 20210617 추가: 집계구분별로 데이터 가져오는 로직 변경되어 GROUP_KEY 가져오는 로직 분할 -->
<!-- 거래처별일 경우 -->
		<if test="DATA_GUBUN == &quot;2&quot;">
		           A.INOUT_CODE + '/'
		         + ISNULL(A.TAX_INOUT, '2') + '/'
		         + A.ORDER_TYPE                                 AS GROUP_KEY
		</if>
<!-- 입고번호별일 경우 -->
		<if test="DATA_GUBUN == &quot;1&quot;">
		           A.INOUT_NUM + '/'
		         + ISNULL(A.TAX_INOUT, '2') + '/'
		         + A.ORDER_TYPE                                 AS GROUP_KEY
		</if>
		         , A.COMP_CODE
		         , A.DIV_CODE
		         , A.INOUT_CODE                                 AS CUSTOM_CODE
		         , (CASE WHEN @RefItem = '1' THEN Z1.CUSTOM_NAME1
		                 WHEN @RefItem = '2' THEN Z1.CUSTOM_NAME2
		                                     ELSE Z1.CUSTOM_NAME
		             END)                                       AS CUSTOM_NAME
		         , #{DEPT_CODE}                                 AS DEPT_CODE
		         , #{DEPT_NAME}                                 AS DEPT_NAME
		         , ''                                           AS CHANGE_BASIS_NUM
		         , #{CHANGE_BASIS_DATE}                         AS CHANGE_BASIS_DATE
		         , #{BILL_DATE}                                 AS BILL_DATE
		         , CASE WHEN ISNULL(Z1.BILL_TYPE, '') = '' THEN CASE WHEN Z4.TAX_TYPE = '1' THEN '51'
		                                                             ELSE '57'
		                                                        END
		                ELSE ISNULL(Z1.BILL_TYPE, '')
		           END                                          AS BILL_TYPE
		         , Z1.MONEY_UNIT
		         , '10'                                         AS ACCOUNT_TYPE
		         , B.BILL_DIV_CODE
		         , B.COMPANY_NUM
		         , ISNULL(Z1.TAX_CALC_TYPE, '2')                AS TAX_CALC_TYPE  --세액 계산법(개별/통합)
		         , CONVERT(NUMERIC, Z2.REF_CODE2)               AS VAT_RATE
		         , ISNULL(A.TAX_INOUT, '2')                     AS TAX_INOUT      --세액포함여부(1: 별도, 2: 포함)
		         , A.ORDER_TYPE
		         , CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		           END                                          AS AMOUNT_I_PURE
		         , uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                 , ISNULL(A.TAX_INOUT, '2')
		                                 , Z4.TAX_TYPE
		                                 , CONVERT(NUMERIC, Z2.REF_CODE2)
		                                 , CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                        ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                   END
		                                 , '3'
		                                 , '1'
		           )                                            AS AMOUNT_I_CAL
		         , uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                 , ISNULL(A.TAX_INOUT, '2')
		                                 , Z4.TAX_TYPE
		                                 , CONVERT(NUMERIC, Z2.REF_CODE2)
		                                 , CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                        ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                   END
		                                 , '3'
		                                 , '2'
		           )                                            AS TAX_I_CAL
		         , Z4.TAX_TYPE
		         , Z3.USER_NAME
		      INTO       #TEMP_PJW20210601
		      FROM       BTR100T A  WITH(NOLOCK)
		      INNER JOIN BOR120T B  WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
		                                        AND B.DIV_CODE     = A.DIV_CODE
		      INNER JOIN BCM100T Z1 WITH(NOLOCK) ON Z1.COMP_CODE   = A.COMP_CODE
		                                        AND Z1.CUSTOM_CODE = A.INOUT_CODE
		      INNER JOIN BPR100T Z4 WITH(NOLOCK) ON Z4.COMP_CODE   = A.COMP_CODE
		                                        AND Z4.ITEM_CODE   = A.ITEM_CODE
		      INNER JOIN BSA100T Z2 WITH(NOLOCK) ON Z2.COMP_CODE   = A.COMP_CODE
		                                        AND Z2.MAIN_CODE   = 'A022'
		                                        AND Z2.SUB_CODE   != '$'
		                                        AND Z2.SUB_CODE    = CASE WHEN ISNULL(Z1.BILL_TYPE, '') = '' THEN CASE WHEN Z4.TAX_TYPE = '1' THEN '51'
		                                                                                                               ELSE '57'
		                                                                                                          END
		                                                                 ELSE ISNULL(Z1.BILL_TYPE, '')
		                                                            END
		      INNER JOIN BSA300T Z3 WITH(NOLOCK) ON Z3.COMP_CODE   = A.COMP_CODE
		                                        AND Z3.USER_ID     = A.UPDATE_DB_USER
		      LEFT  JOIN TIB140T R1 WITH(NOLOCK) ON R1.COMP_CODE   = A.COMP_CODE     /* LOCAL L/C MASTER */
		                                       AND R1.DIV_CODE     = A.DIV_CODE
		                                       AND R1.LLC_SER_NO   = A.LC_NUM
		                                       AND A.CREATE_LOC    = '6'             /* 무역  */
		                                       AND A.ORDER_TYPE    = '2'             /* LLC */
		                                       AND A.TRADE_LOC     = '2'             /* LLC */
		     WHERE A.COMP_CODE    = @CompCode
		       AND A.DIV_CODE     = #{DIV_CODE}
		       AND A.INOUT_TYPE   = '1'
		       AND A.CREATE_LOC  IN ('2','6')
		       AND A.ACCOUNT_YNC  = 'Y'
		       AND A.PRICE_YN     = 'Y'
		       AND ((A.INOUT_Q - ISNULL(A.ACCOUNT_Q, 0) != 0)
		          OR (INOUT_Q = 0 AND (INOUT_NUM + CONVERT(NVARCHAR(4), INOUT_SEQ) NOT IN (SELECT INOUT_NUM + CONVERT(NVARCHAR(4), INOUT_SEQ) FROM MAP200T))))
		       AND ISNULL(R1.EX_DATE,'') = ''   /* 무역 LLC 미착 지급결의 안된것 */
		       AND ISNULL(A.EX_DATE ,'') = ''   /* 매입전표 생성된것은 제외 */
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		       AND A.INOUT_CODE    LIKE #{CUSTOM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		       AND CASE WHEN @RefItem = '1' THEN Z1.CUSTOM_NAME1
		                WHEN @RefItem = '2' THEN Z1.CUSTOM_NAME2
		                                    ELSE Z1.CUSTOM_NAME
		           END                  LIKE #{CUSTOM_NAME} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_FR)">
		       AND A.INOUT_DATE   &gt;= #{INOUT_DATE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_TO)">
		       AND A.INOUT_DATE   &lt;= #{INOUT_DATE_TO}
		</if>
		    ORDER BY A.INOUT_CODE, A.ORDER_TYPE, ISNULL(A.TAX_INOUT, '2')

		    /* 데이터 조회 */
		    SELECT A.GROUP_KEY
		         , A.COMP_CODE
		         , A.DIV_CODE
		         , A.CUSTOM_CODE
		         , A.CUSTOM_NAME
		         , A.DEPT_CODE
		         , A.DEPT_NAME
		         , A.CHANGE_BASIS_NUM
		         , A.CHANGE_BASIS_DATE
		         , A.BILL_DATE
		         , A.BILL_TYPE
		         , A.MONEY_UNIT
		         , A.ACCOUNT_TYPE
		         , A.BILL_DIV_CODE
		         , A.COMPANY_NUM
		         , A.TAX_CALC_TYPE  --세액 계산법(개별/통합)
		         , A.VAT_RATE
		         , A.TAX_INOUT      --세액포함여부(1: 별도, 2: 포함)
		         , A.ORDER_TYPE
		         , CASE WHEN A.TAX_CALC_TYPE = '2' THEN SUM(A.AMOUNT_I_CAL)   --개별: 개별합계
		                ELSE uniLITE.fnGetTaxCalc_WM(A.COMP_CODE              --통합: 합계된 금액에서 금액, 세액 계산
		                                           , A.TAX_INOUT
		                                           , A.TAX_TYPE
		                                           , A.VAT_RATE
		                                           , SUM(A.AMOUNT_I_PURE)
		                                           , '3'
		                                           , '1'
		                     )
		           END                   AS AMOUNT_I
		         , CASE WHEN A.TAX_CALC_TYPE = '2' THEN SUM(A.TAX_I_CAL)
		                ELSE uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                           , A.TAX_INOUT
		                                           , A.TAX_TYPE
		                                           , A.VAT_RATE
		                                           , SUM(A.AMOUNT_I_PURE)
		                                           , '3'
		                                           , '2'
		                     )
		           END                   AS VAT_AMOUNT_O
		         , CASE WHEN A.TAX_CALC_TYPE = '2' THEN SUM(A.AMOUNT_I_CAL)
		                ELSE uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                           , A.TAX_INOUT
		                                           , A.TAX_TYPE
		                                           , A.VAT_RATE
		                                           , SUM(A.AMOUNT_I_PURE)
		                                           , '3'
		                                           , '1'
		                     )
		           END
		         + CASE WHEN A.TAX_CALC_TYPE = '2' THEN SUM(A.TAX_I_CAL)
		                ELSE uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                           , A.TAX_INOUT
		                                           , A.TAX_TYPE
		                                           , A.VAT_RATE
		                                           , SUM(A.AMOUNT_I_PURE)
		                                           , '3'
		                                           , '2'
		                     )
		           END                   AS AMOUNT_TOT
		         , A.TAX_TYPE
		         , 'N'                   AS DRAFT_YN
		         , DATEADD(dd, -1, CONVERT(NVARCHAR(06), DATEADD(MM, +2, A.BILL_DATE),112) + '01') AS ISSUE_EXPECTED_DATE  --익월 말일
		         , MAX(A.USER_NAME)      AS USER_NAME
		      FROM #TEMP_PJW20210601 A
		     GROUP BY A.COMP_CODE    , A.DIV_CODE   , A.CUSTOM_CODE     , A.CUSTOM_NAME      , A.ORDER_TYPE  , A.ACCOUNT_TYPE
		            , A.DEPT_CODE    , A.DEPT_NAME  , A.CHANGE_BASIS_NUM, A.CHANGE_BASIS_DATE, A.BILL_DATE
		            , A.BILL_DIV_CODE, A.COMPANY_NUM, A.MONEY_UNIT      , A.BILL_TYPE
		            , A.TAX_CALC_TYPE, A.TAX_INOUT  , A.TAX_TYPE        , A.VAT_RATE
		            , A.GROUP_KEY
		     ORDER BY A.CUSTOM_CODE, A.ORDER_TYPE, A.TAX_INOUT
		</if>
<!-- 등록된 데이터 조회(MASTER) -->
		<if test="ENTRY_YN == &quot;Y&quot;">
		    SELECT A.COMP_CODE
		         , A.DIV_CODE
		         , A.BILL_DIV_CODE
		         , A.CUSTOM_CODE
		         , CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1
		                WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2
		                ELSE C1.CUSTOM_NAME
		           END                          AS CUSTOM_NAME
		         , A.CHANGE_BASIS_NUM
		         , A.CHANGE_BASIS_DATE
		         , A.DEPT_CODE
		         , A.DEPT_NAME
		         , A.BILL_TYPE
		         , A.BILL_NUM
		         , A.BILL_DATE
		         , A.RECEIPT_TYPE
		         , A.ORDER_TYPE
		         , A.AMOUNT_I
		         , A.VAT_RATE
		         , A.VAT_AMOUNT_O
		         , A.AMOUNT_I + A.VAT_AMOUNT_O  AS AMOUNT_TOT
		         , A.MONEY_UNIT
		         , A.EX_DATE
		         , A.EX_NUM
		         , A.AGREE_YN
		         , A.AC_DATE
		         , A.AC_NUM
		         , A.DRAFT_YN
		         , A.PROJECT_NO
		         , A.ISSUE_EXPECTED_DATE
		         , A.ACCOUNT_TYPE
		         , A.INSERT_DB_USER
		         , A.INSERT_DB_TIME
		         , A.UPDATE_DB_USER
		         , A.UPDATE_DB_TIME
		         , A.PJT_CODE
		         , A.CREDIT_NUM
		         , A.EB_NUM
		         , A.BILL_SEND_YN
		         , ISNULL(A.TAX_INOUT, '2')     AS TAX_INOUT
		         , A.UPDATE_DB_USER
		         , C2.USER_NAME
		         , C1.TAX_CALC_TYPE             --세액 계산법(개별/통합)
		      FROM       MAP100T A  WITH(NOLOCK)
		      INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
		                                        AND C1.CUSTOM_CODE = A.CUSTOM_CODE
		      INNER JOIN BSA300T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
		                                        AND C2.USER_ID     = A.UPDATE_DB_USER
		     WHERE A.COMP_CODE = @CompCode
		       AND A.DIV_CODE  = #{DIV_CODE}
		       AND A.BILL_DATE = #{BILL_DATE}
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		       AND A.CUSTOM_CODE  LIKE #{CUSTOM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		       AND CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1
		                WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2
		                                    ELSE C1.CUSTOM_NAME
		           END                  LIKE #{CUSTOM_NAME} + '%'
		</if>
		     ORDER BY A.COMP_CODE, A.DIV_CODE, A.CHANGE_BASIS_NUM
		</if>

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>

	<select id="s_map200ukrv_wmServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* s_map200ukrv_wmServiceImpl.selectList2 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
		          , @UserId      NVARCHAR(100) /* 사용자ID    */
		          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
		          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */

		    SET @CompCode = #{S_COMP_CODE}
		    SET @UserId   = #{S_USER_ID}

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		      FROM BSA300T WITH (NOLOCK)
		     WHERE USER_ID = @UserId

		    SET @RefItem = ISNULL(@RefItem, N'0')

		    /* 날짜 포맷 유형 설정 */
		    SELECT TOP 1 @DateFormat = CODE_NAME
		      FROM BSA100T WITH (NOLOCK)
		     WHERE COMP_CODE = @CompCode
		       AND MAIN_CODE = N'B044'
		       AND REF_CODE1 = N'Y'

		    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

		    /* 데이터 조회 */
<!-- 미등록된 데이터 조회(DETAIL) -->
		<if test="ENTRY_YN == &quot;N&quot;">
		    SELECT
<!-- 20210617 추가: 집계구분별로 데이터 가져오는 로직 변경되어 GROUP_KEY 가져오는 로직 분할 -->
<!-- 거래처별일 경우 -->
		<if test="DATA_GUBUN == &quot;2&quot;">
		           A.INOUT_CODE + '/'
		         + ISNULL(A.TAX_INOUT, '2') + '/'
		         + A.ORDER_TYPE                                 AS GROUP_KEY
		</if>
<!-- 입고번호별일 경우 -->
		<if test="DATA_GUBUN == &quot;1&quot;">
		           A.INOUT_NUM + '/'
		         + ISNULL(A.TAX_INOUT, '2') + '/'
		         + A.ORDER_TYPE                                 AS GROUP_KEY
		</if>
		         , A.COMP_CODE
		         , A.DIV_CODE
		         , Z4.BILL_DIV_CODE
		         , ''                                           AS CHANGE_BASIS_NUM
		         , ROW_NUMBER() OVER(PARTITION BY A.COMP_CODE, A.DIV_CODE, A.INOUT_CODE, ISNULL(A.TAX_INOUT, '2'), A.ORDER_TYPE
		                                 ORDER BY A.INOUT_NUM, A.INOUT_SEQ)
		                                                        AS CHANGE_BASIS_SEQ
		         , A.INOUT_NUM
		         , A.INOUT_SEQ
		         , A.INOUT_CODE                                 AS CUSTOM_CODE
		         , (CASE WHEN ISNULL(A.INOUT_DATE, '') = ''
		                 THEN ''
		                 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INOUT_DATE, 1, 4))
		                                                         , 'MM'  , SUBSTRING(A.INOUT_DATE, 5, 2))
		                                                         , 'DD'  , SUBSTRING(A.INOUT_DATE, 7, 2))
		             END)                                       AS INSTOCK_DATE
		         , B.ITEM_ACCOUNT
		         , A.ITEM_CODE
		         , (CASE WHEN @RefItem = '1' THEN C.ITEM_NAME1
		                 WHEN @RefItem = '2' THEN C.ITEM_NAME2
		                                     ELSE C.ITEM_NAME
		             END)                                       AS ITEM_NAME
		         , C.SPEC
		         , A.ORDER_UNIT
		         , C.TAX_TYPE                                   --세구분(과세, 면세)
		         , A.TRNS_RATE
		         , (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))) AS ORDER_UNIT_Q
		         , (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))) AS REMAIN_Q
		         , A.ORDER_UNIT_P
		         , A.ORDER_UNIT_FOR_P
		         , uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                 , ISNULL(A.TAX_INOUT, '2')
		                                 , C.TAX_TYPE
		                                 , CONVERT(NUMERIC, Z2.REF_CODE2)
		                                 , CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                        ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                   END
		                                 , '3'
		                                 , '1'
		           )                                            AS AMOUNT_I
		         , uniLITE.fnGetTaxCalc_WM(A.COMP_CODE
		                                 , ISNULL(A.TAX_INOUT, '2')
		                                 , C.TAX_TYPE
		                                 , CONVERT(NUMERIC, Z2.REF_CODE2)
		                                 , CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                        ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                   END
		                                 , '3'
		                                 , '2'
		           )                                            AS TAX_I
		         , A.INOUT_FOR_P                                AS FOREIGN_P
		         , (CASE WHEN A.ACCOUNT_Q = 0 THEN A.INOUT_FOR_O
		                 ELSE (A.ORDER_UNIT_FOR_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		            END)                                        AS FOR_AMOUNT_O
		         , A.MONEY_UNIT
		         , A.EXCHG_RATE_O
		         , (A.INOUT_Q - ISNULL(A.ACCOUNT_Q, 0))         AS BUY_Q
		         , C.STOCK_UNIT
		         , A.ORDER_TYPE
		         , (SELECT ORDER_PRSN
		              FROM MPO100T WITH (NOLOCK)
		             WHERE COMP_CODE   = A.COMP_CODE
		              -- AND DIV_CODE    = A.DIV_CODE
		               AND ORDER_NUM   = A.ORDER_NUM
		               AND CUSTOM_CODE = A.INOUT_CODE)          AS ORDER_PRSN
		         , A.LC_NUM
		         , A.BL_NUM
		         , A.ORDER_NUM
		         , A.ORDER_SEQ
		         , ''                                           AS BILL_DIV_CODE
		         , A.INOUT_CODE                                 AS CUSTOM_CODE
		         , (CASE WHEN @RefItem = '1' THEN Z.CUSTOM_NAME1
		                 WHEN @RefItem = '2' THEN Z.CUSTOM_NAME2
		                                     ELSE Z.CUSTOM_NAME
		             END)                                       AS CUSTOM_NAME
		         , A.INOUT_P                                    AS AMOUNT_P
		         , ISNULL(D.ADVAN_AMOUNT, 0)                    AS ADVAN_AMOUNT
		         , A.CUSTOM_PRSN
		         , A.PHONE
		         , A.BANK_NAME
		         , unilite.fnCipherDecrypt(A.BANK_ACCOUNT, '')  AS BANK_ACCOUNT
		         , A.BIRTHDAY
		         , A.ZIP_CODE
		         , A.ADDR1
		         , A.PROJECT_NO
		         , A.REMARK
		         , A.INOUT_TYPE
		         , uniLITE.fnGetTaxCalc_WM(A.COMP_CODE, ISNULL(A.TAX_INOUT, '2'), C.TAX_TYPE, CONVERT(NUMERIC, Z2.REF_CODE2), CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                                                                                                           ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                                                                                                      END
		           , '3', '1')
		         + CASE WHEN C.TAX_TYPE = 1 THEN uniLITE.fnGetTaxCalc_WM(A.COMP_CODE, ISNULL(A.TAX_INOUT, '2'), C.TAX_TYPE, CONVERT(NUMERIC, Z2.REF_CODE2), CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		                                                                                                                                                         ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		                                                                                                                                                    END
		                                       , '3', '2')
		                ELSE 0
		           END                                          AS TOTAL_I
		         , 'N'                                          AS ADVAN_YN
		         , ISNULL(A.TAX_INOUT, '2')                     AS TAX_INOUT
		         , CASE WHEN ISNULL(Z.BILL_TYPE, '') = '' THEN CASE WHEN C.TAX_TYPE = '1' THEN '51'
		                                                            ELSE '57'
		                                                       END
		                ELSE ISNULL(Z.BILL_TYPE, '')
		           END                                          AS BILL_TYPE
		         , CONVERT(NUMERIC, Z2.REF_CODE2)               AS VAT_RATE
		         , Z.TAX_CALC_TYPE
		         , Z.WON_CALC_BAS

		         --, A.ORDER_UNIT_Q - ISNULL(A.ACCOUNT_Q, 0)      AS ORDER_UNIT_Q
		         --, A.ORDER_UNIT_Q - ISNULL(A.ACCOUNT_Q, 0)      AS REMAIN_Q
		         --, (CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		         --        ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		         --   END)                                        AS AMOUNT_I
		         --, CASE WHEN C.TAX_TYPE = 1 THEN A.INOUT_TAX_AMT
		         --       ELSE 0
		         --  END                                          AS TAX_I
		         --, CASE WHEN Z.TAX_CALC_TYPE = '1' THEN CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		         --                                            ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		         --                                       END + CASE WHEN C.TAX_TYPE = 1 THEN A.INOUT_TAX_AMT
		         --                                                  ELSE 0
		         --                                             END
		         --       ELSE CASE WHEN A.ACCOUNT_Q = 0 THEN A.ORDER_UNIT_O
		         --                 ELSE (A.ORDER_UNIT_P * (A.ORDER_UNIT_Q - (ISNULL(A.ACCOUNT_Q, 0) / ISNULL(A.TRNS_RATE, 1))))
		         --            END
		         --  END                                          AS TOTAL_I
		         --, Z.BILL_TYPE
		         --, (CASE WHEN ISNULL(A.ACCOUNT_Q, 0) = 0 THEN A.ORDER_UNIT_O
		         --        ELSE (ISNULL(A.ORDER_UNIT_Q, 0) - ISNULL(A.ACCOUNT_Q, 0)) * ISNULL(A.ORDER_UNIT_P, 0)
		         --    END)                                       AS REMAIN_AMOUNT
		         --, A.INOUT_Q
		         --, A.INOUT_I
		         --, A.INOUT_I + A.INOUT_TAX_AMT                  AS TOTAL_INOUT_I
		      FROM       BTR100T A  WITH (NOLOCK)
		      INNER JOIN BPR200T B  WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                        AND B.DIV_CODE    = A.DIV_CODE
		                                        AND B.ITEM_CODE   = A.ITEM_CODE
		      INNER JOIN BPR100T C  WITH(NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
		                                        AND C.ITEM_CODE   = A.ITEM_CODE
		      INNER JOIN BCM100T Z  WITH(NOLOCK) ON Z.COMP_CODE   = A.COMP_CODE
		                                        AND Z.CUSTOM_CODE = A.INOUT_CODE
		      INNER JOIN BSA100T Z2 WITH(NOLOCK) ON Z2.COMP_CODE  = A.COMP_CODE
		                                        AND Z2.MAIN_CODE  = 'A022'
		                                        AND Z2.SUB_CODE  != '$'
		                                        AND Z2.SUB_CODE   = CASE WHEN ISNULL(Z.BILL_TYPE, '') = '' THEN CASE WHEN C.TAX_TYPE = '1' THEN '51'
		                                                                                                             ELSE '57'
		                                                                                                        END
		                                                                 ELSE ISNULL(Z.BILL_TYPE, '')
		                                                            END
		      INNER JOIN BOR120T Z4 WITH(NOLOCK) ON Z4.COMP_CODE  = A.COMP_CODE
		                                        AND Z4.DIV_CODE   = A.DIV_CODE
		      LEFT  JOIN MPO200T D  WITH(NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
		                                        AND D.IN_DIV_CODE = A.DIV_CODE
		                                        AND D.ORDER_NUM   = A.ORDER_NUM
		                                        AND D.ORDER_SEQ   = A.ORDER_SEQ
		                                        AND D.ORDER_UNIT_Q - D.MAP_Q &gt; 0
		      LEFT JOIN (SELECT A1.COMP_CODE
		                      , A1.DIV_CODE
		                      , A1.CUSTOM_CODE
		                      , A1.ITEM_CODE
		                      , A1.ORDER_NUM
		                      , A1.ORDER_SEQ
		                      , SUM(ISNULL(BUY_Q, 0)) AS BUY_Q
		                      , SUM(ISNULL(AMOUNT_I, 0)) AS AMOUNT_I
		                   FROM MAP200T A1 WITH (NOLOCK)
		                  WHERE A1.COMP_CODE = @CompCode
		                    AND A1.DIV_CODE  = #{DIV_CODE}
		                  GROUP BY A1.COMP_CODE, A1.DIV_CODE, A1.CUSTOM_CODE, A1.ITEM_CODE, A1.ORDER_NUM
		                         , A1.ORDER_SEQ) E ON E.COMP_CODE   = D.COMP_CODE
		                                          AND E.DIV_CODE    = D.IN_DIV_CODE
		                                          AND E.CUSTOM_CODE = D.CUSTOM_CODE
		                                          AND E.ITEM_CODE   = D.ITEM_CODE
		                                          AND E.ORDER_NUM   = D.ORDER_NUM
		                                          AND E.ORDER_SEQ   = D.ORDER_SEQ
		      LEFT JOIN TIB140T R1 WITH(NOLOCK) ON R1.COMP_CODE  = A.COMP_CODE     /* LOCAL L/C MASTER */
		                                       AND R1.DIV_CODE   = A.DIV_CODE
		                                       AND R1.LLC_SER_NO = A.LC_NUM
		                                       AND A.CREATE_LOC  = '6'             /* 무역  */
		                                       AND A.ORDER_TYPE  = '2'             /* LLC */
		                                       AND A.TRADE_LOC   = '2'             /* LLC */
		     WHERE A.COMP_CODE    = @CompCode
		       AND A.DIV_CODE     = #{DIV_CODE}
		       AND A.INOUT_TYPE   = '1'
		       AND A.CREATE_LOC  IN ('2','6')
		       AND A.ACCOUNT_YNC  = 'Y'
		       AND A.PRICE_YN     = 'Y'
		       AND ((A.INOUT_Q - ISNULL(A.ACCOUNT_Q, 0) != 0)
		          OR (INOUT_Q = 0 AND (INOUT_NUM + CONVERT(NVARCHAR(4), INOUT_SEQ) NOT IN (SELECT INOUT_NUM + CONVERT(NVARCHAR(4), INOUT_SEQ) FROM MAP200T))))
		       AND ISNULL(R1.EX_DATE,'') = ''   /* 무역 LLC 미착 지급결의 안된것 */
		       AND ISNULL(A.EX_DATE ,'') = ''   /* 매입전표 생성된것은 제외 */
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		       AND A.INOUT_CODE    LIKE #{CUSTOM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		       AND CASE WHEN @RefItem = '1' THEN Z.CUSTOM_NAME1
		                WHEN @RefItem = '2' THEN Z.CUSTOM_NAME2
		                                    ELSE Z.CUSTOM_NAME
		           END                  LIKE #{CUSTOM_NAME} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_FR)">
		       AND A.INOUT_DATE   &gt;= #{INOUT_DATE_FR}
		</if>
		<if test="@foren.Ognl@isNotEmpty(INOUT_DATE_TO)">
		       AND A.INOUT_DATE   &lt;= #{INOUT_DATE_TO}
		</if>
		    ORDER BY A.INOUT_DATE, ROW_NUMBER() OVER(PARTITION BY A.COMP_CODE, A.DIV_CODE, A.INOUT_CODE, ISNULL(A.TAX_INOUT, '2'), A.ORDER_TYPE
		                                                 ORDER BY A.INOUT_NUM, A.INOUT_SEQ)
		</if>
<!-- 등록된 데이터 조회(DETAIL) -->
		<if test="ENTRY_YN == &quot;Y&quot;">
		    SELECT
		           A.CHANGE_BASIS_NUM
		         , A.CHANGE_BASIS_SEQ
		         , (CASE WHEN ISNULL(A.INSTOCK_DATE, '') = ''
		                 THEN ''
		                 ELSE REPLACE(REPLACE(REPLACE(@DateFormat, 'YYYY', SUBSTRING(A.INSTOCK_DATE, 1, 4))
		                                                         , 'MM'  , SUBSTRING(A.INSTOCK_DATE, 5, 2))
		                                                         , 'DD'  , SUBSTRING(A.INSTOCK_DATE, 7, 2))
		             END)                                                         AS INSTOCK_DATE
		         , D.ITEM_ACCOUNT
		         , A.ITEM_CODE
		         /*, uniLITE.fnItemNameComp(A.COMP_CODE, N'UNILITE5',B.ITEM_CODE) AS ITEM_NAME */
		         ,(CASE WHEN @RefItem = '1' THEN B.ITEM_NAME1
		                 WHEN @RefItem = '2' THEN B.ITEM_NAME2
		                                     ELSE B.ITEM_NAME
		             END)                        AS ITEM_NAME
		         , B.SPEC
		         , A.ORDER_UNIT
		         , B.TAX_TYPE
		         , A.ORDER_UNIT_Q
		         , ((C.ACCOUNT_Q / ISNULL(C.TRNS_RATE, 1)) - A.ORDER_UNIT_Q)      AS REMAIN_Q
		         , A.ORDER_UNIT_P
		         , A.AMOUNT_P
		         , A.AMOUNT_I
		         , A.TAX_I
		         , A.AMOUNT_I + A.TAX_I                                           AS TOTAL_I
		         , A.ORDER_UNIT_FOR_P
		         , A.FOREIGN_P
		         , A.FOR_AMOUNT_O
		         , A.MONEY_UNIT
		         , A.EXCHG_RATE_O
		         , B.STOCK_UNIT
		         , A.TRNS_RATE
		         , A.BUY_Q
		         , A.ORDER_TYPE
		         , A.ORDER_PRSN
		         , A.LC_NUM
		         , A.BL_NUM
		         , A.ORDER_NUM
		         , A.ORDER_SEQ
		         , A.INOUT_NUM
		         , A.INOUT_SEQ
		         , A.DIV_CODE
		         , A.BILL_DIV_CODE
		         , A.CUSTOM_CODE
		         , A.REMARK
		         , A.PROJECT_NO
		         , A.UPDATE_DB_USER
		         , A.UPDATE_DB_TIME
		         , A.COMP_CODE
		         , A.ADVAN_YN
		         , E.ADVAN_AMOUNT AS ADVAN_AMOUNT
		         , A.CUSTOM_PRSN
		         , A.PHONE
		         , A.BANK_NAME
		         , unilite.fnCipherDecrypt(A.BANK_ACCOUNT, '')  AS BANK_ACCOUNT
		         , A.BIRTHDAY
		         , A.ZIP_CODE
		         , A.ADDR1
		         , Z.BILL_TYPE
		         , ISNULL(Z.TAX_INOUT, '2')                     AS TAX_INOUT
		         , Z.VAT_RATE
		         , Z.EX_DATE
		         , A.UPDATE_DB_USER
		         , C1.WON_CALC_BAS
		      FROM       MAP200T A  WITH(NOLOCK)
		      INNER JOIN MAP100T Z  WITH(NOLOCK) ON Z.COMP_CODE        = A.COMP_CODE   --20210513 추가: panel의 bill_type 변경가능하게 수정 관련
		                                        AND Z.DIV_CODE         = A.DIV_CODE
		                                        AND Z.BILL_DIV_CODE    = A.BILL_DIV_CODE
		                                        AND Z.CUSTOM_CODE      = A.CUSTOM_CODE
		                                        AND Z.CHANGE_BASIS_NUM = A.CHANGE_BASIS_NUM
		      INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE       = A.COMP_CODE
		                                        AND C1.CUSTOM_CODE     = A.CUSTOM_CODE
		      LEFT  JOIN BTR100T C  WITH(NOLOCK) ON C.COMP_CODE        = A.COMP_CODE
		                                        AND C.DIV_CODE         = A.DIV_CODE
		                                        AND C.INOUT_NUM        = A.INOUT_NUM
		                                        AND C.INOUT_SEQ        = A.INOUT_SEQ
		                                        AND C.INOUT_TYPE        = '1'
		      LEFT  JOIN BPR100T B  WITH(NOLOCK) ON B.COMP_CODE        = A.COMP_CODE
		                                        AND B.ITEM_CODE        = A.ITEM_CODE
		      LEFT  JOIN BPR200T D  WITH(NOLOCK) ON D.COMP_CODE        = A.COMP_CODE
		                                        AND D.DIV_CODE         = A.DIV_CODE
		                                        AND D.ITEM_CODE        = A.ITEM_CODE
		      LEFT  JOIN MPO200T E  WITH(NOLOCK) ON E.COMP_CODE        = C.COMP_CODE
		                                        AND E.DIV_CODE         = C.DIV_CODE
		                                        AND E.ORDER_NUM        = C.ORDER_NUM
		                                        AND E.ORDER_SEQ        = C.ORDER_SEQ
		     WHERE A.COMP_CODE        = @CompCode
		       AND A.DIV_CODE  = #{DIV_CODE}
		       AND Z.BILL_DATE = #{BILL_DATE}
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
		       AND A.CUSTOM_CODE  LIKE #{CUSTOM_CODE} + '%'
		</if>
		<if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
		       AND CASE WHEN @RefItem = '1' THEN C1.CUSTOM_NAME1
		                WHEN @RefItem = '2' THEN C1.CUSTOM_NAME2
		                                    ELSE C1.CUSTOM_NAME
		           END                  LIKE #{CUSTOM_NAME} + '%'
		</if>
		     ORDER BY A.CHANGE_BASIS_NUM, A.CHANGE_BASIS_SEQ
		</if>

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END
	</select>





	<insert id="s_map200ukrv_wmServiceImpl.insertLogForm" parameterType="Map">
		INSERT INTO L_MAP100T
		     ( KEY_VALUE            , OPR_FLAG
		     , COMP_CODE            , DIV_CODE              , BILL_DIV_CODE         , CUSTOM_CODE           , CHANGE_BASIS_NUM
		     , CHANGE_BASIS_DATE    , DEPT_CODE             , DEPT_NAME             , BILL_TYPE             , BILL_NUM
		     , BILL_DATE            , RECEIPT_TYPE          , ORDER_TYPE            , AMOUNT_I              , VAT_RATE
		     , VAT_AMOUNT_O         , MONEY_UNIT            , EX_DATE               , EX_NUM                , AGREE_YN
		     , AC_DATE              , AC_NUM                , DRAFT_YN              , PROJECT_NO            , PJT_CODE
		     , ISSUE_EXPECTED_DATE  , ACCOUNT_TYPE
		     , CREDIT_NUM
		     , EB_NUM               , BILL_SEND_YN
		     , TAX_INOUT
		     , GROUP_KEY
		     , UPDATE_DB_USER       , UPDATE_DB_TIME        , INSERT_DB_USER        , INSERT_DB_TIME)
		VALUES
		     ( #{KEY_VALUE}         , #{OPR_FLAG}
		     , #{S_COMP_CODE}       , #{DIV_CODE}           , #{BILL_DIV_CODE}      , #{CUSTOM_CODE}        , #{CHANGE_BASIS_NUM}
		     , #{CHANGE_BASIS_DATE} , #{DEPT_CODE}          , #{DEPT_NAME}          , #{BILL_TYPE}          , #{BILL_NUM}
		     , #{BILL_DATE}         , #{RECEIPT_TYPE}       , #{ORDER_TYPE}         , #{AMOUNT_I}           , #{VAT_RATE}
		     , #{VAT_AMOUNT_O}      , #{MONEY_UNIT}         , #{EX_DATE}            , #{EX_NUM}             , #{AGREE_YN}
		     , #{AC_DATE}           , #{AC_NUM}             , #{DRAFT_YN}           , #{PROJECT_NO}         , #{PJT_CODE}
		     , #{ISSUE_EXPECTED_DATE},#{ACCOUNT_TYPE}
		     , #{CREDIT_NUM}
		     , #{EB_NUM}            , ''
		     , #{TAX_INOUT}
		     , #{GROUP_KEY}
		     , #{S_USER_ID}         , GETDATE()             , #{S_USER_ID}          , GETDATE() )
	</insert>

	<insert id="s_map200ukrv_wmServiceImpl.insertLogDetail" parameterType="Map">
		/* s_map200ukrv_wmServiceImpl.insertLogDetail */
		INSERT INTO L_MAP200T
		     ( KEY_VALUE            , OPR_FLAG
		     , COMP_CODE            , DIV_CODE              , BILL_DIV_CODE         , CUSTOM_CODE           , CHANGE_BASIS_NUM
		     , CHANGE_BASIS_SEQ     , INOUT_NUM             , INOUT_SEQ             , ORDER_NUM             , ORDER_SEQ
		     , ITEM_CODE            , ITEM_ACCOUNT          , INSTOCK_DATE          , BUY_Q                 , AMOUNT_P
		     , AMOUNT_I             , MONEY_UNIT            , FOREIGN_P             , FOR_AMOUNT_O          , EXCHG_RATE_O
		     , ORDER_TYPE           , ORDER_PRSN            , LC_NUM                , BL_NUM                , TAX_I
		     , ORDER_UNIT           , TRNS_RATE             , ORDER_UNIT_Q          , ORDER_UNIT_P          , ORDER_UNIT_FOR_P
		     , PROJECT_NO           , PJT_CODE              , REMARK                , ADVAN_YN
		     , INOUT_TYPE           , PURCHASE_TYPE         , UPDATE_DB_USER        , UPDATE_DB_TIME        , INSERT_DB_USER    , INSERT_DB_TIME
		     , GROUP_KEY
		     , CUSTOM_PRSN
		     , PHONE
		     , BANK_NAME
		     , BANK_ACCOUNT
		     , BIRTHDAY
		     , ZIP_CODE
		     , ADDR1
		) VALUES (
		       #{KEY_VALUE}         , #{OPR_FLAG}
		     , #{S_COMP_CODE}       , #{DIV_CODE}           , #{BILL_DIV_CODE}      , #{CUSTOM_CODE}        , #{CHANGE_BASIS_NUM}
		     , #{CHANGE_BASIS_SEQ}  , #{INOUT_NUM}          , #{INOUT_SEQ}          , #{ORDER_NUM}          , #{ORDER_SEQ}
		     , #{ITEM_CODE}         , #{ITEM_ACCOUNT}       , #{INSTOCK_DATE}       , #{BUY_Q}              , #{AMOUNT_P}
		     , #{AMOUNT_I}          , #{MONEY_UNIT}         , #{FOREIGN_P}          , #{FOR_AMOUNT_O}       , #{EXCHG_RATE_O}
		     , #{ORDER_TYPE}        , #{ORDER_PRSN}         , #{LC_NUM}             , #{BL_NUM}             , #{TAX_I}
		     , #{ORDER_UNIT}        , #{TRNS_RATE}          , #{ORDER_UNIT_Q}       , #{ORDER_UNIT_P}       , #{ORDER_UNIT_FOR_P}
		     , #{PROJECT_NO}        , #{PJT_CODE}           , #{REMARK}             , #{ADVAN_YN}
		     , #{INOUT_TYPE}        , #{PURCHASE_TYPE}      , #{S_USER_ID}          , GETDATE()             , #{S_USER_ID}      , GETDATE()
		     , #{GROUP_KEY}
		     , #{CUSTOM_PRSN}
		     , #{PHONE}
		     , #{BANK_NAME}
		     , uniLITE.fnCipherEncrypt(#{BANK_ACCOUNT}, '') --20210303 수정: 암호화 하여 저장
		     , #{BIRTHDAY}
		     , #{ZIP_CODE}
		     , #{ADDR1}
		)
	</insert>

	<update id="s_map200ukrv_wmServiceImpl.spBuy" parameterType="Map" statementType="CALLABLE">
		{call USP_MATRL_s_map200ukr_wm (
			#{KeyValue	, mode=IN	, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc	, mode=OUT	, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</update>
</mapper>