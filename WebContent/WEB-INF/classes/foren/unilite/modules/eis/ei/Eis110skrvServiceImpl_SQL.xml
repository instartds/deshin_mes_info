<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eis110skrvServiceImpl">
	<select id="eis110skrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* eis110skrvServiceImpl.selectList */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @DivCode     NVARCHAR(08)    /* 사업장코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @CustomCode  NVARCHAR(08)    /* 거래처코드 */
		          , @CustomName  NVARCHAR(100)   /* 거래처명 */
		          , @ItemCode    NVARCHAR(20)    /* 품목코드 */
		          , @ItemName    NVARCHAR(200)   /* 품목명 */
		          , @ProjectNo   NVARCHAR(20)    /* 프로젝트 */
		          , @ProjectNm   NVARCHAR(40)    /* 프로젝트명 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
		          , @RefItem     NVARCHAR(01)
		          , @CUSTOM_MIDDLE_DIV    NVARCHAR(10)
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @DivCode    = #{DIV_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
		    SET @CustomCode = #{CUSTOM_CODE}
		    SET @CustomName = #{CUSTOM_NAME}
		    SET @ItemCode   = ''
		    SET @ItemName   = ''
		    SET @ProjectNo  = ''
		    SET @ProjectNm  = ''
		    SET @UserId     = #{USER_ID}
		    SET @LangType   = #{S_LANG_CODE}
			SET @CUSTOM_MIDDLE_DIV  = #{CUSTOM_MIDDLE_DIV}
			SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 100000000)

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		     FROM BSA300T WITH (NOLOCK)
		    WHERE USER_ID = @UserId ;

		    SET @RefItem = ISNULL(@RefItem, N'0') ;

			WITH TEMP_TABLE AS ( SELECT 1 AS GUBUN
									   ,@CompCode 	 AS COMP_CODE
									   ,@DivCode	 AS DIV_CODE
									   ,'10'  AS CUSTOM_CODE
 									UNION ALL
								 SELECT GUBUN + 1
									  ,@CompCode    AS COMP_CODE
									  ,@DivCode	    AS DIV_CODE
									  ,'10'  AS CUSTOM_CODE
								 FROM TEMP_TABLE
								 WHERE GUBUN <![CDATA[<=]]> 5 )

			SELECT A.COMP_CODE
				  ,A.DIV_CODE
				  ,A.GUBUN  --'1'재작년, '2'작년', '3'목표, '4'당해, '5'달성, '6'증감
				  ,CASE WHEN A.GUBUN = '1' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))
						WHEN A.GUBUN = '2' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))
						WHEN A.GUBUN = '3' THEN '목표'
						WHEN A.GUBUN = '4' THEN @BasisYear
						WHEN A.GUBUN = '5' THEN '달성%'
						WHEN A.GUBUN = '6' THEN '증감'
						ELSE @BasisYear
				   END																		AS SALE_YEAR
				  ,A.CUSTOM_CODE
				 -- ,B.CUSTOM_NAME
				 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_01, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_01, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_1
			      ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_02, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_02, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_2
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_03, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_03, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_3
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_04, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_04, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_4

				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_05, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_05, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_5
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_06, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_06, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_6
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_07, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_07, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_7
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_08, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_08, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_8
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_09, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_09, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_9
				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_10, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_10, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_10
                 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_11, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_11, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_11
                   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_12, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE  (LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_12, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_12
                  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.TOT_AMT, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) - LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) / LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.TOT_AMT, 0) / @AMOUNT_UNIT
				   END							AS TOT_AMT
				 -- ,ISNULL(B.TOT_AMT,0)	    AS TOTAL_AMT


			FROM TEMP_TABLE A LEFT JOIN

			( SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '1' AS GUBUN --재작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))       AS SALE_YEAR  --재작년
						 , P3.REF_CODE1											    AS CUSTOM_CODE
						 --, P4.CODE_NAME												AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '10'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode

					 --  AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '0101' --재작년
					   AND A.SALE_DATE <![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '1231' --재작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
					   GROUP BY A.COMP_CODE, A.DIV_CODE
						   , P3.REF_CODE1
					    -- , P4.CODE_NAME

				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '2' AS GUBUN --작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						 --, P4.CODE_NAME										  AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '10'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '0101' --작년
					   AND A.SALE_DATE<![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '1231' --작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
						GROUP BY A.COMP_CODE
							   , A.DIV_CODE
							   , P3.REF_CODE1
							  -- , P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '3' AS GUBUN --목표
						 , @BasisYear AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						-- , P4.CODE_NAME										  AS CUSTOM_NAME
						-- , B.CUSTOM_CODE AS CUSTOM_CODE
						-- , uniLITE.fnCustNameComp(B.COMP_CODE, 'unilite5', B.CUSTOM_CODE) AS CUSTOM_NAME
						   ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1,0) END)   AS SALE_AMT_01
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2,0) END)   AS SALE_AMT_02
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3,0) END)   AS SALE_AMT_03
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4,0) END)   AS SALE_AMT_04
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5,0) END)   AS SALE_AMT_05
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6,0) END)   AS SALE_AMT_06
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7,0) END)   AS SALE_AMT_07
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8,0) END)   AS SALE_AMT_08
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9,0) END)   AS SALE_AMT_09
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT10 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10 ,0) ELSE ISNULL(A.PLAN_AMT10,0) END) AS SALE_AMT_10
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT11 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11 ,0) ELSE ISNULL(A.PLAN_AMT11,0) END) AS SALE_AMT_11
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT12 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12 ,0) ELSE ISNULL(A.PLAN_AMT12,0) END) AS SALE_AMT_12
						   ,SUM((CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)  <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT10,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10,0) ELSE ISNULL(A.PLAN_AMT10,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT11,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11,0) ELSE ISNULL(A.PLAN_AMT11,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT12,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12,0) ELSE ISNULL(A.PLAN_AMT12,0) END )) AS TOT_AMT
					  FROM S_SSP100T_KD A
								   LEFT  JOIN  BCM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
																	  AND A.PLAN_TYPE2_CODE2 = B.CUSTOM_CODE
																	  AND B.USE_YN = 'Y'
																	  AND B.CUSTOM_TYPE IN ('1','3')
									 INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '10'
														AND P3.SUB_CODE    = A.PLAN_TYPE2_CODE2
									INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE = @CompCode

					   AND A.PLAN_TYPE2 = '2'

					   AND B.AGENT_TYPE = '1'
					   AND A.DIV_CODE   = @divCode
					   AND A.PLAN_YEAR  = @BasisYear
					 --  AND A.PLAN_TYPE1 = '10'
					   AND A.MONEY_UNIT = 'KRW'
					 --  AND A.DEPT_CODE  = '1'

					 --  AND B.CUSTOM_CODE = @CustomCode
					GROUP BY  A.COMP_CODE
						    , A.DIV_CODE
							, P3.REF_CODE1
						--	, P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '4' AS GUBUN --당해
						 , @BasisYear AS SALE_YEAR
						 , @CUSTOM_MIDDLE_DIV												  AS CUSTOM_CODE
						-- , P3.REF_CODE1												  AS CUSTOM_NAME
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
				      INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '10'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
					  INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= @BasisYear + '0101'
					   AND A.SALE_DATE <![CDATA[<=]]> @BasisYear + '1231'
					   --AND A.SALE_CUSTOM_CODE = @CustomCode



					 GROUP BY A.COMP_CODE
					 		, A.DIV_CODE
							, P3.REF_CODE1
							--, P4.CODE_NAME

		 ) B ON A.GUBUN = B.GUBUN

		ORDER BY  A.GUBUN

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END

	</select>
	<select id="eis110skrvServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* eis110skrvServiceImpl.selectList2 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @DivCode     NVARCHAR(08)    /* 사업장코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @CustomCode  NVARCHAR(08)    /* 거래처코드 */
		          , @CustomName  NVARCHAR(100)   /* 거래처명 */
		          , @ItemCode    NVARCHAR(20)    /* 품목코드 */
		          , @ItemName    NVARCHAR(200)   /* 품목명 */
		          , @ProjectNo   NVARCHAR(20)    /* 프로젝트 */
		          , @ProjectNm   NVARCHAR(40)    /* 프로젝트명 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
		          , @RefItem     NVARCHAR(01)
		          , @CUSTOM_MIDDLE_DIV    NVARCHAR(10)
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @DivCode    = #{DIV_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
		    SET @CustomCode = #{CUSTOM_CODE}
		    SET @CustomName = #{CUSTOM_NAME}
		    SET @ItemCode   = ''
		    SET @ItemName   = ''
		    SET @ProjectNo  = ''
		    SET @ProjectNm  = ''
		    SET @UserId     = #{USER_ID}
		    SET @LangType   = #{S_LANG_CODE}
			SET @CUSTOM_MIDDLE_DIV  = #{CUSTOM_MIDDLE_DIV}
			SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 100000000)

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		     FROM BSA300T WITH (NOLOCK)
		    WHERE USER_ID = @UserId ;

		    SET @RefItem = ISNULL(@RefItem, N'0') ;

			WITH TEMP_TABLE AS ( SELECT 1 AS GUBUN
									   ,@CompCode 	 AS COMP_CODE
									   ,@DivCode	 AS DIV_CODE
									   ,'20'  AS CUSTOM_CODE
 									UNION ALL
								 SELECT GUBUN + 1
									  ,@CompCode    AS COMP_CODE
									  ,@DivCode	    AS DIV_CODE
									  ,'20'  AS CUSTOM_CODE
								 FROM TEMP_TABLE
								 WHERE GUBUN <![CDATA[<=]]> 5 )

			SELECT A.COMP_CODE
				  ,A.DIV_CODE
				  ,A.GUBUN  --'1'재작년, '2'작년', '3'목표, '4'당해, '5'달성, '6'증감
				  ,CASE WHEN A.GUBUN = '1' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))
						WHEN A.GUBUN = '2' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))
						WHEN A.GUBUN = '3' THEN '목표'
						WHEN A.GUBUN = '4' THEN @BasisYear
						WHEN A.GUBUN = '5' THEN '달성%'
						WHEN A.GUBUN = '6' THEN '증감'
						ELSE @BasisYear
				   END																		AS SALE_YEAR
				  ,A.CUSTOM_CODE
				  --,B.CUSTOM_NAME
				 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_01, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_01, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_1
			      ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_02, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_02, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_2
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_03, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_03, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_3
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_04, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_04, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_4

				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_05, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_05, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_5
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_06, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_06, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_6
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_07, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_07, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_7
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_08, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_08, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_8
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_09, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_09, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_9
				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_10, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_10, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_10
                 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_11, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_11, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_11
                   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_12, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE  (LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_12, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_12
                  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.TOT_AMT, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) - LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) / LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.TOT_AMT, 0) / @AMOUNT_UNIT
				   END							AS TOT_AMT
				 -- ,ISNULL(B.TOT_AMT,0)	    AS TOTAL_AMT


			FROM TEMP_TABLE A LEFT JOIN

			( SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '1' AS GUBUN --재작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))       AS SALE_YEAR  --재작년
						 , P3.REF_CODE1											    AS CUSTOM_CODE
						-- , P4.CODE_NAME												AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '20'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode

					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '0101' --재작년
					   AND A.SALE_DATE <![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '1231' --재작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
					   GROUP BY A.COMP_CODE, A.DIV_CODE
						 , P3.REF_CODE1
					     --, P4.CODE_NAME

				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '2' AS GUBUN --작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						 --, P4.CODE_NAME										  AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '20'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '0101' --작년
					   AND A.SALE_DATE<![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '1231' --작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
						GROUP BY A.COMP_CODE
							   , A.DIV_CODE
							  , P3.REF_CODE1
							   --, P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '3' AS GUBUN --목표
						 , @BasisYear AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						 --, P4.CODE_NAME										  AS CUSTOM_NAME
						-- , B.CUSTOM_CODE AS CUSTOM_CODE
						-- , uniLITE.fnCustNameComp(B.COMP_CODE, 'unilite5', B.CUSTOM_CODE) AS CUSTOM_NAME
						   ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1,0) END)   AS SALE_AMT_01
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2,0) END)   AS SALE_AMT_02
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3,0) END)   AS SALE_AMT_03
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4,0) END)   AS SALE_AMT_04
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5,0) END)   AS SALE_AMT_05
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6,0) END)   AS SALE_AMT_06
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7,0) END)   AS SALE_AMT_07
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8,0) END)   AS SALE_AMT_08
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9,0) END)   AS SALE_AMT_09
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT10 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10 ,0) ELSE ISNULL(A.PLAN_AMT10,0) END) AS SALE_AMT_10
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT11 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11 ,0) ELSE ISNULL(A.PLAN_AMT11,0) END) AS SALE_AMT_11
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT12 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12 ,0) ELSE ISNULL(A.PLAN_AMT12,0) END) AS SALE_AMT_12
						   ,SUM((CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)  <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT10,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10,0) ELSE ISNULL(A.PLAN_AMT10,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT11,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11,0) ELSE ISNULL(A.PLAN_AMT11,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT12,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12,0) ELSE ISNULL(A.PLAN_AMT12,0) END )) AS TOT_AMT
					  FROM S_SSP100T_KD A
								   LEFT  JOIN  BCM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
																	  AND A.PLAN_TYPE2_CODE2 = B.CUSTOM_CODE
																	  AND B.USE_YN = 'Y'
																	  AND B.CUSTOM_TYPE IN ('1','3')
									 INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '20'
														AND P3.SUB_CODE    = A.PLAN_TYPE2_CODE2
									INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE = @CompCode

					   AND A.PLAN_TYPE2 = '2'

					   AND B.AGENT_TYPE = '1'
					   AND A.DIV_CODE   = @divCode
					   AND A.PLAN_YEAR  = @BasisYear
					  -- AND A.PLAN_TYPE1 = '10'
					   AND A.MONEY_UNIT = 'KRW'
					   --AND A.DEPT_CODE  = '1'

					 --  AND B.CUSTOM_CODE = @CustomCode
					GROUP BY  A.COMP_CODE
						    , A.DIV_CODE
							, P3.REF_CODE1
							--, P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '4' AS GUBUN --당해
						 , @BasisYear AS SALE_YEAR
						 , @CUSTOM_MIDDLE_DIV												  AS CUSTOM_CODE
						 --, P3.REF_CODE1												  AS CUSTOM_NAME
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
				      INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '20'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
					  INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= @BasisYear + '0101'
					   AND A.SALE_DATE <![CDATA[<=]]> @BasisYear + '1231'
					   --AND A.SALE_CUSTOM_CODE = @CustomCode



					 GROUP BY A.COMP_CODE
					 		, A.DIV_CODE
							, P3.REF_CODE1
							--, P4.CODE_NAME

		 ) B ON A.GUBUN = B.GUBUN

		ORDER BY  A.GUBUN

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END

	</select>
	<select id="eis110skrvServiceImpl.selectList3" parameterType="Map" resultType="rMap">
		/* eis110skrvServiceImpl.selectList3 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @DivCode     NVARCHAR(08)    /* 사업장코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @CustomCode  NVARCHAR(08)    /* 거래처코드 */
		          , @CustomName  NVARCHAR(100)   /* 거래처명 */
		          , @ItemCode    NVARCHAR(20)    /* 품목코드 */
		          , @ItemName    NVARCHAR(200)   /* 품목명 */
		          , @ProjectNo   NVARCHAR(20)    /* 프로젝트 */
		          , @ProjectNm   NVARCHAR(40)    /* 프로젝트명 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
		          , @RefItem     NVARCHAR(01)
		          , @CUSTOM_MIDDLE_DIV    NVARCHAR(10)
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @DivCode    = #{DIV_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
		    SET @CustomCode = #{CUSTOM_CODE}
		    SET @CustomName = #{CUSTOM_NAME}
		    SET @ItemCode   = ''
		    SET @ItemName   = ''
		    SET @ProjectNo  = ''
		    SET @ProjectNm  = ''
		    SET @UserId     = #{USER_ID}
		    SET @LangType   = #{S_LANG_CODE}
			SET @CUSTOM_MIDDLE_DIV  = #{CUSTOM_MIDDLE_DIV}
			SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 100000000)

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		     FROM BSA300T WITH (NOLOCK)
		    WHERE USER_ID = @UserId ;

		    SET @RefItem = ISNULL(@RefItem, N'0') ;

			WITH TEMP_TABLE AS ( SELECT 1 AS GUBUN
									   ,@CompCode 	 AS COMP_CODE
									   ,@DivCode	 AS DIV_CODE
									   ,'90'  AS CUSTOM_CODE
 									UNION ALL
								 SELECT GUBUN + 1
									  ,@CompCode    AS COMP_CODE
									  ,@DivCode	    AS DIV_CODE
									  ,'90'  AS CUSTOM_CODE
								 FROM TEMP_TABLE
								 WHERE GUBUN <![CDATA[<=]]> 5 )

			SELECT A.COMP_CODE
				  ,A.DIV_CODE
				  ,A.GUBUN  --'1'재작년, '2'작년', '3'목표, '4'당해, '5'달성, '6'증감
				  ,CASE WHEN A.GUBUN = '1' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))
						WHEN A.GUBUN = '2' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))
						WHEN A.GUBUN = '3' THEN '목표'
						WHEN A.GUBUN = '4' THEN @BasisYear
						WHEN A.GUBUN = '5' THEN '달성%'
						WHEN A.GUBUN = '6' THEN '증감'
						ELSE @BasisYear
				   END																		AS SALE_YEAR
				  ,A.CUSTOM_CODE
				  --,B.CUSTOM_NAME
				 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_01, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_01, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_1
			      ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_02, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_02, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_2
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_03, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_03, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_3
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_04, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_04, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_4

				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_05, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_05, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_5
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_06, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_06, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_6
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_07, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_07, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_7
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_08, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_08, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_8
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_09, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_09, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_9
				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_10, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_10, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_10
                 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_11, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_11, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_11
                   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_12, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE  (LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_12, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_12
                  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.TOT_AMT, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) - LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) / LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.TOT_AMT, 0) / @AMOUNT_UNIT
				   END							AS TOT_AMT
				 -- ,ISNULL(B.TOT_AMT,0)	    AS TOTAL_AMT


			FROM TEMP_TABLE A LEFT JOIN

			( SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '1' AS GUBUN --재작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))       AS SALE_YEAR  --재작년
						 , P3.REF_CODE1											    AS CUSTOM_CODE
						-- , P4.CODE_NAME												AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '90'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode

					  -- AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '0101' --재작년
					   AND A.SALE_DATE <![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '1231' --재작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
					   GROUP BY A.COMP_CODE, A.DIV_CODE
						 , P3.REF_CODE1
					    -- , P4.CODE_NAME

				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '2' AS GUBUN --작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						-- , P4.CODE_NAME										  AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '90'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					  --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '0101' --작년
					   AND A.SALE_DATE<![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '1231' --작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
						GROUP BY A.COMP_CODE
							   , A.DIV_CODE
							   , P3.REF_CODE1
							   --, P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '3' AS GUBUN --목표
						 , @BasisYear AS SALE_YEAR
						 , P3.REF_CODE1										  AS CUSTOM_CODE
						-- , P4.CODE_NAME										  AS CUSTOM_NAME
						-- , B.CUSTOM_CODE AS CUSTOM_CODE
						-- , uniLITE.fnCustNameComp(B.COMP_CODE, 'unilite5', B.CUSTOM_CODE) AS CUSTOM_NAME
						   ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1,0) END)   AS SALE_AMT_01
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2,0) END)   AS SALE_AMT_02
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3,0) END)   AS SALE_AMT_03
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4,0) END)   AS SALE_AMT_04
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5,0) END)   AS SALE_AMT_05
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6,0) END)   AS SALE_AMT_06
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7,0) END)   AS SALE_AMT_07
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8,0) END)   AS SALE_AMT_08
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9,0) END)   AS SALE_AMT_09
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT10 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10 ,0) ELSE ISNULL(A.PLAN_AMT10,0) END) AS SALE_AMT_10
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT11 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11 ,0) ELSE ISNULL(A.PLAN_AMT11,0) END) AS SALE_AMT_11
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT12 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12 ,0) ELSE ISNULL(A.PLAN_AMT12,0) END) AS SALE_AMT_12
						   ,SUM((CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)  <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT10,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10,0) ELSE ISNULL(A.PLAN_AMT10,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT11,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11,0) ELSE ISNULL(A.PLAN_AMT11,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT12,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12,0) ELSE ISNULL(A.PLAN_AMT12,0) END )) AS TOT_AMT
					  FROM S_SSP100T_KD A
								   LEFT  JOIN  BCM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
																	  AND A.PLAN_TYPE2_CODE2 = B.CUSTOM_CODE
																	  AND B.USE_YN = 'Y'
																	  AND B.CUSTOM_TYPE IN ('1','3')
									 INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '90'
														AND P3.SUB_CODE    = A.PLAN_TYPE2_CODE2
									INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE = @CompCode

					   AND A.PLAN_TYPE2 = '2'

					   AND B.AGENT_TYPE = '1'
					   AND A.DIV_CODE   = @divCode
					   AND A.PLAN_YEAR  = @BasisYear
					 --  AND A.PLAN_TYPE1 = '10'
					   AND A.MONEY_UNIT = 'KRW'
					  -- AND A.DEPT_CODE  = '1'

					 --  AND B.CUSTOM_CODE = @CustomCode
					GROUP BY  A.COMP_CODE
						    , A.DIV_CODE
							, P3.REF_CODE1
							--, P4.CODE_NAME
				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '4' AS GUBUN --당해
						 , @BasisYear AS SALE_YEAR
						 , @CUSTOM_MIDDLE_DIV												  AS CUSTOM_CODE
						 --, P3.REF_CODE1												  AS CUSTOM_NAME
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
				      INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.REF_CODE1   = '90'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
					  INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= @BasisYear + '0101'
					   AND A.SALE_DATE <![CDATA[<=]]> @BasisYear + '1231'
					   --AND A.SALE_CUSTOM_CODE = @CustomCode



					 GROUP BY A.COMP_CODE
					 		, A.DIV_CODE
							, P3.REF_CODE1
							--, P4.CODE_NAME

		 ) B ON A.GUBUN = B.GUBUN

		ORDER BY  A.GUBUN

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END

	</select>
	<select id="eis110skrvServiceImpl.selectList4" parameterType="Map" resultType="rMap">
		/* eis110skrvServiceImpl.selectList4 */
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON

		    DECLARE @CompCode    NVARCHAR(08)    /* 법인코드  */
		          , @DivCode     NVARCHAR(08)    /* 사업장코드  */
		          , @BasisYear   NVARCHAR(100)   /* 기준년도 */
		          , @CustomCode  NVARCHAR(08)    /* 거래처코드 */
		          , @CustomName  NVARCHAR(100)   /* 거래처명 */
		          , @ItemCode    NVARCHAR(20)    /* 품목코드 */
		          , @ItemName    NVARCHAR(200)   /* 품목명 */
		          , @ProjectNo   NVARCHAR(20)    /* 프로젝트 */
		          , @ProjectNm   NVARCHAR(40)    /* 프로젝트명 */
		          , @UserId      NVARCHAR(100)   /* 사용자ID */
		          , @LangType    NVARCHAR(2)     /* 언어구분 */
		          , @RefItem     NVARCHAR(01)
		          , @CUSTOM_MIDDLE_DIV    NVARCHAR(10)
				  , @AMOUNT_UNIT	INT
		    SET @CompCode   = #{S_COMP_CODE}
		    SET @DivCode    = #{DIV_CODE}
		    SET @BasisYear  = #{BASIS_YEAR}
		    SET @CustomCode = #{CUSTOM_CODE}
		    SET @CustomName = #{CUSTOM_NAME}
		    SET @ItemCode   = ''
		    SET @ItemName   = ''
		    SET @ProjectNo  = ''
		    SET @ProjectNm  = ''
		    SET @UserId     = #{USER_ID}
		    SET @LangType   = #{S_LANG_CODE}
			SET @CUSTOM_MIDDLE_DIV  = #{CUSTOM_MIDDLE_DIV}
			SET @AMOUNT_UNIT	= ISNULL(@AMOUNT_UNIT, 100000000)

		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		     FROM BSA300T WITH (NOLOCK)
		    WHERE USER_ID = @UserId ;

		    SET @RefItem = ISNULL(@RefItem, N'0') ;

			WITH TEMP_TABLE AS ( SELECT 1 AS GUBUN
									   ,@CompCode 	 AS COMP_CODE
									   ,@DivCode	 AS DIV_CODE
									   ,'ALL'  AS CUSTOM_CODE
 									UNION ALL
								 SELECT GUBUN + 1
									  ,@CompCode    AS COMP_CODE
									  ,@DivCode	    AS DIV_CODE
									  ,'ALL'  AS CUSTOM_CODE
								 FROM TEMP_TABLE
								 WHERE GUBUN <![CDATA[<=]]> 5 )

			SELECT A.COMP_CODE
				  ,A.DIV_CODE
				  ,A.GUBUN  --'1'재작년, '2'작년', '3'목표, '4'당해, '5'달성, '6'증감
				  ,CASE WHEN A.GUBUN = '1' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))
						WHEN A.GUBUN = '2' THEN CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1))
						WHEN A.GUBUN = '3' THEN '목표'
						WHEN A.GUBUN = '4' THEN @BasisYear
						WHEN A.GUBUN = '5' THEN '달성%'
						WHEN A.GUBUN = '6' THEN '증감'
						ELSE @BasisYear
				   END																		AS SALE_YEAR
				  ,A.CUSTOM_CODE
				  --,B.CUSTOM_NAME
				 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_01, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_01, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_01, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_01, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_1
			      ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_02, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_02, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_02, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_02, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_2
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_03, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_03, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_03, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_03, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_3
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_04, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_04, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_04, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_04, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_4

				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_05, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_05, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_05, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_05, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_5
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_06, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_06, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_06, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_06, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_6
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_07, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_07, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_07, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_07, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_7
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_08, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_08, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_08, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_08, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_8
				  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_09, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_09, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_09, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_09, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_9
				   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_10, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE 	(LAG(ISNULL(B.SALE_AMT_10, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN) - LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)) /
														     LAG(ISNULL(B.SALE_AMT_10, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_10, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_10
                 ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_11, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.SALE_AMT_11, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_11, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_11, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_11
                   ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.SALE_AMT_12, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE  (LAG(ISNULL(B.SALE_AMT_12, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY B.GUBUN)  - LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) /  LAG(ISNULL(B.SALE_AMT_12, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.SALE_AMT_12, 0) / @AMOUNT_UNIT
				   END							AS SALE_AMT_12
                  ,CASE WHEN A.GUBUN = '5' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE LAG(ISNULL(B.TOT_AMT, 0), 1, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) / LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
												END   --달성인 경우 당년실적 / 목표액 * 100

					    WHEN A.GUBUN = '6' THEN CASE WHEN LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) = 0  THEN 0
													 ELSE (LAG(ISNULL(B.TOT_AMT, 0), 2, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) - LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN)) / LAG(ISNULL(B.TOT_AMT, 0), 4, NULL) OVER (PARTITION BY A.CUSTOM_CODE ORDER BY A.GUBUN) * 100
											    END --증감인 경우 (당해실적 - 작년실적) / 작년실적 * 100

						ELSE ISNULL(B.TOT_AMT, 0) / @AMOUNT_UNIT
				   END							AS TOT_AMT
				 -- ,ISNULL(B.TOT_AMT,0)	    AS TOTAL_AMT


			FROM TEMP_TABLE A LEFT JOIN

			( SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '1' AS GUBUN --재작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2))       AS SALE_YEAR  --재작년
						 , 'ALL'											    AS CUSTOM_CODE
						-- , 'ALL'												AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode

					  -- AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '0101' --재작년
					   AND A.SALE_DATE <![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 2)) + '1231' --재작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
					   GROUP BY A.COMP_CODE, A.DIV_CODE


				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '2' AS GUBUN --작년
						 , CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) AS SALE_YEAR
						 , 'ALL'										  AS CUSTOM_CODE
						-- , 'ALL'										  AS CUSTOM_NAME


						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
						INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					  -- AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '0101' --작년
					   AND A.SALE_DATE<![CDATA[<=]]> CONVERT(NVARCHAR(4),(CONVERT(INT,@BasisYear) - 1)) + '1231' --작년
					  -- AND A.SALE_CUSTOM_CODE = @CustomCode
						GROUP BY A.COMP_CODE
							   , A.DIV_CODE

				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '3' AS GUBUN --목표
						 , @BasisYear AS SALE_YEAR
						 , 'ALL'									  AS CUSTOM_CODE
						-- , 'ALL'									  AS CUSTOM_NAME
						-- , B.CUSTOM_CODE AS CUSTOM_CODE
						-- , uniLITE.fnCustNameComp(B.COMP_CODE, 'unilite5', B.CUSTOM_CODE) AS CUSTOM_NAME
						   ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1,0) END)   AS SALE_AMT_01
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2,0) END)   AS SALE_AMT_02
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3,0) END)   AS SALE_AMT_03
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4,0) END)   AS SALE_AMT_04
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5,0) END)   AS SALE_AMT_05
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6,0) END)   AS SALE_AMT_06
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>     0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7,0) END)   AS SALE_AMT_07
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8,0) END)   AS SALE_AMT_08
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>    0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9,0) END)   AS SALE_AMT_09
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT10 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10 ,0) ELSE ISNULL(A.PLAN_AMT10,0) END) AS SALE_AMT_10
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT11 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11 ,0) ELSE ISNULL(A.PLAN_AMT11,0) END) AS SALE_AMT_11
						  ,SUM(CASE WHEN ISNULL(A.MOD_PLAN_AMT12 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12 ,0) ELSE ISNULL(A.PLAN_AMT12,0) END) AS SALE_AMT_12
						   ,SUM((CASE WHEN ISNULL(A.MOD_PLAN_AMT1 ,0)  <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT1 ,0) ELSE ISNULL(A.PLAN_AMT1 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT2 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT2 ,0) ELSE ISNULL(A.PLAN_AMT2 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT3 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT3 ,0) ELSE ISNULL(A.PLAN_AMT3 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT4 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT4 ,0) ELSE ISNULL(A.PLAN_AMT4 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT5 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT5 ,0) ELSE ISNULL(A.PLAN_AMT5 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT6 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT6 ,0) ELSE ISNULL(A.PLAN_AMT6 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT7 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT7 ,0) ELSE ISNULL(A.PLAN_AMT7 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT8 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT8 ,0) ELSE ISNULL(A.PLAN_AMT8 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT9 ,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT9 ,0) ELSE ISNULL(A.PLAN_AMT9 ,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT10,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT10,0) ELSE ISNULL(A.PLAN_AMT10,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT11,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT11,0) ELSE ISNULL(A.PLAN_AMT11,0) END +
      						  CASE WHEN ISNULL(A.MOD_PLAN_AMT12,0)   <![CDATA[<>]]>   0 THEN ISNULL(A.MOD_PLAN_AMT12,0) ELSE ISNULL(A.PLAN_AMT12,0) END )) AS TOT_AMT
					  FROM S_SSP100T_KD A
								   LEFT  JOIN  BCM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
																	  AND A.PLAN_TYPE2_CODE2 = B.CUSTOM_CODE
																	  AND B.USE_YN = 'Y'
																	  AND B.CUSTOM_TYPE IN ('1','3')
									 INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.SUB_CODE    = A.PLAN_TYPE2_CODE2
									INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE = @CompCode

					   AND A.PLAN_TYPE2 = '2'

					   AND B.AGENT_TYPE = '1'
					   AND A.DIV_CODE   = @divCode
					   AND A.PLAN_YEAR  = @BasisYear
					 --  AND A.PLAN_TYPE1 = '10'
					   AND A.MONEY_UNIT = 'KRW'
					 --  AND A.DEPT_CODE  = '1'

					 --  AND B.CUSTOM_CODE = @CustomCode
					GROUP BY  A.COMP_CODE
						    , A.DIV_CODE

				UNION ALL

					SELECT A.COMP_CODE
						 , A.DIV_CODE
						 , '4' AS GUBUN --당해
						 , @BasisYear AS SALE_YEAR
						 , 'ALL'											  AS CUSTOM_CODE
						-- , 'ALL'											  AS CUSTOM_NAME
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '01' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_01
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '02' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_02
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '03' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_03
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '04' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_04
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '05' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_05
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '06' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_06
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '07' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_07
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '08' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_08
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '09' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_09
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '10' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_10
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '11' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_11
						 , SUM(CASE WHEN SUBSTRING(A.SALE_DATE, 5, 2) = '12' THEN ISNULL(A.SALE_LOC_AMT_I, 0) ELSE 0 END)                          AS SALE_AMT_12
						 , SUM(ISNULL(A.SALE_LOC_AMT_I, 0))                                                                                        AS TOT_AMT



					  FROM       SALES_V A  WITH(NOLOCK)

					  INNER JOIN BCM100T C1 WITH(NOLOCK) ON C1.COMP_CODE   = A.COMP_CODE
														AND C1.CUSTOM_CODE = A.SALE_CUSTOM_CODE
					  LEFT  JOIN BCM600T C2 WITH(NOLOCK) ON C2.COMP_CODE   = A.COMP_CODE
														AND C2.PJT_CODE    = A.PROJECT_NO
					  INNER JOIN BPR100T P1 WITH(NOLOCK) ON P1.COMP_CODE   = A.COMP_CODE
														AND P1.ITEM_CODE   = A.ITEM_CODE
					  INNER JOIN BPR200T P2 WITH(NOLOCK) ON P2.COMP_CODE   = A.COMP_CODE
														AND P2.DIV_CODE    = A.DIV_CODE
														AND P2.ITEM_CODE   = A.ITEM_CODE
				      INNER JOIN BSA100T P3 WITH(NOLOCK) ON  P3.COMP_CODE    = A.COMP_CODE
													    AND P3.MAIN_CODE   = 'S159'
														AND P3.SUB_CODE   != '$'
														AND P3.SUB_CODE    = A.SALE_CUSTOM_CODE
					  INNER JOIN BSA100T P4 WITH (NOLOCK) ON P4.COMP_CODE = A.COMP_CODE
																	    AND P4.MAIN_CODE = 'S157'
																		AND P4.SUB_CODE != '$'
																		AND P4.SUB_CODE  = P3.REF_CODE1
					 WHERE A.COMP_CODE   = @CompCode
					   AND A.DIV_CODE    = @DivCode


					   --AND A.NATION_CODE = '1'

					   AND A.SALE_DATE >= @BasisYear + '0101'
					   AND A.SALE_DATE <![CDATA[<=]]> @BasisYear + '1231'
					   --AND A.SALE_CUSTOM_CODE = @CustomCode



					 GROUP BY A.COMP_CODE
					 		, A.DIV_CODE

		 ) B ON A.GUBUN = B.GUBUN

		ORDER BY  A.GUBUN

		    SET NOCOUNT OFF
		    SET ARITHABORT OFF
		END

	</select>
</mapper>