<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hbo300ukrServiceImpl">
	<parameterMap id="paramMap" type="hashmap">
		<parameter property="result" mode="OUT" jdbcType="VARCHAR" javaType="string"/>
	</parameterMap>
		
	<select id="hbo300ukrServiceImpl.selectList" parameterType="rMap" resultType="rMap">		
		SELECT HP60.DIV_CODE
		     , HP60.SUPP_TYPE
		     --, HP60.PAY_YYYYMM
		     , uniLITE.fnGetUserDateComp(HP60.COMP_CODE, HP60.PAY_YYYYMM) AS PAY_YYYYMM
		     , HP60.DEPT_NAME
		     , (SELECT CODE_NAME
		          FROM BSA100T
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H005'
		           AND SUB_CODE = HP60.POST_CODE) POST_NAME
		     , HUM10.NAME
		     , HP60.PERSON_NUMB
		     , uniLITE.fnGetUserDateComp(HUM10.COMP_CODE, HUM10.JOIN_DATE) JOIN_DATE
		     , CASE WHEN RETR_DATE = '00000000' THEN ''
		            ELSE uniLITE.fnGetUserDateComp(HUM10.COMP_CODE, HUM10.RETR_DATE) 
		            END RETR_DATE
		     , (SELECT CODE_NAME
		          FROM BSA100T 
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H028' 
		           AND SUB_CODE = HP60.PAY_CODE) PAY_CODE
		     , (SELECT CODE_NAME 
		          FROM BSA100T 
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H037' 
		           AND SUB_CODE = HP60.BONUS_KIND) BONUS_KIND
		     , HP60.LONG_MONTH
		     , HP60.BONUS_RATE
		     , HP60.SUPP_RATE
		     , HP60.BONUS_STD_I
		     , HP60.BONUS_I
		     , HP60.BONUS_TOTAL_I
		     , HP60.BONUS_TAX_I
		     , HP60.SUPP_TOTAL_I
		     , HUM10.COMP_TAX_I
		     , (SELECT CODE_NAME 
		          FROM BSA100T 
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'H029' 
		           AND SUB_CODE = HP60.TAX_CODE) TAX_CODE
		     , (SELECT CUSTOM_NAME 
		          FROM BCM100T 
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND CUSTOM_TYPE = '4' 
		           AND CUSTOM_CODE = HUM10.BANK_CODE1) BANK_CODE
		     , uniLITE.fnCipherDecrypt(HUM10.BANK_ACCOUNT1,'B') AS BANK_ACCOUNT1
		     , HP60.SPOUSE
		     , HUM10.SUPP_AGED_NUM
		     , HP60.PAY_GUBUN
		     , HP60.PAY_GUBUN2
		     , HP60.CHILD_20_NUM 
		  FROM HUM100T HUM10(NOLOCK) INNER JOIN HPA600T HP60(NOLOCK)
		                        ON HUM10.COMP_CODE = HP60.COMP_CODE
		                       AND HUM10.PERSON_NUMB = HP60.PERSON_NUMB
		 WHERE HP60.COMP_CODE = #{S_COMP_CODE}
		   AND uniLITE.fnCheckCompDivAuth(HP60.COMP_CODE, HP60.DIV_CODE, #{S_USER_ID}) = 'Y'
		   AND HP60.PAY_YYYYMM = #{PAY_YYYYMM}
		   AND HP60.SUPP_TYPE = #{SUPP_TYPE}
		   <!--AND HP60.DIV_CODE = #{DIV_CODE} -->
		   		   
		   <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
		   AND HP60.PAY_CODE = #{PAY_ CODE}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
		   AND HP60.PAY_PROV_FLAG = #{PAY_PROV_FLAG}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(NAME)">
		   AND HUM10.NAME = #{NAME}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		   AND HP60.PERSON_NUMB = #{PERSON_NUMB}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		   AND HP60.DIV_CODE = #{DIV_CODE}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(DEPT)">
		   AND HP60.DEPT_CODE = #{DEPT}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
		   AND HUM10.PAY_GUBUN = #{PAY_GUBUN}
		   </if>
		   <if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND HP60.POST_CODE = #{POST_CODE}
		   </if>
		   
		ORDER BY HP60.DIV_CODE, HP60.DEPT_CODE, HP60.POST_CODE, HUM10.NAME
	</select>
	
	<select id="hbo300ukrServiceImpl.proc" parameterType="rMap" resultType="rMap">		
		DECLARE	@ERROR_DESC NVARCHAR(2000)
		
		EXEC USP_HUMAN_HBO300TUKR_fnCreateBonus #{S_COMP_CODE}	, #{DIV_CODE}	, #{DEPT}		, '' 			, #{PAY_YYYYMM}
		                                      , #{SUPP_TYPE}	, #{BASE_DATE}	, #{FIX_AMT}	, #{FIX_RATE}	, #{PAY_CODE}  
		                                      , #{PAY_DAY_FLAG}	, #{PAY_GUBUN}	, #{POST_CODE}	, ''			, #{S_USER_ID}
		                                      , 'KR'			, @ERROR_DESC OUTPUT		
		
		SELECT	@ERROR_DESC AS ERROR_CODE
	</select>
	
	<!--삭제 -->
	<delete id="hbo300ukrServiceImpl.delete" parameterType="rMap">
		DELETE FROM Hpa600t 
		 WHERE SUPP_TYPE   = #{SUPP_TYPE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND COMP_CODE   = #{S_COMP_CODE}
	</delete>
	
	<!-- 추가 -->
	<insert id="hbo300ukrServiceImpl.insert" parameterType="rMap">
		DELETE FROM Hpa600t 
		 WHERE SUPP_TYPE   = #{SUPP_TYPE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND COMP_CODE   = #{S_COMP_CODE}
		
		DELETE FROM Hpa300t 
		 WHERE SUPP_TYPE   = #{SUPP_TYPE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND COMP_CODE   = #{S_COMP_CODE}
		   
		DELETE FROM Hpa400t 
		 WHERE SUPP_TYPE   = #{SUPP_TYPE}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND COMP_CODE   = #{S_COMP_CODE}
		   
		
		INSERT INTO HPA600T
		       (PAY_YYYYMM, SUPP_TYPE, PERSON_NUMB, DEPT_CODE, DEPT_NAME
		      , ABIL_CODE, POST_CODE, PAY_CODE, TAX_CODE, EXCEPT_TYPE
		      , EMPLOY_TYPE, SUPP_DATE, PAY_PROV_FLAG, OT_KIND, SPOUSE
		      , WOMAN, SUPP_NUM, DEFORM_NUM, AGED_NUM, BONUS_KIND, LONG_MONTH
		      , BONUS_STD_I, BONUS_RATE, PLUS_RATE, MINUS_RATE, SUPP_RATE, BONUS_I
		      , BONUS_TOTAL_I, BONUS_TAX_I, SUPP_TOTAL_I, RETR_FLAG 
		      , UPDATE_DB_USER, UPDATE_DB_TIME, DIV_CODE, MAKE_SALE, COST_KIND 
		      , SECT_CODE, PAY_GUBUN, PAY_GUBUN2, CHILD_20_NUM, COMP_CODE) 
		SELECT #{PAY_YYYYMM}
		     , #{SUPP_TYPE}
		     , PERSON_NUMB
		     , DEPT_CODE
		     , DEPT_NAME
		     , ABIL_CODE
		     , POST_CODE
		     , PAY_CODE
		     , TAX_CODE
		     , CASE WHEN JOIN_DATE &gt; STRT_DT AND RETR_DATE = '00000000' THEN '1'  
		            WHEN RETR_DATE != '00000000' AND RETR_DATE &lt;= END_DT  AND JOIN_DATE   &gt;  STRT_DT THEN '3' 
		            WHEN RETR_DATE != '00000000' AND RETR_DATE &lt;  END_DT  AND JOIN_DATE   &gt;= STRT_DT THEN '3' 
		            WHEN RETR_DATE != '00000000' AND RETR_DATE &lt; END_DT   AND JOIN_DATE   &lt;= STRT_DT THEN '2' 
		            ELSE '0' END EXCEPT_TYPE
		     , EMPLOY_TYPE
		     , '00000000' AS SUPP_DATE
		     , PAY_PROV_FLAG
		     , OT_KIND
		     , SPOUSE
		     , WOMAN
		     , SUPP_AGED_NUM
		     , DEFORM_NUM
		     , AGED_NUM
		     , BONUS_KIND
		     , 0 AS LONG_MONTH
		     , ${BONUS_STD_I} AS BONUS_STD_I
		     , ${SUPP_RATE} AS BONUS_RATE
		     , 0 AS PLUS_RATE
		     , 0 AS  MINUS_RATE
		     , ${SUPP_RATE} AS SUPP_RATE
		     , ${SUPP_TOTAL_I} AS BONUS_I
		     , ${SUPP_TOTAL_I} AS BONUS_TOTAL_I
		     , ${SUPP_TOTAL_I} AS BONUS_TAX_I
		     , ${SUPP_TOTAL_I} AS SUPP_TOTAL_I
		     , 'N' RETR_FLAG
		     , #{S_USER_ID} AS UPDATEUSER
		     , GETDATE() AS DBTIME
		     , DIV_CODE
		     , MAKE_SALE
		     , COST_KIND
		     , SECT_CODE
		     , A.PAY_GUBUN
		     , A.PAY_GUBUN2
		     , CHILD_20_NUM 
		     , #{S_COMP_CODE}
		  FROM HUM100T A, 
		       (SELECT CONVERT(VARCHAR(8), CONVERT(DATETIME, #{PAY_YYYYMM} + '01'),112) STRT_DT
		             , CONVERT(VARCHAR(8), DATEADD(DAY, -1, DATEADD(MONTH,1, CONVERT(DATETIME, #{PAY_YYYYMM} + '01'))),112)  END_DT) B 
		 WHERE A.COMP_CODE   = #{S_COMP_CODE}
		   AND A.PERSON_NUMB =  #{PERSON_NUMB}
 	<selectKey keyProperty="idx" resultType="double" order="AFTER">
        SELECT 1 AS idx
    </selectKey>
	</insert>
	
	<!-- 수정 -->
	<update id="hbo300ukrServiceImpl.update" parameterType="rMap">
		UPDATE Hpa600t
		   SET DIV_CODE       = #{DIV_CODE}
		     , BONUS_RATE     = ${SUPP_RATE}
		     , SUPP_RATE      = ${SUPP_RATE}
		     , BONUS_STD_I    = ${BONUS_STD_I}
		     , BONUS_I        = ${SUPP_TOTAL_I}
		     , BONUS_TOTAL_I  = ${SUPP_TOTAL_I}
		     , BONUS_TAX_I    = ${SUPP_TOTAL_I}
		     , SUPP_TOTAL_I   = ${SUPP_TOTAL_I}
		     , PAY_GUBUN      = #{PAY_GUBUN}
		     , PAY_GUBUN2     = #{PAY_GUBUN2}
		     , CHILD_20_NUM   = ${CHILD_20_NUM}
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		     
		 WHERE SUPP_TYPE      = #{SUPP_TYPE}
		   AND PAY_YYYYMM     = #{PAY_YYYYMM}
		   AND PERSON_NUMB    = #{PERSON_NUMB}
		   AND COMP_CODE      = #{S_COMP_CODE}
	</update>

	<select id="hbo300ukrServiceImpl.checkData" parameterType="rMap" resultType="rMap">		
		--hbo300ukrServiceImpl - checkData
		SELECT *					
		  FROM HPA600T V INNER JOIN HUM100T A 
		                    ON V.COMP_CODE = A.COMP_CODE
		                   AND V.PERSON_NUMB = A.PERSON_NUMB
		 WHERE V.COMP_CODE  = #{S_COMP_CODE}
		   AND uniLITE.fnCheckCompDivAuth(V.COMP_CODE, V.DIV_CODE, #{S_USER_ID}) = 'Y'
		   AND V.PAY_YYYYMM = #{PAY_YYYYMM}
		   AND V.SUPP_TYPE  = #{SUPP_TYPE}
		   AND (V.EX_DATE  != ''   OR   V.EX_DATE IS NOT NULL)
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		   AND A.DIV_CODE         = #{DIV_CODE} 
		</if>
        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
		   AND V.DEPT_CODE IN
			 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
	          		 #{item}
	    	 </foreach>
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
		   AND V.PAY_CODE         = #{PAY_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
		   AND V.PAY_PROV_FLAG    = #{PAY_PROV_FLAG}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
		   AND A.PAY_GUBUN        = #{PAY_GUBUN}
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE        = #{POST_CODE}
		</if>
	</select>

	<select id="hbo300ukrServiceImpl.checkData2" parameterType="rMap" resultType="int">	
		--hbo300ukrServiceImpl - checkData2
		SELECT ISNULL(COUNT(*), 0)					
		  FROM HPA600T V INNER JOIN HUM100T A 
		                    ON V.COMP_CODE = A.COMP_CODE
		                   AND V.PERSON_NUMB = A.PERSON_NUMB
		 WHERE V.COMP_CODE  = #{S_COMP_CODE}
		   AND uniLITE.fnCheckCompDivAuth(V.COMP_CODE, V.DIV_CODE, #{S_USER_ID}) = 'Y'
		   AND V.PAY_YYYYMM = #{PAY_YYYYMM}
		   AND V.SUPP_TYPE  = #{SUPP_TYPE}
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		   AND A.DIV_CODE         = #{DIV_CODE} 
		</if>
        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
		   AND V.DEPT_CODE IN
			 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
	          		 #{item}
	    	 </foreach>
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
		   AND V.PAY_CODE         = #{PAY_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
		   AND V.PAY_PROV_FLAG    = #{PAY_PROV_FLAG}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
		   AND A.PAY_GUBUN        = #{PAY_GUBUN}
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND A.POST_CODE        = #{POST_CODE}
		</if>
	</select>
	
 	<select id="hbo300ukrServiceImpl.selectExcelUploadSheet" parameterType="Map" resultType="rMap">
        /* hpb110ukrService.selectExcelUploadSheet */
		SELECT 
		       A._EXCEL_JOBID
		     , A._EXCEL_ROWNUM
		     
 			 , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB
			        THEN CASE WHEN A.NAME != B.NAME
					          THEN 'Y'
							  ELSE A._EXCEL_HAS_ERROR
						  END 
					WHEN ISNULL(B.PERSON_NUMB, '') = ''
					THEN 'Y'
					ELSE A._EXCEL_HAS_ERROR
				END AS _EXCEL_HAS_ERROR

 			 , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB
			        THEN CASE WHEN A.NAME != B.NAME
					          THEN '해당 사번와 이름을 확인하십시오.'
							  ELSE A._EXCEL_ERROR_MSG
						  END
					WHEN ISNULL(B.PERSON_NUMB, '') = ''
					THEN '등록된 사번이 없습니다.'
					ELSE A._EXCEL_ERROR_MSG
				END AS _EXCEL_ERROR_MSG		     

		     
		     , B.DIV_CODE					--사업장
		     , uniLITE.fnGetUserDateComp(A.COMP_CODE, A.PAY_YYYYMM) AS PAY_YYYYMM
	     	 , D.SUB_CODE  AS SUPP_TYPE		--상여구분
			 , B.DEPT_NAME					--부서
			 , C.CODE_NAME AS POST_NAME		--직위
			 , B.NAME						--성명
			 , A.PERSON_NUMB				--사번
			 , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.JOIN_DATE) AS JOIN_DATE	--입사일
			 , CASE WHEN RETR_DATE = '00000000' THEN ''
				    ELSE uniLITE.fnGetUserDateComp(B.COMP_CODE, B.RETR_DATE) 
				END AS RETR_DATE			--퇴사일
			--, A.SUPP_TYPE		AS SUPP_TYPE	--상여구분
			 , 0				AS LONG_MONTH	--근속개월	
			 , 0.00				AS BONUS_RATE	--지급율
			 , 0				AS BONUS_STD_I	--상여기준금
			 , A.SUPP_TOTAL_I	AS SUPP_TOTAL_I	--지급액
		 FROM    L_HBO300T A WITH (NOLOCK) 
		LEFT JOIN HUM100T B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
	                                     AND B.PERSON_NUMB = A.PERSON_NUMB
		 LEFT JOIN BSA100T C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
	                                      AND C.MAIN_CODE   = 'H005'
										  AND C.SUB_CODE    = B.POST_CODE
		 LEFT JOIN BSA100T D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
	                                      AND D.MAIN_CODE   = 'H032'
	                                      AND D.SUB_CODE   != '$'
										  AND D.REF_CODE1  != '1'
										  AND D.CODE_NAME   = A.SUPP_TYPE
										  
		                                   
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
    </select>
    
    
        <!-- Excel Upload-->
    <update id="hbo300ukrServiceImpl.insertExcelUpload" parameterType="Map">
        /* hpb110ukrServiceImpl.insertExcelUpload*/
        /* temp Table에 insert */    
        INSERT INTO L_HBO300T
            (
               _EXCEL_JOBID 
             , _EXCEL_ROWNUM 
             , _EXCEL_HAS_ERROR 
             , _EXCEL_ERROR_MSG
             
             , COMP_CODE
             , PAY_YYYYMM
             , SUPP_DATE
             , PERSON_NUMB
             , NAME
           
             , SUPP_TYPE
             , SUPP_TOTAL_I
            
             , INSERT_DB_USER
             , INSERT_DB_TIME
        )
        VALUES (
               #{_EXCEL_JOBID} 
             , #{_EXCEL_ROWNUM} 
             , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR} 
             , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
                  
             , #{S_COMP_CODE}
             , #{PAY_YYYYMM}
             , #{SUPP_DATE}
             , #{PERSON_NUMB}
             , #{NAME}
            
             , #{SUPP_TYPE}
             , #{SUPP_TOTAL_I}
                       
             , #{S_USER_ID}
             , GETDATE()
        )
    </update>
    
    <!-- 임시 테이블에 insert된 데이터 조회 --> 
    <select id="hbo300ukrServiceImpl.getData" parameterType="Map" resultType="rMap">
    	--hpb110ukrService.getData
        SELECT  * FROM L_HBO300T WITH(NOLOCK)
         WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
    </select>

</mapper>