<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum310ukrService">
	<select id="hum310ukrService.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>
	
	<select id="hum310ukrService.select" parameterType="Map" resultType="rMap">	/* 조회쿼리 */
		-- hum310ukr.Chum310ukr[fnHum310QStd] Query01
	    
	    BEGIN
	        SET NOCOUNT ON
	        SET ARITHABORT ON
	    
	    --  [ 데이터 조회 ] ---------------------------------------------------------------------------------------------------
	        SELECT  A.COMP_CODE                                                 AS COMP_CODE
	             ,  B.DIV_CODE                                                  AS DIV_CODE 
	             ,  B.DEPT_NAME                                                 AS DEPT_NAME
	             ,  M4.CODE_NAME                                                AS POST_CODE
	             ,  B.NAME                                                      AS NAME
	             ,  A.PERSON_NUMB                                               AS PERSON_NUMB
	             ,  A.RECOMMEND1_NAME                                           AS RECOMMEND1_NAME
	             ,  A.RECOMMEND1_RELATION                                       AS RECOMMEND1_RELATION
	             ,  A.RECOMMEND1_OFFICE_NAME                                    AS RECOMMEND1_OFFICE_NAME
	             ,  A.RECOMMEND1_CLASS                                          AS RECOMMEND1_CLASS
	             ,  A.RECOMMEND1_ZIP_CODE                                       AS RECOMMEND1_ZIP_CODE
	             ,  A.RECOMMEND1_ADDR                                           AS RECOMMEND1_ADDR
	             ,  A.RECOMMEND1_ADDR_DE                                        AS RECOMMEND1_ADDR_DE
	             ,  A.RECOMMEND2_NAME                                           AS RECOMMEND2_NAME
	             ,  A.RECOMMEND2_RELATION                                       AS RECOMMEND2_RELATION
	             ,  A.RECOMMEND2_OFFICE_NAME                                    AS RECOMMEND2_OFFICE_NAME
	             ,  A.RECOMMEND2_CLASS                                          AS RECOMMEND2_CLASS
	             ,  A.RECOMMEND2_ZIP_CODE                                       AS RECOMMEND2_ZIP_CODE
	             ,  A.RECOMMEND2_ADDR                                           AS RECOMMEND2_ADDR
	             ,  A.RECOMMEND2_ADDR_DE                                        AS RECOMMEND2_ADDR_DE
	             ,  A.INSERT_DB_USER                                            AS INSERT_DB_USER
	             ,  A.INSERT_DB_TIME                                            AS INSERT_DB_TIME
	             ,  A.UPDATE_DB_USER                                            AS UPDATE_DB_USER
	             ,  A.UPDATE_DB_TIME                                            AS UPDATE_DB_TIME
	        FROM               HUM790T AS A  WITH (NOLOCK)
	                INNER JOIN HUM100T AS B  WITH (NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
	                                                      AND B.PERSON_NUMB     = A.PERSON_NUMB
	                LEFT  JOIN CBM600T AS C  WITH (NOLOCK) ON C.COMP_CODE       = B.COMP_CODE
	                                                      AND C.COST_POOL_CODE  = B.COST_KIND
	                LEFT  JOIN BSA100T AS M1 WITH (NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
	                                                      AND M1.MAIN_CODE      = N'H005'
	                                                      AND M1.SUB_CODE      != N'$'
	                                                      AND M1.SUB_CODE       = B.POST_CODE
	                LEFT  JOIN BSA100T AS M2 WITH (NOLOCK) ON M2.COMP_CODE      = B.COMP_CODE
	                                                      AND M2.MAIN_CODE      = N'H024'
	                                                      AND M2.SUB_CODE      != N'$'
	                                                      AND M2.SUB_CODE       = B.EMPLOY_TYPE
	                LEFT  JOIN BSA100T AS M3 WITH (NOLOCK) ON M3.COMP_CODE      = B.COMP_CODE
	                                                      AND M3.MAIN_CODE      = N'H181'
	                                                      AND M3.SUB_CODE       = M2.REF_CODE1
	                LEFT  JOIN BSA100T AS M4 WITH (NOLOCK) ON M4.COMP_CODE      = B.COMP_CODE
	                                                      AND M4.MAIN_CODE      = N'H005'
	                                                      AND M4.SUB_CODE      != N'$'
	                                                      AND M4.SUB_CODE       = B.POST_CODE
			WHERE  A.COMP_CODE   = #{S_COMP_CODE}
			<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
		       AND B.DIV_CODE IN
					<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
					 #{item}
					</foreach>									
		    </if>
            <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   AND  B.DEPT_CODE	 IN
				 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		          		 #{item}
		    	 </foreach>
			</if>
			<if test="@foren.Ognl@isNotEmpty(NAME)">
			   AND B.NAME   LIKE + '%' +  #{NAME} + '%'
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			   AND B.PERSON_NUMB  = #{PERSON_NUMB}
			</if>
			<if test="RDO_TYPE == &quot;A&quot;">
				AND B.RETR_DATE = '00000000'		-- 재직구분 (재직)
			</if>
			<if test="RDO_TYPE == &quot;B&quot;">
				AND B.RETR_DATE != '00000000'		-- 재직구분 (퇴사)
			</if>
			<if test="@foren.Ognl@isNotEmpty(RECOMMEND1_NAME)">
				AND  (((A.RECOMMEND1_NAME LIKE '%' + #{RECOMMEND1_NAME} + '%'))
	            OR    ((A.RECOMMEND2_NAME LIKE '%' + #{RECOMMEND1_NAME} + '%')))
			</if>
	    	<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
			   AND B.PAY_GUBUN  	= #{PAY_GUBUN}									-- 고용형태
			</if>
			<if test="@foren.Ognl@isNotEmpty(EMPLOY_GUBUN)">
			   AND B.EMPLOY_TYPE 	= #{EMPLOY_GUBUN}		 						-- 사원구분
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
			   AND B.PAY_CODE 		= #{PAY_CODE}		 	 						-- 급여지급방식
			</if>
			<if test="@foren.Ognl@isNotEmpty(COST_POOL)">
			   AND B.COST_KIND 		= #{COST_POOL}		 	 						-- 사업명
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
			   AND B.PAY_PROV_FLAG 	= #{PAY_PROV_FLAG}		 						-- 급여지급차수
			</if>
			<if test="@foren.Ognl@isNotEmpty(PERSON_GROUP)">
			   AND M3.SUB_CODE 		= #{PERSON_GROUP}		 						-- 사원그룹
			</if>
	    
	        ORDER   BY A.COMP_CODE, B.DIV_CODE, B.DEPT_CODE, B.POST_CODE
	    
	        SET NOCOUNT OFF
	        SET ARITHABORT OFF
	    END
	</select>
	
	<insert id="hum310ukrService.insertDetail" parameterType="Map">    /* 추가 */    
		--hum310ukr.Chum310ukr[fnHum310Save] Query02
		INSERT INTO HUM790T
		     ( COMP_CODE
		     , PERSON_NUMB
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_NAME)">
		     , RECOMMEND1_NAME
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_RELATION)">
		     , RECOMMEND1_RELATION
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_OFFICE_NAME)">
		     , RECOMMEND1_OFFICE_NAME
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_CLASS)">
		     , RECOMMEND1_CLASS
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ZIP_CODE)">
		     , RECOMMEND1_ZIP_CODE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR)">
		     , RECOMMEND1_ADDR
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR_DE)">
		     , RECOMMEND1_ADDR_DE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_NAME)">
		     , RECOMMEND2_NAME
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_RELATION)">
		     , RECOMMEND2_RELATION
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_OFFICE_NAME)">
		     , RECOMMEND2_OFFICE_NAME
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_CLASS)">
		     , RECOMMEND2_CLASS
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ZIP_CODE)">
		     , RECOMMEND2_ZIP_CODE
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR)">
		     , RECOMMEND2_ADDR
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR_DE)">
		     , RECOMMEND2_ADDR_DE
		     </if>
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		     ) 
		VALUES
		     ( #{S_COMP_CODE}
		     , #{PERSON_NUMB}
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_NAME)">
		     , #{RECOMMEND1_NAME}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_RELATION)">
		     , #{RECOMMEND1_RELATION}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_OFFICE_NAME)">
		     , #{RECOMMEND1_OFFICE_NAME}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_CLASS)">
		     , #{RECOMMEND1_CLASS}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ZIP_CODE)">
		     , #{RECOMMEND1_ZIP_CODE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR)">
		     , #{RECOMMEND1_ADDR}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND1_ADDR_DE)">
		     , #{RECOMMEND1_ADDR_DE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_NAME)">
		     , #{RECOMMEND2_NAME}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_RELATION)">
		     , #{RECOMMEND2_RELATION}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_OFFICE_NAME)">
		     , #{RECOMMEND2_OFFICE_NAME}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_CLASS)">
		     , #{RECOMMEND2_CLASS}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ZIP_CODE)">
		     , #{RECOMMEND2_ZIP_CODE}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR)">
		     , #{RECOMMEND2_ADDR}
		     </if>
		     <if test="@foren.Ognl@isNotEmpty(RECOMMEND2_ADDR_DE)">
		     , #{RECOMMEND2_ADDR_DE}
		     </if>
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		     )
	</insert>
	
	<update id="hum310ukrService.updateDetail" parameterType="Map">		/* 수정 */
		--hum310ukr.Chum310ukr[fnHum310Save] Query02
		UPDATE HUM790T
		   SET INSERT_DB_USER         = #{S_USER_ID}
		     , UPDATE_DB_USER         = #{S_USER_ID}
		     , UPDATE_DB_TIME         = GETDATE()
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_NAME')">
		   	 , RECOMMEND1_NAME        = #{RECOMMEND1_NAME}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_RELATION')">
		     , RECOMMEND1_RELATION    = #{RECOMMEND1_RELATION}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_OFFICE_NAME')">
		     , RECOMMEND1_OFFICE_NAME = #{RECOMMEND1_OFFICE_NAME}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_CLASS')">
		     , RECOMMEND1_CLASS       = #{RECOMMEND1_CLASS}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_ZIP_CODE')">
		     , RECOMMEND1_ZIP_CODE    = #{RECOMMEND1_ZIP_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_ADDR')">
		     , RECOMMEND1_ADDR        = #{RECOMMEND1_ADDR}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND1_ADDR_DE')">
		     , RECOMMEND1_ADDR_DE     = #{RECOMMEND1_ADDR_DE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_NAME')">
		     , RECOMMEND2_NAME        = #{RECOMMEND2_NAME}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_RELATION')">
		     , RECOMMEND2_RELATION    = #{RECOMMEND2_RELATION}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_OFFICE_NAME')">
		     , RECOMMEND2_OFFICE_NAME = #{RECOMMEND2_OFFICE_NAME}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_CLASS')">
		     , RECOMMEND2_CLASS       = #{RECOMMEND2_CLASS}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_ZIP_CODE')">
		     , RECOMMEND2_ZIP_CODE    = #{RECOMMEND2_ZIP_CODE}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_ADDR')">
		     , RECOMMEND2_ADDR        = #{RECOMMEND2_ADDR}
		     </if>
		     <if test="@foren.Ognl@isExists(_parameter, 'RECOMMEND2_ADDR_DE')">
		     , RECOMMEND2_ADDR_DE     = #{RECOMMEND2_ADDR_DE}
		     </if>
		     
		     
		 WHERE COMP_CODE              = #{S_COMP_CODE}
		   AND PERSON_NUMB            = #{PERSON_NUMB}
		  
	</update>
	
	<delete id="hum310ukrService.deleteDetail" parameterType="Map">		/* 삭제 */
		--hum310ukr.Chum310ukr[fnHum310Save] Query01
		DELETE FROM HUM790T 
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
  
	</delete>
</mapper>