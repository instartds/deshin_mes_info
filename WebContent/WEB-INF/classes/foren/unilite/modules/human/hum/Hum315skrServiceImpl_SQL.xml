<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum315skrService">

	<select id="hum315skrService.selectList" parameterType="Map" resultType="rMap">
			--Hum315skr.CHum315skr[fnHum315QStd] Query01
		    --  [ 날짜 포맷 유형 설정 ] ------------------------------------------------------------
		        DECLARE         @DateFormat         NVARCHAR(10)
		    
		        SELECT  TOP 1 @DateFormat = CODE_NAME
		        FROM    BSA100T WITH (NOLOCK)
		        WHERE   COMP_CODE = #{S_COMP_CODE}
		        AND     MAIN_CODE = N'B044'
		        AND     REF_CODE1 = N'Y'
		    
		        SET @DateFormat = ISNULL(@DateFormat, N'YYYY.MM.DD')
		    --  [ 데이터 조회 ] --------------------------------------------------------------------
		    
		    SELECT 
		           A.COMP_CODE
		         , B.DIV_CODE
		         , B.DEPT_NAME
		         , M4.CODE_NAME AS POST_CODE
		         , B.NAME
		         , A.PERSON_NUMB
		         , A.FAMILY_NAME                                            --가족성명
		         , M5.CODE_NAME AS REL_NAME                                 --관계
		         , A.REPRE_NUM  AS REPRE_NUM                                --가족주민번호
		         , A.TOGETHER_YN                                            --동거여부
		         , M6.CODE_NAME AS SCHSHIP_NAME                             --최종학력
		         , M7.CODE_NAME AS GRADU_NAME                               --졸업여부
		         , A.OCCUPATION                                             --직업
		         , A.COMP_NAME                                              --근무처
		         , A.POST_NAME                                              --직위
		         , A.FAMILY_AMOUNT_YN                                       --수당지급여부
		    
		      FROM       HUM200T A  WITH(NOLOCK)
		      INNER JOIN HUM100T B  WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
		                                        AND B.PERSON_NUMB     = A.PERSON_NUMB
		    
		       LEFT JOIN CBM600T M1 WITH(NOLOCK) ON M1.COMP_CODE      = B.COMP_CODE
		                                        AND M1.COST_POOL_CODE = B.COST_KIND
		    
		       LEFT JOIN BSA100T M2 WITH(NOLOCK) ON M2.COMP_CODE      = B.COMP_CODE
		                                        AND M2.MAIN_CODE      = N'H024'
		                                        AND M2.SUB_CODE      != N'$'
		                                        AND M2.SUB_CODE       = B.EMPLOY_TYPE
		    
		       LEFT JOIN BSA100T M3 WITH (NOLOCK) ON M3.COMP_CODE     = B.COMP_CODE
		                                         AND M3.MAIN_CODE     = N'H181'
		                                         AND M3.SUB_CODE      = M2.REF_CODE1
		    
		       LEFT JOIN BSA100T M4 WITH (NOLOCK) ON M4.COMP_CODE     = B.COMP_CODE
		                                         AND M4.MAIN_CODE     = N'H005'
		                                         AND M4.SUB_CODE     != N'$'
		                                         AND M4.SUB_CODE      = B.POST_CODE
		    
		       LEFT JOIN BSA100T M5 WITH (NOLOCK) ON M5.COMP_CODE     = A.COMP_CODE
		                                         AND M5.MAIN_CODE     = N'H020'
		                                         AND M5.SUB_CODE     != N'$'
		                                         AND M5.SUB_CODE      = A.REL_CODE
		    
		       LEFT JOIN BSA100T M6 WITH (NOLOCK) ON M6.COMP_CODE     = A.COMP_CODE
		                                         AND M6.MAIN_CODE     = N'H009'
		                                         AND M6.SUB_CODE     != N'$'
		                                         AND M6.SUB_CODE      = A.SCHSHIP_CODE
		    
		       LEFT JOIN BSA100T M7 WITH (NOLOCK) ON M7.COMP_CODE     = A.COMP_CODE
		                                         AND M7.MAIN_CODE     = N'H010'
		                                         AND M7.SUB_CODE     != N'$'
		                                         AND M7.SUB_CODE      = A.GRADU_TYPE
		    
		--       LEFT JOIN BSA100T M8 WITH (NOLOCK) ON M8.COMP_CODE     = A.COMP_CODE
		--                                         AND M8.MAIN_CODE     = N'B018'
		--                                         AND M8.SUB_CODE     != N'$'
		--      2016.04.08 삭제                                   	   AND M8.SUB_CODE      = A.TOGETHER_YN
		
		    
		     WHERE A.COMP_CODE   = #{S_COMP_CODE}
			   AND uniLITE.fnCheckCompDivAuth(B.COMP_CODE, B.DIV_CODE, #{S_USER_ID}) = 'Y'
		     
            <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
		       AND B.DIV_CODE IN
					<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
					 #{item}
					</foreach>									
		    </if> 
            <if test="@foren.Ognl@isNotEmpty(DEPTS)">
			   AND  B.DEPT_CODE	 IN
				 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		          		 #{item}
		    	 </foreach>
			</if>
			<if test="@foren.Ognl@isNotEmpty(NAME)">
			   AND B.NAME   LIKE + '%' +  #{NAME} + '%'
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			   AND B.PERSON_NUMB  = #{PERSON_NUMB}
			</if>
		    <if test="RDO_TYPE == &quot;A&quot;">
				AND B.RETR_DATE = '00000000'		-- 재직구분 (재직)
			</if>
			<if test="RDO_TYPE == &quot;B&quot;">
				AND B.RETR_DATE != '00000000'		-- 재직구분 (퇴사)
			</if>

		    <if test="@foren.Ognl@isNotEmpty(FR_REPRE_NUM)">
		           AND CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1', '2')
		                    THEN CONVERT(INT, LEFT(CONVERT(NVARCHAR, GETDATE(), 112), 4)) -  (CONVERT(INT, ('19' + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)))) + 1
		                    WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('3', '4') 
		                    THEN CONVERT(INT, LEFT(CONVERT(NVARCHAR, GETDATE(), 112), 4)) -  (CONVERT(INT, ('20' + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)))) + 1
		                END &gt;=  #{FR_REPRE_NUM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(TO_REPRE_NUM)">
		           AND CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1', '2')
		                    THEN CONVERT(INT, LEFT(CONVERT(NVARCHAR, GETDATE(), 112), 4)) -  (CONVERT(INT, ('19' + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)))) + 1
		                    WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('3', '4') 
		                    THEN CONVERT(INT, LEFT(CONVERT(NVARCHAR, GETDATE(), 112), 4)) -  (CONVERT(INT, ('20' + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)))) + 1
		                END &lt;=  #{TO_REPRE_NUM}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REL_CODE)">
			   AND A.REL_CODE 		= #{REL_CODE}		 	 -- 가족관계
			</if>
			<if test="@foren.Ognl@isNotEmpty(SCHSHIP_CODE)">
			   AND A.SCHSHIP_CODE 	= #{SCHSHIP_CODE}		 -- 최종학력
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
			   AND B.PAY_GUBUN 		= #{PAY_GUBUN}		 	 -- 고용형태
			</if>
			<if test="@foren.Ognl@isNotEmpty(EMPLOY_GUBUN)">
			   AND B.EMPLOY_TYPE 	= #{EMPLOY_GUBUN}		 -- 사원구분
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
			   AND B.PAY_CODE 		= #{PAY_CODE}		 	 -- 급여지급방식
			</if>
			<if test="@foren.Ognl@isNotEmpty(COST_POOL)">
			   AND B.COST_KIND 		= #{COST_POOL}		 	 -- 사업명
			</if>
			<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
			   AND B.PAY_PROV_FLAG 	= #{PAY_PROV_FLAG}		 -- 급여지급차수
			</if>
			<if test="@foren.Ognl@isNotEmpty(PERSON_GROUP)">
			   AND M3.SUB_CODE 		= #{PERSON_GROUP}		 -- 사원그룹
			</if>
		    ORDER BY A.COMP_CODE, B.DIV_CODE, A.PERSON_NUMB
        
	
	</select>
</mapper>