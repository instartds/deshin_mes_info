<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum781ukrServiceImpl">
	
	<select id="hum781ukrServiceImpl.selectMasterList" parameterType="Map" resultType="rMap">
		/* hum781ukrServiceImpl.selectMasterList */
        SELECT 
            BB.DEPT_CODE  
            , BB.DEPT_NAME  
            , AA.ABIL_CODE
            , AA.PAY_YEARS      
            , AA.MERITS_YEARS   
            , AA.MERITS_PAY_GUBUN   
            , BB.PERSON_NUMB
            , BB.NAME
            , AA.JOIN_DATE
            , AA.PAY_CODE_GUBUN
            , AA.VCTN_DCNT
            , AA.SICK_DCNT
            , AA.APLC_MMCNT
            , ROUND(AA.APLC_AVRG_PAY_AMT, 1, 1)         AS APLC_AVRG_PAY_AMT
            , ROUND(AA.STD_AVRG_PAY_AMT, 1, 1)          AS STD_AVRG_PAY_AMT
            , ROUND(AA.PAY_TOT_AMT, 1, 1)               AS PAY_TOT_AMT
            , ROUND(AA.ADD_AMT, 1, 1)                   AS ADD_AMT
            , ROUND(AA.SUB_AMT, 1, 1)                   AS SUB_AMT
            , ROUND(AA.AFT_CS_AMT, 1, 1)                AS AFT_CS_AMT
            , AA.MERITS_CLASS
            , AA.MERITS_PAY_RATE
            , ROUND(AA.MERITS_PAY_AMT, 1, 1)            AS MERITS_PAY_AMT
            , ROUND(AA.INTX_AMT, 1, 1)                  AS INTX_AMT
            , ROUND(AA.LOC_INTX_AMT, 1, 1)              AS LOC_INTX_AMT
            , ROUND(AA.EMIN_AMT, 1, 1)                  AS EMIN_AMT
            , ROUND(AA.SZR_AMT, 1, 1)                   AS SZR_AMT
            , ROUND(AA.HLIN_EXCA_AMT, 1, 1)             AS HLIN_EXCA_AMT
            , ROUND(AA.EMIN_EXCA_AMT, 1, 1)             AS EMIN_EXCA_AMT
            , ROUND(AA.NP_EXCA_AMT, 1, 1)               AS NP_EXCA_AMT
            --, ROUND(AA.RLPM_AMT, 1, 1)                  AS RLPM_AMT
            , 
            case when AA.INTX_AMT = 0 then 0
            ELSE ROUND(AA.MERITS_PAY_AMT -AA.INTX_AMT -AA.LOC_INTX_AMT -AA.EMIN_AMT -AA.SZR_AMT -AA.HLIN_EXCA_AMT -AA.EMIN_EXCA_AMT -AA.NP_EXCA_AMT, 1, 1)                  
            END AS RLPM_AMT
            
        FROM HUM781T AA
        INNER JOIN HUM100T BB   ON AA.COMP_CODE   = BB.COMP_CODE 
                               AND AA.PERSON_NUMB = BB.PERSON_NUMB 
        WHERE 1=1
        AND AA.COMP_CODE            = #{S_COMP_CODE} 
        AND AA.PAY_YEARS            = #{PAY_YEARS}
        AND AA.MERITS_YEARS         = #{MERITS_YEARS}
        AND AA.MERITS_PAY_GUBUN     = #{MERITS_PAY_GUBUN}
        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
        AND AA.DEPT_CODE = #{DEPT_CODE}
        </if> 
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
        AND AA.PERSON_NUMB = #{PERSON_NUMB}
        </if> 
        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
        AND AA.ABIL_CODE = #{ABIL_CODE}
        </if> 
        
        ORDER BY BB.DEPT_CODE
        
	</select>
	
	<select id="hum781ukrServiceImpl.selectDetailList" parameterType="Map" resultType="rMap">
		/* hum781ukrServiceImpl.selectDetailList */
		 SELECT 
            PERSON_NUMB
            , PAY_YEARS
            , MERITS_YEARS
            , PAY_YYYYMM
            , PAY_MM
            , BSE_AMT
            , BNF_ALWN
            , RSP_ALWN
            , BNS_ALWN
            , CNWK_ALWN
            , ENCR_ALWN
            , RMK           AS RMK_DETAIL
        FROM HUM782T
        WHERE 1=1
        AND COMP_CODE           = #{S_COMP_CODE} 
        AND PAY_YEARS           = #{PAY_YEARS}
        AND MERITS_YEARS        = #{MERITS_YEARS}
        AND MERITS_PAY_GUBUN     = #{MERITS_PAY_GUBUN}
        AND PERSON_NUMB         = #{PERSON_NUMB}
        ORDER BY PAY_MM
	</select>
	
	<update id="hum781ukrServiceImpl.updateMaster" parameterType="Map">	
	   /* hum781ukrServiceImpl.updateMaster */
		UPDATE HUM781T
		   SET 
               APLC_MMCNT             = #{APLC_MMCNT}           /* 적용월 */
             , APLC_AVRG_PAY_AMT      = #{APLC_AVRG_PAY_AMT}    /* 보수월액 - 적용월기준 */
             , PAY_TOT_AMT            = #{PAY_TOT_AMT}          /* 총지급액 */
             , ADD_AMT                = #{ADD_AMT}              /*가산금액 */
		     , SUB_AMT                = #{SUB_AMT}            /*감산금액 */
		     , AFT_CS_AMT             = #{AFT_CS_AMT}         /*CS반영후 */
		     , MERITS_PAY_AMT         = #{MERITS_PAY_AMT}     /*지급액(지급율반영) */
		     , INTX_AMT               = #{INTX_AMT}           /*소득세 */
		     , LOC_INTX_AMT           = #{LOC_INTX_AMT}       /*지방소득세 */		     
		     , EMIN_AMT               = #{EMIN_AMT}           /*고용보험 */	     
		     , SZR_AMT                = #{SZR_AMT}            /*압류금액 */		     
		     , HLIN_EXCA_AMT          = #{HLIN_EXCA_AMT}      /*건강보험 */		     
		     , EMIN_EXCA_AMT          = #{EMIN_EXCA_AMT}      /*고용보험정산 */		     
		     , NP_EXCA_AMT            = #{NP_EXCA_AMT}        /*국민연금정산 */
             , RMK                    = #{RMK_MASTER}		  /*비고 */   
		 WHERE 1=1
            AND COMP_CODE               = #{S_COMP_CODE} 
		    AND PAY_YEARS               = #{PAY_YEARS}
            AND MERITS_YEARS            = #{MERITS_YEARS}
            AND MERITS_PAY_GUBUN        = #{MERITS_PAY_GUBUN}
            AND PERSON_NUMB             = #{PERSON_NUMB}
            	   
	</update>
    
    <update id="hum781ukrServiceImpl.updateDetail" parameterType="Map">	
	   /* hum781ukrServiceImpl.updateDetail */
       
       BEGIN
           BEGIN
    		UPDATE HUM782T
    		   SET 
                BSE_AMT             = #{BSE_AMT}
                , BNF_ALWN          = #{BNF_ALWN}
                , RSP_ALWN          = #{RSP_ALWN}
                , BNS_ALWN          = #{BNS_ALWN}
                , CNWK_ALWN         = #{CNWK_ALWN}
                , ENCR_ALWN         = #{ENCR_ALWN}
                <if test="@foren.Ognl@isNotEmpty(RMK_DETAIL)">
                , RMK               = #{RMK_DETAIL}
    		    </if> 
    		 WHERE 1=1 
    		   AND COMP_CODE        = #{S_COMP_CODE}
               AND PAY_YEARS        = #{PAY_YEARS}
               AND MERITS_YEARS     = #{MERITS_YEARS}
               AND PAY_MM           = #{PAY_MM} 
               AND PERSON_NUMB      = #{PERSON_NUMB}
           END
       
           BEGIN    
            UPDATE HUM781T
            SET PAY_TOT_AMT  = KK.PAY_TOT_AMT,
                AFT_CS_AMT = KK.AFT_CS_AMT,
                APLC_AVRG_PAY_AMT = KK.APLC_AVRG_PAY_AMT,
                STD_AVRG_PAY_AMT = KK.STD_AVRG_PAY_AMT,
                MERITS_PAY_AMT = 0,
                INTX_AMT = 0,
                LOC_INTX_AMT = 0,
                EMIN_AMT = 0,
                SZR_AMT = 0,
                HLIN_EXCA_AMT = 0,
                EMIN_EXCA_AMT = 0,
                NP_EXCA_AMT = 0
            FROM (SELECT AA.PERSON_NUMB, SUM(AA.BSE_AMT + AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN + AA.CNWK_ALWN + AA.ENCR_ALWN)* (BB.APLC_MMCNT/12) AS PAY_TOT_AMT, 
                        SUM(AA.BSE_AMT + AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN + AA.CNWK_ALWN + AA.ENCR_ALWN) AS AFT_CS_AMT, 
                        CASE WHEN BB.APLC_MMCNT = 0 THEN SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN + AA.ENCR_ALWN) /12
                            ELSE (SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN+ AA.ENCR_ALWN) /12 ) * (BB.APLC_MMCNT/12)
                        END AS APLC_AVRG_PAY_AMT,
                        SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN + AA.CNWK_ALWN + AA.ENCR_ALWN) /12 AS     STD_AVRG_PAY_AMT
                    FROM HUM782T    AA  
                    INNER JOIN HUM781T  BB ON AA.PERSON_NUMB = BB.PERSON_NUMB
                                           AND AA.MERITS_YEARS = BB.MERITS_YEARS
                                           AND AA.PERSON_NUMB = BB.PERSON_NUMB
                                           AND AA.PAY_YYYYMM = BB.PAY_YYYYMM
                    WHERE 1=1
                    AND AA.PAY_YEARS            = #{PAY_YEARS}
                    AND AA.MERITS_YEARS         = #{MERITS_YEARS}
                    AND AA.PERSON_NUMB          = #{PERSON_NUMB}
                    
                    GROUP BY AA. PERSON_NUMB, BB.APLC_MMCNT) AS KK
    
            WHERE HUM781T.PERSON_NUMB = KK.PERSON_NUMB   
          END 
         
      END
           
	</update>
	
    <select id="hum781ukrServiceImpl.selectSorc" parameterType="Map" resultType="rMap">
        /* hum781ukrServiceImpl.selectSorc */
        --재원산출 계산
        SELECT APLC_AVRG_PAY_AMT_TOTAL
                , SORC_TOT_AMT
                , (APLC_AVRG_PAY_AMT_TOTAL - SORC_TOT_AMT) AS SORC_BALN
        FROM (
        SELECT 
             SUM(APLC_AVRG_PAY_AMT) AS APLC_AVRG_PAY_AMT_TOTAL,
            SUM(CASE WHEN MERITS_CLASS = 'S' THEN APLC_AVRG_PAY_AMT * 0.01 * #{S_GRADE}
                 WHEN MERITS_CLASS = 'A' THEN APLC_AVRG_PAY_AMT * 0.01 * #{A_GRADE} 
                 WHEN MERITS_CLASS = 'B' THEN APLC_AVRG_PAY_AMT * 0.01 * #{B_GRADE}
                 WHEN MERITS_CLASS = 'C' THEN APLC_AVRG_PAY_AMT * 0.01 * #{C_GRADE}
                 WHEN MERITS_CLASS = 'D' THEN APLC_AVRG_PAY_AMT * 0.01 * #{D_GRADE}
                 WHEN MERITS_CLASS = 'Z' THEN APLC_AVRG_PAY_AMT * 0.01 * #{Z_GRADE}
                 END) AS SORC_TOT_AMT
         FROM HUM781T
         WHERE 1=1
         AND PAY_YEARS = #{PAY_YEARS}
        AND MERITS_YEARS = #{MERITS_YEARS} 
        AND MERITS_PAY_GUBUN = #{MERITS_PAY_GUBUN}) AS TOT
        
    </select>
 
 
   
    <!-- 대상자생성 -->
    <update id="hum781ukrServiceImpl.createBaseData" parameterType="Map">
        /* hum781ukrServiceImpl.createBaseData */
        
        /************ 대상자 생성 ***********/
        /*
        *프로세스 순서
        *1. 기초데이터 조회  
        *2. 근속수당 UPDATE
        *3. 기초데이터 INSERT
        *******************************/
        
        /****************1. 기초데이터 조회  ***************************/
 <![CDATA[
        BEGIN
        SET NOCOUNT ON
        SET ARITHABORT ON
        
        
            DECLARE @ST_MONTH_DAY FLOAT
            SET @ST_MONTH_DAY = 30 --월 기준(한달 기준을 30일로 함)
        
            DECLARE @COMP_CODE  NVARCHAR(08), 
                    @PAY_YEARS NVARCHAR(04), 
                    @MERITS_YEARS  NVARCHAR(04) ,
                    @MERITS_PAY_GUBUN  NVARCHAR(01),
                    @PAY_YYYYMM   NVARCHAR(06)               
                
            SET @COMP_CODE = #{S_COMP_CODE} --'MASTER'
            SET @PAY_YEARS = #{PAY_YEARS}  --기준년도
            SET @MERITS_YEARS = #{MERITS_YEARS}   --평가년도
            SET @MERITS_PAY_GUBUN = #{MERITS_PAY_GUBUN}  --평가급구분 6:인센티브평가급, 9:자체평가급
            SET @PAY_YYYYMM = #{PAY_YYYYMM}   --지급년월
        
        
            DECLARE @TMP_HOLYDAY TABLE(
                    PERSON_NUMB              NVARCHAR(10)  , /* 사번 */
                    HOLY_DAY1                   INT ,  /* 휴직 */
                    HOLY_DAY2                   INT   /* 병가 */
            )
        
            BEGIN
            INSERT INTO @TMP_HOLYDAY 
                --최종 휴직일수
                SELECT AA.PERSON_NUMB 
                    , SUM(CASE WHEN AA.OFF_CODE2 IN ('10','11','12') THEN DATEDIFF(DAY, AA.FROM_DATE_FIX, AA.TO_DATE_FIX) +1
                            ELSE 0 
                            END)    AS HOLY_DAY1 -- 휴직일수
                    , SUM(CASE WHEN AA.OFF_CODE2 IN ('15') THEN DATEDIFF(DAY, AA.FROM_DATE_FIX, AA.TO_DATE_FIX) +1
                            ELSE 0 
                            END)    AS HOLY_DAY2 -- 병가일수
                FROM (
                    SELECT PERSON_NUMB
                    --, FROM_DATE
                    --, TO_DATE
                    , OFF_CODE2 
                    , CASE WHEN  FROM_DATE < @MERITS_YEARS + '0101' THEN @MERITS_YEARS + '0101'
                        ELSE FROM_DATE 
                        END     AS FROM_DATE_FIX
                    , CASE WHEN  TO_DATE > @MERITS_YEARS + '1231' THEN @MERITS_YEARS + '1231'
                        ELSE TO_DATE 
                        END     AS TO_DATE_FIX
                        
                    FROM HUM850T
                    WHERE OFF_CODE1 = '1' --휴직/산재 구분, 1:휴직, 2:산재
            
                    AND TO_DATE >= @MERITS_YEARS + '0101'
                    AND FROM_DATE <= @MERITS_YEARS + '1231' --추가
                    AND OFF_CODE2 IN ('10','11','12','15') --10:질병휴직, 11:질병(결핵)휴직, 12:육아휴직,  15: 병가 
                    ) AA
                GROUP BY AA.PERSON_NUMB
            END
        
        
            DECLARE @TMP_T TABLE(DUTY_MONTH VARCHAR(6))
        
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '01')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '02')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '03')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '04')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '05')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '06')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '07')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '08')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '09')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '10')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '11')
            INSERT INTO @TMP_T VALUES (@MERITS_YEARS + '12')
        
        
            --@HUM781_INSERT_TMP
            DECLARE @HUM781_INSERT_TMP TABLE (
                    DEPT_CODE   NVARCHAR(08),       /*부서코드*/
                    DEPT_NAME NVARCHAR(50),         /*부서명*/
                    ABIL_CODE NVARCHAR(02),         /*직급*/
                    PAY_YEARS NVARCHAR(04),         /*지급년도*/
                    MERITS_YEARS  NVARCHAR(04),     /*평가년도*/
                    MERITS_PAY_GUBUN NVARCHAR(01),  /*평가급구분*/
                    PAY_YYYYMM NVARCHAR(06),        /*지급월*/
                    PERSON_NUMB NVARCHAR(10),       /*사번*/
                    NAME NVARCHAR(100),             /*성명*/
                    JOIN_DATE NVARCHAR(08),         /*입사일*/
                    VCTN_DCNT NUMERIC(3,0),
                    SICK_DCNT NUMERIC(3,0),
                    TOTAL_DCNT NUMERIC(3,0),
                    APLC_MMCNT NUMERIC(3,0),
                    PAY_CODE_GUBUN NVARCHAR(01),    /*연봉직구분(호봉/직무급/연봉)*/
                    PAY_MM NVARCHAR(06),            /*구분월*/
                    BSE_AMT NUMERIC(30,6),
                    BNF_ALWN NUMERIC(30,6),
                    RSP_ALWN NUMERIC(30,6),
                    BNS_ALWN NUMERIC(30,6),
                    CNWK_ALWN NUMERIC(30,6),
                    ENCR_ALWN NUMERIC(30,6)
        
            )
        
            BEGIN
        
                INSERT INTO @HUM781_INSERT_TMP 
        
                /************************************* 만근기준 (호봉직) ****************************************/
        
                SELECT T.DEPT_CODE, T.DEPT_NAME AS DEPT_NAME, T.ABIL_CODE AS ABIL_CODE, @PAY_YEARS AS PAY_YEARS, @MERITS_YEARS AS MERITS_YEARS, @MERITS_PAY_GUBUN AS MERITS_PAY_GUBUN, @PAY_YYYYMM AS PAY_YYYYMM, 
                        T.PERSON_NUMB  AS PERSON_NUMB, T.NAME AS NAME, T.JOIN_DATE AS JOIN_DATE, ISNULL(T.HOLY_DAY1, 0) AS VCTN_DCNT, ISNULL(T.HOLY_DAY2, 0) AS SICK_DCNT, ISNULL(T.HOLY_TOTAL, 0) AS TOTAL_DCNT,  12 - ISNULL(T.HOLY_MONTH, 0) AS APLC_MMCNT, 
                        T.PAY_CODE AS PAY_CODE_GUBUN,  
                        TMPT.DUTY_MONTH AS PAY_MM,
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' THEN T.WAGES_I END), 0) AS BSE_AMT, --'기본급',
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'J51' THEN T.WAGES_I END), 0) + ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'J60' THEN 130000 END), 0)  AS BNS_ALWN, --'복리후생비',
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'02', @MERITS_YEARS+'09') THEN T.WAGES_I END) /2, 0) AS RSP_ALWN, --'효도휴가비'(2,9월),
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'03', @MERITS_YEARS+'06', @MERITS_YEARS+'09', @MERITS_YEARS+'12') THEN T.WAGES_I END) /2, 0) AS BNS_ALWN, --'상여수당'(3,6,9,12월),
                        0 AS CNWK_ALWN, --'근속수당 '
                        0 AS ENCR_ALWN --'장려수당',
                FROM (
                    SELECT 
                        AA.DEPT_CODE AS DEPT_CODE,
                        AA.DEPT_NAME AS DEPT_NAME,
                        AA.ABIL_CODE AS ABIL_CODE,
                        AA.PERSON_NUMB AS PERSON_NUMB,
                        AA.NAME AS NAME,
                        AA.JOIN_DATE AS JOIN_DATE,
                        CC.WAGES_CODE AS WAGES_CODE,
                        CC.WAGES_I AS WAGES_I,
                        DD.HOLY_DAY1 AS HOLY_DAY1, 
                        DD.HOLY_DAY2 AS HOLY_DAY2, 
                        DD.HOLY_DAY1+ DD.HOLY_DAY2 AS HOLY_TOTAL, 
                        CASE WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY < 1 THEN 0
                            WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY > 1   THEN CONVERT( INT, ((DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY )  + 1)
                            END AS HOLY_MONTH,
                        AA.PAY_CODE AS PAY_CODE
                        FROM HUM100T AA
                        INNER JOIN (SELECT DISTINCT PERSON_NUMB FROM HAT300T
                                    WHERE WORK_DAY >= 30
                                    AND DUTY_YYYYMM LIKE @MERITS_YEARS + '%')  BB ON AA.PERSON_NUMB = BB.PERSON_NUMB
                                        --AND BB.WORK_DAY >= 30
                                        --AND BB.DUTY_YYYYMM LIKE @MERITS_YEARS + '%'
        
                    INNER JOIN HBS200T CC ON  AA.COMP_CODE = CC.COMP_CODE
                            AND  AA.PAY_GRADE_01 = CC.PAY_GRADE_01
                            AND  AA.PAY_GRADE_02 = CC.PAY_GRADE_02
                            AND PAY_GRADE_YYYY = @MERITS_YEARS
                    LEFT JOIN @TMP_HOLYDAY DD ON AA.PERSON_NUMB = DD.PERSON_NUMB        --근태정보
                    WHERE AA.PAY_CODE = '1' --  (직급별 구분) 1:호봉직, 2: 직무급직, 4:연봉직
        
                ) AS T, @TMP_T TMPT
        
                GROUP BY T.DEPT_CODE, T.DEPT_NAME, T.ABIL_CODE, T.PERSON_NUMB, T.NAME, T.JOIN_DATE,  T.PAY_CODE, TMPT.DUTY_MONTH , T.HOLY_DAY1 , T.HOLY_DAY2, T.HOLY_TOTAL,  T.HOLY_MONTH
        
        
                UNION ALL
        
        
                /************************************* 만근기준 (직무급직) ****************************************/
        
                SELECT T.DEPT_CODE, T.DEPT_NAME AS DEPT_NAME, T.ABIL_CODE AS ABIL_CODE, @PAY_YEARS AS PAY_YEARS, @MERITS_YEARS AS MERITS_YEARS, @MERITS_PAY_GUBUN AS MERITS_PAY_GUBUN, @PAY_YYYYMM AS PAY_YYYYMM, 
                        T.PERSON_NUMB  AS PERSON_NUMB, T.NAME AS NAME, T.JOIN_DATE AS JOIN_DATE, ISNULL(T.HOLY_DAY1, 0) AS VCTN_DCNT, ISNULL(T.HOLY_DAY2, 0) AS SICK_DCNT, ISNULL(T.HOLY_TOTAL, 0) AS TOTAL_DCNT,  12 - ISNULL(T.HOLY_MONTH, 0) AS APLC_MMCNT,
                        T.PAY_CODE AS PAY_CODE_GUBUN,  
                        TMPT.DUTY_MONTH AS PAY_MM,
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' THEN T.WAGES_STD_I END) ,0) AS BSE_AMT, --'기본급',
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' THEN T.WAGES_I END) ,0) AS BSE_AMT, --'기본급',
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'J51' THEN 70000 END) ,0) + ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'J60' THEN 130000 END) ,0) AS BNF_ALWN, --'복리후생비',
                        ISNULL(SUM(70000) ,0) + ISNULL(SUM(130000) ,0) AS BNF_ALWN, --'복리후생비',
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'02', @MERITS_YEARS+'09')    THEN T.WAGES_STD_I END) /2 ,0) AS RSP_ALWN, --'효도휴가비',
                        ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'BSE' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'03', @MERITS_YEARS+'06', @MERITS_YEARS+'09', @MERITS_YEARS+'12')  THEN T.WAGES_STD_I END) /2 ,0) AS BNS_ALWN, --'상여수당',
                        0 AS CNWK_ALWN, --'근속수당 '
                        0 AS ENCR_ALWN --'장려수당'
                FROM (
                    SELECT 
                        AA.DEPT_CODE AS DEPT_CODE,
                        AA.DEPT_NAME AS DEPT_NAME,
                        AA.ABIL_CODE AS ABIL_CODE,
                        AA.PERSON_NUMB AS PERSON_NUMB,
                        AA.NAME AS NAME,
                        AA.JOIN_DATE AS JOIN_DATE,
                        CC.WAGES_CODE AS WAGES_CODE,
                        CC.WAGES_I AS WAGES_I,
                        AA.WAGES_STD_I AS WAGES_STD_I,
                        DD.HOLY_DAY1 AS HOLY_DAY1, 
                        DD.HOLY_DAY2 AS HOLY_DAY2,
                        DD.HOLY_DAY1+ DD.HOLY_DAY2 AS HOLY_TOTAL, 
                        CASE WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY < 1 THEN 0
                            WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY > 1   THEN CONVERT( INT, ((DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY )  + 1)
                            END AS HOLY_MONTH,
                        AA.PAY_CODE AS PAY_CODE 
                    FROM HUM100T AA
                    INNER JOIN (SELECT DISTINCT PERSON_NUMB FROM HAT300T
                                WHERE WORK_DAY >= 30
                                AND DUTY_YYYYMM LIKE @MERITS_YEARS + '%')  BB ON AA.PERSON_NUMB = BB.PERSON_NUMB
                    INNER JOIN HBS211T CC ON AA.COMP_CODE = CC.COMP_CODE
                                    AND AA.JOB_CODE = CC.JOB_CODE
                                    AND PAY_GRADE_YYYY = @MERITS_YEARS
                    LEFT JOIN @TMP_HOLYDAY DD ON AA.PERSON_NUMB = DD.PERSON_NUMB        --근태정보
                    WHERE AA.PAY_CODE = '2' --  (직급별 구분) 1:호봉직, 2: 직무급직, 4:연봉직
        
                ) AS T, @TMP_T TMPT
                GROUP BY T.DEPT_CODE,  T.DEPT_NAME, T.ABIL_CODE, T.PERSON_NUMB, T.NAME, T.JOIN_DATE,  T.PAY_CODE, TMPT.DUTY_MONTH , T.HOLY_DAY1 , T.HOLY_DAY2, T.HOLY_TOTAL,  T.HOLY_MONTH
        
        
                UNION ALL
        
                /************************************* 만근기준 (연봉직) ****************************************/
        
                SELECT T.DEPT_CODE, T.DEPT_NAME AS DEPT_NAME, T.ABIL_CODE AS ABIL_CODE, @PAY_YEARS AS PAY_YEARS, @MERITS_YEARS AS MERITS_YEARS, @MERITS_PAY_GUBUN AS MERITS_PAY_GUBUN, @PAY_YYYYMM AS PAY_YYYYMM, 
                        T.PERSON_NUMB  AS PERSON_NUMB, T.NAME AS NAME, T.JOIN_DATE AS JOIN_DATE, ISNULL(T.HOLY_DAY1, 0) AS VCTN_DCNT, ISNULL(T.HOLY_DAY2, 0) AS SICK_DCNT, ISNULL(T.HOLY_TOTAL, 0) AS TOTAL_DCNT,  12 - ISNULL(T.HOLY_MONTH, 0) AS APLC_MMCNT,
                        T.PAY_CODE AS PAY_CODE_GUBUN,  
                        TMPT.DUTY_MONTH AS PAY_MM,
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'S01' THEN T.WAGES_I END), 0) AS BSE_AMT, --'기본급',
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'S04' THEN WAGES_I END) ,0) + ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'S06' THEN WAGES_I END), 0)  AS BNF_ALWN, --'복리후생비',
                        --ISNULL((SUM(CASE WHEN T.WAGES_CODE = 'S05' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'02', @MERITS_YEARS+'09')    THEN T.WAGES_I END) /2), 0) AS RSP_ALWN, --'효도휴가비',
                        --ISNULL((SUM(CASE WHEN T.WAGES_CODE = 'S02' AND TMPT.DUTY_MONTH IN (@MERITS_YEARS+'03', @MERITS_YEARS+'06', @MERITS_YEARS+'09', @MERITS_YEARS+'12')  THEN T.WAGES_I END) /2), 0) AS BNS_ALWN, --'상여수당',
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'S03' THEN T.WAGES_I END), 0) AS CNWK_ALWN, --'근속수당'
                        --ISNULL(SUM(CASE WHEN T.WAGES_CODE = 'S08' THEN T.WAGES_I END), 0 ) AS ENCR_ALWN --'장려수당'

                        ISNULL(SUM(T.WAGES_STD_I), 0) AS BSE_AMT, --'기본급',
                        0 AS BNF_ALWN, --'복리후생비',
                        0 AS RSP_ALWN, --'효도휴가비',
                        0 AS BNS_ALWN, --'상여수당',
                        0 AS CNWK_ALWN, --'근속수당'
                        0 AS ENCR_ALWN --'장려수당'
        
                FROM (
                    SELECT 
                        AA.DEPT_CODE AS DEPT_CODE,
                        AA.DEPT_NAME AS DEPT_NAME,
                        AA.ABIL_CODE AS ABIL_CODE,
                        AA.PERSON_NUMB AS PERSON_NUMB,
                        AA.NAME AS NAME,
                        AA.JOIN_DATE AS JOIN_DATE,
                        --CC.WAGES_CODE AS WAGES_CODE,
                        --CC.AMOUNT_I AS WAGES_I,
                        '' AS WAGES_CODE,
                        '' AS WAGES_I,
                        
                        --AA.WAGES_STD_I AS WAGES_STD_I,
                        CC.WAGES_STD_I AS WAGES_STD_I,
                        
                        DD.HOLY_DAY1 AS HOLY_DAY1, 
                        DD.HOLY_DAY2 AS HOLY_DAY2, 
                        DD.HOLY_DAY1+ DD.HOLY_DAY2 AS HOLY_TOTAL, 
                        CASE WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY < 1 THEN 0
                            WHEN (DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY > 1   THEN CONVERT( INT, ((DD.HOLY_DAY1+ DD.HOLY_DAY2) / @ST_MONTH_DAY )  + 1)
                            END AS HOLY_MONTH,
                        AA.PAY_CODE AS PAY_CODE
                    FROM HUM100T AA
                    INNER JOIN (SELECT DISTINCT PERSON_NUMB FROM HAT300T
                                WHERE WORK_DAY >= 30
                                AND DUTY_YYYYMM LIKE @MERITS_YEARS + '%')  BB ON AA.PERSON_NUMB = BB.PERSON_NUMB
                                    --AND BB.WORK_DAY >= 30
                                    --AND BB.DUTY_YYYYMM LIKE @MERITS_YEARS + '%'
                    --INNER JOIN HBS210T_DTL CC ON  AA.COMP_CODE = CC.COMP_CODE
                    --        AND AA.PERSON_NUMB = CC.PERSON_NUMB 
                    --        AND CC.PAY_YYYY = @MERITS_YEARS
                    INNER JOIN HBS210T CC ON  AA.COMP_CODE = CC.COMP_CODE
                            AND AA.PERSON_NUMB = CC.PERSON_NUMB 
                            AND CC.YEAR_YYYY = @MERITS_YEARS
                            
                    LEFT JOIN @TMP_HOLYDAY DD ON AA.PERSON_NUMB = DD.PERSON_NUMB        --근태정보
                    WHERE AA.PAY_CODE = '4' -- (직급별 구분) 1:호봉직, 2: 직무급직, 4:연봉직
        
                ) AS T, @TMP_T TMPT
        
                GROUP BY T.DEPT_CODE,  T.DEPT_NAME, T.ABIL_CODE, T.PERSON_NUMB, T.NAME, T.JOIN_DATE, T.PAY_CODE, TMPT.DUTY_MONTH , T.HOLY_DAY1 , T.HOLY_DAY2, T.HOLY_TOTAL,  T.HOLY_MONTH
        
            END
        
        
            /*****************************************2. 근속수당 CURSOR ********************************/
            BEGIN
                DECLARE @OUT_AMT NUMERIC(30, 6)
                        , @ERR_DESC NVARCHAR(2000)
        
                DECLARE TMP_CURSOR CURSOR FOR 
            
                    SELECT PERSON_NUMB, PAY_MM  FROM @HUM781_INSERT_TMP
                    WHERE PAY_CODE_GUBUN != '4'
        
                    DECLARE  @TMP1 NVARCHAR(200)
                    , @TMP2 NVARCHAR(200) 
        
                    OPEN TMP_CURSOR
                        FETCH NEXT FROM TMP_CURSOR INTO @TMP1, @TMP2
        
                        WHILE @@FETCH_STATUS = 0
                        BEGIN
            
                            EXEC USP_HUMAN_FNWORKPERIODPAY 'MASTER', @TMP1 , @TMP2 ,'900', @OUT_AMT OUTPUT , @ERR_DESC OUTPUT
        
                            UPDATE @HUM781_INSERT_TMP 
                            SET CNWK_ALWN = @OUT_AMT
                            WHERE PERSON_NUMB = @TMP1
                            AND  PAY_MM = @TMP2
        
                            FETCH NEXT FROM TMP_CURSOR INTO @TMP1, @TMP2
        
                        END
        
                    CLOSE TMP_CURSOR
                DEALLOCATE TMP_CURSOR
        
            END
        
        
            BEGIN
                DELETE 
                FROM HUM781T
                WHERE COMP_CODE = @COMP_CODE
                AND PAY_YEARS = @PAY_YEARS
                AND MERITS_YEARS = @MERITS_YEARS
                AND MERITS_PAY_GUBUN = @MERITS_PAY_GUBUN
                --AND PAY_YYYYMM = @PAY_YYYYMM
            END
        
        
            BEGIN
                /***********************3. 기초데이터 INSERT ************************************/
                --MASTER HUM781T
                INSERT INTO HUM781T
                (COMP_CODE, PAY_YEARS, MERITS_YEARS, MERITS_PAY_GUBUN, PAY_YYYYMM, PERSON_NUMB,DEPT_CODE, ABIL_CODE,JOIN_DATE,
                PAY_CODE_GUBUN, MERITS_CLASS, VCTN_DCNT, SICK_DCNT, APLC_MMCNT, PAY_TOT_AMT, AFT_CS_AMT, APLC_AVRG_PAY_AMT, STD_AVRG_PAY_AMT)
        
                SELECT 
                    @COMP_CODE AS COMP_CODE,
                    @PAY_YEARS AS PAY_YEARS,
                    @MERITS_YEARS AS MERITS_YEARS,
                    @MERITS_PAY_GUBUN AS MERITS_PAY_GUBUN,
                    @PAY_YYYYMM AS PAY_YYYYMM,
                    AA.PERSON_NUMB,
                    AA.DEPT_CODE,
                    AA.ABIL_CODE,
                    AA.JOIN_DATE,
                    AA.PAY_CODE_GUBUN,
                    isnull(BB.MERITS_CLASS, 'Z') AS MERITS_CLASS,
                    AA.VCTN_DCNT,
                    AA.SICK_DCNT,
                    AA.APLC_MMCNT,
                    SUM (AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN + AA.ENCR_ALWN) * AA.APLC_MMCNT/12 AS PAY_TOT_AMT,
                    SUM (AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN + AA.ENCR_ALWN) * AA.APLC_MMCNT/12 AS AFT_CS_AMT,
                    CASE WHEN AA.APLC_MMCNT = 0 THEN SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN + AA.ENCR_ALWN) /12
                        ELSE (SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN  + AA.CNWK_ALWN+ AA.ENCR_ALWN) /12 ) * AA.APLC_MMCNT/12
                        END AS APLC_AVRG_PAY_AMT,
                    SUM(AA.BSE_AMT+ AA.BNF_ALWN + AA.RSP_ALWN + AA.BNS_ALWN + AA.CNWK_ALWN + AA.ENCR_ALWN) /12 AS     STD_AVRG_PAY_AMT
        
                FROM
                    @HUM781_INSERT_TMP AA
                LEFT JOIN HUM770T BB ON AA.PERSON_NUMB = BB.PERSON_NUMB 
        
                GROUP BY AA.PERSON_NUMB, AA.DEPT_CODE, AA.ABIL_CODE, AA.JOIN_DATE,AA.PAY_CODE_GUBUN, BB.MERITS_CLASS, AA.VCTN_DCNT,
                        AA.SICK_DCNT,
                        AA.APLC_MMCNT
            END
        
        
            BEGIN
                DELETE FROM HUM782T
                WHERE COMP_CODE = @COMP_CODE
                AND PAY_YEARS = @PAY_YEARS
                AND MERITS_YEARS = @MERITS_YEARS
                AND MERITS_PAY_GUBUN = @MERITS_PAY_GUBUN
                --AND @PAY_YYYYMM = @PAY_YYYYMM
            END
        
        
            BEGIN
                --DETAIL HUM782T
                INSERT INTO HUM782T 
                (COMP_CODE, PAY_YEARS, MERITS_YEARS, MERITS_PAY_GUBUN, PAY_YYYYMM, PERSON_NUMB, PAY_MM, BSE_AMT, BNF_ALWN, RSP_ALWN, BNS_ALWN, CNWK_ALWN, ENCR_ALWN)
                SELECT 
                    @COMP_CODE AS COMP_CODE,
                    @PAY_YEARS AS PAY_YEARS,
                    @MERITS_YEARS AS MERITS_YEARS,
                    @MERITS_PAY_GUBUN AS MERITS_PAY_GUBUN,
                    @PAY_YYYYMM AS PAY_YYYYMM,
                    PERSON_NUMB,
                    PAY_MM,
                    BSE_AMT, 
                    BNF_ALWN,
                    RSP_ALWN,
                    BNS_ALWN,
                    CNWK_ALWN,
                    ENCR_ALWN
        
                FROM
                    @HUM781_INSERT_TMP
            END
        
            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END

  ]]>

    </update>

 
    
    <update id="hum781ukrServiceImpl.commitMeritsRate" parameterType="Map"> 
       /* hum781ukrServiceImpl.commitMeritsRate */
   
            UPDATE HUM781T
            SET MERITS_PAY_RATE =       CASE WHEN MERITS_CLASS = 'S' THEN #{S_GRADE}
                                             WHEN MERITS_CLASS = 'A' THEN #{A_GRADE}
                                             WHEN MERITS_CLASS = 'B' THEN #{B_GRADE}
                                             WHEN MERITS_CLASS = 'C' THEN #{C_GRADE}
                                             WHEN MERITS_CLASS = 'D' THEN #{D_GRADE}
                                             WHEN MERITS_CLASS = 'Z' THEN #{Z_GRADE}
                                             END ,
                MERITS_PAY_AMT  =       CASE WHEN MERITS_CLASS = 'S' THEN  HUM781T.AFT_CS_AMT / 100 * #{S_GRADE} 
                                             WHEN MERITS_CLASS = 'A' THEN  HUM781T.AFT_CS_AMT / 100 * #{A_GRADE}
                                             WHEN MERITS_CLASS = 'B' THEN  HUM781T.AFT_CS_AMT / 100 * #{B_GRADE}
                                             WHEN MERITS_CLASS = 'C' THEN  HUM781T.AFT_CS_AMT / 100 * #{C_GRADE}
                                             WHEN MERITS_CLASS = 'D' THEN  HUM781T.AFT_CS_AMT / 100 * #{D_GRADE}
                                             WHEN MERITS_CLASS = 'Z' THEN  HUM781T.AFT_CS_AMT / 100 * #{Z_GRADE}
                                             END 
            WHERE 1=1
            AND PAY_YEARS = #{PAY_YEARS}
            AND MERITS_YEARS = #{MERITS_YEARS}
            AND MERITS_PAY_GUBUN = #{MERITS_PAY_GUBUN}
           
    </update>
    
    <update id="hum781ukrServiceImpl.calcTaxAmt" parameterType="Map"> 
       /* hum781ukrServiceImpl.calcTaxAmt */
        BEGIN
                DECLARE @HIR_AMT NUMERIC(30, 6)
                        , @IN_TAX NUMERIC(30, 6)
                        , @LOCAL_TAX NUMERIC(30, 6)
                        , @ERR_DESC NVARCHAR(2000)
        
                DECLARE TMP_TAX_CURSOR CURSOR FOR 

        
                    SELECT PERSON_NUMB, PAY_YYYYMM, MERITS_PAY_AMT FROM HUM781T
                    WHERE PAY_YEARS                 = #{PAY_YEARS}
                    AND MERITS_YEARS                = #{MERITS_YEARS}
                    AND MERITS_PAY_GUBUN            = #{MERITS_PAY_GUBUN}
                    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                    AND DEPT_CODE                   = #{DEPT_CODE}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
                    AND PERSON_NUMB                 = #{PERSON_NUMB}
                    </if>
                    <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                    AND ABIL_CODE                   = #{ABIL_CODE}
                    </if>

                    DECLARE  @TMP1 NVARCHAR(200)
                    , @TMP2 NVARCHAR(200) 
                    , @TMP3 NUMERIC(30, 6) 
        
        
                    OPEN TMP_TAX_CURSOR
        
                        FETCH NEXT FROM TMP_TAX_CURSOR INTO @TMP1, @TMP2, @TMP3
        
        
                        WHILE @@FETCH_STATUS = 0
                        BEGIN
            
                            EXEC SP_CALC_TEST 'MASTER', @TMP1 , @TMP2 ,@TMP3, @HIR_AMT OUTPUT , @IN_TAX OUTPUT , @LOCAL_TAX OUTPUT , @ERR_DESC OUTPUT
       
                            UPDATE HUM781T
                            SET INTX_AMT        = @IN_TAX,
                                LOC_INTX_AMT    = @LOCAL_TAX,
                                EMIN_AMT        = @HIR_AMT
                                --RLPM_AMT        = MERITS_PAY_AMT - @IN_TAX - @LOCAL_TAX - @HIR_AMT - EMIN_AMT - SZR_AMT - HLIN_EXCA_AMT - EMIN_EXCA_AMT - NP_EXCA_AMT
                            WHERE 1=1
                            AND PERSON_NUMB             = @TMP1 
        
                            FETCH NEXT FROM TMP_TAX_CURSOR INTO @TMP1, @TMP2, @TMP3
        
                        END
        
        
                    CLOSE TMP_TAX_CURSOR
                DEALLOCATE TMP_TAX_CURSOR
        
            END
           
    </update>
    
    
    
    
    
    <!-- 대상자생성 -->
    <update id="hum781ukrServiceImpl.insertSalary" parameterType="Map">
    /* hum781ukrServiceImpl.insertSalary */
            ----------------------- 급여반영 쿼리 --------------------
        INSERT INTO HPA700T (COMP_CODE
                            , PERSON_NUMB
                            , SUPP_TYPE
                            , PROV_GUBUN
                            , WAGES_CODE
                            , PAY_FR_YYYYMM
                            , PAY_TO_YYYYMM
                            , DED_AMOUNT_I
                            , REMARK)
        SELECT #{S_COMP_CODE}                                                   AS COMP_CODE
                , PERSON_NUMB
                /* ,'1'                                                          AS SUPP_TYPE */
                ,#{MERITS_PAY_GUBUN}                                            AS SUPP_TYPE    /* 지급구분을 평가급 구분값으로 넣어달라 2017.11.24 */
                
                , CASE WHEN COL_NM ='MERITS_PAY_AMT' THEN '1' 
                        ELSE '2' 
                        END                                                     AS PROV_GUBUN 
                
        <choose>
            <when test='MERITS_PAY_GUBUN == "9"'>
                , CASE WHEN COL_NM ='MERITS_PAY_AMT'    THEN 'J31'  /* 지급총액 */
                        WHEN  COL_NM ='INTX_AMT'        THEN 'INC'   /* 소득세 */ 
                        WHEN  COL_NM ='LOC_INTX_AMT'    THEN 'S03'   /* 지방소득세 */
                        WHEN  COL_NM ='EMIN_AMT'        THEN 'HIR'   /* 고용보험 */
                        WHEN  COL_NM ='SZR_AMT'         THEN 'S15'  /* 압류금액(급여압류) */
                        WHEN  COL_NM ='HLIN_EXCA_AMT'   THEN 'MED'  /* 건강보험 */
                        WHEN  COL_NM ='EMIN_EXCA_AMT'   THEN 'S06'  /* 고용보험정산 */
                        WHEN  COL_NM ='NP_EXCA_AMT'     THEN 'S13'  /* 국민연금정산 */
                        ELSE ''
                        END                                                     AS WAGES_CODE
            </when>
            <otherwise>
                , CASE WHEN COL_NM ='MERITS_PAY_AMT'    THEN 'J27'  /* 지급총액 */
                        WHEN  COL_NM ='INTX_AMT'        THEN 'INC'  /* 소득세 */ 
                        WHEN  COL_NM ='LOC_INTX_AMT'    THEN 'S03'  /* 지방소득세 */
                        WHEN  COL_NM ='EMIN_AMT'        THEN 'HIR'  /* 고용보험 */
                        WHEN  COL_NM ='SZR_AMT'         THEN 'S15'  /* 압류금액(급여압류) */
                        WHEN  COL_NM ='HLIN_EXCA_AMT'   THEN 'MED'  /* 건강보험 */
                        WHEN  COL_NM ='EMIN_EXCA_AMT'   THEN 'S06'  /* 고용보험정산 */
                        WHEN  COL_NM ='NP_EXCA_AMT'     THEN 'S13'  /* 국민연금정산 */
                        ELSE ''
                        END                                                     AS WAGES_CODE
            </otherwise>
        </choose>
                , #{PAY_YYYYMM}                                                      AS PAY_FR_YYYYMM
                , #{PAY_YYYYMM}                                                      AS PAY_TO_YYYYMM
                , VAL                                                           AS DED_AMOUNT_I
                , RMK                                                           AS REMARK
        
        FROM
            (
                    SELECT PERSON_NUMB
                            , MERITS_PAY_AMT
                            , INTX_AMT
                            , LOC_INTX_AMT
                            , EMIN_AMT
                            , SZR_AMT
                            , HLIN_EXCA_AMT
                            , EMIN_EXCA_AMT
                            , NP_EXCA_AMT
                            , RMK 
                      FROM HUM781T 
                      WHERE 1=1
                        AND COMP_CODE            = #{S_COMP_CODE} 
                        AND PAY_YEARS            = #{PAY_YEARS}
                        AND MERITS_YEARS         = #{MERITS_YEARS}
                        AND MERITS_PAY_GUBUN     = #{MERITS_PAY_GUBUN}
                        <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
                        AND DEPT_CODE = #{DEPT_CODE}
                        </if> 
                        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
                        AND PERSON_NUMB = #{PERSON_NUMB}
                        </if> 
                        <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
                        AND ABIL_CODE = #{ABIL_CODE}
                        </if> 
               ) AS T
        UNPIVOT
           (VAL FOR COL_NM IN (MERITS_PAY_AMT, INTX_AMT, LOC_INTX_AMT, EMIN_AMT, SZR_AMT,  HLIN_EXCA_AMT, EMIN_EXCA_AMT, NP_EXCA_AMT)
        ) AS UNPVT
            
     </update>
            
    
</mapper>