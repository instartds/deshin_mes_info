<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum920skrService">
	<select id="hum920skrService.checkLicenseTab" parameterType="Map" resultType="rMap">	
		--hum920skr.Chum920skr[fnHum920nQ] QUERY 04
	
		SELECT  MAX(RE_ENTRE)    AS RE_ENTRE
             ,  MAX(LICENSE_TAB) AS LICENSE_TAB
        FROM    (
                SELECT  CASE WHEN SUB_CODE = '20' THEN UPPER(REF_CODE1) ELSE '' END    AS RE_ENTRE     --버스_재입사관리 사용여부
                      , CASE WHEN SUB_CODE = '21' THEN UPPER(REF_CODE1) ELSE '' END    AS LICENSE_TAB  --버스_면허기타 Tab 사용여부
                FROM    BSA100T WITH (NOLOCK)
                WHERE   COMP_CODE   = #{S_COMP_CODE}
                AND     MAIN_CODE   = N'H175'
                AND     SUB_CODE   IN ('20', '21')
                ) T
	</select>
	<select id="hum920skrService.checkOnlyHuman" parameterType="Map" resultType="rMap">	
		--UHbs01Krv.CHbs00ukr[fnGetMinor] QUERY05
		SELECT  TOP 1 SUB_CODE
            FROM    BSA100T WITH (NOLOCK)
            WHERE   COMP_CODE   = #{S_COMP_CODE}
            AND     MAIN_CODE   = N'H183'
            AND     SUB_CODE    = #{S_USER_ID}
	</select>
	
	<select id="hum920skrService.checkRejoiningYn" parameterType="Map" resultType="rMap">	
		--hum920skr.Chum920skr[fnHum920nQ] Query01"
		    SELECT ISNULL(REF_CODE1, '') AS REF_CODE1
		    FROM   BSA100T WITH (NOLOCK)
		    WHERE  COMP_CODE = #{S_COMP_CODE}
		    AND    MAIN_CODE = N'H175'
		    AND    SUB_CODE  = N'20'
	</select>
	
	<select id="hum920skrService.selectList" parameterType="Map" resultType="rMap">		
		
	 --hum920skr.Chum920skr[fnHum920nQ] QUERY 02
	    BEGIN
	        SET NOCOUNT ON
	        SET ARITHABORT ON
	    
	    --  [ 날짜 포맷 유형 설정 ] -------------------------------------------------------------------------------------------
	        DECLARE         @DateFormat         NVARCHAR(10)
	    
	        SELECT TOP 1 @DateFormat = M1.CODE_NAME
	        FROM   BSA100T M1 WITH (NOLOCK)
	        WHERE  M1.COMP_CODE = #{S_COMP_CODE}
	        AND    M1.MAIN_CODE = N'B044'
	        AND    M1.REF_CODE1 = N'Y'
	    
	        SET @DateFormat = ISNULL(@DateFormat, 'YYYY/MM/DD')
	    
	        SELECT  
	        		'1'									  AS GUBUN
	              , H.DIV_CODE                            AS DIV_CODE             -- 사업장
	              , H.DEPT_NAME							  AS DEPT_NAME
	              , H.DEPT_CODE                           AS DEPT_CODE            -- 부서
	              , H.POST_CODE                           AS POST_CODE            -- 직위
	              , '1'                                   AS PERSON_CNT
	              , H.NAME                                AS NAME                 -- 성명
	              , H.PERSON_NUMB                         AS PERSON_NUMB          -- 사번
	              , H.NAME_ENG                            AS NAME_ENG             -- 영문성명
	              , H.NAME_CHI                            AS NAME_CHI             -- 한자성명

	    		  <if test="CHECK_REJOINING == &quot;HUM100TV&quot;">
	              , H.DOC_ID                              AS DOC_ID               -- 재입사순번 HUM100TV
	    		  </if>
	    		  <if test="CHECK_REJOINING == &quot;HUM100T&quot;">
	              , 0                                     AS DOC_ID               -- 재입사순번 HUM100T
	    		  </if>
	    		  <if test="RDOENCRYPT == &quot;Y&quot;">
	              , unilite.fnCipherDecrypt(H.REPRE_NUM, 'R') AS REPRE_NUM        -- 주민번호
	              </if>
	              
	    		  <if test="RDOENCRYPT != &quot;Y&quot;">
	              , unilite.fnCipherDecrypt(H.REPRE_NUM, 'A') AS REPRE_NUM        -- 주민번호
	              </if>
	              
	              , unilite.fnCipherDecrypt(H.REPRE_NUM, 'A') AS REPRE_NUM_EXPOS  -- 주민번호
	              
	              , CASE WHEN ISNULL(H.ORI_JOIN_DATE, '') = '00000000' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.ORI_JOIN_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.ORI_JOIN_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.ORI_JOIN_DATE, 7, 2))
	                END                                   AS ORI_JOIN_DATE        -- 최초입사일
	              , CASE WHEN ISNULL(H.JOIN_DATE, '') = '00000000' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.JOIN_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.JOIN_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.JOIN_DATE, 7, 2))
	                END                                   AS JOIN_DATE            -- 입사일
	              , CASE WHEN ISNULL(H.RETR_DATE, '') = '00000000' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.RETR_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.RETR_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.RETR_DATE, 7, 2))
	                END                                   AS RETR_DATE            -- 퇴사일
	              , ISNULL(M16.CODE_NAME, '')             AS RETR_RESN            -- 퇴사사유
	              , unilite.fnHumanDateDiff(ISNULL(H.ORI_JOIN_DATE,'00000000')
	                                      , CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE
	                                             ELSE CONVERT(NVARCHAR(8),GETDATE(),112)
	                                        END, 'LONG_TOT_ALL') AS ORI_YEAR_DIFF -- 최초근속년수
	              , unilite.fnHumanDateDiff(H.JOIN_DATE
	                                      , CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE
	                                             ELSE CONVERT(NVARCHAR(8),GETDATE(),112)
	                                        END, 'LONG_TOT_ALL') AS YEAR_DIFF     -- 근속년수
	              , ISNULL(M2.CODE_NAME, '')              AS PAY_GUBUN            -- 고용형태
	              , CASE WHEN H.PAY_GUBUN = '1' THEN ''
	                     ELSE ISNULL(M26.CODE_NAME, '')
	                END                                   AS PAY_GUBUN2           -- 일반/일용구분
	              , ISNULL(M3.CODE_NAME, '')              AS EMPLOY_TYPE          -- 사원구분
	              , ISNULL(M4.CODE_NAME, '')              AS ABIL_CODE            -- 직책
	              , ISNULL(M10.CODE_NAME, '')             AS AFFIL_CODE           -- 직렬
				  , ISNULL(M27.CODE_NAME, '')             AS MAKE_SALE            -- 제조/판관
                  , ISNULL(H.KNOC, '')                    AS KNOC                 -- 직종(추가)
	              , ISNULL(M5.CODE_NAME, '')              AS JOB_CODE             -- 담당업무
	              , ISNULL(M15.CODE_NAME, '')             AS JOIN_CODE            -- 입사구분
	              , ISNULL(M6.CODE_NAME, '') + ISNULL(M7.CODE_NAME, '') AS GRADE  -- 학력졸업(최종학력+졸업구분)
	    
	                -- 급여관련
	              , CASE WHEN ISNULL(H2.ANNOUNCE_DATE, '') != ''
	                     THEN REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H2.ANNOUNCE_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H2.ANNOUNCE_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H2.ANNOUNCE_DATE, 7, 2))
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.JOIN_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.JOIN_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.JOIN_DATE, 7, 2))
	                END                                   AS ANNOUNCE_DATE        -- 현직급임용일
	              , (CASE WHEN ISNULL(H.PAY_GRADE_01, '') = '' THEN ''
	                      ELSE H.PAY_GRADE_01 + uniLITE.fnGetTxt('H0015')
	                      END
	              + ' '
	              + CASE WHEN ISNULL(H.PAY_GRADE_02, '') = '' THEN ''
	                     ELSE H.PAY_GRADE_02 +uniLITE.fnGetTxt('H0090')
	                     END)                             AS PAY_GRADE            -- 호봉
	              , ISNULL(M11.CODE_NAME, '')             AS PAY_GRADE_BASE       -- 호봉승급기준
	              , CASE WHEN ISNULL(H.YEAR_GRADE, '') = '' THEN ''
	                     ELSE H.YEAR_GRADE + uniLITE.fnGetTxt('H0111')
	                     END                              AS YEAR_GRADE           -- 근속
	              , ISNULL(M19.CODE_NAME, '')             AS YEAR_GRADE_BASE      -- 근속승급기준
	              , ISNULL(M17.CODE_NAME, '')             AS PAY_CODE             -- 급여지급방식
	              , ISNULL(M18.CODE_NAME, '')             AS PAY_PROV_FLAG        -- 지급차수
	              , ISNULL(H.ANNUAL_SALARY_I, 0)          AS ANNUAL_SALARY_I      -- 연봉
	              , ISNULL(H.WAGES_STD_I    , 0)          AS WAGES_STD_I          -- 기본급
	              , ISNULL(H.PAY_PRESERVE_I , 0)          AS PAY_PRESERVE_I       -- 기본급2(임금보전수당)
	              , ISNULL(M20.CODE_NAME, '')             AS BONUS_KIND           -- 상여금계산구분자
	              , ISNULL(H.BONUS_STD_I    , 0)          AS BONUS_STD_I          -- 상여기준금
	              , ISNULL(H.COM_YEAR_WAGES , 0)          AS COM_YEAR_WAGES       -- 년월차기준금
	              , ISNULL(M21.CODE_NAME, '')             AS TAX_CODE             -- 연장수당세액구분
	              , ISNULL(M22.CODE_NAME, '')             AS TAX_CODE2            -- 보육수당세액구분
	    
	                -- 4대보험 관련
	              , ISNULL(H.ANU_BASE_I     , 0)          AS ANU_BASE_I           -- 월평균보수액(국민연금)
	              , ISNULL(H.ANU_INSUR_I    , 0)          AS ANU_INSUR_I          -- 국민연금
	              , ISNULL(H.MED_AVG_I      , 0)          AS MED_AVG_I            -- 월평균보수액(건강보험)
	              , ISNULL(H.MED_INSUR_I    , 0)          AS MED_INSUR_I          -- 건강보험료
	              , ISNULL(H.ORI_MED_INSUR_I, 0)          AS ORI_MED_INSUR_I      -- 건강보험료(고지금액)
	              , ISNULL(H.OLD_MED_INSUR_I, 0)          AS OLD_MED_INSUR_I      -- 장기노인요양보험(고지금액)
	              , ISNULL(H.HIRE_AVG_I     , 0)          AS HIRE_AVG_I           -- 월평균보수액(고용보험)
	              , ISNULL(H.HIRE_INSUR_I   , 0)          AS HIRE_INSUR_I         -- 고용보험료
	    
	                -- 개인정보
	              , ISNULL(H.KOR_ADDR, '')                AS KOR_ADDR             -- 주소
	              , ISNULL(H.TELEPHON, '')                AS TELEPHON             -- 전화번호
	              , ISNULL(H.PHONE_NO, '')                AS PHONE_NO             -- 핸드폰번호
	              , CASE WHEN ISNULL(H.BIRTH_DATE, '') = '' THEN ''
	                     ELSE CASE WHEN H.SOLAR_YN = 'Y'
	                                    THEN REPLACE(
	                                         REPLACE(
	                                         REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.BIRTH_DATE, 1, 4))
	                                                            , 'MM'  , SUBSTRING(H.BIRTH_DATE, 5, 2))
	                                                            , 'DD'  , SUBSTRING(H.BIRTH_DATE, 7, 2)) + '(+)'
	                               ELSE REPLACE(
	                                    REPLACE(
	                                    REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.BIRTH_DATE, 1, 4))
	                                                       , 'MM'  , SUBSTRING(H.BIRTH_DATE, 5, 2))
	                                                       , 'DD'  , SUBSTRING(H.BIRTH_DATE, 7, 2)) + '(-)'
	                               END 
	                END                                   AS BIRTH_DATE           -- 생일
	              , CASE WHEN ISNULL(H.WEDDING_DATE, '') = '' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.WEDDING_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.WEDDING_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.WEDDING_DATE, 7, 2))
	                END                                   AS WEDDING_DATE         -- 결혼기념일
	              , CASE WHEN ISNULL(H.EMAIL_SEND_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                          ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS EMAIL_SEND_YN        -- 이메일전송여부
	    
	              , ISNULL(H.EMAIL_ADDR, '')              AS EMAIL_ADDR           -- 이메일주소
	              , ISNULL(C.COST_POOL_NAME, '')          AS COST_POOL            -- COST POOL(사업명)
	              , D2.DIV_NAME                           AS BILL_DIV_NAME        -- 신고사업장
	              , ISNULL(F.BUSS_OFFICE_NAME, '')        AS BUSS_OFFICE_CODE     -- 소속지점
	              , ISNULL(M25.CODE_NAME, '')             AS NATION_CODE          -- 국가
	              , ISNULL(E1.CUSTOM_NAME, '')            AS BANK_CODE1           -- 계좌1_은행명
	              , ISNULL(uniLITE.fnCipherDecrypt(H.BANK_ACCOUNT1, ''), '') AS BANK_ACCOUNT1 -- 계좌1_계좌번호
	              , ISNULL(H.BANKBOOK_NAME, '')           AS BANKBOOK_NAME1       -- 예금주1
	              , ISNULL(E2.CUSTOM_NAME, '')            AS BANK_CODE2           -- 계좌2_은행명
	              , ISNULL(uniLITE.fnCipherDecrypt(H.BANK_ACCOUNT2, ''), '') AS BANK_ACCOUNT2 -- 계좌2_계좌번호
	              , ISNULL(H.BANKBOOK_NAME2, '')          AS BANKBOOK_NAME2       -- 예금주2
	    
	                -- 급여계산시 적용 여부
	              , CASE WHEN ISNULL(H.PAY_PROV_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS PAY_PROV_YN          -- 급여지급여부
	              , CASE WHEN ISNULL(H.PAY_PROV_STOP_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS PAY_PROV_STOP_YN     -- 급여지급보류여부
	              , CASE WHEN ISNULL(H.COMP_TAX_I, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS COMP_TAX_I           -- 세액계산대상여부
	              , CASE WHEN ISNULL(H.HIRE_INSUR_TYPE, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS HIRE_INSUR_TYPE      -- 고용보험여부
	              , CASE WHEN ISNULL(H.BONUS_PROV_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS BONUS_PROV_YN        -- 상여지급여부
	              , CASE WHEN ISNULL(H.YEAR_GIVE, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS YEAR_GIVE            -- 년차수당지급여부
	              , CASE WHEN ISNULL(H.YEAR_CALCU, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS YEAR_CALCU           -- 연말정산신고대상여부
	              , CASE WHEN ISNULL(H.LABOR_UNON_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0132')
	                     ELSE uniLITE.fnGetTxt('H0133')
	                END                                   AS LABOR_UNON_YN        -- 노조/상조가입여부
	              , CASE WHEN ISNULL(H.RETR_GIVE, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS RETR_GIVE            -- 퇴직금지급구분
	              , CASE WHEN ISNULL(H.RETR_PENSION_KIND, '') = 'DB' THEN 'DB'
	                     WHEN ISNULL(H.RETR_PENSION_KIND, '') = 'DC' THEN 'DC'
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS RETR_PENSION_KIND        -- 퇴직연금가입구분(DB,DC,N)
	    
	                -- 연말정산 관려
	              , uniLITE.fnCipherDecrypt(H.FOREIGN_NUM, '') AS FOREIGN_NUM     -- 외국인등록번호
	              , ISNULL(M24.CODE_NAME, '')             AS LIVE_GUBUN           -- 거주구분
	              , CASE WHEN ISNULL(H.HOUSEHOLDER_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0134')
	                     ELSE uniLITE.fnGetTxt('H0135')
	                END                                   AS HOUSEHOLDER_YN       -- 세대주여부
	              , CASE WHEN ISNULL(H.FOREIGN_SKILL_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0134')
	                     ELSE uniLITE.fnGetTxt('H0135')
	                END                                   AS FOREIGN_SKILL_YN     -- 외국인기술자여부
	              , CASE WHEN ISNULL(H.SPOUSE, '') = 'Y' THEN uniLITE.fnGetTxt('H0029')
	                     ELSE uniLITE.fnGetTxt('H0030')
	                END                                   AS SPOUSE               -- 배우자공제
	              , CASE WHEN ISNULL(H.WOMAN, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS WOMAN                -- 부녀자세대공제
	              , CASE WHEN ISNULL(H.ONE_PARENT, '') = 'Y' THEN uniLITE.fnGetTxt('H0130')
	                     ELSE uniLITE.fnGetTxt('H0131')
	                END                                   AS ONE_PARENT           -- 한부모소득공제
	              , ISNULL(H.SUPP_AGED_NUM, 0)            AS SUPP_AGED_NUM        -- 부양자수
	              , CASE WHEN ISNULL(H.DEFORM_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0134')
	                     ELSE uniLITE.fnGetTxt('H0135')
	                END                                   AS DEFORM_YN            -- 장애인여부
	              , ISNULL(H.DEFORM_NUM, 0)               AS DEFORM_NUM           -- 장애인수
	              , ISNULL(H.CHILD_20_NUM, 0)             AS CHILD_20_NUM         -- 다자녀수
	              , ISNULL(H.AGED_NUM, 0)                 AS AGED_NUM             -- 경로자
	              , ISNULL(H.AGED_NUM70, 0)               AS AGED_NUM70           -- 70이상경로자
	              , ISNULL(H.BRING_CHILD_NUM, 0)          AS BRING_CHILD_NUM      -- 자녀양육수
	    
	                -- 개인기타
	              , ISNULL(H.CARD_NUM, '')                AS CARD_NUM             -- 출입카드번호
	              , CASE WHEN ISNULL(H.ESS_USE_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0134')
	                     ELSE uniLITE.fnGetTxt('H0135')
	                END                                   AS ESS_USE_YN           -- 대사우사용여부
	              , ISNULL(H.REMARK, '')                  AS REMARK               -- 기타사항
	              , ISNULL(H.ORI_ADDR, '')                AS ORI_ADDR             -- 기타주소
	              , ISNULL(M8.CODE_NAME, '')              AS AGENCY_NAME          -- 보훈구분 
	              , ISNULL(H1.AGENCY_GRADE, 0)            AS AGENCY_GRADE         -- 보훈등급
	              , ISNULL(M9.CODE_NAME, '')              AS HITCH_NAME           -- 장애구분
	              , ISNULL(H1.HITCH_GRADE, 0)             AS HITCH_GRADE          -- 장애등급
	              , ISNULL(H1.HITCH_DATE, '')             AS HITCH_DATE           -- 장애인 등록일
	    
	              -- 면허/기타 Tab
	              , ISNULL(M12.CODE_NAME, '')             AS OFFICE_CODE          -- 영업소
	              , ISNULL(M13.CODE_NAME, '')             AS ROUTE_GROUP          -- 소속그룹
	              , ISNULL(M14.CODE_NAME, '')             AS LICENSE_KIND         -- 운전면허종류
	              , ISNULL(H.LICENSE_NO, '')              AS LICENSE_NO           -- 운전면허번호
	              , CASE WHEN ISNULL(H.LICENSE_ACQ_DATE, '') = '' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.LICENSE_ACQ_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.LICENSE_ACQ_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.LICENSE_ACQ_DATE, 7, 2))
	                END                                   AS LICENSE_ACQ_DATE     -- 운전면허 취득일
	              , CASE WHEN ISNULL(H.LICENSE_FRDATE, '') = '' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.LICENSE_FRDATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.LICENSE_FRDATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.LICENSE_FRDATE, 7, 2))
	                END                                   AS LICENSE_FRDATE       -- 운전면허 유효시작일
	              , CASE WHEN ISNULL(H.LICENSE_TODATE, '') = '' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.LICENSE_TODATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.LICENSE_TODATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.LICENSE_TODATE, 7, 2))
	                END                                   AS LICENSE_TODATE       -- 운전면허 유효종료일
	              , ISNULL(H.BUS_CERTIFICATE, '')         AS BUS_CERTIFICATE      -- 버스자격증번호
	              , CASE WHEN ISNULL(H.CERTI_ACQ_DATE, '') = '' THEN ''
	                     ELSE REPLACE(
	                          REPLACE(
	                          REPLACE(@DateFormat, 'YYYY', SUBSTRING(H.CERTI_ACQ_DATE, 1, 4))
	                                             , 'MM'  , SUBSTRING(H.CERTI_ACQ_DATE, 5, 2))
	                                             , 'DD'  , SUBSTRING(H.CERTI_ACQ_DATE, 7, 2))
	                END                                   AS CERTI_ACQ_DATE       -- 버스자격증 취득일
	              , CASE WHEN ISNULL(H.CIVIL_DEF_YN, '') = 'Y' THEN uniLITE.fnGetTxt('H0134')
	                     ELSE uniLITE.fnGetTxt('H0135')
	                END                                   AS CIVIL_DEF_YN         -- 민방위대상
	              , ISNULL(H.CIVIL_DEF_NUM, '')           AS CIVIL_DEF_NUM        -- 민방위 년차
	              , ISNULL(MEMO_1, '')                    AS MEMO_1               -- 메모1
	              , ISNULL(MEMO_2, '')                    AS MEMO_2               -- 메모2
	              
	              INTO TEMP_TABLE_160426
        	  <if test="CHECK_REJOINING == &quot;HUM100TV&quot;">
         	  FROM           HUM100TV   H  WITH (NOLOCK)
    		  </if>
    		  <if test="CHECK_REJOINING == &quot;HUM100T&quot;">
              FROM            HUM100T   H  WITH (NOLOCK)
    		  </if>	
	               LEFT  JOIN CBM600T   C  WITH (NOLOCK) ON C.COMP_CODE         = H.COMP_CODE
	                                                    AND C.COST_POOL_CODE    = H.COST_KIND
	               LEFT  JOIN BOR120T   D1 WITH (NOLOCK) ON D1.COMP_CODE        = H.COMP_CODE
	                                                    AND D1.DIV_CODE         = H.DIV_CODE
	               LEFT  JOIN BOR120T   D2 WITH (NOLOCK) ON D2.COMP_CODE        = H.COMP_CODE
	                                                    AND D2.DIV_CODE         = H.SECT_CODE
	               LEFT  JOIN BCM100T   E1 WITH (NOLOCK) ON E1.COMP_CODE        = H.COMP_CODE
	                                                    AND E1.CUSTOM_CODE      = H.BANK_CODE1
	                                                    AND E1.CUSTOM_TYPE      = '4'
	               LEFT  JOIN BCM100T   E2 WITH (NOLOCK) ON E2.COMP_CODE        = H.COMP_CODE
	                                                    AND E2.CUSTOM_CODE      = H.BANK_CODE2
	                                                    AND E2.CUSTOM_TYPE      = '4'
	               LEFT  JOIN HBS230T   F  WITH (NOLOCK) ON F.COMP_CODE         = H.COMP_CODE
	                                                    AND F.BUSS_OFFICE_CODE  = H.BUSS_OFFICE_CODE
	               LEFT  JOIN HUM710T   H1 WITH (NOLOCK) ON H1.COMP_CODE        = H.COMP_CODE
	                                                    AND H1.PERSON_NUMB      = H.PERSON_NUMB

	              
	               LEFT  JOIN (SELECT A.COMP_CODE
	                                , A.PERSON_NUMB
	                                , MIN(A.ANNOUNCE_DATE) AS ANNOUNCE_DATE
	                             FROM              HUM760T A WITH (NOLOCK)
	                            INNER JOIN HUM100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
	                                                              AND B.PERSON_NUMB = A.PERSON_NUMB
	                                                              AND B.POST_CODE = A.AF_POST_CODE
	                                                                    
	                            WHERE  A.COMP_CODE = #{S_COMP_CODE}
							      AND A.APPLY_YN = 'Y'
	                            GROUP  BY A.COMP_CODE, A.PERSON_NUMB
	                          )         H2               ON H2.COMP_CODE        = H.COMP_CODE
	                                                    AND H2.PERSON_NUMB      = H.PERSON_NUMB
	              
	               LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE        = H.COMP_CODE
	                                                    AND M1.SUB_CODE         = H.POST_CODE
	                                                    AND M1.MAIN_CODE        = 'H005'     -- 직위코드
	               LEFT  JOIN BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE        = H.COMP_CODE
	                                                    AND M2.SUB_CODE         = H.PAY_GUBUN
	                                                    AND M2.MAIN_CODE        = 'H011'     -- 고용형태
	               LEFT  JOIN BSA100T   M3 WITH (NOLOCK) ON M3.COMP_CODE        = H.COMP_CODE
	                                                    AND M3.SUB_CODE         = H.EMPLOY_TYPE
	                                                    AND M3.MAIN_CODE        = 'H024'     -- 사원구분
	               LEFT  JOIN BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE        = H.COMP_CODE
	                                                    AND M4.SUB_CODE         = H.ABIL_CODE
	                                                    AND M4.MAIN_CODE        = 'H006'     -- 직책
	               LEFT  JOIN BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE        = H.COMP_CODE
	                                                    AND M5.SUB_CODE         = H.JOB_CODE
	                                                    AND M5.MAIN_CODE        = 'H008'     -- 담당업무
	               LEFT  JOIN BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE        = H.COMP_CODE
	                                                    AND M6.SUB_CODE         = H.SCHSHIP_CODE
	                                                    AND M6.MAIN_CODE        = 'H009'    -- 학력구분
	               LEFT  JOIN BSA100T   M7 WITH (NOLOCK) ON M7.COMP_CODE        = H.COMP_CODE
	                                                    AND M7.SUB_CODE         = H.GRADU_TYPE
	                                                    AND M7.MAIN_CODE        = 'H010'    -- 졸업구분
	               LEFT  JOIN BSA100T   M8 WITH (NOLOCK) ON M8.COMP_CODE        = H1.COMP_CODE
	                                                    AND M8.SUB_CODE         = H1.AGENCY_KIND
	                                                    AND M8.MAIN_CODE        = 'H084'    -- 보훈구분
	               LEFT  JOIN BSA100T   M9 WITH (NOLOCK) ON M9.COMP_CODE        = H1.COMP_CODE
	                                                    AND M9.SUB_CODE         = H1.HITCH_KIND
	                                                    AND M9.MAIN_CODE        = 'H085'    -- 장애구분
	               LEFT  JOIN BSA100T  M10 WITH (NOLOCK) ON M10.COMP_CODE       = H.COMP_CODE
	                                                    AND M10.SUB_CODE        = H.AFFIL_CODE
	                                                    AND M10.MAIN_CODE       = 'H173'    -- 직렬코드
	               LEFT  JOIN BSA100T  M11 WITH (NOLOCK) ON M11.COMP_CODE       = H.COMP_CODE
	                                                    AND M11.SUB_CODE        = H.PAY_GRADE_BASE
	                                                    AND M11.MAIN_CODE       = 'H174'    -- 호봉승급기준
	               LEFT  JOIN BSA100T  M12 WITH (NOLOCK) ON M12.COMP_CODE       = H.COMP_CODE
	                                                    AND M12.SUB_CODE        = H.OFFICE_CODE
	                                                    AND M12.MAIN_CODE       = 'GO01'    -- 영업소
	               LEFT  JOIN BSA100T  M13 WITH (NOLOCK) ON M13.COMP_CODE       = H.COMP_CODE
	                                                    AND M13.SUB_CODE        = H.ROUTE_GROUP
	                                                    AND M13.MAIN_CODE       = 'GO16'    -- 노선그룹
	               LEFT  JOIN BSA100T  M14 WITH (NOLOCK) ON M14.COMP_CODE       = H.COMP_CODE
	                                                    AND M14.SUB_CODE        = H.LICENSE_KIND
	                                                    AND M14.MAIN_CODE       = 'H176'    -- 운전면허구분
	               LEFT  JOIN BSA100T  M15 WITH (NOLOCK) ON M15.COMP_CODE       = H.COMP_CODE
	                                                    AND M15.SUB_CODE        = H.JOIN_CODE
	                                                    AND M15.MAIN_CODE       = 'H012'    -- 이사구분
	               LEFT  JOIN BSA100T  M16 WITH (NOLOCK) ON M16.COMP_CODE       = H.COMP_CODE
	                                                    AND M16.SUB_CODE        = H.RETR_RESN
	                                                    AND M16.MAIN_CODE       = 'H023'    -- 퇴사사유
	               LEFT  JOIN BSA100T  M17 WITH (NOLOCK) ON M17.COMP_CODE       = H.COMP_CODE
	                                                    AND M17.SUB_CODE        = H.PAY_CODE
	                                                    AND M17.MAIN_CODE       = 'H028'    -- 급여지급방식
	               LEFT  JOIN BSA100T  M18 WITH (NOLOCK) ON M18.COMP_CODE       = H.COMP_CODE
	                                                    AND M18.SUB_CODE        = H.PAY_PROV_FLAG
	                                                    AND M18.MAIN_CODE       = 'H031'    -- 지급차수
	               LEFT  JOIN BSA100T  M19 WITH (NOLOCK) ON M19.COMP_CODE       = H.COMP_CODE
	                                                    AND M19.SUB_CODE        = H.YEAR_GRADE_BASE
	                                                    AND M19.MAIN_CODE       = 'H174'    -- 근속승급기준
	               LEFT  JOIN BSA100T  M20 WITH (NOLOCK) ON M20.COMP_CODE       = H.COMP_CODE
	                                                    AND M20.SUB_CODE        = H.BONUS_KIND
	                                                    AND M20.MAIN_CODE       = 'H035'    -- 상여계산구분자
	               LEFT  JOIN BSA100T  M21 WITH (NOLOCK) ON M21.COMP_CODE       = H.COMP_CODE
	                                                    AND M21.SUB_CODE        = H.TAX_CODE
	                                                    AND M21.MAIN_CODE       = 'H029'    -- 연장수당세액구분
	               LEFT  JOIN BSA100T  M22 WITH (NOLOCK) ON M22.COMP_CODE       = H.COMP_CODE
	                                                    AND M22.SUB_CODE        = CONVERT(NVARCHAR(5), H.TAX_CODE2)
	                                                    AND M22.MAIN_CODE       = 'H029'    -- 보육수당세액구분
	               LEFT  JOIN BSA100T  M23 WITH (NOLOCK) ON M23.COMP_CODE       = H.COMP_CODE
	                                                    AND M23.SUB_CODE        = H.MAKE_SALE
	                                                    AND M23.MAIN_CODE       = 'B027'    -- 제조판관구분
	               LEFT  JOIN BSA100T  M24 WITH (NOLOCK) ON M24.COMP_CODE       = H.COMP_CODE
	                                                    AND M24.SUB_CODE        = H.LIVE_GUBUN
	                                                    AND M24.MAIN_CODE       = 'H007'    -- 거주구분
	               LEFT  JOIN BSA100T  M25 WITH (NOLOCK) ON M25.COMP_CODE       = H.COMP_CODE
	                                                    AND M25.SUB_CODE        = H.NATION_CODE
	                                                    AND M25.MAIN_CODE       = 'B012'    -- 국가코드
	               LEFT  JOIN BSA100T  M26 WITH (NOLOCK) ON M26.COMP_CODE       = H.COMP_CODE
	                                                    AND M26.SUB_CODE        = H.PAY_GUBUN2
	                                                    AND M26.MAIN_CODE       = 'H178'    -- 일용/일반구분
	                                                    
	               LEFT  JOIN BSA100T  M27 WITH (NOLOCK) ON M27.COMP_CODE       = H.COMP_CODE
	                                                    AND M27.SUB_CODE        = H.MAKE_SALE
	                                                    AND M27.MAIN_CODE       = 'B027'    -- 제조판관
	    		   LEFT  JOIN HBS400T  M28 WITH (NOLOCK) ON M28.COMP_CODE       = H.COMP_CODE
                                                        AND M28.COMPANY_CODE    = '1'
	    WHERE  H.COMP_CODE       = #{S_COMP_CODE}
	      AND  uniLITE.fnCheckCompDivAuth(H.COMP_CODE, H.DIV_CODE, #{S_USER_ID}) = 'Y'
	      AND  (M28.DAY_LABOR_RULE = '2' OR (M28.DAY_LABOR_RULE = '1' AND (H.PAY_GUBUN != '2' OR (H.PAY_GUBUN = '2' AND H.PAY_GUBUN2 = '2'))))
	    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
          AND  H.DIV_CODE    IN
			<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
			 	  #{item}
			</foreach>									
    	</if> 
    	<if test="@foren.Ognl@isNotEmpty(DEPTS)">
	      AND H.DEPT_CODE	 IN
		 	<foreach collection="DEPTS" item="item" separator="," close=")" open="(">
          		 #{item}
    	 </foreach>
		</if>
		<if test="@foren.Ognl@isNotEmpty(ANN_FR_DATE)">
		   AND H.JOIN_DATE 		&gt;= #{ANN_FR_DATE}			-- 입사일 FR
		</if>
		<if test="@foren.Ognl@isNotEmpty(ANN_TO_DATE)">
		   AND H.JOIN_DATE 		&lt;= #{ANN_TO_DATE}			-- 입사일 TO
		</if>
		<if test="@foren.Ognl@isNotEmpty(FR_RETR)">
		   AND H.RETR_DATE 		&gt;= #{FR_RETR}				-- 퇴사일 FR
		</if>
		<if test="@foren.Ognl@isNotEmpty(TO_RETR)">
		   AND H.RETR_DATE 		&lt;= #{TO_RETR}				-- 퇴사일 TO
		</if>
		<if test="@foren.Ognl@isNotEmpty(BASIS_FR_DATE)">
			<if test="@foren.Ognl@isNotEmpty(BASIS_TO_DATE)">
		   AND (H.RETR_DATE		&gt;= #{BASIS_FR_DATE} OR H.RETR_DATE = '00000000')
		   AND H.JOIN_DATE		&lt;= #{BASIS_TO_DATE}
			</if>
			<if test="@foren.Ognl@isEmpty(BASIS_TO_DATE)">
		   AND ((H.JOIN_DATE		&lt;= #{BASIS_FR_DATE} AND H.RETR_DATE = '00000000') OR
				(#{BASIS_FR_DATE} BETWEEN H.JOIN_DATE AND H.RETR_DATE))
			</if>
		</if>
		<if test="@foren.Ognl@isNotEmpty(BASIS_TO_DATE)">
			<if test="@foren.Ognl@isNotEmpty(BASIS_FR_DATE)">
		   AND (H.RETR_DATE		&gt;= #{BASIS_FR_DATE} OR H.RETR_DATE = '00000000')
		   AND H.JOIN_DATE		&lt;= #{BASIS_TO_DATE}
			</if>
			<if test="@foren.Ognl@isEmpty(BASIS_FR_DATE)">
		   AND ((H.JOIN_DATE		&lt;= #{BASIS_TO_DATE} AND H.RETR_DATE = '00000000') OR
				(#{BASIS_TO_DATE} BETWEEN H.JOIN_DATE AND H.RETR_DATE))
			</if>
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">
		   AND H.PAY_GUBUN  		= #{PAY_GUBUN}				-- 고용형태
		</if>
		<if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">
		   AND H.EMPLOY_TYPE  		= #{EMPLOY_TYPE}			-- 사원구분
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		   AND H.POST_CODE  		= #{POST_CODE}				-- 직위
		</if>
		<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
		   AND H.ABIL_CODE  		= #{ABIL_CODE}				-- 직책
		</if>
        <!-- 직종추가 -->
		<if test="@foren.Ognl@isNotEmpty(KNOC)">
		   AND H.KNOC  		         = #{KNOC}				-- 직종(추가)
		</if>

		<if test="@foren.Ognl@isNotEmpty(SCHSHIP_CODE)">
		   AND H.SCHSHIP_CODE  		= #{SCHSHIP_CODE}			-- 학력
		</if>
		<if test="@foren.Ognl@isNotEmpty(GRADU_TYPE)">
		   AND H.GRADU_TYPE  		= #{GRADU_TYPE}				-- 졸업구분
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">
		   AND H.PAY_GRADE_01  	 LIKE #{PAY_GRADE_01} + '%'		-- 급
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">
		   AND H.PAY_GRADE_02  	 LIKE #{PAY_GRADE_02}	+ '%'	-- 호
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(HIRE_INSUR_TYPE)">
		   AND H.HIRE_INSUR_TYPE  	= #{HIRE_INSUR_TYPE}		-- 고용보험
		</if>
		
		<if test="RDO_TYPE == 1">
		   AND H.RETR_DATE = '00000000' 						-- 재직구분
		</if>
	    <if test="RDO_TYPE == 00000000">
		   AND H.RETR_DATE &gt; #{RDO_TYPE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(SEX_CODE)">
		   AND H.SEX_CODE  			= #{SEX_CODE}				-- 성별
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GU2)">
		   AND H.PAY_GUBUN2  		= #{PAY_GU2}				-- 2 : 일반, 1 : 일용
		</if>
		<if test="@foren.Ognl@isNotEmpty(COST_POOL)">
		   AND H.COST_KIND 			= #{COST_POOL}		 	 	-- 사업명
		</if>
		<if test="@foren.Ognl@isNotEmpty(AGENCY_KIND)">
		   AND H1.AGENCY_KIND 		= #{AGENCY_KIND}		 	-- 보훈구분
		</if>
		<if test="@foren.Ognl@isNotEmpty(HITCH_KIND)">
		   AND H1.HITCH_KIND 		= #{HITCH_KIND}		 		-- 장애구분
		</if>
		<if test="@foren.Ognl@isNotEmpty(AFFIL_CODE)">
		   AND H.AFFIL_CODE 		= #{AFFIL_CODE}		 		-- 직렬
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_GRADE_BASE)">
		   AND H.PAY_GRADE_BASE 	= #{PAY_GRADE_BASE}		 	-- 승급기준 (호봉)
		</if>
		<if test="@foren.Ognl@isNotEmpty(NAME)">
		   AND H.NAME   LIKE + '%' +  #{NAME} + '%'
        </if>
        <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		   AND H.PERSON_NUMB  = #{PERSON_NUMB}
		</if>
		
		<if test="@foren.Ognl@isNotEmpty(MEMO)">				
		   AND H.MEMO_1       LIKE '%' + #{MEMO} + '%'			-- 찾아야함
	        OR H.MEMO_2       LIKE '%' + #{MEMO} + '%'
        </if>
        
        <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
		   AND H.PAY_CODE 			= #{PAY_CODE}		 		-- 급여지급방식 
		</if>
		<if test="@foren.Ognl@isNotEmpty(PAY_PROV_FLAG)">
		   AND H.PAY_PROV_FLAG 		= #{PAY_PROV_FLAG}		 	-- 급여지급차수
		</if>
		<if test="@foren.Ognl@isNotEmpty(PERSON_GROUP)">
		   AND M3.REF_CODE1 		= #{PERSON_GROUP}		 	-- 사원그룹
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEFORM_YN)">
		   AND (CASE WHEN ISNULL(DEFORM_YN,'N') = '' THEN 'N'
                     ELSE ISNULL(DEFORM_YN,'N') END) = #{DEFORM_YN}         -- 장애인여부
		</if>
		<if test="@foren.Ognl@isNotEmpty(JOB_CODE)">
		   AND H.JOB_CODE 	= #{JOB_CODE}		 				-- 담당업무
		</if>
		
		<choose>
    	<when test="@foren.Ognl@isNotEmpty(startYear)">
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= RIGHT('00' + LTRIM(RTRIM(#{startYear})), '2') + '.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= RIGHT('00' + LTRIM(RTRIM(#{startYear})), '2') + '.00.00'
    			</otherwise>
    		</choose>
    	</when>
    	<otherwise>
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</otherwise>
    		</choose>
    	</otherwise>
    </choose>
    
    <choose>
    	<when test="@foren.Ognl@isNotEmpty(endYear)">
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(endMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= RIGHT('00' + LTRIM(RTRIM(#{endYear})), '2') + '.' + RIGHT('00' + LTRIM(RTRIM(#{endMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= RIGHT('00' + LTRIM(RTRIM(#{endYear})), '2') + '.00.00'
    			</otherwise>
    		</choose>
    	</when>
    	<otherwise>
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startmonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{endMonth})), '2') + '.00'
    			</when>
    		</choose>
    	</otherwise>
    </choose>
		
        ORDER BY H.DIV_CODE, H.DEPT_CODE, H.POST_CODE, H.JOIN_DATE, H.NAME, H.PERSON_NUMB 
    
INSERT INTO TEMP_TABLE_160426 (
					GUBUN
	              , DIV_CODE		, DEPT_NAME			, DEPT_CODE			, POST_CODE			, PERSON_CNT
	              , NAME			, PERSON_NUMB		, NAME_ENG          , NAME_CHI          , DOC_ID              	    		   
	              , REPRE_NUM		, ORI_JOIN_DATE     , JOIN_DATE         , RETR_DATE         , RETR_RESN           
	              , ORI_YEAR_DIFF	, YEAR_DIFF			, PAY_GUBUN         , PAY_GUBUN2        , EMPLOY_TYPE         
	              , ABIL_CODE       , AFFIL_CODE        , MAKE_SALE			, KNOC    /*직종추가*/  , JOB_CODE          
	              , JOIN_CODE       , GRADE				 
	    
	                -- 급여관련
	              , ANNOUNCE_DATE   , PAY_GRADE         , PAY_GRADE_BASE    , YEAR_GRADE        , YEAR_GRADE_BASE     
	              , PAY_CODE        , PAY_PROV_FLAG     , ANNUAL_SALARY_I   , WAGES_STD_I       , PAY_PRESERVE_I      
	              , BONUS_KIND      , BONUS_STD_I       , COM_YEAR_WAGES    , TAX_CODE          , TAX_CODE2           
	    			 
	    			 
	              , ANU_BASE_I      , ANU_INSUR_I       , MED_AVG_I         , MED_INSUR_I       , ORI_MED_INSUR_I     
	              , OLD_MED_INSUR_I , HIRE_AVG_I        , HIRE_INSUR_I        

	              , KOR_ADDR        , TELEPHON          , PHONE_NO          , BIRTH_DATE        , WEDDING_DATE        
	              , EMAIL_SEND_YN   , EMAIL_ADDR        , COST_POOL         , BILL_DIV_NAME     , BUSS_OFFICE_CODE    
	              , NATION_CODE     , BANK_CODE1        , BANK_ACCOUNT1		, BANKBOOK_NAME1    , BANK_CODE2          
	              , BANK_ACCOUNT2	, BANKBOOK_NAME2      
	    
	                -- 급여계산시 적용 여부
	              , PAY_PROV_YN     , PAY_PROV_STOP_YN  , COMP_TAX_I        , HIRE_INSUR_TYPE   , BONUS_PROV_YN       
	              , YEAR_GIVE       , YEAR_CALCU        , LABOR_UNON_YN     , RETR_GIVE         , RETR_PENSION_KIND   
	    
	                -- 연말정산 관려
	              , FOREIGN_NUM		, LIVE_GUBUN        , HOUSEHOLDER_YN    , FOREIGN_SKILL_YN  , SPOUSE              
	              , WOMAN           , ONE_PARENT        , SUPP_AGED_NUM     , DEFORM_YN         , DEFORM_NUM          
	              , CHILD_20_NUM    , AGED_NUM          , AGED_NUM70        , BRING_CHILD_NUM     
	    
	                -- 개인기타
	              , CARD_NUM        , ESS_USE_YN        , REMARK            , ORI_ADDR          , AGENCY_NAME         
	              , AGENCY_GRADE    , HITCH_NAME        , HITCH_GRADE       , HITCH_DATE          
	    
	              -- 면허/기타 Tab
	              , OFFICE_CODE     , ROUTE_GROUP       , LICENSE_KIND      , LICENSE_NO        , LICENSE_ACQ_DATE    
	              , LICENSE_FRDATE  , LICENSE_TODATE    , BUS_CERTIFICATE   , CERTI_ACQ_DATE    , CIVIL_DEF_YN        
	              , CIVIL_DEF_NUM   , MEMO_1            , MEMO_2              

)



SELECT				
				    '2'			 AS GUBUN
				  ,	DIV_CODE     AS DIV_CODE             -- 사업장
				  , '합계'		 AS DEPT_NAME
	              , DEPT_CODE    AS DEPT_CODE            -- 부서
	              , ''       AS POST_CODE            
	              , ''       AS PERSON_CNT
	              , SUM(CONVERT(numeric,PERSON_CNT)) AS NAME
	              , ''       AS PERSON_NUMB          
	              , ''       AS NAME_ENG             
	              , ''       AS NAME_CHI             
	              , 0        AS DOC_ID               
	              , ''		 AS REPRE_NUM			 
	              , ''		 AS ORI_JOIN_DATE        
	              , ''	 	 AS JOIN_DATE            
	              , ''       AS RETR_DATE            
	              , ''		 AS RETR_RESN            
	              , ''		 AS ORI_YEAR_DIFF		 
	              , ''		 AS YEAR_DIFF			 
	              , ''		 AS PAY_GUBUN            
	              , ''       AS PAY_GUBUN2           
	              , ''		 AS EMPLOY_TYPE          
	              , ''		 AS ABIL_CODE            
	              , ''		 AS AFFIL_CODE
				  , ''		 AS MAKE_SALE	                  
                   /*직종추가*/
	              , ''		 AS KNOC       
                      
	              , ''		 AS JOB_CODE             
	              , ''		 AS JOIN_CODE            
	              , ''		 AS GRADE  				 
	    
	                -- 급여관련
	              , ''       AS ANNOUNCE_DATE        
	              , ''		 AS PAY_GRADE            
	              , '' 	     AS PAY_GRADE_BASE       
	              , ''       AS YEAR_GRADE           
	              , ''       AS YEAR_GRADE_BASE      
	              , ''       AS PAY_CODE             
	              , ''       AS PAY_PROV_FLAG        
	              , 0        AS ANNUAL_SALARY_I      
	              , 0        AS WAGES_STD_I          
	              , 0        AS PAY_PRESERVE_I       
	              , ''       AS BONUS_KIND           
	              , 0        AS BONUS_STD_I          
	              , 0        AS COM_YEAR_WAGES       
	              , ''       AS TAX_CODE             
	              , ''       AS TAX_CODE2            
	              , 0        AS ANU_BASE_I           
	              , 0        AS ANU_INSUR_I          
	              , 0        AS MED_AVG_I            
	              , 0        AS MED_INSUR_I          
	              , 0        AS ORI_MED_INSUR_I      
	              , 0        AS OLD_MED_INSUR_I      
	              , 0        AS HIRE_AVG_I           
	              , 0        AS HIRE_INSUR_I         
	              , ''       AS KOR_ADDR             
	              , ''       AS TELEPHON             
	              , ''       AS PHONE_NO             
	              , ''       AS BIRTH_DATE           
	              , ''       AS WEDDING_DATE         
	              , ''       AS EMAIL_SEND_YN        
	    
	              , ''       AS EMAIL_ADDR           
	              , ''       AS COST_POOL            
	              , ''       AS BILL_DIV_NAME        
	              , ''       AS BUSS_OFFICE_CODE     
	              , ''       AS NATION_CODE          
	              , ''       AS BANK_CODE1           
	              ,''		 AS BANK_ACCOUNT1 		 
	              , ''       AS BANKBOOK_NAME1       
	              , ''       AS BANK_CODE2           
	              , ''		 AS BANK_ACCOUNT2 		 
	              , ''       AS BANKBOOK_NAME2       
	    
	                -- 급여계산시 적용 여부
	              , ''       AS PAY_PROV_YN          
	              , ''       AS PAY_PROV_STOP_YN     
	              , ''       AS COMP_TAX_I           
	              , ''       AS HIRE_INSUR_TYPE      
	              ,''        AS BONUS_PROV_YN        
	              , ''       AS YEAR_GIVE            
	              , ''       AS YEAR_CALCU           
	              , ''       AS LABOR_UNON_YN        
	              , ''       AS RETR_GIVE            
	              , ''       AS RETR_PENSION_KIND    
	    
	                -- 연말정산 관려
	              , ''		 AS FOREIGN_NUM     	 
	              , ''       AS LIVE_GUBUN           
	              , ''       AS HOUSEHOLDER_YN       
	              , ''       AS FOREIGN_SKILL_YN     
	              , ''       AS SPOUSE               
	              , ''       AS WOMAN                
	              , ''       AS ONE_PARENT           
	              , 0        AS SUPP_AGED_NUM        
	              , ''       AS DEFORM_YN            
	              , 0        AS DEFORM_NUM           
	              , 0        AS CHILD_20_NUM         
	              , 0        AS AGED_NUM             
	              , 0        AS AGED_NUM70           
	              , 0        AS BRING_CHILD_NUM      
	    
	                -- 개인기타
	              , ''       AS CARD_NUM             
	              , ''       AS ESS_USE_YN           
	              , ''       AS REMARK               
	              , ''       AS ORI_ADDR             
	              , ''       AS AGENCY_NAME          
	              , ''       AS AGENCY_GRADE         
	              , ''       AS HITCH_NAME           
	              , 0        AS HITCH_GRADE          
	              , ''       AS HITCH_DATE           
	    
	              -- 면허/기타 Tab
	              , ''       AS OFFICE_CODE          
	              , ''       AS ROUTE_GROUP          
	              , ''       AS LICENSE_KIND         
	              , ''       AS LICENSE_NO           
	              , ''		 AS LICENSE_ACQ_DATE     
	              , ''       AS LICENSE_FRDATE       
	              , ''       AS LICENSE_TODATE       
	              , ''       AS BUS_CERTIFICATE      
	              , ''       AS CERTI_ACQ_DATE       
	              , ''       AS CIVIL_DEF_YN         
	              , ''       AS CIVIL_DEF_NUM        
	              , ''       AS MEMO_1               
	              , ''       AS MEMO_2               
		FROM TEMP_TABLE_160426
		GROUP BY DIV_CODE, DEPT_CODE



		SELECT * FROM TEMP_TABLE_160426
		
		<if test="CHKCNT == &quot;N&quot;">
		    WHERE GUBUN != '2'
		</if>
		
		ORDER BY DIV_CODE, DEPT_CODE, GUBUN ,POST_CODE ,JOIN_DATE ,NAME, PERSON_NUMB
    
    	DROP TABLE TEMP_TABLE_160426
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END
	</select>
	
	<select id="hum920skrService.selectDataList" parameterType="Map" resultType="rMap">			
	
		/* hum920skr.Chum920skr[fnHum920nQ] */
    	SELECT (SELECT X.DIV_NAME
              FROM BOR120T X
             WHERE X.COMP_CODE = H.COMP_CODE
               AND X.DIV_CODE = H.DIV_CODE) DIV_NAME
         , H.DEPT_NAME
         , MAX(M1.CODE_NAME) AS POST_NAME 
         , '1' AS PERSON_CNT
         , H.NAME 
         , H.PERSON_NUMB 
         , unilite.fnCipherDecrypt(H.REPRE_NUM, 'A') AS REPRE_NUM
         , CASE WHEN H.ORI_JOIN_DATE='00000000' THEN ''
                ELSE uniLITE.fnGetUserDate(H.COMP_CODE, H.ORI_JOIN_DATE)
                END ORI_JOIN_DATE 
         , JOIN_DATE = uniLITE.fnGetUserDate(H.COMP_CODE, H.JOIN_DATE) 
         , CASE WHEN H.RETR_DATE='00000000' THEN ''
                ELSE uniLITE.fnGetUserDate(H.COMP_CODE, H.RETR_DATE)
                END              AS RETR_DATE 
         , unilite.fnHumanDateDiff(ISNULL(H.ORI_JOIN_DATE,'00000000'),CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END ,'LONG_TOT_ALL') AS ORI_YEAR_DIFF 
         , unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL')                         AS YEAR_DIFF 
         , MAX(M2.CODE_NAME)                     AS PAY_GUBUN 
         , MAX(M3.CODE_NAME)                     AS EMPLOY_TYPE
         , MAX(M4.CODE_NAME)                     AS ABIL_CODE 
         , MAX(M5.CODE_NAME)                     AS JOB_CODE
         , MAX(M6.CODE_NAME) + MAX(M7.CODE_NAME) AS GRADE 
         , CASE WHEN H.HIRE_INSUR_TYPE ='Y' THEN uniLITE.fnGetTxt('H0088')
                ELSE uniLITE.fnGetTxt('H0089')
                END            AS HIRE_INSUR_TYPE 
         , H.ANU_BASE_I 
         , H.ANU_INSUR_I 
         , H.MED_AVG_I 
         , H.MED_INSUR_I 
         , (CASE WHEN H.PAY_GRADE_01='' THEN ''
                 ELSE H.PAY_GRADE_01 + uniLITE.fnGetTxt('H0015')
                 END
         + ' '
         + CASE WHEN H.PAY_GRADE_02='' THEN ''
                ELSE H.PAY_GRADE_02 +uniLITE.fnGetTxt('H0090')
                END)           AS PAY_GRADE 
         , H.KOR_ADDR
         , H.TELEPHON
         , H.PHONE_NO
         , CASE WHEN H.BIRTH_DATE IS NULL THEN '' 
                WHEN H.BIRTH_DATE ='' THEN '' 
                ELSE CASE WHEN H.SOLAR_YN = 'Y' THEN uniLITE.fnGetUserDate(H.COMP_CODE, H.BIRTH_DATE) + '(+)' 
                          ELSE uniLITE.fnGetUserDate(H.COMP_CODE, H.BIRTH_DATE) + '(-)' 
                          END 
                END            AS BIRTH_DATE
         , CASE WHEN H.WEDDING_DATE IS NULL THEN '' 
                WHEN H.WEDDING_DATE ='' THEN '' 
                ELSE uniLITE.fnGetUserDate(H.COMP_CODE, H.WEDDING_DATE) 
                END            AS WEDDING_DATE 
         , H.EMAIL_ADDR 
         , C.COST_POOL_NAME    AS COST_POOL
         , MAX(M8.CODE_NAME)        AS AGENCY_NAME     /* 보훈구분 */ 
         , H1.AGENCY_GRADE     AS AGENCY_GRADE     /* 보훈등급 */
         , MAX(M9.CODE_NAME)        AS HITCH_NAME      /* 장애구분 */
         , H1.HITCH_GRADE      AS HITCH_GRADE     /* 장애등급 */
         , H1.HITCH_DATE       AS HITCH_DATE      /* 장애인 등록일 */
      FROM             HUM100T   H  WITH (NOLOCK)
            LEFT  JOIN CBM600T   C  WITH (NOLOCK) ON C.COMP_CODE         = H.COMP_CODE
                                                 AND C.COST_POOL_CODE    = H.COST_KIND
            LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE        = H.COMP_CODE
                                                 AND M1.SUB_CODE         = H.POST_CODE
                                                 AND M1.MAIN_CODE        = 'H005'
            LEFT  JOIN BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE        = H.COMP_CODE
                                                 AND M2.SUB_CODE         = H.PAY_GUBUN
                                                 AND M2.MAIN_CODE        = 'H011'
            LEFT  JOIN BSA100T   M3 WITH (NOLOCK) ON M3.COMP_CODE        = H.COMP_CODE
                                                 AND M3.SUB_CODE         = H.EMPLOY_TYPE
                                                 AND M3.MAIN_CODE        = 'H024'
            LEFT  JOIN BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE        = H.COMP_CODE
                                                 AND M4.SUB_CODE         = H.ABIL_CODE
                                                 AND M4.MAIN_CODE        = 'H006'
            LEFT  JOIN BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE        = H.COMP_CODE
                                                 AND M5.SUB_CODE         = H.JOB_CODE
                                                 AND M5.MAIN_CODE        = 'H008'
            LEFT  JOIN BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE        = H.COMP_CODE
                                                 AND M6.SUB_CODE         = H.SCHSHIP_CODE
                                                 AND M6.MAIN_CODE        = 'H009'
            LEFT  JOIN BSA100T   M7 WITH (NOLOCK) ON M7.COMP_CODE        = H.COMP_CODE
                                                 AND M7.SUB_CODE         = H.GRADU_TYPE
                                                 AND M7.MAIN_CODE        = 'H010'
            LEFT  JOIN HUM710T   H1 WITH (NOLOCK) ON H1.COMP_CODE        = H.COMP_CODE
                                                 AND H1.PERSON_NUMB      = H.PERSON_NUMB
            LEFT  JOIN BSA100T   M8 WITH (NOLOCK) ON M8.COMP_CODE        = H1.COMP_CODE
                                                 AND M8.SUB_CODE         = H1.AGENCY_KIND
                                                 AND M8.MAIN_CODE        = 'H084'
            LEFT  JOIN BSA100T   M9 WITH (NOLOCK) ON M9.COMP_CODE        = H1.COMP_CODE
                                                 AND M9.SUB_CODE         = H1.HITCH_KIND
                                                 AND M9.MAIN_CODE        = 'H085'
            LEFT  JOIN HBS400T  M10 WITH (NOLOCK) ON M10.COMP_CODE = H.COMP_CODE
                                                 AND M10.COMPANY_CODE = '1'
     WHERE H.COMP_CODE = #{S_COMP_CODE}
     AND  (M10.DAY_LABOR_RULE = '2' OR (M10.DAY_LABOR_RULE = '1' AND (H.PAY_GUBUN != '2' OR (H.PAY_GUBUN = '2' AND H.PAY_GUBUN2 = '2'))))
    <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">					
       AND H.DIV_CODE IN
			<foreach collection="DIV_CODE" item="item" separator="," close=")" open="(">
			 #{item}
			</foreach>									
    </if> 
    <if test="@foren.Ognl@isNotEmpty(DEPTS)">
	   AND  H.DEPT_CODE	 IN
		 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
          		 #{item}
    	 </foreach>
	</if>
    <if test="@foren.Ognl@isNotEmpty(JOIN_DATE_FROM)">    AND H.JOIN_DATE &gt;= #{JOIN_DATE_FROM} </if>
    <if test="@foren.Ognl@isNotEmpty(JOIN_DATE_TO)">    AND H.JOIN_DATE &lt;= #{JOIN_DATE_TO} </if>
    <if test="@foren.Ognl@isNotEmpty(RETR_DATE_FROM)">    AND H.RETR_DATE &gt;= #{RETR_DATE_FROM} </if>
    <if test="@foren.Ognl@isNotEmpty(RETR_DATE_TO)">    AND H.RETR_DATE &lt;= #{RETR_DATE_TO} </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN)">    AND H.PAY_GUBUN = #{PAY_GUBUN} </if>
    <if test="@foren.Ognl@isNotEmpty(EMPLOY_TYPE)">    AND H.EMPLOY_TYPE = #{EMPLOY_TYPE} </if>
    <if test="@foren.Ognl@isNotEmpty(POST_CODE)">   AND H.POST_CODE = #{POST_CODE} </if>
    <if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">   AND H.ABIL_CODE = #{ABIL_CODE} </if>
    <if test="@foren.Ognl@isNotEmpty(SCHSHIP_CODE)">    AND H.SCHSHIP_CODE = #{SCHSHIP_CODE} </if>
    <if test="@foren.Ognl@isNotEmpty(GRADU_TYPE)">    AND H.GRADU_TYPE= #{GRADU_TYPE} </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">    AND H.PAY_GRADE_01 LIKE #{PAY_GRADE_01} + '%' </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">    AND H.PAY_GRADE_02 LIKE #{PAY_GRADE_02} + '%' </if>
    <if test="@foren.Ognl@isNotEmpty(HIRE_INSUR_TYPE)">    AND H.HIRE_INSUR_TYPE= #{HIRE_INSUR_TYPE} </if>
    <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">    AND H.PERSON_NUMB= #{PERSON_NUMB} </if>
    
    <if test="RDO_TYPE == 1">
				AND H.RETR_DATE = '00000000' 
	</if>
    <if test="RDO_TYPE == 00000000">
				AND H.RETR_DATE &gt; #{RDO_TYPE}
	</if>
    
    <if test="@foren.Ognl@isNotEmpty(SEX_CODE)">	AND H.SEX_CODE = #{SEX_CODE} </if>
    <if test="@foren.Ognl@isNotEmpty(PAY_GUBUN2)">   AND H.PAY_GUBUN2 = #{PAY_GUBUN2} </if>
    <if test="@foren.Ognl@isNotEmpty(COST_POOL)">    AND H.COST_KIND  = #{COST_POOL} </if>
    <if test="@foren.Ognl@isNotEmpty(AGENCY_KIND)">  AND H1.AGENCY_KIND  = #{AGENCY_KIND} </if>
    <if test="@foren.Ognl@isNotEmpty(HITCH_KIND)">   AND H1.HITCH_KIND  = #{HITCH_KIND} </if>
    
    <choose>
    	<when test="@foren.Ognl@isNotEmpty(startYear)">
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= RIGHT('00' + LTRIM(RTRIM(#{startYear})), '2') + '.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= RIGHT('00' + LTRIM(RTRIM(#{startYear})), '2') + '.00.00'
    			</otherwise>
    		</choose>
    	</when>
    	<otherwise>
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&gt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{startMonth})), '2') + '.00'
    			</otherwise>
    		</choose>
    	</otherwise>
    </choose>
    
    <choose>
    	<when test="@foren.Ognl@isNotEmpty(endYear)">
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(endMonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= RIGHT('00' + LTRIM(RTRIM(#{endYear})), '2') + '.' + RIGHT('00' + LTRIM(RTRIM(#{endMonth})), '2') + '.00'
    			</when>
    			<otherwise>
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= RIGHT('00' + LTRIM(RTRIM(#{endYear})), '2') + '.00.00'
    			</otherwise>
    		</choose>
    	</when>
    	<otherwise>
    		<choose>
    			<when test="@foren.Ognl@isNotEmpty(startmonth)">
    				AND unilite.fnHumanDateDiff(H.JOIN_DATE,CASE WHEN H.RETR_DATE != '00000000' THEN H.RETR_DATE ELSE CONVERT(NVARCHAR(8),GETDATE(),112) END,'LONG_TOT_ALL') 
    				&lt;= '00.' + RIGHT('00' + LTRIM(RTRIM(#{endMonth})), '2') + '.00'
    			</when>
    		</choose>
    	</otherwise>
    </choose>
    
     GROUP BY H.DEPT_NAME,H.DIV_CODE,H.POST_CODE,H.PERSON_NUMB,H.ORI_JOIN_DATE,H.JOIN_DATE 
            , H.RETR_DATE,H.PAY_GUBUN,H.ABIL_CODE,H.JOB_CODE, H.SCHSHIP_CODE
            , H.GRADU_TYPE,H.HIRE_INSUR_TYPE,H.PENS_GRADE,H.MED_INSUR_I,H.PAY_GRADE_01,H.PAY_GRADE_02 ,H.TELEPHON 
            , H.PHONE_NO , H.KOR_ADDR, H.BIRTH_DATE, H.WEDDING_DATE, H.SOLAR_YN, H.DEPT_CODE
            , H.NAME, unilite.fnCipherDecrypt(H.REPRE_NUM, 'A'),H.EMPLOY_TYPE,H.EMAIL_ADDR, H.MED_AVG_I, H.COMP_CODE 
            , H.ANU_BASE_I, H.ANU_INSUR_I, C.COST_POOL_NAME, H1.AGENCY_GRADE,H1.HITCH_GRADE, H1.HITCH_DATE 
     ORDER BY H.DIV_CODE, H.DEPT_CODE, H.POST_CODE, H.JOIN_DATE, H.NAME, H.PERSON_NUMB 
	</select>
</mapper>