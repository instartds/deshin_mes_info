<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum290ukrServiceImpl">
	<select id="hum290ukrServiceImpl.selectColumns" parameterType="Map" resultType="rMap">
	<!-- hum290ukr.Chum290ukr[fnHum290QStd] Query00 -->
	
		SELECT  SUB_CODE, CODE_NAME, REF_CODE1
	    FROM    BSA100T WITH (NOLOCK)
	    WHERE   COMP_CODE    = #{S_COMP_CODE}
	    AND     MAIN_CODE    = N'HP05'
	    AND     SUB_CODE    != N'$'
	    AND     USE_YN       = N'Y'
	    ORDER BY SORT_SEQ
	</select>

	<select id="hum290ukrServiceImpl.select1" parameterType="Map" resultType="rMap">
		--hum290ukrServiceImpl.select1
			BEGIN
			    SET NOCOUNT ON
			    SET ARITHABORT ON
			    SET ANSI_WARNINGS OFF 
			
			    DECLARE   @YEAR                 NVARCHAR(04)    <!-- 평정년도    (필수) -->
			            , @GUBUN                NVARCHAR(02)    <!-- 구분코드    (필수) -->
			            , @DIV_CODE             NVARCHAR(16)    <!-- 사업장      (선택) -->
			            , @PAY_TYPE             NVARCHAR(10)    <!-- 급여지급방식(선택) -->
			            , @DEPT_START           NVARCHAR(16)    <!-- 부서시작    (선택) -->
			            , @DEPT_END             NVARCHAR(16)    <!-- 부서종료    (선택) -->
			            , @PERSON_NUMB          NVARCHAR(20)    <!-- 사번        (선택) -->
			            , @PERSON_NAME          NVARCHAR(60)    <!-- 성명        (선택) -->
			            , @PAY_GRADE_01         NVARCHAR(40)    <!-- 급          (선택) -->
			            , @PAY_GRADE_02         NVARCHAR(40)    <!-- 호          (선택) -->
			            , @GRADE_PERSON_NUMB1   NVARCHAR(20)    <!-- 평정자코드  (선택) -->
			            , @GRADE_PERSON1        NVARCHAR(20)    <!-- 평정자명    (선택) -->
			            , @GRADE_PERSON_NUMB2   NVARCHAR(20)    <!-- 확인자코드  (선택) -->
			            , @GRADE_PERSON2        NVARCHAR(20)    <!-- 확인자명    (선택) -->
			            , @COMP_CODE            NVARCHAR(10)    <!-- 법인코드    (필수) -->
			            , @SEARCH_TYPE          INT             <!-- 탭구분      (필수) -->
			            , @BASE_DATE            NVARCHAR(08)    <!-- 기준일자    (필수) -->
			
			    SET         @YEAR               = #{DUTY_YYYY}
			    SET         @GUBUN              = #{MERITS_GUBUN}
			    SET         @DIV_CODE           =  #{DIV_CODE}
			    SET         @PAY_TYPE           =  #{PAY_CODE}
			    SET         @DEPT_START         =  #{DEPT_CODE_FROM}
			    SET         @DEPT_END           =  #{DEPT_CODE_TO}
			    SET         @PERSON_NUMB        =  #{PERSON_NUMB}
			    SET         @PERSON_NAME        =  #{NAME}
			    SET         @PAY_GRADE_01       =  ''
			    SET         @PAY_GRADE_02       =  ''
			    SET         @GRADE_PERSON_NUMB1 = #{PERSON_NUMB1}
			    SET         @GRADE_PERSON1      = #{NAME1}
			    SET         @GRADE_PERSON_NUMB2 = #{PERSON_NUMB2}
			    SET         @GRADE_PERSON2      = #{NAME2}
			    SET         @COMP_CODE          = #{S_COMP_CODE}
			    SET         @SEARCH_TYPE        = 1
			    SET         @BASE_DATE          = #{BASE_DATE}
			
			
			    DECLARE @MAIN_DT        NVARCHAR(8)
			
			    SELECT  @MAIN_DT = @YEAR + RIGHT('0' + CAST(CASE    WHEN CAST(@GUBUN AS INT) &gt; 85 THEN CAST(@GUBUN AS INT) - 85  <!-- 종합 -->
			                                                        WHEN CAST(@GUBUN AS INT) &gt; 70 THEN CAST(@GUBUN AS INT) - 70  <!-- 포상.자격 -->
			                                                        WHEN CAST(@GUBUN AS INT) &gt; 50 THEN CAST(@GUBUN AS INT) - 50  <!-- 훈평 -->
			                                                        WHEN CAST(@GUBUN AS INT) &gt; 30 THEN CAST(@GUBUN AS INT) - 30  <!-- 경평 -->
			                                                        WHEN CAST(@GUBUN AS INT) &gt; 10 THEN CAST(@GUBUN AS INT) - 10  <!-- 근평 -->
			                                                        ELSE 1
			                                                END AS NVARCHAR), 2) + '01'
			
			    DECLARE     @TypeKey                NVARCHAR(20)
			
			    SET @TypeKey  = REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR(30), GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '')
			
			    IF NOT EXISTS   (
			                    SELECT TOP 1 1
			                    FROM   T_HUM290UKR1 WITH (NOLOCK)
			                    WHERE  TYPE_KEY LIKE LEFT(@TypeKey, 8) + '%'
			                    )
			    BEGIN
			        TRUNCATE TABLE T_HUM290UKR1
			    END
			
			
			<!--  [최종승진 데이터 ] -->
			    INSERT  INTO T_HUM290UKR1(TYPE_KEY, COMP_CODE, PERSON_NUMB, JOIN_DATE, ANNOUNCE_DATE)
			    SELECT  @TypeKey
			          , A.COMP_CODE
			          , A.PERSON_NUMB
			          , A.JOIN_DATE
			          , MAX(CASE WHEN M.REF_CODE1 = 'Y' THEN B.ANNOUNCE_DATE END)   AS ANNOUNCE_DATE
			    FROM               HUM100T A  WITH (NOLOCK)
			            LEFT  JOIN HUM760T B  WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
			                                               AND B.PERSON_NUMB    = A.PERSON_NUMB
			            LEFT  JOIN BSA100T M  WITH (NOLOCK) ON M.COMP_CODE      = B.COMP_CODE
			                                               AND M.MAIN_CODE      = 'H094'
			                                               AND M.SUB_CODE       = B.ANNOUNCE_CODE
			    WHERE   A.COMP_CODE = @COMP_CODE
 			    AND     uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
			    AND     A.RETR_DATE = '00000000'
			    GROUP BY A.COMP_CODE, A.PERSON_NUMB, A.JOIN_DATE
			
			<!--  [ 데이터 조회 ] -->
			    SELECT    ROW_NUMBER() OVER(ORDER BY A.DEPT_CODE , A.PERSON_NUMB) AS SEQ                          <!-- 순번 -->
			    		, A.DEPT_CODE
			            , A.DEPT_NAME                                                                               <!-- 부서 -->
			            , A.PAY_GRADE_01                                                                            <!-- 급 -->
			            , A.PAY_GRADE_02                                                                            <!-- 호 -->
			            , A.PERSON_NUMB                                                                             <!-- 사번 -->
			            , A.NAME                                                                                    <!-- 성명 -->
			
			            <!-- 근무성적평정 -->
			            , B1.REAL_GRADE_1
			            , B1.CONV_GRADE_1
			            , B1.REAL_GRADE_2
			            , B1.CONV_GRADE_2
			            , B1.REAL_GRADE_3
			            , B1.CONV_GRADE_3
			            , CASE @SEARCH_TYPE
			                   WHEN 1 THEN B.MERITS_GRADE
			              END                                                     AS WORK_GRADE                      <!-- 합계 -->
			
			            <!-- 경력평정 -->
			            , CASE WHEN ISNULL(B2.MERITS_GRADE    , '') = ''
			                   THEN CASE WHEN F.BAS_CAREER &lt;= 0
			                             THEN NULL
			                             ELSE CONVERT(NVARCHAR, F.BAS_CAREER)
			                          END
			                   ELSE CASE WHEN F.VALIDITY_MONTH &gt; 0
			                             THEN CASE WHEN CONVERT(INT, B2.MERITS_PER_GRADE) &lt; F.VALIDITY_MONTH
			                                       THEN CASE WHEN CONVERT(INT, B2.MERITS_GRADE) - (CONVERT(INT, F.VALIDITY_MONTH - B2.MERITS_PER_GRADE)) &lt;=0 
			                                                 THEN NULL
			                                                 ELSE CONVERT(NVARCHAR, CONVERT(INT, B2.MERITS_GRADE) - (CONVERT(INT, F.VALIDITY_MONTH - B2.MERITS_PER_GRADE)))
			                                             END
			                                       ELSE B2.MERITS_GRADE
			                                   END 
			                             ELSE B2.MERITS_GRADE
			                         END
			              END + N' 개월'                                          AS BAS_CAREER                      <!-- 기본경력 -->
			              
			            , CASE WHEN ISNULL(B2.MERITS_PER_GRADE, '') = ''
			                   THEN CASE WHEN F.EXC_CAREER &lt;=0 
			                             THEN NULL
			                             ELSE CONVERT(NVARCHAR, F.EXC_CAREER)
			                         END
			                   ELSE CASE WHEN F.VALIDITY_MONTH &gt; 0
			                             THEN CASE WHEN CONVERT(INT, B2.MERITS_PER_GRADE) &lt;= F.VALIDITY_MONTH
			                                       THEN NULL
			                                       ELSE CONVERT(NVARCHAR, CONVERT(INT, B2.MERITS_PER_GRADE) - F.VALIDITY_MONTH)
			                                   END
			                             ELSE B2.MERITS_PER_GRADE
			                          END                              
			              END + N' 개월'                                          AS EXC_CAREER                      <!-- 초과경력 -->
			              
			            , CASE WHEN F.VALIDITY_MONTH &lt;= 0 
			                   THEN NULL
			                   ELSE CONVERT(NVARCHAR, F.VALIDITY_MONTH)
			               END + N' 개월'                                         AS VALID_MONTHS                    <!-- 제외경력 -->
			               
			            , CASE WHEN F.VALIDITY_MONTH &lt;= 0 
			                   THEN 0
			                   ELSE CONVERT(NVARCHAR, F.VALIDITY_MONTH)
			               END                                                    AS DEFER_MONTHS                    <!-- 제외경력 -->
			            , CASE @SEARCH_TYPE
			                   WHEN 2 THEN CASE WHEN ISNULL(B.MERITS_GRADE     , '') = ''
			                                    THEN CASE WHEN F.EXC_YEAR = 0 THEN F1.CODE_NAME
			                                              WHEN F.EXC_YEAR = 1 THEN F1.REF_CODE1
			                                              WHEN F.EXC_YEAR = 2 THEN F1.REF_CODE2
			                                              WHEN F.EXC_YEAR = 3 THEN F1.REF_CODE3
			                                              WHEN F.EXC_YEAR = 4 THEN F1.REF_CODE4
			                                              WHEN F.EXC_YEAR = 5 THEN F1.REF_CODE5
			                                              ELSE '0' END   
			                                    ELSE B.MERITS_GRADE
			                               END
			              END                                                    AS CAREER_GRADE                    <!-- 점수 -->
			
			            <!-- 훈련평정 -->
			            , D.EDU_TIME                                             AS EDU_TIME                        <!-- 교육시간 -->
			            , D1.REF_CODE4                                           AS EDU_TIME_LIMIT                  <!-- 최저목표시간 -->
			            , CONVERT(NVARCHAR, D.EDU_TIME / CONVERT(NUMERIC(7, 3), D1.REF_CODE4) * 100) + '%' AS EDU_PERCENT <!-- 달성율 -->
			
			            <!-- 포상 및 자격 -->
			            , ISNULL(E3.QUAL_NAME, '')                               AS QUAL_NAME                       <!-- 자격명 -->
			            , ISNULL(E4.PRIZE_PENALTY_NAME, '')                      AS PRIZE_PENALTY_NAME              <!-- 포상명 -->
			
			            <!-- (공통) -->
			            , CASE @SEARCH_TYPE 
			                   WHEN 1 THEN ISNULL(B.MERITS_GRADE, '0')
			                   WHEN 2 THEN ISNULL(B.MERITS_GRADE, '0')
			                   WHEN 3 THEN ISNULL(B.MERITS_GRADE, ISNULL(D2.REF_CODE3, '0'))
			                   WHEN 4 THEN ISNULL(B.MERITS_GRADE, ISNULL(CONVERT(NVARCHAR, (ISNULL(E3.QUAL_TOT, 0) + ISNULL(E4.PRIZE_TOT, 0))), '0'))
			              END                                                   AS MERITS_GRADE                     <!-- 점수 -->
			            , ISNULL(B.MERITS_CLASS, '')                            AS MERITS_CLASS                     <!-- 등급 -->
			            , CASE WHEN ISNULL(B.GRADE_PERSON_NUMB, '') = ''
			                   THEN @GRADE_PERSON_NUMB1
			                   ELSE B.GRADE_PERSON_NUMB
			              END                                                   AS GRADE_PERSON_NUMB                <!-- 평정자 -->
			            , CASE WHEN ISNULL(C1.NAME, '') = ''
			                   THEN @GRADE_PERSON1
			                   ELSE C1.NAME
			              END                                                   AS GRADE_PERSON_NAME                <!-- 평정자명 -->
			            , CASE WHEN ISNULL(B.GRADE_PERSON_NUMB2, '') = ''
			                   THEN @GRADE_PERSON_NUMB2
			                   ELSE B.GRADE_PERSON_NUMB2
			              END                                                   AS GRADE_PERSON_NUMB2               <!-- 확인자 -->
			            , CASE WHEN ISNULL(C2.NAME, '') = ''
			                   THEN @GRADE_PERSON2
			                   ELSE C2.NAME
			              END                                                   AS GRADE_PERSON_NAME2               <!-- 확인자명 -->
			            , CASE WHEN ISNULL(B.PERSON_NUMB, '') = ''
			                   THEN 'N'
			                   ELSE ''
			              END                                                   AS UPDATE_TYPE                      <!-- 신규생성할자료인지, 업데이트할 자료인지 여부 -->
			            , ISNULL(B.COMP_CODE, A.COMP_CODE)                      AS COMP_CODE
			            , @YEAR                                                 AS MERITS_YEARS
			            , @GUBUN                                                AS MERITS_GUBUN
			            , B.INSERT_DB_USER
			            , B.INSERT_DB_TIME
			            , B.UPDATE_DB_USER
			            , B.UPDATE_DB_TIME
			    FROM                HUM100T A   WITH (NOLOCK)
			            LEFT JOIN   HUM770T B   WITH (NOLOCK) ON B.COMP_CODE     = A.COMP_CODE
			                                                 AND B.PERSON_NUMB   = A.PERSON_NUMB
			                                                 AND B.MERITS_YEARS  = @YEAR
			                                                 AND B.MERITS_GUBUN  = @GUBUN
			            LEFT JOIN   (   <!-- 근무성적평정 -->
			                        SELECT  S1.COMP_CODE, S2.PERSON_NUMB, S2.MERITS_YEARS, S2.MERITS_GUBUN
			                              , SUM(CASE WHEN S1.SUB_CODE = '1' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_GRADE)     ELSE 0.0 END)    AS REAL_GRADE_1
			                              , SUM(CASE WHEN S1.SUB_CODE = '1' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_PER_GRADE) ELSE 0.0 END)    AS CONV_GRADE_1
			                              , SUM(CASE WHEN S1.SUB_CODE = '2' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_GRADE)     ELSE 0.0 END)    AS REAL_GRADE_2
			                              , SUM(CASE WHEN S1.SUB_CODE = '2' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_PER_GRADE) ELSE 0.0 END)    AS CONV_GRADE_2
			                              , SUM(CASE WHEN S1.SUB_CODE = '3' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_GRADE)     ELSE 0.0 END)    AS REAL_GRADE_3
			                              , SUM(CASE WHEN S1.SUB_CODE = '3' THEN CONVERT(NUMERIC(7, 3), S2.MERITS_PER_GRADE) ELSE 0.0 END)    AS CONV_GRADE_3
			                        FROM              BSA100T S1 WITH (NOLOCK)
			                                LEFT JOIN HUM290T S2 WITH (NOLOCK) ON S2.COMP_CODE     = S1.COMP_CODE
			                                                                  AND S2.MERITS_GUBUN2 = S1.SUB_CODE
			                        WHERE   S1.COMP_CODE     = @COMP_CODE
			                        AND     S1.MAIN_CODE     = 'HP05'
			                        AND     S1.SUB_CODE     &lt;&gt; '$'
			                        GROUP BY S1.COMP_CODE, S2.PERSON_NUMB, S2.MERITS_YEARS, S2.MERITS_GUBUN
			                        )       B1                ON B1.COMP_CODE     = B.COMP_CODE
			                                                 AND B1.PERSON_NUMB   = B.PERSON_NUMB
			                                                 AND B1.MERITS_YEARS  = B.MERITS_YEARS
			                                                 AND B1.MERITS_GUBUN  = B.MERITS_GUBUN
			            LEFT JOIN   HUM290T B2  WITH (NOLOCK) ON B2.COMP_CODE     = B.COMP_CODE
			                                                 AND B2.PERSON_NUMB   = B.PERSON_NUMB
			                                                 AND B2.MERITS_YEARS  = B.MERITS_YEARS
			                                                 AND B2.MERITS_GUBUN  = B.MERITS_GUBUN
			                                                 AND B2.MERITS_GUBUN2 = 'C'
			            LEFT JOIN   HUM100T C1  WITH (NOLOCK) ON C1.COMP_CODE     = B.COMP_CODE
			                                                 AND C1.PERSON_NUMB   = B.GRADE_PERSON_NUMB
			            LEFT JOIN   HUM100T C2  WITH (NOLOCK) ON C2.COMP_CODE     = B.COMP_CODE
			                                                 AND C2.PERSON_NUMB   = B.GRADE_PERSON_NUMB2
			            LEFT JOIN   (   <!--교육사항  -->
			                            SELECT  COMP_CODE, PERSON_NUMB, LEFT(EDU_FR_DATE, 4) AS EDU_YEAR, CONVERT(NUMERIC(7, 3), SUM(EDU_TIME)) AS EDU_TIME
			                            FROM    HUM740T WITH (NOLOCK)
			                            WHERE   COMP_CODE   = @COMP_CODE
			                            GROUP BY COMP_CODE, PERSON_NUMB, LEFT(EDU_FR_DATE, 4)
			                        )   D                     ON D.COMP_CODE    = A.COMP_CODE
			                                                 AND D.PERSON_NUMB  = A.PERSON_NUMB
			                                                 AND D.EDU_YEAR     = @YEAR
			            LEFT JOIN   BSA100T D1  WITH (NOLOCK) ON D1.COMP_CODE   = A.COMP_CODE
			                                                 AND D1.MAIN_CODE   = 'HP01'
			                                                 AND D1.SUB_CODE    = A.POST_CODE
			            LEFT JOIN   BSA100T D2  WITH (NOLOCK) ON D2.COMP_CODE   = A.COMP_CODE
			                                                 AND D2.MAIN_CODE   = 'HP02'
			                                                 AND CONVERT(INT, D2.REF_CODE1) &lt;= D.EDU_TIME / CONVERT(NUMERIC(7, 3), D1.REF_CODE4) * 100
			                                                 AND CONVERT(INT, D2.REF_CODE2) &gt;  D.EDU_TIME / CONVERT(NUMERIC(7, 3), D1.REF_CODE4) * 100
			            LEFT JOIN   (   <!--자격면허등록 -->
			                            SELECT    A.COMP_CODE
			                                    , A.PERSON_NUMB
			                                    , A.QUAL_NAME + CASE ISNULL(B.CNT, 0) WHEN 0 THEN '' ELSE N' 외 ' + CONVERT(NVARCHAR, B.CNT) + N'건' END    AS QUAL_NAME
			                                    , B.QUAL_TOT
			                            FROM                (
			                                                SELECT  ROW_NUMBER() OVER(PARTITION BY A.COMP_CODE, A.PERSON_NUMB  ORDER BY A.QUAL_KIND) AS IDX
			                                                      , A.COMP_CODE
			                                                      , A.PERSON_NUMB
			                                                      , B.CODE_NAME                                                                                     AS QUAL_NAME
			                                                FROM                HUM600T     A   WITH (NOLOCK)
			                                                        LEFT JOIN   BSA100T     B   WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND B.MAIN_CODE    = 'H022'
			                                                                                                 AND B.SUB_CODE     = A.QUAL_KIND
			                                                        LEFT JOIN  T_HUM290UKR1 C   WITH (NOLOCK) ON C.TYPE_KEY     = @TypeKey
			                                                                                                 AND C.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND C.PERSON_NUMB  = A.PERSON_NUMB
			                                                WHERE   A.COMP_CODE  = @COMP_CODE
			                                                AND     A.ACQ_DATE  &gt;= ISNULL(C.ANNOUNCE_DATE, C.JOIN_DATE)
			                                                AND     A.ACQ_DATE  &lt;= @BASE_DATE
			                                                ) A
			                                    LEFT JOIN   (
			                                                SELECT  A.COMP_CODE
			                                                      , A.PERSON_NUMB
			                                                      , COUNT(A.COMP_CODE) - 1                              AS CNT
			                                                      , ISNULL(SUM(CONVERT(NUMERIC(12, 3), B.REF_CODE3)), 0) AS QUAL_TOT
			                                                FROM                HUM600T     A   WITH (NOLOCK)
			                                                        LEFT JOIN   BSA100T     B   WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND B.MAIN_CODE    = 'H022'
			                                                                                                 AND B.SUB_CODE     = A.QUAL_KIND
			                                                        LEFT JOIN  T_HUM290UKR1 C   WITH (NOLOCK) ON C.TYPE_KEY     = @TypeKey
			                                                                                                 AND C.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND C.PERSON_NUMB  = A.PERSON_NUMB
			                                                WHERE   A.COMP_CODE  = @COMP_CODE
			                                                AND     A.ACQ_DATE  &gt;= ISNULL(C.ANNOUNCE_DATE, C.JOIN_DATE)
			                                                AND     A.ACQ_DATE  &lt;= @BASE_DATE
			                                                GROUP BY A.COMP_CODE, A.PERSON_NUMB
			                                                ) B  ON B.COMP_CODE   = A.COMP_CODE
			                                                    AND B.PERSON_NUMB = A.PERSON_NUMB
			                            WHERE A.IDX = 1
			                        ) E3                      ON E3.COMP_CODE   = A.COMP_CODE
			                                                 AND E3.PERSON_NUMB = A.PERSON_NUMB
			            LEFT JOIN   (   <!--상벌사항 -->
			                            SELECT    A.COMP_CODE
			                                    , A.PERSON_NUMB
			                                    , A.PRIZE_PENALTY_NAME + CASE ISNULL(B.CNT, 0) WHEN 0 THEN '' ELSE N' 외 ' + CONVERT(NVARCHAR, B.CNT) + N'건' END AS PRIZE_PENALTY_NAME
			                                    , B.PRIZE_TOT
			                            FROM                (
			                                                SELECT  ROW_NUMBER() OVER(PARTITION BY A.COMP_CODE, A.PERSON_NUMB  ORDER BY A.KIND_PRIZE_PENALTY) AS IDX
			                                                      , A.COMP_CODE
			                                                      , A.PERSON_NUMB
			                                                      , B.CODE_NAME                                                                                                     AS PRIZE_PENALTY_NAME
			                                                FROM                HUM810T     A   WITH (NOLOCK)
			                                                        LEFT JOIN   BSA100T     B   WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND B.MAIN_CODE    = 'H096'
			                                                                                                 AND B.SUB_CODE     = A.KIND_PRIZE_PENALTY
			                                                        LEFT JOIN  T_HUM290UKR1 C   WITH (NOLOCK) ON C.TYPE_KEY     = @TypeKey
			                                                                                                 AND C.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND C.PERSON_NUMB  = A.PERSON_NUMB
			                                                WHERE   A.COMP_CODE      = @COMP_CODE
			                                                AND     A.OCCUR_DATE    &gt;= ISNULL(C.ANNOUNCE_DATE, C.JOIN_DATE)
			                                                AND     A.OCCUR_DATE    &lt;= @BASE_DATE
			                                                AND     LEFT(A.KIND_PRIZE_PENALTY, 1) = '1'
			                                                ) A
			                                    LEFT JOIN   (
			                                                SELECT  A.COMP_CODE
			                                                      , A.PERSON_NUMB
			                                                      , COUNT(A.COMP_CODE) - 1                              AS CNT
			                                                      , ISNULL(SUM(CONVERT(NUMERIC(12, 3), B.REF_CODE2)), 0) AS PRIZE_TOT
			                                                FROM                HUM810T     A   WITH (NOLOCK)
			                                                        LEFT JOIN   BSA100T     B   WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND B.MAIN_CODE    = 'H096'
			                                                                                                 AND B.SUB_CODE     = A.KIND_PRIZE_PENALTY
			                                                        LEFT JOIN  T_HUM290UKR1 C   WITH (NOLOCK) ON C.TYPE_KEY     = @TypeKey
			                                                                                                 AND C.COMP_CODE    = A.COMP_CODE
			                                                                                                 AND C.PERSON_NUMB  = A.PERSON_NUMB
			                                                WHERE   A.COMP_CODE      = @COMP_CODE
			                                                AND     A.OCCUR_DATE    &gt;= ISNULL(C.ANNOUNCE_DATE, C.JOIN_DATE)
			                                                AND     A.OCCUR_DATE    &lt;= @BASE_DATE
			                                                AND     LEFT(A.KIND_PRIZE_PENALTY, 1) = '1'
			                                                GROUP BY A.COMP_CODE, A.PERSON_NUMB
			                                                ) B  ON B.COMP_CODE   = A.COMP_CODE
			                                                    AND B.PERSON_NUMB = A.PERSON_NUMB
			                            WHERE A.IDX = 1
			                        ) E4                      ON E4.COMP_CODE   = A.COMP_CODE
			                                                 AND E4.PERSON_NUMB = A.PERSON_NUMB
			            LEFT JOIN   (   <!--재직기간 -->
			                            SELECT  S1.COMP_CODE, S1.PERSON_NUMB, S4.VALIDITY_MONTH
			                                  , CASE WHEN uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') &lt; S4.VALIDITY_MONTH
			                                         THEN uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'BAS') 
			                                           - (S4.VALIDITY_MONTH - uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC'))
			                                         ELSE uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'BAS')        
			                                     END AS BAS_CAREER
			                                             
			                                  , CASE WHEN ISNULL(S4.VALIDITY_MONTH, 0) &gt; 0 
			                                         THEN CASE WHEN uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') &lt;= S4.VALIDITY_MONTH
			                                                   THEN NULL
			                                                   ELSE uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') - S4.VALIDITY_MONTH
			                                               END
			                                         ELSE uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC')
			                                     END AS EXC_CAREER
			                                             
			                                  , CASE WHEN ISNULL(S4.VALIDITY_MONTH, 0) &gt; 0 
			                                         THEN CASE WHEN uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') &lt;= S4.VALIDITY_MONTH
			                                                   THEN NULL
			                                                   ELSE ((uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') - S4.VALIDITY_MONTH)) % 12
			                                               END
			                                         ELSE uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') % 12
			                                     END AS EXC_CODE
			                                             
			                                  , CASE WHEN ISNULL(S4.VALIDITY_MONTH, 0) &gt; 0 
			                                         THEN CASE WHEN uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') &lt;= S4.VALIDITY_MONTH
			                                                   THEN NULL
			                                                   ELSE CEILING((uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') - S4.VALIDITY_MONTH) / 12)
			                                               END
			                                         ELSE CEILING(uniLITE.fnGetCareer(ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE), @BASE_DATE, S3.REF_CODE2, 'EXC') / 12)
			                                     END AS EXC_YEAR
			                            FROM                HUM100T     S1 WITH (NOLOCK)
			                                    LEFT JOIN  T_HUM290UKR1 S2 WITH (NOLOCK) ON S2.TYPE_KEY    = @TypeKey
			                                                                            AND S2.COMP_CODE   = S1.COMP_CODE
			                                                                            AND S2.PERSON_NUMB = S1.PERSON_NUMB
			                                    LEFT JOIN   BSA100T     S3 WITH (NOLOCK) ON S3.COMP_CODE   = S1.COMP_CODE
			                                                                            AND S3.MAIN_CODE   = 'HP01'
			                                                                            AND S3.SUB_CODE    = S1.POST_CODE
			                                                                            
			                                    LEFT JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY A.COMP_CODE, A.PERSON_NUMB  ORDER BY A.KIND_PRIZE_PENALTY) AS IDX
			                                                , A.COMP_CODE
			                                                , A.PERSON_NUMB
			                                                , DATEDIFF(MONTH, CONVERT(DATETIME, A.VALIDITYFR_DATE), A.VALIDITYTO_DATE) AS VALIDITY_MONTH
			                                                , A.VALIDITYFR_DATE
			                                            FROM        HUM810T A WITH (NOLOCK)
			                                            LEFT JOIN   BSA100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
			                                                                               AND B.MAIN_CODE = 'H096'
			                                                                               AND B.SUB_CODE  = A.KIND_PRIZE_PENALTY
			                                           WHERE A.COMP_CODE      = @COMP_CODE
			                                             AND A.OCCUR_DATE    &lt;= @BASE_DATE
			                                             AND A.EX_DATE       &gt; @BASE_DATE
			                                             AND LEFT(A.KIND_PRIZE_PENALTY, 1) = '2'
			                                           ) S4  ON S4.COMP_CODE   = S1.COMP_CODE
			                                                AND S4.PERSON_NUMB = S1.PERSON_NUMB
			                                                AND S4.IDX = 1
			                                                AND S4.VALIDITYFR_DATE &gt; S2.ANNOUNCE_DATE
			                                             
			                            WHERE   S1.COMP_CODE    = @COMP_CODE
			                            AND     S1.RETR_DATE    = '00000000'
			                            AND     ISNULL(S1.PAY_GRADE_01, '') &lt;&gt; ''
			                            AND     ISNULL(S2.ANNOUNCE_DATE, S1.JOIN_DATE) &lt;= @BASE_DATE
			                        ) F                      ON F.COMP_CODE     = A.COMP_CODE
			                                                AND F.PERSON_NUMB   = A.PERSON_NUMB
			            LEFT JOIN   BSA100T F1 WITH (NOLOCK) ON F1.COMP_CODE    = F.COMP_CODE
			                                                AND F1.MAIN_CODE    = 'HP06'
			                                                AND F1.SUB_CODE     = CONVERT(NVARCHAR, CASE WHEN F.EXC_YEAR = 0 THEN F.EXC_YEAR
			                                                                                             WHEN F.EXC_CODE = 0 THEN 12
			                                                                                             ELSE F.EXC_CODE
			                                                                                        END)
			
			    WHERE   ISNULL(A.PAY_GRADE_01, '') &lt;&gt; '' 
			      AND   A.COMP_CODE       = @COMP_CODE 
 			      AND   uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
			      AND   A.RETR_DATE       = '00000000' -- AND (DATEDIFF(mm, ISNULL(F.ANNOUNCE_DATE, A.JOIN_DATE), @MAIN_DT) + 1) &gt; CONVERT(NUMERIC, D1.REF_CODE3) * 12)   --재직자
			      AND   (A.DIV_CODE       = @DIV_CODE                           OR @DIV_CODE     = '')
			      AND   (A.PAY_CODE       = @PAY_TYPE                           OR @PAY_TYPE     = '')
			      AND   (A.DEPT_CODE &gt;= @DEPT_START OR @DEPT_START   = '')
			      AND   (A.DEPT_CODE &lt;= @DEPT_END   OR @DEPT_END     = '')
			      AND   (A.PERSON_NUMB LIKE @PERSON_NUMB + N'%'                 OR @PERSON_NUMB  = '')
			      AND   (A.NAME        LIKE @PERSON_NAME + N'%'                 OR @PERSON_NAME  = '')
			      AND   (A.PAY_GRADE_01   = @PAY_GRADE_01                       OR @PAY_GRADE_01 = '')
			      AND   (A.PAY_GRADE_02   = @PAY_GRADE_02                       OR @PAY_GRADE_02 = '')
			
				ORDER BY A.COMP_CODE, A.DEPT_CODE , A.PERSON_NUMB 
				
			    SET ANSI_WARNINGS ON 
			    SET NOCOUNT OFF
			    SET ARITHABORT OFF
			END
	</select>
	
	<select id="hum290ukrServiceImpl.select2" parameterType="Map" resultType="rMap">
		--hum290ukrServiceImpl.select2
	    BEGIN
	        SET NOCOUNT ON
	        SET ARITHABORT ON
	    
	        DECLARE       @ACCYEAR              NVARCHAR(04)    <!-- 평정년도    (필수)-->
	                    , @GUBUN                NVARCHAR(02)    <!-- 구분코드    (필수)-->
	                    , @PAY_GRADE_01         NVARCHAR(40)    <!-- 급          (필수)-->
	                    , @MINRANK              NVARCHAR(10)    <!-- 최소랭크    (필수)-->
	                    , @MAXRANK              NVARCHAR(10)    <!-- 최대랭크    (필수)-->
	                    , @BASE_DATE            NVARCHAR(10)    <!-- 기준일자    (필수, yyyymmdd)-->
	                    , @GRADE_PERSON_NUMB1   NVARCHAR(20)    <!-- 평정자코드  (선택)-->
	                    , @GRADE_PERSON1        NVARCHAR(20)    <!-- 평정자명    (선택)-->
	                    , @GRADE_PERSON_NUMB2   NVARCHAR(20)    <!-- 확인자코드  (선택)-->
	                    , @GRADE_PERSON2        NVARCHAR(20)    <!-- 확인자명    (선택)-->
	                    , @COMP_CODE            NVARCHAR(10)    <!-- 법인코드    (필수)-->
	   
	            <!--  <1. 변수 값 할당> -->
	            SET         @ACCYEAR            = #{DUTY_YYYY}
	            SET         @GUBUN              = #{MERITS_GUBUN}
	            SET         @PAY_GRADE_01       = #{PAY_GRADE_01}
	            <!-- <choose>            
					<when test='MINRANK.equals("")'>
	            		SET         @MINRANK            =   '0'
					</when>
					<otherwise>
						SET         @MINRANK            =   #{MINRANK}
					</otherwise>
	            </choose>
	            <choose>            
					<when test='MAXRANK.equals("")'>
	            		SET         @MAXRANK            =   '0'
					</when>
					<otherwise>
						SET         @MAXRANK            =   #{MAXRANK}
					</otherwise>
	            </choose>	  -->       
                
                SET         @MINRANK            =   '0'
                SET         @MAXRANK            =   '0'
                    
	            <!-- SET         @BASE_DATE          = #{BASE_DATE}
	            SET         @GRADE_PERSON_NUMB1 = #{GRADE_PERSON_NUMB1}
	            SET         @GRADE_PERSON1      = #{GRADE_PERSON1}
	            SET         @GRADE_PERSON_NUMB2 = #{GRADE_PERSON_NUMB2}
	            SET         @GRADE_PERSON2      = #{GRADE_PERSON2}
	            SET         @COMP_CODE          = #{S_COMP_CODE} -->
                
                SET         @BASE_DATE          = #{BASE_DATE}
                SET         @GRADE_PERSON_NUMB1 = #{PERSON_NUMB1}
                SET         @GRADE_PERSON1      = #{NAME1}
                SET         @GRADE_PERSON_NUMB2 = #{PERSON_NUMB2}
                SET         @GRADE_PERSON2      = #{NAME2}
                SET         @COMP_CODE          = #{S_COMP_CODE}
                
                
               
	    
	    
	    DECLARE @MAIN_DT        NVARCHAR(8)
	    SELECT  @MAIN_DT = @ACCYEAR + RIGHT('0' + CAST(    CASE    WHEN CAST(@GUBUN AS INT) &gt; 85 THEN CAST(@GUBUN AS INT) - 85  <!-- 종합 -->
	                                                            WHEN CAST(@GUBUN AS INT) &gt; 70 THEN CAST(@GUBUN AS INT) - 70  <!-- 포상/자격 -->
	                                                            WHEN CAST(@GUBUN AS INT) &gt; 50 THEN CAST(@GUBUN AS INT) - 50  <!-- 훈평 -->
	                                                            WHEN CAST(@GUBUN AS INT) &gt; 30 THEN CAST(@GUBUN AS INT) - 30  <!-- 경평 -->
	                                                            WHEN CAST(@GUBUN AS INT) &gt; 10 THEN CAST(@GUBUN AS INT) - 10  <!-- 근평 -->
	                                                            ELSE 1
	                                                    END AS NVARCHAR), 2) + '01'
	        DECLARE   @MONTH        NVARCHAR(2)
	                , @FROMDATE1    INT
	                , @TODATE1      INT
	                , @FROMDATE2    INT
	                , @TODATE2      INT
	                , @FROMDATE3    INT 
	                , @TODATE3      INT
	                , @GGUBUN       NVARCHAR(2)
	                , @HGUBUN       NVARCHAR(2)
	                , @PGUBUN       NVARCHAR(2)
	    
	        SELECT @MONTH = CASE WHEN LEN(REF_CODE9) = 1 THEN '0' + REF_CODE9 ELSE REF_CODE9 END
	        FROM   BSA100T A WITH (NOLOCK)
	        WHERE  A.MAIN_CODE = 'H095'
	        AND    A.SUB_CODE  = @GUBUN
	    
	        SELECT @GGUBUN = A.SUB_CODE
	        FROM   BSA100T A WITH (NOLOCK)
	        WHERE  A.MAIN_CODE  = 'H095'
	        AND    A.REF_CODE9  = CAST(CAST(@MONTH AS INT) AS NVARCHAR)
	        AND    A.REF_CODE10 = '2'
	    
	        SELECT @HGUBUN = A.SUB_CODE
	        FROM   BSA100T A WITH (NOLOCK)
	        WHERE  A.MAIN_CODE  = 'H095'
	        AND    A.REF_CODE9  = CAST(CAST(@MONTH AS INT) AS NVARCHAR)
	        AND    A.REF_CODE10 = '3'
	    
	        SELECT @PGUBUN = A.SUB_CODE
	        FROM   BSA100T A WITH (NOLOCK)
	        WHERE  A.MAIN_CODE  = 'H095'
	        AND    A.REF_CODE9  = CAST(CAST(@MONTH AS INT) AS NVARCHAR)
	        AND    A.REF_CODE10 = '4'
	    
	        SET @FROMDATE1 = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy, -1, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	        SET @TODATE1   = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy,  0, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	        SET @FROMDATE2 = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy, -2, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	        SET @TODATE2   = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy, -1, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	        SET @FROMDATE3 = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy, -3, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	        SET @TODATE3   = CAST(LEFT(REPLACE(CONVERT(NVARCHAR, DATEADD(yyyy, -2, CAST(@ACCYEAR + '-' + @MONTH + '-01' AS DATETIME)), 23), '-', ''), 6) AS INT)
	    
	        SELECT   
	                ROW_NUMBER() OVER (ORDER BY K.PERSON_NUMB) AS SEQ
	              , K.RANKNUM AS SYNTHETIC_EVAL
	              , K.DEPT_NAME
	              , K.PAY_GRADE_01
	              , K.PAY_GRADE_02
	              , K.PERSON_NUMB
	              , K.NAME
	              , K.AVG1
	              , K.AVG2
	              , K.AVG3
	              , K.AVGTOT
	              , K.GTOT
	              , K.HTOT
	              , K.PTOT
	              , K.TOTAL AS MERITS_GRADE
	              , '서열 ' + CAST(K.RANKNUM AS NVARCHAR) + '위' AS RANKNAME
	              , K.GRADE_PERSON_NUMB
	              , K.GRADE_PERSON_NAME
	              , K.GRADE_PERSON_NUMB2
	              , K.GRADE_PERSON_NAME2
	              , K.UPDATE_TYPE
	              , K.COMP_CODE
	              , K.MERITS_YEARS
	              , K.MERITS_GUBUN
	              , K.INSERT_DB_USER
	              , K.INSERT_DB_TIME
	              , K.UPDATE_DB_USER
	              , K.UPDATE_DB_TIME
	        FROM    (
	                SELECT  RANK() OVER(ORDER BY 
	                                                    ISNULL(C1.AVG0TO1, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.5 ELSE 0.6 END) +
	                                                    ISNULL(C2.AVG1TO2, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.3 ELSE 0.4 END) +
	                                                    ISNULL(C3.AVG2TO3, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.2 ELSE 0.0 END) +
	                                                    ISNULL(D.GTOT, 0) +
	                                                    ISNULL(E.HTOT, 0) +
	                                                    ISNULL(F.PTOT, 0) DESC) RANKNUM
	                      , A.DEPT_NAME                                                   <!-- 부서 -->
	                      , A.PAY_GRADE_01                                                <!-- 급 -->
	                      , A.PAY_GRADE_02                                                <!-- 호 -->
	                      , A.PERSON_NUMB                                                 <!-- 사번 -->
	                      , A.NAME                                                        <!-- 성명 -->
	                      , ISNULL(C1.AVG0TO1, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.5 ELSE 0.6 END) AS AVG1 <!--최근1년 평균-->
	                      , ISNULL(C2.AVG1TO2, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.3 ELSE 0.4 END) AS AVG2 <!--최근2년 평균-->
	                      , ISNULL(C3.AVG2TO3, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.2 ELSE 0.0 END) AS AVG3 <!--최근3년 평균-->
	                      , ISNULL(C1.AVG0TO1, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.5 ELSE 0.6 END) +
	                        ISNULL(C2.AVG1TO2, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.3 ELSE 0.4 END) +
	                        ISNULL(C3.AVG2TO3, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.2 ELSE 0.0 END) AS AVGTOT <!--평균합-->
	                      , ISNULL(D.GTOT, 0.0) AS GTOT
	                      , ISNULL(E.HTOT, 0.0) AS HTOT
	                      , ISNULL(F.PTOT, 0.0) AS PTOT
	                      , ISNULL(C1.AVG0TO1, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.5 ELSE 0.6 END) +
	                        ISNULL(C2.AVG1TO2, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.3 ELSE 0.4 END) +
	                        ISNULL(C3.AVG2TO3, 0) * (CASE WHEN CAST(ISNULL(A.PAY_GRADE_01, '') AS INT) &lt;= 5 THEN 0.2 ELSE 0.0 END) +
	                        ISNULL(D.GTOT, 0.0) +
	                        ISNULL(E.HTOT, 0.0) +
	                        ISNULL(F.PTOT, 0.0) AS TOTAL <!--평정합 -->
	                      , CASE WHEN ISNULL(B.GRADE_PERSON_NUMB, '') = ''
	                             THEN @GRADE_PERSON_NUMB1
	                             ELSE B.GRADE_PERSON_NUMB
	                        END                                       AS GRADE_PERSON_NUMB <!-- 평정자 -->
	                      , CASE WHEN ISNULL(G1.NAME, '') = ''
	                             THEN @GRADE_PERSON1
	                             ELSE G1.NAME
	                        END                                       AS GRADE_PERSON_NAME <!-- 평정자명 -->
	                      , CASE WHEN ISNULL(B.GRADE_PERSON_NUMB2, '') = ''
	                             THEN @GRADE_PERSON_NUMB2
	                             ELSE B.GRADE_PERSON_NUMB2
	                        END                                       AS GRADE_PERSON_NUMB2 <!-- 확인자 -->
	                      , CASE WHEN ISNULL(G2.NAME, '') = ''
	                             THEN @GRADE_PERSON2
	                             ELSE G2.NAME
	                        END                                       AS GRADE_PERSON_NAME2 <!-- 확인자명 -->
	                      , CASE WHEN ISNULL(B.PERSON_NUMB, '') = ''
	                             THEN 'N'
	                             ELSE ''
	                        END                                       AS UPDATE_TYPE        <!-- 신규생성할자료인지, 업데이트할 자료인지 여부 -->
	                      , ISNULL(B.COMP_CODE, A.COMP_CODE)          AS COMP_CODE
	                      , @ACCYEAR                                  AS MERITS_YEARS
	                      , @GUBUN                                    AS MERITS_GUBUN
	                      , B.INSERT_DB_USER
	                      , B.INSERT_DB_TIME
	                      , B.UPDATE_DB_USER
	                      , B.UPDATE_DB_TIME
	                FROM                HUM100T A WITH (NOLOCK)
	                        LEFT JOIN   HUM770T B WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE
	                                                           AND B.PERSON_NUMB    = A.PERSON_NUMB
	                                                           AND B.MERITS_YEARS   = @ACCYEAR
	                                                           AND B.MERITS_GUBUN   = @GUBUN
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) / COUNT(MERITS_GRADE) AS AVG0TO1
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &gt; @FROMDATE1
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &lt;= @TODATE1
	                                    AND     A.MERITS_GUBUN  &lt; 23
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   C1                  ON C1.COMP_CODE     = A.COMP_CODE
	                                                           AND C1.PERSON_NUMB   = A.PERSON_NUMB
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) / COUNT(MERITS_GRADE) AS AVG1TO2
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &gt; @FROMDATE2
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &lt;= @TODATE2
	                                    AND     A.MERITS_GUBUN  &lt; 23
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   C2                  ON C2.COMP_CODE     = A.COMP_CODE
	                                                           AND C2.PERSON_NUMB   = A.PERSON_NUMB
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) / COUNT(MERITS_GRADE) AS AVG2TO3
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &gt; @FROMDATE3
	                                    AND     CAST(LEFT(REPLACE(CONVERT(NVARCHAR, CAST(MERITS_YEARS + '-' + CAST(CAST(MERITS_GUBUN AS INT) - 10 AS NVARCHAR) + '-01' AS DATETIME), 23), '-', ''), 6) AS INT) &lt;= @TODATE3
	                                    AND     A.MERITS_GUBUN  &lt; 23
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   C3                  ON C3.COMP_CODE     = A.COMP_CODE
	                                                           AND C3.PERSON_NUMB   = A.PERSON_NUMB
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) AS GTOT
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     A.MERITS_YEARS  = @ACCYEAR
	                                    AND     A.MERITS_GUBUN  = @GGUBUN
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   D                   ON D.COMP_CODE      = A.COMP_CODE
	                                                           AND D.PERSON_NUMB    = A.PERSON_NUMB
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) AS HTOT
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     A.MERITS_YEARS  = @ACCYEAR
	                                    AND     A.MERITS_GUBUN  = @HGUBUN
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   E                   ON E.COMP_CODE      = A.COMP_CODE
	                                                           AND E.PERSON_NUMB    = A.PERSON_NUMB
	                        LEFT JOIN   (
	                                    SELECT  A.COMP_CODE, A.PERSON_NUMB, SUM(CAST(MERITS_GRADE AS NUMERIC(7, 4))) AS PTOT
	                                    FROM    HUM770T A WITH (NOLOCK)
	                                    WHERE   A.COMP_CODE     = @COMP_CODE
	                                    AND     A.MERITS_YEARS  = @ACCYEAR
	                                    AND     A.MERITS_GUBUN  = @PGUBUN
	                                    GROUP BY A.COMP_CODE, A.PERSON_NUMB
	                                    )   F                   ON F.COMP_CODE      = A.COMP_CODE
	                                                           AND F.PERSON_NUMB    = A.PERSON_NUMB
	                        LEFT JOIN   HUM100T G1  WITH (NOLOCK) ON G1.COMP_CODE   = B.COMP_CODE
	                                                             AND G1.PERSON_NUMB = B.GRADE_PERSON_NUMB
	                        LEFT JOIN   HUM100T G2  WITH (NOLOCK) ON G2.COMP_CODE   = B.COMP_CODE
	                                                             AND G2.PERSON_NUMB = B.GRADE_PERSON_NUMB2
	                        LEFT JOIN   HUM810T W1  WITH (NOLOCK) ON W1.COMP_CODE   = A.COMP_CODE
	                                                             AND W1.PERSON_NUMB = A.PERSON_NUMB
	                                                             AND LEFT(W1.KIND_PRIZE_PENALTY, 1) = '2'
	                                                             AND CAST(ISNULL(W1.VALIDITYFR_DATE, '') AS INT) &lt;= CAST(@BASE_DATE AS INT)
	                                                             AND CAST(ISNULL(W1.VALIDITY_DATE, '') AS INT) &gt; CAST(@BASE_DATE AS INT)
	                        LEFT JOIN   HUM840T W2  WITH (NOLOCK) ON W2.COMP_CODE   = A.COMP_CODE
	                                                             AND W2.PERSON_NUMB = A.PERSON_NUMB
	                                                             AND CAST(ISNULL(W2.CONTRACT_FRDATE, '') AS INT) &lt;= CAST(@BASE_DATE AS INT) <!--현재 계약중 -->
	                                                             AND CAST(ISNULL(W2.CONTRACT_TODATE, '') AS INT) &gt;= CAST(@BASE_DATE AS INT) <!--현재 계약중 -->
	                        LEFT JOIN   BSA100T W3  WITH (NOLOCK) ON W3.COMP_CODE   = W2.COMP_CODE
	                                                             AND W3.MAIN_CODE   = 'H164'
	                                                             AND W3.SUB_CODE    = W2.CONTRACT_GUBUN
	                        LEFT JOIN   (
	                                    SELECT  S1.COMP_CODE, S1.PERSON_NUMB, MAX(S1.ANNOUNCE_DATE) AS ANNOUNCE_DATE
	                                    FROM               HUM760T S1 WITH (NOLOCK)
	                                            INNER JOIN BSA100T S2 WITH (NOLOCK) ON S2.COMP_CODE = S1.COMP_CODE
	                                                                               AND S2.MAIN_CODE = 'H094'
	                                                                               AND S2.SUB_CODE  = S1.ANNOUNCE_CODE
	                                                                               AND S2.REF_CODE1 = 'Y'
	                                    WHERE   S1.COMP_CODE  = @COMP_CODE
	                                    GROUP BY S1.COMP_CODE, S1.PERSON_NUMB
	                                    ) H                       ON H.COMP_CODE    = A.COMP_CODE
	                                                             AND H.PERSON_NUMB  = A.PERSON_NUMB
	                        LEFT JOIN   BSA100T D1  WITH (NOLOCK) ON D1.COMP_CODE   = A.COMP_CODE
	                                                             AND D1.MAIN_CODE   = 'HP01'
	                                                             AND D1.SUB_CODE    = A.POST_CODE
	                WHERE   ISNULL(A.PAY_GRADE_01, '') != ''
 			        AND     uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
	                AND     (A.RETR_DATE = '00000000' AND (DATEDIFF(mm, ISNULL(H.ANNOUNCE_DATE, A.JOIN_DATE), @MAIN_DT) + 1) &gt; CAST(D1.REF_CODE3 AS INT) * 12)  <!---재직자 -->
	                AND     W1.COMP_CODE IS NULL        <!-- 징계기간이 아닌인원 -->
	                AND     (W3.REF_CODE2 != '2' OR W2.COMP_CODE IS NULL)       <!-- 휴직기간이 아닌인원 -->
	                AND     (A.PAY_GRADE_01 = @PAY_GRADE_01 OR @PAY_GRADE_01 = '')
	                ) K
	        WHERE   K.RANKNUM BETWEEN @MINRANK AND @MAXRANK
	    
	        SET NOCOUNT OFF
	        SET ARITHABORT OFF
	    END
	</select>
</mapper>