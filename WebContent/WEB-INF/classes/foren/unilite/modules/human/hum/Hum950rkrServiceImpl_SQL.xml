<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hum950rkrServiceImpl">
	<select id="fnHum950nQ" parameterType="Map" resultType="rMap" >	
		--hum950rkr.Chum950rkr[fnHum950nQ]
		<!-- SELECT (CASE WHEN B.AF_DEPT_CODE IS NULL THEN A.DEPT_CODE
		             ELSE B.AF_DEPT_CODE 
		        END)            AS DEPT_CODE
		     , (CASE WHEN B.AF_DEPT_NAME IS NULL THEN A.DEPT_NAME
		             ELSE B.AF_DEPT_NAME 
		        END)            AS DEPT_NAME -->
		 SELECT (CASE WHEN ISNULL(B.AF_DEPT_CODE, '') = ''
		              THEN CASE WHEN ISNULL(B.BE_DEPT_CODE, '') = ''
		                        THEN A.DEPT_CODE
		                        ELSE B.BE_DEPT_CODE
		                    END
		              ELSE B.AF_DEPT_CODE 
		        END)            AS DEPT_CODE
		     , (CASE WHEN ISNULL(B.AF_DEPT_NAME, '') = ''
		            THEN CASE WHEN ISNULL(B.BE_DEPT_NAME, '') = ''
		                        THEN A.DEPT_NAME
		                        ELSE B.BE_DEPT_NAME
		                    END
		             ELSE B.AF_DEPT_NAME 
		        END)            AS DEPT_NAME
		        
		     , A.NAME
		     , M1.CODE_NAME     AS POST_NAME
		     , M2.CODE_NAME     AS ABIL_NAME
		     , (CASE WHEN B.PERSON_NUMB IS NULL THEN A.PERSON_NUMB
		             ELSE B.PERSON_NUMB
		        END)            AS PERSON_NUMB
		     , (CASE WHEN A.JOIN_DATE != '00000000' AND A.JOIN_DATE != '' 
		             THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.JOIN_DATE) 
		             ELSE '' 
		         END)            AS JOIN_DATE
		     , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A') REPRE_NUM 
		     , M3.CODE_NAME      AS PAY_GUBUN
		     , A.PAY_GRADE_01
		     , A.PAY_GRADE_02
		     , M4.CODE_NAME      AS JOB_NAME
		     , M5.CODE_NAME      AS PAY_PROV_FLAG
		     , M6.CODE_NAME      AS PAY_CODE
		     , M7.CODE_NAME      AS TAX_CODE
		     , M8.CODE_NAME      AS EMPLOY_NAME
		     , M9.CODE_NAME      AS NATION_CODE
		     , A.ANNUAL_SALARY_I AS  ANNUAL_SALARY_I
		     , A.WAGES_STD_I
		     , A.SPOUSE
		     , A.SUPP_AGED_NUM
		     , A.CHILD_20_NUM
		     , (CASE WHEN A.DEFORM_NUM = '0' THEN 'N' 
		             ELSE 'Y' 
		        END)             AS DEFORM_NUM
		     , A.ANU_BASE_I
		     , A.ANU_INSUR_I
		     , A.MED_AVG_I
		     , A.MED_INSUR_I
		     , CONVERT(INT,A.AGED_NUM) AGED_NUM
		     , M10.CODE_NAME     AS SCHSHIP_NAME
		     , M11.CODE_NAME     AS GRADU_NAME
		     , (CASE WHEN A.BIRTH_DATE != '00000000' AND A.BIRTH_DATE != '' 
		             THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.BIRTH_DATE) 
		             ELSE '' 
		         END)            AS BIRTH_DATE
		     , (CASE WHEN A.WEDDING_DATE != '00000000' AND A.WEDDING_DATE != '' 
		             THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.WEDDING_DATE) 
		             ELSE '' 
		         END)            AS WEDDING_DATE
		      , (SUBSTRING(A.ZIP_CODE,1,3) + '-' + 
		         SUBSTRING(A.ZIP_CODE,4,6)) ZIP_CODE
		      , A.KOR_ADDR
		      , A.TELEPHON
		      , A.PHONE_NO
		      , A.EMAIL_ADDR
		      , X.AMOUNT_I       AS FIXSUM
		      , Y.DED_AMOUNT_I   AS GONJESUM 
		      , (CASE WHEN A.RETR_DATE != 'OOOOOOOO' OR A.RETR_DATE &gt;=''
		              THEN uniLITE.fnGetUserDateComp(A.COMP_CODE, A.RETR_DATE)
		          END)           AS RETR_DATE
		   FROM      HUM100T A WITH(NOLOCK)
		       LEFT JOIN (SELECT K.COMP_CODE
		                       , K.PERSON_NUMB 
		                       , K.AF_DEPT_CODE
		                       , K.AF_DEPT_NAME
		                       , K.BE_DEPT_CODE
		                       , K.BE_DEPT_NAME
		                       , K.AF_POST_CODE
		                       , K.AF_ABIL_CODE
		                    FROM           HUM760T K WITH(NOLOCK)
		                        INNER JOIN (SELECT COMP_CODE
		                                         , PERSON_NUMB
		                                         , MAX(ANNOUNCE_DATE) ANNOUNCE_DATE
		                                      FROM HUM760T WITH(NOLOCK)
		                                     WHERE COMP_CODE      = #{S_COMP_CODE}
		                                       AND ANNOUNCE_DATE &lt;= #{ANN_DATE}
		                                     GROUP BY COMP_CODE, PERSON_NUMB) S 
		                                ON S.COMP_CODE     = K.COMP_CODE
		                               AND S.PERSON_NUMB   = K.PERSON_NUMB 
		                               AND S.ANNOUNCE_DATE = K.ANNOUNCE_DATE
		                               <!-- AND S.POST_CODE = K.POST_CODE
		                               AND S.ABIL_CODE = K.ABIL_CODE -->
		                            ) B
		              ON B.COMP_CODE   = A.COMP_CODE
		             AND B.PERSON_NUMB = A.PERSON_NUMB
		       LEFT JOIN BSA100T M1  WITH(NOLOCK) ON M1.MAIN_CODE   = 'H005'
		                                         AND M1.COMP_CODE   = A.COMP_CODE
		                                         AND M1.SUB_CODE    = (CASE WHEN ISNULL(B.AF_POST_CODE, '') = '' THEN A.POST_CODE ELSE B.AF_POST_CODE END)
		       LEFT JOIN BSA100T M2  WITH(NOLOCK) ON M2.MAIN_CODE   = 'H006'
		                                         AND M2.COMP_CODE   = A.COMP_CODE
		                                         AND M2.SUB_CODE    = (CASE WHEN ISNULL(B.AF_ABIL_CODE, '') = '' THEN A.ABIL_CODE ELSE B.AF_ABIL_CODE END)
		       LEFT JOIN BSA100T M3  WITH(NOLOCK) ON M3.MAIN_CODE   = 'H011'
		                                         AND M3.COMP_CODE   = A.COMP_CODE
		                                         AND M3.SUB_CODE    = A.PAY_GUBUN
		       LEFT JOIN BSA100T M4  WITH(NOLOCK) ON M4.MAIN_CODE   = 'H008'
		                                         AND M4.COMP_CODE   = A.COMP_CODE
		                                         AND M4.SUB_CODE    = A.JOB_CODE
		       LEFT JOIN BSA100T M5  WITH(NOLOCK) ON M5.MAIN_CODE   = 'H031'
		                                         AND M5.COMP_CODE   = A.COMP_CODE
		                                         AND M5.SUB_CODE    = A.PAY_PROV_FLAG
		       LEFT JOIN BSA100T M6  WITH(NOLOCK) ON M6.MAIN_CODE   = 'H028'
		                                         AND M6.COMP_CODE    = A.COMP_CODE
		                                         AND M6.SUB_CODE     = A.PAY_CODE
		       LEFT JOIN BSA100T M7  WITH(NOLOCK) ON M7.MAIN_CODE   = 'H029'
		                                         AND M7.COMP_CODE   = A.COMP_CODE
		                                         AND M7.SUB_CODE    = A.TAX_CODE
		       LEFT JOIN BSA100T M8  WITH(NOLOCK) ON M8.MAIN_CODE   = 'H024'
		                                         AND M8.COMP_CODE   = A.COMP_CODE
		                                         AND M8.SUB_CODE    = A.EMPLOY_TYPE
		       LEFT JOIN BSA100T M9  WITH(NOLOCK) ON M9.MAIN_CODE   = 'B012'
		                                         AND M9.COMP_CODE   = A.COMP_CODE
		                                         AND M9.SUB_CODE    = A.NATION_CODE
		       LEFT JOIN BSA100T M10 WITH(NOLOCK) ON M10.MAIN_CODE  = 'H009'
		                                         AND M10.COMP_CODE  = A.COMP_CODE
		                                         AND M10.SUB_CODE   = A.SCHSHIP_CODE
		       LEFT JOIN BSA100T M11 WITH(NOLOCK) ON M11.SUB_CODE   = 'H010'
		                                         AND M11.COMP_CODE  = A.COMP_CODE
		                                         AND M11.MAIN_CODE  = A.GRADU_TYPE
		       LEFT JOIN (SELECT K.COMP_CODE
		                       , PERSON_NUMB
		                       , SUM(AMOUNT_I) AMOUNT_I
		                    FROM      HPA200T K WITH(NOLOCK)
		                   INNER JOIN HBS300T S WITH(NOLOCK) ON S.COMP_CODE  = K.COMP_CODE
		                                                    AND S.WAGES_CODE = K.WAGES_CODE
		                                                    AND CODE_TYPE    = '1'
		                   GROUP BY K.COMP_CODE, PERSON_NUMB) X ON X.COMP_CODE   = A.COMP_CODE
		                                                       AND X.PERSON_NUMB = A.PERSON_NUMB
		       LEFT JOIN (SELECT COMP_CODE
		                       , PERSON_NUMB
		                       , SUM(DED_AMOUNT_I) DED_AMOUNT_I
		                  FROM HPA500T WITH(NOLOCK)
		                 GROUP BY COMP_CODE, PERSON_NUMB) Y ON Y.COMP_CODE   = A.COMP_CODE
		                                                   AND Y.PERSON_NUMB = A.PERSON_NUMB 
		  WHERE A.COMP_CODE  = #{S_COMP_CODE}
		    AND uniLITE.fnCheckCompDivAuth(A.COMP_CODE, A.DIV_CODE, #{S_USER_ID}) = 'Y'
		    AND A.JOIN_DATE &lt;= #{ANN_DATE}
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		    AND A.DIV_CODE  = #{DIV_CODE}	 -- 사업장
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPTS)">
		    AND CASE WHEN B.AF_DEPT_CODE IS NULL THEN A.DEPT_CODE
		             ELSE B.AF_DEPT_CODE 
		        END IN
		    <foreach collection="DEPT_CODE" item="item" separator="," close=")" open="(">
		                #{item}
		    </foreach>
		</if>
		<if test="@foren.Ognl@isNotEmpty(POST_CODE)">
		    AND B.AF_POST_CODE  = #{POST_CODE}	-- 직위
		</if>
		<if test="@foren.Ognl@isNotEmpty(ABIL_CODE)">
		    AND A.ABIL_CODE  = #{ABIL_CODE}	-- 직책
		</if>
		<if test="@foren.Ognl@isNotEmpty(JOB_CODE)">
		    AND A.JOB_CODE   LIKE + '%' + #{JOB_CODE} + '%' --담당업무
		</if>
		<if test="EMP_CODE == &quot;1&quot;">
		    AND A.PAY_GUBUN  = '1' --고용형태(정규직)
		</if>
		<if test="EMP_CODE == &quot;2&quot;">
		    AND A.PAY_GUBUN  = '2' --고용형태(비정규직)
		</if>
		<if test="JOIN_RETR == &quot;J&quot;">
		    AND A.RETR_DATE  = '00000000' --재직형태(재직자)
		</if>
		<if test="JOIN_RETR == &quot;R&quot;">
		    AND A.RETR_DATE != '00000000' --재직형태(퇴직자)
		</if>
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		    AND A.PERSON_NUMB = #{PERSON_NUMB} --사번
		</if>
		  GROUP BY A.COMP_CODE,     A.DEPT_CODE,    B.AF_DEPT_CODE,  A.DEPT_NAME,    B.PERSON_NUMB,  B.AF_DEPT_NAME
		         , A.NAME,          B.AF_POST_CODE, A.PERSON_NUMB,   AMOUNT_I,       DED_AMOUNT_I
		         , A.ABIL_CODE,     A.JOIN_DATE,    unilite.fnCipherDecrypt(A.REPRE_NUM, 'A'),       A.PAY_GUBUN,    A.PAY_GRADE_01
		         , A.PAY_GRADE_02,  A.JOB_CODE,     A.PAY_PROV_FLAG, A.PAY_CODE,     A.TAX_CODE
		         , A.EMPLOY_TYPE,   A.NATION_CODE,  A.SPOUSE,        A.WAGES_STD_I,  A.ANNUAL_SALARY_I
		         , A.SUPP_AGED_NUM, A.CHILD_20_NUM, A.DEFORM_NUM,    A.ANU_BASE_I,   A.ANU_INSUR_I
		         , A.MED_AVG_I,     A.MED_INSUR_I,  A.AGED_NUM,      A.SCHSHIP_CODE, A.GRADU_TYPE
		         , A.BIRTH_DATE,    A.WEDDING_DATE, A.ZIP_CODE,      A.KOR_ADDR,     A.TELEPHON
		         , A.PHONE_NO,      A.EMAIL_ADDR,   A.RETR_DATE,     M1.CODE_NAME,   M2.CODE_NAME
		         , M3.CODE_NAME,    M4.CODE_NAME,   M5.CODE_NAME,    M6.CODE_NAME,   M7.CODE_NAME
		         , M8.CODE_NAME,    M9.CODE_NAME,   M10.CODE_NAME,   M11.CODE_NAME,  A.PERSON_NUMB
		         , AMOUNT_I,        DED_AMOUNT_I,   A.POST_CODE
		         , B.BE_DEPT_CODE,  B.BE_DEPT_NAME
		-- Sort
		<if test="DOC_KIND == &quot;1&quot;">
		-- 부서,직위,직급,입사일
		  ORDER BY DEPT_CODE, (CASE WHEN ISNULL(B.AF_POST_CODE, '') = '' THEN A.POST_CODE ELSE B.AF_POST_CODE END), JOIN_DATE, NAME, PERSON_NUMB ASC
		</if>
		<if test="DOC_KIND == &quot;2&quot;">
		-- 직위,입사일
		  ORDER BY (CASE WHEN ISNULL(B.AF_POST_CODE, '') = '' THEN A.POST_CODE ELSE B.AF_POST_CODE END), JOIN_DATE, NAME, PERSON_NUMB ASC
		</if>
		<if test="DOC_KIND == &quot;3&quot;">
		--입사일,직위
		  ORDER BY JOIN_DATE, (CASE WHEN ISNULL(B.AF_POST_CODE, '') = '' THEN A.POST_CODE ELSE B.AF_POST_CODE END), NAME, PERSON_NUMB ASC
		</if>
	</select>
</mapper>