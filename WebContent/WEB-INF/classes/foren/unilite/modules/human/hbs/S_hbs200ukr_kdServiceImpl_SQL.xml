<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_hbs200ukr_kdServiceImpl">
	
	<select id="s_hbs200ukr_kdServiceImpl.getColumnData" parameterType="rMap" resultType="rMap">
	/* s_hbs200ukr_kdServiceImpl.getColumnData */
		SELECT WAGES_CODE
	        , WAGES_NAME
	     FROM HBS300T
	    WHERE COMP_CODE  = #{S_COMP_CODE}
	      AND WAGES_KIND = '1'
	      AND WAGES_CODE &lt;&gt; '100'	
	</select>
		
	<select id="s_hbs200ukr_kdServiceImpl.selectList" parameterType="Map" resultType="rMap">		
	/* s_hbs200ukr_kdServiceImpl.selectList */
	   SELECT PAY_GRADE_01                                                      
	        , PAY_GRADE_02                                                      
	        , (CASE WHEN (SELECT COUNT(1)                                       
	                        FROM HBS200T                                        
	                       WHERE COMP_CODE    = A.COMP_CODE                     
	                         AND PAY_GRADE_01 = A.PAY_GRADE_01                  
	                         AND PAY_GRADE_02 = A.PAY_GRADE_02                  
	                         AND WAGES_CODE   = '100') = 0                        
	                     THEN 'N'                                               
	                ELSE  ''                                                    
	           END) AS FLAG100                                                  
	        , '100' AS CODE100                                                  
	        , MAX(CASE WHEN B.WAGES_CODE = '100'                                
	                        THEN A.WAGES_I                                      
	                        ELSE 0                                              
	               END) AS STD100
	       <foreach collection="WAGES_CODE" item="item" index="index">
	   		, (CASE WHEN (SELECT COUNT(1)                                       
	                        FROM HBS200T                                        
	                       WHERE COMP_CODE    = A.COMP_CODE                     
	                         AND PAY_GRADE_01 = A.PAY_GRADE_01                  
	                         AND PAY_GRADE_02 = A.PAY_GRADE_02                  
	                         AND WAGES_CODE   = #{item.WAGES_CODE}) = 0 
	                     THEN 'N'                                               
	                     ELSE  ''                                               
	            END) AS FLAG${item.WAGES_CODE}                           
	        , #{item.WAGES_CODE} AS CODE${item.WAGES_CODE}     
	        , MAX(CASE WHEN B.WAGES_CODE = #{item.WAGES_CODE}         
	                        THEN A.WAGES_I                                      
	                        ELSE 0                                              
	               END) AS STD${item.WAGES_CODE} 
	       </foreach>   
	       FROM HBS200T A                                                         
	                  INNER JOIN HBS300T  B                                     
	                          ON A.COMP_CODE  = B.COMP_CODE                     
	                         AND A.WAGES_CODE = B.WAGES_CODE
	       WHERE A.COMP_CODE  = #{S_COMP_CODE}                                
	   		AND B.WAGES_KIND = '1'
	        <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_01)">   AND A.PAY_GRADE_01 = #{PAY_GRADE_01} </if>
	        <if test="@foren.Ognl@isNotEmpty(PAY_GRADE_02)">   AND A.PAY_GRADE_02 = #{PAY_GRADE_02} </if>
	    GROUP BY A.COMP_CODE, A.PAY_GRADE_01, A.PAY_GRADE_02
	    ORDER BY A.COMP_CODE, A.PAY_GRADE_01, A.PAY_GRADE_02	

	</select>
	
	<insert id="s_hbs200ukr_kdServiceImpl.insertList"  parameterType="rMap">
		/* s_hbs200ukrServiceImpl.insertList */
		INSERT INTO HBS200T (
			COMP_CODE,
			PAY_GRADE_01, 
			PAY_GRADE_02, 
			WAGES_CODE, 
			WAGES_I, 
			UPDATE_DB_USER, 
			UPDATE_DB_TIME, 
			INSERT_DB_USER, 
			INSERT_DB_TIME
		)
		VALUES (
			#{S_COMP_CODE}, 
			#{PAY_GRADE_01}, 
			#{PAY_GRADE_02}, 
			#{WAGES_CODE}, 
			#{WAGES_I}, 
			#{S_USER_ID}, 
			GETDATE(), 
			#{S_USER_ID}, 
			GETDATE()
		)
	</insert>	
	
	<update id="s_hbs200ukr_kdServiceImpl.updateList" parameterType="rMap">
		--UHbs01Krv.CHbs920UKr[fnhbs920set] HBS200T
		UPDATE HBS200T
		   SET WAGES_I        = #{WAGES_I}
		     , UPDATE_DB_USER = #{S_USER_ID}
		     , UPDATE_DB_TIME = GETDATE()
		     
		 WHERE PAY_GRADE_01   = #{PAY_GRADE_01}
		   AND PAY_GRADE_02   = #{PAY_GRADE_02}
		   AND WAGES_CODE     = #{WAGES_CODE}
		   AND COMP_CODE      = #{S_COMP_CODE}
		  	
	</update>
	<delete id="s_hbs200ukr_kdServiceImpl.deleteList" parameterType="rMap">
	/* hbs020ukrServiceImpl.deleteList11 */
	DELETE
	     FROM HBS200T
	     WHERE COMP_CODE = #{S_COMP_CODE} 
	     AND PAY_GRADE_01 = #{PAY_GRADE_01}
	     AND PAY_GRADE_02 = #{PAY_GRADE_02}
	</delete>	
	
    <select id="s_hbs200ukr_kdServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">	/* 엑셀업로드 */
		
		/*s_hbs200ukr_kdServiceImpl.selectExcelUploadSheet1*/
		BEGIN
		    SET NOCOUNT ON
		    SET ARITHABORT ON
		
		    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
		          , @UserId      NVARCHAR(100) /* 사용자ID    */
		          , @LangType    NVARCHAR(2)  /* 언어구분    */
		          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
		          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */
		
		    SET @CompCode = #{S_COMP_CODE}
		    SET @UserId   = #{S_USER_ID}
		    SET @LangType = #{S_LANG_CODE}  
		
		    /* 명칭 참조 유형 */
		    SELECT TOP 1 @RefItem = REF_ITEM
		      FROM BSA300T WITH (NOLOCK)
		     WHERE USER_ID = @UserId
		
		    SET @RefItem = ISNULL(@RefItem, N'0')
		
		    /* 날짜 포맷 유형 설정 */
		    SELECT TOP 1 @DateFormat = CODE_NAME
		      FROM BSA100T WITH (NOLOCK)
		     WHERE COMP_CODE = @CompCode
		       AND MAIN_CODE = N'B044'
		       AND REF_CODE1 = N'Y'
		
		    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')
		
		    /* 데이터 조회 */   
			SELECT _EXCEL_JOBID
					, A._EXCEL_ROWNUM
					, A._EXCEL_HAS_ERROR
					, A._EXCEL_ERROR_MSG
					, A.COMP_CODE
					, A.PAY_GRADE_01
					, A.PAY_GRADE_02
					, A.STD100
					, A.WAGES_CODE
					, A.WAGES_I
			FROM             HBS200T_EXCEL  A  

			 WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}
			 ORDER BY A._EXCEL_JOBID, A._EXCEL_ROWNUM
		END
		 
	</select>	
	
	<update id="excelValidate" >
	/*hat500ukrService.excelValidate*/
		<!--
		UPDATE   A
		SET 
				A._EXCEL_HAS_ERROR = ISNULL(_EXCEL_HAS_ERROR,'Y'),
								     
				A._EXCEL_ERROR_MSG = ISNULL(_EXCEL_ERROR_MSG,'') + '해당사원에 대한 일일근태정보가 이미 존재합니다.' 		
		FROM   HAT500T_EXCEL A
		LEFT JOIN  L_HAT500T B    ON B.COMP_CODE = #{S_COMP_CODE}
								AND A.DUTY_YYYYMMDD = B.DUTY_YYYYMMDD
								AND A.PERSON_NUMB = B.PERSON_NUMB	
		WHERE A._EXCEL_JOBID = #{_EXCEL_JOBID}							
		-->
	</update>	
	
	<insert id="s_hbs200ukr_kdServiceImpl.insertExcelHbs200t" parameterType="Map">		/* 엑셀insert */
    	/*s_hbs200ukr_kdServiceImpl.insertExcelHBS200t*/
		   
		    	INSERT INTO HBS200T_EXCEL
		    		(_EXCEL_JOBID, _EXCEL_ROWNUM, _EXCEL_HAS_ERROR, _EXCEL_ERROR_MSG, COMP_CODE, PAY_GRADE_01
		    		, PAY_GRADE_02, STD100, WAGES_CODE, WAGES_I, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
		    	VALUES (
		    		#{_EXCEL_JOBID}, #{_EXCEL_ROWNUM}, #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}, #{_EXCEL_ERROR,jdbcType=VARCHAR}, #{S_COMP_CODE}, #{PAY_GRADE_01}
		    		, #{PAY_GRADE_02}, #{STD100}, #{WAGES_CODE},  #{WAGES_I}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
				)
			
		<!--
		MERGE HAT500T_EXCEL AS M
			USING ( SELECT #{DUTY_YYYYMMDD} AS DUTY_YYYYMMDD , #{PERSON_NUMB} AS PERSON_NUMB ) AS A
			ON M.DUTY_YYYYMMDD = A.DUTY_YYYYMMDD
			AND M.PERSON_NUMB = A.PERSON_NUMB
			WHEN NOT MATCHED THEN
		    	INSERT 
		    		(_EXCEL_JOBID, _EXCEL_ROWNUM, _EXCEL_HAS_ERROR, _EXCEL_ERROR_MSG, COMP_CODE, DUTY_YYYYMMDD, PERSON_NUMB, NAME, POST_CODE, POST_NAME
		    		, DEPT_CODE, DEPT_NAME, DUTY_FR_DHM, DUTY_TO_DHM, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
		    	VALUES (
		    		#{_EXCEL_JOBID}, #{_EXCEL_ROWNUM}, #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}, #{_EXCEL_ERROR,jdbcType=VARCHAR}, #{S_COMP_CODE}, #{DUTY_YYYYMMDD}, #{PERSON_NUMB}, #{NAME},  #{POST_CODE}, #{POST_NAME}
		    		, #{DEPT_CODE}, #{DEPT_NAME}, #{DUTY_FR_DHM}, #{DUTY_TO_DHM}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
				)
			WHEN MATCHED THEN
				UPDATE SET DUTY_FR_DHM = #{DUTY_FR_DHM}
						  ,DUTY_TO_DHM = #{DUTY_TO_DHM}
						  ,UPDATE_DB_USER = #{S_USER_ID}
						  ,UPDATE_DB_TIME =GETDATE();	
			-->		  	
    </insert>	
	
</mapper>