<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hbs030ukrServiceImpl">
	
<select id="hbs030ukrServiceImpl.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}    
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'         
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
</select>	

<select id="hbs030ukrServiceImpl.checkMonth" parameterType="Map" resultType="rMap">
		     --UHbs01Krv.CHbs130Ukr[fnHbs130qstd] QUERY01
		    SELECT MAX(TAX_YYYYMM) AS TAX_YYYYMM
		      FROM HBS130T
		     WHERE COMP_CODE = #{S_COMP_CODE}
</select>

<select id="hbs030ukrServiceImpl.fnLoadMaxTaxYearMM" parameterType="Map" resultType="rMap">
		 --HBS110T의 TAX_YYYY, TAX_MONTH MAX값 세액년도에 입력
        BEGIN
        SET NOCOUNT ON
        SET ARITHABORT ON
    
        DECLARE @COMP_CODE      NVARCHAR(10)
    
        SET @COMP_CODE = #{S_COMP_CODE}
    
        SELECT  LEFT(MAX(TAX_YYYY+TAX_MONTH),4)       AS TAX_YYYY
             ,  SUBSTRING(MAX(TAX_YYYY+TAX_MONTH),5,2) AS TAX_MONTH
			 ,  MAX(TAX_YYYY+TAX_MONTH) AS TAX_YYYYMM

        FROM    HBS110T AS A WITH (NOLOCK)

     
        SET NOCOUNT OFF 
        SET ARITHABORT OFF 
    END 
</select>

	
<select id="hbs030ukrServiceImpl.selectList1" parameterType="rMap" resultType="rMap">		
		--UHad01Krv.Chad300kr SetHad300[fnHad300nQ]          
		SELECT STD_STRT_AMOUNT_I               
			 , STD_END_AMOUNT_I                
			 , INSUR_RATE                      
			 , INSUR_RATE1                     
			 , REMARK                         
			 , INSUR_SEQ                       
			 , INSUR_TYPE                      
			 , BASE_YEAR   
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
			 , COMP_CODE                  
		  FROM HAD300T                         
		 WHERE COMP_CODE  =  #{S_COMP_CODE}
		   AND BASE_YEAR  =  #{BASE_YEAR}
		   <if test="@foren.Ognl@isNotEmpty(INSUR_TYPE)">
           AND INSUR_TYPE    = #{INSUR_TYPE} 
     	   </if>		 
		ORDER BY INSUR_SEQ  
</select>
<insert id="hbs030ukrServiceImpl.insertHbs030"  parameterType="Map">
							--UHad01Krv.CHad200UKr[fnHad300nSet]
						INSERT INTO Had300t
						     ( 
							   STD_STRT_AMOUNT_I
						     , STD_END_AMOUNT_I
						     , INSUR_RATE
						     , INSUR_RATE1
							   <if test="@foren.Ognl@isNotEmpty(REMARK)">
							 , REMARK 
							   </if>
							   <if test="@foren.Ognl@isNotEmpty(INSUR_SEQ)">
							 , INSUR_SEQ
							   </if>
						       <if test="@foren.Ognl@isNotEmpty(INSUR_TYPE)">
						     , INSUR_TYPE
						       </if>
						     , BASE_YEAR
						     , UPDATE_DB_USER
						     , UPDATE_DB_TIME
						     , COMP_CODE
						     ) 
						VALUES
						     (
						       #{STD_STRT_AMOUNT_I}
						     , #{STD_END_AMOUNT_I}
						     , #{INSUR_RATE}
						     , #{INSUR_RATE1}
							  <if test="@foren.Ognl@isNotEmpty(REMARK)">
							 , #{REMARK} 
							  </if>
						      <if test="@foren.Ognl@isNotEmpty(INSUR_SEQ)">
						     , #{INSUR_SEQ}
						      </if>
							  <if test="@foren.Ognl@isNotEmpty(INSUR_TYPE)">
						     , #{INSUR_TYPE}
						      </if>
						     , #{BASE_YEAR}
						     , #{S_USER_ID}
						     , GETDATE()
							 , #{S_COMP_CODE}
						     )
</insert>
<update id="hbs030ukrServiceImpl.updateHbs030" parameterType="Map">
     --UHad01Krv.CHad200UKr[fnHad300nSet]
UPDATE Had300t
   SET <if test="@foren.Ognl@isNotEmpty(STD_END_AMOUNT_I)">
       STD_END_AMOUNT_I  = #{STD_END_AMOUNT_I}</if>
      <if test="@foren.Ognl@isNotEmpty(INSUR_RATE)">
     , INSUR_RATE        = #{INSUR_RATE}</if>
     <if test="@foren.Ognl@isNotEmpty(INSUR_RATE1)">
     , INSUR_RATE1       = #{INSUR_RATE1}</if>
     <if test="@foren.Ognl@isNotEmpty(REMARK)">
     , REMARK            = #{REMARK}</if>
     , UPDATE_DB_USER    = #{S_USER_ID}
     , UPDATE_DB_TIME    = GETDATE()
     
 WHERE INSUR_SEQ         = #{INSUR_SEQ}
   AND INSUR_TYPE        = #{INSUR_TYPE}
   AND BASE_YEAR         = #{BASE_YEAR}
   AND COMP_CODE         = #{S_COMP_CODE}
</update>
<delete id="hbs030ukrServiceImpl.deleteHbs030" parameterType="rMap">
  --UHad01Krv.CHad200UKr[fnHad300nSet]
DELETE FROM Had300t 
 WHERE INSUR_SEQ  = #{INSUR_SEQ}
   AND INSUR_TYPE = #{INSUR_TYPE}
   AND BASE_YEAR  = #{BASE_YEAR}
   AND COMP_CODE  = #{S_COMP_CODE}
</delete>
<select id="hbs030ukrServiceImpl.selectList2" parameterType="rMap" resultType="rMap">		
		--UHad01Krv.Chad100Kr SetHad100[fnHad100nQ]            
		SELECT TAX_STD_LO_I                     
			 , TAX_STD_HI_I                     
			 , TAX_RATE                         
			 , ACCUM_SUB_I                      
			 , TAX_YEAR                         
		  FROM HAD100T                          
		 WHERE COMP_CODE = #{S_COMP_CODE}  
		   AND TAX_YEAR  = #{TAX_YEAR1}
		 ORDER BY TAX_STD_LO_I  
</select>
<insert id="hbs030ukrServiceImpl.insertHbs030_2"  parameterType="Map">
	   --UHad01Krv.CHad100UKr[fnHad100nSet] 
INSERT INTO Had100t
     ( TAX_STD_LO_I
     , TAX_STD_HI_I
     , TAX_RATE
     , ACCUM_SUB_I
     , TAX_YEAR
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     , COMP_CODE
     ) 
VALUES
     ( #{TAX_STD_LO_I}
     , #{TAX_STD_HI_I}
     , #{TAX_RATE}
     , #{ACCUM_SUB_I}
     , #{TAX_YEAR}
     , #{S_USER_ID}
     , GETDATE()
     , #{S_COMP_CODE}
     )
</insert>
<update id="hbs030ukrServiceImpl.updateHbs030_2" parameterType="Map">
 --UHad01Krv.CHad100UKr[fnHad100nSet] 
UPDATE Had100t
   SET TAX_STD_HI_I   = #{TAX_STD_HI_I}
     , TAX_RATE       = #{TAX_RATE}
     , ACCUM_SUB_I    = #{ACCUM_SUB_I}
     , UPDATE_DB_USER = #{S_USER_ID}
     , UPDATE_DB_TIME = GETDATE()
 WHERE TAX_STD_LO_I   =  #{TAX_STD_LO_I}
   AND TAX_YEAR       =  #{TAX_YEAR}
   AND COMP_CODE      =  #{S_COMP_CODE}
</update>
<delete id="hbs030ukrServiceImpl.deleteHbs030_2" parameterType="rMap">
--UHad01Krv.CHad100UKr[fnHad100nSet] 
DELETE FROM Had100t 
 WHERE TAX_STD_LO_I =  #{TAX_STD_LO_I}
   AND TAX_YEAR     =  #{TAX_YEAR}
   AND COMP_CODE    =  #{S_COMP_CODE}
</delete>
<select id="hbs030ukrServiceImpl.selectList3" parameterType="rMap" resultType="rMap">		
		 --UHrt01Krv.CHrt100UKr SetHrt100[fnHrt100nq] 
		SELECT DUTY_YYYY                        
			 , INCOME_SUB                       
			 , TAX_YEAR                       
		  FROM HRT100T                          
		 WHERE COMP_CODE =  #{S_COMP_CODE}  
		   AND TAX_YEAR  = #{TAX_YEAR2}
		 ORDER BY DUTY_YYYY 
</select>
<insert id="hbs030ukrServiceImpl.insertHbs030_3"  parameterType="Map">
--UHrt01Krv.CHrt100UKr SetHrt100[fnHrt100nSet]
INSERT INTO Hrt100T
     ( DUTY_YYYY
     , INCOME_SUB
     , TAX_YEAR
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     , COMP_CODE
     ) 
VALUES
     ( #{DUTY_YYYY}
     , #{INCOME_SUB}
     , #{INCOME_SUB}
     , #{TAX_YEAR}
     , GETDATE()
     , #{S_COMP_CODE}
     )
</insert>
<update id="hbs030ukrServiceImpl.updateHbs030_3" parameterType="Map">
     --UHrt01Krv.CHrt100UKr SetHrt100[fnHrt100nSet]
UPDATE Hrt100T
   SET INCOME_SUB     = #{INCOME_SUB}
     , UPDATE_DB_USER = #{S_USER_ID}
     , UPDATE_DB_TIME = GETDATE() 
 WHERE DUTY_YYYY      = #{DUTY_YYYY}
   AND TAX_YEAR       = #{TAX_YEAR}
   AND COMP_CODE      = #{S_COMP_CODE}
</update>
<delete id="hbs030ukrServiceImpl.deleteHbs030_3" parameterType="rMap">
--UHad01Krv.CHad100UKr[fnHad100nSet] 
  --UHrt01Krv.CHrt100UKr SetHrt100[fnHrt100nSet]
DELETE FROM Hrt100T 
 WHERE DUTY_YYYY = #{DUTY_YYYY}
   AND TAX_YEAR  = #{TAX_YEAR}
   AND COMP_CODE = #{S_COMP_CODE}
</delete>
<select id="hbs030ukrServiceImpl.selectList4" parameterType="rMap" resultType="rMap">		
			--UHbs01Krv.Chbs510Ukr[fnHbs510nQ]ssql 
		SELECT TAX_YYYY        
			 , TAX_STRT_AMOUNT
			 , TAX_END_AMOUNT
			 , DED_GRADE1
			 , DED_GRADE2
			 , DED_GRADE3
			 , DED_GRADE3_CHILD
			 , DED_GRADE4
			 , DED_GRADE4_CHILD
			 , DED_GRADE5
			 , DED_GRADE5_CHILD
			 , DED_GRADE6
			 , DED_GRADE6_CHILD
			 , DED_GRADE7
			 , DED_GRADE7_CHILD
			 , DED_GRADE8
			 , DED_GRADE8_CHILD
			 , DED_GRADE9
			 , DED_GRADE9_CHILD
			 , DED_GRADE10
			 , DED_GRADE10_CHILD
			 , DED_GRADE11
			 , DED_GRADE11_CHILD
		 FROM HBS110T WITH (NOLOCK)
		 WHERE  TAX_YYYY = #{TAX_YYYY}
		 AND    TAX_MONTH = ISNULL((SELECT MAX(TAX_MONTH) FROM HBS110T WITH (NOLOCK) WHERE TAX_YYYY=TAX_YYYY AND TAX_MONTH &lt;=  #{TAX_MONTH}),'01')
</select>
<select id="hbs030ukrServiceImpl.insertHbs030_4" parameterType="rMap" resultType="rMap">		 
	  INSERT INTO HBS110T
      (        TAX_YYYY
             , TAX_STRT_AMOUNT
			 , TAX_END_AMOUNT
			 , DED_GRADE1
			 , DED_GRADE2
			 , DED_GRADE3
			 , DED_GRADE3_CHILD
			 , DED_GRADE4
			 , DED_GRADE4_CHILD
			 , DED_GRADE5
			 , DED_GRADE5_CHILD
			 , DED_GRADE6
			 , DED_GRADE6_CHILD
			 , DED_GRADE7
			 , DED_GRADE7_CHILD
			 , DED_GRADE8
			 , DED_GRADE8_CHILD
			 , DED_GRADE9
			 , DED_GRADE9_CHILD
			 , DED_GRADE10
			 , DED_GRADE10_CHILD
			 , DED_GRADE11
			 , DED_GRADE11_CHILD	
     ) 
	VALUES
     ( 		   #{TAX_YYYY}
     		 , #{TAX_STRT_AMOUNT} * 1000
			 , #{TAX_END_AMOUNT} * 1000
			 , #{DED_GRADE1}
			 , #{DED_GRADE2}
			 , #{DED_GRADE3}
			 , #{DED_GRADE3_CHILD}
			 , #{DED_GRADE4}
			 , #{DED_GRADE4_CHILD}
			 , #{DED_GRADE5}
			 , #{DED_GRADE5_CHILD}
			 , #{DED_GRADE6}
			 , #{DED_GRADE6_CHILD}
			 , #{DED_GRADE7}
			 , #{DED_GRADE7_CHILD}
			 , #{DED_GRADE8}
			 , #{DED_GRADE8_CHILD}
			 , #{DED_GRADE9}
			 , #{DED_GRADE9_CHILD}
			 , #{DED_GRADE10}
			 , #{DED_GRADE10_CHILD}
			 , #{DED_GRADE11}
			 , #{DED_GRADE11_CHILD}
     )
</select>
<select id="hbs030ukrServiceImpl.deleteHbs030_4" parameterType="rMap" resultType="rMap">	
	--UHbs01Krv.Chbs510ukr[fnHbs510nSet]ssql
DELETE FROM HBS110T
 WHERE TAX_YYYY = #{TAX_YYYY}
 </select>
<select id="hbs030ukrServiceImpl.selectList5" parameterType="rMap" resultType="rMap">		
 --UHbs01Krv.CHbs120Ukr[fnHbs120qstd] QUERY01
SELECT 
        COMP_CODE
      , TAX_YYYY
      , NONTAX_CODE
      , NONTAX_CODE_NAME
      , TAX_EXEMP_KIND
      , TAX_EXEMP_LMT
      , PRINT_LOCATION
      , SEND_YN
      , LAW_PROVISION
      , INSERT_DB_USER
      , INSERT_DB_TIME
      , UPDATE_DB_USER
      , UPDATE_DB_TIME
   FROM HBS120T
  WHERE COMP_CODE   = #{S_COMP_CODE}
    AND TAX_YYYY    = #{TAX_YYYY5}
  ORDER BY NONTAX_CODE
</select>
<insert id="hbs030ukrServiceImpl.insertHbs030_5"  parameterType="Map">
--UHbs01Krv.CHbs120Ukr[fnHbs120save] Query02
INSERT INTO HBS120T
     ( COMP_CODE
     , TAX_YYYY
     , NONTAX_CODE
     , NONTAX_CODE_NAME
     <if test="@foren.Ognl@isNotEmpty(TAX_EXEMP_KIND)">
     , TAX_EXEMP_KIND 
     </if>
     <if test="@foren.Ognl@isNotEmpty(TAX_EXEMP_LMT)">
     , TAX_EXEMP_LMT 
     </if>
    <if test="@foren.Ognl@isNotEmpty(PRINT_LOCATION)">
     , PRINT_LOCATION 
     </if>
     , SEND_YN
     <if test="@foren.Ognl@isNotEmpty(LAW_PROVISION)">
     , LAW_PROVISION
     </if>
     , INSERT_DB_USER
     , INSERT_DB_TIME
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     ) 
VALUES
     ( #{S_COMP_CODE}
     , #{TAX_YYYY}
     , #{NONTAX_CODE}
     , #{NONTAX_CODE_NAME}
     <if test="@foren.Ognl@isNotEmpty(TAX_EXEMP_KIND)">
     , #{TAX_EXEMP_KIND}
     </if>
     <if test="@foren.Ognl@isNotEmpty(TAX_EXEMP_LMT)">
     , #{TAX_EXEMP_LMT}
     </if>
     <if test="@foren.Ognl@isNotEmpty(PRINT_LOCATION)">
     , #{PRINT_LOCATION}
     </if>
     , #{SEND_YN}
     <if test="@foren.Ognl@isNotEmpty(LAW_PROVISION)">
     , #{LAW_PROVISION} 
     </if>
     , #{S_USER_ID}
     , GETDATE()
     , #{S_USER_ID}
     , GETDATE()
     )
</insert>
<update id="hbs030ukrServiceImpl.updateHbs030_5" parameterType="Map">
     --UHbs01Krv.CHbs120Ukr[fnHbs120save] Query02
UPDATE HBS120T
   SET NONTAX_CODE_NAME = #{NONTAX_CODE_NAME}
     , TAX_EXEMP_KIND   = #{TAX_EXEMP_KIND}
     , TAX_EXEMP_LMT   = #{TAX_EXEMP_LMT} 
      <if test="@foren.Ognl@isNotEmpty(PRINT_LOCATION)">
     , PRINT_LOCATION   = #{PRINT_LOCATION} </if>
     , SEND_YN          = #{SEND_YN}
      <if test="@foren.Ognl@isNotEmpty(LAW_PROVISION)">
     , LAW_PROVISION    = #{LAW_PROVISION} </if>
     , INSERT_DB_USER   = #{S_USER_ID}
     , UPDATE_DB_USER   = #{S_USER_ID}
     , UPDATE_DB_TIME   = GETDATE()
     
 WHERE COMP_CODE        = #{S_COMP_CODE}
   AND TAX_YYYY         = #{TAX_YYYY}
   AND NONTAX_CODE      = #{NONTAX_CODE}
</update>
<delete id="hbs030ukrServiceImpl.deleteHbs030_5" parameterType="rMap">
  --UHbs01Krv.CHbs120Ukr[fnHbs120save] Query02
DELETE FROM HBS120T 
 WHERE COMP_CODE   = #{S_COMP_CODE}
   AND TAX_YYYY    = #{TAX_YYYY}
   AND NONTAX_CODE = #{NONTAX_CODE}
</delete>	
<select id="hbs030ukrServiceImpl.selectList6" parameterType="rMap" resultType="rMap">		
--UHbs01Krv.CHbs130Ukr[fnHbs130qstd] QUERY02
		SELECT COMP_CODE
			 , TAX_YYYYMM
			 , TAX_CODE
			 , TAX_CODE_NAME
			 , SORT_SEQ
			 , REF_CODE1
			 , REF_CODE2
			 , REF_CODE3
			 , REF_CODE4
			 , COL_EDIT4	
			 , COL_EDIT5		
			 , COL_EDIT6		
			 , COL_EDIT7		
			 , COL_EDIT8		
			 , COL_EDIT9		
			 , COL_EDIT10	
			 , COL_EDIT11
			 
			 
			 , INSERT_DB_USER
			 , INSERT_DB_TIME
			 , UPDATE_DB_USER
			 , UPDATE_DB_TIME
		  FROM HBS130T
		  WHERE COMP_CODE   = #{S_COMP_CODE}
			AND TAX_YYYYMM  = #{TAX_YYYYMM}
		  ORDER BY SORT_SEQ
</select>
<insert id="hbs030ukrServiceImpl.insertHbs030_6"  parameterType="Map">
--UHbs01Krv.CHbs130Ukr[fnHbs130save] Query02
INSERT INTO HBS130T
     ( COMP_CODE
     , TAX_YYYYMM
     , TAX_CODE
     , TAX_CODE_NAME
     , SORT_SEQ
     , REF_CODE1
     , REF_CODE2
     , REF_CODE3
     , REF_CODE4
     , COL_EDIT4	
	 , COL_EDIT5		
	 , COL_EDIT6		
	 , COL_EDIT7		
	 , COL_EDIT8		
	 , COL_EDIT9		
	 , COL_EDIT10	
	 , COL_EDIT11
     , INSERT_DB_USER
     , INSERT_DB_TIME
     , UPDATE_DB_USER
     , UPDATE_DB_TIME
     ) 
VALUES
     (#{S_COMP_CODE}
     , #{TAX_YYYYMM}
     , #{TAX_CODE}
     , #{TAX_CODE_NAME}
     , #{SORT_SEQ}
     , #{REF_CODE1}
     , #{REF_CODE2}
     , #{REF_CODE3}
     , #{REF_CODE4}
     
     , #{COL_EDIT4}	
	 , #{COL_EDIT5}
	 , #{COL_EDIT6}
	 , #{COL_EDIT7}
	 , #{COL_EDIT8}
	 , #{COL_EDIT9}
	 , #{COL_EDIT10}
	 , #{COL_EDIT11}
     , #{S_USER_ID}
     , GETDATE()
     , #{S_USER_ID}
     , GETDATE()
     )
</insert>
<update id="hbs030ukrServiceImpl.updateHbs030_6" parameterType="Map">
 --UHbs01Krv.CHbs130Ukr[fnHbs130save] Query02
UPDATE HBS130T
   SET TAX_CODE_NAME  = #{TAX_CODE_NAME}
     , SORT_SEQ       = #{SORT_SEQ}
     , REF_CODE1      = #{REF_CODE1}
     , REF_CODE2      = #{REF_CODE2}
     , REF_CODE3      = #{REF_CODE3}
     , REF_CODE4      = #{REF_CODE4}
     
     , COL_EDIT4	 = #{COL_EDIT4}	
	 , COL_EDIT5     = #{COL_EDIT5}
	 , COL_EDIT6     = #{COL_EDIT6}
	 , COL_EDIT7     = #{COL_EDIT7}
	 , COL_EDIT8     = #{COL_EDIT8}
	 , COL_EDIT9     = #{COL_EDIT9}
	 , COL_EDIT10    = #{COL_EDIT10}
	 , COL_EDIT11    = #{COL_EDIT11}
     
     , UPDATE_DB_USER = #{S_USER_ID}
     , UPDATE_DB_TIME = GETDATE()
     
 WHERE COMP_CODE      = #{S_COMP_CODE}
   AND TAX_YYYYMM     = #{TAX_YYYYMM}
   AND TAX_CODE       = #{TAX_CODE}
</update>
<delete id="hbs030ukrServiceImpl.deleteHbs030_6" parameterType="rMap">
  --UHbs01Krv.CHbs130Ukr[fnHbs130save] Query02
DELETE FROM HBS130T 
 WHERE COMP_CODE   = #{S_COMP_CODE}
   AND TAX_YYYYMM  = #{TAX_YYYYMM}
   AND TAX_CODE    = #{TAX_CODE}
</delete>

<select id="hbs030ukrServiceImpl.doBatch" parameterType="rMap" resultType="int">		 
-- begin try
 
 --표준보수월액등록
   IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#HAD300T_TEMP'))
   DROP TABLE #HAD300T_TEMP
        
   SELECT *
   INTO #HAD300T_TEMP
   FROM HAD300T
    WHERE COMP_CODE = #{S_COMP_CODE}
      AND BASE_YEAR  =  #{OLD_YEAR}
            
   UPDATE #HAD300T_TEMP SET BASE_YEAR =  #{NOW_YEAR}
                                   , UPDATE_DB_USER = #{S_USER_ID}
                                   , UPDATE_DB_TIME = GETDATE()
                                   , INSERT_DB_USER = #{S_USER_ID}
                                   , INSERT_DB_TIME =  GETDATE() 
    WHERE COMP_CODE = #{S_COMP_CODE}
    AND BASE_YEAR  =  #{OLD_YEAR}
    
 declare @BASE_YEAR INT
    SELECT @BASE_YEAR = COUNT(*) FROM HAD300T WHERE BASE_YEAR = #{NOW_YEAR}
  IF  @BASE_YEAR = 0      
 BEGIN  
    INSERT INTO HAD300T
    SELECT *
    FROM #HAD300T_TEMP
    WHERE COMP_CODE = #{S_COMP_CODE}
    AND BASE_YEAR  =  #{NOW_YEAR}	
END

--종합소득세율등록
IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#HAD100T_TEMP'))
    DROP TABLE #HAD100T_TEMP
    
    
SELECT *
  INTO #HAD100T_TEMP
  FROM HAD100T
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YEAR  = #{OLD_YEAR}

UPDATE #HAD100T_TEMP SET TAX_YEAR =  #{NOW_YEAR}
                       , UPDATE_DB_USER =  #{S_USER_ID}
                       , UPDATE_DB_TIME =  GETDATE() 
                       , INSERT_DB_USER =  #{S_USER_ID}
                       , INSERT_DB_TIME =  GETDATE() 
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YEAR  = #{OLD_YEAR}
 
 declare @TAX_YEAR INT
   SELECT @TAX_YEAR = COUNT(*) FROM HAD100T WHERE TAX_YEAR = #{NOW_YEAR}
 IF  @TAX_YEAR = 0      
 BEGIN   
INSERT INTO HAD100T
SELECT *
  FROM #HAD100T_TEMP
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YEAR = #{NOW_YEAR} 
 END
 
 --퇴직소득공제등록
  IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#HRT100T_TEMP'))
  DROP TABLE #HRT100T_TEMP
            
  SELECT *
  INTO #HRT100T_TEMP
  FROM HRT100T
  WHERE COMP_CODE = #{S_COMP_CODE}
  AND TAX_YEAR  = #{OLD_YEAR}
            
  UPDATE #HRT100T_TEMP SET TAX_YEAR = #{NOW_YEAR}
                                   , UPDATE_DB_USER = #{S_USER_ID}
                                   , UPDATE_DB_TIME = GETDATE()
                                   , INSERT_DB_USER = #{S_USER_ID}
                                   , INSERT_DB_TIME =  GETDATE() 
  WHERE COMP_CODE = #{S_COMP_CODE}
  AND TAX_YEAR  =  #{OLD_YEAR}
 
 declare @TAX_YEAR2 INT
   SELECT @TAX_YEAR2 = COUNT(*) FROM HRT100T WHERE TAX_YEAR = #{NOW_YEAR}
 IF  @TAX_YEAR2 = 0      
 BEGIN           
  INSERT INTO HRT100T
  SELECT *
  FROM #HRT100T_TEMP
  WHERE COMP_CODE = #{S_COMP_CODE}
  AND TAX_YEAR  = #{NOW_YEAR}
 END
  
  --간이소득세액표
    IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#HBS110T_TEMP'))
    DROP TABLE #HBS110T_TEMP
            
    SELECT *
    INTO #HBS110T_TEMP
    FROM HBS110T
    WHERE TAX_YYYY  = #{OLD_YEAR}
            
    UPDATE #HBS110T_TEMP SET TAX_YYYY = #{NOW_YEAR}
                                   , UPDATE_DB_USER = #{S_USER_ID}
                                   , UPDATE_DB_TIME = GETDATE()
                                   , INSERT_DB_USER = #{S_USER_ID}
                                   , INSERT_DB_TIME =  GETDATE() 
     WHERE TAX_YYYY  = #{OLD_YEAR}
   
   declare @TAX_YYYY INT
   SELECT @TAX_YYYY = COUNT(*) FROM HBS110T WHERE TAX_YYYY = #{NOW_YEAR}
  IF  @TAX_YYYY = 0      
  BEGIN           
     INSERT INTO HBS110T
     SELECT *
     FROM #HBS110T_TEMP
     WHERE TAX_YYYY  = #{NOW_YEAR}
  END
 
 --비과세근로소득코드등록
IF EXISTS (SELECT TOP 1 1 FROM tempdb..sysobjects WHERE id=object_id('tempdb..#HBS120T_TEMP'))
    DROP TABLE #HBS120T_TEMP

SELECT *
  INTO #HBS120T_TEMP
  FROM HBS120T
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YYYY  = #{OLD_YEAR}

UPDATE #HBS120T_TEMP SET TAX_YYYY = #{NOW_YEAR}
                       , UPDATE_DB_USER = #{S_USER_ID}
                       , UPDATE_DB_TIME = GETDATE()
                       , INSERT_DB_USER = #{S_USER_ID}
                       , INSERT_DB_TIME =  GETDATE() 
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YYYY  = #{OLD_YEAR}
   
 declare @TAX_YYYY2 INT
   SELECT @TAX_YYYY2 = COUNT(*) FROM HBS120T WHERE TAX_YYYY = #{NOW_YEAR}
  IF  @TAX_YYYY2 = 0      
  BEGIN  
INSERT INTO HBS120T
SELECT *
  FROM #HBS120T_TEMP
 WHERE COMP_CODE = #{S_COMP_CODE}
   AND TAX_YYYY  = #{NOW_YEAR}  
END
--return 1
--end try

--begin catch
--return 0
--end catch
 
 
  
</select>

<insert id="hbs030ukrServiceImpl.insertExcelHbs031t" parameterType="Map">		/* 엑셀insert */
INSERT INTO HBS031T
     (_EXCEL_JOBID
     , _EXCEL_ROWNUM
     , _EXCEL_HAS_ERROR
     , _EXCEL_ERROR_MSG
     , TAX_YYYY			
     , TAX_MONTH 		
     , TAX_STRT_AMOUNT 	
     , TAX_END_AMOUNT 	
     , DED_GRADE1 		
     , DED_GRADE2 		
     , DED_GRADE3 		
     , DED_GRADE3_CHILD 	
     , DED_GRADE4 		
     , DED_GRADE4_CHILD  
     , DED_GRADE5 		
     , DED_GRADE5_CHILD 	
     , DED_GRADE6 		
     , DED_GRADE6_CHILD 	
     , DED_GRADE7 		
     , DED_GRADE7_CHILD 	
     , DED_GRADE8 		
     , DED_GRADE8_CHILD 	
     , DED_GRADE9 		
     , DED_GRADE9_CHILD 	
     , DED_GRADE10 		
     , DED_GRADE10_CHILD 
     , DED_GRADE11 		
     , DED_GRADE11_CHILD 
     , UPDATE_DB_USER	
     , UPDATE_DB_TIME
     ) 
VALUES
     ( #{_EXCEL_JOBID}
     , #{_EXCEL_ROWNUM}
     , #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}
     , #{_EXCEL_ERROR,jdbcType=VARCHAR}
     , #{TAX_YYYY}
     , #{TAX_MONTH}
     , #{TAX_STRT_AMOUNT}
     , #{TAX_END_AMOUNT}
     , #{DED_GRADE1}
     , #{DED_GRADE2}
     , #{DED_GRADE3}
     , #{DED_GRADE3_CHILD}
     , #{DED_GRADE4}
     , #{DED_GRADE4_CHILD}
     , #{DED_GRADE5}
     , #{DED_GRADE5_CHILD}
     , #{DED_GRADE6}
     , #{DED_GRADE6_CHILD}
     , #{DED_GRADE7}
     , #{DED_GRADE7_CHILD}
     , #{DED_GRADE8}
     , #{DED_GRADE8_CHILD}
     , #{DED_GRADE9}
     , #{DED_GRADE9_CHILD}
     , #{DED_GRADE10}
     , #{DED_GRADE10_CHILD}
     , #{DED_GRADE11}
     , #{DED_GRADE11_CHILD}
     , #{S_USER_ID}
     , GETDATE()
     )
</insert>

<select id="hbs030ukrServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">	/* 엑셀업로드 버튼 / 조회 */
BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

    DECLARE @CompCode    NVARCHAR(08) /* 법인코드    */
          , @UserId      NVARCHAR(100) /* 사용자ID    */
          , @LangType    NVARCHAR(2)  /* 언어구분    */
          , @RefItem     NVARCHAR(01) /* 명칭 참조 유형  */
          , @DateFormat  NVARCHAR(10) /* 날짜 포맷 유형 설정 */

    SET @CompCode = #{S_COMP_CODE}
    SET @UserId   = #{S_USER_ID}
    SET @LangType = #{S_LANG_CODE}  

    /* 명칭 참조 유형 */
    SELECT TOP 1 @RefItem = REF_ITEM
      FROM BSA300T WITH (NOLOCK)
     WHERE USER_ID = @UserId

    SET @RefItem = ISNULL(@RefItem, N'0')

    /* 날짜 포맷 유형 설정 */
    SELECT TOP 1 @DateFormat = CODE_NAME
      FROM BSA100T WITH (NOLOCK)
     WHERE COMP_CODE = @CompCode
       AND MAIN_CODE = N'B044'
       AND REF_CODE1 = N'Y'

    SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')

    /* 데이터 조회 */	
    SELECT _EXCEL_JOBID
		 , _EXCEL_ROWNUM
		 , _EXCEL_HAS_ERROR
		 , _EXCEL_ERROR_MSG
		 , TAX_YYYY
		 , TAX_MONTH         
		 , TAX_STRT_AMOUNT   
		 , TAX_END_AMOUNT    
		 , ISNULL(DED_GRADE1, 0) 		AS 	DED_GRADE1 	    
		 , ISNULL(DED_GRADE2, 0) 		AS 	DED_GRADE2 	    
		 , ISNULL(DED_GRADE3, 0) 		AS 	DED_GRADE3 	    
		 , ISNULL(DED_GRADE3_CHILD, 0)  AS  DED_GRADE3_CHILD  
		 , ISNULL(DED_GRADE4, 0) 		AS  DED_GRADE4        
		 , ISNULL(DED_GRADE4_CHILD, 0) 	AS  DED_GRADE4_CHILD  
		 , ISNULL(DED_GRADE5, 0) 		AS  DED_GRADE5       
		 , ISNULL(DED_GRADE5_CHILD, 0) 	AS  DED_GRADE5_CHILD 
		 , ISNULL(DED_GRADE6, 0) 		AS  DED_GRADE6       
		 , ISNULL(DED_GRADE6_CHILD, 0) 	AS  DED_GRADE6_CHILD 
		 , ISNULL(DED_GRADE7, 0) 		AS  DED_GRADE7       
		 , ISNULL(DED_GRADE7_CHILD, 0) 	AS  DED_GRADE7_CHILD 
		 , ISNULL(DED_GRADE8, 0) 		AS  DED_GRADE8       
		 , ISNULL(DED_GRADE8_CHILD, 0) 	AS  DED_GRADE8_CHILD 
		 , ISNULL(DED_GRADE9, 0) 		AS  DED_GRADE9       
		 , ISNULL(DED_GRADE9_CHILD, 0) 	AS  DED_GRADE9_CHILD 
		 , ISNULL(DED_GRADE10, 0) 		AS  DED_GRADE10      
		 , ISNULL(DED_GRADE10_CHILD, 0) AS  DED_GRADE10_CHILD
		 , ISNULL(DED_GRADE11, 0) 		AS  DED_GRADE11      
		 , ISNULL(DED_GRADE11_CHILD, 0) AS  DED_GRADE11_CHILD
	     , UPDATE_DB_USER 
	     , UPDATE_DB_TIME 
	     --, COMP_CODE 
	  FROM HBS031T
	 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
  	ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
END
</select>

<update id="excelValidate" >	/* 엑셀validation */
/*hbs030ukrServiceImpl.excelValidate*/
/*다국어 메세지 처리 함수 필요. S_LANG_CODE와 msg_no를 파라미터로 받아 BSA000T에서 조회*/
	
UPDATE   A
SET 
		A._EXCEL_HAS_ERROR = (CASE WHEN 
									A.TAX_YYYY IS NULL 	      OR
									A.TAX_MONTH IS NULL 	  OR
									A.TAX_STRT_AMOUNT IS NULL OR 
									A.TAX_END_AMOUNT IS NULL 			THEN 'Y'		-- 필수값 체크
						  		ELSE A._EXCEL_HAS_ERROR 
					      	 END),
		
		

					     
		A._EXCEL_ERROR_MSG = (CASE WHEN  
									A.TAX_YYYY IS NULL 	      OR
									A.TAX_MONTH IS NULL 	  OR
									A.TAX_STRT_AMOUNT IS NULL OR 
									A.TAX_END_AMOUNT IS NULL 		 	THEN '필수입력 값을 확인 해주세요.'
						  		ELSE A._EXCEL_ERROR_MSG 
					      	 END)
							 
FROM HBS031T A 	
</update>
	
</mapper>