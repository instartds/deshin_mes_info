<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hat503ukrServiceImpl">
	 <select id="hat503ukrServiceImpl.checkData" parameterType="Map" resultType="String">
		SELECT TOP 1 COMP_CODE
		  FROM HAT500T
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
	</select>
	
    <select id="hat503ukrServiceImpl.gsActivFlag" parameterType="Map" resultType="String">
		/* hat503ukrServiceImpl.gsActivFlag */
		SELECT TOP 1 B.REF_CODE3 
		  FROM BSA300T A WITH(NOLOCK)
     LEFT JOIN BSA100T B ON B.COMP_CODE = A.COMP_CODE
						AND B.MAIN_CODE = 'H162'
						AND B.SUB_CODE = A.PERSON_NUMB
		 WHERE A.COMP_CODE = #{S_COMP_CODE}
		   AND A.USER_ID = #{S_USER_ID}
	</select>
	
    <select id="hat503ukrServiceImpl.getDutyRule" parameterType="String" resultType="String">
        /* hat503ukrServiceImpl.getDutyRule */
        SELECT  DUTY_INPUT_RULE
        FROM    HBS400T
        WHERE   COMP_CODE = #{S_COMP_CODE}
    </select>
    
    <select id="hat503ukrServiceImpl.getAllDutycode" parameterType="rMap" resultType="rMap">
        /* hat503ukrServiceImpl.getAllDutycode */
        SELECT  DISTINCT B.SUB_CODE
             ,  B.CODE_NAME 
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE 
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033' 
        AND     B.SUB_CODE &lt;&gt; '$' 
        <if test='DUTY_RULE.equals("Y")'> 
        AND     A.COTR_TYPE = '2'
        </if>
        <if test='DUTY_RULE.equals("N")'> 
        AND     A.COTR_TYPE = '1'
        </if>
    </select>
    
    <select id="hat503ukrServiceImpl.getDutycode" parameterType="rMap" resultType="rMap">
        /* hat503ukrServiceImpl.getDutyCode */
        SELECT  B.SUB_CODE
             ,  B.CODE_NAME 
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE 
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033' 
        AND     B.SUB_CODE &lt;&gt; '$' 
        AND     A.PAY_CODE  = #{PAY_CODE}
        <if test='DUTY_RULE.equals("Y")'> 
        AND     A.COTR_TYPE = '2'
        </if>
        <if test='DUTY_RULE.equals("N")'> 
        AND     A.COTR_TYPE = '1'
        </if>
        ORDER   BY B.REF_CODE2, B.SUB_CODE

    </select>
    
    <select id="hat503ukrServiceImpl.getComboList" parameterType="rMap" resultType="rMap">
        /* hat510ukrServiceImpl.getComboList */
        SELECT  B.SUB_CODE
             ,  B.CODE_NAME 
        FROM               HBS100T A WITH (NOLOCK)
                INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                                                  AND A.DUTY_CODE = B.SUB_CODE 
        WHERE   A.COMP_CODE = #{S_COMP_CODE}
        AND     B.MAIN_CODE = 'H033' 
        AND     B.USE_YN = 'Y'
        AND     B.SUB_CODE &lt;&gt; '$' 
        <if test="@foren.Ognl@isNotEmpty(PAY_CODE)">
        AND     A.PAY_CODE  = #{PAY_CODE} 
        </if>
        AND     A.COTR_TYPE = '2' 
        ORDER   BY B.REF_CODE2, B.SUB_CODE
    </select>
    
    
    <select id="hat503ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">     
    /* hat503ukrServiceImpl.selectList */
    DECLARE   @COMP_CODE        NVARCHAR(08)            -- 법인코드
            , @DIV_CODE         NVARCHAR(08)            -- 사업장
            , @DEPT_CODE        NVARCHAR(08)            -- 부서코드
            , @PERSON_NUMB      NVARCHAR(08)            -- 사원번호
            , @DUTY_DATE        NVARCHAR(08)            -- 근태일
            , @DUTY_CODE        NVARCHAR(04)            -- 근태코드
            , @DUTY_CHK         NVARCHAR(04)            -- 'N' = 전체조회, 'Y' = 이상근태만조회 
            , @DUTY_CHK_YN      NVARCHAR(04)            -- 'Y' = 확정, 'N' = 미확정, '' = 전체 근태 조회
            , @KEY_VALUE        NVARCHAR(20)            -- KEY 문자열
            , @LOGIN_ID         NVARCHAR(100)           -- 작업자ID
            , @LANG_TYPE        NVARCHAR(02)            -- 언어구분
            , @ERROR_DESC       NVARCHAR(2000) 

 SET @COMP_CODE   = #{S_COMP_CODE}
 SET @DIV_CODE    = #{DIV_CODE}
 SET @DEPT_CODE   = #{DEPT_CODE}
 SET @PERSON_NUMB = #{PERSON_NUMB}
 SET @DUTY_DATE   = #{DUTY_DATE}
 SET @DUTY_CODE   = #{DUTY_CODE}
 SET @DUTY_CHK    = #{DUTY_CHK_YN}
 SET @DUTY_CHK_YN = #{DUTY_CHK_YN2}
 SET @KEY_VALUE   = ''
 SET @LOGIN_ID    = #{S_USER_ID}
 SET @LANG_TYPE   = 'KR'
 SET @ERROR_DESC  = ''

EXEC USP_HUMAN_HAT502SKR_fnQuery @COMP_CODE  , @DIV_CODE   , @DEPT_CODE  , @PERSON_NUMB, @DUTY_DATE  
                                , @DUTY_CODE  , @DUTY_CHK   , @DUTY_CHK_YN, @KEY_VALUE  , @LOGIN_ID   
                                , @LANG_TYPE  , @ERROR_DESC OUTPUT

    </select>
    
    <insert id="hat503ukrServiceImpl.insertList"  parameterType="rMap">
        /* hat520ukrServiceImpl.insertList */
        INSERT INTO HAT500T
        (
            COMP_CODE
        ,   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   DUTY_CHK1_YN
        ,   DUTY_FR_D
        ,   DUTY_FR_H
        ,   DUTY_FR_M
        ,   DUTY_TO_D
        ,   DUTY_TO_H
        ,   DUTY_TO_M
        ,   DUTY_CODE
        ,   WORK_TEAM
        ,   REMARK
        ,   LATENESS_H
        ,   LATENESS_M
        ,   EARLY_H
        ,   EARLY_M
        ,   OUT_H
        ,   OUT_M
        ,   OVERTIME_1_H
        ,   OVERTIME_1_M
        ,   OVERTIME_2_H
        ,   OVERTIME_2_M
        ,   OVERTIME_3_H
        ,   OVERTIME_3_M
        
        ,   INSERT_DB_USER
        ,   INSERT_DB_TIME
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   TEMPC_01
        ,   TEMPC_02
        ,   TEMPC_03
        ,   TEMPN_01
        ,   TEMPN_02
        ,   TEMPN_03
        )
        VALUES
        ( 
            #{S_COMP_CODE}
        ,   #{PERSON_NUMB}
        ,   #{DUTY_DATE}
        ,   #{DUTY_CHK_YN}
            
        ,   #{DUTY_FR_D}
        ,   #{DUTY_FR_H}
        ,   #{DUTY_FR_M}
        ,   #{DUTY_TO_D}
        ,   #{DUTY_TO_H}
        ,   #{DUTY_TO_M}
        ,   #{DUTY_CODE}
        ,   #{WORK_TEAM}
        ,   #{REMARK}
        ,   #{LATENESS_H}
        ,   #{LATENESS_M}
        ,   #{EARLY_H}
        ,   #{EARLY_M}
        ,   #{OUT_H}
        ,   #{OUT_M}
        ,   #{OVERTIME_1_H}
        ,   #{OVERTIME_1_M}
        ,   #{OVERTIME_2_H}
        ,   #{OVERTIME_2_M}
        ,   #{OVERTIME_3_H}
        ,   #{OVERTIME_3_M}
        
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{TEMPC_01}
        ,   #{TEMPC_02}
        ,   #{TEMPC_03}
        ,   #{TEMPN_01}
        ,   #{TEMPN_02}
        ,   #{TEMPN_03}
        )
    </insert>

    <insert id="hat503ukrServiceImpl.insertExcelHAT500t" parameterType="Map">       /* 엑셀insert */
        /*hat503ukrServiceImpl.insertExcelHAT500t*/
           <!--
                INSERT INTO HAT500T_EXCEL
                    (_EXCEL_JOBID, _EXCEL_ROWNUM, _EXCEL_HAS_ERROR, _EXCEL_ERROR_MSG, COMP_CODE, DUTY_DATE, PERSON_NUMB, NAME, POST_CODE, POST_NAME
                    , DEPT_CODE, DEPT_NAME, DUTY_FR_DHM, DUTY_TO_DHM, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
                VALUES (
                    #{_EXCEL_JOBID}, #{_EXCEL_ROWNUM}, #{_EXCEL_HAS_ERROR,jdbcType=VARCHAR}, #{_EXCEL_ERROR,jdbcType=VARCHAR}, #{S_COMP_CODE}, #{DUTY_DATE}, #{PERSON_NUMB}, #{NAME},  #{POST_CODE}, #{POST_NAME}
                    , #{DEPT_CODE}, #{DEPT_NAME}, #{DUTY_FR_DHM}, #{DUTY_TO_DHM}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
                )
            --> 
        
        MERGE HAT500T_EXCEL AS M
            USING ( SELECT #{DUTY_DATE} AS DUTY_DATE , #{PERSON_NUMB} AS PERSON_NUMB ) AS A
            ON  M.DUTY_DATE     = A.DUTY_DATE
            AND M.PERSON_NUMB   = A.PERSON_NUMB
            WHEN NOT MATCHED THEN
                INSERT 
                (   COMP_CODE, DUTY_DATE, PERSON_NUMB, NAME
                ,   DEPT_CODE, DEPT_NAME, DUTY_FR_DHM, DUTY_TO_DHM, INSERT_DB_USER, INSERT_DB_TIME, UPDATE_DB_USER, UPDATE_DB_TIME )
                VALUES 
                (   #{S_COMP_CODE}, #{DUTY_DATE}, #{PERSON_NUMB}, #{NAME}
                ,   #{DEPT_CODE}, #{DEPT_NAME}, #{DUTY_FR_DHM}, #{DUTY_TO_DHM}, #{S_USER_ID}, GETDATE(), #{S_USER_ID}, GETDATE()
                )
            WHEN MATCHED THEN
                UPDATE
                SET     DUTY_FR_DHM     = #{DUTY_FR_DHM}
                  ,     DUTY_TO_DHM     = #{DUTY_TO_DHM}
                  ,     UPDATE_DB_USER  = #{S_USER_ID}
                  ,     UPDATE_DB_TIME  = GETDATE();       
                    
    </insert>   
    
    <insert id="hat503ukrServiceImpl.insertList_DutyRule_Y"  parameterType="rMap">
        /* hat503ukrServiceImpl.insertList_DutyRule_Y */
        INSERT INTO HAT500T
        (   COMP_CODE
        ,   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   DUTY_FR_D
        ,   DUTY_FR_H
        ,   DUTY_FR_M
        ,   DUTY_TO_D
        ,   DUTY_TO_H
        ,   DUTY_TO_M
        ,   DUTY_CODE
        ,   WORK_TEAM
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   INSERT_DB_USER
        ,   INSERT_DB_TIME
        )
        VALUES
        (   #{S_COMP_CODE}
        ,   #{PERSON_NUMB}
        ,   #{DUTY_DATE}
        ,   #{DUTY_FR_D}
        ,   #{DUTY_FR_H}
        ,   #{DUTY_FR_M}
        ,   #{DUTY_TO_D}
        ,   #{DUTY_TO_H}
        ,   #{DUTY_TO_M}
        ,   #{DUTY_CODE}
        ,   #{WORK_TEAM}
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_USER_ID}
        ,   GETDATE()
        )
    </insert>
    
    
    <update id="hat503ukrServiceImpl.updateList"  parameterType="rMap">
        /* hat503ukrServiceImpl.updateList */

        DECLARE @DUTY_CODE    NVARCHAR(10)
        
        SET @DUTY_CODE = #{DUTY_CODE}

        IF (@DUTY_CODE = '01')    -- 기본연장
        BEGIN
            UPDATE  HAT500T
            SET     OVERTIME_1_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     OVERTIME_1_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE IF (@DUTY_CODE = '02')    -- 추가연장
        BEGIN
            UPDATE  HAT500T
            SET     OVERTIME_2_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     OVERTIME_2_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE IF (@DUTY_CODE = '04')    -- 야근
        BEGIN
            UPDATE  HAT500T
            SET     OVERTIME_3_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     OVERTIME_3_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        
        ELSE IF (@DUTY_CODE = '06')    -- 지각
        BEGIN
            UPDATE  HAT500T
            SET     LATENESS_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     LATENESS_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE IF (@DUTY_CODE = '07')    -- 조퇴
        BEGIN
            UPDATE  HAT500T
            SET     EARLY_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     EARLY_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE IF (@DUTY_CODE = '08')    -- 외출
        BEGIN
            UPDATE  HAT500T
            SET     OUT_H    = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     OUT_M    = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE IF (@DUTY_CODE = '05')    -- 특근
        BEGIN
            UPDATE  HAT500T
            SET     DUTY_FR_D       = #{DUTY_FR_D}
              ,     DUTY_FR_H       = REPLICATE(0, 2 - LEN(#{DUTY_FR_H})) + #{DUTY_FR_H}
              ,     DUTY_FR_M       = REPLICATE(0, 2 - LEN(#{DUTY_FR_M})) + #{DUTY_FR_M}
              ,     DUTY_TO_D       = #{DUTY_TO_D}
              ,     DUTY_TO_H       = REPLICATE(0, 2 - LEN(#{DUTY_TO_H})) + #{DUTY_TO_H}
              ,     DUTY_TO_M       = REPLICATE(0, 2 - LEN(#{DUTY_TO_M})) + #{DUTY_TO_M}
              
              ,     TEMPN_01        = REPLICATE(0, 2 - LEN(#{TIME_H})) + #{TIME_H}
              ,     TEMPN_02        = REPLICATE(0, 2 - LEN(#{TIME_M})) + #{TIME_M}
              
              ,     UPDATE_DB_USER = #{S_USER_ID}
              ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END
        ELSE    -- 그외 = 근태코드에 업데이트
        BEGIN
            UPDATE  HAT500T
            SET     DUTY_CODE       = #{DUTY_CODE}
              ,     DUTY_FR_D       = #{DUTY_FR_D}
              ,     DUTY_FR_H       = REPLICATE(0, 2 - LEN(#{DUTY_FR_H})) + #{DUTY_FR_H}
              ,     DUTY_FR_M       = REPLICATE(0, 2 - LEN(#{DUTY_FR_M})) + #{DUTY_FR_M}
              ,     DUTY_TO_D       = #{DUTY_TO_D}
              ,     DUTY_TO_H       = REPLICATE(0, 2 - LEN(#{DUTY_TO_H})) + #{DUTY_TO_H}
              ,     DUTY_TO_M       = REPLICATE(0, 2 - LEN(#{DUTY_TO_M})) + #{DUTY_TO_M}
              ,     UPDATE_DB_USER = #{S_USER_ID}
          	  ,     UPDATE_DB_TIME = GETDATE()
            WHERE   COMP_CODE     = #{S_COMP_CODE}
            AND     PERSON_NUMB   = #{PERSON_NUMB}
            AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
        END

        <!-- IF EXISTS (SELECT * FROM HAT400T 
            WHERE COMP_CODE     = #{S_COMP_CODE}
              AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
              AND PERSON_NUMB   = #{PERSON_NUMB})


            BEGIN
                UPDATE HAT400T
                  SET WORK_TEAM     = #{WORK_TEAM}
                WHERE COMP_CODE     = #{S_COMP_CODE}
                  AND PERSON_NUMB   = #{PERSON_NUMB}
                  AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                  
            END
        
        ELSE
        
            BEGIN
                INSERT HAT400T
                        (
                          COMP_CODE
                        , DUTY_YYYYMMDD
                        , PERSON_NUMB
                        , WORK_TEAM
        
                        , UPDATE_DB_USER
                        , UPDATE_DB_TIME
                        , INSERT_DB_USER
                        , INSERT_DB_TIME
                        )
                        VALUES
                        (
                          #{S_COMP_CODE}
                        , #{DUTY_YYYYMMDD}
                        , #{PERSON_NUMB}
                        , '2'
        
                        , #{S_USER_ID}
                        , GETDATE()
                        , #{S_USER_ID}
                        , GETDATE()
                        )
            END -->
    </update>
    
    
    <update id="hat503ukrServiceImpl.updateList_DutyRule_Y"  parameterType="rMap">
        /* hat503ukrServiceImpl.updateList_DutyRule_Y */
        UPDATE  HAT500T
        SET     DUTY_CODE = #{DUTY_CODE}
          ,     DUTY_FR_D = #{DUTY_FR_D}
          ,     DUTY_FR_H = REPLICATE(0, 2 - LEN(#{DUTY_FR_H})) + #{DUTY_FR_H}
          ,     DUTY_FR_M = REPLICATE(0, 2 - LEN(#{DUTY_FR_M})) + #{DUTY_FR_M}
          ,     DUTY_TO_D = #{DUTY_TO_D}
          ,     DUTY_TO_H = REPLICATE(0, 2 - LEN(#{DUTY_TO_H})) + #{DUTY_TO_H}
          ,     DUTY_TO_M = REPLICATE(0, 2 - LEN(#{DUTY_TO_M})) + #{DUTY_TO_M}
          ,     UPDATE_DB_USER = #{S_USER_ID}
          ,     UPDATE_DB_TIME = GETDATE()
        WHERE   COMP_CODE     = #{S_COMP_CODE}
        AND     PERSON_NUMB   = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
    </update>
    
    <delete id="hat503ukrServiceImpl.deleteList_DutyRule_Y"  parameterType="rMap">
        /* hat503ukrServiceImpl.deleteList_DutyRule_Y */
        DELETE  FROM HAT500T
        WHERE   COMP_CODE     = #{S_COMP_CODE}
        AND     PERSON_NUMB   = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
    </delete>
    
    <insert id="hat503ukrServiceImpl.insertList_DutyRule_N01"  parameterType="rMap">
        /* hat503ukrServiceImpl.insertList_DutyRule_N01 */
        INSERT INTO HAT600T
        (   DUTY_YYYYMMDD
        ,   PERSON_NUMB
        ,   WORK_TEAM
        ,   DUTY_CODE
        ,   DUTY_NUM
        ,   DUTY_TIME
        ,   DUTY_MINU
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   COMP_CODE
        ) 
        VALUES
        (   #{DUTY_DATE}
        ,   #{PERSON_NUMB}
        ,   #{WORK_TEAM}
        ,   #{DUTY_CODE}
        ,   #{DUTY_NUM}
        ,   #{DUTY_TIME}
        ,   #{DUTY_MINU}
        ,   #{S_USER_ID}
        ,   GETDATE()
        ,   #{S_COMP_CODE}
        )
    </insert>
        
    <insert id="hat503ukrServiceImpl.insertList_DutyRule_N02"  parameterType="rMap">
        /* hat503ukrServiceImpl.insertList_DutyRule_N02 */
        INSERT INTO HAT600T
        (   PERSON_NUMB
        ,   DUTY_YYYYMMDD
        ,   DUTY_CODE
        ,   DUTY_NUM
        ,   DUTY_TIME
        ,   DUTY_MINU
        ,   WORK_TEAM
        ,   UPDATE_DB_USER
        ,   UPDATE_DB_TIME
        ,   COMP_CODE
        )
        SELECT  B.PERSON_NUMB
             ,  #{DUTY_DATE}
             ,  A.SUB_CODE
             ,  0, 0, 0, #{WORK_TEAM}
             ,  #{S_USER_ID}
             ,  GETDATE()
             ,  B.COMP_CODE
        FROM               BSA100T A WITH (NOLOCK)
                INNER JOIN HUM100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                INNER JOIN HBS100T C WITH (NOLOCK) ON A.COMP_CODE = C.COMP_CODE
                                                  AND A.SUB_CODE  = C.DUTY_CODE
                                                  AND B.PAY_CODE  = C.PAY_CODE
        WHERE   A.COMP_CODE     = #{S_COMP_CODE} 
        AND     A.MAIN_CODE     = 'H033'
        AND     A.SUB_CODE &lt;&gt; '$'
        AND     B.PERSON_NUMB   =  #{PERSON_NUMB} 
        AND     A.SUB_CODE NOT IN ( SELECT  DUTY_CODE
                                    FROM    HAT600T
                                    WHERE   COMP_CODE   = #{S_COMP_CODE}
                                    AND     PERSON_NUMB = #{PERSON_NUMB} 
                                    AND     DUTY_YYYYMMDD   = #{DUTY_DATE})
    </insert>
    
    <update id="hat503ukrServiceImpl.updateList_DutyRule_N"  parameterType="rMap">
        /* hat503ukrServiceImpl.updateList_DutyRule_N */
        UPDATE  HAT600T
        SET     DUTY_NUM = '1'
          ,     UPDATE_DB_USER = #{S_USER_ID}
          ,     UPDATE_DB_TIME = GETDATE()
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = {DUTY_DATE}
        AND     DUTY_CODE   = #{NUMC}
    </update>
    
    <delete id="hat503ukrServiceImpl.deleteList_DutyRule_N"  parameterType="rMap">
        /* hat503ukrServiceImpl.deleteList_DutyRule_N */
        DELETE  FROM HAT600T
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_YYYYMMDD}
        AND     DUTY_YYYYMMDD   = {DUTY_YYYYMMDD}
    </delete>
    
    
    <delete id="hat503ukrServiceImpl.deleteList"  parameterType="rMap">
        /* hat503ukrServiceImpl.deleteList */
        DELETE  FROM HAT500T
        WHERE   COMP_CODE   = #{S_COMP_CODE}
        AND     PERSON_NUMB = #{PERSON_NUMB}
        AND     DUTY_YYYYMMDD   = #{DUTY_YYYYMMDD}
        
    </delete>
    
    
    <select id="hat503ukrServiceImpl.select" parameterType="Map" resultType="rMap">
        SELECT  PGM_ID
             ,  SEQ
             ,  COL01
             ,  COL02
             ,  COL03
             ,  COL04
             ,  COL05
             ,  COL06
             ,  COL07
             ,  COL08
             ,  COL09
             ,  COL10
        FROM    TMP_CSV_30
        WHERE   FILE_ID = #{FILE_ID}
        
    </select>
    
    
    <insert id="hat503ukrServiceImpl.insertTXT" parameterType="Map">
        INSERT INTO TMP_CSV_30
        (
            PGM_ID
        ,   FILE_ID
        ,   SEQ
        ,   COL01
        ,   COL02
        ,   COL03
        ,   COL04
        ,   COL05
        ,   COL06
        ,   COL07
        ,   COL08
        ,   COL09
        ,   COL10
        ,   COL11
        ,   COL12
        ,   COL13
        ,   COL14
        ,   COL15
        ,   COL16
        ,   COL17
        ,   COL18
        ,   COL19
        ,   COL20
        ,   COL21
        ,   COL22
        ,   COL23
        ,   COL24
        ,   COL25
        ,   COL26
        ,   COL27
        ,   COL28
        ,   COL29
        ,   COL30
        )
        VALUES
        (
            #{PGM_ID}
        ,   #{FILE_ID}
        ,   #{SEQ}
        ,   #{COL01}
        ,   #{COL02}
        ,   #{COL03}
        ,   #{COL04}
        ,   #{COL05}
        ,   ''
        ,   #{KEY_VALUE}
        ,   #{COL08}
        ,   #{COL09}
        ,   #{COL10}
        ,   #{COL11}
        ,   #{COL12}
        ,   #{COL13}
        ,   #{COL14}
        ,   #{COL15}
        ,   #{COL16}
        ,   #{COL17}
        ,   #{COL18}
        ,   #{COL19}
        ,   #{COL20}
        ,   #{COL21}
        ,   #{COL22}
        ,   #{COL23}
        ,   #{COL24}
        ,   #{COL25}
        ,   #{COL26}
        ,   #{COL27}
        ,   #{COL28}
        ,   #{COL29}
        ,   #{COL30}
        )
        
    </insert>
    
    <insert id="hat503ukrServiceImpl.insertHAT" parameterType="Map" useGeneratedKeys="false">
    
        DBCC CHECKIDENT( L_HAT500T , RESEED, 0 )
    
        INSERT INTO L_HAT500T
        (
            KEY_VALUE
        ,   COMP_CODE
        ,   DUTY_DATE    
        ,   PERSON_NUMB  
        ,   DUTY_GUBUN     
        ,   DUTY_TIME      
        ,   REPRE_NUM      
        ,   PERSON_NAME    
        ,   INSERT_DB_USER 
        ,   INSERT_DB_TIME 
        )
        SELECT  COL07
             ,  #{S_COMP_CODE}
             ,  COL01
             ,  COL02
             ,  COL03
             ,  COL04
             ,  COL05
             ,  ''
             ,  #{S_USER_ID}
             ,  GETDATE()
        FROM    TMP_CSV_30
        WHERE   COL07 = #{KEY_VALUE}
    
    </insert>
    
    <select id="hat503ukrServiceImpl.insertSP" parameterType="Map" resultType="rMap">
        DECLARE @COMP_CODE  NVARCHAR(08)
              , @WORK_DATE  NVARCHAR(08)
              , @KEY_VALUE  NVARCHAR(20)
              , @LANG_TYPE  NVARCHAR(02)
              , @LOGIN_ID   NVARCHAR(100)
              , @ERROR_DESC NVARCHAR(2000)

        SET @COMP_CODE  = #{COMP_CODE}
        SET @WORK_DATE  = #{WORK_DATE}
        SET @KEY_VALUE  = #{KEY_VALUE}
        SET @LANG_TYPE  = #{LANG_TYPE}
        SET @LOGIN_ID   = #{LOGIN_ID}

        EXEC unilite.USP_HUMAN_HAT503TUKR_fnInsert @COMP_CODE, @WORK_DATE, @KEY_VALUE, @LOGIN_ID, @LANG_TYPE, @ERROR_DESC OUTPUT
        
        IF ISNULL(@ERROR_DESC, '') != ''
        BEGIN
            SELECT ISNULL(@ERROR_DESC, '')  AS errorDesc
        END
    </select>
    
    <update id="hat503ukrServiceImpl.commitAll_A" parameterType="Map" >
   /* hat503ukrServiceImpl.commitAll_A */
        
        <if test="@foren.Ognl@isNotEmpty(DUTY_CODE)">
            <choose> 
                <when test='DUTY_CODE.equals("01")'> 
                UPDATE HAT500T
                   SET DUTY_CHK2_YN  = 'Y'  --기본연장
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	  		,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("02")'> 
                UPDATE HAT500T
                   SET DUTY_CHK3_YN  = 'Y'  --추가연장
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	 	    ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("04")'> 
                UPDATE HAT500T
                   SET DUTY_CHK4_YN  = 'Y'  --야근
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("05")'> 
                UPDATE HAT500T
                   SET DUTY_CHK8_YN  = 'Y'  --특근
                    ,     UPDATE_DB_USER = #{S_USER_ID}
                    ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("06")'> 
                UPDATE HAT500T
                   SET DUTY_CHK5_YN  = 'Y'  --지각
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("07")'> 
                UPDATE HAT500T
                   SET DUTY_CHK6_YN  = 'Y'  --조퇴
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("08")'> 
                UPDATE HAT500T
                   SET DUTY_CHK7_YN  = 'Y'  --외출
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               
               <when test='DUTY_CODE.equals("90")'> 
                UPDATE HAT500T
                   SET DUTY_CHK2_YN  = 'Y'  --기본연장없음(조퇴)
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               
               <otherwise>
                UPDATE HAT500T
                   SET DUTY_CHK1_YN  = 'Y'
                    ,     UPDATE_DB_USER = #{S_USER_ID}
          	        ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </otherwise>
            </choose>     
        </if>
        <if test="@foren.Ognl@isEmpty(DUTY_CODE)">
          UPDATE HAT500T
                   SET DUTY_CHK1_YN  = 'Y'
                 ,     UPDATE_DB_USER = #{S_USER_ID}
          	 	 ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
        </if>
      </update> 
       
       <update id="hat503ukrServiceImpl.commitAll_B" parameterType="Map" >
       /* hat503ukrServiceImpl.commitAll_B */
       
                 
            UPDATE HAT500T     
            SET DUTY_CHK1_YN = 'N'
            ,     UPDATE_DB_USER = #{S_USER_ID}
          	,     UPDATE_DB_TIME = GETDATE()    
            FROM               HUM100T A  WITH (NOLOCK)
                    LEFT  JOIN HAT400T B  WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE 
                                                       AND B.PERSON_NUMB    = A.PERSON_NUMB 
                                                       AND B.DUTY_YYYYMMDD  =  (SELECT  MAX(C.DUTY_YYYYMMDD)    
                                                                                FROM    HAT400T C WITH (NOLOCK)
                                                                                WHERE   C.COMP_CODE       = A.COMP_CODE
                                                                                AND     C.PERSON_NUMB     = A.PERSON_NUMB
                                                                                AND     C.DUTY_YYYYMMDD &lt;= #{DUTY_DATE})      
                    LEFT  JOIN HBS600T C  WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE             
                                                       AND C.CAL_DATE       = #{DUTY_DATE}
                    LEFT  JOIN HAT500T D  WITH (NOLOCK) ON D.COMP_CODE      = A.COMP_CODE 
                                                       AND D.PERSON_NUMB    = A.PERSON_NUMB
                    LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE     = A.COMP_CODE 
                                                       AND M1.MAIN_CODE     = 'H001'
                                                       AND M1.SUB_CODE      = CONVERT(VARCHAR(2),C.WEEK_DAY)
                    LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE 
                                                       AND M2.MAIN_CODE     = 'B011'
                                                       AND M2.SUB_CODE      = C.HOLY_TYPE
                    LEFT  JOIN BSA100T M3 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE 
                                                       AND M2.MAIN_CODE     = 'H004'
                                                       AND M2.SUB_CODE      = B.WORK_TEAM
            WHERE   A.COMP_CODE     = #{S_COMP_CODE}
            AND     D.DUTY_CHK1_YN   = 'Y'
            AND     D.DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
            AND D.DUTY_CODE         = ''
            AND D.OVERTIME_2_H      = '0'
            AND D.OVERTIME_2_M      = '0'
            AND D.LATENESS_H        = '0'
            AND D.LATENESS_M        = '0'
            AND D.EARLY_H           = '0'
            AND D.EARLY_M           = '0'
            AND D.OUT_H             = '0'
            AND D.OUT_M             = '0'
            <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
            AND     A.DIV_CODE      = #{DIV_CODE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
            AND     A.PERSON_NUMB   = #{PERSON_NUMB}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DEPTS)">                    
            AND     A.DEPT_CODE    IN
                <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
                    #{item}
                </foreach>                                  
            </if>
            <if test="@foren.Ognl@isNotEmpty(WORK_TEAM)">         
            AND     B.WORK_TEAM     = #{WORK_TEAM}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DUTY_CODE)">    
                <if test='DUTY_CODE.equals("01")'> 
                --기본연장(01)
                AND     D.OVERTIME_1_H != '00'
                </if>
                <if test='DUTY_CODE.equals("02")'>
                --추가연장(02)
                AND     D.OVERTIME_2_H != '00'
                </if>
                <if test='DUTY_CODE.equals("04")'>
                --야간(04)
                AND     D.OVERTIME_3_H != '00'
                </if>
                <if test='DUTY_CODE.equals("06")'>
                --지각(06) 
                AND     D.LATENESS_H   != '00'
                </if>
                <if test='DUTY_CODE.equals("07")'> 
                --외출(07)
                AND     D.EARLY_H      != '00'
                </if>   
                <if test='DUTY_CODE.equals("08")'>
                --외출(08) 
                AND     D.OUT_H        != '00'
                </if> 
            </if>
            

    
    
    </update>     
    
    <update id="hat503ukrServiceImpl.cancelAll_A" parameterType="Map" >
    /* hat503ukrServiceImpl.cancelAll_A */
   
        <if test="@foren.Ognl@isNotEmpty(DUTY_CODE)">
            <choose> 
                <when test='DUTY_CODE.equals("01")'> 
                UPDATE HAT500T
                   SET DUTY_CHK2_YN  = 'N'  --기본연장
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	  	   ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("02")'> 
                UPDATE HAT500T
                   SET DUTY_CHK3_YN  = 'N'  --추가연장
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("04")'> 
                UPDATE HAT500T
                   SET DUTY_CHK4_YN  = 'N'  --야근
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("05")'> 
                UPDATE HAT500T
                   SET DUTY_CHK8_YN  = 'N'  --특근
                   ,     UPDATE_DB_USER = #{S_USER_ID}
                   ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("06")'> 
                UPDATE HAT500T
                   SET DUTY_CHK5_YN  = 'N'  --지각
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	  	   ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("07")'> 
                UPDATE HAT500T
                   SET DUTY_CHK6_YN  = 'N'  --조퇴
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               <when test='DUTY_CODE.equals("08")'> 
                UPDATE HAT500T
                   SET DUTY_CHK7_YN  = 'N'  --외출
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               
               <when test='DUTY_CODE.equals("90")'> 
                UPDATE HAT500T
                   SET DUTY_CHK2_YN  = 'N'  --기본연장없음(조퇴)
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </when>
               
               <otherwise>
                UPDATE HAT500T
                   SET DUTY_CHK1_YN  = 'N'
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
               </otherwise>
            </choose>     
        </if>
        <if test="@foren.Ognl@isEmpty(DUTY_CODE)">
          UPDATE HAT500T
                   SET DUTY_CHK1_YN  = 'N'
                   ,     UPDATE_DB_USER = #{S_USER_ID}
          	       ,     UPDATE_DB_TIME = GETDATE()
                 WHERE COMP_CODE     = #{S_COMP_CODE}
                   AND DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
                   AND PERSON_NUMB   = #{PERSON_NUMB}
        </if>
      </update> 
       
       
       <update id="hat503ukrServiceImpl.cancelAll_B" parameterType="Map" >
       /* hat503ukrServiceImpl.cancelAll_B */
                 
            UPDATE HAT500T     
            SET DUTY_CHK1_YN = 'Y'
            ,     UPDATE_DB_USER = #{S_USER_ID}
          	,     UPDATE_DB_TIME = GETDATE()    
            FROM               HUM100T A  WITH (NOLOCK)
                    LEFT  JOIN HAT400T B  WITH (NOLOCK) ON B.COMP_CODE      = A.COMP_CODE 
                                                       AND B.PERSON_NUMB    = A.PERSON_NUMB 
                                                       AND B.DUTY_YYYYMMDD  =  (SELECT  MAX(C.DUTY_YYYYMMDD)    
                                                                                FROM    HAT400T C WITH (NOLOCK)
                                                                                WHERE   C.COMP_CODE       = A.COMP_CODE
                                                                                AND     C.PERSON_NUMB     = A.PERSON_NUMB
                                                                                AND     C.DUTY_YYYYMMDD &lt;= #{DUTY_DATE})      
                    LEFT  JOIN HBS600T C  WITH (NOLOCK) ON C.COMP_CODE      = A.COMP_CODE             
                                                       AND C.CAL_DATE       = #{DUTY_DATE}
                    LEFT  JOIN HAT500T D  WITH (NOLOCK) ON D.COMP_CODE      = A.COMP_CODE 
                                                       AND D.PERSON_NUMB    = A.PERSON_NUMB
                    LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE     = A.COMP_CODE 
                                                       AND M1.MAIN_CODE     = 'H001'
                                                       AND M1.SUB_CODE      = CONVERT(VARCHAR(2),C.WEEK_DAY)
                    LEFT  JOIN BSA100T M2 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE 
                                                       AND M2.MAIN_CODE     = 'B011'
                                                       AND M2.SUB_CODE      = C.HOLY_TYPE
                    LEFT  JOIN BSA100T M3 WITH (NOLOCK) ON M2.COMP_CODE     = A.COMP_CODE 
                                                       AND M2.MAIN_CODE     = 'H004'
                                                       AND M2.SUB_CODE      = B.WORK_TEAM
            WHERE   A.COMP_CODE     = #{S_COMP_CODE}
            AND     D.DUTY_CHK1_YN = 'N'
            AND     D.DUTY_YYYYMMDD = #{DUTY_YYYYMMDD}
            AND D.DUTY_CODE         = ''
            AND D.OVERTIME_2_H      = '0'
            AND D.OVERTIME_2_M      = '0'
            AND D.LATENESS_H        = '0'
            AND D.LATENESS_M        = '0'
            AND D.EARLY_H           = '0'
            AND D.EARLY_M           = '0'
            AND D.OUT_H             = '0'
            AND D.OUT_M             = '0'
            <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
            AND     A.DIV_CODE      = #{DIV_CODE}
            </if>
            <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
            AND     A.PERSON_NUMB   = #{PERSON_NUMB}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DEPTS)">                    
            AND     A.DEPT_CODE    IN
                <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
                    #{item}
                </foreach>                                  
            </if>
            <if test="@foren.Ognl@isNotEmpty(WORK_TEAM)">         
            AND     B.WORK_TEAM     = #{WORK_TEAM}
            </if>
            <if test="@foren.Ognl@isNotEmpty(DUTY_CODE)">    
                <if test='DUTY_CODE.equals("01")'> 
                --기본연장(01)
                AND     D.OVERTIME_1_H != '00'
                </if>
                <if test='DUTY_CODE.equals("02")'>
                --추가연장(02)
                AND     D.OVERTIME_2_H != '00'
                </if>
                <if test='DUTY_CODE.equals("04")'>
                --야간(04)
                AND     D.OVERTIME_3_H != '00'
                </if>
                <if test='DUTY_CODE.equals("06")'>
                --지각(06) 
                AND     D.LATENESS_H   != '00'
                </if>
                <if test='DUTY_CODE.equals("07")'> 
                --외출(07)
                AND     D.EARLY_H      != '00'
                </if>   
                <if test='DUTY_CODE.equals("08")'>
                --외출(08) 
                AND     D.OUT_H        != '00'
                </if> 
            </if>
    
    </update>
    
    
    <update id="hat503ukrServiceImpl.procSP" parameterType="Map" statementType="CALLABLE">
        {call USP_HUMAN_HAT503TUKR_fnSetData (
            #{COMP_CODE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{DUTY_DATE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{LOGIN_ID, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{LANG_TYPE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{RE_TRY, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
            #{DUTY_CODE, mode=IN,jdbcType=VARCHAR, javaType=java.lang.String },
            #{ERROR_CODE, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
        )}
    </update>         
    
</mapper>