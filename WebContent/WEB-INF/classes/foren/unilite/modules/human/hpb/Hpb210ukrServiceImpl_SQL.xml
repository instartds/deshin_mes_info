<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hpb210ukrService">
	<select id="hpb210ukrService.checkPersonNumb" parameterType="Map" resultType="rMap">
		/* hpb100ukrServiceImpl.userDept */
		SELECT COUNT(PERSON_NUMB) AS CNT 
		FROM HPB100T WITH (NOLOCK)
		WHERE COMP_CODE = #{S_COMP_CODE}
			AND DED_TYPE = #{DED_TYPE}
			AND PERSON_NUMB = #{PERSON_NUMB}
	</select>

	<select id="hpb210ukrService.selectList" parameterType="Map" resultType="rMap">
	/* hpb210ukrServiceImpl.selectList */
	SELECT A.DED_TYPE
         , A.PERSON_NUMB
         , ISNULL(B.NAME,'') AS NAME
         , ISNULL(B.BUSINESS_TYPE,'') AS BUSINESS_TYPE
         , ISNULL(B.DWELLING_YN,'') AS DWELLING_YN
         , ISNULL(A.DEPT_CODE,'') AS DEPT_CODE
         , ISNULL(A.DEPT_NAME,'') AS DEPT_NAME
         , ISNULL(B.EXEDEPT_CODE,'') AS EXEDEPT_CODE
         , ISNULL(B.EXEDEPT_NAME,'') AS EXEDEPT_NAME
         , ISNULL(A.DIV_CODE,'') AS DIV_CODE
         , ISNULL(A.SECT_CODE,'') AS SECT_CODE
         , ISNULL(A.DED_CODE,'') AS DED_CODE
      <choose>
		<when test="DED_TYPE == 10 or DED_TYPE == 20">
      		 , (SELECT SUB_CODE + ':' + REF_CODE3
                  FROM HCD100T WITH (NOLOCK)
                 WHERE COMP_CODE = #{S_COMP_CODE}
                   AND MAIN_CODE = 'HC01'
                   AND SUB_CODE != '$'
                   AND SUB_CODE = A.DED_CODE) AS DED_NAME
      	</when>
      	<otherwise>
      		, DED_NAME = CASE WHEN B.DWELLING_YN  = '1' AND B.DED_TYPE = '1' THEN
                                  (SELECT CODE_NAME
                                     FROM BSA100T WITH (NOLOCK)
                                    WHERE COMP_CODE = #{S_COMP_CODE}
                                      AND MAIN_CODE = 'HS04'
                                      AND SUB_CODE = B.DED_CODE)
                             WHEN B.DWELLING_YN  = '1' AND B.DED_TYPE = '2' THEN
                                  (SELECT CODE_NAME
                                     FROM BSA100T WITH (NOLOCK)
                                    WHERE COMP_CODE = #{S_COMP_CODE}
                                      AND MAIN_CODE = 'HS05'
                                      AND SUB_CODE = B.DED_CODE)
                             WHEN B.DWELLING_YN  = '2' THEN
                                  (SELECT CODE_NAME
                                     FROM BSA100T WITH (NOLOCK)
                                    WHERE  COMP_CODE = #{S_COMP_CODE}
                                      AND MAIN_CODE = 'HS06'
                                      AND SUB_CODE = B.DED_CODE)
              END
      	</otherwise>      	
      </choose>
      	 , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},PAY_YYYYMM) AS PAY_YYYYMM
         , ISNULL(A.WORK_TIME, 0)                                     AS WORK_TIME
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},SUPP_DATE) AS SUPP_DATE
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},RECE_DATE) AS RECE_DATE
         , ISNULL(INCOME_KIND,'')      AS INCOME_KIND
         , ISNULL(TAX_EXCEPTION,'')    AS TAX_EXCEPTION
         , ISNULL(PRIZE_CODE,'')       AS PRIZE_CODE
         , ISNULL(TAX_GUBN,'')         AS TAX_GUBN
    
         , ISNULL(CLAIM_INTER_GUBN,'') AS CLAIM_INTER_GUBN
         , ISNULL(WERT_PAPER_CODE,'')  AS WERT_PAPER_CODE
         , ISNULL(BU_CODE,'')          AS BU_CODE
         , ISNULL(CHANGE_GUBN,'')      AS CHANGE_GUBN
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},DATE_FROM_YYMM) AS DATE_FROM_YYMM
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},DATE_TO_YYMM)   AS DATE_TO_YYMM
         , INTER_RATE
         , PAY_AMOUNT_I
         , EXPS_PERCENT_I
         , EXPS_AMOUNT_I
         , SUPP_TOTAL_I
         , CASE WHEN B.DWELLING_YN  = '1' THEN
         		CONVERT(nvarchar(10), 'HS11_' + CONVERT(nvarchar(8) ,CONVERT(INT,PERCENT_I)))
         		WHEN B.DWELLING_YN  = '2' THEN
         		CONVERT(nvarchar(10), 'HS13_' + CONVERT(nvarchar(8) , CONVERT(INT,PERCENT_I)))
			END AS PERCENT_I
         , IN_TAX_I
         , CP_TAX_I
         , SP_TAX_I
         , LOCAL_TAX_I
         , ISNULL(TAX_CUT_REASON,'')                          AS TAX_CUT_REASON
         , (IN_TAX_I + CP_TAX_I + LOCAL_TAX_I)                AS DED_AMOUNT_I
         , PAY_AMOUNT_I - (IN_TAX_I + CP_TAX_I + LOCAL_TAX_I) AS REAL_SUPP_TOTAL_I
         , ISNULL(A.REMARK,'') AS REMARK
         , ACC_GU
         , A.PJT_CODE
	     , (
	       SELECT PJT_NAME
	     	 FROM BCM600T WITH (NOLOCK)
	     	WHERE COMP_CODE = A.COMP_CODE
	     	  AND PJT_CODE	= A.PJT_CODE
		   )							AS PJT_NAME
		 , A.ORG_ACCNT
         , (SELECT ACCNT_NAME 
              FROM ABA400T WITH (NOLOCK)
             WHERE COMP_CODE = A.COMP_CODE
               AND ACCNT     = A.ORG_ACCNT
           ) 													AS ORG_ACCNT_NAME
         , A.REMARK
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE}, A.EX_DATE) AS EX_DATE
         , A.EX_NUM
         , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},C.AC_DATE) AS AC_DATE
         , C.SLIP_NUM
         , C.AGREE_YN
         , ISNULL(A.COMP_CODE,'')    AS COMP_CODE
         , ISNULL(A.INPUT_PGMID, '') AS INPUT_PGMID
         , ISNULL(A.SUPP_TYPE, '') AS SUPP_TYPE
         , A.REAL_SUPP_DATE 
         , A.ITEM_CODE
         , A.SEQ
		     , CASE WHEN ISNULL(Z1.CLOSE_DATE, '') = '' THEN 'N'
		            ELSE 'Y'
		       END                                                  AS CLOSE_YN    --20210609 추가
		     , Z1.CLOSE_DATE                                        --20210609 추가
      FROM HPB200T A WITH (NOLOCK) LEFT JOIN HPB100T B WITH (NOLOCK)
                        ON A.COMP_CODE   = B.COMP_CODE
                       AND A.DED_TYPE    = B.DED_TYPE
                       AND A.PERSON_NUMB = B.PERSON_NUMB
                     LEFT OUTER JOIN (SELECT COMP_CODE
                                           , EX_DATE
                                           , EX_NUM
                                           , AC_DATE
                                           , SLIP_NUM
                                           , AGREE_YN
                                        FROM AGJ110T WITH (NOLOCK)
                                       WHERE ISNULL(MOD_DIVI, '') = ''
                                       GROUP BY COMP_CODE, EX_DATE, EX_NUM, AC_DATE, SLIP_NUM, AGREE_YN) C
                        ON A.COMP_CODE   = C.COMP_CODE
                       AND A.EX_DATE     = C.EX_DATE
                       AND A.EX_NUM      = C.EX_NUM
		  --20210609 추가
		  LEFT JOIN HBS910T Z1 WITH(NOLOCK) ON Z1.COMP_CODE    = A.COMP_CODE
		                                   AND Z1.DIV_CODE     = A.DIV_CODE
		                                   AND Z1.PERSON_NUMB  = A.PERSON_NUMB
		                                   AND Z1.CLOSE_TYPE   = 'O'
		                                   AND Z1.SUPP_TYPE    = A.SEQ         --HBS910T 구분자(SUPP_TYPE)으로 HPB200T.SEQ 사용
       <choose>
		<when test="@foren.Ognl@isNotEmpty(DED_TYPE)">
      		WHERE A.DED_TYPE = #{DED_TYPE}
      	</when>
      	<otherwise>
      		WHERE  1 = 1
      	</otherwise>      	
      </choose>
      		AND A.COMP_CODE  = #{S_COMP_CODE}
      	<if test="@foren.Ognl@isNotEmpty(SECT_CODE)">
      		AND A.SECT_CODE  = #{SECT_CODE}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
      		AND A.PERSON_NUMB  = #{PERSON_NUMB}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(NAME)">
      		AND B.NAME  = #{NAME}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(USER_YN)">
      		AND USER_YN  = #{USER_YN}
      	</if>
      	<if test="@foren.Ognl@isNotEmpty(DVRY_DATE_FR)">
      		 <choose>
				<when test="@foren.Ognl@isNotEmpty(DVRY_DATE_TO)">
		      		AND LEFT(PAY_YYYYMM,6) BETWEEN #{DVRY_DATE_FR} AND  #{DVRY_DATE_TO}
		      	</when>
		      	<otherwise>
		      		AND LEFT(PAY_YYYYMM,6) = #{DVRY_DATE_FR}
		      	</otherwise>      	
		     </choose>
      	</if>	
      	<if test="@foren.Ognl@isNotEmpty(SUPP_DATE)">
      		AND LEFT(SUPP_DATE,8) = #{SUPP_DATE}
      	</if>	
      	<if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
      		AND  A.DEPT_CODE  = #{DEPT_CODE}
      	</if>
      	
        <if test="@foren.Ognl@isNotEmpty(DEPTS)">
		    AND  A.PJT_CODE IN
			 <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
	          		 #{item}
	    	 </foreach>
		</if>
        <if test="@foren.Ognl@isNotEmpty(REMARK)">
        	AND A.REMARK LIKE '%' + #{REMARK} + '%'
        </if>
      		
		ORDER  BY A.PERSON_NUMB, A.PAY_YYYYMM, SUPP_DATE
	</select>

	<select id="hpb210ukrService.checkExistData" parameterType="Map" resultType="rMap">
		/* hpb210ukrServiceImpl.checkExistData */	
		SELECT COUNT(*) EXIST 
		  FROM HPB200T WITH (NOLOCK)
		 WHERE COMP_CODE       = #{S_COMP_CODE}
		   AND DED_TYPE        = #{DED_TYPE}
		   AND PERSON_NUMB     = #{PERSON_NUMB}
		   AND PAY_YYYYMM      = #{PAY_YYYYMM}
		   AND SUPP_DATE       = #{SUPP_DATE}
	</select>
	
	
	<select id="hpb210ukrService.makeSeq" parameterType="Map" resultType="rMap">
    SELECT 
        (ISNULL(MAX(SEQ),0) + 1) AS SEQ
      FROM HPB200T WITH(NOLOCK)
     WHERE COMP_CODE = #{S_COMP_CODE}  
       AND DED_TYPE     = #{DED_TYPE}   
      <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
       AND SUPP_TYPE    = #{SUPP_TYPE}  
      </if>
      <if test="@foren.Ognl@isEmpty(SUPP_TYPE)">
       AND SUPP_TYPE    = '0'
      </if>  
       AND PERSON_NUMB  = #{PERSON_NUMB}
       AND PAY_YYYYMM   = #{PAY_YYYYMM} 
       AND SUPP_DATE    = #{SUPP_DATE}
    </select>
	
	<insert id="hpb210ukrService.insertList" parameterType="Map">
	/* hpb210ukrServiceImpl.insertList */
	 INSERT INTO HPB200T
	     ( DED_TYPE
	     , PERSON_NUMB
	     , DEPT_CODE
	     , DEPT_NAME
	     , EXEDEPT_CODE
	     , EXEDEPT_NAME
	     , DIV_CODE
	     , SECT_CODE
	     , DED_CODE
	     , PAY_YYYYMM
	     , WORK_TIME
	     , SUPP_DATE
	     , RECE_DATE
	     , INTER_RATE
	     , PAY_AMOUNT_I
	     , EXPS_PERCENT_I
	     , EXPS_AMOUNT_I
	     , SUPP_TOTAL_I
	     , PERCENT_I
	     , IN_TAX_I
	     , CP_TAX_I
	     , SP_TAX_I
	     , LOCAL_TAX_I
	     , ACC_GU
	     , PJT_CODE
	     , ORG_ACCNT
	     , REMARK
	     , COMP_CODE
	     , REAL_SUPP_DATE
         , ITEM_CODE
         , SEQ
	     ) 
	VALUES
	     ( #{DED_TYPE}
	     , #{PERSON_NUMB}
	     , #{DEPT_CODE}
	     , #{DEPT_NAME}
	     , #{EXEDEPT_CODE}
	     , #{EXEDEPT_NAME}
	     , #{DIV_CODE}
	     , #{SECT_CODE}
	     , #{DED_CODE}
	     , #{PAY_YYYYMM}
	     , #{WORK_TIME}
	     , #{SUPP_DATE}
	     , #{RECE_DATE}
	     , #{INTER_RATE}
	     , #{PAY_AMOUNT_I}
	     , #{EXPS_PERCENT_I}
	     , #{EXPS_AMOUNT_I}
	     , #{SUPP_TOTAL_I}
	     , #{PERCENT_I}
	     , #{IN_TAX_I}
	     , #{CP_TAX_I}
	     , #{SP_TAX_I}
	     , #{LOCAL_TAX_I}
	     , #{ACC_GU}
	     , #{PJT_CODE}
	     , #{ORG_ACCNT}
	     , #{REMARK}
	     , #{S_COMP_CODE}
	     , #{REAL_SUPP_DATE}
         , #{ITEM_CODE}
         , #{SEQ}
	     )
	</insert>
	
	<update id="hpb210ukrService.updateList" parameterType="Map">
	/* hpb210ukrServiceImpl.updateList */
	UPDATE HPB200T
	   SET DEPT_CODE        = #{DEPT_CODE}
	     , DEPT_NAME        = #{DEPT_NAME}
	     , EXEDEPT_CODE     = #{EXEDEPT_CODE}
	     , EXEDEPT_NAME     = #{EXEDEPT_NAME}
	     , DIV_CODE         = #{DIV_CODE}
	     , SECT_CODE        = #{SECT_CODE}
	     , DED_CODE         = #{DED_CODE}
	     , WORK_TIME        = #{WORK_TIME}
	     , RECE_DATE        = #{RECE_DATE}
	     , INCOME_KIND      = #{INCOME_KIND}
	     , TAX_EXCEPTION    = #{TAX_EXCEPTION}
	     , PRIZE_CODE       = #{PRIZE_CODE}
	     , TAX_GUBN         = #{TAX_GUBN}
	     , CLAIM_INTER_GUBN = #{CLAIM_INTER_GUBN}
	     , WERT_PAPER_CODE  = #{WERT_PAPER_CODE}
	     , BU_CODE          = #{BU_CODE}
	     , CHANGE_GUBN      = #{CHANGE_GUBN}
	     , DATE_FROM_YYMM   = #{DATE_FROM_YYMM}
	     , DATE_TO_YYMM     = #{DATE_TO_YYMM}
	     , INTER_RATE       = #{INTER_RATE}
	     , PAY_AMOUNT_I     = #{PAY_AMOUNT_I}
	     , EXPS_PERCENT_I   = #{EXPS_PERCENT_I}
	     , EXPS_AMOUNT_I    = #{EXPS_AMOUNT_I}
	     , SUPP_TOTAL_I     = #{SUPP_TOTAL_I}
	     , PERCENT_I        = #{PERCENT_I}
	     , IN_TAX_I         = #{IN_TAX_I}
	     , CP_TAX_I         = #{CP_TAX_I}
	     , SP_TAX_I         = #{SP_TAX_I}
	     , LOCAL_TAX_I      = #{LOCAL_TAX_I}
	     , TAX_CUT_REASON   = #{TAX_CUT_REASON}
	     , REMARK           = #{REMARK}
	     , ACC_GU           = #{ACC_GU}
	     , PJT_CODE			= #{PJT_CODE}
	     , ORG_ACCNT		= #{ORG_ACCNT}
	     , REAL_SUPP_DATE   = #{REAL_SUPP_DATE}
         , ITEM_CODE        = #{ITEM_CODE}
	 WHERE COMP_CODE    = #{S_COMP_CODE}  
       AND DED_TYPE     = #{DED_TYPE}   
       AND SUPP_TYPE    = #{SUPP_TYPE}  
       AND PERSON_NUMB  = #{PERSON_NUMB}
       AND PAY_YYYYMM   = #{PAY_YYYYMM} 
       AND SUPP_DATE    = #{SUPP_DATE}  
       AND SEQ          = #{SEQ}   
	</update>
	
	<delete id="hpb210ukrService.deleteList" parameterType="Map" >
	DELETE FROM HPB200T 
	 WHERE COMP_CODE    = #{S_COMP_CODE}  
       AND DED_TYPE     = #{DED_TYPE}   
       AND SUPP_TYPE    = #{SUPP_TYPE}  
       AND PERSON_NUMB  = #{PERSON_NUMB}
       AND PAY_YYYYMM   = #{PAY_YYYYMM} 
       AND SUPP_DATE    = #{SUPP_DATE}  
       AND SEQ          = #{SEQ}   
	</delete>



<!-- 마감 -->
	<update id="hpb210ukrService.closeY" parameterType="Map">
		/* hpb210ukrService.closeY */
		INSERT INTO HBS910T (
		       COMP_CODE
		     , DIV_CODE
		     , PERSON_NUMB
		     , CLOSE_TYPE
		     , CLOSE_DATE
		     , SUPP_TYPE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		) VALUES (
		       #{S_COMP_CODE}
		     , #{DIV_CODE}
		     , #{PERSON_NUMB}
		     , 'O'
		     , CONVERT(NVARCHAR(08), GETDATE(), 112)
		     , #{SEQ}
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>
<!-- 마감취소 -->
	<update id="hpb210ukrService.closeN" parameterType="Map">
		/* hpb210ukrService.closeN */
		DELETE HBS910T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND DIV_CODE    = #{DIV_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND CLOSE_TYPE  = 'O'
		   AND CLOSE_DATE  = #{CLOSE_DATE}
		   AND SUPP_TYPE   = #{SEQ}
	</update>
</mapper>