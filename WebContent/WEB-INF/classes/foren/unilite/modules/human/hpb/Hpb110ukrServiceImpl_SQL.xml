<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hpb110ukrService">
	<select id="hpb110ukrService.getTaxGubun" parameterType="Map" resultType="comboItem">
		--세율구분
		<if test="DWELLING_YN == &quot;1&quot;">
		    -- 거주자
		    SELECT SUB_CODE AS 'value'
		         , CODE_NAME AS 'text'
		         , '' AS search
		         , '' AS 'option'
		      FROM BSA100T WITH (NOLOCK)
		     WHERE COMP_CODE = #{S_COMP_CODE}
		       AND MAIN_CODE = 'HS09'
		       AND SUB_CODE != '$'
		     ORDER BY SORT_SEQ, SUB_CODE 
		</if>
		<if test="DWELLING_YN == &quot;2&quot;">
		    -- 비거주자
		    SELECT SUB_CODE AS 'value'
		         , CODE_NAME AS 'text'
		         , '' AS search
		         , '' AS 'option'
		      FROM BSA100T WITH (NOLOCK)
		     WHERE COMP_CODE = #{S_COMP_CODE}
		       AND MAIN_CODE = 'HS13'
		       AND SUB_CODE != '$'
		     ORDER BY SORT_SEQ, SUB_CODE 
		</if> 
	</select>

	<select id="hpb110ukrService.checkPersonNumb" parameterType="Map" resultType="rMap">
		/* hpb100ukrServiceImpl.userDept */
		SELECT COUNT(PERSON_NUMB) AS CNT 
		  FROM HPB100T WITH (NOLOCK)
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND DED_TYPE    = #{DED_TYPE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
	</select>

	<select id="hpb110ukrService.selectList" parameterType="Map" resultType="rMap">
		/* hpb110ukrService.selectList */
		SELECT A.DED_TYPE
		     , A.PERSON_NUMB
		     , ISNULL(B.NAME,'') AS NAME
		     , ISNULL(B.BUSINESS_TYPE,'') AS BUSINESS_TYPE
		     , ISNULL(B.DWELLING_YN,'') AS DWELLING_YN
		     , ISNULL(A.DEPT_CODE,'') AS DEPT_CODE
		     , ISNULL(A.DEPT_NAME,'') AS DEPT_NAME
		     , ISNULL(B.EXEDEPT_CODE,'') AS EXEDEPT_CODE
		     , ISNULL(B.EXEDEPT_NAME,'') AS EXEDEPT_NAME
		     , ISNULL(A.DIV_CODE,'') AS DIV_CODE
		     , ISNULL(A.SECT_CODE,'') AS SECT_CODE
		     , ISNULL(A.DED_CODE,'') AS DED_CODE
		  <choose>
		    <when test="DED_TYPE == 10 or DED_TYPE == 20">
		     , (SELECT SUB_CODE + ':' + REF_CODE3
		          FROM HCD100T WITH (NOLOCK)
		         WHERE COMP_CODE = #{S_COMP_CODE}
		           AND MAIN_CODE = 'HC01'
		           AND SUB_CODE &lt;&gt; '$'
		           AND SUB_CODE = A.DED_CODE) AS DED_NAME
		    </when>
		    <otherwise>
		     , DED_NAME = CASE WHEN B.DWELLING_YN  = '1' AND B.DED_TYPE = '1' THEN
		                              (SELECT CODE_NAME
		                                 FROM BSA100T WITH (NOLOCK)
		                                WHERE COMP_CODE = #{S_COMP_CODE}
		                                  AND MAIN_CODE = 'HS04'
		                                  AND SUB_CODE = B.DED_CODE)
		                       WHEN B.DWELLING_YN  = '1' AND B.DED_TYPE = '2' THEN
		                            (SELECT CODE_NAME
		                               FROM BSA100T WITH (NOLOCK)
		                              WHERE COMP_CODE = #{S_COMP_CODE}
		                                AND MAIN_CODE = 'HS05'
		                                AND SUB_CODE = B.DED_CODE)
		                       WHEN B.DWELLING_YN  = '2' THEN
		                            (SELECT CODE_NAME
		                               FROM BSA100T WITH (NOLOCK)
		                              WHERE  COMP_CODE = #{S_COMP_CODE}
		                                AND MAIN_CODE = 'HS06'
		                                AND SUB_CODE = B.DED_CODE)
		          END
		    </otherwise>
		  </choose>
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},PAY_YYYYMM) AS PAY_YYYYMM
		     , ISNULL(A.WORK_TIME, 0)                               AS WORK_TIME
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},SUPP_DATE) AS SUPP_DATE
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},RECE_DATE) AS RECE_DATE
		     , ISNULL(INCOME_KIND,'')      AS INCOME_KIND
		     , ISNULL(TAX_EXCEPTION,'')    AS TAX_EXCEPTION
		     , ISNULL(PRIZE_CODE,'')       AS PRIZE_CODE
		     , ISNULL(TAX_GUBN,'')         AS TAX_GUBN
		     , ISNULL(CLAIM_INTER_GUBN,'') AS CLAIM_INTER_GUBN
		     , ISNULL(WERT_PAPER_CODE,'')  AS WERT_PAPER_CODE
		     , ISNULL(BU_CODE,'')          AS BU_CODE
		     , ISNULL(CHANGE_GUBN,'')      AS CHANGE_GUBN
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},DATE_FROM_YYMM) AS DATE_FROM_YYMM
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},DATE_TO_YYMM)   AS DATE_TO_YYMM
		     , INTER_RATE
		     , PAY_AMOUNT_I
		     , EXPS_PERCENT_I
		     , EXPS_AMOUNT_I
		     , SUPP_TOTAL_I
--		     , CASE WHEN B.DWELLING_YN  = '1' THEN
--		            CONVERT(nvarchar(10), 'HS09_' + CONVERT(nvarchar(8) ,CONVERT(INT,PERCENT_I)))
--		            WHEN B.DWELLING_YN  = '2' THEN
--		            CONVERT(nvarchar(10), 'HS13_' + CONVERT(nvarchar(8) , CONVERT(INT,PERCENT_I)))
--		        END 												AS PERCENT_I
		     , PERCENT_I
		     , IN_TAX_I
		     , CP_TAX_I
		     , SP_TAX_I
		     , LOCAL_TAX_I
		     , ISNULL(TAX_CUT_REASON,'')                         	AS TAX_CUT_REASON
		     , (IN_TAX_I + CP_TAX_I + LOCAL_TAX_I)                	AS DED_AMOUNT_I
		     , PAY_AMOUNT_I - (IN_TAX_I + CP_TAX_I + LOCAL_TAX_I) 	AS REAL_SUPP_TOTAL_I
		     , ISNULL(A.REMARK,'') 									AS REMARK
		     , ACC_GU
		     , A.PJT_CODE
		     , (
		       SELECT PJT_NAME
		     	 FROM BCM600T WITH (NOLOCK)
		     	WHERE COMP_CODE = A.COMP_CODE
		     	  AND PJT_CODE	= A.PJT_CODE
		       )													AS PJT_NAME
		     , A.ORG_ACCNT
		     , (SELECT ACCNT_NAME 
		          FROM ABA400T WITH (NOLOCK)
		         WHERE COMP_CODE = A.COMP_CODE
		           AND ACCNT     = A.ORG_ACCNT
		       ) 													AS ORG_ACCNT_NAME
		     , A.REMARK
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE}, A.EX_DATE)	AS EX_DATE
		     , A.EX_NUM
		     , uniLITE.fnGetUserDateComp(#{S_COMP_CODE},C.AC_DATE)	AS AC_DATE
		     , C.SLIP_NUM
		     , C.AGREE_YN
		     , ISNULL(A.COMP_CODE,'')   							AS COMP_CODE
		     , ISNULL(A.INPUT_PGMID, '') 							AS INPUT_PGMID
		     , ISNULL(A.SUPP_TYPE, '') 								AS SUPP_TYPE
		     , A.REAL_SUPP_DATE 
		     , A.ITEM_CODE
		     , A.SEQ
		     , CASE WHEN ISNULL(Z1.CLOSE_DATE, '') = '' THEN 'N'
		            ELSE 'Y'
		       END                                                  AS CLOSE_YN    --20210609 추가
		     , Z1.CLOSE_DATE                                        --20210609 추가
		  FROM      HPB200T A WITH (NOLOCK) 
		  LEFT JOIN HPB100T B WITH (NOLOCK) ON A.COMP_CODE   = B.COMP_CODE
		                                   AND A.DED_TYPE    = B.DED_TYPE
		                                   AND A.PERSON_NUMB = B.PERSON_NUMB
		  LEFT OUTER JOIN (SELECT COMP_CODE
		                        , EX_DATE
		                        , EX_NUM
		                        , AC_DATE
		                        , SLIP_NUM
		                        , AGREE_YN
		                     FROM AGJ110T WITH (NOLOCK)
		                    WHERE ISNULL(MOD_DIVI, '') = ''
		                    GROUP BY COMP_CODE
		                           , EX_DATE
		                           , EX_NUM
		                           , AC_DATE
		                           , SLIP_NUM
		                           , AGREE_YN) C ON A.COMP_CODE   = C.COMP_CODE
		                                        AND A.EX_DATE     = C.EX_DATE
		                                        AND A.EX_NUM      = C.EX_NUM
		  --20210609 추가
		  LEFT JOIN HBS910T Z1 WITH(NOLOCK) ON Z1.COMP_CODE    = A.COMP_CODE
		                                   AND Z1.DIV_CODE     = A.DIV_CODE
		                                   AND Z1.PERSON_NUMB  = A.PERSON_NUMB
		                                   AND Z1.CLOSE_TYPE   = 'B'
		                                   AND Z1.SUPP_TYPE    = A.SEQ         --HBS910T 구분자(SUPP_TYPE)으로 HPB200T.SEQ 사용
		  <choose>
		    <when test="@foren.Ognl@isNotEmpty(DED_TYPE)">
		      WHERE A.DED_TYPE = #{DED_TYPE}
		    </when>
		    <otherwise>
		      WHERE  1 = 1
		    </otherwise>
		  </choose>
		    <if test="@foren.Ognl@isNotEmpty(S_COMP_CODE)">
		      AND A.COMP_CODE  = #{S_COMP_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SECT_CODE)">
		      AND A.SECT_CODE  = #{SECT_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		      AND A.PERSON_NUMB  = #{PERSON_NUMB}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(NAME)">
		      AND B.NAME  = #{NAME}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(USER_YN)">
		      AND B.USER_YN  = #{USER_YN}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DVRY_DATE_FR)">
		       <choose>
		          <when test="@foren.Ognl@isNotEmpty(DVRY_DATE_TO)">
		              AND LEFT(PAY_YYYYMM,6) BETWEEN #{DVRY_DATE_FR} AND  #{DVRY_DATE_TO}
		          </when>
		          <otherwise>
		              AND LEFT(PAY_YYYYMM,6) = #{DVRY_DATE_FR}
		          </otherwise>
		       </choose>
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(SUPP_DATE)">
		      AND LEFT(SUPP_DATE,8) = #{SUPP_DATE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DEPT_CODE)">
		      AND  A.DEPT_CODE  = #{DEPT_CODE}
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(DEPTS)">
		      AND  A.PJT_CODE IN
		       <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		                 #{item}
		       </foreach>
		    </if>
		    <if test="@foren.Ognl@isNotEmpty(REMARK)">
		      AND A.REMARK LIKE '%' + #{REMARK} + '%'
		    </if>
		 ORDER  BY A.PERSON_NUMB, A.PAY_YYYYMM, SUPP_DATE
	</select>

	<select id="hpb110ukrService.checkExistData" parameterType="Map" resultType="rMap">
		/* hpb110ukrService.checkExistData */	
		SELECT COUNT(*) EXIST 
		  FROM HPB200T WITH (NOLOCK)
		 WHERE COMP_CODE       = #{S_COMP_CODE}
		   AND DED_TYPE        = #{DED_TYPE}
		   AND PERSON_NUMB     = #{PERSON_NUMB}
		   AND PAY_YYYYMM      = #{PAY_YYYYMM}
		   AND SUPP_DATE       = #{SUPP_DATE}
	</select>

	<select id="hpb110ukrService.checkCompCode" parameterType="Map" resultType="rMap">
		    SELECT A.COMP_CODE, A.COMP_NAME
		    FROM              BOR100T   A  WITH (NOLOCK)
		           LEFT  JOIN BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE    = #{S_COMP_CODE}
		                                                AND M1.MAIN_CODE    = 'B107'
		                                                AND M1.SUB_CODE     = '20'
		    WHERE (A.COMP_CODE      &gt; ''        AND ISNULL(M1.REF_CODE1, 'N') = 'Y')
		       OR (A.COMP_CODE      = #{S_COMP_CODE}  AND ISNULL(M1.REF_CODE1, 'N') = 'N')
	</select>

	<select id="hpb110ukrService.makeSeq" parameterType="Map" resultType="rMap">
		SELECT 
		    (ISNULL(MAX(SEQ),0) + 1) AS SEQ
		  FROM HPB200T WITH(NOLOCK)
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND DED_TYPE    = #{DED_TYPE}
		  <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
		   AND SUPP_TYPE   = #{SUPP_TYPE}  
		  </if>
		  <if test="@foren.Ognl@isEmpty(SUPP_TYPE)">
		   AND SUPP_TYPE   = '0'
		  </if>  
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND PAY_YYYYMM  = #{PAY_YYYYMM} 
		   AND SUPP_DATE   = #{SUPP_DATE}
	</select>

	<insert id="hpb110ukrService.insertList" parameterType="Map">
		/* hpb110ukrService.insertList */
		INSERT INTO HPB200T
		     ( DED_TYPE
		     , PERSON_NUMB
		     , DEPT_CODE
		     , DEPT_NAME
		     , EXEDEPT_CODE
		     , EXEDEPT_NAME
		     , DIV_CODE
		     , SECT_CODE
		     , DED_CODE
		     , PAY_YYYYMM
		     , WORK_TIME
		     , SUPP_DATE
		     , RECE_DATE
		     , INTER_RATE
		     , PAY_AMOUNT_I
		     , EXPS_PERCENT_I
		     , EXPS_AMOUNT_I
		     , SUPP_TOTAL_I
		     , PERCENT_I
		     , IN_TAX_I
		     , CP_TAX_I
		     , SP_TAX_I
		     , LOCAL_TAX_I
		     , ACC_GU
		     , PJT_CODE
		     , ORG_ACCNT
		     , REMARK
		     , COMP_CODE
		     , REAL_SUPP_DATE
		     , ITEM_CODE
		     , SEQ
		) 
		VALUES
		     ( #{DED_TYPE}
		     , #{PERSON_NUMB}
		     , #{DEPT_CODE}
		     , #{DEPT_NAME}
		     , #{EXEDEPT_CODE}
		     , #{EXEDEPT_NAME}
		     , #{DIV_CODE}
		     , #{SECT_CODE}
		     , #{DED_CODE}
		     , #{PAY_YYYYMM}
		     , 0	--WORK_TIME
		     , #{SUPP_DATE}
		     , #{RECE_DATE}
		     , #{INTER_RATE}
		     , #{PAY_AMOUNT_I}
		     , 0	--EXPS_PERCENT_I
		     , #{EXPS_AMOUNT_I}
		     , #{SUPP_TOTAL_I}
		     , #{PERCENT_I}
		     , #{IN_TAX_I}
		     , #{CP_TAX_I}
		     , #{SP_TAX_I}
		     , #{LOCAL_TAX_I}
		     , #{ACC_GU}
		     , #{PJT_CODE}
		     , #{ORG_ACCNT}
		     , #{REMARK}
		     , #{S_COMP_CODE}
		     , #{REAL_SUPP_DATE}
		     , #{ITEM_CODE}
		     , #{SEQ}
		)
	</insert>

	<update id="hpb110ukrService.updateList" parameterType="Map">
		/* hpb110ukrService.updateList */
		UPDATE HPB200T
		   SET DEPT_CODE        = #{DEPT_CODE}
		     , DEPT_NAME        = #{DEPT_NAME}
		     , EXEDEPT_CODE     = #{EXEDEPT_CODE}
		     , EXEDEPT_NAME     = #{EXEDEPT_NAME}
		     , DIV_CODE         = #{DIV_CODE}
		     , SECT_CODE        = #{SECT_CODE}
		     , DED_CODE         = #{DED_CODE}
		     , WORK_TIME        = #{WORK_TIME}
		     , RECE_DATE        = #{RECE_DATE}
		     , INCOME_KIND      = #{INCOME_KIND}
		     , TAX_EXCEPTION    = #{TAX_EXCEPTION}
		     , PRIZE_CODE       = #{PRIZE_CODE}
		     , TAX_GUBN         = #{TAX_GUBN}
		     , CLAIM_INTER_GUBN = #{CLAIM_INTER_GUBN}
		     , WERT_PAPER_CODE  = #{WERT_PAPER_CODE}
		     , BU_CODE          = #{BU_CODE}
		     , CHANGE_GUBN      = #{CHANGE_GUBN}
		     , DATE_FROM_YYMM   = #{DATE_FROM_YYMM}
		     , DATE_TO_YYMM     = #{DATE_TO_YYMM}
		     , INTER_RATE       = #{INTER_RATE}
		     , PAY_AMOUNT_I     = #{PAY_AMOUNT_I}
		     , EXPS_PERCENT_I   = #{EXPS_PERCENT_I}
		     , EXPS_AMOUNT_I    = #{EXPS_AMOUNT_I}
		     , SUPP_TOTAL_I     = #{SUPP_TOTAL_I}
		     , PERCENT_I        = #{PERCENT_I}
		     , IN_TAX_I         = #{IN_TAX_I}
		     , CP_TAX_I         = #{CP_TAX_I}
		     , SP_TAX_I         = #{SP_TAX_I}
		     , LOCAL_TAX_I      = #{LOCAL_TAX_I}
		     , TAX_CUT_REASON   = #{TAX_CUT_REASON}
		     , REMARK           = #{REMARK}
		     , ACC_GU           = #{ACC_GU}
		     , PJT_CODE         = #{PJT_CODE}
		     , ORG_ACCNT        = #{ORG_ACCNT}
		     , REAL_SUPP_DATE   = #{REAL_SUPP_DATE}
		     , ITEM_CODE        = #{ITEM_CODE}
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DED_TYPE     = #{DED_TYPE}
		   AND SUPP_TYPE    = #{SUPP_TYPE}
		   AND PERSON_NUMB  = #{PERSON_NUMB}
		   AND PAY_YYYYMM   = #{PAY_YYYYMM}
		   AND SUPP_DATE    = #{SUPP_DATE}
		   AND SEQ          = #{SEQ}
	</update>

	<delete id="hpb110ukrService.deleteList" parameterType="Map" >
		DELETE FROM HPB200T 
		 WHERE COMP_CODE    = #{S_COMP_CODE}
		   AND DED_TYPE     = #{DED_TYPE}
		   AND SUPP_TYPE    = #{SUPP_TYPE}
		   AND PERSON_NUMB  = #{PERSON_NUMB}
		   AND PAY_YYYYMM   = #{PAY_YYYYMM}
		   AND SUPP_DATE    = #{SUPP_DATE}
		   AND SEQ          = #{SEQ}
	</delete>



	<!-- Excel Upload-->
	<select id="hpb110ukrService.selectExcelUploadSheet" parameterType="Map" resultType="rMap">
		/* hpb110ukrService.selectExcelUploadSheet */
		SELECT A._EXCEL_JOBID
		     , A._EXCEL_ROWNUM
		     , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB THEN CASE WHEN A.NAME != B.NAME THEN 'Y'
		                                                         ELSE A._EXCEL_HAS_ERROR
		                                                     END 
		            WHEN ISNULL(B.PERSON_NUMB, '') = '' THEN 'Y'
		            ELSE A._EXCEL_HAS_ERROR
		       END                                              AS _EXCEL_HAS_ERROR
		     , CASE WHEN A.PERSON_NUMB = B.PERSON_NUMB THEN CASE WHEN A.NAME != B.NAME THEN '해당소득자코드와 소득자명을 확인하십시오.'
		                                                         ELSE A._EXCEL_ERROR_MSG
		                                                     END
		            WHEN ISNULL(B.PERSON_NUMB, '') = ''
		            THEN '등록된 소득자코드가 없습니다.'
		            ELSE A._EXCEL_ERROR_MSG
		        END                                             AS _EXCEL_ERROR_MSG
		     , A.COMP_CODE
		     , A.PAY_YYYYMM                                                       --귀속년월
		     , A.SUPP_DATE                                                        --지급일자
		     , B.DEPT_CODE                                                        --부서코드
		     , B.DEPT_NAME                                                        --부서명
		     , A.PERSON_NUMB                                                      --사번
		     , B.NAME                                                             --성명
		     , unilite.fnCipherDecrypt(B.REPRE_NUM, 'A')        AS REPRE_NUM      --주민번호
		     , A.PAY_AMOUNT_I                                   AS PAY_AMOUNT_I   --지급액
		     , A.PERCENT_I                                      AS PERCENT_I      --세율
		     -- , '3'    AS PERCENT_I
		     , A.PAY_AMOUNT_I                                   AS SUPP_TOTAL_I   --지급액
		     , ISNULL(A.IN_TAX_I, 0)                            AS IN_TAX_I       --소득세
		     , ISNULL(A.LOCAL_TAX_I, 0)                         AS LOCAL_TAX_I    --주민세
		     , ISNULL(A.TAX_TOTAL_I, 0)                         AS DED_AMOUNT_I   --공제액, 20200703 수정: TAX_TOTAL_I -> DED_AMOUNT_I 등
		     , B.DIV_CODE                                                         --소속사업장
		     , B.DED_CODE                                                         --소득구분
		     , M1.CODE_NAME                                     AS DED_NAME       --소득구분
		     , A.SUPP_DATE                                      AS REAL_SUPP_DATE --실지급일
		     , A.SUPP_DATE                                      AS RECE_DATE      --영수일
		     , '1' AS DED_TYPE                                                    --소득자타입
		     , B.DIV_CODE                                       AS SECT_CODE      --신고사업장
		     , '01'                                             AS ACC_GU         --계정구분
		     --20200703 추가
		     , ISNULL(A.PAY_AMOUNT_I, 0)
		     - (ISNULL(A.LOCAL_TAX_I, 0) + ISNULL(A.IN_TAX_I, 0)) AS REAL_SUPP_TOTAL_I
		  FROM      L_HPB200T A WITH(NOLOCK)
		  LEFT JOIN HPB100T   B WITH(NOLOCK) ON B.COMP_CODE   = #{S_COMP_CODE}
		                                    AND B.PERSON_NUMB = A.PERSON_NUMB
		                                    AND B.DED_TYPE    = '1'
		  LEFT JOIN BSA100T  M1 WITH(NOLOCK) ON M1.COMP_CODE  = #{S_COMP_CODE}
		                                    AND M1.MAIN_CODE  = 'HS04'
		                                    AND M1.SUB_CODE   = B.DED_CODE
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>

	<update id="hpb110ukrService.insertExcelUpload" parameterType="Map">
		/* hpb110ukrServiceImpl.insertExcelUpload*/
		/* temp Table에 insert */
		DECLARE @PAY_AMOUNT_I NUMERIC(30, 6)
		      , @PERCENT_I    NUMERIC(30, 6)
		      , @IN_TAX_I     NUMERIC(30, 6)
		      , @LOCAL_TAX_I  NUMERIC(30, 6)

		SET     @PAY_AMOUNT_I = #{PAY_AMOUNT_I}
		SET     @PERCENT_I    = #{PERCENT_I}
		SET     @IN_TAX_I     = #{IN_TAX_I}
		SET     @LOCAL_TAX_I  = #{LOCAL_TAX_I}

		SET     @PAY_AMOUNT_I = ISNULL(@PAY_AMOUNT_I, 0)
		SET     @PERCENT_I    = ISNULL(@PERCENT_I, 3)
		SET     @IN_TAX_I     = ISNULL(@IN_TAX_I, 0)
		SET     @LOCAL_TAX_I  = ISNULL(@LOCAL_TAX_I, 0)

		INSERT INTO L_HPB200T (
		       _EXCEL_JOBID 
		     , _EXCEL_ROWNUM 
		     , _EXCEL_HAS_ERROR 
		     , _EXCEL_ERROR_MSG
		     , COMP_CODE
		     , PAY_YYYYMM
		     , SUPP_DATE
		     , PERSON_NUMB
		     , NAME
		     , PAY_AMOUNT_I
		     , PERCENT_I
		     , IN_TAX_I
		     , LOCAL_TAX_I
		     , TAX_TOTAL_I
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		) VALUES (
		       #{_EXCEL_JOBID} 
		     , #{_EXCEL_ROWNUM} 
		     , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR} 
		     , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
		     , #{S_COMP_CODE}
		     , #{PAY_YYYYMM}
		     , #{SUPP_DATE}
		     , #{PERSON_NUMB}
		     , #{NAME}
		     , @PAY_AMOUNT_I
		     , @PERCENT_I
		     , CASE WHEN @IN_TAX_I = 0 AND @LOCAL_TAX_I = 0 THEN ROUND(@PAY_AMOUNT_I * @PERCENT_I / 100, -1, 1)
		            ELSE @IN_TAX_I
		       END                                                    --소득세
		     , CASE WHEN @IN_TAX_I = 0 AND @LOCAL_TAX_I = 0 THEN ROUND(ROUND(@PAY_AMOUNT_I * @PERCENT_I / 100, -1, 1) / 10, -1, 1)
		            ELSE @LOCAL_TAX_I
		       END                                                    --주민세
		     , CASE WHEN @IN_TAX_I = 0 AND @LOCAL_TAX_I = 0 THEN ROUND(@PAY_AMOUNT_I * @PERCENT_I / 100, -1, 1) + ROUND(ROUND(@PAY_AMOUNT_I * @PERCENT_I / 100, -1, 1) / 10, -1, 1)
		            ELSE #{TAX_TOTAL_I}
		       END                                                    --공제총액
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<!-- 임시 테이블에 insert된 데이터 조회 --> 
	<select id="hpb110ukrService.getData" parameterType="Map" resultType="rMap">
		--hpb110ukrService.getData
		SELECT  * FROM L_HPB200T WITH(NOLOCK)
		 WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
	</select>



<!-- 마감: 20210609 추가 -->
	<update id="hpb110ukrService.closeY" parameterType="Map">
		/* hpb110ukrService.closeY */
		INSERT INTO HBS910T (
		       COMP_CODE
		     , DIV_CODE
		     , PERSON_NUMB
		     , CLOSE_TYPE
		     , CLOSE_DATE
		     , SUPP_TYPE
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		     , UPDATE_DB_USER
		     , UPDATE_DB_TIME
		) VALUES (
		       #{S_COMP_CODE}
		     , #{DIV_CODE}
		     , #{PERSON_NUMB}
		     , 'B'
		     , CONVERT(NVARCHAR(08), GETDATE(), 112)
		     , #{SEQ}
		     , #{S_USER_ID}
		     , GETDATE()
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>
<!-- 마감취소: 20210609 추가 -->
	<update id="hpb110ukrService.closeN" parameterType="Map">
		/* hpb110ukrService.closeN */
		DELETE HBS910T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND DIV_CODE    = #{DIV_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND CLOSE_TYPE  = 'B'
		   AND CLOSE_DATE  = #{CLOSE_DATE}
		   AND SUPP_TYPE   = #{SEQ}
	</update>
</mapper>