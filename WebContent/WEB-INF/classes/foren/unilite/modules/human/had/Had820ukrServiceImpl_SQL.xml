<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="had820ukrServiceImpl">
	<select id="had820ukrServiceImpl.getCompanyNum" parameterType="Map" resultType="String">
	SELECT REPLACE(COMPANY_NUM, '-', '')	AS COMPANY_NUM
	  FROM BOR120T WITH (NOLOCK) 
	 WHERE COMP_CODE	= #{S_COMP_CODE}
	   AND DIV_CODE		= #{DIV_CODE}
	</select>
	<select id="had820ukrServiceImpl.selectList2020" parameterType="Map" resultType="rMap">
		DECLARE	  @COMP_CODE		NVARCHAR(08)	-- 법인코드
				, @YEAR_YYYY		NVARCHAR(04)	-- 정산년도
				, @BATCH_TYPE		NVARCHAR(01)	-- 작업유형(근로소득:W, 의료비:M)
				, @DIV_CODE			NVARCHAR(08)	-- 신고사업장
				, @YEAR_FLAG		NVARCHAR(01)	-- 생성대상(연말정산:N, 연말+중도:A)
				, @SUBMIT_DATE		NVARCHAR(08)	-- 제출년월일
				, @TAX_AGENT_NO		NVARCHAR(06)	-- 관리번호
				, @HOME_TAX_ID		NVARCHAR(20)	-- 홈택스ID
				, @USER_ID			NVARCHAR(100)	-- 로그인 사용자ID
				, @ERROR_DESC		NVARCHAR(2000)	-- 오류메세지
		
		BEGIN
			SET @COMP_CODE		= #{S_COMP_CODE}
			SET @YEAR_YYYY		= #{CAL_YEAR}
			SET @BATCH_TYPE		= #{BATCH_TYPE}
			SET @DIV_CODE		= #{DIV_CODE}
			SET @YEAR_FLAG		= #{RETR_FLAG}
			SET @SUBMIT_DATE	= #{SUBMIT_DATE}
			SET @TAX_AGENT_NO	= #{TAX_AGENT_NO}
			SET @HOME_TAX_ID	= #{HOME_TAX_ID}
			SET @USER_ID		= #{S_USER_ID}
			
			EXEC uniLITE.USP_HUMAN_HAD820UKR	@COMP_CODE
											,	@YEAR_YYYY
											,	@BATCH_TYPE
											,	@DIV_CODE
											,	@YEAR_FLAG
											,	@SUBMIT_DATE
											,	@TAX_AGENT_NO
											,	@HOME_TAX_ID
											,	@USER_ID
											,	@ERROR_DESC		OUTPUT
			
			SELECT @ERROR_DESC	AS ERROR_DESC
		END
	</select>
	
	<select id="had820ukrServiceImpl.getBillDiv" parameterType="Map" resultType="rMap">
	SELECT BILL_DIV_CODE
	  FROM BOR120T  WITH (NOLOCK) 
	 WHERE COMP_CODE = #{S_COMP_CODE}
	   AND DIV_CODE = #{S_DIV_CODE}
	</select>
	<update id="had820ukrServiceImpl.updateEduCode" parameterType="Map">
	--had820ukr.Chad820ukr[fnHad820QStP] Query00
    /*************************************************************************************************************
     2017년 교육비구분 추가되면서 1,2행에 공백이 들어가 있는 경우 두건으로 집계되기 때문에 1,2행 동일한 값으로 업데이트
    *************************************************************************************************************/
         UPDATE T                                                                                                  
           SET EDU_CODE = A.EDU_CODE                                                                              
          FROM HAD430T T WITH (NOLOCK)                                                                            
               INNER JOIN                                                                                         
               (SELECT *                                                                                          
                 FROM HAD430T WITH (NOLOCK)                                                                       
                WHERE COMP_CODE = #{S_COMP_CODE}                                                                      
                  AND YEAR_YYYY = #{CAL_YEAR}                                                                       
                  AND SEQ_NUM   = 1) A ON A.COMP_CODE   = T.COMP_CODE                                             
                                      AND A.YEAR_YYYY   = T.YEAR_YYYY                                             
                                      AND A.PERSON_NUMB = T.PERSON_NUMB                                           
                                      AND A.FAMILY_NAME = T.FAMILY_NAME                                           
               INNER JOIN                                                                                         
               (SELECT *                                                                                          
                 FROM HAD430T WITH (NOLOCK)                                                                       
                WHERE COMP_CODE = #{S_COMP_CODE}                                                                      
                  AND YEAR_YYYY = #{CAL_YEAR}                                                                       
                  AND SEQ_NUM   = 2                                                                               
                  AND ISNULL(EDU_CODE,'') = ''                                                                    
                  AND EDU_USE_I           = 0                                                                     
                  AND FIELD_EDUC_I        = 0                                                                     
                  AND EDU_PRINCIPAL_RTN_I = 0) B ON B.COMP_CODE   = T.COMP_CODE                                   
                                                AND B.YEAR_YYYY   = T.YEAR_YYYY                                   
                                                AND B.PERSON_NUMB = T.PERSON_NUMB                                 
                                                AND B.FAMILY_NAME = T.FAMILY_NAME                                 
         WHERE T.COMP_CODE = #{S_COMP_CODE}                                                                           
           AND T.YEAR_YYYY = #{CAL_YEAR}                                                                            
           AND T.SEQ_NUM   = '2'                                                                                  
           AND ISNULL(A.EDU_CODE,'') != ISNULL(B.EDU_CODE,'')                                                     
                                                                                                                  
        UPDATE T                                                                                                  
           SET EDU_CODE = A.EDU_CODE                                                                              
          FROM HAD430T T WITH (NOLOCK)                                                                            
               INNER JOIN                                                                                         
               (SELECT *                                                                                          
                 FROM HAD430T WITH (NOLOCK)                                                                       
                WHERE COMP_CODE = #{S_COMP_CODE}                                                                      
                  AND YEAR_YYYY = #{CAL_YEAR}                                                                       
                  AND SEQ_NUM   = 2) A ON A.COMP_CODE   = T.COMP_CODE                                             
                                      AND A.YEAR_YYYY   = T.YEAR_YYYY                                             
                                      AND A.PERSON_NUMB = T.PERSON_NUMB                                           
                                      AND A.FAMILY_NAME = T.FAMILY_NAME                                           
               INNER JOIN                                                                                         
               (SELECT *                                                                                          
                 FROM HAD430T WITH (NOLOCK)                                                                       
                WHERE COMP_CODE = #{S_COMP_CODE}                                                                      
                  AND YEAR_YYYY = #{CAL_YEAR}                                                                       
                  AND SEQ_NUM   = 1                                                                               
                  AND ISNULL(EDU_CODE,'') = ''                                                                    
                  AND EDU_USE_I           = 0                                                                     
                  AND FIELD_EDUC_I        = 0                                                                     
                  AND EDU_PRINCIPAL_RTN_I = 0) B ON B.COMP_CODE   = T.COMP_CODE                                   
                                                AND B.YEAR_YYYY   = T.YEAR_YYYY                                   
                                                AND B.PERSON_NUMB = T.PERSON_NUMB                                 
                                                AND B.FAMILY_NAME = T.FAMILY_NAME                                 
         WHERE T.COMP_CODE = #{S_COMP_CODE}                                                                           
           AND T.YEAR_YYYY = #{CAL_YEAR}                                                                            
           AND T.SEQ_NUM   = '1'                                                                                  
           AND ISNULL(A.EDU_CODE,'') != ISNULL(B.EDU_CODE,'')                                                                                                                                               
	</update>
	<select id="had820ukrServiceImpl.getSelectA" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query01
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (A 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
                  , @DEPT_CODE     		NVARCHAR(01)                -- (필수) 로그인사용자부서
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
        SET @DEPT_CODE        	= #{DEPT_CODE}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT DISTINCT
               SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3)                                                      AS SAFFER
             , B.COMPANY_NUM                                      
             , CONVERT(CHAR(60)  , CASE WHEN ISNULL(B.DIV_FULL_NAME, '') = '' THEN D.COMP_NAME ELSE B.DIV_FULL_NAME END)    AS DIV_NAME
              , CONVERT(CHAR(30)  , F.TREE_NAME)                                                                            AS DEPT_NAME
             , CONVERT(CHAR(13)  , REPLACE(ISNULL(D.COMP_OWN_NO, ''), '-', ''))                                             AS REPRE_NO
             , CONVERT(CHAR(30)  , ISNULL(B.REPRE_NAME, ''))                                                                AS REPRE_NAME
             , ISNULL(B.ZIP_CODE , '')                                                                                      AS ZIP_CODE
             , ISNULL(B.ADDR     , '')                                                                                      AS KOR_ADDR
             , ISNULL(B.TELEPHON , '')                                                                                      AS TELEPHON
             , E.SECT_CNT                                                                                                   AS CNT
             , ISNULL(C.YEAR_YYYY, '')                                                                                      AS YEAR_YYYY
             , CONVERT(CHAR(1880), '')                                                                                      AS A_SPACE
        FROM              HUM100T   A WITH (NOLOCK)
               INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.DIV_CODE    = A.SECT_CODE
               INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                   AND C.PERSON_NUMB = A.PERSON_NUMB
               INNER JOIN BOR100T   D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
               INNER JOIN (-- 사업장별 그룹갯수 조회
                          SELECT T1.COMP_CODE, COUNT(DISTINCT T1.SECT_CODE) AS SECT_CNT
                          FROM              HUM100T   T1 WITH (NOLOCK)
                                 INNER JOIN HAD600T   T2 WITH (NOLOCK) ON T2.COMP_CODE   = T1.COMP_CODE
                                                                      AND T2.PERSON_NUMB = T1.PERSON_NUMB
                          WHERE  T1.COMP_CODE = @COMP_CODE
                          AND    T2.YEAR_YYYY = @CAL_YYYY
                          AND    T1.SECT_CODE = @DIV_CODE
                          GROUP  BY T1.COMP_CODE
                          )         E               ON E.COMP_CODE   = A.COMP_CODE
               LEFT JOIN BSA210T    F WITH (NOLOCK) ON F.COMP_CODE   = A.COMP_CODE
                                                   AND F.TREE_CODE   = @DEPT_CODE
        WHERE  A.COMP_CODE = @COMP_CODE
        AND    A.SECT_CODE = @DIV_CODE
        AND    C.YEAR_YYYY = @CAL_YYYY
        AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
        AND  ((C.HALFWAY_TYPE != 'Y' AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectB" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query02
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (B 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT A.SECT_CODE
             , CONVERT(CHAR(03) , SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))                                  AS SAFFER 
             , B.COMPANY_NUM
             , CONVERT(CHAR(60) , CASE WHEN ISNULL(B.DIV_FULL_NAME, '') = '' THEN B.DIV_NAME ELSE B.DIV_FULL_NAME END)      AS DIV_NAME
             , CONVERT(CHAR(30) , ISNULL(B.REPRE_NAME,''))                                                                  AS REPRE_NAME
             , ISNULL(REPLACE(E.COMP_OWN_NO, '-', ''), '')                                                                  AS REPRE_NO
             , ISNULL(C.YEAR_YYYY, '')                                                                                      AS YEAR_YYYY
             , COUNT(A.PERSON_NUMB)                                                                                         AS NOW_CNT
             , SUM(ISNULL(C.INCOME_SUPP_TOTAL_I, 0))                                                                        AS EARN_INCOME_I
             , SUM(ISNULL(C.DEF_IN_TAX_I       , 0))                                                                        AS DEF_IN_TAX_I
             , SUM(ISNULL(C.DEF_SP_TAX_I       , 0))                                                                        AS DEF_SP_TAX_I
             , SUM(ISNULL(C.DEF_LOCAL_TAX_I    , 0))                                                                        AS DEF_LOCAL_TAX_I
             , SUM(ISNULL(C.DEF_IN_TAX_I       , 0)) + SUM(ISNULL(C.DEF_SP_TAX_I, 0)) + SUM(ISNULL(C.DEF_LOCAL_TAX_I, 0))   AS DEF_SUM
             , SUM(CASE WHEN ISNULL(D.P1_COMPANY_NUM, '') != '' AND ISNULL(D.P2_COMPANY_NUM, '') != '' THEN 2
                        WHEN ISNULL(D.P1_COMPANY_NUM, '') != '' AND ISNULL(D.P2_COMPANY_NUM, '')  = '' THEN 1
                        ELSE 0
                   END) + 
               SUM(CASE WHEN ISNULL(NULLIF(F.P3_COMPANY_NUM, '0'), '') != '' THEN 1
               			ELSE 0
                   END)                                                                                                     AS BEFORE_CNT
             , CONVERT(CHAR(1676), '')                                                                                      AS B_SPACE
        FROM              HUM100T   A WITH (NOLOCK)
               INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.DIV_CODE    = A.SECT_CODE
               INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                   AND C.PERSON_NUMB = A.PERSON_NUMB
               INNER JOIN HAD400T   F WITH (NOLOCK) ON F.COMP_CODE   = C.COMP_CODE
                                                   AND F.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND F.PERSON_NUMB = C.PERSON_NUMB
               LEFT  JOIN (SELECT COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , P1_COMPANY_NUM
                                , P2_COMPANY_NUM
                           FROM   HAD500T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                          )         D               ON D.COMP_CODE   = C.COMP_CODE
                                                   AND D.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND D.PERSON_NUMB = C.PERSON_NUMB
               LEFT  JOIN BOR100T   E WITH (NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
        WHERE  A.COMP_CODE     = @COMP_CODE
        AND    A.SECT_CODE     = @DIV_CODE
        AND    C.YEAR_YYYY     = @CAL_YYYY
        AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
        AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))
        GROUP BY A.SECT_CODE, B.DIV_FULL_NAME, B.SAFFER_TAX, B.COMPANY_NUM, B.DIV_NAME, B.REPRE_NAME
               , ISNULL(REPLACE(E.COMP_OWN_NO, '-', ''), '') , B.ZIP_CODE, B.ADDR,	C.YEAR_YYYY
        ORDER BY A.SECT_CODE
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectC" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query03
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (C 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT A.SECT_CODE
             , A.PERSON_NUMB
              --[자료관리번호] 
             , CONVERT(CHAR(03) , SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))                      AS SAFFER                    --03.세무서코드
    
              --[원천징수의무자]
             , B.COMPANY_NUM                                                                                    AS COMPANY_NUM               --05.사업자등록번호
    
              --[소득자(근로자)]
             , (CASE WHEN ISNULL(D.P1_COMPANY_NUM, '') != '' AND ISNULL(D.P2_COMPANY_NUM, '') != '' THEN 2
                     WHEN ISNULL(D.P1_COMPANY_NUM, '') != '' AND ISNULL(D.P2_COMPANY_NUM, '')  = '' THEN 1
                     ELSE 0
                 END) +
               (CASE WHEN ISNULL(NULLIF(F.P3_COMPANY_NUM, '0'), '') != '' THEN 1
               		 ELSE 0
                 END)                                                                                           AS BEFORE_CNT                --06.종(전)근무처 수
             , CASE WHEN ISNULL(A.LIVE_GUBUN, '') = '' THEN '1' ELSE A.LIVE_GUBUN END                           AS LIVE_GUBUN                --07.거주자구분코드
             , CASE WHEN (ISNULL(A.LIVE_GUBUN, '1') = '1' OR A.LIVE_GUBUN = '') THEN CONVERT(CHAR(2), '') 
                    ELSE UPPER(A.LIVE_CODE)
                END                                                                                             AS LIVE_CODE                 --08.거주지국코드
             , CASE WHEN F.FORE_SINGLE_YN      ='Y'   THEN '1'  ELSE '2' END                                    AS FORE_SINGLE_YN            --09.외국인단일세율적용
             , CASE WHEN F.FOREIGN_DISPATCH_YN ='Y'   THEN '1'  ELSE '2' END                                    AS FOREIGN_DISPATCH_YN       --10.외국법인소속파견근로자여부
             , CONVERT(CHAR(30) , A.NAME)                                                                       AS NAME                      --11.성명
             , CASE WHEN UPPER(A.NATION_CODE) = 'KR' THEN '1'  ELSE '9' END                                     AS FORIGN                    --12.내'외국인 구분코드
             , CONVERT(CHAR(13) , unilite.fnCipherDecrypt(A.REPRE_NUM, ''))                                     AS REPRE_NUM                 --13.주민등록번호
             , CASE WHEN UPPER(A.NATION_CODE) = 'KR' THEN CONVERT(CHAR(2), '') ELSE UPPER(A.NATION_CODE) END    AS NATION_CODE               --14.국적코드
             , CASE WHEN UPPER(A.NATION_CODE) = 'KR' THEN A.HOUSEHOLDER_YN ELSE '2'  END                        AS HOUSEHOLDER_YN            --15.세대주여부
             , CASE WHEN C.HALFWAY_TYPE = 'N' THEN '1' ELSE '2' END                                             AS HALFWAY_TYPE              --16.연말정산구분
    
			 , CASE WHEN L.TAX_BASE = '5' THEN '1' ELSE '2' END                                                 AS SUB_DIV_YN                --17.사업자단위과세자여부
	         , CASE WHEN L.TAX_BASE = '5' THEN ISNULL(B.SUB_DIV_NUM, '') ELSE CONVERT(CHAR(4), '') END          AS SUB_DIV_NUM               --18.종사업장 일련번호
	         , '2'                                                                                              AS RELIGION_YN               --19.종교관련종사자여부(1:여,2:부)
              --[근무처별소득명세-주(현)근무처]
             , CONVERT(CHAR(10), B.COMPANY_NUM)                                                                 AS COMPANY_NUM_NOW           --20.주현근무처-사업자등록번호
             , CONVERT(CHAR(60), B.DIV_NAME)                                                                    AS DIV_NAME_NOW              --21.주현근무처-근무처명
             , CASE WHEN SUBSTRING(A.JOIN_DATE, 1, 4) = @CAL_YYYY THEN A.JOIN_DATE ELSE @CAL_YYYY + '0101' END  AS STRT_DATE                 --22.근무기간시작연월일
             , CASE WHEN SUBSTRING(A.RETR_DATE, 1, 4) = @CAL_YYYY THEN A.RETR_DATE ELSE @CAL_YYYY + '1231' END  AS END_DATE                  --23.근무기간종료연월일
             , ISNULL(F.NONTAX_FR, 0)                                                                           AS NONTAX_FR                 --24.감면기간시작연월일
             , ISNULL(F.NONTAX_TO, 0)                                                                           AS NONTAX_TO                 --25.감면기간종료연월일
             , C.NOW_PAY_TOT_I                                                                                  AS PAY_TOTAL_I               --26.급여총액
             , C.NOW_BONUS_TOTAL_I                                                                              AS BONUS_TOTAL_I             --27.상여총액
             , C.NOW_ADD_BONUS_I                                                                                AS ADD_BONUS_TOTAL_I         --28.인정상여
             , ISNULL(C.NOW_STOCK_PROFIT_I, 0)                                                                  AS NOW_STOCK_PROFIT_I        --29.주식매수선택권행사이익
             , ISNULL(C.NOW_OWNER_STOCK_DRAW_I,0)                                                               AS NOW_OWNER_STOCK_DRAW_I    --30.우리사주조합인출금
             , ISNULL(C.NOW_OF_RETR_OVER_I,0)                                                                   AS NOW_OF_RETR_OVER_I        --31.임원퇴직소득한도초과액
             , ISNULL(C.NOW_TAX_INVENTION_I, 0)                                                                 AS NOW_TAX_INVENTION_I       --32.직무발명보상금(비과세 500만원 초과금)
             , ISNULL(C.NOW_PAY_TOT_I,0)          + ISNULL(C.NOW_BONUS_TOTAL_I,0)   + 
               ISNULL(C.NOW_ADD_BONUS_I,0)        + ISNULL(C.NOW_STOCK_PROFIT_I, 0) + 
               ISNULL(C.NOW_OWNER_STOCK_DRAW_I,0) + ISNULL(C.NOW_OF_RETR_OVER_I,0) + 
           	   ISNULL(C.NOW_TAX_INVENTION_I,0)                                                                  AS NOW_INCOME_TOTAL          --34.주현소득계
       
              --주(현)근무처 비과세 및 감면소득
             , ISNULL(H.G01_I, 0)                                                                               AS G01_I                     --35.비과세학자금
             , ISNULL(H.H01_I, 0)                                                                               AS H01_I                     --36.무보수위원수당
             , ISNULL(H.H05_I, 0)                                                                               AS H05_I                     --37.경호승선수당
             , ISNULL(H.H06_I, 0)                                                                               AS H06_I                     --38.유아초중등
             , ISNULL(H.H07_I, 0)                                                                               AS H07_I                     --39.고등교육법
             , ISNULL(H.H08_I, 0)                                                                               AS H08_I                     --40.특별법
             , ISNULL(H.H09_I, 0)                                                                               AS H09_I                     --41.연구기관등
             , ISNULL(H.H10_I, 0)                                                                               AS H10_I                     --42.기업부설연구소
             , ISNULL(H.H14_I, 0)                                                                               AS H14_I                     --43.보육교사근무환경개선비
             , ISNULL(H.H15_I, 0)                                                                               AS H15_I                     --44.사립유치원수석교사교사의인건비
             , ISNULL(H.H11_I, 0)                                                                               AS H11_I                     --45.취재수당
             , ISNULL(H.H12_I, 0)                                                                               AS H12_I                     --46.벽지수당
             , ISNULL(H.H13_I, 0)                                                                               AS H13_I                     --47.재해관련급여
             , ISNULL(H.H16_I, 0)                                                                               AS H16_I                     --48.정부공공기관지방이전기관종사자이주수당
             , ISNULL(H.H17_I, 0)                                                                               AS H17_I                     --49.종교활동비
             , ISNULL(H.I01_I, 0)                                                                               AS I01_I                     --50.외국정부등근무자
             , ISNULL(H.K01_I, 0)                                                                               AS K01_I                     --51.외국주둔군인등
             , ISNULL(H.M01_I, 0)                                                                               AS M01_I                     --52.국외근로100만원
             , ISNULL(H.M02_I, 0)                                                                               AS M02_I                     --53.국외근로200만원(300만원)
             , ISNULL(H.M03_I, 0)                                                                               AS M03_I                     --54.국외근로
             , ISNULL(H.O01_I, 0)                                                                               AS O01_I                     --55.야간근로수당
             , ISNULL(H.Q01_I, 0)                                                                               AS Q01_I                     --56.출산보육수당
             , ISNULL(H.R10_I, 0)                                                                               AS R10_I                     --57.근로장학금
             , ISNULL(H.R11_I, 0)                                                                               AS R11_I                     --58.직무발명보상금(연500만원 한도)
             , ISNULL(H.S01_I, 0)                                                                               AS S01_I                     --59.주식매수선택권
             , ISNULL(H.U01_I, 0)                                                                               AS U01_I                     --60.벤처기업주식매수선택권
             , ISNULL(H.Y02_I, 0)                                                                               AS Y02_I                     --61-A.우리사주조합인출금50%
             , ISNULL(H.Y03_I, 0)                                                                               AS Y03_I                     --61-B.우리사주조합인출금75%
             , ISNULL(H.Y04_I, 0)                                                                               AS Y04_I                     --61-C.우리사주조합인출금100%
             , ISNULL(H.Y22_I, 0)                                                                               AS Y22_I                     --62.전공의수련보조수당
             , ISNULL(C.SKILL_DED_I,0)                                                                          AS T01_I                     --63.외국인기술자
             , ISNULL(C.MANAGE_RESULT_REDU_I,0)                                                                 AS T30_I                     --64.성과공유중소기업경영성과급
             , ISNULL(C.CORE_COMPEN_FUND_REDU_I,0)                                                              AS T40_I                     --65.중소기업 핵심인력 성과보상기금소득세감면
             , CASE WHEN A.YOUTH_EXEMP_DATE &gt;= @CAL_YYYY + '0101' AND A.YOUTH_EXEMP_RATE = '2' THEN ISNULL(C.YOUTH_DED_I_SUM,0) - ISNULL(M.P1_YOUTH_SUM, 0) - ISNULL(M.P2_YOUTH_SUM,0) ELSE 0 END	AS T11_1                     --66-A.중소기업취업청년소득세감면(50%)
             , CASE WHEN A.YOUTH_EXEMP_DATE &gt;= @CAL_YYYY + '0101' AND A.YOUTH_EXEMP_RATE = '3' THEN ISNULL(C.YOUTH_DED_I_SUM,0) - ISNULL(M.P1_YOUTH_SUM, 0) - ISNULL(M.P2_YOUTH_SUM,0) ELSE 0 END	AS T12_1                     --66-B.중소기업취업청년소득세감면(70%)
             , CASE WHEN A.YOUTH_EXEMP_DATE &gt;= @CAL_YYYY + '0101' AND A.YOUTH_EXEMP_RATE = '4' THEN ISNULL(C.YOUTH_DED_I_SUM,0) - ISNULL(M.P1_YOUTH_SUM, 0) - ISNULL(M.P2_YOUTH_SUM,0) ELSE 0 END	AS T13_1                     --66-C.중소기업취업청년소득세감면(90%)
			 , ISNULL(C.TAXES_REDU_I,0)                                                                         AS T20_1                     --67.조세조약상교직자감면
             , ISNULL(H.NON_TAX_TOTAL,0)                                                                        AS NON_TAX_TOTAL             --68.비과세계
             , ISNULL(C.SKILL_DED_I ,0) + ISNULL(C.MANAGE_RESULT_REDU_I,0) + ISNULL(C.CORE_COMPEN_FUND_REDU_I,0) 
    		 + CASE WHEN A.YOUTH_EXEMP_DATE &gt;= @CAL_YYYY + '0101' THEN (ISNULL(C.YOUTH_DED_I_SUM,0) - ISNULL(M.P1_YOUTH_SUM, 0) - ISNULL(M.P2_YOUTH_SUM,0)) ELSE 0 END
    	 	 + ISNULL(C.TAXES_REDU_I,0)                                                                         AS NON_TAX_PAY_TOTAL         --69.감면소득계
    
              --[정산명세]
             , C.INCOME_SUPP_TOTAL_I                                                                            AS TAX_SUM                   --70.총급여
             , C.INCOME_DED_I                                                                                   AS INCOME_DED_I              --71.근로소득공제
             , C.EARN_INCOME_I                                                                                  AS EARN_INCOME_I             --72.근로소득금액
    
              --[기본공제]
             , C.PER_DED_I                                                                                      AS PER_DED_I                 --73.본인공제금액
             , C.SPOUSE_DED_I                                                                                   AS SPOUSE_DED_I              --74.배우자공제금액
             , C.SUPP_NUM                                                                                       AS SUPP_NUM                  --75-a.부양가족공제인원
             , C.SUPP_SUB_I                                                                                     AS SUPP_SUB_I                --75-b.부양가족공제금액
    
              --[추가공제]
             , C.AGED_NUM                                                                                       AS AGED_NUM                  --76-A.경로우대공제인원
             , C.AGED_DED_I                                                                                     AS AGED_DED_I                --76-B.경로우대공제금액
             , C.DEFORM_NUM                                                                                     AS DEFORM_NUM                --77-A.장애인공제인원
             , C.DEFORM_DED_I                                                                                   AS DEFORM_DED_I              --77-B.장애인공제금액
             , C.WOMAN_DED_I                                                                                    AS WOMAN_DED_I               --78.부녀자공제금액
             , C.ONE_PARENT_DED_I                                                                               AS ONE_PARENT_DED_I          --79.한부모가족공제금액
    
              --[연금보험료공제]
			 , CASE WHEN F.ANU_I &gt; C.ANU_DED_I THEN C.ANU_DED_I ELSE F.ANU_I END                                AS ANU_I                     --80-A.국민연금보험료공제
	         , C.ANU_DED_I                                                                                      AS ANU_DED_I                 --80-B.국민연금보험료공제
	         , F.PUBLIC_PENS_I                                                                                  AS PUBLIC_PENS_I             --81-A.기타연금보험료공제-공무원연금
	         , ABS(C.PUBLIC_PENS_I)                                                                             AS PUBLIC_PENS_DED_I         --81-B.기타연금보험료공제-공무원연금
	         , F.SOLDIER_PENS_I                                                                                 AS SOLDIER_PENS_I            --82-A.기타연금보험료공제-군인연금
	         , ABS(C.SOLDIER_PENS_I)                                                                            AS SOLDIER_PENS_DED_I        --82-B.기타연금보험료공제-군인연금
	         , F.SCH_PENS_I                                                                                     AS SCH_PENS_I                --83-A.기타연금보험료공제-사립학교교직원연금
	         , ABS(C.SCH_PENS_I)                                                                                AS SCH_PENS_DED_I            --83-B.기타연금보험료공제-사립학교교직원연금
	         , F.POST_PENS_I                                                                                    AS POST_PENS_I               --84-A.기타연금보험료공제-별정우체국연금
	         , ABS(C.POST_PENS_I)                                                                               AS POST_PENS_DED_I           --84-B.기타연금보험료공제-별정우체국연금

              --[특별공제]
			  , CASE WHEN ISNULL(F.MED_PREMINM_I, 0) &gt; ISNULL(C.MED_PREMINM_I, 0) THEN ISNULL(C.MED_PREMINM_I, 0) ELSE ISNULL(F.MED_PREMINM_I, 0) END    AS MED_PREMINM_I             --85-A.보험료-건강보험료
	         , ISNULL(C.MED_PREMINM_I, 0)                                                                       AS MED_PREMINM_DED_I         --85-B.보험료-건강보험료
	         , CASE WHEN ISNULL(F.HIRE_INSUR_I, 0)  &gt; ISNULL(C.HIRE_INSUR_I, 0)  THEN ISNULL(C.HIRE_INSUR_I, 0)  ELSE ISNULL(F.HIRE_INSUR_I, 0)  END    AS HIRE_INSUR_I              --86-A.보험료-고용보험료
	         , ISNULL(C.HIRE_INSUR_I, 0)                                                                        AS HIRE_INSUR_DED_I          --86-B.보험료-고용보험료
	         , ISNULL(C.HOUS_AMOUNT_I, 0)                                                                       AS HOUS_AMOUNT_I             --87-A.주택임차차입금원리금상환액_대출기관
	         , ISNULL(C.HOUS_AMOUNT_I_2, 0)                                                                     AS HOUS_AMOUNT_I_2           --87-B.주택임차차입금원리금상환액_거주자
	         , ISNULL(C.MORTGAGE_RETURN_I_2, 0)                                                                 AS MORTGAGE_RETURN_I_2       --88-A.장기주택저당차입금_15년미만
	         , ISNULL(C.MORTGAGE_RETURN_I, 0)                                                                   AS MORTGAGE_RETURN_I         --88-B.장기주택저당차입금이자상환액_15년~29년
	         , ISNULL(C.MORTGAGE_RETURN_I_3, 0)                                                                 AS MORTGAGE_RETURN_I_3       --88-C.장기주택저당차입금이자상환액_30년이상
	         , ISNULL(C.MORTGAGE_RETURN_I_5, 0)                                                                 AS MORTGAGE_RETURN_I_5       --89-A.고정금리비거치식상환대출
	         , ISNULL(C.MORTGAGE_RETURN_I_4, 0)                                                                 AS MORTGAGE_RETURN_I_4       --89-B.기타대출
	         , ISNULL(C.MORTGAGE_RETURN_I_6, 0)                                                                 AS MORTGAGE_RETURN_I_6       --90-A.2015년15년이상(고정금리 비거치식)
	         , ISNULL(C.MORTGAGE_RETURN_I_7, 0)                                                                 AS MORTGAGE_RETURN_I_7       --90-B.2015년15년이상(고정금리OR비거치식)
	         , ISNULL(C.MORTGAGE_RETURN_I_8, 0)                                                                 AS MORTGAGE_RETURN_I_8       --90-C.2015년15년이상(그밖의대출)
	         , ISNULL(C.MORTGAGE_RETURN_I_9, 0)                                                                 AS MORTGAGE_RETURN_I_9       --90-D.2015년10년이상(고정금리OR비거치식)
             , ISNULL(C.GIFT_DED_I, 0)                                                                          AS GIFT_DED_I                --91.기부금(이월분)
             , C.MED_PREMINM_I       + C.HIRE_INSUR_I
             + C.HOUS_AMOUNT_I       + C.HOUS_AMOUNT_I_2     + C.MORTGAGE_RETURN_I_2 + C.MORTGAGE_RETURN_I
             + C.MORTGAGE_RETURN_I_3 + C.MORTGAGE_RETURN_I_5 + C.MORTGAGE_RETURN_I_4 + C.MORTGAGE_RETURN_I_6
             + C.MORTGAGE_RETURN_I_7 + C.MORTGAGE_RETURN_I_8 + C.MORTGAGE_RETURN_I_9
             + C.GIFT_DED_I                                                                                     AS SP_DED_TOTAL              --94.특별소득공제계
             , ISNULL(C.DED_INCOME_I, 0)                                                                        AS DED_INCOME_I              --95.차감소득금액
    
              --[그밖의 소득공제]
             , C.PRIV_PENS_I                                                                                    AS PRIV_PENS_I               --96.개인연금저축소득공제
             , C.COMP_PREMINUM_DED_I                                                                            AS COMP_PREMINUM_DED_I       --97.소기업공제부금소득공제
             , ABS(C.HOUS_BU_AMT)      + ABS(C.HOUS_BU_ADD_AMT)                                                 AS HOUS_BU_AMT               --98.청약저축
             , ABS(C.HOUS_BU_AMOUNT_I) + ABS(C.HOUS_BU_AMOUNT_ADD_I)                                            AS HOUS_BU_AMOUNT_I          --99.주택청약종합저축
             , ABS(C.HOUS_WORK_AMT)                                                                             AS HOUS_WORK_AMT             --100.근로자주택마련저축
             , C.INVESTMENT_DED_I                                                                               AS INVESTMENT_DED_I          --101.투자조합출자등소득공제
             , C.CARD_DED_I                                                                                     AS CARD_DED_I                --102.신용카드등소득공제
             , C.STAFF_STOCK_DED_I                                                                              AS STAFF_STOCK_DED_I         --103.우리사주조합소득공제
             , C.EMPLOY_WORKER_DED_I                                                                            AS EMPLOY_WORKER_DED_I       --104.고용유지중소기업근로자소득금액
             , C.LONG_INVEST_STOCK_DED_I                                                                        AS LONG_INVEST_STOCK_DED_I   --105.장기집합투자증권저축
             , C.PRIV_PENS_I         + C.COMP_PREMINUM_DED_I
             + ABS(C.HOUS_BU_AMT)    + ABS(C.HOUS_BU_AMOUNT_I) + ABS(C.HOUS_BU_ADD_AMT) + ABS(C.HOUS_BU_AMOUNT_ADD_I) + ABS(C.HOUS_WORK_AMT)
             + C.INVESTMENT_DED_I
             + C.CARD_DED_I
             + C.STAFF_STOCK_DED_I   + C.EMPLOY_WORKER_DED_I   + C.LONG_INVEST_STOCK_DED_I                      AS ETC_DED_I                 --108.그밖의소득공제계
             , C.OVER_INCOME_DED_LMT                                                                            AS OVER_INCOME_DED_LMT       --109.특별공제종합한도초과액
             , C.TAX_STD_I                                                                                      AS TAX_STD_I                 --110.종합소득과세표준
             , C.COMP_TAX_I                                                                                     AS COMP_TAX_I                --111.산출세액
    
              --[세액감면]
             , ISNULL(C.INCOME_REDU_I,0)                                                                        AS INCOME_REDU_I             --112.소득세법
             , ISNULL(C.SKILL_DED_I,0) + ISNULL(C.MANAGE_RESULT_REDU_I,0) + ISNULL(C.CORE_COMPEN_FUND_REDU_I,0) AS SKILL_DED_I               --113.조특법
             , ISNULL(C.YOUTH_DED_I,0)                                                                          AS YOUTH_DED_I               --114.조특법 제30조
             , ISNULL(C.TAXES_REDU_I,0)                                                                         AS TAXES_REDU_I              --115.조세조약
             , ISNULL(C.INCOME_REDU_I,0) + ISNULL(C.SKILL_DED_I,0) + ISNULL(C.MANAGE_RESULT_REDU_I,0)
             + ISNULL(C.CORE_COMPEN_FUND_REDU_I,0) + ISNULL(C.YOUTH_DED_I,0) + ISNULL(C.TAXES_REDU_I,0)         AS REDU_TAX_SUM_I            --118.세액감면계
    
              --[세액공제]
             , C.IN_TAX_DED_I                                                                                   AS IN_TAX_DED_I              --119.근로소득세액공제
	         , C.MANY_CHILD_NUM                                                                                 AS MANY_CHILD_NUM            --120-A.자녀세액공제인원
	         , C.CHILD_TAX_DED_I                                                                                AS CHILD_TAX_DED_I           --120-B.자녀세액공제
	         , C.BIRTH_ADOPT_NUM                                                                                AS BIRTH_ADOPT_NUM           --121-A.출산입양세액공제인원
	         , C.BIRTH_ADOPT_I                                                                                  AS BIRTH_ADOPT_I             --121-B.출산입양세액공제
	         , C.SCI_DEDUC_I                                                                                    AS SCI_DEDUC_I               --122-A.과학기술인공제대상
	         , C.SCI_TAX_DED_I    + C.SCI_TAX_DED_I1                                                            AS SCI_TAX_DED_I             --122-B.과학기술인세액공제
	         , C.RETIRE_PENS_I                                                                                  AS RETIRE_PENS_I             --123-A.근로자퇴직급여공제대상
	         , C.RETIRE_TAX_DED_I + C.RETIRE_TAX_DED_I1                                                         AS RETIRE_TAX_DED_I          --123-B.근로자퇴직급여세액공제
	         , C.PENS_I                                                                                         AS PENS_I                    --124-A.연금저축공제대상
	         , C.PENS_TAX_DED_I   + C.PENS_TAX_DED_I1                                                           AS PENS_TAX_DED_I            --124-B.연금저축세액공제
	         , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE C.ETC_INSUR_I END                                      AS ETC_INSUR_I               --125-A.특별세액공제-보장성보험공제대상
	         , C.ETC_INSUR_TAX_DED_I                                                                            AS ETC_INSUR_TAX_DED_I       --125-B.특별세액공제-보장성보험세액공제
	         , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE C.DEFORM_INSUR_I END                                   AS DEFORM_INSUR_I            --126-A.특별세액공제-장애인전용보험료_공제대상
	         , C.DEFORM_INSUR_TAX_DED_I                                                                         AS DEFORM_INSUR_TAX_DED_I    --126-B.특별세액공제-장애인전용보험료_세액공제액
	         , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE C.MED_DED_I END                                     AS MED_DED_I                 --127-A.특별세액공제-의료비공제대상(실손보험금제외)
	         , C.MED_TAX_DED_I                                                                                  AS MED_TAX_DED_I             --127-B.특별세액공제-의료비세액공제
	         , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE C.EDUC_DED_I END                                       AS EDUC_DED_I                --128-A.특별세액공제-교육비공제대상
	         , C.EDUC_TAX_DED_I                                                                                 AS EDUC_TAX_DED_I            --128-B.특별세액공제-교육비세액공제
	         , CASE WHEN C.POLICY_INDED_TAX_DED_I = 0 THEN 0 ELSE C.POLICY_INDED_DED_AMT END                    AS POLICY_INDED_DED_AMT      --129-A.특별세액공제-정치자금10만원이하공제대상
	         , C.POLICY_INDED_TAX_DED_I                                                                         AS POLICY_INDED_TAX_DED_I    --129-B.특별세액공제-정치자금10만원이하세액공제
	         , CASE WHEN C.POLICY_GIFT_TAX_DED_I  = 0 THEN 0 ELSE C.POLICY_GIFT_DED_AMT  END                    AS POLICY_GIFT_DED_AMT       --130-A.특별세액공제-정치자금10만원초과공제대상
	         , C.POLICY_GIFT_TAX_DED_I                                                                          AS POLICY_GIFT_TAX_DED_I     --130-B.특별세액공제-정치자금10만원초과세액공제
	         , CASE WHEN C.LEGAL_GIFT_TAX_DED_I   = 0 THEN 0 ELSE C.LEGAL_DED_AMT        END                    AS LEGAL_DED_AMT             --131-A.특별세액공제-법정기부금공제대상
	         , C.LEGAL_GIFT_TAX_DED_I                                                                           AS LEGAL_GIFT_TAX_DED_I      --131-B.특별세액공제-법정기부금세액공제
	         , CASE WHEN C.STAFF_GIFT_TAX_DED_I   = 0 THEN 0 ELSE C.STAFF_DED_AMT        END                    AS STAFF_DED_AMT             --132-A.특별세액공제-우리사주조합기부금공제대상
	         , C.STAFF_GIFT_TAX_DED_I                                                                           AS STAFF_GIFT_TAX_DED_I      --132-B.특별세액공제-우리사주조합기부금세액공제
             , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE CASE WHEN C.APPOINT_GIFT_TAX_DED_I = 0
                                                              THEN 0
                                                              ELSE CASE WHEN C.APPOINT_GIFT_I_PREV_14 + C.APPOINT_GIFT_I &gt;= C.APPOINT_ASS_TAX_DED_AMT
                                                                        THEN C.APPOINT_ASS_TAX_DED_AMT
                                                                        ELSE C.APPOINT_GIFT_I_PREV_14 + C.APPOINT_GIFT_I
                                                                    END
                                                          END
               END                                                                                              AS APPOINT_DED_AMT           --133-A.특별세액공제-지정기부금종교단체외공제대상
             , C.APPOINT_GIFT_TAX_DED_I                                                                         AS APPOINT_TAX_DED_I         --133-B.특별세액공제-지정기부금종교단체외세액공제
             , CASE WHEN C.STD_TAX_DED_I &gt; 0 THEN 0 ELSE CASE WHEN C.ASS_GIFT_TAX_DED_I = 0
                                                              THEN 0
                                                              ELSE CASE WHEN C.APPOINT_GIFT_I_PREV_14 + C.APPOINT_GIFT_I &gt;= C.APPOINT_ASS_TAX_DED_AMT 
                                                                        THEN 0
                                                                        ELSE C.APPOINT_ASS_TAX_DED_AMT - (C.APPOINT_GIFT_I_PREV_14 + C.APPOINT_GIFT_I)
                                                                    END
                                                         END
               END                                                                                              AS ASS_DED_AMT               --134-A.특별세액공제-지정기부금종교단체공제대상
             , C.ASS_GIFT_TAX_DED_I                                                                             AS ASS_TAX_DED_I             --134-B.특별세액공제-지정기부금세액공제

             , C.ETC_INSUR_TAX_DED_I + C.DEFORM_INSUR_TAX_DED_I
             + C.MED_TAX_DED_I
             + C.EDUC_TAX_DED_I
             + C.POLICY_INDED_TAX_DED_I
             + C.POLICY_GIFT_TAX_DED_I
             + C.LEGAL_GIFT_TAX_DED_I
             + C.STAFF_GIFT_TAX_DED_I
             + C.APPOINT_GIFT_TAX_DED_I + C.ASS_GIFT_TAX_DED_I                                                  AS SPECIAL_TAX_DED_I         --137.특별세액공제계
             , C.STD_TAX_DED_I                                                                                  AS STD_TAX_DED_I             --138.표준세액공제
             , C.NAP_TAX_DED_I                                                                                  AS NAP_TAX_DED_I             --139.납세조합공제
             , C.HOUS_INTER_I                                                                                   AS HOUS_INTER_I              --140.주택차입금
             , C.OUTSIDE_INCOME_I                                                                               AS OUTSIDE_INCOME_I          --141.외국납부
             , (CASE WHEN C.MON_RENT_I = 0 THEN 0 ELSE ISNULL(F.MON_RENT_I,0) END)                              AS MON_RENT_I                --142-A.월세액공제대상
             , C.MON_RENT_I                                                                                     AS MON_RENT_TAX_DED_I        --142-B.월세세액공제
             , C.IN_TAX_DED_I
             + C.CHILD_TAX_DED_I  + C.BIRTH_ADOPT_I
             + C.SCI_TAX_DED_I    + C.SCI_TAX_DED_I1
             + C.RETIRE_TAX_DED_I + C.RETIRE_TAX_DED_I1
             + C.PENS_TAX_DED_I   + C.PENS_TAX_DED_I1
             + C.ETC_INSUR_TAX_DED_I + C.DEFORM_INSUR_TAX_DED_I
             + C.MED_TAX_DED_I
             + C.EDUC_TAX_DED_I
             + C.POLICY_INDED_TAX_DED_I
             + C.POLICY_GIFT_TAX_DED_I
             + C.LEGAL_GIFT_TAX_DED_I
             + C.STAFF_GIFT_TAX_DED_I
             + C.APPOINT_GIFT_TAX_DED_I + C.ASS_GIFT_TAX_DED_I
             + C.STD_TAX_DED_I
             + C.NAP_TAX_DED_I
             + C.HOUS_INTER_I
             + C.OUTSIDE_INCOME_I
             + C.MON_RENT_I                                                                                     AS TAX_DED_SUM_I             --145.세액공제계
    
              --[결정세액]
             , C.DEF_IN_TAX_I                                                                                   AS DEF_IN_TAX_I              --146-A.소득세
             , C.DEF_LOCAL_TAX_I                                                                                AS DEF_LOCAL_TAX_I           --146-B.지방소득세
             , C.DEF_SP_TAX_I                                                                                   AS DEF_SP_TAX_I              --146-C.농특세
    
              --[기납부세액-주(현)근무지]
             , C.NOW_IN_TAX_I                                                                                   AS NOW_IN_TAX_I              --147-A.소득세
             , C.NOW_LOCAL_TAX_I                                                                                AS NOW_LOCAL_TAX_I           --147-B.지방소득세
             , C.NOW_SP_TAX_I                                                                                   AS NOW_SP_TAX_I              --147-C.농특세
    
              --[납부특례세액]
             , 0                                                                                                AS SPEC_IN_TAX_I             --148-A.소득세
             , 0                                                                                                AS SPEC_LOCAL_TAX_I          --148-B.지방소득세
             , 0                                                                                                AS SPEC_SP_TAX_I             --148-C.농특세
    
              --[차감징수세액]
             , CASE WHEN C.IN_TAX_I    &lt; 0  THEN '1' ELSE '0' END                                               AS IN_TAX_TYPE               --149-A.소득세타입
             , ABS(C.IN_TAX_I)                                                                                  AS IN_TAX_I                  --149-A.소득세
             , CASE WHEN C.LOCAL_TAX_I &lt; 0  THEN '1' ELSE '0' END                                               AS LOCAL_TAX_TYPE            --149-B.지방소득세타입
             , ABS(C.LOCAL_TAX_I)                                                                               AS LOCAL_TAX_I               --149-B.지방소득세
             , CASE WHEN C.SP_TAX_I    &lt; 0  THEN '1' ELSE '0' END                                               AS SP_TAX_TYPE               --149-C.농특세타입
             , ABS(C.SP_TAX_I)                                                                                  AS SP_TAX_I                  --149-C.농특세
             , CONVERT(CHAR(248),'')                                                                             AS C_SPACE                   --150.공란
        FROM              HUM100T   A WITH (NOLOCK)
               INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.DIV_CODE    = A.SECT_CODE
               INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                   AND C.PERSON_NUMB = A.PERSON_NUMB
               LEFT  JOIN (SELECT COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , P1_COMPANY_NUM
                                , P2_COMPANY_NUM
                           FROM   HAD500T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                          )         D               ON D.COMP_CODE   = C.COMP_CODE
                                                   AND D.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND D.PERSON_NUMB = C.PERSON_NUMB
                LEFT  JOIN (SELECT  COMP_CODE
			                      , YEAR_YYYY
			                      , PERSON_NUMB
			                      , SUM(REAL_LOSS_MED_INSUR_I) AS REAL_LOSS_MED_INSUR_I
			                 FROM   HAD430T WITH (NOLOCK)
			                 WHERE  COMP_CODE = @COMP_CODE
			                 AND    YEAR_YYYY = @CAL_YYYY
			                 GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
			                )         E             ON E.COMP_CODE   = C.COMP_CODE
			                                       AND E.YEAR_YYYY   = C.YEAR_YYYY
			                                       AND E.PERSON_NUMB = C.PERSON_NUMB
               LEFT  JOIN (SELECT COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , NONTAX_FR
                                , NONTAX_TO
                                , P3_COMPANY_NUM
                                , FORE_SINGLE_YN
                                , FOREIGN_DISPATCH_YN
                                , (CASE WHEN INCOME_SUPP_TOTAL_I &gt; 70000000
                                        THEN 0
                                        ELSE (CASE WHEN 7500000 &gt; MON_RENT_I
                                                   THEN MON_RENT_I
                                                   ELSE 7500000
                                               END)
                                    END) AS MON_RENT_I
                                , (ANU_I + ANU_ADD_I)   AS ANU_I
	                            , PUBLIC_PENS_I
	                            , SOLDIER_PENS_I
	                            , SCH_PENS_I
	                            , POST_PENS_I
	                            , ISNULL(MED_PREMINM_I,0) + ISNULL(MED_PREMINM_ADD_I, 0)   AS MED_PREMINM_I
	                            , ISNULL(HIRE_INSUR_I, 0) + ISNULL(HIRE_INSUR_ADD_I, 0)    AS HIRE_INSUR_I
                           FROM   HAD400T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                          )         F               ON F.COMP_CODE   = C.COMP_CODE
                                                   AND F.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND F.PERSON_NUMB = C.PERSON_NUMB
               LEFT  JOIN (SELECT COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , SUM(CASE NONTAX_CODE WHEN 'G01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS G01_I
                                , SUM(CASE NONTAX_CODE WHEN 'H01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H01_I
                                , SUM(CASE NONTAX_CODE WHEN 'H05' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H05_I
                                , SUM(CASE NONTAX_CODE WHEN 'H06' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H06_I
                                , SUM(CASE NONTAX_CODE WHEN 'H07' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H07_I
                                , SUM(CASE NONTAX_CODE WHEN 'H08' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H08_I
                                , SUM(CASE NONTAX_CODE WHEN 'H09' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H09_I
                                , SUM(CASE NONTAX_CODE WHEN 'H10' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H10_I
                                , SUM(CASE NONTAX_CODE WHEN 'H14' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H14_I
                                , SUM(CASE NONTAX_CODE WHEN 'H15' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H15_I
                                , SUM(CASE NONTAX_CODE WHEN 'H11' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H11_I
                                , SUM(CASE NONTAX_CODE WHEN 'H12' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H12_I
                                , SUM(CASE NONTAX_CODE WHEN 'H13' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H13_I
                                , SUM(CASE NONTAX_CODE WHEN 'H16' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H16_I
                                , SUM(CASE NONTAX_CODE WHEN 'H17' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS H17_I
                                , SUM(CASE NONTAX_CODE WHEN 'I01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS I01_I
                                , SUM(CASE NONTAX_CODE WHEN 'K01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS K01_I
                                , SUM(CASE NONTAX_CODE WHEN 'M01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS M01_I
                                , SUM(CASE NONTAX_CODE WHEN 'M02' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS M02_I
                                , SUM(CASE NONTAX_CODE WHEN 'M03' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS M03_I
                                , SUM(CASE NONTAX_CODE WHEN 'O01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS O01_I
                                , SUM(CASE NONTAX_CODE WHEN 'Q01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Q01_I
                                , SUM(CASE NONTAX_CODE WHEN 'R10' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS R10_I
                                , SUM(CASE NONTAX_CODE WHEN 'R11' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS R11_I
                                , SUM(CASE NONTAX_CODE WHEN 'S01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS S01_I
                                , SUM(CASE NONTAX_CODE WHEN 'U01' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS U01_I
                                , SUM(CASE NONTAX_CODE WHEN 'Y02' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Y02_I
                                , SUM(CASE NONTAX_CODE WHEN 'Y03' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Y03_I
                                , SUM(CASE NONTAX_CODE WHEN 'Y04' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Y04_I
                                , SUM(CASE NONTAX_CODE WHEN 'Y21' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Y21_I
                                , 0                                                                     AS Z01_I                                       
                                , SUM(CASE NONTAX_CODE WHEN 'Y22' THEN NON_TAX_EMPTION_I ELSE 0 END)    AS Y22_I
                                , SUM(CASE WHEN NONTAX_CODE IN ('G01','H01','H05','H06','H07','H08','H09','H10','H14','H15','H11','H12','H13','H16','H17'
                                                               ,'I01','K01','M01','M02','M03','O01','Q01','R10','R11','S01','U01','Y02','Y03','Y04','Y21','Y22')         
                                           THEN NON_TAX_EMPTION_I
                                           ELSE 0
                                      END)                                                              AS NON_TAX_TOTAL
                           FROM   HAD610T WITH (NOLOCK)
                           WHERE  COMP_CODE  = @COMP_CODE
                           AND    YEAR_YYYY  = @CAL_YYYY
                           AND    ISNULL(NON_TAX_EMPTION_I   , 0) != 0
    --                     AND    ISNULL(P1_NON_TAX_EMPTION_I, 0)  = 0          --2012.02.21 YJY 조건오류 : 종전1에 값이 있을 수 있다.
    --                     AND    ISNULL(P2_NON_TAX_EMPTION_I, 0)  = 0          --2012.02.21 YJY 조건오류 : 종전2에 값이 있을 수 있다.
                           GROUP  BY PERSON_NUMB, YEAR_YYYY, COMP_CODE
                          )         H               ON H.COMP_CODE   = C.COMP_CODE
                                                   AND H.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND H.PERSON_NUMB = C.PERSON_NUMB
               LEFT  JOIN ( SELECT COMP_CODE
                                 , PERSON_NUMB
                                 , YEAR_YYYY
                                 , SUM(ISNULL(POLICY_GIFT_I,0))  AS POLICY_GIFT_I
                                 , SUM(ISNULL(LEGAL_GIFT_I,0))   AS LEGAL_GIFT_I
                                 , SUM(ISNULL(PRIV_GIFT_I,0))    AS PRIV_GIFT_I
                                 , SUM(ISNULL(PUBLIC_GIFT_I,0))  AS PUBLIC_GIFT_I
                                 , SUM(ISNULL(STAFF_GIFT_I,0))   AS STAFF_GIFT_I
                                 , SUM(ISNULL(APPOINT_GIFT_I,0)) AS APPOINT_GIFT_I
                                 , SUM(ISNULL(ASS_GIFT_I,0))     AS ASS_GIFT_I
                              FROM 
                                    (
                                        SELECT COMP_CODE
                                             , PERSON_NUMB
                                             , YEAR_YYYY  
                                             , CASE WHEN GIFT_CODE = '20' THEN SUM(PRP_DDUC_I) ELSE 0 END AS POLICY_GIFT_I 
                                             , CASE WHEN GIFT_CODE = '10' THEN SUM(PRP_DDUC_I) ELSE 0 END AS LEGAL_GIFT_I
                                             , CASE WHEN GIFT_CODE = '30' THEN SUM(PRP_DDUC_I) ELSE 0 END AS PRIV_GIFT_I
                                             , CASE WHEN GIFT_CODE = '31' THEN SUM(PRP_DDUC_I) ELSE 0 END AS PUBLIC_GIFT_I
                                             , CASE WHEN GIFT_CODE = '42' THEN SUM(PRP_DDUC_I) ELSE 0 END AS STAFF_GIFT_I
                                             , CASE WHEN GIFT_CODE = '40' THEN SUM(PRP_DDUC_I) ELSE 0 END AS APPOINT_GIFT_I
                                             , CASE WHEN GIFT_CODE = '41' THEN SUM(PRP_DDUC_I) ELSE 0 END AS ASS_GIFT_I
                                          FROM HAD421T
                                         WHERE COMP_CODE = @COMP_CODE
                                           AND YEAR_YYYY = @CAL_YYYY
                                         GROUP BY COMP_CODE, PERSON_NUMB, YEAR_YYYY, GIFT_CODE
                                     ) AS A
                             GROUP BY COMP_CODE, PERSON_NUMB, YEAR_YYYY
                           )      AS K                 ON K.COMP_CODE      = C.COMP_CODE
                                                      AND K.PERSON_NUMB    = C.PERSON_NUMB
                                                      AND K.YEAR_YYYY      = C.YEAR_YYYY
   			   LEFT  JOIN (SELECT COMP_CODE
			                    , YEAR_YYYY
			                    , PERSON_NUMB
			                    , SUM(ISNULL(P1_NON_TAX_EMPTION_I, 0))    AS P1_YOUTH_SUM
								, SUM(ISNULL(P2_NON_TAX_EMPTION_I, 0))    AS P2_YOUTH_SUM                                                                                    
			               FROM   HAD610T WITH (NOLOCK)
			               WHERE  COMP_CODE  = @COMP_CODE
			               AND    YEAR_YYYY  = @CAL_YYYY
						   AND    NONTAX_CODE IN ('T11','T12','T13')                
			               GROUP  BY PERSON_NUMB, YEAR_YYYY, COMP_CODE
			              )         M               ON M.COMP_CODE   = C.COMP_CODE
			                                       AND M.YEAR_YYYY   = C.YEAR_YYYY
			                                       AND M.PERSON_NUMB = C.PERSON_NUMB

               INNER JOIN ABA100T   L WITH (NOLOCK) ON C.COMP_CODE   = L.COMP_CODE

        WHERE  A.COMP_CODE     = @COMP_CODE
        AND    A.SECT_CODE     = @DIV_CODE
        AND    C.YEAR_YYYY     = @CAL_YYYY
        AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
        AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))
        ORDER BY  A.SECT_CODE,C.PERSON_NUMB
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectD" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query04
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (D 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT A.SECT_CODE
             , D.PERSON_NUMB
             , CONVERT(CHAR(03), SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))                                                       AS SAFFER
             , CONVERT(CHAR(10), B.COMPANY_NUM)                                                                                                 AS COMPANY_NUM
             , unilite.fnCipherDecrypt(A.REPRE_NUM, '') AS REPRE_NUM
             , CONVERT(CHAR(01), D.P_GUBUN)                                                                                                     AS P_GUBUN
             , CONVERT(CHAR(60), D.P_COMPANY_NAME)                                                                                              AS P_COMPANY_NAME
             , REPLACE(D.P_COMPANY_NUM, '-', '')                                                                                                AS P_COMPANY_NUM
             , CASE WHEN SUBSTRING(ISNULL(D.P_WORKDATE_FR, ''), 1, 4) = @CAL_YYYY THEN ISNULL(D.P_WORKDATE_FR, 0) ELSE @CAL_YYYY + '0101' END   AS STRT_DATE
             , CASE WHEN SUBSTRING(ISNULL(D.P_WORKDATE_TO, ''), 1, 4) = @CAL_YYYY THEN ISNULL(D.P_WORKDATE_TO, 0) ELSE @CAL_YYYY + '1231' END   AS END_DATE
             , ISNULL(D.P_NONTAX_FR, 0)                                                                                                         AS P_NONTAX_FR
             , ISNULL(D.P_NONTAX_TO, 0)                                                                                                         AS P_NONTAX_TO
             , D.P_PAY_TOTAL_I
             , D.P_BONUS_I_TOTAL_I
             , D.P_ADD_BONUS_I
             , D.P_STOCK_BUY_PROFIT_I 
             , D.P_OWNER_STOCK_DRAW_I
             , D.P_OF_RETR_OVER_I
             , D.P_TAX_INVENTION_I
	         , (D.P_PAY_TOTAL_I        + D.P_BONUS_I_TOTAL_I + D.P_ADD_BONUS_I     + D.P_STOCK_BUY_PROFIT_I + 
	            D.P_OWNER_STOCK_DRAW_I + D.P_OF_RETR_OVER_I  + D.P_TAX_INVENTION_I)                                                             AS TOTAL_I
             , ISNULL(E.G01_I, 0)                                                                                                               AS G01_I
             , ISNULL(E.H01_I, 0)                                                                                                               AS H01_I
             , ISNULL(E.H05_I, 0)                                                                                                               AS H05_I
             , ISNULL(E.H06_I, 0)                                                                                                               AS H06_I
             , ISNULL(E.H07_I, 0)                                                                                                               AS H07_I
             , ISNULL(E.H08_I, 0)                                                                                                               AS H08_I
             , ISNULL(E.H09_I, 0)                                                                                                               AS H09_I
             , ISNULL(E.H10_I, 0)                                                                                                               AS H10_I
             , ISNULL(E.H14_I, 0)                                                                                                               AS H14_I
             , ISNULL(E.H15_I, 0)                                                                                                               AS H15_I
             , ISNULL(E.H11_I, 0)                                                                                                               AS H11_I
             , ISNULL(E.H12_I, 0)                                                                                                               AS H12_I
             , ISNULL(E.H13_I, 0)                                                                                                               AS H13_I
             , ISNULL(E.H16_I, 0)                                                                                                               AS H16_I
             , ISNULL(E.H17_I, 0)                                                                                                               AS H17_I
             , ISNULL(E.I01_I, 0)                                                                                                               AS I01_I
             , ISNULL(E.K01_I, 0)                                                                                                               AS K01_I
             , ISNULL(E.M01_I, 0)                                                                                                               AS M01_I
             , ISNULL(E.M02_I, 0)                                                                                                               AS M02_I
             , ISNULL(E.M03_I, 0)                                                                                                               AS M03_I
             , ISNULL(E.O01_I, 0)                                                                                                               AS O01_I
             , ISNULL(E.Q01_I, 0)                                                                                                               AS Q01_I
             , ISNULL(E.R10_I, 0)                                                                                                               AS R10_I
             , ISNULL(E.R11_I, 0)                                                                                                               AS R11_I
             , ISNULL(E.S01_I, 0)                                                                                                               AS S01_I
             , ISNULL(E.U01_I, 0)                                                                                                               AS U01_I
             , ISNULL(E.Y02_I, 0)                                                                                                               AS Y02_I
             , ISNULL(E.Y03_I, 0)                                                                                                               AS Y03_I
             , ISNULL(E.Y04_I, 0)                                                                                                               AS Y04_I
             , ISNULL(E.Y21_I, 0)                                                                                                               AS Y21_I
             , ISNULL(E.Y22_I, 0)                                                                                                               AS Y22_I
             , ISNULL(E.T01_I, 0)                                                                                                               AS T01_I
             , ISNULL(E.T30_I, 0)                                                                                                               AS T30_I
             , ISNULL(E.T40_I, 0)                                                                                                               AS T40_I
             , ISNULL(E.T11_I, 0)                                                                                                               AS T11_I
             , ISNULL(E.T12_I, 0)                                                                                                               AS T12_I
             , ISNULL(E.T13_I, 0)                                                                                                               AS T13_I
             , ISNULL(E.T20_I, 0)                                                                                                               AS T20_I
             , ISNULL(E.NON_TAX_TOTAL    , 0 )                                                                                                  AS NON_TAX_TOTAL
             , ISNULL(E.NON_TAX_REDU_TOTAL, 0 )                                                                                                 AS NON_TAX_REDU_TOTAL
             , D.P_IN_TAX_I
             , D.P_LOCAL_TAX_I
             , D.P_SP_TAX_I
             , D.P_TAX_TOTAL
             , CONVERT(CHAR(1412)        , '')                                                                                                  AS D_SPACE 
        FROM              HUM100T   A WITH (NOLOCK)
               INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.DIV_CODE    = A.SECT_CODE
               INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                   AND C.PERSON_NUMB = A.PERSON_NUMB

               INNER JOIN (--종전근무지1
                           SELECT '1'                                                                                           AS P_TYPE
                           		, '2'                                                                                           AS P_GUBUN
                                , COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , MAX(ISNULL(P1_COMPANY_NAME      , ''))                                                        AS P_COMPANY_NAME
                                , MAX(ISNULL(P1_COMPANY_NUM       , ''))                                                        AS P_COMPANY_NUM
                                , MAX(ISNULL(P1_WORKDATE_FR       , ''))                                                        AS P_WORKDATE_FR
                                , MAX(ISNULL(P1_WORKDATE_TO       , ''))                                                        AS P_WORKDATE_TO
                                , MAX(ISNULL(P1_NONTAX_FR         , ''))                                                        AS P_NONTAX_FR
                                , MAX(ISNULL(P1_NONTAX_TO         , ''))                                                        AS P_NONTAX_TO
                                , SUM(ISNULL(P1_PAY_TOTAL_I       , 0 ))                                                        AS P_PAY_TOTAL_I
                                , SUM(ISNULL(P1_BONUS_I_TOTAL_I   , 0 ))                                                        AS P_BONUS_I_TOTAL_I
                                , SUM(ISNULL(P1_ADD_BONUS_I       , 0 ))                                                        AS P_ADD_BONUS_I
                                , SUM(ISNULL(P1_STOCK_BUY_PROFIT_I, 0 ))                                                        AS P_STOCK_BUY_PROFIT_I
                                , SUM(ISNULL(P1_OWNER_STOCK_DRAW_I, 0 ))                                                        AS P_OWNER_STOCK_DRAW_I
                                , SUM(ISNULL(P1_OF_RETR_OVER_I    , 0 ))                                                        AS P_OF_RETR_OVER_I
                                , SUM(ISNULL(P1_TAX_INVENTION_I   , 0 ))                                                        AS P_TAX_INVENTION_I
                                , SUM(ISNULL(P1_IN_TAX_I          , 0 ))                                                        AS P_IN_TAX_I
                                , SUM(ISNULL(P1_LOCAL_TAX_I       , 0 ))                                                        AS P_LOCAL_TAX_I
                                , SUM(ISNULL(P1_SP_TAX_I          , 0 ))                                                        AS P_SP_TAX_I
                                , SUM(ISNULL(P1_IN_TAX_I          , 0 ) + ISNULL(P1_LOCAL_TAX_I, 0) + ISNULL(P1_SP_TAX_I, 0))   AS P_TAX_TOTAL
                           FROM   HAD500T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                           GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
    
                           UNION  ALL
    
                           --종전근무지2
                           SELECT '2'                                                                                           AS P_TYPE
                           		, '2'                                                                                           AS P_GUBUN
                                , COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , MAX(ISNULL(P2_COMPANY_NAME      , ''))                                                        AS P_COMPANY_NAME
                                , MAX(ISNULL(P2_COMPANY_NUM       , ''))                                                        AS P_COMPANY_NUM
                                , MAX(ISNULL(P2_WORKDATE_FR       , ''))                                                        AS P_WORKDATE_FR
                                , MAX(ISNULL(P2_WORKDATE_TO       , ''))                                                        AS P_WORKDATE_TO
                                , MAX(ISNULL(P2_NONTAX_FR         , ''))                                                        AS P_NONTAX_FR
                                , MAX(ISNULL(P2_NONTAX_TO         , ''))                                                        AS P_NONTAX_TO
                                , SUM(ISNULL(P2_PAY_TOTAL_I       , 0 ))                                                        AS P_PAY_TOTAL_I
                                , SUM(ISNULL(P2_BONUS_I_TOTAL_I   , 0 ))                                                        AS P_BONUS_I_TOTAL_I
                                , SUM(ISNULL(P2_ADD_BONUS_I       , 0 ))                                                        AS P_ADD_BONUS_I
                                , SUM(ISNULL(P2_STOCK_BUY_PROFIT_I, 0 ))                                                        AS P_STOCK_BUY_PROFIT_I
                                , SUM(ISNULL(P2_OWNER_STOCK_DRAW_I, 0 ))                                                        AS P_OWNER_STOCK_DRAW_I
                                , SUM(ISNULL(P2_OF_RETR_OVER_I    , 0 ))                                                        AS P_OF_RETR_OVER_I
                                , SUM(ISNULL(P2_TAX_INVENTION_I   , 0 ))                                                        AS P_TAX_INVENTION_I
                                , SUM(ISNULL(P2_IN_TAX_I          , 0 ))                                                        AS P_IN_TAX_I
                                , SUM(ISNULL(P2_LOCAL_TAX_I       , 0 ))                                                        AS P_LOCAL_TAX_I
                                , SUM(ISNULL(P2_SP_TAX_I          , 0 ))                                                        AS P_SP_TAX_I
                                , SUM(ISNULL(P2_IN_TAX_I          , 0 ) + ISNULL(P2_LOCAL_TAX_I, 0) + ISNULL(P2_SP_TAX_I, 0))   AS P_TAX_TOTAL
                           FROM   HAD500T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                           GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
    
                           UNION  ALL
    
                           --납세조합
                           SELECT '3'                                                                                           AS P_TYPE
                           		, '1'                                                                                           AS P_GUBUN
                                , COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , MAX(ISNULL(P3_COMPANY_NAME      , ''))                                                        AS P_COMPANY_NAME
                                , MAX(ISNULL(P3_COMPANY_NUM       , ''))                                                        AS P_COMPANY_NUM
                                , MAX(ISNULL(P3_WORKDATE_FR       , ''))                                                        AS P_WORKDATE_FR
                                , MAX(ISNULL(P3_WORKDATE_TO       , ''))                                                        AS P_WORKDATE_TO
                                , MAX(ISNULL(P3_NONTAX_FR         , ''))                                                        AS P_NONTAX_FR
                                , MAX(ISNULL(P3_NONTAX_TO         , ''))                                                        AS P_NONTAX_TO
                                , SUM(ISNULL(P3_PAY_TOTAL_I       , 0 ))                                                        AS P_PAY_TOTAL_I
                                , SUM(ISNULL(P3_BONUS_I_TOTAL_I   , 0 ))                                                        AS P_BONUS_I_TOTAL_I
                                , 0										                                                        AS P_ADD_BONUS_I
                                , 0										                                                        AS P_STOCK_BUY_PROFIT_I
                                , 0										                                                        AS P_OWNER_STOCK_DRAW_I
                                , 0										                                                        AS P_OF_RETR_OVER_I
                                , 0                                                                                             AS P_TAX_INVENTION_I																							
                                , SUM(ISNULL(P3_IN_TAX_I          , 0 ))                                                        AS P_IN_TAX_I
                                , SUM(ISNULL(P3_LOCAL_TAX_I       , 0 ))                                                        AS P_LOCAL_TAX_I
                                , SUM(ISNULL(P3_SP_TAX_I          , 0 ))                                                        AS P_SP_TAX_I
                                , SUM(ISNULL(P3_IN_TAX_I          , 0 ) + ISNULL(P3_LOCAL_TAX_I, 0) + ISNULL(P3_SP_TAX_I, 0))   AS P_TAX_TOTAL
                           FROM   HAD400T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                           AND    ISNULL(NULLIF(P3_COMPANY_NUM, '0'), '') != ''
                           GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
                          )         D               ON D.COMP_CODE   = C.COMP_CODE
                                                   AND D.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND D.PERSON_NUMB = C.PERSON_NUMB
             LEFT  JOIN (SELECT '1'                                                                AS P_TYPE
                                , COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , SUM(CASE WHEN NONTAX_CODE = 'G01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS G01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H05' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H05_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H06' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H06_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H07' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H07_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H08' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H08_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H09' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H09_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H10' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H10_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H14' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H14_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H15' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H15_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H11' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H12' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H12_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H13' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H13_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H16' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H16_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H17' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS H17_I
                                , SUM(CASE WHEN NONTAX_CODE = 'I01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS I01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'K01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS K01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS M01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M02' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS M02_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M03' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS M03_I
                                , SUM(CASE WHEN NONTAX_CODE = 'O01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS O01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Q01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Q01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'R10' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS R10_I
                                , SUM(CASE WHEN NONTAX_CODE = 'R11' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS R11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'S01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS S01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'U01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS U01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y02' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Y02_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y03' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Y03_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y04' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Y04_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y21' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Y21_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y22' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS Y22_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T01' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T30' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T30_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T40' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T40_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T11' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T12' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T12_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T13' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T13_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T20' THEN P1_NON_TAX_EMPTION_I ELSE 0 END) AS T20_I
                                , SUM(CASE WHEN NONTAX_CODE IN ('G01','H01','H05','H06','H07','H08','H09','H10','H14','H15','H11','H12','H13','H16','H17','I01','K01','M01','M02','M03','O01','Q01','R10','R11','S01','U01','Y02','Y03','Y04','Y21','Y22') 
                                           THEN P1_NON_TAX_EMPTION_I 
                                           ELSE 0
                                      END)                                                            AS NON_TAX_TOTAL
                                , SUM(CASE WHEN NONTAX_CODE IN ('T01','T30', 'T40', 'T11','T12','T13','T20')
                                           THEN P1_NON_TAX_EMPTION_I 
                                           ELSE 0
                                      END)                                                            AS NON_TAX_REDU_TOTAL
                           FROM   HAD610T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
                           GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
    
                           UNION ALL
    
                           SELECT '2'                                                                 AS P_TYPE
                                , COMP_CODE
                                , YEAR_YYYY
                                , PERSON_NUMB
                                , SUM(CASE WHEN NONTAX_CODE = 'G01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS G01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H05' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H05_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H06' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H06_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H07' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H07_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H08' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H08_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H09' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H09_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H10' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H10_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H14' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H14_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H15' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H15_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H11' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H12' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H12_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H13' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H13_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H16' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H16_I
                                , SUM(CASE WHEN NONTAX_CODE = 'H17' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS H17_I
                                , SUM(CASE WHEN NONTAX_CODE = 'I01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS I01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'K01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS K01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS M01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M02' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS M02_I
                                , SUM(CASE WHEN NONTAX_CODE = 'M03' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS M03_I
                                , SUM(CASE WHEN NONTAX_CODE = 'O01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS O01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Q01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Q01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'R10' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS R10_I
                                , SUM(CASE WHEN NONTAX_CODE = 'R11' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS R11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'S01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS S01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'U01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS U01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y02' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Y02_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y03' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Y03_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y04' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Y04_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y21' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Y21_I
                                , SUM(CASE WHEN NONTAX_CODE = 'Y22' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS Y22_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T01' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T01_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T30' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T30_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T40' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T40_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T11' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T11_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T12' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T12_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T13' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T13_I
                                , SUM(CASE WHEN NONTAX_CODE = 'T20' THEN P2_NON_TAX_EMPTION_I ELSE 0 END) AS T20_I
                                , SUM(CASE WHEN NONTAX_CODE IN ('G01','H01','H05','H06','H07','H08','H09','H10','H14','H15','H11','H12','H13','H16','H17','I01','K01','M01','M02','M03','O01','Q01','R10','R11','S01','U01','Y02','Y03','Y03','Y21','Y22') 
                                       THEN P2_NON_TAX_EMPTION_I
                                       ELSE 0
                                  END)                                                                 AS NON_TAX_TOTAL
                                , SUM(CASE WHEN NONTAX_CODE IN ('T01','T30','T40','T11','T12','T13','T20')
                                           THEN P2_NON_TAX_EMPTION_I
                                           ELSE 0
                                      END)                                                             AS NON_TAX_REDU_TOTAL
                           FROM   HAD610T WITH (NOLOCK)
                           WHERE  COMP_CODE = @COMP_CODE
                           AND    YEAR_YYYY = @CAL_YYYY
    --                     AND    ISNULL(NON_TAX_EMPTION_I, 0) = 0              --2012.02.21 YJY 조건오류 : 현근무지에 값이 있을 수 있다.
                           GROUP  BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
                          )         E               ON E.COMP_CODE   = C.COMP_CODE
                                                   AND E.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND E.PERSON_NUMB = C.PERSON_NUMB
                                                   AND E.P_TYPE      = D.P_TYPE
        WHERE  A.COMP_CODE       = @COMP_CODE
        AND    A.SECT_CODE       = @DIV_CODE
        AND    C.YEAR_YYYY       = @CAL_YYYY
        AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
        AND  ((C.HALFWAY_TYPE   != 'Y'      AND @CREATE_CODE     = 'N') OR (@CREATE_CODE != 'N'))
        AND    D.P_COMPANY_NUM  != ''
        ORDER BY D.PERSON_NUMB
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectE" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query05
    /*************************************************************************************************************
        갑종근로소득 정산신고자료 (E 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT T.SECT_CODE
             , T.PERSON_NUMB
             , T.SAFFER
             , T.COMPANY_NUM
             , T.REPRE_NUM
             , T.REL_CODE
             , T.IN_FORE  
             , T.FAMILY_NAME
             , T.FAMILY_REPRE_NUM 
             , CASE WHEN T.DEFAULT_DED_YN     = 'Y' THEN '1' ELSE '' END    AS DEFAULT_DED_YN
             , T.DEFORM_KIND_CODE                                           AS DEFORM_KIND_CODE
             , CASE WHEN T.BRING_CHILD_DED_YN = 'Y' THEN '1' ELSE '' END    AS BRING_CHILD_DED_YN
             , CASE WHEN T.WOMAN_DED_YN       = 'Y' THEN '1' ELSE '' END    AS WOMAN_DED_YN
             , CASE WHEN T.OLD_DED_YN         = 'Y' THEN '1' ELSE '' END    AS OLD_DED_YN
             , CASE WHEN T.BIRTH_ADOPT_DED_YN = 'Y' THEN '1' ELSE '' END    AS BIRTH_ADOPT_DED_YN
             , CASE WHEN T.ONE_PARENT_DED_YN  = 'Y' THEN '1' ELSE '' END    AS ONE_PARENT_DED_YN
             , CASE WHEN T.MANY_CHILD_DED_YN  = 'Y' THEN '1' ELSE '' END    AS MANY_CHILD_DED_YN
             , SUM(T.MED_PREMINM_I)                                         AS MED_PREMINM_I
             , SUM(T.HIRE_INSUR_I)                                          AS HIRE_INSUR_I
             , SUM(T.INSUR_USE_I)                                           AS INSUR_USE_I
             , SUM(T.DEFORM_USE_I)                                          AS DEFORM_USE_I
             , SUM(T.MED_USE_I)                                             AS MED_USE_I
             , SUM(T.SURGERY_MED_I)                                         AS SURGERY_MED_I
             , SUM(T.SERIOUS_SICK_MED_I)                                    AS SERIOUS_SICK_MED_I
             , SUM(T.REAL_LOSS_MED_INSUR_I )                                AS REAL_LOSS_MED_INSUR_I
             , SUM(T.EDU_USE_I)                                             AS EDU_USE_I
             , SUM(T.EDU_DEFORM_USE_I)                                      AS EDU_DEFORM_USE_I
             , SUM(T.CARD_USE_I)                                            AS CARD_USE_I
             , SUM(T.DEBIT_CARD_USE_I)                                      AS DEBIT_CARD_USE_I
             , SUM(T.CASH_USE_I)                                            AS CASH_USE_I
             , SUM(T.BOOK_CONCERT_USE_I)                                    AS BOOK_CONCERT_USE_I
             , SUM(T.TRA_MARKET_USE_I)                                      AS TRA_MARKET_USE_I
             , SUM(T.TRAFFIC_USE_I)                                         AS TRAFFIC_USE_I
             , SUM(T.GIFT_USE_I)                                            AS GIFT_USE_I
             , SUM(T.MED_PREMINM_I1)                                        AS MED_PREMINM_I1
             , SUM(T.HIRE_INSUR_I1)                                         AS HIRE_INSUR_I1
             , SUM(T.INSUR_USE_I1)                                          AS INSUR_USE_I1
             , SUM(T.DEFORM_USE_I1)                                         AS DEFORM_USE_I1
             , SUM(T.MED_USE_I1)                                            AS MED_USE_I1
             , SUM(T.SURGERY_MED_I1)                                        AS SURGERY_MED_I1
             , SUM(T.SERIOUS_SICK_MED_I1)                                   AS SERIOUS_SICK_MED_I1
             , SUM(T.REAL_LOSS_MED_INSUR_I1 )                               AS REAL_LOSS_MED_INSUR_I1
             , SUM(T.EDU_USE_I1)                                            AS EDU_USE_I1
             , SUM(T.EDU_DEFORM_USE_I1)                                     AS EDU_DEFORM_USE_I1
             , SUM(T.CARD_USE_I1)                                           AS CARD_USE_I1
             , SUM(T.DEBIT_CARD_USE_I1)                                     AS DEBIT_CARD_USE_I1
             , SUM(T.BOOK_CONCERT_USE_I1)                                   AS BOOK_CONCERT_USE_I1
             , SUM(T.TRA_MARKET_USE_I1)                                     AS TRA_MARKET_USE_I1
             , SUM(T.TRAFFIC_USE_I1)                                        AS TRAFFIC_USE_I1
             , SUM(T.GIFT_USE_I1)                                           AS GIFT_USE_I1
             , CONVERT(CHAR(283), '')                                       AS E_SPACE
             , CASE WHEN SUM(T.EDU_USE_I) + SUM(T.EDU_USE_I1) &gt; 0
                    THEN T.EDU_CODE
                    ELSE ''
                END                                                         AS EDU_CODE
        FROM   (SELECT A.SECT_CODE
                     , A.PERSON_NUMB
                     , CONVERT(CHAR(03), SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))                       AS SAFFER 
                     , B.COMPANY_NUM
                     , unilite.fnCipherDecrypt(A.REPRE_NUM, '') AS REPRE_NUM
                     , D.REL_CODE
                     , D.IN_FORE
                     , D.FAMILY_NAME
                     , ISNULL(D.EDU_CODE,'')                                                                            AS EDU_CODE
                     , unilite.fnCipherDecrypt(D.REPRE_NUM, '')                                                         AS FAMILY_REPRE_NUM
                     , CASE WHEN D.REL_CODE = '0' THEN 'Y'                      ELSE ISNULL(D.DEFAULT_DED_YN,'N') END   AS DEFAULT_DED_YN
                     , CASE WHEN D.DEFORM_DED_YN = 'Y' THEN ISNULL(D.DEFORM_KIND_CODE,'') ELSE ''                 END   AS DEFORM_KIND_CODE
                     , CASE WHEN D.REL_CODE IN ('4', '8') AND D.DEFORM_DED_YN = 'Y' THEN 'Y'
                     		WHEN D.REL_CODE IN ('4', '8')
                     		 AND ISNULL(D.DEFAULT_DED_YN,'N') = 'Y'
                     		 AND CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 7, 1) IN ('1', '2', '5', '6') THEN '19' ELSE '20' END + SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 1, 2) &gt;= '1998' THEN 'Y'
                     		ELSE 'N' END																				AS BRING_CHILD_DED_YN
                     , ISNULL(D.WOMAN_DED_YN      , 'N')                                                                AS WOMAN_DED_YN
                     , ISNULL(D.OLD_DED_YN        , 'N')                                                                AS OLD_DED_YN
                     , ISNULL(D.BIRTH_ADOPT_DED_YN, 'N')                                                                AS BIRTH_ADOPT_DED_YN
                     , ISNULL(D.ONE_PARENT_DED_YN , 'N')                                                                AS ONE_PARENT_DED_YN
                     , ISNULL(D.MANY_CHILD_DED_YN , 'N')                                                                AS MANY_CHILD_DED_YN
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' AND D.REL_CODE = '0'   THEN ISNULL(E.MED_PREMINM_I,0) + ISNULL(E.MED_PREMINM_ADD_I,0)   ELSE 0 END, 0)        AS MED_PREMINM_I
                     , 0																		                        AS HIRE_INSUR_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' AND D.INSUR_CODE = '1' THEN D.INSUR_USE_I ELSE 0 END, 0)        AS INSUR_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' AND D.INSUR_CODE = '2' THEN D.INSUR_USE_I ELSE 0 END, 0)        AS DEFORM_USE_I
                     
                 	, ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.MED_USE_I                          ELSE 0 END, 0)
                	- ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN (CASE WHEN D.DEFORM_DED_YN != 'Y' AND D.REL_CODE != '0' AND ((D.OLD_DED_YN = 'Y') OR (@CAL_YYYY - (CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6')
	                                                                                                                                                                THEN 1900 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                                ELSE 2000 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                            END) &gt;= 65))
	                                                              THEN D.MED_USE_I
	                                                              ELSE 0
	                                                         END)
	                                                   ELSE 0
	                          END, 0)                                                                                  	AS MED_USE_I
    
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.SURGERY_MED_I    	ELSE 0 END, 0)                      AS SURGERY_MED_I

                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.SERIOUS_SICK_MED_I                 ELSE 0 END, 0)
	                 + ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN (CASE WHEN D.DEFORM_DED_YN != 'Y' AND D.REL_CODE != '0' AND ((D.OLD_DED_YN = 'Y') OR (@CAL_YYYY - (CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6')
	                                                                                                                                                                 THEN 1900 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                                 ELSE 2000 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                             END) &gt;= 65))
	                                                               THEN D.MED_USE_I
	                                                               ELSE 0
	                                                          END)
	                                                    ELSE 0
	                           END, 0)                                                                                  AS SERIOUS_SICK_MED_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.REAL_LOSS_MED_INSUR_I              ELSE 0 END, 0)        AS REAL_LOSS_MED_INSUR_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.EDU_USE_I + ISNULL(D.EDU_PRINCIPAL_RTN_I,0)
										                                 + CASE WHEN ISNULL(D.FIELD_EDUC_I,0) &gt;= 300000
										                                        THEN 300000
										                                        ELSE ISNULL(D.FIELD_EDUC_I,0)
										                                   END
										                                 + CASE WHEN ISNULL(D.UNIFORM_USE_I,0) &gt;= 500000
										                                        THEN 500000
										                                        ELSE ISNULL(D.UNIFORM_USE_I,0)
										                                   END
										                ELSE 0 END, 0)                                                  AS EDU_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.DEFORM_EDU_USE_I     ELSE 0 END, 0)                      AS EDU_DEFORM_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.CARD_USE_I       	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '1' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_CARD_I	ELSE 0 END, 0)  AS CARD_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.DEBIT_CARD_USE_I 	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '1' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_DEBIT_I	ELSE 0 END, 0)  AS DEBIT_CARD_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.CASH_USE_I       	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '1' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_CASH_I	ELSE 0 END, 0)  AS CASH_USE_I
                     , ISNULL(CASE WHEN ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN 0
                                   ELSE CASE WHEN D.SEQ_NUM = '1' THEN D.BOOK_CONCERT_CARD_I	ELSE 0 END
                                      + CASE WHEN D.SEQ_NUM = '1' THEN D.BOOK_CONCERT_DEBIT_I	ELSE 0 END
                                      + CASE WHEN D.SEQ_NUM = '1' THEN D.BOOK_CONCERT_CASH_I 	ELSE 0 END
                               END, 0)                                                                                  AS BOOK_CONCERT_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.TRA_MARKET_USE_I 	ELSE 0 END, 0)                      AS TRA_MARKET_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.TRAFFIC_USE_I    	ELSE 0 END, 0)                      AS TRAFFIC_USE_I
                     , ISNULL(CASE WHEN D.SEQ_NUM = '1' THEN D.GIFT_USE_I       	ELSE 0 END, 0)                      AS GIFT_USE_I
                     , 0                                                                                                AS MED_PREMINM_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' AND D.REL_CODE = '0'   THEN ISNULL(E.HIRE_INSUR_I,0) + ISNULL(E.HIRE_INSUR_ADD_I,0) ELSE 0 END, 0)        AS HIRE_INSUR_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' AND D.INSUR_CODE = '1' THEN D.INSUR_USE_I ELSE 0 END, 0)        AS INSUR_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' AND D.INSUR_CODE = '2' THEN D.INSUR_USE_I ELSE 0 END, 0)        AS DEFORM_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.MED_USE_I        ELSE 0 END, 0)
                 	 - ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN (CASE WHEN D.DEFORM_DED_YN != 'Y' AND D.REL_CODE != '0' AND ((D.OLD_DED_YN = 'Y') OR (@CAL_YYYY - (CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6')
	                                                                                                                                                                 THEN 1900 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                                 ELSE 2000 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                             END) &gt;= 65))
	                                                               THEN D.MED_USE_I
	                                                               ELSE 0
	                                                          END)
	                                                    ELSE 0
	                           END, 0)                                                                                  AS MED_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.SURGERY_MED_I    				  ELSE 0 END, 0)        AS SURGERY_MED_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.SERIOUS_SICK_MED_I                 ELSE 0 END, 0)
	                 + ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN (CASE WHEN D.DEFORM_DED_YN != 'Y' AND D.REL_CODE != '0' AND ((D.OLD_DED_YN = 'Y') OR (@CAL_YYYY - (CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6')
	                                                                                                                                                                 THEN 1900 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                                 ELSE 2000 + LEFT(unilite.fnCipherDecrypt(D.REPRE_NUM, ''), 2)
	                                                                                                                                                             END) &gt;= 65))
	                                                               THEN D.MED_USE_I
	                                                               ELSE 0
	                                                          END)
	                                                    ELSE 0
	                           END, 0)                                                                                  AS SERIOUS_SICK_MED_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.REAL_LOSS_MED_INSUR_I              ELSE 0 END, 0)        AS REAL_LOSS_MED_INSUR_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.EDU_USE_I + ISNULL(D.EDU_PRINCIPAL_RTN_I,0)
										                                 + CASE WHEN ISNULL(D.FIELD_EDUC_I,0) &gt;= 300000
										                                        THEN 300000
										                                        ELSE ISNULL(D.FIELD_EDUC_I,0)
										                                   END
										                                 + CASE WHEN ISNULL(D.UNIFORM_USE_I,0) &gt;= 500000
										                                        THEN 500000
										                                        ELSE ISNULL(D.UNIFORM_USE_I,0)
										                                   END
										                ELSE 0 END, 0)                                                  AS EDU_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.DEFORM_EDU_USE_I     ELSE 0 END, 0)                      AS EDU_DEFORM_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.CARD_USE_I       	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '2' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_CARD_I	ELSE 0 END, 0)  AS CARD_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.DEBIT_CARD_USE_I 	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '2' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_DEBIT_I	ELSE 0 END, 0)  AS DEBIT_CARD_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.CASH_USE_I       	ELSE 0 END, 0)
                     + ISNULL(CASE WHEN D.SEQ_NUM = '2' AND ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN D.BOOK_CONCERT_CASH_I	ELSE 0 END, 0)  AS CASH_USE_I1
                     , ISNULL(CASE WHEN ISNULL(C.INCOME_SUPP_TOTAL_I, 0) &gt; 70000000 THEN 0
                                   ELSE CASE WHEN D.SEQ_NUM = '2' THEN D.BOOK_CONCERT_CARD_I	ELSE 0 END
                                      + CASE WHEN D.SEQ_NUM = '2' THEN D.BOOK_CONCERT_DEBIT_I	ELSE 0 END
                                      + CASE WHEN D.SEQ_NUM = '2' THEN D.BOOK_CONCERT_CASH_I 	ELSE 0 END
                               END, 0)                                                                                  AS BOOK_CONCERT_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.TRA_MARKET_USE_I 	ELSE 0 END, 0)                      AS TRA_MARKET_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.TRAFFIC_USE_I    	ELSE 0 END, 0)                      AS TRAFFIC_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN D.GIFT_USE_I       	ELSE 0 END, 0)                      AS GIFT_USE_I1
                     , ISNULL(CASE WHEN D.SEQ_NUM = '2' THEN C.POLICY_TOTAL_I   	ELSE 0 END, 0)                      AS POLICY_TOTAL_I1
                FROM              HUM100T   A WITH (NOLOCK)
                       INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                           AND B.DIV_CODE    = A.SECT_CODE
                       INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                           AND C.PERSON_NUMB = A.PERSON_NUMB
                       INNER JOIN HAD430T   D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
                                                           AND D.PERSON_NUMB = A.PERSON_NUMB
                                                           AND D.YEAR_YYYY   = C.YEAR_YYYY
                       INNER JOIN HAD400T   E WITH (NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
                                                           AND E.PERSON_NUMB = A.PERSON_NUMB
                                                           AND E.YEAR_YYYY   = C.YEAR_YYYY
                WHERE  A.COMP_CODE = @COMP_CODE
                AND    A.SECT_CODE = @DIV_CODE
                AND    C.YEAR_YYYY = @CAL_YYYY
                AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
               ) T
        GROUP  BY SECT_CODE        , PERSON_NUMB       , SAFFER            , COMPANY_NUM  , REPRE_NUM
                , REL_CODE         , IN_FORE           , FAMILY_NAME       , FAMILY_REPRE_NUM
                , DEFAULT_DED_YN   , DEFORM_KIND_CODE  , BRING_CHILD_DED_YN, WOMAN_DED_YN , OLD_DED_YN
                , MANY_CHILD_DED_YN, BIRTH_ADOPT_DED_YN, ONE_PARENT_DED_YN , EDU_CODE
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectF" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query06
    /*************************************************************************************************************
      갑종근로소득 정산신고자료 (F 레코드) 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT X.SECT_CODE
             , X.PERSON_NUMB
             , X.SAFFER 
             , X.COMPANY_NUM
             , X.REPRE_NUM
             , X.INCM_DDUC_CD
             , X.BANK_CODE
             , X.BANK_NAME
             , X.BANK_ACCOUNT
             , X.PAY_YRLV
             , X.PAY_I
             , X.PENS_I 
             , X.INVEST_YEAR
             , X.INVEST_TYPE
             , X.F_SPACE
        FROM (
              SELECT A.SECT_CODE
	               , A.PERSON_NUMB
	               , CONVERT(CHAR(03), SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))            AS SAFFER
	               , B.COMPANY_NUM
	               , unilite.fnCipherDecrypt(A.REPRE_NUM, '') AS REPRE_NUM
	               , CONVERT(CHAR(02), D.INCM_DDUC_CD)                                                     AS INCM_DDUC_CD
	               , CASE WHEN D.INCM_DDUC_CD = '61' THEN 'ZZZ'    ELSE CONVERT(CHAR(03), D.BANK_CODE) END AS BANK_CODE
	               , CASE WHEN D.INCM_DDUC_CD = '61' THEN ''       ELSE CONVERT(CHAR(60), E.CODE_NAME) END AS BANK_NAME
	               , CASE WHEN D.INCM_DDUC_CD = '61' THEN 'ZZZZZZ' ELSE CONVERT(CHAR(20), uniLITE.fnCipherDecrypt(D.BANK_ACCOUNT,'')) END AS BANK_ACCOUNT
	               , '00'                                                                                  AS PAY_YRLV
	               , ISNULL(D.PAY_I  , 0)                                                                  AS PAY_I
	               , CASE WHEN D.INCM_DDUC_CD = '11' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '12' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '21' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '22' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '31' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '32' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '34' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '51' THEN D.DDUC_I
	                      WHEN D.INCM_DDUC_CD = '61' THEN 0
	                                                 ELSE 0
	                 END                                                                                 AS PENS_I
	               , CASE WHEN D.INCM_DDUC_CD = '61' THEN ISNULL(F.CODE_NAME  , '0000') ELSE '0000' END  AS INVEST_YEAR
	               , CASE WHEN D.INCM_DDUC_CD = '61' THEN ISNULL(D.INVEST_TYPE, '')     ELSE ''     END  AS INVEST_TYPE--(조합:1, 벤처:2)
	               , CONVERT(CHAR(195), '')                                                              AS F_SPACE
              FROM              HUM100T   A WITH (NOLOCK)
                     INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                         AND B.DIV_CODE    = A.SECT_CODE
                     INNER JOIN HAD600T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                         AND C.PERSON_NUMB = A.PERSON_NUMB
                     INNER JOIN HAD460T   D WITH (NOLOCK) ON D.COMP_CODE   = C.COMP_CODE
                                                         AND D.PERSON_NUMB = C.PERSON_NUMB
                                                         AND D.YEAR_YYYY   = C.YEAR_YYYY
                     LEFT  JOIN BSA100T   E WITH (NOLOCK) ON E.COMP_CODE   = D.COMP_CODE
                                                         AND E.SUB_CODE    = D.BANK_CODE
                                                         AND E.MAIN_CODE   = 'H152'
                     LEFT  JOIN BSA100T   F WITH (NOLOCK) ON F.COMP_CODE   = D.COMP_CODE
                                                         AND F.SUB_CODE    = D.INVEST_YEAR
                                                         AND F.MAIN_CODE   = 'H233'
              WHERE  A.COMP_CODE = @COMP_CODE
              AND    A.SECT_CODE = @DIV_CODE
              AND    C.YEAR_YYYY = @CAL_YYYY
              AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
             ) X
        WHERE X.PAY_I &gt; 0
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectG" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query07
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (G 레코드) 조회[월세 거주자간 주택임차 차입금 원리금 상환액 소득공제명세 레코드]
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @CREATE_CODE        NVARCHAR(01)                -- (필수) 생성대상
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @CREATE_CODE        = #{RETR_FLAG}
	
	    SELECT C.SECT_CODE
	         , A.PERSON_NUMB
	         , B.SAFFER_TAX
	         , B.COMPANY_NUM
	         , CONVERT(CHAR(13) , unilite.fnCipherDecrypt(C.REPRE_NUM, ''))     AS REPRE_NUM
	         , A.SEQ
	
	         , CONVERT(CHAR(60),  MAX(ISNULL(A.LEAS_NAME, '')))         AS LEAS_NAME
	         , CONVERT(CHAR(13),  MAX(ISNULL(A.LEAS_REPRE_NUM, '')))    AS LEAS_REPRE_NUM
	         , CONVERT(CHAR(01),  MAX(ISNULL(A.HOUSE_TYPE, '')))        AS HOUSE_TYPE
	         , CONVERT(CHAR(05),  MAX(ISNULL(A.HOUSE_AREA, '')))        AS HOUSE_AREA
	         , CONVERT(CHAR(100), MAX(ISNULL(A.LEAS_ADDR, '')))         AS LEAS_ADDR
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_BGN_DATE, '')))     AS LEAS_BGN_DATE
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_END_DATE, '')))     AS LEAS_END_DATE
	         , MAX(ISNULL(A.DDUC_OBJ_I, 0))                             AS DDUC_OBJ_I
	         , MAX(ISNULL(A.MON_RENT_I, 0))                             AS MON_RENT_I
	
	         , CONVERT(CHAR(60),  MAX(ISNULL(A.LEAS_NAME2, '')))        AS LEAS_NAME2
	         , CONVERT(CHAR(13),  MAX(ISNULL(A.LEAS_REPRE_NUM2, '')))   AS LEAS_REPRE_NUM2
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_BGN_DATE2, '')))    AS LEAS_BGN_DATE2
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_END_DATE2, '')))    AS LEAS_END_DATE2
	         , MAX(ISNULL(A.LEAS_RATE, 0))                              AS LEAS_RATE
	         , MAX(ISNULL(A.LEAS_RETURN_I, 0))                          AS LEAS_RETURN_I
	         , MAX(ISNULL(A.LEAS_ORI_I, 0))                             AS LEAS_ORI_I
	         , MAX(ISNULL(A.LEAS_INTEREST_I, 0))                        AS LEAS_INTEREST_I
	         , MAX(ISNULL(A.LEAS_DED_I, 0))                             AS LEAS_DED_I
	
	         , CONVERT(CHAR(60),  MAX(ISNULL(A.LEAS_NAME3, '')))        AS LEAS_NAME3
	         , CONVERT(CHAR(13),  MAX(ISNULL(A.LEAS_REPRE_NUM3, '')))   AS LEAS_REPRE_NUM3
	         , CONVERT(CHAR(01),  MAX(ISNULL(A.LEAS_HOUSE_TYPE, '')))   AS LEAS_HOUSE_TYPE
	         , CONVERT(CHAR(05),  MAX(ISNULL(A.LEAS_HOUSE_AREA, '')))   AS LEAS_HOUSE_AREA
	         , CONVERT(CHAR(100), MAX(ISNULL(A.LEAS_ADDR3, '')))        AS LEAS_ADDR3
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_BGN_DATE3, '')))    AS LEAS_BGN_DATE3
	         , CONVERT(CHAR(08),  MAX(ISNULL(A.LEAS_END_DATE3, '')))    AS LEAS_END_DATE3
	         , MAX(ISNULL(A.YEAR_RENT_I, 0))                            AS YEAR_RENT_I
	
	         , CONVERT(CHAR(186), '')                                   AS G_SPACE
	      FROM (
	            SELECT A.COMP_CODE
	                 , A.YEAR_YYYY
	                 , A.PERSON_NUMB
	                 , A.LEAS_NAME
	                 , A.LEAS_REPRE_NUM
	                 , A.HOUSE_TYPE
	                 , A.HOUSE_AREA
	                 , A.LEAS_ADDR
	                 , A.LEAS_BGN_DATE
	                 , A.LEAS_END_DATE
	                 , A.DDUC_OBJ_I
	                 , CASE WHEN ISNULL(SUM(B.MON_RENT_I_PART), 0) &gt;= A.MON_RENT_I THEN 0
	                        WHEN ISNULL(SUM(B.MON_RENT_I_PART), 0) + A.MON_RENT_I_PART &gt; A.MON_RENT_I THEN A.MON_RENT_I - ISNULL(SUM(B.MON_RENT_I_PART), 0)
	                        ELSE A.MON_RENT_I_PART
	                   END  AS MON_RENT_I
	
	                 , ''                                                               AS LEAS_NAME2
	                 , ''                                                               AS LEAS_REPRE_NUM2
	                 , ''                                                               AS LEAS_BGN_DATE2
	                 , ''                                                               AS LEAS_END_DATE2
	                 , 0                                                                AS LEAS_RATE
	                 , 0                                                                AS LEAS_RETURN_I
	                 , 0                                                                AS LEAS_ORI_I
	                 , 0                                                                AS LEAS_INTEREST_I
	                 , 0                                                                AS LEAS_DED_I
	
	                 , ''                                                               AS LEAS_NAME3
	                 , ''                                                               AS LEAS_REPRE_NUM3
	                 , ''                                                               AS LEAS_HOUSE_TYPE
	                 , ''                                                               AS LEAS_HOUSE_AREA
	                 , ''                                                               AS LEAS_ADDR3
	                 , ''                                                               AS LEAS_BGN_DATE3
	                 , ''                                                               AS LEAS_END_DATE3
	                 , 0                                                                AS YEAR_RENT_I
	
	                 , ROW_NUMBER() OVER(ORDER BY A.LEAS_BGN_DATE)                      AS SEQ
	              FROM (SELECT 
	                           D.COMP_CODE
	                         , D.YEAR_YYYY
	                         , D.PERSON_NUMB
	                         , ISNULL(D.LEAS_NAME,'')                                                           AS LEAS_NAME
	                         , CONVERT(CHAR(13) , REPLACE(unilite.fnCipherDecrypt(D.REPRE_NUM, ''),'-',''))     AS LEAS_REPRE_NUM
	                         , D.HOUSE_TYPE                                                     AS HOUSE_TYPE
	                         , REPLACE(RIGHT('000' + CONVERT(VARCHAR,D.HOUSE_AREA), 6),'.','')  AS HOUSE_AREA
	                         , ISNULL(D.LEAS_ADDR,'')                                           AS LEAS_ADDR
	                         , ISNULL(D.LEAS_BGN_DATE, 0)                                       AS LEAS_BGN_DATE
	                         , ISNULL(D.LEAS_END_DATE, 0)                                       AS LEAS_END_DATE
	                         , ISNULL(D.DDUC_OBJ_I, 0)                                          AS DDUC_OBJ_I
	                         , ISNULL(C.MON_RENT_I, 0)                                          AS MON_RENT_I
	                         , FLOOR(CASE WHEN C.INCOME_SUPP_TOTAL_I &gt; 70000000 THEN ISNULL(D.DDUC_OBJ_I, 0) * 0.10 ELSE ISNULL(D.DDUC_OBJ_I, 0) * 0.12 END)   AS MON_RENT_I_PART
	                         , ROW_NUMBER() OVER(PARTITION BY C.PERSON_NUMB ORDER BY D.LEAS_BGN_DATE)   AS SEQ
	                     FROM            HAD450T D WITH (NOLOCK)
	                          INNER JOIN HAD600T C WITH (NOLOCK) ON C.COMP_CODE   = D.COMP_CODE
	                                                            AND C.PERSON_NUMB = D.PERSON_NUMB
	                                                            AND C.YEAR_YYYY   = D.YEAR_YYYY
	            
	                    WHERE    D.COMP_CODE     = @COMP_CODE
	                      AND    D.YEAR_YYYY     = @CAL_YYYY
	                      AND    C.MON_RENT_I    &gt; 0
	                      AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))   ) A
	
	                    LEFT OUTER JOIN (SELECT 
	                                           D.COMP_CODE
	                                         , D.YEAR_YYYY
	                                         , D.PERSON_NUMB
	                                         , ISNULL(D.LEAS_NAME,'')                                                           AS LEAS_NAME
	                                         , CONVERT(CHAR(13) , REPLACE(unilite.fnCipherDecrypt(D.REPRE_NUM, ''),'-',''))     AS LEAS_REPRE_NUM
	                                         , D.HOUSE_TYPE                                                     AS HOUSE_TYPE
	                                         , REPLACE(RIGHT('000' + CONVERT(VARCHAR,D.HOUSE_AREA), 6),'.','')  AS HOUSE_AREA
	                                         , ISNULL(D.LEAS_ADDR,'')                                           AS LEAS_ADDR
	                                         , ISNULL(D.LEAS_BGN_DATE, 0)                                       AS LEAS_BGN_DATE
	                                         , ISNULL(D.LEAS_END_DATE, 0)                                       AS LEAS_END_DATE
	                                         , ISNULL(D.DDUC_OBJ_I, 0)                                          AS DDUC_OBJ_I
	                                         , ISNULL(C.MON_RENT_I, 0)                                          AS MON_RENT_I
	                                         , FLOOR(CASE WHEN C.INCOME_SUPP_TOTAL_I &gt; 70000000 THEN ISNULL(D.DDUC_OBJ_I, 0) * 0.10 ELSE ISNULL(D.DDUC_OBJ_I, 0) * 0.12 END)   AS MON_RENT_I_PART
	                                         , ROW_NUMBER() OVER(PARTITION BY C.PERSON_NUMB ORDER BY D.LEAS_BGN_DATE)   AS SEQ
	                                     FROM            HAD450T D WITH (NOLOCK)
	                                          INNER JOIN HAD600T C WITH (NOLOCK) ON C.COMP_CODE   = D.COMP_CODE
	                                                                            AND C.PERSON_NUMB = D.PERSON_NUMB
	                                                                            AND C.YEAR_YYYY   = D.YEAR_YYYY
	            
	                                    WHERE    D.COMP_CODE     = @COMP_CODE
	                                      AND    D.YEAR_YYYY     = @CAL_YYYY
	                                      AND    C.MON_RENT_I    &gt; 0
	                                      AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))   ) B
	                                 ON A.COMP_CODE     = B.COMP_CODE
	                                AND A.PERSON_NUMB   = B.PERSON_NUMB
	                                AND A.YEAR_YYYY     = B.YEAR_YYYY
	                                AND A.SEQ           &gt; B.SEQ
	             GROUP BY A.COMP_CODE
	                 , A.YEAR_YYYY
	                 , A.PERSON_NUMB
	                 , A.LEAS_NAME
	                 , A.LEAS_REPRE_NUM
	                 , A.HOUSE_TYPE
	                 , A.HOUSE_AREA
	                 , A.LEAS_ADDR
	                 , A.LEAS_BGN_DATE
	                 , A.LEAS_END_DATE
	                 , A.DDUC_OBJ_I
	                 , A.MON_RENT_I
	                 , A.MON_RENT_I_PART
	    
	            UNION ALL
	
	            SELECT
	                   D.COMP_CODE
	                 , D.YEAR_YYYY
	                 , D.PERSON_NUMB
	                 , ''                                                               AS LEAS_NAME
	                 , ''                                                               AS LEAS_REPRE_NUM
	                 , ''                                                               AS HOUSE_TYPE
	                 , ''                                                               AS HOUSE_AREA
	                 , ''                                                               AS LEAS_ADDR
	                 , ''                                                               AS LEAS_BGN_DATE
	                 , ''                                                               AS LEAS_END_DATE
	                 , 0                                                                AS DDUC_OBJ_I
	                 , 0                                                                AS MON_RENT_I
	
	                 , ISNULL(D.LEAS_NAME,'')                                                           AS LEAS_NAME2
	                 , CONVERT(CHAR(13) , REPLACE(unilite.fnCipherDecrypt(D.REPRE_NUM, ''),'-',''))     AS LEAS_REPRE_NUM2
	                 , ISNULL(D.LEAS_BGN_DATE, 0)                                       AS LEAS_BGN_DATE2
	                 , ISNULL(D.LEAS_END_DATE, 0)                                       AS LEAS_END_DATE2
	                 , REPLACE(RIGHT('000' + CONVERT(VARCHAR,ISNULL(D.LEAS_RATE, 0)), 6),'.','')        AS LEAS_RATE
	                 , ISNULL(D.LEAS_RETURN_I, 0)                                       AS LEAS_RETURN_I
	                 , ISNULL(D.LEAS_ORI_I, 0)                                          AS LEAS_ORI_I
	                 , ISNULL(D.LEAS_INTEREST_I, 0)                                     AS LEAS_INTEREST_I
	                 , ISNULL(D.LEAS_DED_I, 0)                                          AS LEAS_DED_I
	
	                 , ''                                                               AS LEAS_NAME3
	                 , ''                                                               AS LEAS_REPRE_NUM3
	                 , ''                                                               AS LEAS_HOUSE_TYPE
	                 , ''                                                               AS LEAS_HOUSE_AREA
	                 , ''                                                               AS LEAS_ADDR3
	                 , ''                                                               AS LEAS_BGN_DATE3
	                 , ''                                                               AS LEAS_END_DATE3
	                 , 0                                                                AS YEAR_RENT_I
	
	                 , ROW_NUMBER() OVER(ORDER BY D.LEAS_BGN_DATE)                      AS SEQ
	             FROM            HAD451T D WITH (NOLOCK)
	                  INNER JOIN HAD600T C WITH (NOLOCK) ON C.COMP_CODE   = D.COMP_CODE
	                                                    AND C.PERSON_NUMB = D.PERSON_NUMB
	                                                    AND C.YEAR_YYYY   = D.YEAR_YYYY
	            
	            WHERE    D.COMP_CODE     = @COMP_CODE
	              AND    D.YEAR_YYYY     = @CAL_YYYY
	              AND    D.LEAS_DED_I    &gt; 0
	              AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))
	    
	            UNION ALL
	
	            SELECT
	                   D.COMP_CODE
	                 , D.YEAR_YYYY
	                 , D.PERSON_NUMB
	                 , ''                                                               AS LEAS_NAME
	                 , ''                                                               AS LEAS_REPRE_NUM
	                 , ''                                                               AS HOUSE_TYPE
	                 , ''                                                               AS HOUSE_AREA
	                 , ''                                                               AS LEAS_ADDR
	                 , ''                                                               AS LEAS_BGN_DATE
	                 , ''                                                               AS LEAS_END_DATE
	                 , 0                                                                AS DDUC_OBJ_I
	                 , 0                                                                AS MON_RENT_I
	
	                 , ''                                                               AS LEAS_NAME2
	                 , ''                                                               AS LEAS_REPRE_NUM2
	                 , ''                                                               AS LEAS_BGN_DATE2
	                 , ''                                                               AS LEAS_END_DATE2
	                 , 0                                                                AS LEAS_RATE
	                 , 0                                                                AS LEAS_RETURN_I
	                 , 0                                                                AS LEAS_ORI_I
	                 , 0                                                                AS LEAS_INTEREST_I
	                 , 0                                                                AS LEAS_DED_I
	
	                 , ISNULL(D.LEAS_NAME,'')                                                           AS LEAS_NAME3
	                 , CONVERT(CHAR(13) , REPLACE(unilite.fnCipherDecrypt(D.REPRE_NUM, ''),'-',''))     AS LEAS_REPRE_NUM3
	                 , D.LEAS_HOUSE_TYPE
	                 , REPLACE(RIGHT('000' + CONVERT(VARCHAR,D.LEAS_HOUSE_AREA), 6),'.','')             AS LEAS_HOUSE_AREA
	                 , ISNULL(D.LEAS_ADDR,'')                                           AS LEAS_ADDR3
	                 , ISNULL(D.LEAS_BGN_DATE, 0)                                       AS LEAS_BGN_DATE3
	                 , ISNULL(D.LEAS_END_DATE, 0)                                       AS LEAS_END_DATE3
	                 , ISNULL(D.YEAR_RENT_I, 0)                                         AS YEAR_RENT_I
	
	                 , ROW_NUMBER() OVER(ORDER BY D.LEAS_BGN_DATE)                      AS SEQ
	             FROM            HAD452T D WITH (NOLOCK)
	                  INNER JOIN HAD600T C WITH (NOLOCK) ON C.COMP_CODE   = D.COMP_CODE
	                                                    AND C.PERSON_NUMB = D.PERSON_NUMB
	                                                    AND C.YEAR_YYYY   = D.YEAR_YYYY
	            
	            WHERE    D.COMP_CODE     = @COMP_CODE
	              AND    D.YEAR_YYYY     = @CAL_YYYY
	              AND    D.YEAR_RENT_I   &gt; 0
	              AND  ((C.HALFWAY_TYPE != 'Y'          AND @CREATE_CODE = 'N') OR (@CREATE_CODE != 'N'))
	           ) A
	           INNER JOIN HUM100T C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
	                                             AND C.PERSON_NUMB = A.PERSON_NUMB
	           INNER JOIN BOR120T B WITH (NOLOCK) ON B.COMP_CODE   = C.COMP_CODE
	                                             AND B.DIV_CODE    = C.SECT_CODE
	                                             AND ISNULL(C.YEAR_CALCU, 'Y') = 'Y'
	     WHERE C.COMP_CODE = @COMP_CODE
	       AND ISNULL(C.YEAR_CALCU, 'Y') = 'Y'                                        
	     GROUP BY C.SECT_CODE
	         , A.PERSON_NUMB
	         , B.SAFFER_TAX
	         , B.COMPANY_NUM
	         , CONVERT(CHAR(13) , unilite.fnCipherDecrypt(C.REPRE_NUM, ''))
	         , A.SEQ
	     ORDER BY A.PERSON_NUMB
	         , A.SEQ
	
	    SET NOCOUNT OFF
	    SET ARITHABORT OFF
	END

	</select>
	<select id="had820ukrServiceImpl.getSelectH" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query08
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (H 레코드) 조회[기부금 조정명세 레코드]                                            
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT A.SECT_CODE
             , A.PERSON_NUMB
             , A.SAFFER
             , A.COMPANY_NUM
             , A.NAME
             , A.FORIGN 
             , A.REPRE_NUM
             , A.GIFT_CODE
             , A.GIFT_YYYY
             , SUM(A.GIFT_AMOUNT_I)     AS GIFT_AMOUNT_I 
             , SUM(A.BF_DDUC_I    )     AS BF_DDUC_I
             , SUM(A.DDUC_OBJ_I   )     AS DDUC_OBJ_I
             , SUM(A.PRP_DDUC_I   )     AS PRP_DDUC_I
             , SUM(A.PRP_LAPSE_I  )     AS PRP_LAPSE_I
             , SUM(A.PRP_OVER_I   )     AS PRP_OVER_I
             , CONVERT(CHAR(1714), '')  AS H_SPACE
          FROM (SELECT B.SECT_CODE 
                     , B.PERSON_NUMB
                     , CONVERT(CHAR(03), ISNULL(SUBSTRING(LTRIM(RTRIM(C.SAFFER_TAX)),1,3), ''))     AS SAFFER
                     , ISNULL(C.COMPANY_NUM  , '')                                                  AS COMPANY_NUM
                     , CONVERT(CHAR(30), B.NAME)                                                    AS NAME
                     , CASE WHEN UPPER(B.NATION_CODE) = 'KR' THEN '1' ELSE '9' END                  AS FORIGN
                     , CONVERT(CHAR(13), REPLACE(unilite.fnCipherDecrypt(B.REPRE_NUM, ''),'-',''))  AS REPRE_NUM
                     , A.GIFT_CODE
                     , A.GIFT_YYYY
                     , ISNULL(A.GIFT_AMOUNT_I, 0 )                                              AS GIFT_AMOUNT_I
                     , ISNULL(A.BF_DDUC_I    , 0 )                                              AS BF_DDUC_I
                     , ISNULL(A.DDUC_OBJ_I   , 0 )                                              AS DDUC_OBJ_I
                     , ISNULL(A.PRP_DDUC_I   , 0 )                                              AS PRP_DDUC_I
                     , ISNULL(A.PRP_LAPSE_I  , 0 )                                              AS PRP_LAPSE_I
                     , ISNULL(A.PRP_OVER_I   , 0 )                                              AS PRP_OVER_I
                FROM              HAD421T   A WITH (NOLOCK)
                       INNER JOIN HUM100T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                           AND B.PERSON_NUMB = A.PERSON_NUMB
                       INNER JOIN BOR120T   C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
                                                           AND C.DIV_CODE    = B.SECT_CODE
                      INNER JOIN HAD600T   D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
                                       AND D.YEAR_YYYY   = A.YEAR_YYYY
                                       AND D.PERSON_NUMB = A.PERSON_NUMB
 
                WHERE  A.COMP_CODE   = @COMP_CODE
                AND    A.YEAR_YYYY   = @CAL_YYYY
                AND    C.DIV_CODE    = @DIV_CODE
                AND    ISNULL(B.YEAR_CALCU, 'Y') = 'Y'
                AND    ISNULL(A.GIFT_AMOUNT_I, 0) &gt; 0
                AND    A.GIFT_CODE NOT IN ('20', '42')
                
                UNION ALL
                
                SELECT B.SECT_CODE
                     , B.PERSON_NUMB
                     , CONVERT(CHAR(03), SUBSTRING(LTRIM(RTRIM(ISNULL(C.SAFFER_TAX, ''))), 1, 3))          AS SAFFER
                     , C.COMPANY_NUM
                     , CONVERT(CHAR(30), A.FAMILY_NAME)                                                    AS GIFT_NAME
                     , CASE WHEN UPPER(B.NATION_CODE) = 'KR' THEN '1' ELSE '9' END                         AS FORIGN
                     , CONVERT(CHAR(13), REPLACE(unilite.fnCipherDecrypt(B.REPRE_NUM, ''),'-',''))         AS REPRE_NUM
                     , A.GIFT_CODE
                     , A.YEAR_YYYY                                                              			AS GIFT_YYYY
                     , ISNULL(A.GIFT_AMOUNT_I, 0)                                               			AS GIFT_AMOUNT_I
                     , 0                                                                        			AS BF_DDUC_I
                  	 , ISNULL(A.GIFT_AMOUNT_I, 0)                                                           AS DDUC_OBJ_I
                  	 , CASE WHEN D.POLICY_INDED_TAX_DED_I = 0 THEN 0 ELSE ISNULL(A.GIFT_AMOUNT_I, 0) END    AS PRP_DDUC_I
                  	 , CASE WHEN D.POLICY_INDED_TAX_DED_I = 0 THEN ISNULL(A.GIFT_AMOUNT_I, 0) ELSE 0 END    AS PRP_LAPSE_I
                  	 , 0                                                                                    AS PRP_OVER_I

                FROM              HAD420T   A WITH (NOLOCK)
                       INNER JOIN HUM100T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                           AND B.PERSON_NUMB = A.PERSON_NUMB
                       INNER JOIN BOR120T   C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
                                                           AND C.DIV_CODE    = B.SECT_CODE
	                   INNER JOIN HAD600T   D WITH (NOLOCK) ON D.COMP_CODE   = A.COMP_CODE
	                                                      AND D.YEAR_YYYY   = A.YEAR_YYYY
	                                                      AND D.PERSON_NUMB = A.PERSON_NUMB
                                                          
                WHERE  A.COMP_CODE = @COMP_CODE
                AND    A.YEAR_YYYY = @CAL_YYYY
                AND    C.DIV_CODE  = @DIV_CODE
                AND    ISNULL(B.YEAR_CALCU, 'Y') = 'Y'
                AND    ISNULL(A.POLICY_INDED, 0) &gt; 0
                AND    (A.GIFT_CODE IN ('20', '42') AND A.REL_CODE = '1')
                ) A
         GROUP BY A.SECT_CODE   , A.PERSON_NUMB , A.SAFFER      , A.COMPANY_NUM , A.NAME
                , A.FORIGN      , A.REPRE_NUM   , A.GIFT_CODE   , A.GIFT_YYYY                                
         ORDER BY A.PERSON_NUMB, A.GIFT_CODE, A.GIFT_YYYY
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectI" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820QStP] Query08
    /*************************************************************************************************************
     갑종근로소득 정산신고자료 (I 레코드) 조회[해당연도 기부명세 레코드]                                          
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @DIV_CODE           = #{DIV_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT B.SECT_CODE
             , B.PERSON_NUMB
             , CONVERT(CHAR(03), SUBSTRING(LTRIM(RTRIM(ISNULL(C.SAFFER_TAX, ''))), 1, 3))          AS SAFFER
             , C.COMPANY_NUM
             , CONVERT(CHAR(13), REPLACE(unilite.fnCipherDecrypt(B.REPRE_NUM, ''),'-',''))         AS REPRE_NUM
             , A.GIFT_CODE
             , REPLACE(REPLACE(ISNULL(A.GIFT_COMPANY_NUM , ''),'-',''), '**********', '')          AS GIFT_COMPANY_NUM
             , REPLACE(ISNULL(A.GIFT_COMPANY_NAME, ''), '*****', '')                               AS GIFT_COMPANY_NAME
             , A.REL_CODE 
             , A.IN_FORE                                                                           AS FORIGN
             , CONVERT(CHAR(30), A.FAMILY_NAME)                                                    AS GIFT_NAME
             , CONVERT(CHAR(13), REPLACE(unilite.fnCipherDecrypt(A.REPRE_NUM, ''),'-',''))         AS GIFT_REPRE_NUM
             , A.GIFT_COUNT
             , ISNULL(A.GIFT_AMOUNT_I, 0)                               						   AS GIFT_AMOUNT_I
             , ISNULL(A.SBDY_APLN_SUM, 0)                                                          AS SBDY_APLN_SUM
             , ISNULL(A.GIFT_AMOUNT_I, 0) + ISNULL(A.SBDY_APLN_SUM, 0)  						   AS GIFT_AMOUNT_I_SUM 
             , CONVERT(CHAR(1664), '')                                                             AS I_SPACE
        FROM              HAD420T   A WITH (NOLOCK)
               INNER JOIN HUM100T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.PERSON_NUMB = A.PERSON_NUMB
               INNER JOIN BOR120T   C WITH (NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
                                                   AND C.DIV_CODE    = B.SECT_CODE
        WHERE  A.COMP_CODE = @COMP_CODE
        AND    A.YEAR_YYYY = @CAL_YYYY
        AND    C.DIV_CODE  = @DIV_CODE
        AND    ISNULL(B.YEAR_CALCU, 'Y') = 'Y'
        AND    ((A.GIFT_CODE IN ('10', '40', '41')) OR (A.GIFT_CODE IN ('20', '42') AND A.REL_CODE = '1'))
        ORDER BY A.PERSON_NUMB, A.GIFT_CODE, A.YEAR_YYYY

    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END	
	</select>
	<select id="had820ukrServiceImpl.getSelectMedical" parameterType="Map" resultType="rMap">
	--had820ukr.Chad820ukr[fnHad820SavM] Query01
    /*************************************************************************************************************
     의료비정산신고자료 조회
    *************************************************************************************************************/
    BEGIN
        DECLARE     @COMP_CODE          NVARCHAR(08)                -- (필수) 법인코드
                  , @CAL_YYYY           NVARCHAR(04)                -- (필수) 정산년도
                  , @DIV_CODE           NVARCHAR(08)                -- (필수) 신고사업장
    
        SET NOCOUNT ON
        SET ARITHABORT ON
    
    --  1. 변수 값 할당 ----------------------------------------------------------------------------------------
        SET @COMP_CODE          = #{S_COMP_CODE}
        SET @CAL_YYYY           = #{CAL_YEAR}
        SET @DIV_CODE           = #{DIV_CODE}
    
    --  2. 데이터 조회 -----------------------------------------------------------------------------------------
        SELECT A.SECT_CODE
             , E.COMP_NAME
             , CONVERT(CHAR(03) , SUBSTRING(LTRIM(RTRIM(ISNULL(B.SAFFER_TAX, ''))), 1, 3))                              AS SAFFER
             , C.YEAR_YYYY
             , B.COMPANY_NUM
             , CONVERT(CHAR(40) , CASE WHEN ISNULL(B.DIV_FULL_NAME, '') = '' THEN B.DIV_NAME ELSE B.DIV_FULL_NAME END)  AS DIV_NAME
             , CONVERT(CHAR(30) , ISNULL(B.REPRE_NAME, ''))                                                             AS REPRE_NAME
             , ISNULL(REPLACE(unilite.fnCipherDecrypt(B.REPRE_NO, ''),'-',''), 'ZZZZZZZZZZZZZ')                         AS REPRE_NO
             , SUM(ISNULL(C.DED_AMOUNT_I, 0 ))                                                                          AS DED_AMOUNT_I
             , REPLACE(unilite.fnCipherDecrypt(A.REPRE_NUM, ''),'-','') AS REPRE_NUM
             , A.NAME
             , CASE WHEN UPPER(A.NATION_CODE) = 'KR' THEN 1 ELSE 9 END                                                  AS IN_FORE
             , ISNULL(C.MED_COMPANY_NAME, '')                                                                           AS MED_COMPANY_NAME
             , ISNULL(REPLACE(unilite.fnCipherDecrypt(C.REPRE_NUM, ''),'-',''), '0000000000000')                        AS MED_REPRE_NUM
             , REPLACE(ISNULL(C.MED_COMPANY_NUM , ''),'-','')                                                           AS MED_COMPANY_NUM
             , ISNULL(C.MED_RELATION    , '')                                                                           AS MED_RELATION
             , CASE WHEN C.MED_CODE IN ('L', 'S', 'D', 'N') THEN '1' ELSE '2' END                                       AS MED_CODE
             , ISNULL(C.IN_FORE_SUPP    , '1')                                                                          AS IN_FORE_SUPP
             , ISNULL(C.MED_PROOF_CODE  , '')                                                                           AS MED_PROOF_CODE
             , SUM(ISNULL(C.SEND_NUM    , 0 ))                                                                          AS SEND_NUM
             , SUM(ISNULL(C.SEND_USE_I  , 0 ))                                                                          AS SEND_USE_I
             , CASE WHEN C.MED_CODE IN ('P') THEN '1' ELSE ' ' END                                                      AS SURGERY_CODE
             , CONVERT(CHAR(19)         , '')                                                                           AS A_SPACE
        FROM              HUM100T   A WITH (NOLOCK)
               INNER JOIN BOR120T   B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
                                                   AND B.DIV_CODE    = A.SECT_CODE
               INNER JOIN HAD410T   C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
                                                   AND C.PERSON_NUMB = A.PERSON_NUMB
                                                   AND C.YEAR_YYYY   = @CAL_YYYY
               INNER JOIN BOR100T   E WITH (NOLOCK) ON E.COMP_CODE   = A.COMP_CODE
               INNER JOIN HAD600T   G WITH (NOLOCK) ON G.COMP_CODE   = A.COMP_CODE
                                                   AND G.PERSON_NUMB = A.PERSON_NUMB
                                                   AND G.YEAR_YYYY   = C.YEAR_YYYY
                                                   AND G.MED_TAX_DED_I   &gt; 0          
        WHERE  A.COMP_CODE   = @COMP_CODE
        AND    A.SECT_CODE   = @DIV_CODE
        AND    ISNULL(A.YEAR_CALCU, 'Y') = 'Y'
        GROUP  BY A.SECT_CODE, B.SAFFER_TAX  , E.COMP_NAME  , B.COMPANY_NUM , B.DIV_FULL_NAME   , B.DIV_NAME,	C.YEAR_YYYY
                , A.NAME     , ISNULL(REPLACE(unilite.fnCipherDecrypt(B.REPRE_NO, ''),'-','') , 'ZZZZZZZZZZZZZ'), B.ZIP_CODE   , B.ADDR        , C.MED_COMPANY_NAME
                , unilite.fnCipherDecrypt(A.REPRE_NUM, ''), A.NAME        , B.REPRE_NAME 
                , ISNULL(REPLACE(unilite.fnCipherDecrypt(C.REPRE_NUM, ''),'-',''), '0000000000000'), C.MED_COMPANY_NUM
                , C.MED_CODE , C.MED_RELATION, A.NATION_CODE, C.IN_FORE_SUPP, C.MED_CODE
                , C.MED_PROOF_CODE
        ORDER  BY A.SECT_CODE
    
        SET NOCOUNT OFF
        SET ARITHABORT OFF
    END
	</select>
</mapper>