<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="had960ukrServiceImpl">
	<select id="had960ukrServiceImpl.selectList" parameterType="Map" resultType="rMap">
	--had960ukr.CHad960Kr[fnHad960_2013QStd] QUERY02
	BEGIN
		DECLARE @HAD430T TABLE (
			  COMP_CODE			NVARCHAR(08)
			, YEAR_YYYY			NVARCHAR(04)
			, REL_CODE			NVARCHAR(02)
			, SEQ_NUM			NVARCHAR(01)
			, DEFAULT_DED_YN	NVARCHAR(01)
		)

		INSERT INTO @HAD430T (COMP_CODE, YEAR_YYYY, REL_CODE, SEQ_NUM, DEFAULT_DED_YN) VALUES (#{S_COMP_CODE}, #{YEAR_YYYY}, '0', '1', 'Y')
		INSERT INTO @HAD430T (COMP_CODE, YEAR_YYYY, REL_CODE, SEQ_NUM, DEFAULT_DED_YN) VALUES (#{S_COMP_CODE}, #{YEAR_YYYY}, '0', '2', 'Y')

		-- 1-1. 소득공제명세등록(HAD430T)에 INSERT --------------------------------------
		IF NOT EXISTS (	SELECT TOP 1 PERSON_NUMB
						  FROM HAD430T WITH (NOLOCK)
						 WHERE COMP_CODE	= #{S_COMP_CODE}
						   AND YEAR_YYYY	= #{YEAR_YYYY}
						   AND PERSON_NUMB	= #{PERSON_NUMB}
						   AND REL_CODE		= '0'	)
		BEGIN
			INSERT INTO HAD430T
				 ( COMP_CODE			, YEAR_YYYY				, PERSON_NUMB			, FAMILY_NAME			, REL_CODE
				 , SEQ_NUM				, REPRE_NUM				, IN_FORE				, DEFAULT_DED_YN		, HOUSEHOLDER_YN
				 , WOMAN_DED_YN			, ONE_PARENT_DED_YN		, DEFORM_DED_YN         , DEFORM_KIND_CODE   
				 , INSUR_CODE			, INSUR_USE_I			, MED_USE_I
				 , SURGERY_MED_I		, EDU_CODE				, EDU_USE_I				, FIELD_EDUC_I			, EDU_PRINCIPAL_RTN_I
				 , CARD_USE_I			, DEBIT_CARD_USE_I		, CASH_USE_I			, TRA_MARKET_USE_I		, TRAFFIC_USE_I
				 , CARD_USE_I_A			, DEBIT_CARD_USE_I_A	, CASH_USE_I_A			, TRA_MARKET_USE_I_A	, TRAFFIC_USE_I_A
				 , CARD_USE_I_B			, DEBIT_CARD_USE_I_B	, CASH_USE_I_B			, TRA_MARKET_USE_I_B	, TRAFFIC_USE_I_B
				 , CARD_USE_I_C			, DEBIT_CARD_USE_I_C	, CASH_USE_I_C			, TRA_MARKET_USE_I_C	, TRAFFIC_USE_I_C
				 , BOOK_CONCERT_CARD_I	, BOOK_CONCERT_CASH_I	, BOOK_CONCERT_DEBIT_I
				 , BOOK_CONCERT_CARD_I_A, BOOK_CONCERT_CASH_I_A	, BOOK_CONCERT_DEBIT_I_A
				 , BOOK_CONCERT_CARD_I_B, BOOK_CONCERT_CASH_I_B	, BOOK_CONCERT_DEBIT_I_B
				 , BOOK_CONCERT_CARD_I_C, BOOK_CONCERT_CASH_I_C	, BOOK_CONCERT_DEBIT_I_C
				 , INSTITUTE_BILL_I		, GIFT_USE_I			, SERIOUS_SICK_MED_I	, UNIFORM_USE_I			, REAL_LOSS_MED_INSUR_I
				 , INSERT_DB_USER		, INSERT_DB_TIME		, UPDATE_DB_USER		, UPDATE_DB_TIME )
			SELECT A.COMP_CODE
				 , V.YEAR_YYYY
				 , A.PERSON_NUMB
				 , A.NAME															AS FAMILY_NAME
				 , V.REL_CODE
				 , V.SEQ_NUM
				 , A.REPRE_NUM
				 , (CASE WHEN UPPER(A.NATION_CODE) = 'KR' THEN '1' ELSE '9' END)	AS IN_FORE
				 , V.DEFAULT_DED_YN
				 , A.HOUSEHOLDER_YN
				 , A.WOMAN
				 , A.ONE_PARENT
				 , A.DEFORM_YN
				 , A.DEFORM_GRD
				 , ''																AS INSUR_CODE
				 , 0																AS INSUR_USE_I
				 , 0																AS MED_USE_I
				 , 0																AS SURGERY_MED_I
				 , ''																AS EDU_CODE
				 , 0																AS EDU_USE_I
				 , 0																AS FIELD_EDUC_I
				 , 0																AS EDU_PRINCIPAL_RTN_I
				 , 0																AS CARD_USE_I
				 , 0																AS DEBIT_CARD_USE_I
				 , 0																AS CASH_USE_I
				 , 0																AS TRA_MARKET_USE_I
				 , 0																AS TRAFFIC_USE_I
				 , 0																AS CARD_USE_I_A
				 , 0																AS DEBIT_CARD_USE_I_A
				 , 0																AS CASH_USE_I_A
				 , 0																AS TRA_MARKET_USE_I_A
				 , 0																AS TRAFFIC_USE_I_A
				 , 0																AS CARD_USE_I_B
				 , 0																AS DEBIT_CARD_USE_I_B
				 , 0																AS CASH_USE_I_B
				 , 0																AS TRA_MARKET_USE_I_B
				 , 0																AS TRAFFIC_USE_I_B
				 , 0																AS CARD_USE_I_C
				 , 0																AS DEBIT_CARD_USE_I_C
				 , 0																AS CASH_USE_I_C
				 , 0																AS TRA_MARKET_USE_I_C
				 , 0																AS TRAFFIC_USE_I_C
				 , 0																AS BOOK_CONCERT_CARD_I
				 , 0																AS BOOK_CONCERT_CASH_I
				 , 0																AS BOOK_CONCERT_DEBIT_I
				 , 0																AS BOOK_CONCERT_CARD_I_A
				 , 0																AS BOOK_CONCERT_CASH_I_A
				 , 0																AS BOOK_CONCERT_DEBIT_I_A
				 , 0																AS BOOK_CONCERT_CARD_I_B
				 , 0																AS BOOK_CONCERT_CASH_I_B
				 , 0																AS BOOK_CONCERT_DEBIT_I_B
				 , 0																AS BOOK_CONCERT_CARD_I_C
				 , 0																AS BOOK_CONCERT_CASH_I_C
				 , 0																AS BOOK_CONCERT_DEBIT_I_C
				 , 0																AS INSTITUTE_BILL_I
				 , 0																AS GIFT_USE_I
				 , 0																AS SERIOUS_SICK_MED_I
				 , 0																AS UNIFORM_USE_I
				 , 0																AS REAL_LOSS_MED_INSUR_I
				 , #{S_USER_ID}
				 , GETDATE()
				 , #{S_USER_ID}
				 , GETDATE()
			  FROM			HUM100T AS A WITH (NOLOCK)
				CROSS JOIN @HAD430T AS V
			 WHERE A.COMP_CODE   = #{S_COMP_CODE}
			   AND A.PERSON_NUMB = #{PERSON_NUMB}
		END
		
		-- 1-2. 인사기본자료등록(HUM100T)에 기타인적사항 UPDATE ----------------------------------
		BEGIN
			UPDATE A
			   SET SPOUSE			= ISNULL(CASE WHEN M.SPOUSE				> 0 THEN 'Y' ELSE 'N' END, 'N')
				 , WOMAN			= ISNULL(CASE WHEN M.WOMAN_DED_YN		> 0 THEN 'Y' ELSE 'N' END, 'N')
				 , ONE_PARENT		= ISNULL(CASE WHEN M.ONE_PARENT_DED_YN	> 0 THEN 'Y' ELSE 'N' END, 'N')
				 , SUPP_AGED_NUM	= ISNULL(M.DEFAULT_DED, 0)
				 , DEFORM_YN		= ISNULL(CASE WHEN M.DEFORM_DED_YN		> 0 THEN 'Y' ELSE 'N' END, 'N')
				 , DEFORM_NUM		= ISNULL(M.DEFORM_DED, 0)
				 , DEFORM_GRD       = ISNULL(M.DEFORM_KIND_CODE, '')
				 , CHILD_20_NUM		= ISNULL(M.MANY_CHILD_DED, 0)
				 , AGED_NUM			= ISNULL(M.OLD_DED, 0)
				 , AGED_NUM70		= ISNULL(M.OLD_70_DED, 0)
				 , BRING_CHILD_NUM	= ISNULL(M.BRING_CHILD_DED, 0)
				 , HOUSEHOLDER_YN	= ISNULL(CASE WHEN M.HOUSEHOLDER_YN		> 0 THEN '1' ELSE '2' END, '2')
				 , UPDATE_DB_USER	= #{S_USER_ID}
				 , UPDATE_DB_TIME	= GETDATE()
			  FROM HUM100T A
				   LEFT JOIN (SELECT T.COMP_CODE
								   , T.PERSON_NUMB
								   , SUM(T.DEFAULT_DED_YN)		AS DEFAULT_DED
								   , SUM(T.DEFORM_DED)			AS DEFORM_DED
								   , SUM(T.BRING_CHILD_DED_YN)	AS BRING_CHILD_DED
								   , SUM(T.WOMAN_DED_YN)		AS WOMAN_DED_YN
								   , SUM(T.ONE_PARENT_DED_YN)	AS ONE_PARENT_DED_YN
								   , SUM(T.OLD_DED_YN)			AS OLD_DED
								   , SUM(T.MANY_CHILD_DED_YN)	AS MANY_CHILD_DED
								   , SUM(T.SPOUSE)				AS SPOUSE
								   , SUM(T.OLD_70_DED)			AS OLD_70_DED
								   , SUM(T.DEFORM_DED_YN)		AS DEFORM_DED_YN
								   , SUM(T.HOUSEHOLDER_YN)		AS HOUSEHOLDER_YN
								   , MAX(T.DEFORM_KIND_CODE)    AS DEFORM_KIND_CODE
								FROM (SELECT A.COMP_CODE
										   , A.PERSON_NUMB
										   , CASE WHEN A.REL_CODE IN ('1','2','4','5','6','7','8')	AND ISNULL(A.DEFAULT_DED_YN		, '') = 'Y' THEN 1 ELSE 0 END           AS DEFAULT_DED_YN
										   , CASE WHEN A.REL_CODE IN ('0')							AND ISNULL(A.DEFORM_DED_YN		, '') = 'Y' THEN 1 ELSE 0 END           AS DEFORM_DED_YN
										   , CASE WHEN													ISNULL(A.DEFORM_DED_YN		, '') = 'Y' THEN 1 ELSE 0 END           AS DEFORM_DED
										   , CASE WHEN A.REL_CODE IN ('0')							                                            THEN A.DEFORM_KIND_CODE END AS DEFORM_KIND_CODE
										   , CASE WHEN A.REL_CODE IN ('1','2','4','5','6','7','8')	AND ISNULL(A.BRING_CHILD_DED_YN	, '') = 'Y' THEN 1 ELSE 0 END           AS BRING_CHILD_DED_YN
										   , CASE WHEN A.REL_CODE IN ('0')							AND ISNULL(A.WOMAN_DED_YN		, '') = 'Y' THEN 1 ELSE 0 END           AS WOMAN_DED_YN
										   , CASE WHEN A.REL_CODE IN ('0')							AND ISNULL(A.ONE_PARENT_DED_YN	, '') = 'Y' THEN 1 ELSE 0 END           AS ONE_PARENT_DED_YN
										   , CASE WHEN A.REL_CODE IN ('4','5')						AND ISNULL(A.DEFAULT_DED_YN		, '') = 'Y'
																					  AND DATEDIFF(YEAR, CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN '19' ELSE '20' END + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 6)
																									   , #{YEAR_YYYY} + '1231') &lt;= 20 THEN 1 ELSE 0 END AS MANY_CHILD_DED_YN
										   , CASE WHEN A.REL_CODE IN ('3')							AND ISNULL(A.DEFAULT_DED_YN		, '') = 'Y' THEN 1 ELSE 0 END AS SPOUSE
										   , CASE WHEN A.REL_CODE IN ('0')							AND ISNULL(A.HOUSEHOLDER_YN		, '') = '1' THEN 1 ELSE 0 END AS HOUSEHOLDER_YN
										   , CASE WHEN ISNULL(A.OLD_DED_YN, '') = 'Y' AND DATEDIFF(YEAR, CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN '19' ELSE '20' END + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 6)
																									   , #{YEAR_YYYY} + '1231') &lt;  70 THEN 1
												  ELSE 0
											 END AS OLD_DED_YN
										   , CASE WHEN ISNULL(A.OLD_DED_YN, '') = 'Y' AND DATEDIFF(YEAR, CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN '19' ELSE '20' END + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 6)
																									   , #{YEAR_YYYY} + '1231') &gt;= 70 THEN 1
												  ELSE 0
											 END AS OLD_70_DED
										FROM HAD430T AS A WITH (NOLOCK)
									   WHERE A.COMP_CODE	= #{S_COMP_CODE}
										 AND A.YEAR_YYYY	= #{YEAR_YYYY}
										 AND A.PERSON_NUMB	= #{PERSON_NUMB}
										 AND A.SEQ_NUM		= '1') AS T
									   GROUP BY T.COMP_CODE, T.PERSON_NUMB) AS M ON M.COMP_CODE   = A.COMP_CODE
																				AND M.PERSON_NUMB = A.PERSON_NUMB
			 WHERE A.COMP_CODE		= #{S_COMP_CODE}
			   AND A.PERSON_NUMB	= #{PERSON_NUMB}
		END
		
		-- 2. 연말정산기초자료등록(HAD400T)에 INSERT ----------------------------------
		IF NOT EXISTS (	SELECT TOP 1 PERSON_NUMB
						  FROM HAD400T WITH (NOLOCK)
						 WHERE COMP_CODE	= #{S_COMP_CODE}
						   AND YEAR_YYYY	= #{YEAR_YYYY}
						   AND PERSON_NUMB	= #{PERSON_NUMB}	)
		BEGIN
			DECLARE @YEAR_YYYY  NUMERIC(04, 0)
			
			SET	 @YEAR_YYYY  =  #{YEAR_YYYY}
			
			INSERT INTO HAD400T
				 ( COMP_CODE			, YEAR_YYYY			, PERSON_NUMB		, BIRTH_ADOPT_NUM	, PER_EDUC_I
				 , ETC_INSUR_I			, DEFORM_INSUR_I	, CARD_USE_I		, DEBIT_CARD_USE_I	, INSTITUTE_BILL_I
				 , CASH_USE_I			, TRA_MARKET_USE_I	, TRAFFIC_USE_I		, KIND_EDU_NUM		, KIND_EDUC_I
				 , STUD_EDUC_NUM		, STUD_EDUC_I		, UNIV_EDUC_NUM		, UNIV_EDUC_I		, DEFORM_EDUC_NUM
				 , DEFORM_EDUC_I		, MY_MED_DED_I		, DEFORM_MED_I		, MED_TOTAL_I		, BOOK_CONCERT_USE_I
				 , SERIOUS_SICK_MED_I	, UNIFORM_USE_I
				 , INSERT_DB_USER		, INSERT_DB_TIME	, UPDATE_DB_USER	, UPDATE_DB_TIME )
			SELECT A.COMP_CODE
				 , A.YEAR_YYYY
				 , A.PERSON_NUMB
				 , SUM(CASE WHEN A.REL_CODE			  = '4' AND A.SEQ_NUM	 = '1' AND A.BIRTH_ADOPT_DED_YN = 'Y'		THEN 1						ELSE 0 END) AS BIRTH_ADOPT_NUM
				 , SUM(CASE WHEN A.REL_CODE			  = '0'																THEN A.EDU_USE_I			ELSE 0 END) AS PER_EDUC_I
				 , SUM(CASE WHEN A.DEFAULT_DED_YN	  = 'Y' AND A.INSUR_CODE = '1'										THEN A.INSUR_USE_I			ELSE 0 END) AS ETC_INSUR_I
				 , SUM(CASE WHEN A.DEFORM_DED_YN	  = 'Y' AND A.INSUR_CODE = '2'										THEN A.INSUR_USE_I			ELSE 0 END) AS DEFORM_INSUR_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.CARD_USE_I			ELSE 0 END) AS CARD_USE_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.DEBIT_CARD_USE_I		ELSE 0 END) AS DEBIT_CARD_USE_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.INSTITUTE_BILL_I		ELSE 0 END) AS INSTITUTE_BILL_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.CASH_USE_I			ELSE 0 END) AS CASH_USE_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.TRA_MARKET_USE_I		ELSE 0 END) AS TRA_MARKET_USE_I
				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN A.TRAFFIC_USE_I		ELSE 0 END) AS TRAFFIC_USE_I
				 , MAX(CASE WHEN A.EDU_CODE			  = '2' AND  A.EDU_USE_I &gt;  0									THEN 1						ELSE 0 END) AS KIND_EDU_NUM
				 , CASE WHEN SUM(CASE WHEN A.EDU_CODE = '2' THEN A.EDU_USE_I ELSE 0 END) &gt;  ISNULL(B.KIND_EDUC, 0)	THEN B.KIND_EDUC
						WHEN SUM(CASE WHEN A.EDU_CODE = '2' THEN A.EDU_USE_I ELSE 0 END) &lt;= ISNULL(B.KIND_EDUC, 0)	THEN SUM(CASE WHEN A.EDU_CODE = '2' THEN A.EDU_USE_I ELSE 0 END)
						ELSE 0
				   END																																			AS KIND_EDU_I
				 , MAX(CASE WHEN A.EDU_CODE			  = '3' AND  A.EDU_USE_I &gt;  0											THEN 1				ELSE 0 END) AS STUD_EDU_NUM
				 , CASE WHEN SUM(CASE WHEN A.EDU_CODE = '3' THEN A.EDU_USE_I ELSE 0 END) &gt;  ISNULL(B.STUD_EDUC, 0)	THEN B.STUD_EDUC
						WHEN SUM(CASE WHEN A.EDU_CODE = '3' THEN A.EDU_USE_I ELSE 0 END) &lt;= ISNULL(B.STUD_EDUC, 0)	THEN SUM(CASE WHEN A.EDU_CODE = '3' THEN A.EDU_USE_I ELSE 0 END)
						ELSE 0
				   END																																			AS STUD_EDU_I
				 , MAX(CASE WHEN A.EDU_CODE			  = '4' AND  A.EDU_USE_I &gt;  0											THEN 1				ELSE 0 END) AS UNIV_EDU_NUM
				 , CASE WHEN SUM(CASE WHEN A.EDU_CODE = '4' THEN A.EDU_USE_I ELSE 0 END) &gt;  ISNULL(B.UNIV_EDUC, 0)	THEN B.UNIV_EDUC
						WHEN SUM(CASE WHEN A.EDU_CODE = '4' THEN A.EDU_USE_I ELSE 0 END) &lt;= ISNULL(B.UNIV_EDUC, 0)	THEN SUM(CASE WHEN A.EDU_CODE = '4' THEN A.EDU_USE_I ELSE 0 END)
						ELSE 0
				   END																																			AS UNIV_EDU_I
				 , MAX(CASE WHEN A.EDU_CODE			  = '5' AND  A.EDU_USE_I &gt;  0											THEN 1				ELSE 0 END) AS DEFORM_EDU_NUM
				 , CASE WHEN SUM(CASE WHEN A.EDU_CODE = '5' THEN A.EDU_USE_I ELSE 0 END) &gt;  ISNULL(B.DEFORM_EDUC, 0)	THEN B.DEFORM_EDUC
						WHEN SUM(CASE WHEN A.EDU_CODE = '5' THEN A.EDU_USE_I ELSE 0 END) &lt;= ISNULL(B.DEFORM_EDUC, 0)	THEN SUM(CASE WHEN A.EDU_CODE = '5' THEN A.EDU_USE_I ELSE 0 END)
						ELSE 0
				   END																																			AS DEFORM_EDU_I
				 , SUM(CASE WHEN A.REL_CODE			  = '0'																THEN A.MED_USE_I			ELSE 0 END) AS MY_MED_DED_I
				 , SUM(CASE WHEN A.REL_CODE			 != '0' AND ((A.DEFORM_DED_YN	 = 'Y') OR
																 (A.OLD_DED_YN		 = 'Y') OR (@YEAR_YYYY - CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN 1900 + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)
																												  ELSE																					   2000 + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)
																											 END &gt;= 65))	THEN A.MED_USE_I		ELSE 0 END) AS DEFORM_MED_I

				 , SUM(CASE WHEN A.REL_CODE			 != '0' AND  A.DEFORM_DED_YN	!= 'Y' AND (@YEAR_YYYY - CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN 1900 + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)
																												  ELSE																					   2000 + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 2)
																											 END &lt;  65)	THEN A.MED_USE_I		ELSE 0 END) AS MED_TOTAL_I

				 , SUM(CASE WHEN A.REL_CODE			 != '5'																THEN ISNULL(A.BOOK_CONCERT_CARD_I , 0)
																														   + ISNULL(A.BOOK_CONCERT_CASH_I , 0)
																														   + ISNULL(A.BOOK_CONCERT_DEBIT_I, 0) ELSE 0 END) AS BOOK_CONCERT_USE_I

				 , SUM(A.SERIOUS_SICK_MED_I)		AS SERIOUS_SICK_MED_I
	 			 , SUM(A.UNIFORM_USE_I)				AS UNIFORM_USE_I
				 , #{S_USER_ID}
				 , GETDATE()
				 , #{S_USER_ID}
				 , GETDATE()
			  FROM			HAD430T A WITH (NOLOCK)
				 INNER JOIN HAD200T B WITH (NOLOCK) ON  B.COMP_CODE		= A.COMP_CODE
													AND B.TAX_YEAR		= A.YEAR_YYYY
													AND B.COMPANY_CODE	= '2'
			 WHERE A.COMP_CODE		= #{S_COMP_CODE}
			   AND A.YEAR_YYYY		= #{YEAR_YYYY}
			   AND A.PERSON_NUMB	= #{PERSON_NUMB}
			 GROUP BY A.COMP_CODE, A.YEAR_YYYY, A.PERSON_NUMB, B.KIND_EDUC, B.STUD_EDUC, B.UNIV_EDUC, B.DEFORM_EDUC

			DECLARE @YearYyyy		NVARCHAR(04)
			SET @YearYyyy = #{YEAR_YYYY}
			UPDATE C
			   SET NONTAX_FR			= (CASE WHEN ISNULL(A.YOUTH_EXEMP_DATE,'') = '' OR (@YearYyyy + '0101') &gt; ISNULL(A.YOUTH_EXEMP_DATE,'')	--Case When 소득세감면기한 = '' or 소득세감면기한이 정산년도이전인 경우
													 THEN ''																						--			Then ''
												ELSE (CASE WHEN ISNULL(A.JOIN_DATE,'') &gt; ISNULL(A.YOUTH_EXEMP_DATE,'')							--	   Else Case When 입사일 gt 소득세감면기한
																THEN ''																				--					  Then ''							ex) 소득세감면기한이 입사일전인 경우(입사일:20120601 gt 소득감면기한:20120331)
														   ELSE (CASE WHEN LEFT(ISNULL(A.JOIN_DATE,''),4) = @YearYyyy								--				 Else Case When 입사년도 = 정산년도 ex) 소득세감면기한이 입사일후인 경우(입사일:20120601 gt 소득감면기한:20130731)
																	  THEN ISNULL(A.JOIN_DATE,'')													--								Then 입사일			  ex) 정산년도에   입사한 경우 20120601(입사년도:2012 = 정산년도:2012)
																	  ELSE @YearYyyy + '0101'														--						   Else 과세년도01월01일	ex) 정산년도전에 입사한 경우 20120101(입사년도:2011 = 정산년도:2012)
																 END)
													  END)
										   END)
				 , NONTAX_TO			= (CASE WHEN ISNULL(A.YOUTH_EXEMP_DATE,'') = '' OR (@YearYyyy + '0101') &gt; ISNULL(A.YOUTH_EXEMP_DATE,'')	--Case When 소득세감면기한 = '' or 소득세감면기한이 정산년도이전인 경우
													 THEN ''																						--			Then ''
												ELSE (CASE WHEN (CASE WHEN A.RETR_DATE != '00000000' AND LEN(A.RETR_DATE) &gt; 0
																		   THEN A.RETR_DATE
																	  ELSE @YearYyyy + '1231'
																 END) &gt; ISNULL(A.YOUTH_EXEMP_DATE,'')											--	   Else Case When 퇴사일 or 과세년도12월31일 gt 소득세감면기한
																THEN ISNULL(A.YOUTH_EXEMP_DATE,'')													--					  Then 소득세감면기한				ex) 소득세감면기한이 퇴사일전인 경우(퇴사일:20121231 gt 소득감면기한:20120331)
														   ELSE	(CASE WHEN A.RETR_DATE != '00000000' AND LEN(A.RETR_DATE) &gt; 0
																		   THEN A.RETR_DATE
																	  ELSE @YearYyyy + '1231'
																 END)																				--				 Else 퇴사일 or 과세년도12월31일	ex) 소득세감면기한이 퇴사일후인 경우(퇴사일:20121231 gt 소득감면기한:20130731)
													  END)
										   END)
				 , HALFWAY_TYPE			= (CASE WHEN A.RETR_DATE != '00000000' AND LEN(A.RETR_DATE) &gt; 0 AND RIGHT(A.RETR_DATE,4) != '1231' AND LEFT(A.RETR_DATE,4) &lt;= @YearYyyy
													 THEN 'Y'
												ELSE CASE WHEN RIGHT(A.RETR_DATE,4) = '1231' AND ISNULL(B.YEARENDTAX_CALCU_RULE,'1') = '2' 
															   THEN 'Y'
														  ELSE 'N'
													 END 
										   END)									--중도퇴사자정산여부
				 , FORE_SINGLE_YN		= 'N'									--외국인단일세율적용여부										  
				 , FOREIGN_DISPATCH_YN	= ISNULL(A.FOREIGN_DISPATCH_YN, 'N')	--외국법인소속 파견근로자 여부
				 , HOUSEHOLDER_YN		= ISNULL(A.HOUSEHOLDER_YN, '2')			--세대주여부
			  FROM			HAD400T C WITH (NOLOCK)
				 INNER JOIN HUM100T A WITH (NOLOCK) ON A.COMP_CODE		= C.COMP_CODE
													AND A.PERSON_NUMB	= C.PERSON_NUMB
				 LEFT  JOIN HBS400T B WITH (NOLOCK) ON B.COMP_CODE		= A.COMP_CODE
			 WHERE C.COMP_CODE		= #{S_COMP_CODE}
			   AND C.YEAR_YYYY		= #{YEAR_YYYY}
			   AND C.PERSON_NUMB	= #{PERSON_NUMB}
		END

		--  3. 조회 ------------------------------------------------------------------
		BEGIN
			--  3.1. 소득공제명세 테이블에 등록된 자료 조회
			SELECT A.YEAR_YYYY
				 , A.PERSON_NUMB
				 , A.FAMILY_NAME
				 , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')														AS REPRE_NUM
				 , A.REL_CODE
				 , A.REL_CODE AS REL_CODE_ORIGIN
				 , A.IN_FORE
				 , A.SEQ_NUM
				 , CASE WHEN A.DEFAULT_DED_YN		= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS DEFAULT_DED_YN
				 , CASE WHEN A.HOUSEHOLDER_YN		= '1'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS HOUSEHOLDER_YN
				 , CASE WHEN A.DEFORM_DED_YN		= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS DEFORM_DED_YN
				 , A.DEFORM_KIND_CODE																				AS DEFORM_KIND_CODE
				 , CASE WHEN A.BRING_CHILD_DED_YN	= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS BRING_CHILD_DED_YN
				 , CASE WHEN A.WOMAN_DED_YN			= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS WOMAN_DED_YN
				 , CASE WHEN A.ONE_PARENT_DED_YN	= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS ONE_PARENT_DED_YN
				 , CASE WHEN A.OLD_DED_YN			= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS OLD_DED_YN
				 , CASE WHEN A.MANY_CHILD_DED_YN	= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS MANY_CHILD_DED_YN
				 , CASE WHEN A.BIRTH_ADOPT_DED_YN	= 'Y'			THEN CONVERT(BIT, 1) ELSE CONVERT(BIT, 0) END	AS BIRTH_ADOPT_DED_YN
				 , A.BIRTH_ADOPT_CODE
				 , ISNULL(A.INSUR_CODE				, '')															AS INSUR_CODE
				 , ISNULL(A.INSUR_USE_I				, 0 )															AS INSUR_USE_I
				 , CASE WHEN A.REL_CODE = '0' AND  A.SEQ_NUM = '2' THEN ISNULL(C.MED_AMOUNT_I, 0) + ISNULL(D.MED_AMOUNT_I, 0)
						ELSE 0
					END																								AS MED_AMOUNT_I
				 , CASE WHEN A.REL_CODE = '0' AND A.SEQ_NUM  = '2' THEN ISNULL(C.HIR_AMOUNT_I, 0) + ISNULL(D.HIR_AMOUNT_I, 0)
						ELSE 0
					END																								AS HIR_AMOUNT_I
				 , ISNULL(A.MED_USE_I				, 0 )															AS MED_USE_I
				 , ISNULL(A.SURGERY_MED_I			, 0 )															AS SURGERY_MED_I
				 , ISNULL(A.EDU_CODE				, '')															AS EDU_CODE
				 , ISNULL(A.EDU_USE_I				, 0 )															AS EDU_USE_I
				 , ISNULL(A.FIELD_EDUC_I			, 0 )															AS FIELD_EDUC_I
				 , ISNULL(A.EDU_PRINCIPAL_RTN_I		, 0 ) 															AS EDU_PRINCIPAL_RTN_I
				 , ISNULL(A.CARD_USE_I				, 0 )															AS CARD_USE_I
				 , ISNULL(A.CARD_USE_I_A			, 0 )															AS CARD_USE_I_A
				 , ISNULL(A.CARD_USE_I_B			, 0 )															AS CARD_USE_I_B
				 , ISNULL(A.CARD_USE_I_C			, 0 )															AS CARD_USE_I_C
				 , ISNULL(A.DEBIT_CARD_USE_I		, 0 )															AS DEBIT_CARD_USE_I
				 , ISNULL(A.DEBIT_CARD_USE_I_A		, 0 )															AS DEBIT_CARD_USE_I_A
				 , ISNULL(A.DEBIT_CARD_USE_I_B		, 0 )															AS DEBIT_CARD_USE_I_B
				 , ISNULL(A.DEBIT_CARD_USE_I_C		, 0 )															AS DEBIT_CARD_USE_I_C
				 , ISNULL(A.INSTITUTE_BILL_I		, 0 )															AS INSTITUTE_BILL_I
				 , ISNULL(A.CASH_USE_I				, 0 )															AS CASH_USE_I
				 , ISNULL(A.CASH_USE_I_A			, 0 )															AS CASH_USE_I_A
				 , ISNULL(A.CASH_USE_I_B			, 0 )															AS CASH_USE_I_B
				 , ISNULL(A.CASH_USE_I_C			, 0 )															AS CASH_USE_I_C
				 , ISNULL(A.TRA_MARKET_USE_I		, 0 )															AS TRA_MARKET_USE_I
				 , ISNULL(A.TRA_MARKET_USE_I_A		, 0 )															AS TRA_MARKET_USE_I_A
				 , ISNULL(A.TRA_MARKET_USE_I_B		, 0 )															AS TRA_MARKET_USE_I_B
				 , ISNULL(A.TRA_MARKET_USE_I_C		, 0 )															AS TRA_MARKET_USE_I_C
				 , ISNULL(A.TRAFFIC_USE_I			, 0 )															AS TRAFFIC_USE_I
				 , ISNULL(A.TRAFFIC_USE_I_A			, 0 )															AS TRAFFIC_USE_I_A
				 , ISNULL(A.TRAFFIC_USE_I_B			, 0 )															AS TRAFFIC_USE_I_B
				 , ISNULL(A.TRAFFIC_USE_I_C			, 0 )															AS TRAFFIC_USE_I_C
				 , ISNULL(A.GIFT_USE_I				, 0 )															AS GIFT_USE_I
				 , ''																								AS DIVI
				 , CASE WHEN ISNULL(B.LIVE_GUBUN,'') = '' THEN '1' END												AS LIVE_GUBUN
				 , ISNULL(A.BOOK_CONCERT_CARD_I		, 0)															AS BOOK_CONCERT_CARD_I
				 , ISNULL(A.BOOK_CONCERT_CARD_I_A	, 0)															AS BOOK_CONCERT_CARD_I_A
				 , ISNULL(A.BOOK_CONCERT_CARD_I_B	, 0)															AS BOOK_CONCERT_CARD_I_B
				 , ISNULL(A.BOOK_CONCERT_CARD_I_C	, 0)															AS BOOK_CONCERT_CARD_I_C
				 , ISNULL(A.BOOK_CONCERT_CASH_I		, 0)															AS BOOK_CONCERT_CASH_I
				 , ISNULL(A.BOOK_CONCERT_CASH_I_A	, 0)															AS BOOK_CONCERT_CASH_I_A
				 , ISNULL(A.BOOK_CONCERT_CASH_I_B	, 0)															AS BOOK_CONCERT_CASH_I_B
				 , ISNULL(A.BOOK_CONCERT_CASH_I_C	, 0)															AS BOOK_CONCERT_CASH_I_C
				 , ISNULL(A.BOOK_CONCERT_DEBIT_I	, 0)															AS BOOK_CONCERT_DEBIT_I
				 , ISNULL(A.BOOK_CONCERT_DEBIT_I_A	, 0)															AS BOOK_CONCERT_DEBIT_I_A
				 , ISNULL(A.BOOK_CONCERT_DEBIT_I_B	, 0)															AS BOOK_CONCERT_DEBIT_I_B
				 , ISNULL(A.BOOK_CONCERT_DEBIT_I_C	, 0)															AS BOOK_CONCERT_DEBIT_I_C
				 , ISNULL(A.SERIOUS_SICK_MED_I		, 0)															AS SERIOUS_SICK_MED_I
				 , ISNULL(A.UNIFORM_USE_I			, 0)															AS UNIFORM_USE_I
				 , ISNULL(A.DEFORM_EDU_USE_I		, 0)															AS DEFORM_EDU_USE_I -- 20190117 장애인교육비추가
				 , ISNULL(A.REAL_LOSS_MED_INSUR_I	, 0)															AS REAL_LOSS_MED_INSUR_I
			  FROM			HAD430T AS A WITH (NOLOCK)
				 INNER JOIN HUM100T AS B WITH (NOLOCK)  ON  B.COMP_CODE		= A.COMP_CODE
														AND B.PERSON_NUMB	= A.PERSON_NUMB
				 LEFT  JOIN (	SELECT COMP_CODE
									 , LEFT(PAY_YYYYMM, 4) AS PAY_YYYY
									 , PERSON_NUMB
									 , SUM(CASE WHEN DED_CODE  =  'HIR'			THEN ISNULL(DED_AMOUNT_I, 0) ELSE 0 END) AS HIR_AMOUNT_I
									 , SUM(CASE WHEN DED_CODE IN ('MED', 'RME') THEN ISNULL(DED_AMOUNT_I, 0) ELSE 0 END) AS MED_AMOUNT_I
								  FROM HPA400T WITH (NOLOCK)
								 GROUP BY COMP_CODE, LEFT(PAY_YYYYMM, 4), PERSON_NUMB) AS C ON C.COMP_CODE		= A.COMP_CODE
																						   AND C.PAY_YYYY		= A.YEAR_YYYY
																						   AND C.PERSON_NUMB	= A.PERSON_NUMB
				 LEFT  JOIN (	SELECT COMP_CODE
									 , YEAR_YYYY
									 , PERSON_NUMB
									 , SUM(ISNULL(P1_HIRE_INSUR_I   , 0) + ISNULL(P2_HIRE_INSUR_I   , 0)) AS HIR_AMOUNT_I
									 , SUM(ISNULL(P1_MEDICAL_INSUR_I, 0) + ISNULL(P2_MEDICAL_INSUR_I, 0)) AS MED_AMOUNT_I
								  FROM HAD500T WITH (NOLOCK)
								 GROUP BY COMP_CODE, YEAR_YYYY, PERSON_NUMB) AS D ON D.COMP_CODE   = A.COMP_CODE
																				 AND D.YEAR_YYYY   = A.YEAR_YYYY
																				 AND D.PERSON_NUMB = A.PERSON_NUMB
			 WHERE A.COMP_CODE		= #{S_COMP_CODE}
			   AND A.YEAR_YYYY		= #{YEAR_YYYY}
			   AND A.PERSON_NUMB	= #{PERSON_NUMB}

			 UNION ALL

			--  3.2. 가족사항 테이블에 등록된 자료 중 소득공제명세에 없는 가족만 조회
			SELECT V.YEAR_YYYY
				 , A.PERSON_NUMB
				 , A.FAMILY_NAME
				 , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A')											AS REPRE_NUM
				 , ''																					AS REL_CODE
				 , ''																					AS REL_CODE_ORIGIN
				 , CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','3','4') THEN '1' ELSE '9' END	AS IN_FORE
				 , V.SEQ_NUM
				 , CONVERT(BIT, 0)																		AS DEFAULT_DED_YN
				 , CONVERT(BIT, 0)																		AS HOUSEHOLDER_YN
				 , CONVERT(BIT, 0)																		AS DEFORM_DED_YN
				 , ''																					AS DEFORM_KIND_CODE
				 , CONVERT(BIT, 0)																		AS BRING_CHILD_DED_YN
				 , CONVERT(BIT, 0)																		AS WOMAN_DED_YN
				 , CONVERT(BIT, 0)																		AS ONE_PARENT_DED_YN
				 , CONVERT(BIT, 0)																		AS OLD_DED_YN
				 , CONVERT(BIT, 0)																		AS MANY_CHILD_DED_YN
				 , CONVERT(BIT, 0)																		AS BIRTH_ADOPT_DED_YN
				 , BIRTH_ADOPT_CODE
				 , ''																					AS INSUR_CODE
				 , 0																					AS INSUR_USE_I
				 , 0																					AS MED_AMOUNT_I
				 , 0																					AS HIR_AMOUNT_I
				 , 0																					AS MED_USE_I
				 , 0																					AS SURGERY_MED_I
				 , ''																					AS EDU_CODE
				 , 0																					AS EDU_USE_I
				 , 0																					AS FIELD_EDUC_I
				 , 0																					AS EDU_PRINCIPAL_RTN_I
				 , 0																					AS CARD_USE_I
				 , 0																					AS CARD_USE_I_A
				 , 0																					AS CARD_USE_I_B
				 , 0																					AS CARD_USE_I_C
				 , 0																					AS DEBIT_CARD_USE_I
				 , 0																					AS DEBIT_CARD_USE_I_A
				 , 0																					AS DEBIT_CARD_USE_I_B
				 , 0																					AS DEBIT_CARD_USE_I_C
				 , 0																					AS INSTITUTE_BILL_I
				 , 0																					AS CASH_USE_I
				 , 0																					AS CASH_USE_I_A
				 , 0																					AS CASH_USE_I_B
				 , 0																					AS CASH_USE_I_C
				 , 0																					AS TRA_MARKET_USE_I
				 , 0																					AS TRA_MARKET_USE_I_A
				 , 0																					AS TRA_MARKET_USE_I_B
				 , 0																					AS TRA_MARKET_USE_I_C
				 , 0																					AS TRAFFIC_USE_I
				 , 0																					AS TRAFFIC_USE_I_A
				 , 0																					AS TRAFFIC_USE_I_B
				 , 0																					AS TRAFFIC_USE_I_C
				 , 0																					AS GIFT_USE_I
				 , 'N'																					AS DIVI
				 , ISNULL(B.LIVE_GUBUN, '1')															AS LIVE_GUBUN
				 , 0																					AS BOOK_CONCERT_CARD_I
				 , 0																					AS BOOK_CONCERT_CARD_I_A
				 , 0																					AS BOOK_CONCERT_CARD_I_B
				 , 0																					AS BOOK_CONCERT_CARD_I_C
				 , 0																					AS BOOK_CONCERT_CASH_I
				 , 0																					AS BOOK_CONCERT_CASH_I_A
				 , 0																					AS BOOK_CONCERT_CASH_I_B
				 , 0																					AS BOOK_CONCERT_CASH_I_C
				 , 0																					AS BOOK_CONCERT_DEBIT_I
				 , 0																					AS BOOK_CONCERT_DEBIT_I_A
				 , 0																					AS BOOK_CONCERT_DEBIT_I_B
				 , 0																					AS BOOK_CONCERT_DEBIT_I_C
				 , 0																					AS SERIOUS_SICK_MED_I
				 , 0																					AS UNIFORM_USE_I
				 , ISNULL(C.DEFORM_EDU_USE_I,0)															AS DEFORM_EDU_USE_I	--장애인교육비추가
				 , 0																					AS REAL_LOSS_MED_INSUR_I
			  FROM			   HUM200T  AS A WITH (NOLOCK)
					INNER JOIN HUM100T  AS B WITH (NOLOCK) ON B.COMP_CODE	= A.COMP_CODE
														  AND B.PERSON_NUMB	= A.PERSON_NUMB
					LEFT  JOIN HAD430T  AS C WITH (NOLOCK) ON C.COMP_CODE	= A.COMP_CODE
														  AND C.YEAR_YYYY	= #{YEAR_YYYY}
														  AND C.PERSON_NUMB	= A.PERSON_NUMB
														  AND unilite.fnCipherDecrypt(C.REPRE_NUM, '')	= unilite.fnCipherDecrypt(A.REPRE_NUM, '')
														  AND C.SEQ_NUM		= '1'
					CROSS JOIN @HAD430T AS V
			 WHERE A.COMP_CODE	= #{S_COMP_CODE}
			   AND A.PERSON_NUMB  = #{PERSON_NUMB}
			   AND C.FAMILY_NAME IS NULL
			   AND A.YEAR_CALCU_YN='Y'
			 ORDER  BY DIVI, A.PERSON_NUMB, REL_CODE, REPRE_NUM, SEQ_NUM
		END
	END
	</select>

	<insert id="had960ukrServiceImpl.insert" parameterType="Map">
		INSERT INTO HAD430T
			   (COMP_CODE
			   ,YEAR_YYYY
			   ,PERSON_NUMB
			   ,FAMILY_NAME
			   ,REL_CODE
			   ,SEQ_NUM
			   ,REPRE_NUM
			   ,IN_FORE
			   ,DEFAULT_DED_YN
			   ,HOUSEHOLDER_YN
			   ,DEFORM_DED_YN
			   ,DEFORM_KIND_CODE
			   ,BRING_CHILD_DED_YN
			   ,WOMAN_DED_YN
			   ,ONE_PARENT_DED_YN
			   ,OLD_DED_YN
			   ,MANY_CHILD_DED_YN
			   ,BIRTH_ADOPT_DED_YN
			   ,BIRTH_ADOPT_CODE
			   ,INSUR_CODE
			   ,EDU_CODE
			   ,INSUR_USE_I
			   ,MED_USE_I
			   ,SURGERY_MED_I
			   ,EDU_USE_I
			   ,FIELD_EDUC_I
			   ,EDU_PRINCIPAL_RTN_I
			   ,CARD_USE_I
			   ,CARD_USE_I_A
			   ,CARD_USE_I_B
			   ,CARD_USE_I_C
			   ,DEBIT_CARD_USE_I
			   ,DEBIT_CARD_USE_I_A
			   ,DEBIT_CARD_USE_I_B
			   ,DEBIT_CARD_USE_I_C
			   ,CASH_USE_I
			   ,CASH_USE_I_A
			   ,CASH_USE_I_B
			   ,CASH_USE_I_C
			   ,TRA_MARKET_USE_I
			   ,TRA_MARKET_USE_I_A
			   ,TRA_MARKET_USE_I_B
			   ,TRA_MARKET_USE_I_C
			   ,TRAFFIC_USE_I
			   ,TRAFFIC_USE_I_A
			   ,TRAFFIC_USE_I_B
			   ,TRAFFIC_USE_I_C
			   ,GIFT_USE_I
			   ,INSTITUTE_BILL_I
			   ,BOOK_CONCERT_CARD_I
			   ,BOOK_CONCERT_CARD_I_A
			   ,BOOK_CONCERT_CARD_I_B
			   ,BOOK_CONCERT_CARD_I_C
			   ,BOOK_CONCERT_CASH_I
			   ,BOOK_CONCERT_CASH_I_A
			   ,BOOK_CONCERT_CASH_I_B
			   ,BOOK_CONCERT_CASH_I_C
			   ,BOOK_CONCERT_DEBIT_I
			   ,BOOK_CONCERT_DEBIT_I_A
			   ,BOOK_CONCERT_DEBIT_I_B
			   ,BOOK_CONCERT_DEBIT_I_C
			   ,UNIFORM_USE_I
			   ,REAL_LOSS_MED_INSUR_I
			   ,INSERT_DB_USER
			   ,INSERT_DB_TIME
			   ,UPDATE_DB_USER
			   ,UPDATE_DB_TIME
			   )
		 VALUES
			   (#{S_COMP_CODE}
			   ,#{YEAR_YYYY}
			   ,#{PERSON_NUMB}
			   ,#{FAMILY_NAME}
			   ,#{REL_CODE}
			   ,#{SEQ_NUM}
			   ,unilite.fnCipherEncrypt(REPLACE(#{REPRE_NUM},'-',''), '')
			   ,#{IN_FORE}
			   ,#{DEFAULT_DED_YN}
			   ,#{HOUSEHOLDER_YN}
			   ,#{DEFORM_DED_YN}
			   ,#{DEFORM_KIND_CODE}
			   ,#{BRING_CHILD_DED_YN}
			   ,#{WOMAN_DED_YN}
			   ,#{ONE_PARENT_DED_YN}
			   ,#{OLD_DED_YN}
			   ,#{MANY_CHILD_DED_YN}
			   ,#{BIRTH_ADOPT_DED_YN}
			   ,#{BIRTH_ADOPT_CODE}
			   ,#{INSUR_CODE}
			   ,#{EDU_CODE}
			   ,#{INSUR_USE_I}
			   ,#{MED_USE_I}
			   ,#{SURGERY_MED_I}
			   ,#{EDU_USE_I}
			   ,#{FIELD_EDUC_I}
			   ,#{EDU_PRINCIPAL_RTN_I}
			   ,#{CARD_USE_I}
			   ,#{CARD_USE_I_A}
			   ,#{CARD_USE_I_B}
			   ,#{CARD_USE_I_C}
			   ,#{DEBIT_CARD_USE_I}
			   ,#{DEBIT_CARD_USE_I_A}
			   ,#{DEBIT_CARD_USE_I_B}
			   ,#{DEBIT_CARD_USE_I_C}
			   ,#{CASH_USE_I}
			   ,#{CASH_USE_I_A}
			   ,#{CASH_USE_I_B}
			   ,#{CASH_USE_I_C}
			   ,#{TRA_MARKET_USE_I}
			   ,#{TRA_MARKET_USE_I_A}
			   ,#{TRA_MARKET_USE_I_B}
			   ,#{TRA_MARKET_USE_I_C}
			   ,#{TRAFFIC_USE_I}
			   ,#{TRAFFIC_USE_I_A}
			   ,#{TRAFFIC_USE_I_B}
			   ,#{TRAFFIC_USE_I_C}
			   ,#{GIFT_USE_I}
			   ,#{INSTITUTE_BILL_I}
			   ,#{BOOK_CONCERT_CARD_I}
			   ,#{BOOK_CONCERT_CARD_I_A}
			   ,#{BOOK_CONCERT_CARD_I_B}
			   ,#{BOOK_CONCERT_CARD_I_C}
			   ,#{BOOK_CONCERT_CASH_I}
			   ,#{BOOK_CONCERT_CASH_I_A}
			   ,#{BOOK_CONCERT_CASH_I_B}
			   ,#{BOOK_CONCERT_CASH_I_C}
			   ,#{BOOK_CONCERT_DEBIT_I}
			   ,#{BOOK_CONCERT_DEBIT_I_A}
			   ,#{BOOK_CONCERT_DEBIT_I_B}
			   ,#{BOOK_CONCERT_DEBIT_I_C}
			   ,#{UNIFORM_USE_I}
			   ,#{REAL_LOSS_MED_INSUR_I}
			   ,#{S_USER_ID}
			   ,GETDATE()
			   ,#{S_USER_ID}
			   ,GETDATE()
		   )
	</insert>

	<update id="had960ukrServiceImpl.update" parameterType="Map">
		IF NOT EXISTS (	SELECT PERSON_NUMB
						  FROM HAD430T WITH (NOLOCK)
						 WHERE COMP_CODE	= #{S_COMP_CODE}
						   AND YEAR_YYYY	= #{YEAR_YYYY}
						   AND PERSON_NUMB	= #{PERSON_NUMB}
						   AND FAMILY_NAME	= #{FAMILY_NAME}
						   AND REL_CODE		= #{REL_CODE_ORIGIN}
						   AND SEQ_NUM		= #{SEQ_NUM}	)
		BEGIN
			-- HAD430T에는 없고,HUM100T 에 존재하여 그리드에 표시된 경우
			INSERT INTO HAD430T
				 ( COMP_CODE				, YEAR_YYYY					, PERSON_NUMB				, FAMILY_NAME			, REL_CODE
				 , SEQ_NUM					, REPRE_NUM					, IN_FORE					, DEFAULT_DED_YN		, HOUSEHOLDER_YN
				 , DEFORM_DED_YN			, DEFORM_KIND_CODE			, BRING_CHILD_DED_YN		, WOMAN_DED_YN			, ONE_PARENT_DED_YN
				 , OLD_DED_YN				, MANY_CHILD_DED_YN			, BIRTH_ADOPT_DED_YN		, BIRTH_ADOPT_CODE		, INSUR_CODE
				 , EDU_CODE					, INSUR_USE_I				, MED_USE_I					, SURGERY_MED_I			, SERIOUS_SICK_MED_I
				 , EDU_USE_I				, FIELD_EDUC_I				, EDU_PRINCIPAL_RTN_I
				 , CARD_USE_I				, CARD_USE_I_A				, CARD_USE_I_B				, CARD_USE_I_C
				 , DEBIT_CARD_USE_I			, DEBIT_CARD_USE_I_A		, DEBIT_CARD_USE_I_B		, DEBIT_CARD_USE_I_C
				 , CASH_USE_I				, CASH_USE_I_A				, CASH_USE_I_B				, CASH_USE_I_C
				 , TRA_MARKET_USE_I			, TRA_MARKET_USE_I_A		, TRA_MARKET_USE_I_B		, TRA_MARKET_USE_I_C
				 , TRAFFIC_USE_I			, TRAFFIC_USE_I_A			, TRAFFIC_USE_I_B			, TRAFFIC_USE_I_C
				 , BOOK_CONCERT_CARD_I		, BOOK_CONCERT_CARD_I_A		, BOOK_CONCERT_CARD_I_B		, BOOK_CONCERT_CARD_I_C
				 , BOOK_CONCERT_CASH_I		, BOOK_CONCERT_CASH_I_A		, BOOK_CONCERT_CASH_I_B		, BOOK_CONCERT_CASH_I_C
				 , BOOK_CONCERT_DEBIT_I		, BOOK_CONCERT_DEBIT_I_A	, BOOK_CONCERT_DEBIT_I_B	, BOOK_CONCERT_DEBIT_I_C
				 , UNIFORM_USE_I			, DEFORM_EDU_USE_I			, GIFT_USE_I				, INSTITUTE_BILL_I			, REAL_LOSS_MED_INSUR_I
				 , INSERT_DB_USER			, INSERT_DB_TIME			, UPDATE_DB_USER			, UPDATE_DB_TIME )
		 	VALUES
				( #{S_COMP_CODE}			, #{YEAR_YYYY}				, #{PERSON_NUMB}			, #{FAMILY_NAME}			, #{REL_CODE}
				, #{SEQ_NUM}				, unilite.fnCipherEncrypt(REPLACE(#{REPRE_NUM},'-',''), '')
																		, #{IN_FORE}				, #{DEFAULT_DED_YN}			, #{HOUSEHOLDER_YN}
				, #{DEFORM_DED_YN}			, #{DEFORM_KIND_CODE}		, #{BRING_CHILD_DED_YN} 	, #{WOMAN_DED_YN}			, #{ONE_PARENT_DED_YN}
				, #{OLD_DED_YN}				, #{MANY_CHILD_DED_YN}		, #{BIRTH_ADOPT_DED_YN} 	, #{BIRTH_ADOPT_CODE}		, #{INSUR_CODE}
				, #{EDU_CODE}				, #{INSUR_USE_I}			, #{MED_USE_I}				, #{SURGERY_MED_I}			, #{SERIOUS_SICK_MED_I}
				, #{EDU_USE_I}				, #{FIELD_EDUC_I}			, #{EDU_PRINCIPAL_RTN_I}
				, #{CARD_USE_I}				, #{CARD_USE_I_A}			, #{CARD_USE_I_B}			, #{CARD_USE_I_C}
				, #{DEBIT_CARD_USE_I}		, #{DEBIT_CARD_USE_I_A}		, #{DEBIT_CARD_USE_I_B}		, #{DEBIT_CARD_USE_I_C}
				, #{CASH_USE_I}				, #{CASH_USE_I_A}			, #{CASH_USE_I_B}			, #{CASH_USE_I_C}
				, #{TRA_MARKET_USE_I}		, #{TRA_MARKET_USE_I_A}		, #{TRA_MARKET_USE_I_B}		, #{TRA_MARKET_USE_I_C}
				, #{TRAFFIC_USE_I}			, #{TRAFFIC_USE_I_A}		, #{TRAFFIC_USE_I_B}		, #{TRAFFIC_USE_I_C}
				, #{BOOK_CONCERT_CARD_I}	, #{BOOK_CONCERT_CARD_I_A}	, #{BOOK_CONCERT_CARD_I_B}	, #{BOOK_CONCERT_CARD_I_C}
				, #{BOOK_CONCERT_CASH_I}	, #{BOOK_CONCERT_CASH_I_A}	, #{BOOK_CONCERT_CASH_I_B}	, #{BOOK_CONCERT_CASH_I_C}
				, #{BOOK_CONCERT_DEBIT_I}	, #{BOOK_CONCERT_DEBIT_I_A}	, #{BOOK_CONCERT_DEBIT_I_B}	, #{BOOK_CONCERT_DEBIT_I_C}
				, #{UNIFORM_USE_I}			, #{DEFORM_EDU_USE_I}		, #{GIFT_USE_I}				, #{INSTITUTE_BILL_I}		, #{REAL_LOSS_MED_INSUR_I}
				, #{S_USER_ID}				, GETDATE()					, #{S_USER_ID}				, GETDATE() )
		END
		ELSE
		BEGIN
			UPDATE HAD430T
			   SET IN_FORE					= #{IN_FORE}
				 , DEFAULT_DED_YN			= #{DEFAULT_DED_YN}
				 , HOUSEHOLDER_YN			= #{HOUSEHOLDER_YN}
				 , DEFORM_DED_YN			= #{DEFORM_DED_YN}
				 , DEFORM_KIND_CODE			= #{DEFORM_KIND_CODE}
				 , BRING_CHILD_DED_YN		= #{BRING_CHILD_DED_YN}
				 , WOMAN_DED_YN				= #{WOMAN_DED_YN}
				 , ONE_PARENT_DED_YN		= #{ONE_PARENT_DED_YN}
				 , OLD_DED_YN				= #{OLD_DED_YN}
				 , MANY_CHILD_DED_YN		= #{MANY_CHILD_DED_YN}
				 , BIRTH_ADOPT_DED_YN		= #{BIRTH_ADOPT_DED_YN}
				 , BIRTH_ADOPT_CODE			= #{BIRTH_ADOPT_CODE}
				 , INSUR_CODE				= #{INSUR_CODE}
				 , EDU_CODE					= #{EDU_CODE}
				 , INSUR_USE_I				= #{INSUR_USE_I}
				 , MED_USE_I				= #{MED_USE_I}
				 , SURGERY_MED_I			= #{SURGERY_MED_I}
				 , SERIOUS_SICK_MED_I		= #{SERIOUS_SICK_MED_I}
				 , EDU_USE_I				= #{EDU_USE_I}
				 , FIELD_EDUC_I				= #{FIELD_EDUC_I}
				 , EDU_PRINCIPAL_RTN_I		= #{EDU_PRINCIPAL_RTN_I}
				 , CARD_USE_I				= #{CARD_USE_I}
				 , CARD_USE_I_A				= #{CARD_USE_I_A}
				 , CARD_USE_I_B				= #{CARD_USE_I_B}
				 , CARD_USE_I_C				= #{CARD_USE_I_C}
				 , DEBIT_CARD_USE_I			= #{DEBIT_CARD_USE_I}
				 , DEBIT_CARD_USE_I_A		= #{DEBIT_CARD_USE_I_A}
				 , DEBIT_CARD_USE_I_B		= #{DEBIT_CARD_USE_I_B}
				 , DEBIT_CARD_USE_I_C		= #{DEBIT_CARD_USE_I_C}
				 , CASH_USE_I				= #{CASH_USE_I}
				 , CASH_USE_I_A				= #{CASH_USE_I_A}
				 , CASH_USE_I_B				= #{CASH_USE_I_B}
				 , CASH_USE_I_C				= #{CASH_USE_I_C}
				 , TRA_MARKET_USE_I			= #{TRA_MARKET_USE_I}
				 , TRA_MARKET_USE_I_A		= #{TRA_MARKET_USE_I_A}
				 , TRA_MARKET_USE_I_B		= #{TRA_MARKET_USE_I_B}
				 , TRA_MARKET_USE_I_C		= #{TRA_MARKET_USE_I_C}
				 , TRAFFIC_USE_I			= #{TRAFFIC_USE_I}
				 , TRAFFIC_USE_I_A			= #{TRAFFIC_USE_I_A}
				 , TRAFFIC_USE_I_B			= #{TRAFFIC_USE_I_B}
				 , TRAFFIC_USE_I_C			= #{TRAFFIC_USE_I_C}
				 , GIFT_USE_I				= #{GIFT_USE_I}
				 , INSTITUTE_BILL_I			= #{INSTITUTE_BILL_I}
				 , REPRE_NUM				= unilite.fnCipherEncrypt(REPLACE(#{REPRE_NUM},'-',''),'')
				 , REL_CODE					= #{REL_CODE}
				 , BOOK_CONCERT_CARD_I		= #{BOOK_CONCERT_CARD_I}
				 , BOOK_CONCERT_CARD_I_A	= #{BOOK_CONCERT_CARD_I_A}
				 , BOOK_CONCERT_CARD_I_B	= #{BOOK_CONCERT_CARD_I_B}
				 , BOOK_CONCERT_CARD_I_C	= #{BOOK_CONCERT_CARD_I_C}
				 , BOOK_CONCERT_CASH_I		= #{BOOK_CONCERT_CASH_I}
				 , BOOK_CONCERT_CASH_I_A	= #{BOOK_CONCERT_CASH_I_A}
				 , BOOK_CONCERT_CASH_I_B	= #{BOOK_CONCERT_CASH_I_B}
				 , BOOK_CONCERT_CASH_I_C	= #{BOOK_CONCERT_CASH_I_C}
				 , BOOK_CONCERT_DEBIT_I		= #{BOOK_CONCERT_DEBIT_I}
				 , BOOK_CONCERT_DEBIT_I_A	= #{BOOK_CONCERT_DEBIT_I_A}
				 , BOOK_CONCERT_DEBIT_I_B	= #{BOOK_CONCERT_DEBIT_I_B}
				 , BOOK_CONCERT_DEBIT_I_C	= #{BOOK_CONCERT_DEBIT_I_C}
				 , UNIFORM_USE_I			= #{UNIFORM_USE_I}
				 , DEFORM_EDU_USE_I			= #{DEFORM_EDU_USE_I}
				 , REAL_LOSS_MED_INSUR_I	= #{REAL_LOSS_MED_INSUR_I}
				 , UPDATE_DB_USER			= #{S_USER_ID}
				 , UPDATE_DB_TIME			= GETDATE()
			 WHERE COMP_CODE				= #{S_COMP_CODE}
			   AND YEAR_YYYY				= #{YEAR_YYYY}
			   AND PERSON_NUMB				= #{PERSON_NUMB}
			   AND FAMILY_NAME				= #{FAMILY_NAME}
			   AND REL_CODE					= #{REL_CODE_ORIGIN}
			   AND SEQ_NUM					= #{SEQ_NUM}
		END
	</update>

	<update id="had960ukrServiceImpl.delete" parameterType="Map">
		--had960ukr.Chad960ukr[fnHad960Save] QUERY02
		DELETE HADPDFT
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND BASE_YEAR	= #{YEAR_YYYY}
		   AND PERSON_NUMB	= #{PERSON_NUMB}
		   AND D_NAME		= #{FAMILY_NAME}

		DELETE FROM HAD430T
		 WHERE COMP_CODE	= #{S_COMP_CODE}
		   AND YEAR_YYYY	= #{YEAR_YYYY}
		   AND PERSON_NUMB	= #{PERSON_NUMB}
		   AND FAMILY_NAME	= #{FAMILY_NAME}
		   AND REL_CODE		= #{REL_CODE_ORIGIN}
		   AND SEQ_NUM		= #{SEQ_NUM}
	</update>

	<select id="had960ukrServiceImpl.selectChkData" parameterType="Map" resultType="rMap">
		--had960ukr.Chad960ukr[fnChkData] QUERY01
		DECLARE @COMP_CODE   NVARCHAR(08)
			  , @YEAR_YYYY   NVARCHAR(04)
			  , @PERSON_NUMB NVARCHAR(10)

		SET @COMP_CODE   = #{S_COMP_CODE}
		SET @YEAR_YYYY   = #{YEAR_YYYY}
		SET @PERSON_NUMB = #{PERSON_NUMB}

		SELECT *
		  FROM HAD430T
		 WHERE COMP_CODE   = @COMP_CODE
		   AND YEAR_YYYY   = @YEAR_YYYY
		   AND PERSON_NUMB = @PERSON_NUMB
	</select>

	<select id="had960ukrServiceImpl.selectLast" parameterType="Map" resultType="rMap">
		--had960ukr.Chad960ukr[fnLast960_2013QStd] QUERY01
		BEGIN
			SET NOCOUNT ON
			SET ARITHABORT ON

			DECLARE @COMP_CODE		NVARCHAR(08)
				  , @YEAR_YYYY		NVARCHAR(04)
				  , @PERSON_NUMB	NVARCHAR(10)

			SET @COMP_CODE		= #{S_COMP_CODE}
			SET @YEAR_YYYY		= #{YEAR_YYYY}
			SET @PERSON_NUMB	= #{PERSON_NUMB}
			
			BEGIN
				DELETE HAD430T
				 WHERE COMP_CODE   = @COMP_CODE
				   AND YEAR_YYYY   = @YEAR_YYYY
				   AND PERSON_NUMB = @PERSON_NUMB
			END

			BEGIN
				SELECT @YEAR_YYYY AS YEAR_YYYY
					 , A.PERSON_NUMB
					 , A.FAMILY_NAME
					 , unilite.fnCipherDecrypt(A.REPRE_NUM, 'A') AS REPRE_NUM
					 , A.REL_CODE
					 , A.IN_FORE
					 , A.SEQ_NUM
					 , CASE WHEN ISNULL(A.DEFAULT_DED_YN,'') = 'Y'
							THEN CASE WHEN A.REL_CODE IN ('4','5') AND DATEDIFF(YEAR, CASE WHEN SUBSTRING(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 7, 1) IN ('1','2','5','6') THEN '19' ELSE '20' END + LEFT(unilite.fnCipherDecrypt(A.REPRE_NUM, ''), 6), @YEAR_YYYY + '1231') &gt; 20  
									  THEN CONVERT(BIT, 0)
									  ELSE CONVERT(BIT, 1)
								 END
							ELSE CONVERT(BIT, 0)
						END																							AS DEFAULT_DED_YN
					 , CONVERT(BIT, 0)																				AS HOUSEHOLDER_YN
					 , CASE WHEN ISNULL(A.DEFORM_DED_YN ,'') = 'Y'	 THEN CONVERT(BIT,1)
							ELSE CONVERT(BIT, 0)
						END																							AS DEFORM_DED_YN
					 , A.DEFORM_KIND_CODE																			AS DEFORM_KIND_CODE
					 , CONVERT(BIT, 0)																				AS BRING_CHILD_DED_YN
					 , CONVERT(BIT, 0)																				AS WOMAN_DED_YN
					 , CONVERT(BIT, 0)																				AS ONE_PARENT_DED_YN
					 , CONVERT(BIT, 0)																				AS OLD_DED_YN
					 , CONVERT(BIT, 0)																				AS MANY_CHILD_DED_YN
					 , CONVERT(BIT, 0)																				AS BIRTH_ADOPT_DED_YN
					 , ''																							AS BIRTH_ADOPT_CODE
					 , ''																							AS INSUR_CODE
					 , 0																							AS INSUR_USE_I
					 , CASE WHEN A.REL_CODE = '0' AND  A.SEQ_NUM = '2' THEN ISNULL(B.MED_AMOUNT_I, 0) + ISNULL(C.MED_AMOUNT_I, 0)
							ELSE 0
						END																							AS MED_AMOUNT_I
					 , CASE WHEN A.REL_CODE = '0' AND A.SEQ_NUM  = '2' THEN ISNULL(B.HIR_AMOUNT_I, 0) + ISNULL(C.HIR_AMOUNT_I, 0)
							ELSE 0
						END																							AS HIR_AMOUNT_I
					 , 0																							AS MED_USE_I
					 , 0																							AS SURGERY_MED_I
					 , ''																							AS EDU_CODE
					 , 0																							AS EDU_USE_I
					 , 0																							AS FIELD_EDUC_I
					 , 0																							AS EDU_PRINCIPAL_RTN_I
					 , 0																							AS CARD_USE_I
					 , 0																							AS CARD_USE_I_A
					 , 0																							AS CARD_USE_I_B
					 , 0																							AS CARD_USE_I_C
					 , 0																							AS DEBIT_CARD_USE_I
					 , 0																							AS DEBIT_CARD_USE_I_A
					 , 0																							AS DEBIT_CARD_USE_I_B
					 , 0																							AS DEBIT_CARD_USE_I_C
					 , 0																							AS INSTITUTE_BILL_I
					 , 0																							AS CASH_USE_I
					 , 0																							AS CASH_USE_I_A
					 , 0																							AS CASH_USE_I_B
					 , 0																							AS CASH_USE_I_C
					 , 0																							AS TRA_MARKET_USE_I
					 , 0																							AS TRA_MARKET_USE_I_A
					 , 0																							AS TRA_MARKET_USE_I_B
					 , 0																							AS TRA_MARKET_USE_I_C
					 , 0																							AS TRAFFIC_USE_I
					 , 0																							AS TRAFFIC_USE_I_A
					 , 0																							AS TRAFFIC_USE_I_B
					 , 0																							AS TRAFFIC_USE_I_C
					 , 0																							AS GIFT_USE_I
					 , 'N'																							AS DIVI
					 , CASE WHEN ISNULL(M.LIVE_GUBUN, '') = '' THEN '1' END											AS LIVE_GUBUN
					 , 0																							AS BOOK_CONCERT_CARD_I
					 , 0																							AS BOOK_CONCERT_CARD_I_A
					 , 0																							AS BOOK_CONCERT_CARD_I_B
					 , 0																							AS BOOK_CONCERT_CARD_I_C
					 , 0																							AS BOOK_CONCERT_CASH_I
					 , 0																							AS BOOK_CONCERT_CASH_I_A
					 , 0																							AS BOOK_CONCERT_CASH_I_B
					 , 0																							AS BOOK_CONCERT_CASH_I_C
					 , 0																							AS BOOK_CONCERT_DEBIT_I
					 , 0																							AS BOOK_CONCERT_DEBIT_I_A
					 , 0																							AS BOOK_CONCERT_DEBIT_I_B
					 , 0																							AS BOOK_CONCERT_DEBIT_I_C
					 , 0																							AS SERIOUS_SICK_MED_I
					 , 0																							AS UNIFORM_USE_I
					 , 0																							AS DEFORM_EDU_USE_I
					 , 0																							AS REAL_LOSS_MED_INSUR_I
				  FROM			  HAD430T  AS A WITH (NOLOCK)
					   INNER JOIN HUM100T  AS M WITH (NOLOCK) ON M.COMP_CODE   = A.COMP_CODE
															 AND M.PERSON_NUMB = A.PERSON_NUMB
					   LEFT  JOIN (SELECT COMP_CODE
										, LEFT(PAY_YYYYMM, 4) AS PAY_YYYY
										, PERSON_NUMB
										, SUM(CASE WHEN DED_CODE  =  'HIR'		   THEN ISNULL(DED_AMOUNT_I, 0) ELSE 0 END) AS HIR_AMOUNT_I
										, SUM(CASE WHEN DED_CODE IN ('MED', 'RME') THEN ISNULL(DED_AMOUNT_I, 0) ELSE 0 END) AS MED_AMOUNT_I
									 FROM HPA400T WITH (NOLOCK)
									WHERE COMP_CODE				= @COMP_CODE
									  AND LEFT(PAY_YYYYMM, 4)	= @YEAR_YYYY
									  AND PERSON_NUMB			= @PERSON_NUMB
									GROUP BY COMP_CODE, LEFT(PAY_YYYYMM, 4), PERSON_NUMB
								  ) AS B			 ON B.COMP_CODE		= A.COMP_CODE
													AND B.PERSON_NUMB	= A.PERSON_NUMB
					   LEFT  JOIN (SELECT COMP_CODE
										, YEAR_YYYY
										, PERSON_NUMB
										, SUM(ISNULL(P1_HIRE_INSUR_I   , 0) + ISNULL(P2_HIRE_INSUR_I   , 0)) AS HIR_AMOUNT_I
										, SUM(ISNULL(P1_MEDICAL_INSUR_I, 0) + ISNULL(P2_MEDICAL_INSUR_I, 0)) AS MED_AMOUNT_I
									 FROM HAD500T WITH (NOLOCK)
									WHERE COMP_CODE		= @COMP_CODE
									  AND YEAR_YYYY		= @YEAR_YYYY
									  AND PERSON_NUMB	= @PERSON_NUMB
									GROUP BY COMP_CODE, YEAR_YYYY, PERSON_NUMB
								  ) AS C			 ON C.COMP_CODE		= A.COMP_CODE
													AND C.PERSON_NUMB	= A.PERSON_NUMB
				 WHERE A.COMP_CODE	 = @COMP_CODE
				   AND A.PERSON_NUMB = @PERSON_NUMB
				   AND A.YEAR_YYYY	 = @YEAR_YYYY - 1
				 ORDER BY DIVI, A.PERSON_NUMB, A.REL_CODE, A.REPRE_NUM, A.SEQ_NUM, A.DEFORM_KIND_CODE
			END

			SET NOCOUNT OFF
			SET ARITHABORT OFF
		END
	</select>

	<select id="had960ukrServiceImpl.selectDir" parameterType="Map" resultType="rMap">
		DECLARE @COMP_CODE		  NVARCHAR(08)				-- (필수) 법인코드
			  , @YEAR_YYYY		  NVARCHAR(04)				-- (필수) 정산년도
			  , @PERSON_NUMB		NVARCHAR(10)				-- (필수) 사번


	--  1. 변수 값 할당 -------------------------------------------------------------------------------------------------
		SET @COMP_CODE		  = #{S_COMP_CODE}
		SET @YEAR_YYYY		  = #{YEAR_YYYY}
		SET @PERSON_NUMB		= #{PERSON_NUMB}

	--  2. @PERSON_NUMB의 사원정보 조회 ---------------------------------------------------------------------------------
		DECLARE		 @DEPT_CODE		  NVARCHAR(08)				-- 부서
			  ,		 @POST_CODE		  NVARCHAR(10)				-- 직위

		SELECT  @DEPT_CODE  = DEPT_CODE
			 ,  @POST_CODE  = POST_CODE
		FROM	HUM100T WITH (NOLOCK)
		WHERE   COMP_CODE   = @COMP_CODE
		AND	 PERSON_NUMB = @PERSON_NUMB

		SET @DEPT_CODE	  = ISNULL(@DEPT_CODE, '')
		SET @POST_CODE	  = ISNULL(@POST_CODE, '')

	--  3. 이전/이후 사번 조회 ------------------------------------------------------------------------------------------
		DECLARE		 @DIR_TYPE		   NVARCHAR(05)				-- (필수) 이전/이후
		SET			 @DIR_TYPE		   = #{DIR_TYPE}

		DECLARE		 @PersonNumb		 NVARCHAR(10)				-- 검색된 사번

		IF @DIR_TYPE = 'PV'	 -- 앞번호 조회
		BEGIN
			SELECT TOP 1
				   @PersonNumb	  = A.PERSON_NUMB
			FROM			  HUM100T  A  WITH (NOLOCK)
				   LEFT  JOIN HAD430T  B  WITH (NOLOCK) ON  B.COMP_CODE	 = A.COMP_CODE
													   AND  B.YEAR_YYYY	 = @YEAR_YYYY
													   AND  B.PERSON_NUMB   = A.PERSON_NUMB
			WHERE  A.COMP_CODE	  = @COMP_CODE
			AND	((A.DEPT_CODE	&lt; @DEPT_CODE) OR
					(A.DEPT_CODE	= @DEPT_CODE AND A.POST_CODE &lt; @POST_CODE) OR
					(A.DEPT_CODE	= @DEPT_CODE AND A.POST_CODE = @POST_CODE AND A.PERSON_NUMB &lt; @PERSON_NUMB) OR
					(@DEPT_CODE	 = ''		 AND @POST_CODE  = ''		 AND @PERSON_NUMB  = ''))
			GROUP  BY A.DEPT_CODE, A.POST_CODE, A.PERSON_NUMB
			ORDER  BY A.DEPT_CODE DESC, A.POST_CODE DESC, A.PERSON_NUMB DESC
		END

		IF @DIR_TYPE = 'NX'	 -- 뒷번호 조회
		BEGIN
			SELECT TOP 1
				   @PersonNumb	  = A.PERSON_NUMB
			FROM			  HUM100T  A  WITH (NOLOCK)
				   LEFT  JOIN HAD430T  B  WITH (NOLOCK) ON  B.COMP_CODE	 = A.COMP_CODE
													   AND  B.YEAR_YYYY	 = @YEAR_YYYY
													   AND  B.PERSON_NUMB   = A.PERSON_NUMB
			WHERE  A.COMP_CODE	  = @COMP_CODE
			AND	((A.DEPT_CODE	> @DEPT_CODE) OR
					(A.DEPT_CODE	= @DEPT_CODE AND A.POST_CODE > @POST_CODE) OR
					(A.DEPT_CODE	= @DEPT_CODE AND A.POST_CODE = @POST_CODE AND A.PERSON_NUMB &gt; @PERSON_NUMB))
			GROUP  BY A.DEPT_CODE, A.POST_CODE, A.PERSON_NUMB
			ORDER  BY A.DEPT_CODE ASC, A.POST_CODE ASC, A.PERSON_NUMB ASC
		END

		SET @PersonNumb	 = CASE WHEN @DIR_TYPE = 'PV' AND ISNULL(@PersonNumb, '') = '' THEN 'FIRST'
								   WHEN @DIR_TYPE = 'NX' AND ISNULL(@PersonNumb, '') = '' THEN 'LAST'
								   ELSE ISNULL(@PersonNumb, '')
							   END

		SELECT @PersonNumb  AS PERSON_NUMB
	</select>
</mapper>