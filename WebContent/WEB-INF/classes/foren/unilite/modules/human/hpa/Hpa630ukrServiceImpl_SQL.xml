<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hpa630ukrServiceImpl">
	<select id="hpa630ukrServiceImpl.selectiwallyn" parameterType="rMap" resultType="String">
		/* hpa630ukrServiceImpl.selectiwallyn */
		SELECT IWALL_YN
		  FROM HBS400T WITH(NOLOCK)
		 WHERE COMP_CODE = #{S_COMP_CODE}
	</select>

	<select id="hpa630ukrServiceImpl.selectListYear1" parameterType="Map" resultType="rMap">
		/* hpa630ukrServiceImpl.selectListYear1 */
		SELECT A.DEPT_CODE
		     , A.DEPT_NAME
		     , A.POST_CODE
		     , A.NAME
		     , A.PERSON_NUMB
		     , A.JOIN_DATE
		     , A.RETR_DATE
		     , A.COMP_CODE
		     , B.DUTY_YYYY
		     , B.YEAR_NUM
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.DUTY_YYYYMMDDFR) AS DUTY_YYYYMMDDFR
		     , uniLITE.fnGetUserDateComp(B.COMP_CODE, B.DUTY_YYYYMMDDTO) AS DUTY_YYYYMMDDTO
		     , (ISNULL(B.IWALL_SAVE,0) + ISNULL(B.JOIN_YEAR_SAVE,0) +
		        ISNULL( B.YEAR_SAVE,0) + ISNULL(B.YEAR_BONUS_I  ,0) - 
		        ISNULL(B.YEAR_USE  ,0) - ISNULL(B.YEAR_REMOVE   ,0))     AS REMAINY
		     , B.IWALL_SAVE
		     , B.JOIN_YEAR_SAVE
		     , B.NEXT_IWALL_SAVE
		     , B.YEAR_SAVE
		     , B.YEAR_BONUS_I
		     , B.YEAR_PROV
		     , B.YEAR_USE
		     , B.DUTY_YYYYMMDDFR_USE
		     , B.DUTY_YYYYMMDDTO_USE
		     , ISNULL(B.YEAR_REMOVE, 0)                                  AS YEAR_REMOVE
		  FROM      HUM100T A WITH(NOLOCK)
		 INNER JOIN HAT700T B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                  AND B.PERSON_NUMB = A.PERSON_NUMB
		                                  AND B.SUPP_TYPE   = 'F'
		 WHERE A.COMP_CODE   = #{S_COMP_CODE}
		   AND B.DUTY_YYYY   = #{DUTY_YYYY}
		<if test="rdoSelect == &quot;Y&quot;">
		   AND A.RETR_DATE   = '00000000'
		</if>
		<if test="rdoSelect == &quot;N&quot;">
		   AND A.RETR_DATE  != '00000000'
		</if>
		<if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		   AND A.DIV_CODE    = #{DIV_CODE}
		</if>
		<if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
		   AND A.PERSON_NUMB = #{PERSON_NUMB}
		</if>
		<if test="@foren.Ognl@isNotEmpty(DEPTS)">
		   AND A.DEPT_CODE IN
		    <foreach collection="DEPTS" item="item" separator="," close=")" open="(">
		        #{item}
		    </foreach>
		</if>
		 ORDER BY  A.DEPT_CODE, A.POST_CODE, A.NAME, A.PERSON_NUMB
	</select>

	<select id="hpa630ukrServiceImpl.selectListYear2" parameterType="Map" resultType="rMap">
		/* hpa630ukrServiceImpl.selectListYear2 */
			         WITH YEAR_DETAIL AS (  SELECT AA.DUTY_YYYYMM
											,AA.DUTY_NUM
											,AA.REMARK
											,AA.COMP_CODE
											,AA.YEAR_GIVE
											,AA.YEAR_USE
											,AA.YEAR_REMOVE
											,AA.GUBUN
											,AA.TOT_YEAR
											,ROW_NUMBER() OVER( ORDER BY AA.GUBUN, AA.DUTY_YYYYMM ) RNUM

									FROM
									(    SELECT '이월연차' AS DUTY_YYYYMM
												, 0 AS DUTY_NUM
												, '' AS REMARK
												, A.COMP_CODE
												, SUM(ISNULL(A.IWALL_SAVE,0)) AS YEAR_GIVE
												, 0 AS YEAR_USE
												, 0  AS YEAR_REMOVE
												, SUM(ISNULL(A.IWALL_SAVE,0)) AS TOT_YEAR
												, '1' AS GUBUN
										FROM            HAT700T A
										     INNER JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
														    	 AND A.PERSON_NUMB = B.PERSON_NUMB
										                         AND A.PERSON_NUMB = #{PERSON_NUMB}
										WHERE A.COMP_CODE = #{S_COMP_CODE}
										  AND A.DUTY_YYYY = #{DUTY_YYYY}
										GROUP BY A.COMP_CODE, 	A.PERSON_NUMB

										UNION ALL

										SELECT '조정연차'                                                                            AS DUTY_YYYYMM
												, 0                                                                               AS DUTY_NUM
												, ''                                                                              AS REMARK
												, A.COMP_CODE
												, (SUM(ISNULL(A.JOIN_YEAR_SAVE,0)) + SUM(ISNULL(A.YEAR_SAVE,0)) +  
												   SUM(ISNULL(A.YEAR_BONUS_I,0)))  - MAX(ISNULL(C.HAT300T_YEAR_GIVE_TOT,0))       AS YEAR_GIVE
												, (SUM(ISNULL(A.YEAR_USE,0))  - MAX(ISNULL(C.HAT300T_YEAR_USE_TOT,0)))			  AS YEAR_USE
												, SUM(ISNULL(A.YEAR_REMOVE,0)) - MAX(ISNULL(C.HAT300T_YEAR_REMOVE_TOT,0))		  AS YEAR_REMOVE
												, ((SUM(ISNULL(A.JOIN_YEAR_SAVE,0)) + SUM(ISNULL(A.YEAR_SAVE,0)) +  
												    SUM(ISNULL(A.YEAR_BONUS_I,0))) - MAX(ISNULL(C.HAT300T_YEAR_GIVE_TOT  ,0))) -
												   (SUM(ISNULL(A.YEAR_USE,0))      - MAX(ISNULL(C.HAT300T_YEAR_USE_TOT   ,0))) -
												   (SUM(ISNULL(A.YEAR_REMOVE,0))   - MAX(ISNULL(C.HAT300T_YEAR_REMOVE_TOT,0)))	  AS TOT_YEAR
												, '2'                                                                             AS GUBUN

										    FROM            HAT700T A WITH (NOLOCK)
										         INNER JOIN HUM100T B WITH (NOLOCK)  ON  A.COMP_CODE   = B.COMP_CODE
																		            AND  A.PERSON_NUMB = B.PERSON_NUMB
																		            AND  A.PERSON_NUMB = #{PERSON_NUMB}
										         LEFT  JOIN (  SELECT COMP_CODE
															        ,PERSON_NUMB
															        ,SUM(ISNULL(YEAR_REMOVE,0)) AS HAT300T_YEAR_REMOVE_TOT --자동소멸연차 합
															        ,SUM(ISNULL(YEAR_USE,0))    AS HAT300T_YEAR_USE_TOT    --연차 사용 합
															        ,SUM(ISNULL(YEAR_GIVE,0))   AS HAT300T_YEAR_GIVE_TOT   --중도입사자 연차 합
														         FROM  HAT300T WITH (NOLOCK)
														        WHERE COMP_CODE   = #{S_COMP_CODE}
														          AND PERSON_NUMB = #{PERSON_NUMB}
														          AND LEFT(DUTY_YYYYMM,4) LIKE #{DUTY_YYYY} +'%'
														        GROUP BY COMP_CODE, PERSON_NUMB
														     ) C ON A.COMP_CODE   = C.COMP_CODE
																AND A.PERSON_NUMB = C.PERSON_NUMB
										   WHERE A.COMP_CODE = #{S_COMP_CODE}
										     AND A.DUTY_YYYY = #{DUTY_YYYY}
										   GROUP BY A.COMP_CODE, A.PERSON_NUMB

										UNION ALL

										SELECT uniLITE.fnGetUserDateComp(A1.COMP_CODE, LEFT(A1.DUTY_YYYYMM,6)) AS  DUTY_YYYYMM
											 , SUM(ISNULL(A.DUTY_NUM, 0) * CONVERT(NUMERIC(18,6), CASE WHEN ISNULL(M1.REF_CODE4, '') = '' THEN '0' ELSE ISNULL(M1.REF_CODE4, '0') END )) AS DUTY_NUM
											 , A1.REMARK
											 , A1.COMP_CODE
											-- , CASE WHEN RIGHT(A1.DUTY_YYYYMM,2) = '01' THEN MAX(ISNULL(C.YEAR_SAVE,0)) + MAX(ISNULL(C.YEAR_BONUS_I,0)) + MAX(ISNULL(A1.YEAR_GIVE, 0))
											--		ELSE  MAX(ISNULL(A1.YEAR_GIVE, 0))
											--   END																				AS YEAR_GIVE
											 , MAX(ISNULL(A1.YEAR_GIVE, 0))  AS YEAR_GIVE
											 , MAX(ISNULL(A1.YEAR_USE, 0)) AS YEAR_USE
											 , MAX(ISNULL(A1.YEAR_REMOVE, 0)) AS YEAR_REMOVE
											-- , CASE WHEN RIGHT(A1.DUTY_YYYYMM,2) = '01' THEN MAX(ISNULL(C.YEAR_SAVE,0)) + MAX(ISNULL(C.YEAR_BONUS_I,0)) + MAX(ISNULL(A1.YEAR_GIVE, 0))
											--		ELSE  MAX(ISNULL(A1.YEAR_GIVE, 0))
											--   END - MAX(ISNULL(A1.YEAR_USE, 0)) - MAX(ISNULL(A1.YEAR_REMOVE, 0)) AS TOT_YEAR
											 ,    MAX(ISNULL(A1.YEAR_GIVE, 0))
											    - MAX(ISNULL(A1.YEAR_USE, 0)) - MAX(ISNULL(A1.YEAR_REMOVE, 0)) AS TOT_YEAR
											 , '3' AS GUBUN
										  FROM  (  SELECT COMP_CODE
														,DUTY_YYYYMM
														,PERSON_NUMB
														,REMARK
														,YEAR_GIVE
														,YEAR_USE
														,ISNULL(YEAR_REMOVE,0) AS YEAR_REMOVE
													 FROM HAT300T WITH (NOLOCK)
													 WHERE COMP_CODE   = #{S_COMP_CODE}
													 AND   PERSON_NUMB = #{PERSON_NUMB}
													 AND   LEFT(DUTY_YYYYMM,4) LIKE #{DUTY_YYYY}+'%'  ) A1
											   LEFT JOIN HAT200T A  WITH (NOLOCK)  ON A1.COMP_CODE   = A.COMP_CODE
																				  AND A1.DUTY_YYYYMM = A.DUTY_YYYYMM
																				  AND A1.PERSON_NUMB = A.PERSON_NUMB
											   LEFT JOIN HAT300T B  WITH (NOLOCK) ON A.COMP_CODE   = B.COMP_CODE
																				  AND A.DUTY_YYYYMM = B.DUTY_YYYYMM
																				  AND A.PERSON_NUMB = B.PERSON_NUMB
											   LEFT  JOIN HAT700T C WITH (NOLOCK) ON  C.COMP_CODE   = A.COMP_CODE
																				  AND C.DUTY_YYYY   = #{DUTY_YYYY}
																				  AND C.PERSON_NUMB = A.PERSON_NUMB
											   LEFT  JOIN BSA100T M1 WITH (NOLOCK) ON M1.COMP_CODE  = A.COMP_CODE
																				  AND M1.SUB_CODE   = A.DUTY_CODE
																				  AND M1.MAIN_CODE  = 'H033'
										 WHERE A1.COMP_CODE = #{S_COMP_CODE}
										--  AND (A.DUTY_NUM &lt;&gt; '0' OR A.DUTY_TIME &lt;&gt; '0')
										   AND A1.PERSON_NUMB = #{PERSON_NUMB}
										   AND A1.DUTY_YYYYMM LIKE #{DUTY_YYYY} +'%'
										 --  AND M1.REF_CODE3 = 'Y'
										  GROUP BY A1.COMP_CODE, uniLITE.fnGetUserDateComp(A1.COMP_CODE, LEFT(A1.DUTY_YYYYMM,6)), A1.DUTY_YYYYMM, A1.REMARK
							   ) AA
				  -- ORDER BY AA.GUBUN
			)

		SELECT AA.DUTY_YYYYMM
				,AA.DUTY_NUM
				,AA.REMARK
				,AA.COMP_CODE
				,AA.YEAR_GIVE
				,AA.YEAR_USE
				,AA.YEAR_REMOVE
				,AA.GUBUN
				,AA.TOT_YEAR
				,ROW_NUMBER() OVER( ORDER BY AA.GUBUN, AA.DUTY_YYYYMM ) RNUM
				,(SELECT SUM(BB.TOT_YEAR) FROM YEAR_DETAIL BB WHERE BB.RNUM <![CDATA[<=]]> AA.RNUM) AS REMAIN_YEAR
		  FROM YEAR_DETAIL AA
		 ORDER BY AA.GUBUN, AA.DUTY_YYYYMM
	</select>

	<select id="hpa630ukrServiceImpl.selectListInfo" parameterType="Map" resultType="rMap">
		/* hpa630ukrServiceImpl.selectListInfo */
		SELECT DUTY_YYYY
		     , PERSON_NUMB
		     , SUPP_TYPE
		     , YEAR_NUM
		     , uniLITE.fnGetUserDateComp(COMP_CODE, DUTY_YYYYMMDDFR) DUTY_YYYYMMDDFR
		     , uniLITE.fnGetUserDateComp(COMP_CODE, DUTY_YYYYMMDDTO) DUTY_YYYYMMDDTO
		     , (IWALL_SAVE + JOIN_YEAR_SAVE + YEAR_SAVE + YEAR_BONUS_I - YEAR_USE ) AS REMAINY
		     , IWALL_SAVE
		     , JOIN_YEAR_SAVE
		     , NEXT_IWALL_SAVE
		     , YEAR_SAVE
		     , YEAR_BONUS_I
		     , YEAR_PROV
		     , YEAR_USE
		     , DUTY_YYYYMMDDFR_USE
		     , DUTY_YYYYMMDDTO_USE
		     , COMP_CODE
		     , ISNULL(YEAR_REMOVE, 0) AS YEAR_REMOVE
		  FROM HAT700T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND SUPP_TYPE   = 'F'  /* 지급구분 조건 추가  */
		   AND DUTY_YYYY   = #{DUTY_YYYY}
	</select>

	<update id="hpa630ukrServiceImpl.updateForm" parameterType="Map">
		/* hpa630ukrServiceImpl.updateForm */
		UPDATE HAT700T
		   SET IWALL_SAVE      = #{IWALL_SAVE}
		     , JOIN_YEAR_SAVE  = #{JOIN_YEAR_SAVE}
		     , YEAR_SAVE       = #{YEAR_SAVE}
		     , YEAR_BONUS_I    = #{YEAR_BONUS_I}
		     , YEAR_USE        = #{YEAR_USE}
		     , YEAR_NUM        = #{YEAR_SAVE} + #{YEAR_BONUS_I} + #{IWALL_SAVE} + #{JOIN_YEAR_SAVE}
		     , YEAR_PROV       = #{YEAR_PROV}
		     , NEXT_IWALL_SAVE = #{NEXT_IWALL_SAVE}
		     , YEAR_REMOVE     = #{YEAR_REMOVE}
		     , UPDATE_DB_USER  = #{S_USER_ID}
		     , UPDATE_DB_TIME  = GETDATE()
		 WHERE DUTY_YYYY    = #{DUTY_YYYY}
		   AND PERSON_NUMB  = #{PERSON_NUMB}
		   AND SUPP_TYPE    = 'F'
		   AND COMP_CODE    = #{S_COMP_CODE}
	</update>



	<!-- Excel Upload-->
	<update id="hpa630ukrServiceImpl.insertExcelUpload1" parameterType="Map">
		/* hpa630ukrServiceImpl.insertExcelUpload1 */
		/* temp Table에 insert */
		INSERT INTO L_HAT700T
		    (
		       _EXCEL_JOBID
		     , _EXCEL_ROWNUM
		     , _EXCEL_HAS_ERROR
		     , _EXCEL_ERROR_MSG
		     , COMP_CODE
		     , DUTY_YYYY
		     , PERSON_NUMB
		     , YEAR_USE
		     , NEXT_IWALL_SAVE
		     , YEAR_PROV
		     , INSERT_DB_USER
		     , INSERT_DB_TIME
		)
		VALUES (
		       #{_EXCEL_JOBID}
		     , #{_EXCEL_ROWNUM}
		     , #{_EXCEL_HAS_ERROR ,jdbcType=VARCHAR}
		     , #{_EXCEL_ERROR     ,jdbcType=VARCHAR}
		     , #{S_COMP_CODE}
		     , #{DUTY_YYYY}
		     , #{PERSON_NUMB}
		     , #{YEAR_USE}
		     , 0
		     , 0
		     , #{S_USER_ID}
		     , GETDATE()
		)
	</update>

	<!-- 임시 테이블에 insert된 데이터 조회 -->
	<select id="hpa630ukrServiceImpl.getData1" parameterType="Map" resultType="rMap">
		/* hpa630ukrServiceImpl.getData1 */
		SELECT *
		  FROM L_HAT700T WITH(NOLOCK)
		 WHERE _EXCEL_JOBID  = #{_EXCEL_JOBID}
	</select>

	<select id="hpa630ukrServiceImpl.selectExcelUploadSheet1" parameterType="Map" resultType="rMap">
		/* hpa630ukrServiceImpl.selectExcelUploadSheet1 */
		SELECT A._EXCEL_JOBID
		     , A._EXCEL_ROWNUM
		     , A._EXCEL_HAS_ERROR
		     , A._EXCEL_ERROR_MSG
		     , B.DEPT_CODE
		     , B.DEPT_NAME
		     , B.POST_CODE
		     , B.NAME                     --이름
		     , A.PERSON_NUMB              --사번
		     , B.JOIN_DATE
		     , B.RETR_DATE
		     , A.COMP_CODE
		     , A.DUTY_YYYY
		     , A.YEAR_USE                 --사용연차
		     --20210623 수정: 차년이월대상년차는 남은연차 - 연차수당대상연차(엑셀데이터)로 set하도록 수정
		     , A.NEXT_IWALL_SAVE          --차년이월대상
		     --, (C.IWALL_SAVE + C.JOIN_YEAR_SAVE + C.YEAR_SAVE + C.YEAR_BONUS_I - A.YEAR_USE - C.YEAR_REMOVE) - A.YEAR_PROV AS NEXT_IWALL_SAVE
		     --, A.YEAR_PROV                --연차수당대상
		     , (C.IWALL_SAVE + C.JOIN_YEAR_SAVE + C.YEAR_SAVE + C.YEAR_BONUS_I - A.YEAR_USE - C.NEXT_IWALL_SAVE) AS YEAR_PROV
		     , C.YEAR_NUM
		     , uniLITE.fnGetUserDateComp(C.COMP_CODE, C.DUTY_YYYYMMDDFR) AS DUTY_YYYYMMDDFR
		     , uniLITE.fnGetUserDateComp(C.COMP_CODE, C.DUTY_YYYYMMDDTO) AS DUTY_YYYYMMDDTO
		     , (C.IWALL_SAVE + C.JOIN_YEAR_SAVE + C.YEAR_SAVE + C.YEAR_BONUS_I - A.YEAR_USE - C.YEAR_REMOVE) AS REMAINY
		     --, (C.IWALL_SAVE + C.JOIN_YEAR_SAVE + C.YEAR_SAVE + C.YEAR_BONUS_I - C.YEAR_USE ) AS REMAINY   --20210608 수정
		     , C.IWALL_SAVE
		     , C.JOIN_YEAR_SAVE
		     , C.YEAR_SAVE
		     , C.YEAR_BONUS_I
		     , C.DUTY_YYYYMMDDFR_USE
		     , C.DUTY_YYYYMMDDTO_USE
		  FROM       L_HAT700T A WITH(NOLOCK)
		  LEFT JOIN  HUM100T   B WITH(NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                     AND B.PERSON_NUMB = A.PERSON_NUMB
		  LEFT JOIN  HAT700T   C WITH(NOLOCK) ON C.COMP_CODE   = B.COMP_CODE
		                                     AND C.PERSON_NUMB = B.PERSON_NUMB
		 WHERE _EXCEL_JOBID = #{_EXCEL_JOBID}
		   AND C.DUTY_YYYY  = A.DUTY_YYYY
		 ORDER BY _EXCEL_JOBID, _EXCEL_ROWNUM
	</select>
</mapper>