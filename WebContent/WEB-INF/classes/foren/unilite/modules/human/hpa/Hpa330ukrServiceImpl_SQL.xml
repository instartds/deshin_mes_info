<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hpa330ukrServiceImpl">

	<select id="hpa330ukrServiceImpl.selectList1" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList1*/
		SELECT uniLITE.fnGetUserDateComp(HPA.COMP_CODE, LEFT(HPA.PAY_YYYYMM,6)) PAY_YYYYMM
             , CAST(HPA.SUPP_TYPE AS VARCHAR(02)) SUPP_TYPE
             , HPA.PERSON_NUMB
             , CAST(HPA.WAGES_CODE AS VARCHAR(03)) AS WAGES_CODE
             , HBS.WAGES_NAME AS WAGES_NAME
             , CAST(HPA.AMOUNT_I AS DECIMAL(18,4)) AMOUNT_I
             , HPA.COMP_CODE
             , HPA.UPDATE_DB_USER
             , HPA.UPDATE_DB_TIME
          FROM HPA300T HPA
                         INNER JOIN HBS300T HBS
                                 ON HBS.COMP_CODE  = HPA.COMP_CODE
                                AND HBS.WAGES_CODE = HPA.WAGES_CODE
                                AND HBS.CODE_TYPE  = '1'
         WHERE HPA.COMP_CODE = #{S_COMP_CODE}
             AND HPA.PAY_YYYYMM = #{PAY_YYYYMM}
             <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
             AND HPA.SUPP_TYPE = #{SUPP_TYPE}
             </if>
             AND HPA.PERSON_NUMB = #{PERSON_NUMB}
         ORDER BY HBS.PRINT_SEQ , HBS.WAGES_CODE
	</select>

	<select id="hpa330ukrServiceImpl.selectList1_1" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList1_1 */
		SELECT uniLITE.fnGetUserDateComp(COMP_CODE, Left(#{PAY_YYYYMM}, 6)) PAY_YYYYMM
                 , #{SUPP_TYPE} AS SUPP_TYPE
                 , #{PERSON_NUMB} AS PERSON_NUMB
                 , WAGES_CODE
                 , WAGES_NAME
                 , 0 AS AMOUNT_I
                 , COMP_CODE
                 , UPDATE_DB_USER
                 , UPDATE_DB_TIME
              FROM HBS300T
             WHERE COMP_CODE = #{S_COMP_CODE}
               AND USE_YN = 'Y'
             ORDER BY PRINT_SEQ , WAGES_CODE
	</select>

	<select id="hpa330ukrServiceImpl.selectList2" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList2*/
		SELECT uniLITE.fnGetUserDateComp(HPA.COMP_CODE, LEFT(HPA.PAY_YYYYMM,6)) PAY_YYYYMM
             , CAST(HPA.SUPP_TYPE AS VARCHAR(02)) AS SUPP_TYPE
             , HPA.PERSON_NUMB
             , CAST(HPA.DED_CODE AS VARCHAR(03)) DED_CODE
             , B1.CODE_NAME AS WAGES_NAME
             , CAST(HPA.DED_AMOUNT_I AS DECIMAL(18,4)) DED_AMOUNT_I
             , HPA.COMP_CODE
             , HPA.UPDATE_DB_USER
             , HPA.UPDATE_DB_TIME
          FROM HPA400T HPA
                         INNER JOIN BSA100T B1
                                 ON B1.COMP_CODE = HPA.COMP_CODE
                                AND B1.MAIN_CODE = 'H034'
                                AND B1.SUB_CODE  = HPA.DED_CODE
         WHERE HPA.COMP_CODE  = #{S_COMP_CODE}
           AND HPA.PAY_YYYYMM = #{PAY_YYYYMM}
           <if test="@foren.Ognl@isNotEmpty(SUPP_TYPE)">
		   AND HPA.SUPP_TYPE = #{SUPP_TYPE}
           </if>
		   AND HPA.PERSON_NUMB = #{PERSON_NUMB}
		ORDER BY B1.REF_CODE2
	</select>

	<select id="hpa330ukrServiceImpl.selectList2_1" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList2_1 */
		SELECT uniLITE.fnGetUserDateComp(COMP_CODE, Left(#{PAY_YYYYMM}, 6)) AS PAY_YYYYMM
	         , #{SUPP_TYPE} AS SUPP_TYPE
	         , #{PERSON_NUMB} AS PERSON_NUMB
	         , B.SUB_CODE AS DED_CODE
	         , B.CODE_NAME AS WAGES_NAME
	         , '0.0000' AS DED_AMOUNT_I
	         , B.COMP_CODE
	         , B.UPDATE_DB_USER
	         , B.UPDATE_DB_TIME
	      FROM BSA100T B
	     WHERE COMP_CODE = #{S_COMP_CODE}
	       AND SUB_CODE &lt;&gt; '$'
	       AND B.MAIN_CODE = 'H034'
	       AND B.USE_YN = 'Y'
	</select>

	<select id="hpa330ukrServiceImpl.selectList3" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList3*/
		SELECT 	A.DIV_CODE
		 , CAST(A.PAY_YYYYMM + '01' AS VARCHAR(08))       AS PAY_YYYYMM
         , CAST(A.SUPP_TYPE AS VARCHAR(02))               AS SUPP_TYPE
         , A.PERSON_NUMB
         , B.NAME
         , CAST(A.DEPT_CODE AS VARCHAR(08))               AS DEPT_CODE
         , CAST(A.DEPT_NAME AS VARCHAR(30))               AS DEPT_NAME
         , CAST(A.ABIL_CODE AS VARCHAR(02))               AS ABIL_CODE
         , CAST(A.POST_CODE AS VARCHAR(02))               AS POST_CODE
         , CAST(A.PAY_CODE AS VARCHAR(01))                AS PAY_CODE
         , CAST(A.TAX_CODE AS VARCHAR(01))                AS TAX_CODE
         , CAST(A.EXCEPT_TYPE AS VARCHAR(01))             AS EXCEPT_TYPE
         , CAST(A.EMPLOY_TYPE AS VARCHAR(02))             AS EMPLOY_TYPE
         , CAST(A.SUPP_DATE AS VARCHAR(08))               AS SUPP_DATE
         , CAST(A.PAY_PROV_FLAG AS VARCHAR(01))           AS PAY_PROV_FLAG
         , CAST(A.OT_KIND AS VARCHAR(04))                 AS OT_KIND
         , CAST(A.BONUS_KIND AS VARCHAR(04))              AS BONUS_KIND
         , CAST(A.COM_DAY_WAGES AS DECIMAL(18,4))         AS COM_DAY_WAGES
         , CAST(A.LONG_MONTH AS DECIMAL(6,0))             AS LONG_MONTH
         , CAST(A.SPOUSE AS VARCHAR(01))                  AS SPOUSE
         , CAST(A.WOMAN AS VARCHAR(01))                   AS WOMAN
         , ISNULL(CAST(A.SUPP_NUM AS DECIMAL(2,0)), 0)    AS SUPP_NUM
         , CAST(A.DEFORM_NUM AS DECIMAL(2,0))             AS DEFORM_NUM
         , CAST(A.AGED_NUM AS DECIMAL(2,0))               AS AGED_NUM
         , ISNULL(CAST(A.MED_AVG_I AS DECIMAL(18,0)), 0)  AS MED_AVG_I
         , ISNULL(CAST(A.ANU_BASE_I AS DECIMAL(18,0)), 0) AS ANU_BASE_I
         , CAST(A.BONUS_STD_I AS DECIMAL(18,4))           AS BONUS_STD_I
         , CAST(A.BONUS_RATE AS DECIMAL(7,3))             AS BONUS_RATE
         , CAST(A.INCE_WAGES_RATE AS DECIMAL(7,3))        AS INCE_WAGES_RATE
         , CAST(A.PLUS_RATE AS DECIMAL(7,3))              AS PLUS_RATE
         , CAST(A.MINUS_RATE AS DECIMAL(7,3))             AS MINUS_RATE
         , CAST(A.SUPP_RATE AS DECIMAL(7,3))              AS SUPP_RATE
         , CAST(A.BONUS_I AS DECIMAL(18,4))               AS BONUS_I
         , CAST(A.BONUS_TOTAL_I AS DECIMAL(18,4))         AS BONUS_TOTAL_I
         , CAST(A.PAY_TOTAL_I AS DECIMAL(18,4))           AS PAY_TOTAL_I
         --, CAST(D.TAX_EXEMPTION1_I AS DECIMAL(18,4))      AS TAX_EXEMPTION1_I
         --, CAST(D.TAX_EXEMPTION2_I AS DECIMAL(18,4))      AS TAX_EXEMPTION2_I
         --, CAST(D.TAX_EXEMPTION3_I AS DECIMAL(18,4))      AS TAX_EXEMPTION3_I
         --, CAST(D.TAX_EXEMPTION4_I AS DECIMAL(18,4))      AS TAX_EXEMPTION4_I
         --, CAST(D.TAX_EXEMPTION6_I AS DECIMAL(18,4))      AS TAX_EXEMPTION6_I
         --, CAST(ISNULL(D.TAX_EXEMPTION5_I, 0) AS DECIMAL(18,4))
         --												  AS TAX_EXEMPTION5_I

         , CAST(A.TAX_EXEMPTION1_I AS DECIMAL(18,4))      AS TAX_EXEMPTION1_I
         , CAST(A.TAX_EXEMPTION2_I AS DECIMAL(18,4))      AS TAX_EXEMPTION2_I
         , CAST(A.TAX_EXEMPTION3_I AS DECIMAL(18,4))      AS TAX_EXEMPTION3_I
         , CAST(A.TAX_EXEMPTION4_I AS DECIMAL(18,4))      AS TAX_EXEMPTION4_I
         , CAST(A.TAX_EXEMPTION6_I AS DECIMAL(18,4))      AS TAX_EXEMPTION6_I
         , CAST(ISNULL(A.TAX_EXEMPTION5_I, 0) AS DECIMAL(18,4))
         												  AS TAX_EXEMPTION5_I

        --, CAST((ISNULL(A.SUPP_TOTAL_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION1_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION2_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION3_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION4_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION6_I, 0)
		--	     - ISNULL(D.TAX_EXEMPTION5_I, 0) ) AS DECIMAL(18,4))

         , CAST((ISNULL(A.SUPP_TOTAL_I, 0)
			     - ISNULL(A.TAX_EXEMPTION1_I, 0)
			     - ISNULL(A.TAX_EXEMPTION2_I, 0)
			     - ISNULL(A.TAX_EXEMPTION3_I, 0)
			     - ISNULL(A.TAX_EXEMPTION4_I, 0)
			     - ISNULL(A.TAX_EXEMPTION6_I, 0)
			     - ISNULL(A.TAX_EXEMPTION5_I, 0) ) AS DECIMAL(18,4))

			     										  AS TAX_AMOUNT_I
         , CAST(A.BONUS_TAX_I AS DECIMAL(18,4))           AS BONUS_TAX_I
         , CAST(A.SUPP_TOTAL_I AS DECIMAL(18,4))          AS SUPP_TOTAL_I
         , CAST(A.DED_TOTAL_I AS DECIMAL(18,4))           AS DED_TOTAL_I
         , CAST(A.REAL_AMOUNT_I AS  DECIMAL(18,4))        AS REAL_AMOUNT_I
         , CAST(A.YEAR_CRT AS DECIMAL(4,2))               AS YEAR_CRT
         , CAST(A.YEAR_ADD AS DECIMAL(4,2))               AS YEAR_ADD
         , CAST(A.MONTH_CRT AS DECIMAL(4,2))              AS MONTH_CRT
         , CAST(A.MON_YEAR_USE AS DECIMAL(4,2))           AS MON_YEAR_USE
         , CAST(A.MON_YEAR_PROV AS DECIMAL(4,2))          AS MON_YEAR_PROV
         , CAST(A.RETR_FLAG AS VARCHAR(01))               AS RETR_FLAG
         , CAST(A.AUTO_RECORD_NUM AS VARCHAR(20))         AS AUTO_RECORD_NUM
         , B.JOIN_DATE
         , B.RETR_DATE
         , B.WAGES_STD_I
         , A.COM_DAY_WAGES
         , A.DIV_CODE
         , A.SECT_CODE
         , A.MAKE_SALE
         , A.COST_KIND
         , A.PAY_GUBUN
         , A.PAY_GUBUN2
         , CAST(A.MED_GRADE AS VARCHAR(04))                 AS MED_GRADE
         , CAST(ISNULL(A.BUSI_SHARE_I, 0) AS DECIMAL(18,0)) AS BUSI_SHARE_I
         , CAST(A.CHILD_20_NUM AS DECIMAL(2,0))             AS CHILD_20_NUM
         , COM_PAY_FLAG
         , CAST(ISNULL(A.NON_TAX_I, 0) AS DECIMAL(18,4))    AS NON_TAX_I
         , CAST(ISNULL(A.WORKER_COMPEN_I, 0) AS DECIMAL(18,0)) AS WORKER_COMPEN_I
		 , ISNULL(A.TAXRATE_BASE, '2')               		AS TAXRATE_BASE
         , CASE WHEN C.CLOSE_DATE IS NOT NULL
              THEN '마감'
              ELSE '미마감'
           END AS CLOSE_YN
      FROM HPA600T A
                   LEFT OUTER JOIN HUM100T B   ON A.COMP_CODE   = B.COMP_CODE
				                              AND A.PERSON_NUMB = B.PERSON_NUMB

                   LEFT JOIN HBS910T C 		   ON C.COMP_CODE	= A.COMP_CODE
		                                      AND C.PERSON_NUMB = A.PERSON_NUMB
		                                      AND C.CLOSE_DATE  = A.PAY_YYYYMM
		                                      AND C.CLOSE_TYPE  = A.SUPP_TYPE
				--LEFT  JOIN (SELECT A.COMP_CODE
			    --                    , A.PAY_YYYYMM
			    --                    , A.SUPP_TYPE
			    --                    , A.PERSON_NUMB
			    --                    , SUM(CASE WHEN A.NONTAX_CODE IN ('O01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 연장근로 비과세
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION1_I
			    --                    , SUM(CASE WHEN A.NONTAX_CODE IN ('P01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 식대비과세
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION2_I
			    --                    , SUM(CASE WHEN A.NONTAX_CODE IN ('M01', 'M02', 'M03')  -- 국외근로 비과세
			    --                                    THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION4_I
			    --                    , SUM(CASE WHEN A.NONTAX_CODE IN ('Q01') THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)  -- 자녀양육비비과세
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION5_I
			    --                    , SUM(CASE WHEN A.NONTAX_CODE IN ('H06', 'H07', 'H08', 'H09', 'H10')  -- 연구활동비과세
			    --                                    THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION6_I
			    --                    , SUM(CASE WHEN A.NONTAX_CODE NOT IN ('O01', 'P01', 'M01', 'M02', 'M03', 'Q01', 'H06', 'H07', 'H08', 'H09', 'H10')  -- 기타비과세
			    --                                    THEN ISNULL(A.LIMIT_PAY_SUPP_I, 0)
			    --                               ELSE 0
			    --                          END)               AS TAX_EXEMPTION3_I
			    --                 FROM            HPA800T A WITH (NOLOCK)
			    --                GROUP BY A.COMP_CODE, A.PAY_YYYYMM, A.SUPP_TYPE, A.PERSON_NUMB
			    --              ) D                       ON D.COMP_CODE   = A.COMP_CODE
			    --                                       AND D.PAY_YYYYMM  = A.PAY_YYYYMM
			    --                                       AND D.SUPP_TYPE   = A.SUPP_TYPE
			    --                                       AND D.PERSON_NUMB = A.PERSON_NUMB
        WHERE A.COMP_CODE = #{S_COMP_CODE}
			AND A.PAY_YYYYMM = #{PAY_YYYYMM}
			AND A.SUPP_TYPE = #{SUPP_TYPE}
			AND A.PERSON_NUMB = #{PERSON_NUMB}
	</select>

	<select id="hpa330ukrServiceImpl.getHumanMaster"  parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.getHumanMaster*/
		SELECT  H.NAME
		      , H.PERSON_NUMB
		      , M7.SUPP_DATE                                                     AS SUPP_DATE
		      , ISNULL(M7.POST_CODE, H.POST_CODE) 								 AS POST_CODE
		      , ISNULL(M8.CODE_NAME, M1.CODE_NAME)        						 AS POST_CODE_NAME
		      , ISNULL(M7.DEPT_CODE, H.DEPT_CODE)								 AS DEPT_CODE
		      , ISNULL(M7.DEPT_NAME, H.DEPT_NAME)								 AS DEPT_NAME
		      , uniLITE.fnGetUserDateComp(H.COMP_CODE, H.JOIN_DATE)              AS JOIN_DATE
		      , ISNULL(M7.ABIL_CODE, H.ABIL_CODE) 								 AS ABIL_CODE
		      , ISNULL(M9.CODE_NAME, M2.CODE_NAME)        						 AS ABIL_NAME
		      , CASE WHEN H.RETR_DATE = '00000000' THEN ''
		             ELSE uniLITE.fnGetUserDateComp(H.COMP_CODE, H.RETR_DATE)
		        END                                                         	 AS RETR_DATE
		      , H.SECT_CODE
		      , M3.DIV_NAME 	                                                 AS SECT_NAME
		      , H.JOB_CODE
		      , M4.CODE_NAME						                             AS JOB_NAME
		      , H.PAY_CODE
		      , H.TAX_CODE
		      , H.OT_KIND
		      , H.PAY_PROV_FLAG
		      , H.EMPLOY_TYPE
		      , H.MED_GRADE
		      , H.ANU_BASE_I
		      , H.SPOUSE
		      , H.SUPP_AGED_NUM
		      , H.BONUS_KIND
		      , uniLITE.fnCipherDecrypt(H.REPRE_NUM, 'R')                   	 AS REPRE_NUM
		      , H.WOMAN
		      , H.ZIP_CODE
		      , H.KOR_ADDR
		      , H.DEFORM_NUM
		      , H.AGED_NUM
		      , H.BRING_CHILD_NUM
		      , ISNULL(H.ANNUAL_SALARY_I,0)                                 	AS ANNUAL_SALARY_I
		      , ISNULL(H.WAGES_STD_I    ,0)                                  	AS WAGES_STD_I
		      , ISNULL(H.BONUS_STD_I    ,0)                                  	AS BONUS_STD_I
		      , ISNULL(H.COM_DAY_WAGES  ,0)                                  	AS COM_DAY_WAGES
		      , ISNULL(H.COM_YEAR_WAGES ,0)                                  	AS COM_YEAR_WAGES
		      , H.MED_INSUR_NO
		      , M5.REF_CODE1                                                 	AS PAY_PROV_FLAG_DAT
		      , H.SEX_CODE
		      , B1.STD_AMOUNT_I                                              	AS STD_AMOUNT_I_01
		      , B2.STD_AMOUNT_I                                              	AS STD_AMOUNT_I_02
		      , B1.INSUR_AMOUNT_I                                            	AS INSUR_AMOUNT_I_01
		      , B2.INSUR_AMOUNT_I                                            	AS INSUR_AMOUNT_I_02
		      , H.TELEPHON
		      , H.DIV_CODE
		      , H.MAKE_SALE
		      , H.COST_KIND
		      , H.MED_AVG_I
		      , H.NATION_CODE
		      , H.LIVE_GUBUN
		      , H.CHILD_20_NUM
		      , H.PENS_GRADE
		      , H.MED_INSUR_I
		      , H.ANU_INSUR_I
		      , H.HIRE_INSUR_TYPE
		      , H.WORK_COMPEN_YN
		      , uniLITE.fnCipherDecrypt(H.REPRE_NUM, 'A')                    	AS REPRE_NUM2
		      , H.DED_TYPE
		      , 0                                                            	AS DOC_ID
		      , ISNULL(H.BANK_CODE1, '')                                     	AS BANK_CODE1
		      , ISNULL(C1.CUSTOM_NAME, '')                                   	AS BANK_NAME1
		      , uniLITE.fnCipherDecrypt(H.BANK_ACCOUNT1, '')                 	AS BANK_ACCOUNT1
		      , ISNULL(H.TAXRATE_BASE, '2')                                  	AS TAXRATE_BASE
		      , H.HIRE_AVG_I                                                    AS HIRE_AVG_I

			  , CASE WHEN M7.PAY_YYYYMM > LEFT(H.YOUTH_EXEMP_DATE, 6)
			  		 THEN ''
			  		 ELSE H.YOUTH_EXEMP_RATE
				 END AS YOUTH_EXEMP_RATE

			  , CASE WHEN M7.PAY_YYYYMM > LEFT(H.YOUTH_EXEMP_DATE, 6)
			  		 THEN ''
			  		 ELSE H.YOUTH_EXEMP_DATE
				 END AS YOUTH_EXEMP_DATE

		FROM                HUM100T   H  WITH (NOLOCK)
		        LEFT  JOIN  HBS500T   B1 WITH (NOLOCK) ON B1.COMP_CODE  = H.COMP_CODE
		                                              AND B1.GRADE      = H.MED_GRADE
		                                              AND B1.INSUR_TYPE = 2
		        LEFT  JOIN  HBS500T   B2 WITH (NOLOCK) ON B2.COMP_CODE  = H.COMP_CODE
		                                              AND B2.GRADE      = H.PENS_GRADE
		                                              AND B2.INSUR_TYPE = 1
		        LEFT  JOIN  BCM100T   C1 WITH (NOLOCK) ON C1.COMP_CODE   = H.COMP_CODE
		                                              AND C1.CUSTOM_CODE = H.BANK_CODE1
		                                              AND C1.CUSTOM_TYPE = '4'
		        LEFT  JOIN  BSA100T   M1 WITH (NOLOCK) ON M1.COMP_CODE  = H.COMP_CODE
		                                              AND M1.MAIN_CODE  = 'H005'
		                                              AND M1.SUB_CODE   = H.POST_CODE
		        LEFT  JOIN  BSA100T   M2 WITH (NOLOCK) ON M2.COMP_CODE  = H.COMP_CODE
		                                              AND M2.MAIN_CODE  = 'H006'
		                                              AND M2.SUB_CODE   = H.ABIL_CODE
		        LEFT  JOIN  BOR120T   M3 WITH (NOLOCK) ON M3.COMP_CODE  = H.COMP_CODE
		                                              AND M3.DIV_CODE   = H.SECT_CODE
		        LEFT  JOIN  BSA100T   M4 WITH (NOLOCK) ON M4.COMP_CODE  = H.COMP_CODE
		                                              AND M4.MAIN_CODE  = 'H008'
		                                              AND M4.SUB_CODE   = H.JOB_CODE
		        LEFT  JOIN  BSA100T   M5 WITH (NOLOCK) ON M5.COMP_CODE  = H.COMP_CODE
		                                              AND M5.MAIN_CODE  = 'H031'
		                                              AND M5.SUB_CODE   = H. PAY_PROV_FLAG
		        LEFT  JOIN  BSA100T   M6 WITH (NOLOCK) ON M6.COMP_CODE  = H.COMP_CODE
		                                              AND M6.MAIN_CODE  = 'H011'
		                                              AND M6.SUB_CODE   = H.PAY_GUBUN
		        LEFT  JOIN  HPA600T   M7 WITH (NOLOCK) ON M7.COMP_CODE  = H.COMP_CODE
                                                      AND M7.PERSON_NUMB = H.PERSON_NUMB
                                                      
		        LEFT  JOIN  BSA100T   M8 WITH (NOLOCK) ON M8.COMP_CODE  = M7.COMP_CODE
		                                              AND M8.MAIN_CODE  = 'H005'
		                                              AND M8.SUB_CODE   = M7.POST_CODE
		        LEFT  JOIN  BSA100T   M9 WITH (NOLOCK) ON M9.COMP_CODE  = M7.COMP_CODE
		                                              AND M9.MAIN_CODE  = 'H006'
		                                              AND M9.SUB_CODE   = M7.ABIL_CODE
                                                      

		WHERE   H.COMP_CODE = #{S_COMP_CODE}
		AND     H.PERSON_NUMB   LIKE #{PERSON_NUMB}
		AND     H.NAME          LIKE N'%'
		AND    M7.PAY_YYYYMM =#{PAY_YYYYMM}
		AND    M7.SUPP_TYPE  =#{SUPP_TYPE}
	</select>

	<select id="hpa330ukrServiceImpl.selectList4" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.selectList4*/
		SELECT B.CODE_NAME
	         , A.DUTY_NUM
	         , A.DUTY_TIME
	         , C.WORK_TIME
	      FROM HAT200T A WITH (NOLOCK)
          INNER JOIN BSA100T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE
                 							AND A.DUTY_CODE = B.SUB_CODE
           LEFT JOIN HAT300T C WITH (NOLOCK) ON C.COMP_CODE = A.COMP_CODE
                                            AND C.DUTY_YYYYMM = A.DUTY_YYYYMM
                                            AND C.PERSON_NUMB = A.PERSON_NUMB
	     WHERE A.COMP_CODE   = #{S_COMP_CODE}
	       AND B.MAIN_CODE   = 'H033'
	       AND A.DUTY_YYYYMM = #{PAY_YYYYMM}
	       AND A.PERSON_NUMB = #{PERSON_NUMB}
	     ORDER BY B.REF_CODE2, SUB_CODE
	</select>
	<select id="hpa330ukrServiceImpl.getPrNxPersonNumb" parameterType="Map" resultType="rMap">

		 <if test="INIT_CHK == &quot;N&quot;">
    		/* hpa330ukrServiceImpl.getPrNxPersonNumb */
    		SELECT PV_D = ISNULL((
    	        SELECT MAX(A.PERSON_NUMB)
    				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
    								   ON A.COMP_CODE = B.COMP_CODE
    								  AND A.PERSON_NUMB = B.PERSON_NUMB
    				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
    				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
    				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
    				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
    				), 'BOF' )
    		, PV_NAME = ISNULL((
    	        SELECT NAME FROM HUM100T
    	          WHERE COMP_CODE = #{S_COMP_CODE}
    	          AND PERSON_NUMB = (SELECT MAX(A.PERSON_NUMB)
    				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
    								   ON A.COMP_CODE = B.COMP_CODE
    								  AND A.PERSON_NUMB = B.PERSON_NUMB
    				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
    				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
    				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
    				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
    				)), 'BOF' )
    	      , NX_D = ISNULL((
    	           SELECT MIN(A.PERSON_NUMB)
    					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
    									   ON A.COMP_CODE = B.COMP_CODE
    									  AND A.PERSON_NUMB = B.PERSON_NUMB
    					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
    					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
    					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
    					   AND A.PERSON_NUMB &gt; #{PERSON_NUMB}
    	          ), 'EOF' )
              , NX_NAME = ISNULL((
    	           SELECT NAME FROM HUM100T
    	          WHERE COMP_CODE = #{S_COMP_CODE}
    	          AND PERSON_NUMB = (SELECT MIN(A.PERSON_NUMB)
    					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
    									   ON A.COMP_CODE = B.COMP_CODE
    									  AND A.PERSON_NUMB = B.PERSON_NUMB
    					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
    					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
    					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
    					   AND A.PERSON_NUMB &gt; #{PERSON_NUMB}
    	          )), 'EOF' )
	          </if>
	      <if test="INIT_CHK == &quot;Y&quot;">
        		/* hpa330ukrServiceImpl.getPrNxPersonNumbInit */
        		SELECT PV_D = ISNULL((
        	        SELECT MAX(A.PERSON_NUMB)
        				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
        								   ON A.COMP_CODE = B.COMP_CODE
        								  AND A.PERSON_NUMB = B.PERSON_NUMB
        				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
        				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
        				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
        				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
        				), 'BOF' )
        		, PV_NAME = ISNULL((
        	        SELECT NAME FROM HUM100T
        	          WHERE COMP_CODE = #{S_COMP_CODE}
        	          AND PERSON_NUMB = (SELECT MAX(A.PERSON_NUMB)
        				  FROM HPA600T A LEFT OUTER JOIN HUM100T B
        								   ON A.COMP_CODE = B.COMP_CODE
        								  AND A.PERSON_NUMB = B.PERSON_NUMB
        				 WHERE A.COMP_CODE  = #{S_COMP_CODE}
        				   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
        				   AND A.SUPP_TYPE  = #{SUPP_TYPE}
        				   AND A.PERSON_NUMB &lt; #{PERSON_NUMB}
        				)), 'BOF' )
        	      , NX_D = ISNULL((
        	           SELECT MIN(A.PERSON_NUMB)
        					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
        									   ON A.COMP_CODE = B.COMP_CODE
        									  AND A.PERSON_NUMB = B.PERSON_NUMB
        					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
        					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
        					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
        					   AND A.PERSON_NUMB LIKE '%' + '' + '%'
        	          ), 'EOF' )
                  , NX_NAME = ISNULL((
        	           SELECT NAME FROM HUM100T
        	          WHERE COMP_CODE = #{S_COMP_CODE}
        	          AND PERSON_NUMB = (SELECT MIN(A.PERSON_NUMB)
        					  FROM HPA600T A LEFT OUTER JOIN HUM100T B
        									   ON A.COMP_CODE = B.COMP_CODE
        									  AND A.PERSON_NUMB = B.PERSON_NUMB
        					 WHERE A.COMP_CODE  = #{S_COMP_CODE}
        					   AND A.PAY_YYYYMM = #{PAY_YYYYMM}
        					   AND A.SUPP_TYPE  = #{SUPP_TYPE}
        					   AND A.PERSON_NUMB LIKE '%' + '' + '%'


        	          )), 'EOF' )
	        </if>

	</select>

	<select id="hpa330ukrServiceImpl.seletList1ForCopy" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.seletList1ForCopy */
		SELECT CAST(#{PAY_YYYYMM} AS VARCHAR(06))               AS PAY_YYYYMM
	         , CAST(A.SUPP_TYPE AS VARCHAR(02))               AS SUPP_TYPE
	         , A.PERSON_NUMB
	         , B.NAME
	         , CAST(B.DEPT_CODE AS VARCHAR(08))               AS DEPT_CODE
	         , CAST(D.TREE_NAME AS VARCHAR(30))               AS DEPT_NAME
	         , CAST(A.ABIL_CODE AS VARCHAR(02))               AS ABIL_CODE
	         , CAST(B.POST_CODE AS VARCHAR(02))               AS POST_CODE
	         , CAST(A.PAY_CODE AS VARCHAR(01))                AS PAY_CODE
	         , CAST(A.TAX_CODE AS VARCHAR(01))                AS TAX_CODE
	         , CAST(A.EXCEPT_TYPE AS VARCHAR(01))             AS EXCEPT_TYPE
	         , CAST(A.EMPLOY_TYPE AS VARCHAR(02))             AS EMPLOY_TYPE
	         , CAST(#{SUPP_DATE}  AS VARCHAR(08))               AS SUPP_DATE
	         , CAST(A.PAY_PROV_FLAG AS VARCHAR(01))           AS PAY_PROV_FLAG
	         , CAST(A.OT_KIND AS VARCHAR(04))                 AS OT_KIND
	         , CAST(A.BONUS_KIND AS VARCHAR(04))              AS BONUS_KIND
	         , CAST(A.COM_DAY_WAGES AS DECIMAL(18,4))         AS COM_DAY_WAGES
	         , CAST(A.LONG_MONTH AS DECIMAL(6,0))             AS LONG_MONTH
	         , CAST(A.SPOUSE AS VARCHAR(01))                  AS SPOUSE
	         , CAST(A.WOMAN AS VARCHAR(01))                   AS WOMAN
	         , CAST(A.SUPP_NUM AS DECIMAL(2,0))               AS SUPP_NUM
	         , CAST(A.DEFORM_NUM AS DECIMAL(2,0))             AS DEFORM_NUM
	         , CAST(A.AGED_NUM AS DECIMAL(2,0))               AS AGED_NUM
	         , ISNULL(CAST(A.MED_AVG_I AS DECIMAL(18,0)), 0)  AS MED_AVG_I
	         , ISNULL(CAST(A.ANU_BASE_I AS DECIMAL(18,0)), 0) AS ANU_BASE_I
	         , CAST(A.BONUS_STD_I AS DECIMAL(18,4))           AS BONUS_STD_I
	         , CAST(A.BONUS_RATE AS DECIMAL(7,3))             AS BONUS_RATE
	         , CAST(A.INCE_WAGES_RATE AS DECIMAL(7,3))        AS INCE_WAGES_RATE
	         , CAST(A.PLUS_RATE AS DECIMAL(7,3))              AS PLUS_RATE
	         , CAST(A.MINUS_RATE AS DECIMAL(7,3))             AS MINUS_RATE
	         , CAST(A.SUPP_RATE AS DECIMAL(7,3))              AS SUPP_RATE
	         , CAST(A.BONUS_I AS DECIMAL(18,4))               AS BONUS_I
	         , CAST(A.BONUS_TOTAL_I AS DECIMAL(18,4))         AS BONUS_TOTAL_I
	         , CAST(A.PAY_TOTAL_I AS DECIMAL(18,4))           AS PAY_TOTAL_I
	         , CAST(A.TAX_EXEMPTION1_I AS DECIMAL(18,4))      AS TAX_EXEMPTION1_I
	         , CAST(A.TAX_EXEMPTION2_I AS DECIMAL(18,4))      AS TAX_EXEMPTION2_I
	         , CAST(A.TAX_EXEMPTION3_I AS DECIMAL(18,4))      AS TAX_EXEMPTION3_I
	         , CAST(A.TAX_EXEMPTION4_I AS DECIMAL(18,4))      AS TAX_EXEMPTION4_I
	         , CAST(A.TAX_EXEMPTION6_I AS DECIMAL(18,4))      AS TAX_EXEMPTION6_I
	         , CAST(ISNULL(A.TAX_EXEMPTION5_I, 0) AS DECIMAL(18,4)) AS TAX_EXEMPTION5_I
	         , CAST(A.TAX_AMOUNT_I AS DECIMAL(18,4))          AS TAX_AMOUNT_I
	         , CAST(A.BONUS_TAX_I AS DECIMAL(18,4))           AS BONUS_TAX_I
	         , CAST(A.SUPP_TOTAL_I AS DECIMAL(18,4))          AS SUPP_TOTAL_I
	         , CAST(A.DED_TOTAL_I AS DECIMAL(18,4))           AS DED_TOTAL_I
	         , CAST(A.REAL_AMOUNT_I AS  DECIMAL(18,4))        AS REAL_AMOUNT_I
	         , CAST(A.YEAR_CRT AS DECIMAL(4,2))               AS YEAR_CRT
	         , CAST(A.YEAR_ADD AS DECIMAL(4,2))               AS YEAR_ADD
	         , CAST(A.MONTH_CRT AS DECIMAL(4,2))              AS MONTH_CRT
	         , CAST(A.MON_YEAR_USE AS DECIMAL(4,2))           AS MON_YEAR_USE
	         , CAST(A.MON_YEAR_PROV AS DECIMAL(4,2))          AS MON_YEAR_PROV
	         , CAST(A.RETR_FLAG AS VARCHAR(01))               AS RETR_FLAG
	         , CAST(A.AUTO_RECORD_NUM AS VARCHAR(20))         AS AUTO_RECORD_NUM
	         , B.JOIN_DATE
	         , B.RETR_DATE
	         , B.WAGES_STD_I
	         , A.COM_DAY_WAGES
	         , A.DIV_CODE
	         , A.SECT_CODE
	         , A.MAKE_SALE
	         , A.COST_KIND
	         , A.PAY_GUBUN
	         , A.PAY_GUBUN2
	         , CAST(A.MED_GRADE AS VARCHAR(04))                    AS MED_GRADE
	         , CAST(ISNULL(A.BUSI_SHARE_I, 0) AS DECIMAL(18,0))    AS BUSI_SHARE_I
	         , CAST(A.CHILD_20_NUM AS DECIMAL(2,0))                AS CHILD_20_NUM
	         , COM_PAY_FLAG
	         , CAST(ISNULL(A.NON_TAX_I, 0) AS DECIMAL(18,4))       AS NON_TAX_I
	         , CAST(ISNULL(A.WORKER_COMPEN_I, 0) AS DECIMAL(18,0)) AS WORKER_COMPEN_I
	         , CASE WHEN C.CLOSE_DATE IS NOT NULL
	              THEN '마감'
	              ELSE '미마감'
	           END                                                 AS CLOSE_YN
	      FROM           HPA600T A
	           LEFT JOIN HUM100T B ON A.COMP_CODE   = B.COMP_CODE
	                              AND A.PERSON_NUMB = B.PERSON_NUMB
	           LEFT JOIN BSA210T D ON D.COMP_CODE   = B.COMP_CODE
	                              AND D.TREE_CODE   = B.DEPT_CODE
	           LEFT JOIN HBS910T C ON C.COMP_CODE   = A.COMP_CODE
	                              AND C.PERSON_NUMB = A.PERSON_NUMB
	                              AND C.CLOSE_DATE  = #{PAY_YYYYMM}
	                              AND C.CLOSE_TYPE  = '1'

	     WHERE A.COMP_CODE     = #{S_COMP_CODE}
	       AND A.PAY_YYYYMM    = #{FR_PAY_YYYYMM}
	       AND A.PERSON_NUMB   = #{PERSON_NUMB}
	       AND A.SUPP_TYPE     = N'1'
	</select>

	<select id="hpa330ukrServiceImpl.seletList2ForCopy" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.seletList2ForCopy */
		SELECT #{PAY_YYYYMM}                     AS PAY_YYYYMM
	         , CAST(A.SUPP_TYPE AS VARCHAR(02))  AS SUPP_TYPE
	         , A.PERSON_NUMB
	         , CAST(A.WAGES_CODE AS VARCHAR(03)) AS WAGES_CODE
	         , B.WAGES_NAME                      AS WAGES_NAME
	         , CAST(A.AMOUNT_I AS DECIMAL(18,4)) AS AMOUNT_I
	         , A.COMP_CODE
	         , #{S_USER_ID}                          AS UPDATE_DB_USER
	         , GETDATE()                         AS UPDATE_DB_TIME
	      FROM            HPA300T A
	           INNER JOIN HBS300T B ON B.COMP_CODE  = A.COMP_CODE
	                               AND B.WAGES_CODE = A.WAGES_CODE
	                               AND B.CODE_TYPE  = '1'
	     WHERE A.COMP_CODE   = #{S_COMP_CODE}
	       AND A.PAY_YYYYMM  = #{FR_PAY_YYYYMM}
	       AND A.PERSON_NUMB = #{PERSON_NUMB}
	       AND A.SUPP_TYPE   = N'1'
	     ORDER BY B.SORT_SEQ
	</select>

	<select id="hpa330ukrServiceImpl.seletList3ForCopy" parameterType="Map" resultType="rMap">
		/* hpa330ukrServiceImpl.seletList3ForCopy */
		SELECT #{PAY_YYYYMM}                        AS PAY_YYYYMM
	        , CAST(A.SUPP_TYPE AS VARCHAR(02))      AS SUPP_TYPE
	        , A.PERSON_NUMB
	        , CAST(A.DED_CODE AS VARCHAR(03))       AS DED_CODE
	        , B.CODE_NAME                           AS WAGES_NAME
	        , CAST(A.DED_AMOUNT_I AS DECIMAL(18,4)) AS DED_AMOUNT_I
	        , A.COMP_CODE
	        , #{S_USER_ID}                          AS UPDATE_DB_USER
	        , GETDATE()                             AS UPDATE_DB_TIME
	     FROM            HPA400T A
	          INNER JOIN BSA100T B ON B.COMP_CODE = A.COMP_CODE
	                              AND B.MAIN_CODE = 'H034'
	                              AND B.SUB_CODE  = A.DED_CODE
	    WHERE A.COMP_CODE   = #{S_COMP_CODE}
	      AND A.PAY_YYYYMM  = #{FR_PAY_YYYYMM}
	      AND A.PERSON_NUMB = #{PERSON_NUMB}
	      AND A.SUPP_TYPE     = N'1'
	    ORDER BY B.REF_CODE2
	</select>
	<select id="hpa330ukrServiceImpl.checkUpdateAvailable" parameterType="Map" resultType="String">
		/* hpa330ukrServiceImpl.checkUpdateAvailable */
		DECLARE @ERRMSG NVARCHAR(2000),
				@CLOSE_DATE NVARCHAR(8),
				@EXIST_DATA INT

		SET @ERRMSG = '';
		SELECT @CLOSE_DATE = CLOSE_DATE
		  FROM HBS900T
		 WHERE COMP_CODE = #{S_COMP_CODE}
		   AND CLOSE_TYPE = '1'

		SELECT @CLOSE_DATE = A.CLOSE_DATE
		FROM              HBS910T A WITH (NOLOCK)
		       INNER JOIN HUM100T B WITH (NOLOCK) ON B.COMP_CODE   = A.COMP_CODE
		                                         AND B.PERSON_NUMB = A.PERSON_NUMB
		       INNER JOIN HPA600T C WITH (NOLOCK) ON C.COMP_CODE   = A.COMP_CODE
		                                         AND C.PERSON_NUMB = A.PERSON_NUMB
		                                         AND C.PAY_YYYYMM  = A.CLOSE_DATE
		WHERE A.COMP_CODE   = #{S_COMP_CODE}
		  AND A.CLOSE_DATE  = #{PAY_YYYYMM}
		  AND A.CLOSE_TYPE  = N'1'
		  AND B.PERSON_NUMB = #{PERSON_NUMB}

		IF ISNULL(@CLOSE_DATE, '') != '' AND @CLOSE_DATE &gt;= #{PAY_YYYYMM}
			BEGIN
			SET @ERRMSG = '이미 마감된 자료입니다.'
			SELECT @ERRMSG
			RETURN
			END

		SELECT @EXIST_DATA = COUNT(*)
		  FROM HPA600T V INNER JOIN HUM100T V1
		                    ON V.COMP_CODE = V1.COMP_CODE
		                   AND V.PERSON_NUMB = V1.PERSON_NUMB
		 WHERE V.COMP_CODE  = #{S_COMP_CODE}
		   AND V.PAY_YYYYMM = #{PAY_YYYYMM}
		   AND V.SUPP_TYPE  = N'1'
		   AND ISNULL(V.EX_DATE, '')  &lt;&gt; ''  AND V.PERSON_NUMB = #{PERSON_NUMB}

		IF @EXIST_DATA &gt; 0
			BEGIN
			SET @ERRMSG = '전표를 취소하고 계산을 다시하여 주십시오.'
			SELECT @ERRMSG
			RETURN
			END
		ELSE
			BEGIN
			SELECT @ERRMSG
			END
	</select>

    <!-- <update id="hpa330ukrServiceImpl.form01update" parameterType="rMap" > -->
	<update id="hpa330ukrServiceImpl.form01update" parameterType="foren.unilite.modules.human.hpa.Hpa330ukrModel" >
		/* hpa330ukrServiceImpl.form01update */
		DECLARE @PAY_GUBUN NVARCHAR(1),
				@PAY_GUBUN2 NVARCHAR(1)

		SET @PAY_GUBUN = 'N'
		SET	@PAY_GUBUN2 = 'N'

		SELECT @PAY_GUBUN = ISNULL(PAY_GUBUN, '')
		         , @PAY_GUBUN2 = ISNULL(PAY_GUBUN2, '1')
		      FROM HPA600T
		     WHERE COMP_CODE   = #{S_COMP_CODE}
		       AND PAY_YYYYMM  = #{PAY_YYYYMM}
		       AND SUPP_TYPE   = #{SUPP_TYPE}
		       AND PERSON_NUMB = #{PERSON_NUMB}

		IF @PAY_GUBUN = 'N' AND @PAY_GUBUN2 = 'N'
			BEGIN
			SELECT @PAY_GUBUN = ISNULL(PAY_GUBUN, '')
		             , @PAY_GUBUN2 = ISNULL(PAY_GUBUN2, '1')
		          FROM HUM100T
		         WHERE COMP_CODE   = #{S_COMP_CODE}
		           AND PERSON_NUMB = #{PERSON_NUMB}
			END

		UPDATE HPA600T
		   SET DEPT_CODE        = #{DEPT_CODE}
		     , DEPT_NAME        = #{DEPT_NAME}
		     , POST_CODE        = #{POST_CODE}
		     , ABIL_CODE        = #{ABIL_CODE}
		     , PAY_CODE         = #{PAY_CODE}
		     , TAX_CODE         = #{TAX_CODE}
             <if test="@foren.Ognl@isNotEmpty(OT_KIND)">
		     , OT_KIND          = #{OT_KIND}
             </if>
		     , PAY_PROV_FLAG    = #{PAY_PROV_FLAG}
		     , EMPLOY_TYPE      = #{EMPLOY_TYPE}
		     , EXCEPT_TYPE      = #{EXCEPT_TYPE}
		     , SUPP_DATE        = #{SUPP_DATE}
		     , MED_AVG_I        = #{MED_AVG_I}
		     , ANU_BASE_I       = #{ANU_BASE_I}
             <if test="@foren.Ognl@isNotEmpty(SPOUSE)">
		     , SPOUSE           = #{SPOUSE}
             </if>
		     <if test="@foren.Ognl@isNotEmpty(SUPP_NUM)">
             , SUPP_NUM         = #{SUPP_NUM}
             </if>
             <if test="@foren.Ognl@isNotEmpty(PAY_TOTAL_I)">
		     , PAY_TOTAL_I      = #{PAY_TOTAL_I}
             </if>
             <if test="@foren.Ognl@isNotEmpty(COM_DAY_WAGES)">
		     , COM_DAY_WAGES    = #{COM_DAY_WAGES}
             </if>
		     , UPDATE_DB_USER   = #{S_USER_ID}
		     , UPDATE_DB_TIME   = GETDATE()
             <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
		     , DIV_CODE         = #{DIV_CODE}
             </if>
             <if test="@foren.Ognl@isNotEmpty(SECT_CODE)">
		     , SECT_CODE        = #{SECT_CODE}
             </if>
             <if test="@foren.Ognl@isNotEmpty(MAKE_SALE)">
		     , MAKE_SALE        = #{MAKE_SALE}
             </if>
             <if test="@foren.Ognl@isNotEmpty(COST_KIND)">
		     , COST_KIND        = #{COST_KIND}
             </if>
		     , PAY_GUBUN        = @PAY_GUBUN
		     , PAY_GUBUN2       = @PAY_GUBUN2
		     , CHILD_20_NUM     = #{CHILD_20_NUM}
		 WHERE PAY_YYYYMM       = #{PAY_YYYYMM}
		   AND SUPP_TYPE        = #{SUPP_TYPE}
		   AND PERSON_NUMB      = #{PERSON_NUMB}
		   AND COMP_CODE        = #{S_COMP_CODE}
	</update>

	<update id="hpa330ukrServiceImpl.form02update" parameterType="foren.unilite.modules.human.hpa.Hpa330ukrModel" >
		/* hpa330ukrServiceImpl.form02update */
		UPDATE HPA600T
		   SET TAX_EXEMPTION1_I = #{TAX_EXEMPTION1_I}
		     , TAX_EXEMPTION2_I = #{TAX_EXEMPTION2_I}
		     , TAX_EXEMPTION3_I = #{TAX_EXEMPTION3_I}
		     , TAX_EXEMPTION4_I = #{TAX_EXEMPTION4_I}
		     , TAX_EXEMPTION5_I = #{TAX_EXEMPTION5_I}
		     , TAX_EXEMPTION6_I = #{TAX_EXEMPTION6_I}
		     , TAX_AMOUNT_I     = #{TAX_AMOUNT_I}
		     , SUPP_TOTAL_I     = #{SUPP_TOTAL_I}
		     , UPDATE_DB_USER   = #{S_USER_ID}
		     , UPDATE_DB_TIME   = GETDATE()
		     , BUSI_SHARE_I     = #{BUSI_SHARE_I}
		     , NON_TAX_I        = #{NON_TAX_I}
		     , WORKER_COMPEN_I  = #{WORKER_COMPEN_I}
		 WHERE PAY_YYYYMM       = #{PAY_YYYYMM}
		   AND SUPP_TYPE        = #{SUPP_TYPE}
		   AND PERSON_NUMB      = #{PERSON_NUMB}
		   AND COMP_CODE        = #{S_COMP_CODE}
	</update>
<!--
	<delete id="hpa330ukrServiceImpl.deleteList1" parameterType="Map">
		/* hpa330ukrServiceImpl.deleteList1 */
		DELETE HPA300T
         WHERE COMP_CODE = #{S_COMP_CODE}
			AND PAY_YYYYMM = #{PAY_YYYYMM}
			AND PERSON_NUMB = #{PERSON_NUMB}
			AND SUPP_TYPE = #{SUPP_TYPE}
	</delete>

	<delete id="hpa330ukrServiceImpl.deleteList2" parameterType="Map">
		/* hpa330ukrServiceImpl.deleteList2 */
		DELETE HPA400T
         WHERE COMP_CODE = #{S_COMP_CODE}
			AND PAY_YYYYMM = #{PAY_YYYYMM}
			AND PERSON_NUMB = #{PERSON_NUMB}
			AND SUPP_TYPE = #{SUPP_TYPE}
	</delete>
	 -->

   <update id="hpa330ukrServiceImpl.deleteList1" parameterType="rMap" >
        /* hpa330ukrServiceImpl.updateList1 */ --지급내역
        DELETE FROM HPA300T
           WHERE COMP_CODE      = #{S_COMP_CODE}
             AND PAY_YYYYMM     = #{PAY_YYYYMM}
             AND SUPP_TYPE      = #{SUPP_TYPE}
             AND PERSON_NUMB    = #{PERSON_NUMB}

    </update>

   <update id="hpa330ukrServiceImpl.deleteList2" parameterType="rMap" >
        /* hpa330ukrServiceImpl.updateList2 */ --지급내역
        DELETE FROM HPA400T
         WHERE COMP_CODE      = #{S_COMP_CODE}
           AND PAY_YYYYMM     = #{PAY_YYYYMM}
           AND SUPP_TYPE      = #{SUPP_TYPE}
           AND PERSON_NUMB    = #{PERSON_NUMB}

    </update>

    <update id="hpa330ukrServiceImpl.updateList1" parameterType="rMap" >
        /* hpa330ukrServiceImpl.updateList1 */ --지급내역
        IF EXISTS (SELECT TOP 1 1 FROM HPA300T WHERE COMP_CODE = #{S_COMP_CODE} AND PAY_YYYYMM = #{PAY_YYYYMM} AND PERSON_NUMB = #{PERSON_NUMB} AND SUPP_TYPE = #{SUPP_TYPE} AND WAGES_CODE = #{WAGES_CODE})
		   BEGIN
			UPDATE HPA300T
			   SET AMOUNT_I       = #{AMOUNT_I}
			 WHERE COMP_CODE      = #{S_COMP_CODE}
			   AND PAY_YYYYMM     = #{PAY_YYYYMM}
			   AND SUPP_TYPE      = #{SUPP_TYPE}
			   AND PERSON_NUMB    = #{PERSON_NUMB}
			   AND WAGES_CODE     = #{WAGES_CODE}
		   END

		   ELSE

		   BEGIN
			 INSERT INTO HPA300T
			 (
         		COMP_CODE
			  , PAY_YYYYMM
			  , PERSON_NUMB
			  , SUPP_TYPE

			  , WAGES_CODE
			  , AMOUNT_I
			 )
			 VALUES
			 (
         		#{S_COMP_CODE}
			  , #{PAY_YYYYMM}
			  , #{PERSON_NUMB}
			  , #{SUPP_TYPE}

			  , #{WAGES_CODE}
			  , #{AMOUNT_I}
			 )
		   END

    </update>

    <update id="hpa330ukrServiceImpl.updateList2" parameterType="rMap" >
    /* hpa330ukrServiceImpl.updateList2 */

        IF EXISTS (SELECT TOP 1 1 FROM HPA400T WHERE COMP_CODE = #{S_COMP_CODE} AND PAY_YYYYMM = #{PAY_YYYYMM} AND PERSON_NUMB = #{PERSON_NUMB} AND SUPP_TYPE = #{SUPP_TYPE} AND DED_CODE = #{DED_CODE})
		   BEGIN
            UPDATE HPA400T
               SET DED_AMOUNT_I   = #{DED_AMOUNT_I}
             WHERE COMP_CODE      = #{S_COMP_CODE}
           	   AND PAY_YYYYMM     = #{PAY_YYYYMM}
           	   AND SUPP_TYPE      = #{SUPP_TYPE}
           	   AND PERSON_NUMB    = #{PERSON_NUMB}
           	   AND DED_CODE       = #{DED_CODE}
		   END

		   ELSE

		   BEGIN
			 INSERT INTO HPA400T
			 (
         		COMP_CODE
			  , PAY_YYYYMM
			  , PERSON_NUMB
			  , SUPP_TYPE

			  , DED_CODE
			  , DED_AMOUNT_I
			 )
			 VALUES
			 (
         		#{S_COMP_CODE}
			  , #{PAY_YYYYMM}
			  , #{PERSON_NUMB}
			  , #{SUPP_TYPE}

			  , #{DED_CODE}
			  , #{DED_AMOUNT_I}
			 )
		   END

	</update>


    <update id="hpa330ukrServiceImpl.updateList3" parameterType="rMap" >
    /* hpa330ukrServiceImpl.updateList3 */
	BEGIN

		/* 공제총액 등등 업데이트 */
		UPDATE HPA600T
		   SET DED_TOTAL_I = (SELECT ISNULL(SUM(DED_AMOUNT_I),0)
                                FROM HPA400T WITH (NOLOCK)
                               WHERE COMP_CODE   = #{S_COMP_CODE}
                                 AND PAY_YYYYMM  = A.PAY_YYYYMM
                                 AND PERSON_NUMB = A.PERSON_NUMB
                                 AND SUPP_TYPE   = A.SUPP_TYPE)
             , BUSI_SHARE_I = (SELECT ISNULL(SUM(X.DED_AMOUNT_I),0)
                                 FROM HPA400T X WITH (NOLOCK)
                                      LEFT JOIN BSA100T Y WITH (NOLOCK) ON Y.COMP_CODE = X.COMP_CODE
                                                                       AND Y.MAIN_CODE = 'H034'
                                                                       AND Y.SUB_CODE  = X.DED_CODE
                                WHERE X.COMP_CODE   = #{S_COMP_CODE}
                                  AND X.PAY_YYYYMM  = A.PAY_YYYYMM
                                  AND X.PERSON_NUMB = A.PERSON_NUMB
                                  AND X.SUPP_TYPE   = A.SUPP_TYPE
                                  AND ISNULL(Y.REF_CODE4 , X.DED_CODE) IN ('ANU','MED','RME', 'LCI'))
          FROM            HPA600T A WITH (NOLOCK)
               INNER JOIN HPA400T B WITH (NOLOCK) ON A.COMP_CODE   = B.COMP_CODE
                                                 AND A.PAY_YYYYMM  = B.PAY_YYYYMM
                                                 AND A.SUPP_TYPE   = B.SUPP_TYPE
                                                 AND A.PERSON_NUMB = B.PERSON_NUMB
               INNER JOIN HUM100T V WITH (NOLOCK) ON A.COMP_CODE   = V.COMP_CODE
                                                 AND A.PERSON_NUMB = V.PERSON_NUMB
         WHERE A.COMP_CODE   = #{S_COMP_CODE}
           AND A.PAY_YYYYMM  = #{PAY_YYYYMM}
           AND A.SUPP_TYPE   = #{SUPP_TYPE}
           AND A.PERSON_NUMB = #{PERSON_NUMB}

	    /* 실지급액 수정 */
		UPDATE HPA600T
		   SET REAL_AMOUNT_I = SUPP_TOTAL_I - DED_TOTAL_I
          FROM            HPA600T A WITH (NOLOCK)
               INNER JOIN HUM100T V WITH (NOLOCK) ON A.COMP_CODE   = V.COMP_CODE
                                                 AND A.PERSON_NUMB = V.PERSON_NUMB
         WHERE A.COMP_CODE   = #{S_COMP_CODE}
           AND A.PAY_YYYYMM  = #{PAY_YYYYMM}
           AND A.SUPP_TYPE   = #{SUPP_TYPE}
           AND A.PERSON_NUMB = #{PERSON_NUMB}
	END
	</update>

    <update id="hpa330ukrServiceImpl.insertHPA600" parameterType="rMap" >
    /* hpa330ukrServiceImpl.insertHPA600 */
	BEGIN
		INSERT INTO HPA600T
			 ( PAY_YYYYMM			, SUPP_TYPE				, PERSON_NUMB				, DEPT_CODE				, DEPT_NAME
			 , ABIL_CODE			, POST_CODE				, PAY_CODE					, TAX_CODE				, TAX_CODE2
			 , EXCEPT_TYPE			, EMPLOY_TYPE			, SUPP_DATE					, PAY_PROV_FLAG			, OT_KIND
			 , SPOUSE				, WOMAN					, SUPP_NUM					, DEFORM_NUM			, AGED_NUM
			 , PENS_GRADE			, MED_GRADE				, UPDATE_DB_USER			, UPDATE_DB_TIME		, DIV_CODE
			 , SECT_CODE			, MAKE_SALE				, COST_KIND					, PAY_GUBUN				, PAY_GUBUN2
			 , MED_AVG_I			, CHILD_20_NUM			, COMP_CODE					, ANU_BASE_I			, TAXRATE_BASE)
		SELECT #{PAY_YYYYMM}        , #{SUPP_TYPE}				, A.PERSON_NUMB				, A.DEPT_CODE           , A.DEPT_NAME
			 , A.ABIL_CODE          , A.POST_CODE			, A.PAY_CODE				, A.TAX_CODE            , A.TAX_CODE2
			 , '0' EXCEPT_TYPE      , A.EMPLOY_TYPE			, #{SUPP_DATE}					, A.PAY_PROV_FLAG       , A.OT_KIND
			 , ISNULL(A.SPOUSE, 'N'), ISNULL(A.WOMAN, 'N')	, ISNULL(A.SUPP_AGED_NUM,0)	, ISNULL(A.DEFORM_NUM,0), ISNULL(A.AGED_NUM,0)
			 , A.PENS_GRADE         , A.MED_GRADE			, '111'					, GETDATE()             , A.DIV_CODE
			 , A.SECT_CODE          , A.MAKE_SALE			, A.COST_KIND				, A.PAY_GUBUN           , A.PAY_GUBUN2
			 , A.MED_AVG_I          , A.CHILD_20_NUM		, #{S_COMP_CODE}   		    , A.ANU_BASE_I          , CASE WHEN ISNULL(A.TAXRATE_BASE, '') = '' THEN '2' ELSE A.TAXRATE_BASE END AS TAXRATE_BASE
		  FROM            HUM100T A WITH (NOLOCK)
			   INNER JOIN HAT300T B WITH (NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
												 AND B.PERSON_NUMB  = A.PERSON_NUMB
			   LEFT  JOIN HPA600T C WITH (NOLOCK) ON C.COMP_CODE    = B.COMP_CODE
												 AND C.PAY_YYYYMM   = B.DUTY_YYYYMM
												 AND C.SUPP_TYPE    = #{SUPP_TYPE}
												 AND C.PERSON_NUMB  = B.PERSON_NUMB
			   LEFT  JOIN HBS910T D WITH (NOLOCK) ON D.COMP_CODE    = B.COMP_CODE
												 AND D.CLOSE_DATE   = B.DUTY_YYYYMM
												 AND D.CLOSE_TYPE   = #{SUPP_TYPE}
												 AND D.PERSON_NUMB  = B.PERSON_NUMB
		 WHERE A.COMP_CODE                          = #{S_COMP_CODE}
		   AND B.DUTY_YYYYMM                        = #{PAY_YYYYMM}
		   AND ISNULL(A.PAY_PROV_YN     , 'N')      = 'Y'
		   AND ISNULL(A.PAY_PROV_STOP_YN, 'Y')      = 'N'
		   AND C.COMP_CODE                    IS NULL
		   AND D.COMP_CODE                    IS NULL
		   AND A.DIV_CODE                        LIKE #{DIV_CODE}
		   AND A.PERSON_NUMB                     LIKE #{PERSON_NUMB}


    END
	</update>

    <select id="hpa330ukrServiceImpl.payroll" parameterType="Map" resultType="rMap">
		DECLARE @JSON_PARAM NVARCHAR(2000), @ERROR_DESC NVARCHAR(2000)
		SET @JSON_PARAM = '{"COMP_CODE":"${S_COMP_CODE}","PAY_YYYYMM":"${PAY_YYYYMM}","SUPP_DATE":"${SUPP_DATE}","SUPP_TYPE":"${SUPP_TYPE}","DIV_CODE":"${DIV_CODE}","DEPT_CODE_FR":"${DEPT_CODE}","DEPT_CODE_TO":"${DEPT_CODE}","PAY_CODE":"${PAY_CODE}","PAY_PROV_FLAG":"${PAY_PROV_FLAG}","PERSON_NUMB":"${PERSON_NUMB}","BATCH_YN":"${BATCH_YN}","DELETE_YN":"${DELETE_YN}","CALC_TAX_YN":"${CALC_TAX_YN}","CALC_HIR_YN":"${CALC_HIR_YN}","CALC_IND_YN":"${CALC_IND_YN}","CALC_MED_YN":"${CALC_MED_YN}","UPDATE_DB_USER":"${S_USER_ID}","LANG_TYPE":"${S_LANG_CODE}"}'
		EXEC uniLITE.USP_HUMAN_Payroll @JSON_PARAM, @ERROR_DESC OUTPUT
		SELECT @ERROR_DESC AS ErrorDesc
	</select>

	<insert id="hpa330ukrServiceImpl.payClose" parameterType="Map">
        INSERT INTO HBS910T
        (
             COMP_CODE
            ,DIV_CODE
            ,PERSON_NUMB
            ,CLOSE_TYPE
            ,CLOSE_DATE
            ,SUPP_TYPE
            ,INSERT_DB_USER
            ,INSERT_DB_TIME
            ,UPDATE_DB_USER
            ,UPDATE_DB_TIME
        )
        SELECT
             #{S_COMP_CODE}
            ,A.DIV_CODE
            ,#{PERSON_NUMB}
            ,#{CLOSE_TYPE}
            ,#{PAY_YYYYMM}
            ,'Z'
            ,#{S_USER_ID}
            ,GETDATE()
            ,#{S_USER_ID}
            ,GETDATE()
        FROM HUM100T A
        WHERE COMP_CODE   = #{S_COMP_CODE}
          AND PERSON_NUMB = #{PERSON_NUMB}
	</insert>

	<delete id="hpa330ukrServiceImpl.payCloseCancel" parameterType="Map">
        DELETE HBS910T
		 WHERE COMP_CODE   = #{S_COMP_CODE}
		   AND PERSON_NUMB = #{PERSON_NUMB}
		   AND CLOSE_DATE  = #{PAY_YYYYMM}
		   AND CLOSE_TYPE  = #{SUPP_TYPE}
	</delete>
	<select id="hpa330ukrServiceImpl.selectYearEndList" parameterType="Map" resultType="rMap">
		SELECT    A.PERSON_NUMB                             --사원번호
				, B.NAME								  --사원명
				, A.IN_TAX_I                                --소득세
				, A.SP_TAX_I                                --농특세
				, A.LOCAL_TAX_I                             --지방소득세
				, A.PAY_YYYYMM_01                           --귀속연월
				, RIGHT( A.PAY_YYYYMM_01, 2) AS PAY_MM_01   --귀속연월
				, A.IN_TAX_I_01                             --소득세
				, A.SP_TAX_I_01                             --농특세
				, A.LOCAL_TAX_I_01                          --지방소득세
				, A.PAY_APPLY_YN_01                         --급여반영여부
				, RIGHT(A.PAY_YYYYMM_02, 2) AS PAY_MM_02    --귀속연월
				, A.IN_TAX_I_02                             --소득세
				, A.SP_TAX_I_02                             --농특세
				, A.LOCAL_TAX_I_02                          --지방소득세
				, A.PAY_APPLY_YN_02                         --급여반영여부
				, RIGHT(A.PAY_YYYYMM_03, 2) AS PAY_MM_03    --귀속연월
				, A.IN_TAX_I_03                             --소득세
				, A.SP_TAX_I_03                             --농특세
				, A.LOCAL_TAX_I_03                          --지방소득세
				, A.PAY_APPLY_YN_03                         --급여반영여부
		  FROM  HAD950T A WITH (NOLOCK)
		  INNER JOIN HUM100T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
		                                    AND B.PERSON_NUMB = A.PERSON_NUMB
		  WHERE A.COMP_CODE = #{S_COMP_CODE}
		    AND A.DIV_CODE  = #{DIV_CODE}
		    AND A.YEAR_YYYY = LEFT(#{PAY_YYYYMM},4) 
           <if test="@foren.Ognl@isNotEmpty(PERSON_NUMB)">
			AND A.PERSON_NUMB = #{PERSON_NUMB}
		   </if>
	</select>
</mapper>