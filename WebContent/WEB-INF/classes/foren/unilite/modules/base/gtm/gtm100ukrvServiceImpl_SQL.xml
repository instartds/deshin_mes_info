<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gtm100ukrvServiceImpl">
	<select id="gtm100ukrvServiceImpl.selectList" parameterType="Map" resultType="rMap">
		/* gtm100ukrvServiceImpl.selectList */
		DECLARE @I INT,
				@MAX_OPERATION_COUNT INT,
				@MAX_RUN_COUNT INT
				
		SELECT @MAX_OPERATION_COUNT = MAX(CONVERT(NUMERIC(3,0),OPERATION_COUNT)),
			   @MAX_RUN_COUNT = MAX(CONVERT(NUMERIC(3,0),RUN_COUNT))
		FROM GTM100T WITH (NOLOCK)
		WHERE  COMP_CODE = #{S_COMP_CODE}
					     AND  DIV_CODE = #{DIV_CODE}
					     AND  OPERATION_DATE = #{OPERATION_DATE}
					     AND  ROUTE_CODE = #{ROUTE_CODE}
			
		CREATE TABLE #TMP_OPERATION (
			COMP_CODE NVARCHAR(8),
			DIV_CODE NVARCHAR(8),
			ROUTE_CODE NVARCHAR(20),
			OPERATION_DATE NVARCHAR(8),
			MAX_RUN_COUNT  NVARCHAR(20),
			MAX_OPERATION_COUNT  NVARCHAR(20),
			OPERATION_COUNT NVARCHAR(20)			
		)  
		
		SET @I = 1
		WHILE (@I &lt;=@MAX_OPERATION_COUNT)
		BEGIN
			INSERT #TMP_OPERATION (	COMP_CODE, DIV_CODE, ROUTE_CODE, OPERATION_DATE, OPERATION_COUNT, MAX_RUN_COUNT, MAX_OPERATION_COUNT)
			VALUES(#{S_COMP_CODE}, #{DIV_CODE}, #{ROUTE_CODE}, #{OPERATION_DATE}, @I,@MAX_RUN_COUNT, @MAX_OPERATION_COUNT)
			SET @I=@I+1
		END

		SELECT  OP.COMP_CODE,			OP.DIV_CODE,		OP.ROUTE_CODE,		OP.OPERATION_DATE, 	OP.OPERATION_COUNT, 
				OP.MAX_RUN_COUNT,		OP.MAX_OPERATION_COUNT,			LAST_STOP, 			START_STOP,
				DUTY_FR_TIME, DUTY_TO_TIME,
				R0, R1,	R2,	R3,	R4,	R5,	R6,	R7,	R8,	R9,	R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20,
				RB0, RB1,RB2,RB3,RB4,RB5,RB6,RB7,RB8,RB9,RB10,RB11,RB12,RB13,RB14,RB15,RB16,RB17,RB18,RB19,RB20,
				S0, S1,	S2,	S3,	S4,	S5,	S6,	S7,	S8,	S9,	S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20,
				BS0, BS1,BS2,BS3,BS4,BS5,BS6,BS7,BS8,BS9,BS10,BS11,BS12,BS13,BS14,BS15,BS16,BS17,BS18,BS19,BS20,
				E0, E1,	E2,	E3,	E4,	E5,	E6,	E7,	E8,	E9,	E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20,
				BE0, BE1,BE2,BE3,BE4,BE5,BE6,BE7,BE8,BE9,BE10,BE11,BE12,BE13,BE14,BE15,BE16,BE17,BE18,BE19,BE20
		FROM #TMP_OPERATION AS OP
		LEFT JOIN (			     
		SELECT	T1.COMP_CODE,			T1.DIV_CODE,		T1.ROUTE_CODE,		T1.OPERATION_DATE, 		T1.OPERATION_COUNT, 
				R.LAST_STOP, 			R.START_STOP,
				T1.DUTY_FR_TIME, T1.DUTY_TO_TIME,
				R0, R1,	R2,	R3,	R4,	R5,	R6,	R7,	R8,	R9,	R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20,
				RB0, RB1,RB2,RB3,RB4,RB5,RB6,RB7,RB8,RB9,RB10,RB11,RB12,RB13,RB14,RB15,RB16,RB17,RB18,RB19,RB20,
				S0, S1,	S2,	S3,	S4,	S5,	S6,	S7,	S8,	S9,	S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20,
				BS0, BS1,BS2,BS3,BS4,BS5,BS6,BS7,BS8,BS9,BS10,BS11,BS12,BS13,BS14,BS15,BS16,BS17,BS18,BS19,BS20,
				E0, E1,	E2,	E3,	E4,	E5,	E6,	E7,	E8,	E9,	E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20,
				BE0, BE1,BE2,BE3,BE4,BE5,BE6,BE7,BE8,BE9,BE10,BE11,BE12,BE13,BE14,BE15,BE16,BE17,BE18,BE19,BE20
		FROM(SELECT  COMP_CODE,			DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 		OPERATION_COUNT, 
						DUTY_FR_TIME, 			DUTY_TO_TIME,
						[0-1]  AS R0,
						[1-1]  AS R1	,[2-1]  AS R2	,[3-1]  AS R3	,[4-1]  AS R4	,[5-1]  AS R5,
						[6-1]  AS R6	,[7-1]  AS R7	,[8-1]  AS R8	,[9-1]  AS R9	,[10-1] AS R10,
						[11-1] AS R11	,[12-1] AS R12	,[13-1] AS R13	,[14-1] AS R14	,[15-1] AS R15,
						[16-1] AS R16	,[17-1] AS R17	,[18-1] AS R18	,[19-1] AS R19	,[20-1] AS R20,
						[0-2]  AS RB0,
						[1-2]  AS RB1	,[2-2]  AS RB2	,[3-2]  AS RB3	,[4-2]  AS RB4	,[5-2]  AS RB5,
						[6-2]  AS RB6	,[7-2]  AS RB7	,[8-2]  AS RB8	,[9-2]  AS RB9	,[10-2] AS RB10,
						[11-2] AS RB11	,[12-2] AS RB12	,[13-2] AS RB13	,[14-2] AS RB14	,[15-2] AS RB15,
						[16-2] AS RB16	,[17-2] AS RB17	,[18-2] AS RB18	,[19-2] AS RB19	,[20-2] AS RB20
							
				FROM (SELECT  COMP_CODE,		DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 	OPERATION_COUNT, 
							  CASE WHEN ISNULL(DUTY_FR_TIME,'') != '' 	THEN left(DUTY_FR_TIME, 2)+':'+SUBSTRING(DUTY_FR_TIME,3,2) ELSE '' END AS DUTY_FR_TIME, 
							  CASE WHEN ISNULL(DUTY_TO_TIME,'') != '' 	THEN left(DUTY_TO_TIME, 2)+':'+SUBSTRING(DUTY_TO_TIME,3,2) ELSE '' END AS DUTY_TO_TIME,
							  CASE WHEN ISNULL(DEPARTURE_TIME,'') != '' 	THEN left(DEPARTURE_TIME, 2)+':'+SUBSTRING(DEPARTURE_TIME,3,2) ELSE '' END AS DEPARTURE_TIME,
							  (RUN_COUNT+'-'+RUN_DIRECTION) AS RUN_OP
					    FROM  GTM100T WITH (NOLOCK) 
					    WHERE  COMP_CODE = #{S_COMP_CODE}
					     AND  DIV_CODE = #{DIV_CODE}
					     AND  OPERATION_DATE = #{OPERATION_DATE}
					     AND  ROUTE_CODE = #{ROUTE_CODE}
				) AS A
				PIVOT ( 
					MAX(DEPARTURE_TIME)
					FOR RUN_OP IN    ([0-1],
									  [1-1], [2-1], [3-1], [4-1], [5-1], 
									  [6-1], [7-1], [8-1], [9-1], [10-1],
									  [11-1],[12-1],[13-1],[14-1],[15-1], 
									  [16-1],[17-1],[18-1],[19-1],[20-1],
									  [0-2],
									  [1-2], [2-2], [3-2], [4-2], [5-2], 
									  [6-2], [7-2], [8-2], [9-2], [10-2],
									  [11-2],[12-2],[13-2],[14-2],[15-2], 
									  [16-2],[17-2],[18-2],[19-2],[20-2])
					) AS P
		)  T1
		LEFT JOIN (
		SELECT  COMP_CODE,			DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 		OPERATION_COUNT, 
						[0-1]  AS S0,
						[1-1]  AS S1	,[2-1]  AS S2	,[3-1]  AS S3	,[4-1]  AS S4	,[5-1]  AS S5,
						[6-1]  AS S6	,[7-1]  AS S7	,[8-1]  AS S8	,[9-1]  AS S9	,[10-1] AS S10,
						[11-1] AS S11	,[12-1] AS S12	,[13-1] AS S13	,[14-1] AS S14	,[15-1] AS S15,
						[16-1] AS S16	,[17-1] AS S17	,[18-1] AS S18	,[19-1] AS S19	,[20-1] AS S20,
						[0-2]  AS BS0,
						[1-2]  AS BS1	,[2-2]  AS BS2	,[3-2]  AS BS3	,[4-2]  AS BS4	,[5-2]  AS BS5,
						[6-2]  AS BS6	,[7-2]  AS BS7	,[8-2]  AS BS8	,[9-2]  AS BS9	,[10-2] AS BS10,
						[11-2] AS BS11	,[12-2] AS BS12	,[13-2] AS BS13	,[14-2] AS BS14	,[15-2] AS BS15,
						[16-2] AS BS16	,[17-2] AS BS17	,[18-2] AS BS18	,[19-2] AS BS19	,[20-2] AS BS20
				FROM (SELECT  COMP_CODE,		DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 	OPERATION_COUNT, 
							  DEPARTURE_PLACE,	(RUN_COUNT+'-'+RUN_DIRECTION) AS RUN_OP
					    FROM  GTM100T WITH (NOLOCK) 
					    WHERE  COMP_CODE = #{S_COMP_CODE}
					     AND  DIV_CODE = #{DIV_CODE}
					     AND  OPERATION_DATE = #{OPERATION_DATE}
					     AND  ROUTE_CODE = #{ROUTE_CODE}
				) AS A
				PIVOT ( 
					MAX(DEPARTURE_PLACE)
					FOR RUN_OP IN    ([0-1],
									  [1-1], [2-1], [3-1], [4-1], [5-1], 
									  [6-1], [7-1], [8-1], [9-1], [10-1],
									  [11-1],[12-1],[13-1],[14-1],[15-1], 
									  [16-1],[17-1],[18-1],[19-1],[20-1],
									  [0-2],
									  [1-2], [2-2], [3-2], [4-2], [5-2], 
									  [6-2], [7-2], [8-2], [9-2], [10-2],
									  [11-2],[12-2],[13-2],[14-2],[15-2], 
									  [16-2],[17-2],[18-2],[19-2],[20-2])
					) AS P
		 )  T2 ON T1.COMP_CODE= T2.COMP_CODE
		     AND T1.DIV_CODE= T2.DIV_CODE
		     AND T1.OPERATION_DATE = T2.OPERATION_DATE
		     AND T1.OPERATION_COUNT = T2.OPERATION_COUNT
		 LEFT JOIN (
		SELECT  COMP_CODE,			DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 		OPERATION_COUNT, 
						[0-1]  AS E0,
						[1-1]  AS E1	,[2-1]  AS E2	,[3-1]  AS E3	,[4-1]  AS E4	,[5-1]  AS E5,
						[6-1]  AS E6	,[7-1]  AS E7	,[8-1]  AS E8	,[9-1]  AS E9	,[10-1] AS E10,
						[11-1] AS E11	,[12-1] AS E12	,[13-1] AS E13	,[14-1] AS E14	,[15-1] AS E15,
						[16-1] AS E16	,[17-1] AS E17	,[18-1] AS E18	,[19-1] AS E19	,[20-1] AS E20,
						[0-2]  AS BE0,
						[1-2]  AS BE1	,[2-2]  AS BE2	,[3-2]  AS BE3	,[4-2]  AS BE4	,[5-2]  AS BE5,
						[6-2]  AS BE6	,[7-2]  AS BE7	,[8-2]  AS BE8	,[9-2]  AS BE9	,[10-2] AS BE10,
						[11-2] AS BE11	,[12-2] AS BE12	,[13-2] AS BE13	,[14-2] AS BE14	,[15-2] AS BE15,
						[16-2] AS BE16	,[17-2] AS BE17	,[18-2] AS BE18	,[19-2] AS BE19	,[20-2] AS BE20
				FROM (SELECT  COMP_CODE,		DIV_CODE,		ROUTE_CODE,		OPERATION_DATE, 	OPERATION_COUNT, 
							  DESTINATION_PLACE,	(RUN_COUNT+'-'+RUN_DIRECTION) AS RUN_OP
					    FROM  GTM100T WITH (NOLOCK) 
					    WHERE  COMP_CODE = #{S_COMP_CODE}
					     AND  DIV_CODE = #{DIV_CODE}
					     AND  OPERATION_DATE = #{OPERATION_DATE}
					     AND  ROUTE_CODE = #{ROUTE_CODE}
				) AS A
				PIVOT ( 
					MAX(DESTINATION_PLACE)
					FOR RUN_OP IN    ([0-1],
									  [1-1], [2-1], [3-1], [4-1], [5-1], 
									  [6-1], [7-1], [8-1], [9-1], [10-1],
									  [11-1],[12-1],[13-1],[14-1],[15-1], 
									  [16-1],[17-1],[18-1],[19-1],[20-1],
									  [0-2],
									  [1-2], [2-2], [3-2], [4-2], [5-2], 
									  [6-2], [7-2], [8-2], [9-2], [10-2],
									  [11-2],[12-2],[13-2],[14-2],[15-2], 
									  [16-2],[17-2],[18-2],[19-2],[20-2])
					) AS P
		 )  T3 ON T1.COMP_CODE= T2.COMP_CODE
		     AND T1.DIV_CODE= T3.DIV_CODE
		     AND T1.OPERATION_DATE = T3.OPERATION_DATE
		     AND T1.OPERATION_COUNT = T3.OPERATION_COUNT    
	 LEFT JOIN (
	 	SELECT COMP_CODE, DIV_CODE, ROUTE_CODE, LAST_STOP, START_STOP
				FROM GRT110T WITH (NOLOCK)
				WHERE CONVERT(NVARCHAR(8), GETDATE(),112) BETWEEN ROUTE_START_DATE AND ROUTE_END_DATE
	) R 
	 		 ON T1.COMP_CODE= R.COMP_CODE
		     AND T1.DIV_CODE= R.DIV_CODE
		     AND T1.ROUTE_CODE = R.ROUTE_CODE
	) AS T ON OP.OPERATION_COUNT = T.OPERATION_COUNT
	ORDER BY CONVERT(NUMERIC(10,0), OP.OPERATION_COUNT)
	DROP TABLE #TMP_OPERATION
	</select>
	<update id="gtm100ukrvServiceImpl.save"  parameterType="Map">
		IF EXISTS ( 
			SELECT RUN_COUNT FROM GTM100T
			 WHERE COMP_CODE = #{COMP_CODE}
			   AND DIV_CODE = #{DIV_CODE}
			   AND ROUTE_CODE = #{ROUTE_CODE}
			   AND OPERATION_DATE = #{OPERATION_DATE}
			   AND OPERATION_COUNT = #{OPERATION_COUNT}
			   AND RUN_COUNT = #{RUN_COUNT}
			   AND RUN_DIRECTION = #{RUN_DIRECTION}
		)
			BEGIN
				UPDATE GTM100T
				SET  
					DEPARTURE_PLACE = #{DEPARTURE_PLACE}, 
					DESTINATION_PLACE = #{DESTINATION_PLACE},      
					DEPARTURE_TIME = #{DEPARTURE_TIME},
					DUTY_FR_TIME = #{DUTY_FR_TIME},    
					DUTY_TO_TIME = #{DUTY_TO_TIME}  
				WHERE COMP_CODE = #{COMP_CODE}
				  AND DIV_CODE = #{DIV_CODE}
				  AND ROUTE_CODE = #{ROUTE_CODE}
				  AND OPERATION_DATE = #{OPERATION_DATE}
				  AND OPERATION_COUNT = #{OPERATION_COUNT}
				  AND RUN_COUNT = #{RUN_COUNT}
				  AND RUN_DIRECTION = #{RUN_DIRECTION}
			END
		ELSE
			BEGIN
				INSERT INTO GTM100T	
				(
					COMP_CODE,
					DIV_CODE,        
					ROUTE_CODE,      
					OPERATION_DATE,  
					OPERATION_COUNT, 
					RUN_COUNT,      
					RUN_DIRECTION, 
					DEPARTURE_PLACE, 
					DESTINATION_PLACE,    
					DEPARTURE_TIME,  
					DUTY_FR_TIME,    
					DUTY_TO_TIME,    
					INSERT_DB_USER,
					INSERT_DB_TIME,
					UPDATE_DB_USER,
					UPDATE_DB_TIME
				)
				VALUES
				(
					#{COMP_CODE},
					#{DIV_CODE},        
					#{ROUTE_CODE},      
					#{OPERATION_DATE},  
					#{OPERATION_COUNT}, 
					#{RUN_COUNT},       
					#{RUN_DIRECTION},
					#{DEPARTURE_PLACE}, 
					#{DESTINATION_PLACE},    
					#{DEPARTURE_TIME},
					#{DUTY_FR_TIME},    
					#{DUTY_TO_TIME},    
					#{S_USER_ID},
					GETDATE(),
					#{S_USER_ID},
					GETDATE()
				)
				
			END
	</update>
	<delete id="gtm100ukrvServiceImpl.delete" parameterType="Map">
		DELETE FROM GTM100T
		WHERE COMP_CODE = #{COMP_CODE}
		  AND DIV_CODE = #{DIV_CODE}
		  AND ROUTE_CODE = #{ROUTE_CODE}
		  AND OPERATION_DATE = #{OPERATION_DATE}
		  AND OPERATION_COUNT = #{OPERATION_COUNT}
		  AND RUN_COUNT = #{RUN_COUNT}
		  AND RUN_DIRECTION = #{RUN_DIRECTION}
	</delete>
	<insert id="gtm100ukrvServiceImpl.saveGWR100" parameterType="Map">
		INSERT INTO GWR100T
		     (	 KEY_VALUE
           		,COMP_CODE           			,DIV_CODE           	,OPERATION_DATE_FR      ,OPERATION_DATE_TO
           		,REF_OPERATION_DATE_FR          ,REF_OPERATION_DATE_TO	,OFFICE_CODE			,ROUTE_GROUP
           		,ROUTE_CODE						,WORK_USER				,REF_TYPE				,REF_OPERATION_DATE		 )
		VALUES
		     ( #{KEY_VALUE}
		     , #{S_COMP_CODE} 				, #{DIV_CODE}   	 			, #{B_OPERATION_DATE_FR}  	   ,#{B_OPERATION_DATE_TO}  
		     , #{B_REF_OPERATION_DATE_FR} 	, #{B_REF_OPERATION_DATE_TO}   	, #{B_OFFICE_CODE}  	   	   ,#{B_ROUTE_GROUP}  
			 , #{B_ROUTE_CODE}				, #{S_USER_ID}  				, #{B_REF_TYPE}				   ,#{B_REF_OPERATION_DATE})
	</insert>
	<update id="gtm100ukrvServiceImpl.opScheduleCopy" parameterType="Map" statementType="CALLABLE">
		{call SP_OPERATION_RunTimeCopy  (
			#{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String} 
		)}
	 </update>
	 	<insert id="gtm100ukrvServiceImpl.saveGWR200" parameterType="Map">
		INSERT INTO GWR200T
		     (	 KEY_VALUE
           		,COMP_CODE           ,DIV_CODE           ,OPERATION_DATE           ,ROUTE_CODE 		,WORK_USER			 )
		VALUES
		     ( #{KEY_VALUE}
		     , #{S_COMP_CODE} 		, #{DIV_CODE}   	 , #{OPERATION_DATE}  	   ,#{ROUTE_CODE}   , #{S_USER_ID}  )
	</insert>
	<update id="gtm100ukrvServiceImpl.calculateTime" parameterType="Map" statementType="CALLABLE">
		{call SP_OPERATION_RunTimeRecalculation  (
			#{KEY_VALUE, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String},
			#{ErrorDesc, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String} 
		)}
	 </update>
</mapper>