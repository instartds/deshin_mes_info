<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="baseCommonServiceImpl">
	<select id="baseCommonServiceImpl.fnAutoNo" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.fnAutoNo */
	    /* UBFuncKrv.CBFuncKr[fnAutoNo] Query01 */
	     DECLARE     @AUTO_NUM      NVARCHAR(20),
    				@REGDATE       NVARCHAR(8),
    				@TABLE_ID       NVARCHAR(200),
    				@JOB_ID       NVARCHAR(200)
    	SET @REGDATE = CONVERT(NVARCHAR(8), GETDATE(), 112)
    	SET @TABLE_ID = UPPER(#{TABLE_ID})
    	SET @JOB_ID = UPPER(#{JOB_ID})

    	EXEC SP_GetAutoNumComp #{COMP_CODE}, #{DIV_CODE}, @TABLE_ID, @JOB_ID, @REGDATE, '', @AUTO_NUM OUTPUT
    	SELECT  @AUTO_NUM AS AUTO_NUM

	</select>
	<select id="baseCommonServiceImpl.fnLastYyMm" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.fnLastYyMm */
		/* 창고의 최종마감월 */
	    SELECT ISNULL(MAX(LAST_YYYYMM), '000000') AS LAST_YYYYMM
	      FROM BIV900T  WITH (NOLOCK)
	     WHERE COMP_CODE =  #{COMP_CODE}
	       AND DIV_CODE  = #{DIV_CODE}
	       AND WH_CODE   = #{WH_CODE}
	</select>

	<select id="baseCommonServiceImpl.fnStockQ" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.fnStockQ */
		/* 품목의 현재고 */
	    SELECT ISNULL(MAX(STOCK_Q), 0) AS STOCK_Q
	      FROM BIV100T  WITH (NOLOCK)
	     WHERE COMP_CODE = #{COMP_CODE}
	       AND WH_CODE   = #{WH_CODE}
	       AND ITEM_CODE = #{ITEM_CODE}
	</select>
	<select id="baseCommonServiceImpl.fnStockPrice" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.fnStockPrice */
		/* 창고에 들어 있는 특정품목의 재고량 및 평균단가 파악 */
	    SELECT ISNULL(MAX(STOCK_Q)     , 0) STOCK_Q
	         , ISNULL(MAX(AVERAGE_P)   , 0) AVERAGE_P
	         , ISNULL(MAX(GOOD_STOCK_Q), 0) GOOD_STOCK_Q
	         , ISNULL(MAX(BAD_STOCK_Q) , 0) BAD_STOCK_Q
	      FROM BIV100T   WITH (NOLOCK)
	     WHERE COMP_CODE = #{COMP_CODE}
	       AND WH_CODE   = #{WH_CODE}
	       AND ITEM_CODE = #{ITEM_CODE}
	</select>
	<select id="baseCommonServiceImpl.fnRecordCombo" parameterType="Map" resultType="comboItem">
		/* baseCommonServiceImpl.fnRecordCombo */
		<if test="TYPE == &quot;BSA220T&quot;">
		    SELECT TREE_CODE as value
	             , TREE_NAME as text
	          FROM BSA220T WITH (NOLOCK)
	         WHERE COMP_CODE  = #{COMP_CODE}
	           AND TYPE_LEVEL = #{DIV_CODE}
	           AND USE_YN     = 'Y'
		</if>
		<if test="TYPE == &quot;BSA230T&quot;">
		    SELECT TREE_CODE   as value
	             , TREE_NAME   as text
	          FROM BSA230T  WITH (NOLOCK)
	         WHERE COMP_CODE  = #{COMP_CODE}
	           AND TYPE_LEVEL = #{DIV_CODE}
	           AND USE_YN     = 'Y'
		</if>
		<if test="TYPE == &quot;DIV_PRSN&quot;">
	        SELECT SUB_CODE  as value
	             , CODE_NAME as text
	             , REF_CODE1 as 'option'
	          FROM BSA100T  WITH (NOLOCK)
	         WHERE COMP_CODE = #{COMP_CODE}
	           AND MAIN_CODE = 'B093'
	           AND SUB_CODE != '$'
		</if>
	</select>

    <select id="baseCommonServiceImpl.getCodeWithCondition" parameterType="Map" resultType="rMap">
    /* baseCommonServiceImpl.getCodeWithCondition */
    SELECT SUB_CODE    AS value
         , CODE_NAME   AS text
      FROM BSA100T
     WHERE COMP_CODE = 'MASTER'
       AND MAIN_CODE = 'B611'
       AND SUB_CODE  &lt;&gt; '$'
       AND REF_CODE1 = 'Y'
    </select>

    <select id="baseCommonServiceImpl.getEtaxRunUrl" parameterType="Map" resultType="rMap">
    /* baseCommonServiceImpl.getEtaxRunUrl */
    SELECT CODE_NAME
      FROM BSA100T
     WHERE COMP_CODE = 'MASTER'
       AND MAIN_CODE = 'B609'
       AND SUB_CODE = 'etax_run_url'
    </select>
    <insert id="baseCommonServiceImpl.printLogSave" parameterType="Map">
        /*srq100skrvServiceImpl.printLogSave*/
        INSERT INTO LOG500T
           (COMP_CODE
			, DIV_CODE
			, PGM_ID
			, BASIS_NUM
			, BASIS_SEQ
			, REF1
			, REF2
			, REF3
			, REF4
			, REF5
			, PRINT_CNT
			, PRINT_DATE
			, INSERT_DB_USER
			, INSERT_DB_TIME
			, UPDATE_DB_USER
			, UPDATE_DB_TIME
           )
     VALUES
           (#{COMP_CODE}
           	, #{DIV_CODE}
			, #{PGM_ID}
			, #{BASIS_NUM}
			, #{BASIS_SEQ}
			, ' '
			, ' '
			, ' '
			, ' '
			, ' '
			, '1'
			, GETDATE()
            , #{USER_ID}
            , GETDATE()
            , #{USER_ID}
            , GETDATE())
    </insert>

    <select id="baseCommonServiceImpl.getUserLoginInfo" parameterType="Map" resultType="rMap">
    /* baseCommonServiceImpl.getUserLoginInfo */
		   SELECT A.PWD_UPDATE_DATE
			      ,ISNULL(DATEDIFF(DAY,A.PWD_UPDATE_DATE,GETDATE()),'1') AS PWD_DAY_DIFF
			      ,ISNULL(B.REF_CODE1,'180')		 		 AS PWD_CYCLE
			FROM BSA300T A
			LEFT JOIN BSA100T B ON B.COMP_CODE = A.COMP_CODE
							   AND B.MAIN_CODE = 'B110'
							   AND B.SUB_CODE  != '$'
							   AND B.SUB_CODE  = '10'
			WHERE A.COMP_CODE = #{COMP_CODE}
			  AND A.USER_ID   = #{USER_ID}
    </select>

<!-- 20210427 추가: 체크로직 등(checkEncryptYN, pwRuleCheck, pwCheckQ, pwDuplicateCheck, pwSameCheck) 추가 -->
	<select id="baseCommonServiceImpl.getUserLoginInfo2" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.getUserLoginInfo2 - 외부사용자(20210427 추가) */
		SELECT A.PWD_UPDATE_DB_TIME                                        AS PWD_UPDATE_DATE
		     , ISNULL(DATEDIFF(DAY, A.PWD_UPDATE_DB_TIME, GETDATE()),'1')  AS PWD_DAY_DIFF
		     , ISNULL(B.REF_CODE5,'180')                                   AS PWD_CYCLE
		FROM      BSA350T A WITH(NOLOCK)
		LEFT JOIN BSA100T B WITH(NOLOCK) ON B.COMP_CODE  = A.COMP_CODE
		                                AND B.MAIN_CODE  = 'B110'
		                                AND B.SUB_CODE  != '$'
		                                AND B.SUB_CODE   = '10'
		WHERE A.COMP_CODE = #{COMP_CODE}
		  AND A.USER_ID   = #{USER_ID}
	</select>

	<select id="baseCommonServiceImpl.oldPwdCheck" parameterType="Map" resultType="rMap">
		SELECT TOP 1 1
		  FROM BSA350T A WITH (NOLOCK)
		 WHERE A.USER_ID= #{S_USER_ID}
		   AND (( A.PASSWORD  = #{OLD_PWD}) OR (pwdcompare(#{OLD_PWD}, A.password) = 1 ) )
	</select>

	<select id="baseCommonServiceImpl.checkEncryptYN" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.checkEncryptYN */
		SELECT TOP 1 1                          AS CNT
		     , ISNULL((
		               SELECT TOP 1 UPPER(REF_CODE5) AS CASE_SENS_YN 
		                 FROM BSA100T WITH (NOLOCK)
		                WHERE COMP_CODE = 'MASTER'
		                  AND MAIN_CODE = 'B110'
		                  AND SUB_CODE  = '40'
		                  AND USE_YN    = 'Y'
		     ),'N')                             AS CASE_SENS_YN
		  FROM BSA100T WITH (NOLOCK)
		 WHERE COMP_CODE = 'MASTER'
		   AND MAIN_CODE = 'B239'
		   AND SUB_CODE  = '10'
		   AND REF_CODE2 = 'Y'
	</select>

	<select id="baseCommonServiceImpl.pwRuleCheck" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.pwRuleCheck */
		SELECT CHAR_TYPE, ALLOW_VALUE FROM PWD100T WITH (NOLOCK)
	</select>

	<select id="baseCommonServiceImpl.pwCheckQ" parameterType="Map" resultType="rMap">
		/* bsa310ukrv.CPassword (fnPwdRegCheck-2) 기존비밀번호 체크 갯수 */
		SELECT TOP 1 CASE WHEN ISNULL(REF_CODE1,'')='' THEN 0
		                  ELSE CONVERT(NUMERIC(10,0), REF_CODE5)
		             END                                         AS CYCLE_CNT
		  FROM BSA100T WITH (NOLOCK) 
		 WHERE COMP_CODE = 'MASTER'
		   AND MAIN_CODE = 'B110'
		   AND SUB_CODE  = '20'
	</select>

	<select id="baseCommonServiceImpl.pwDuplicateCheck" parameterType="Map" resultType="rMap">
		SELECT TOP 1 1
		  FROM BSA350T A WITH (NOLOCK)
		 WHERE A.USER_ID  = #{S_USER_ID}
		   AND pwdcompare(#{NEW_PWD}, A.password) = 1
	</select>

	<select id="baseCommonServiceImpl.pwSameCheck" parameterType="Map" resultType="rMap">
		/* baseCommonServiceImpl.pwSameCheck */
		SET NOCOUNT ON
		    SELECT ISNULL(MAX(CHANGE_CNT),0)- #{DCYCLE_CNT}  AS CHECK_SEQ, COMP_CODE, USER_ID
		      INTO #USER_INFO
		      FROM LOG200T WITH (NOLOCK)
		     WHERE COMP_CODE > '' AND USER_ID= #{S_USER_ID}
		     GROUP BY COMP_CODE, USER_ID
		SET NOCOUNT OFF

		SELECT  TOP 1 1
		  FROM       LOG200T    A WITH (NOLOCK)
		  INNER JOIN #USER_INFO B ON A.COMP_CODE = B.COMP_CODE
		                         AND A.USER_ID   = B.USER_ID
		 WHERE A.COMP_CODE > ''
		   AND A.USER_ID    = #{S_USER_ID}
		   AND A.CHANGE_CNT > B.CHECK_SEQ
		   AND UPPER(uniLITE.fnCipherDecrypt(PASSWORD, '')) = UPPER(#{NEW_PWD})

		DROP TABLE #USER_INFO
	</select>




	<select id="baseCommonServiceImpl.encryptionYN" parameterType="Map" resultType="rMap">
		/* UBsa01Krv.CBsa400UKr[fnSetChangePass] Query01  암호화 적용여부체크 */
		--20210427 추가
		SELECT TOP 1 1 AS CNT
		     , ISNULL((
		         SELECT TOP 1 UPPER(REF_CODE5) AS CASE_SENS_YN 
		           FROM BSA100T WITH (NOLOCK)
		          WHERE COMP_CODE = 'MASTER'
		            AND MAIN_CODE = 'B110'
		            AND SUB_CODE  = '40'
		            AND USE_YN    = 'Y'
		     ),'N') AS CASE_SENS_YN
		  FROM BSA100T WITH (NOLOCK) 
		 WHERE COMP_CODE = 'MASTER' 
		   AND MAIN_CODE = 'B239'
		   AND SUB_CODE  = '10'
		   AND REF_CODE2 = 'Y'
	</select>

	<update id="baseCommonServiceImpl.encryptionSavePw" parameterType="Map">
		UPDATE BSA350T
		   SET PASSWORD           = PWDENCRYPT(#{NEW_PWD})
		     , PWD_UPDATE_DB_TIME = GETDATE()
		     , UPDATE_DB_USER     = #{S_USER_ID}
		     , UPDATE_DB_TIME     = GETDATE()
		 WHERE COMP_CODE &gt; '' AND USER_ID  = #{S_USER_ID}

		IF EXISTS (SELECT TOP 1 1 FROM BSA301T WITH (NOLOCK) WHERE COMP_CODE &gt; '' AND USER_ID=#{S_USER_ID})
		    UPDATE BSA301T
		       SET PASSWORD = uniLITE.fnCipherEncrypt(#{NEW_PWD}, '')
		         , UPDATE_DB_TIME = GETDATE()
		         , UPDATE_DB_USER = #{S_USER_ID}
		     WHERE COMP_CODE &gt; '' AND USER_ID  = #{S_USER_ID}

		ELSE
		    INSERT INTO BSA301T (COMP_CODE, USER_ID, PASSWORD, INSERT_DB_USER, UPDATE_DB_USER)
		    SELECT COMP_CODE, USER_ID, uniLITE.fnCipherEncrypt(#{NEW_PWD}, '') PASSWORD, #{S_USER_ID} INSERT_DB_USER, #{S_USER_ID} UPDATE_DB_USER
		      FROM BSA350T WITH (NOLOCK)
		     WHERE COMP_CODE &gt; ''
		       AND USER_ID   = #{S_USER_ID}
	</update>

	<update id="baseCommonServiceImpl.insertPasswordLog" parameterType="Map">
		/* baseCommonServiceImpl.insertPasswordLog */
		DECLARE @COMP_CODE NVARCHAR(10), @USER_ID NVARCHAR(20), @CASE_SENS_YN NVARCHAR(10), @ENCRYPT_YN NVARCHAR(10)
		SET @COMP_CODE  = ''
		SET @USER_ID    = #{S_USER_ID}
		IF EXISTS (SELECT TOP 1 1 FROM SYSOBJECTS WHERE NAME='LOG200T' AND XTYPE='U')
		BEGIN
		    SELECT  @CASE_SENS_YN = ISNULL((SELECT TOP 1 UPPER(REF_CODE5)            --외부사용자는 REF_CODE5 사용
		                                      FROM BSA100T WITH (NOLOCK)
		                                     WHERE COMP_CODE = 'MASTER'
		                                       AND MAIN_CODE = 'B110'
		                                       AND SUB_CODE  = '40'
		                                       AND USE_YN    = 'Y'),'N') ,
		            @ENCRYPT_YN   = ISNULL((SELECT TOP 1 REF_CODE2                   --외부사용자는 REF_CODE2 사용
		                                      FROM BSA100T WITH (NOLOCK)
		                                     WHERE COMP_CODE = 'MASTER'
		                                       AND MAIN_CODE = 'B239'
		                                       AND SUB_CODE  = '10'), 'N')

		    IF @CASE_SENS_YN IS NULL OR @CASE_SENS_YN = ''
		        SET @CASE_SENS_YN = 'N'

		    IF @ENCRYPT_YN = 'Y'
		    BEGIN
		        IF EXISTS (SELECT TOP 1 1 FROM LOG200T WITH (NOLOCK) WHERE COMP_CODE &gt; '' AND USER_ID=@USER_ID)
		            INSERT INTO LOG200T (COMP_CODE, USER_ID, CHANGE_CNT, PASSWORD, CHANGE_DB_TIME, INSERT_DB_USER, UPDATE_DB_USER)
		            SELECT TOP 1 COMP_CODE, USER_ID, MAX(CHANGE_CNT)+1, uniLITE.fnCipherEncrypt(CASE WHEN @CASE_SENS_YN='Y' THEN #{NEW_PWD} ELSE UPPER(#{NEW_PWD}) END, '') AS PASSWORD, GETDATE() CHANGE_DB_TIME, @USER_ID AS INSERT_DB_USER, @USER_ID AS UPDATE_DB_USER
		              FROM LOG200T WITH (NOLOCK)
		             WHERE COMP_CODE &gt; '' AND USER_ID=@USER_ID
		             GROUP BY COMP_CODE, USER_ID
		        ELSE
		            INSERT INTO LOG200T (COMP_CODE, USER_ID, CHANGE_CNT, PASSWORD, CHANGE_DB_TIME, INSERT_DB_USER, UPDATE_DB_USER)
		            SELECT TOP 1 COMP_CODE, @USER_ID USER_ID, 1 CHANGE_CNT, uniLITE.fnCipherEncrypt(CASE WHEN @CASE_SENS_YN='Y' THEN #{NEW_PWD} ELSE UPPER(#{NEW_PWD}) END, '') AS PASSWORD, GETDATE() CHANGE_DB_TIME, @USER_ID AS INSERT_DB_USER, @USER_ID AS UPDATE_DB_USER
		              FROM BSA350T WITH (NOLOCK)
		             WHERE COMP_CODE &gt; ''
		               AND USER_ID   = @USER_ID
		    END
		END
	</update>
</mapper>