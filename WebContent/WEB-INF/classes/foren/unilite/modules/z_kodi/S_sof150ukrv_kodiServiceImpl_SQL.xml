<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="s_sof150ukrv_kodiServiceImpl">
    <!-- 수주대응 등록 - 메인 데이터 조회 -->
    <select id="s_sof150ukrv_kodiServiceImpl.selectList" parameterType="Map" resultType="rMap">
        /* s_sof150ukrv_kodiServiceImpl.selectList */
        BEGIN
            SET NOCOUNT ON
            SET ARITHABORT ON

            DECLARE @CompCode       NVARCHAR(08)    /* 법인코드      */
                  , @UserId         NVARCHAR(100)   /* 사용자ID */
                  , @LangType       NVARCHAR(2)     /* 언어구분     */
                  , @RefItem        NVARCHAR(01)
                  , @DateFormat     NVARCHAR(10)

            SET @CompCode = #{S_COMP_CODE}
            SET @UserId   = #{S_USER_ID}
            SET @LangType = #{S_LANG_CODE}

            /* 명칭 참조 유형 */
            SELECT TOP 1 @RefItem = REF_ITEM
              FROM BSA300T WITH (NOLOCK)
             WHERE USER_ID = @UserId

            SET @RefItem = ISNULL(@RefItem, N'0')

            /* 날짜 포맷 유형 설정 */
            SELECT TOP 1 @DateFormat = CODE_NAME
              FROM BSA100T WITH (NOLOCK)
             WHERE COMP_CODE = @CompCode
               AND MAIN_CODE = N'B044'
               AND REF_CODE1 = N'Y'

            SET @DateFormat = ISNULL(@DateFormat, 'YYYY.MM.DD')


            IF EXISTS(SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#TEST_PJW'))
                BEGIN
                    DROP TABLE #TEST_PJW
                END

            --------------------
            IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#TMP1'))
                DROP TABLE #TMP1

            CREATE TABLE #TMP1
            (
                COMP_CODE  NVARCHAR(08)
              , DIV_CODE   NVARCHAR(08)
              , SO_NUM     NVARCHAR(40)
              , SO_SEQ     INT
              , QTYCOUNT_A NUMERIC(30, 6)
              , QTYCOUNT_B NUMERIC(30, 6)
              , QTYCOUNT_C NUMERIC(30, 6)
              , PLANQTY_B  NUMERIC(30, 6)
              , PLANQTY_C  NUMERIC(30, 6)
            )

            CREATE CLUSTERED INDEX #IDX_TMP1 ON #TMP1(COMP_CODE, DIV_CODE, SO_NUM, SO_SEQ)

            INSERT INTO #TMP1
            SELECT X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                    , SUM(X.QTYCOUNT_A) AS QTYCOUNT_A
                    , SUM(X.QTYCOUNT_B) AS QTYCOUNT_B
                    , SUM(X.QTYCOUNT_C) AS QTYCOUNT_C
                    , SUM(X.PLANQTY_B)  AS PLANQTY_B
                    , SUM(X.PLANQTY_C)  AS PLANQTY_C
            FROM (
                  SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                       , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'A' THEN SUM(ISNULL(B.WORK_Q, 0))  ELSE 0 END) AS QTYCOUNT_A
                       , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(B.WORK_Q, 0))  ELSE 0 END) AS QTYCOUNT_B
                       , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(B.WORK_Q, 0))  ELSE 0 END) AS QTYCOUNT_C
                       , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_B
                       , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_C
                  FROM      PMP100T A WITH(NOLOCK)
                  LEFT JOIN PMR100T B WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                  AND B.DIV_CODE        = A.DIV_CODE
                                                  AND B.WKORD_NUM       = A.WKORD_NUM
                                                  AND B.PROG_WORK_CODE  = A.PROG_WORK_CODE
                  LEFT JOIN PBS200T C WITH(NOLOCK) ON C.COMP_CODE       = A.COMP_CODE
                                                  AND C.DIV_CODE        = A.DIV_CODE
                                                  AND C.WORK_SHOP_CODE  = A.WORK_SHOP_CODE
                                                  AND C.PROG_WORK_CODE  = A.PROG_WORK_CODE
                  WHERE A.COMP_CODE   = #{S_COMP_CODE}
                  AND   A.WORK_END_YN = 'N'
                  GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, A.WKORD_NUM, ISNULL(C.TEMPC_01, '')
                ) AS X
                GROUP BY X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ


            IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#TMP2'))
                DROP TABLE #TMP2

            CREATE TABLE #TMP2
            (
                COMP_CODE  NVARCHAR(08)
              , DIV_CODE   NVARCHAR(08)
              , SO_NUM     NVARCHAR(40)
              , SO_SEQ     INT
              , PLANQTY_B  NUMERIC(30, 6)
              , PLANQTY_C  NUMERIC(30, 6)
            )

            CREATE CLUSTERED INDEX #IDX_TMP2 ON #TMP2(COMP_CODE, DIV_CODE, SO_NUM, SO_SEQ)

            INSERT INTO #TMP2
            SELECT X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                , SUM(X.PLANQTY_B) AS PLANQTY_B
                , SUM(X.PLANQTY_C) AS PLANQTY_C
            FROM (
                  SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                      , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_B
                      , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_C
                  FROM      PMP100T A WITH(NOLOCK)
                  LEFT JOIN PBS200T C WITH(NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
                                                  AND C.DIV_CODE       = A.DIV_CODE
                                                  AND C.WORK_SHOP_CODE = A.WORK_SHOP_CODE
                                                  AND C.PROG_WORK_CODE = A.PROG_WORK_CODE
                  WHERE A.COMP_CODE   = #{S_COMP_CODE}
                  AND   A.WORK_END_YN = 'N'
                  GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, ISNULL(C.TEMPC_01, '')
                 ) AS X
            GROUP BY X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ


            IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#TMP3'))
                DROP TABLE #TMP3

            CREATE TABLE #TMP3
            (
                COMP_CODE              NVARCHAR(08)
              , DIV_CODE               NVARCHAR(08)
              , SO_NUM                 NVARCHAR(40)
              , SO_SEQ                 INT
              , MICROBE_DATE_MIN       NVARCHAR(08)
              , MICROBE_DATE_MAX       NVARCHAR(08)
              , EXPECTED_END_DATE_MIN  NVARCHAR(08)
              , EXPECTED_END_DATE_MAX  NVARCHAR(08)
            )

            CREATE CLUSTERED INDEX #IDX_TMP3 ON #TMP3(COMP_CODE, DIV_CODE, SO_NUM, SO_SEQ)

            INSERT INTO #TMP3
            SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                , MIN(D.MICROBE_DATE)      AS MICROBE_DATE_MIN
                , MAX(D.MICROBE_DATE)      AS MICROBE_DATE_MAX
                , MIN(D.EXPECTED_END_DATE) AS EXPECTED_END_DATE_MIN
                , MAX(D.EXPECTED_END_DATE) AS EXPECTED_END_DATE_MAX
            FROM      PMP100T A WITH(NOLOCK)
            LEFT JOIN PMR100T B WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                            AND B.DIV_CODE        = A.DIV_CODE
                                            AND B.WKORD_NUM       = A.WKORD_NUM
                                            AND B.PROG_WORK_CODE  = A.PROG_WORK_CODE
                                            AND B.LINE_END_YN     = 'Y'
            LEFT  JOIN PMR200T C WITH(NOLOCK) ON C.COMP_CODE      = B.COMP_CODE
                                             AND C.DIV_CODE       = B.DIV_CODE
                                             AND C.PRODT_NUM      = B.PRODT_NUM
                                             AND C.WKORD_NUM      = B.WKORD_NUM
            LEFT  JOIN QMS400T D WITH(NOLOCK) ON C.COMP_CODE      = D.COMP_CODE
                                             AND C.DIV_CODE       = D.DIV_CODE
                                             AND C.RECEIPT_NUM    = D.RECEIPT_NUM
                                             AND C.RECEIPT_SEQ    = D.RECEIPT_SEQ
            WHERE A.COMP_CODE   = #{S_COMP_CODE}
            AND   A.WORK_END_YN = 'N'
            GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ


            IF EXISTS (SELECT TOP 1 1 FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#SOF'))
                DROP TABLE #SOF

            SELECT A.COMP_CODE
                 , A.DIV_CODE
                 , A.ORDER_NUM
                 , B.SER_NO
                 , B.OUT_DIV_CODE
                 , B.ITEM_CODE
                 , A.CUSTOM_CODE
                 , A.ORDER_DATE
                 , B.ORDER_Q
                 , B.ORDER_P
                 , B.OUTSTOCK_Q
                 , B.RETURN_Q
                 , B.INIT_DVRY_DATE
                 , B.DVRY_DATE
                 , B.WEEK_NUM
                 , B.REASON1
                 , B.REASON2
                 , B.REASON3
                 , B.REASON4
                 , B.REASON
                 , B.CLOSE_YN
                 , B.CLOSE_REASON
                 , A.PO_NUM
            INTO #SOF
            FROM       SOF100T A WITH (NOLOCK)
            INNER JOIN SOF110T B WITH (NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                              AND B.DIV_CODE  = A.DIV_CODE
                                              AND B.ORDER_NUM = A.ORDER_NUM
            WHERE A.COMP_CODE     = #{S_COMP_CODE}
            AND   B.ORDER_STATUS != 'Y'
            AND   B.ORDER_Q - B.OUTSTOCK_Q + B.RETURN_Q &gt; 0

           /* 사업장(권한체크필수)   */
           <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
               AND A.DIV_CODE IN
               <foreach collection="DIV_CODE" item="item1" separator="," close=")" open="(">
                   #{item1}
               </foreach>
           </if>
           <if test="@foren.Ognl@isNotEmpty(OUT_DIV_CODE)">
                           AND B.OUT_DIV_CODE IN
                           <foreach collection="OUT_DIV_CODE" item="item1" separator="," close=")" open="(">
                               #{item1}
                           </foreach>
            </if>

            AND ISNULL(B.CLOSE_YN, 'N') != 'Y'
            <if test="ORDER_STATUS == &quot;Y&quot;">
               AND ORDER_STATUS = 'Y'
            </if>
            <if test="ORDER_STATUS == &quot;N&quot;">
               AND ORDER_STATUS = 'N'
            </if>
            <if test="@foren.Ognl@isNotEmpty(DVRY_DATE_FR)">
               AND B.DVRY_DATE   &gt;= #{DVRY_DATE_FR}              /* 납기일(FR) */
            </if>
            <if test="@foren.Ognl@isNotEmpty(DVRY_DATE_TO)">
               AND B.DVRY_DATE   &lt;= #{DVRY_DATE_TO}              /* 납기일(TO) */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ORDER_PRSN)">
               AND A.ORDER_PRSN IN
                    <foreach collection="ORDER_PRSN" item="item" separator="," close=")" open="(">
                        #{item}
                    </foreach>                                      /* 담당자 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(CUSTOM_CODE)">
               AND A.CUSTOM_CODE LIKE  #{CUSTOM_CODE} + '%'         /* 거래처코드 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ORDER_DATE_FR)">
               AND A.ORDER_DATE  &gt;= #{ORDER_DATE_FR}             /* 시작 수주일 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ORDER_DATE_TO)">
               AND A.ORDER_DATE  &lt;= #{ORDER_DATE_TO}             /* 종료 수주일 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ITEM_CODE)">
               AND B.ITEM_CODE   LIKE #{ITEM_CODE} + '%'            /* 품목*/
            </if>
            <if test="@foren.Ognl@isNotEmpty(ORDER_TYPE)">
               AND A.ORDER_TYPE  = #{ORDER_TYPE}                    /* 판매유형 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(FR_ORDER_QTY)">
               AND B.ORDER_Q    &gt;= #{FR_ORDER_QTY}               /* 시작 수주량 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(TO_ORDER_QTY)">
               AND B.ORDER_Q    &lt;= #{TO_ORDER_QTY}               /* 종료 수주량 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(FR_ORDER_NUM)">
               AND A.ORDER_NUM  &gt;= #{FR_ORDER_NUM}               /* 수주번호(Fr) */
            </if>
            <if test="@foren.Ognl@isNotEmpty(TO_ORDER_NUM)">
               AND A.ORDER_NUM  &lt;= #{TO_ORDER_NUM}               /* 수주번호(TO) */
            </if>
            <if test="@foren.Ognl@isNotEmpty(SER_NO)">
               AND B.SER_NO = #{SER_NO}                             /* 수주순번 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(REMARK)">
                AND B.REMARK    LIKE '%' + #{REMARK} + '%'          /*  비고  */
            </if>
            <if test="rdoSelect2 == &quot;6&quot;">
               AND A.STATUS = '6'                                   /*승인*/
            </if>
            <if test="rdoSelect2 == &quot;5&quot;">
               AND A.STATUS = '5'                                   /*반려*/
            </if>
            <if test="rdoSelect2 == &quot;N&quot;">
               AND A.STATUS IN ('1', '2', '3', '4')                 /*미승인*/
            </if>
            <if test="@foren.Ognl@isNotEmpty(PJT_CODE)">            /*프로젝트번호*/
               AND  A.PROJECT_NO  LIKE #{PJT_CODE} + '%'
            </if>
            --------------------------

            /* 데이터 조회 */
            /* 영업 */
            SELECT A.COMP_CODE                              AS COMP_CODE
                 , A.DIV_CODE                               AS DIV_CODE
                 , A.CUSTOM_CODE                            AS CUSTOM_CODE
                 , CASE WHEN @RefItem = '1' THEN E.CUSTOM_NAME1
                        WHEN @RefItem = '2' THEN E.CUSTOM_NAME2
                        ELSE E.CUSTOM_NAME
                   END                                      AS CUSTOM_NAME      -- 거래처명
                 , A.ORDER_NUM                              AS ORDER_NUM        -- 수주번호(계획오더번호)
                 , A.SER_NO                                 AS SER_NO
                 , A.ITEM_CODE                              AS ITEM_CODE
                 , C.ITEM_NAME                              AS ITEM_NAME
                 , A.ORDER_DATE                             AS ORDER_DATE
                 , unilite.fnFormat(A.COMP_CODE
                                  , A.ORDER_Q
                                  , 'P_FSET_QS')            AS ORDER_Q  -- 수주량
                 , unilite.fnFormat(A.COMP_CODE
                                  , A.ORDER_Q - A.OUTSTOCK_Q + A.RETURN_Q
                                  , 'P_FSET_QS')            AS ORDER_REM_Q      -- 미납량
                 , A.INIT_DVRY_DATE                         AS INIT_DVRY_DATE   -- 납품일
                 , A.DVRY_DATE                              AS DVRY_DATE        -- 납품변경일
                 , A.WEEK_NUM                               AS DVRY_WEEK_NUM            -- 납기주차
                 , A.REASON1                                AS REASON1          -- 미대응사유1(내용물)
                 , A.REASON2                                AS REASON2          -- 미대응사유2(부자재)
                 , D.CHILD_ITEM_CODE                        AS CHILD_ITEM_CODE  -- 내용물코드
                 , unilite.fnFormat(A.COMP_CODE
                                  , A.OUTSTOCK_Q - A.RETURN_Q
                                  , 'P_FSET_QS')            AS COMPLETE_Q       -- 완료량
                 , A.REASON3                                AS REASON3          -- 미대응사유3(원료)
                 , A.REASON4                                AS REASON4          -- 미대응사유4(기타)
                 , A.REASON                                 AS REASON           -- 납품변경이력(납기변경이력)
                 --, ''                                     AS 유통10종
                 -- 내용물 실제필요수량 계산: (${ORDER_REM_Q} * (D.UNIT_Q / D.PROD_UNIT_Q)) * (100 / D.SET_QTY)
                 , F.UNIT_Q
                 , F.PROD_UNIT_Q
                 , F.SET_QTY
                 , G.ITEM_NAME                              AS CHILD_ITEM_NAME
                 --20190607 출고사업장 추가
                 , A.OUT_DIV_CODE
                 --20190611 생산계획번호 추가
                 , Z.WK_PLAN_NUM
                 --20190613 계획주차 추가
                 , Z.WEEK_NUM
                 --20190617 단가 추가
                 , A.ORDER_P
                 --20190620 계획량, 미생물의뢰일, 완료예상일 추가
                 , Z.WK_PLAN_Q
                 --20200716 제조진행현황(g), 충전진행현황(ea), 포장진행현황(ea), 충전진행율, 포장진행율 칼럼추가
                 , S.QTYCOUNT_A
                 , S.QTYCOUNT_B
                 , S.QTYCOUNT_C
                 , W.PLANQTY_B
                 , W.PLANQTY_C
                 --20201022 검사정보에서 의뢰일(MIN~MAX), 예산완료일(MIN~MAX)가져오기
                 --, B.MICROBE_DATE
                 --, B.EXPECTED_END_DATE
                , K.MICROBE_DATE_MIN
                , K.MICROBE_DATE_MAX
                , K.EXPECTED_END_DATE_MIN
                , K.EXPECTED_END_DATE_MAX
                 --20190627 마감여부 추가
                 , ISNULL(A.CLOSE_YN, 'N')                  AS CLOSE_YN
                 , ISNULL(A.CLOSE_REASON, 'N')              AS CLOSE_REASON  --마감사유(코드:S161)
                 --20190627 LOT_NO 가져오기 위한 로직 (B.LOT_NO -> X.LOT_NO)
                 , Y.LOT_NO                                 AS LOT_NO           -- 제조Lot
                 , A.PO_NUM
                 , A.REASON1                                AS REASON1_OLD
                 , A.REASON2                                AS REASON2_OLD
                 , A.REASON3                                AS REASON3_OLD
                 , A.REASON4                                AS REASON4_OLD
              INTO #TEST_PJW
              FROM       #SOF A WITH(NOLOCK)
--            INNER JOIN SOF110T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
--                                             AND B.DIV_CODE  = A.DIV_CODE
--                                             AND B.ORDER_NUM = A.ORDER_NUM
              INNER JOIN BPR100T C WITH(NOLOCK) ON C.COMP_CODE = A.COMP_CODE
                                               AND C.ITEM_CODE = A.ITEM_CODE
              LEFT  JOIN (SELECT A.COMP_CODE, A.DIV_CODE   , A.PROD_ITEM_CODE, MAX(A.CHILD_ITEM_CODE) AS CHILD_ITEM_CODE
                            FROM       BPR500T A WITH(NOLOCK)
                            INNER JOIN BPR200T B WITH(NOLOCK) ON B.COMP_CODE    = A.COMP_CODE
                                                             AND B.DIV_CODE     = A.DIV_CODE
                                                             AND B.ITEM_CODE    = A.CHILD_ITEM_CODE
                                                             AND B.ITEM_ACCOUNT IN ('30', '50', '20')
                           WHERE A.COMP_CODE = @CompCode
                           <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                               AND A.DIV_CODE IN
                               <foreach collection="DIV_CODE" item="item1" separator="," close=")" open="(">
                                   #{item1}
                               </foreach>
                           </if>
                             AND CONVERT(NVARCHAR(08), GETDATE(), 112)BETWEEN A.START_DATE AND ISNULL(A.STOP_DATE, '29991231')
                             AND A.USE_YN = '1'
                           GROUP BY A.COMP_CODE, A.DIV_CODE   , A.PROD_ITEM_CODE) D          ON D.COMP_CODE      = A.COMP_CODE
                                                                                            AND D.DIV_CODE       = A.DIV_CODE
                                                                                            AND D.PROD_ITEM_CODE = A.ITEM_CODE
              INNER JOIN BCM100T E WITH(NOLOCK) ON E.COMP_CODE       = A.COMP_CODE
                                               AND E.CUSTOM_CODE     = A.CUSTOM_CODE
              LEFT  JOIN BPR500T F WITH(NOLOCK) ON F.COMP_CODE       = D.COMP_CODE
                                               AND F.DIV_CODE        = D.DIV_CODE
                                               AND F.PROD_ITEM_CODE  = D.PROD_ITEM_CODE
                                               AND F.CHILD_ITEM_CODE = D.CHILD_ITEM_CODE
                                               AND CONVERT(NVARCHAR(08), GETDATE(), 112) BETWEEN F.START_DATE AND ISNULL(F.STOP_DATE, '29991231')
              LEFT  JOIN BPR100T G WITH(NOLOCK) ON G.COMP_CODE   = F.COMP_CODE
                                               AND G.ITEM_CODE   = F.CHILD_ITEM_CODE
              LEFT  JOIN BPR100T H WITH(NOLOCK) ON H.COMP_CODE   = C.COMP_CODE
                                               AND H.ITEM_CODE   = C.ITEM_GROUP
              --20190611 생산계획번호 조회 : COMP_CODE, ORDER_NUM, SEQ, DIV_CODE
              LEFT  JOIN PPL100T Z WITH(NOLOCK) ON Z.COMP_CODE   = A.COMP_CODE
                                               AND Z.DIV_CODE    = A.OUT_DIV_CODE
                                               AND Z.ORDER_NUM   = A.ORDER_NUM
                                               AND Z.SEQ         = A.SER_NO
                                               AND Z.ITEM_CODE   = A.ITEM_CODE
              --20190627 LOT_NO 가져오기 위한 로직: 20191010 PMP100T에 ORDER_NUM이 안 들어간 데이터 존재하여 PPL100T와 PMR100T JON 하도록 수정
        --    LEFT  JOIN PMP100T X WITH(NOLOCK) ON X.COMP_CODE   = B.COMP_CODE
        --                                     AND X.DIV_CODE    = B.OUT_DIV_CODE
        --                                     AND X.SO_NUM      = B.ORDER_NUM
        --                                     AND X.SO_SEQ      = B.SER_NO
        --                                     AND X.ITEM_CODE   = B.ITEM_CODE
        --                                     AND X.LINE_END_YN = 'Y'
        --    LEFT  JOIN PMR100T Y WITH(NOLOCK) ON Y.COMP_CODE   = X.COMP_CODE
        --                                     AND Y.DIV_CODE    = X.DIV_CODE
        --                                     AND Y.WKORD_NUM   = X.WKORD_NUM
        --                                     AND Y.LINE_END_YN = 'Y'
              LEFT  JOIN PMR100T Y WITH(NOLOCK) ON Y.COMP_CODE   = Z.COMP_CODE
                                               AND Y.DIV_CODE    = Z.DIV_CODE
                                               AND Y.WK_PLAN_NUM = Z.WK_PLAN_NUM
                                               AND Y.LINE_END_YN = 'Y'
                -- 20200715 제조진행현황(g), 충전진행현황(ea), 포장진행현황(ea), 충전진행율, 포장진행율 칼럼추가
             LEFT JOIN (
                        /*
                        SELECT X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                             , SUM(X.QTYCOUNT_A) AS QTYCOUNT_A
                             , SUM(X.QTYCOUNT_B) AS QTYCOUNT_B
                             , SUM(X.QTYCOUNT_C) AS QTYCOUNT_C
                             , SUM(X.PLANQTY_B) AS PLANQTY_B
                             , SUM(X.PLANQTY_C) AS PLANQTY_C
                        FROM (SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'A' THEN SUM(ISNULL(B.WORK_Q, 0)) ELSE 0 END) AS QTYCOUNT_A
                                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(B.WORK_Q, 0)) ELSE 0 END) AS QTYCOUNT_B
                                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(B.WORK_Q, 0)) ELSE 0 END) AS QTYCOUNT_C
                                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_B
                                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_C
                                                  FROM PMP100T A WITH(NOLOCK)
                                                       LEFT JOIN PMR100T B WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                                                       AND B.DIV_CODE        = A.DIV_CODE
                                                                                       AND B.WKORD_NUM       = A.WKORD_NUM
                                                                                       AND B.PROG_WORK_CODE  = A.PROG_WORK_CODE
                                                        LEFT JOIN PBS200T C WITH(NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
                                                                                        AND C.DIV_CODE       = A.DIV_CODE
                                                                                        AND C.WORK_SHOP_CODE = A.WORK_SHOP_CODE
                                                                                        AND C.PROG_WORK_CODE = A.PROG_WORK_CODE

                            GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, A.WKORD_NUM, ISNULL(C.TEMPC_01, '')) AS X
                            GROUP BY X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                        */

                            SELECT * FROM #TMP1 WITH (NOLOCK)

                        ) AS S ON S.COMP_CODE = A.COMP_CODE
                              AND S.DIV_CODE  = A.OUT_DIV_CODE
                              AND S.SO_NUM    = A.ORDER_NUM
                              AND S.SO_SEQ    = A.SER_NO
             LEFT JOIN (
                        /*
                        SELECT X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                             , SUM(X.PLANQTY_B) AS PLANQTY_B
                             , SUM(X.PLANQTY_C) AS PLANQTY_C
                        FROM (SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'B' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_B
                                     , (CASE WHEN ISNULL(C.TEMPC_01, '') = 'C' THEN SUM(ISNULL(A.WKORD_Q, 0)) ELSE 0 END) AS PLANQTY_C
                                  FROM PMP100T A WITH(NOLOCK)
                                       LEFT JOIN PBS200T C WITH(NOLOCK) ON C.COMP_CODE      = A.COMP_CODE
                                                                       AND C.DIV_CODE       = A.DIV_CODE
                                                                       AND C.WORK_SHOP_CODE = A.WORK_SHOP_CODE
                                                                       AND C.PROG_WORK_CODE = A.PROG_WORK_CODE
                                 GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ, ISNULL(C.TEMPC_01, '')) AS X
                         GROUP BY X.COMP_CODE, X.DIV_CODE, X.SO_NUM, X.SO_SEQ
                         */

                            SELECT * FROM #TMP2  WITH (NOLOCK)

                       ) W ON W.COMP_CODE = A.COMP_CODE
                          AND W.DIV_CODE  = A.OUT_DIV_CODE
                          AND W.SO_NUM    = A.ORDER_NUM
                          AND W.SO_SEQ    = A.SER_NO
             LEFT JOIN (
                        /*
                        SELECT A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                             , MIN(D.MICROBE_DATE) AS MICROBE_DATE_MIN
                             , MAX(D.MICROBE_DATE) AS MICROBE_DATE_MAX
                             , MIN(D.EXPECTED_END_DATE) AS EXPECTED_END_DATE_MIN
                             , MAX(D.EXPECTED_END_DATE) AS EXPECTED_END_DATE_MAX
                          FROM PMP100T A WITH(NOLOCK)
                                LEFT JOIN PMR100T B WITH(NOLOCK) ON B.COMP_CODE       = A.COMP_CODE
                                                                AND B.DIV_CODE        = A.DIV_CODE
                                                                AND B.WKORD_NUM       = A.WKORD_NUM
                                                                AND B.PROG_WORK_CODE  = A.PROG_WORK_CODE
                                                                AND B.LINE_END_YN = 'Y'
                                LEFT  JOIN PMR200T C WITH(NOLOCK) ON C.COMP_CODE  = B.COMP_CODE
                                                                    AND C.DIV_CODE   = B.DIV_CODE
                                                                    AND C.PRODT_NUM  = B.PRODT_NUM
                                                                    AND C.WKORD_NUM  = B.WKORD_NUM
                                LEFT  JOIN QMS400T D WITH(NOLOCK) ON C.COMP_CODE  = D.COMP_CODE
                                                                    AND C.DIV_CODE   = D.DIV_CODE
                                                                    AND C.RECEIPT_NUM = D.RECEIPT_NUM
                                                                    AND C.RECEIPT_SEQ = D.RECEIPT_SEQ
                        GROUP BY A.COMP_CODE, A.DIV_CODE, A.SO_NUM, A.SO_SEQ
                        */

                            SELECT * FROM #TMP3  WITH (NOLOCK)

                       ) AS K ON K.COMP_CODE  = A.COMP_CODE
                             AND K.DIV_CODE   = A.OUT_DIV_CODE
                             AND K.SO_NUM     = A.ORDER_NUM
                             AND K.SO_SEQ     = A.SER_NO
             WHERE A.COMP_CODE   = @CompCode
            <if test="@foren.Ognl@isNotEmpty(CUSTOM_NAME)">
               AND E.CUSTOM_NAME LIKE  #{CUSTOM_NAME} + '%'         /* 거래처명 */
            </if>

            <if test="@foren.Ognl@isNotEmpty(ITEM_NAME)">
               AND C.ITEM_NAME   LIKE #{ITEM_NAME} + '%'            /* 품목명*/
            </if>
            <if test="@foren.Ognl@isNotEmpty(AGENT_TYPE)">
               AND E.AGENT_TYPE  = #{AGENT_TYPE}                    /* 거래처분류    */
            </if>
            <if test="@foren.Ognl@isNotEmpty(AREA_TYPE)">
               AND E.AREA_TYPE    = #{AREA_TYPE}                    /* 지역 */
            </if>

            <if test="@foren.Ognl@isNotEmpty(TXTLV_L1)">
               AND C.ITEM_LEVEL1    = #{TXTLV_L1}                   /* 대분류 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(TXTLV_L2)">
               AND C.ITEM_LEVEL2    = #{TXTLV_L2}                   /* 중분류 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(TXTLV_L3)">
               AND C.ITEM_LEVEL3    = #{TXTLV_L3}                   /* 소분류 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ITEM_GROUP)">
               AND C.ITEM_GROUP  = #{ITEM_GROUP}                    /* 대표모델 */
            </if>
            <if test="@foren.Ognl@isNotEmpty(ITEM_GROUP_NAME)">
               AND (CASE WHEN @RefItem = '1' THEN H.ITEM_NAME1
                         WHEN @RefItem = '2' THEN H.ITEM_NAME2
                                             ELSE H.ITEM_NAME
                     END)       LIKE #{ITEM_GROUP_NAME} + '%'       /* 대표모델명 */
            </if>

            GROUP BY A.COMP_CODE
                   , A.DIV_CODE
                   , A.CUSTOM_CODE
                   , E.CUSTOM_NAME1
                   , E.CUSTOM_NAME2
                   , E.CUSTOM_NAME
                   , A.ORDER_NUM
                   , A.SER_NO
                   , A.ITEM_CODE
                   , C.ITEM_NAME
                   , A.ORDER_DATE
                   , A.ORDER_Q
                   , A.OUTSTOCK_Q
                   , A.RETURN_Q
                   , A.INIT_DVRY_DATE
                   , A.DVRY_DATE
                   , A.REASON1
                   , A.REASON2
                   , D.CHILD_ITEM_CODE
                   , A.REASON3
                   , A.REASON4
                   , A.REASON
                   , F.UNIT_Q
                   , F.PROD_UNIT_Q
                   , F.SET_QTY
                   , G.ITEM_NAME
                   , A.OUT_DIV_CODE
                   , Z.WK_PLAN_NUM
                   , Z.WEEK_NUM
                   , A.WEEK_NUM
                   , A.ORDER_P
                   , Z.WK_PLAN_Q
                   , S.QTYCOUNT_A
                   , S.QTYCOUNT_B
                   , S.QTYCOUNT_C
                   , W.PLANQTY_B
                   , W.PLANQTY_C
                   , K.MICROBE_DATE_MIN
                   , K.MICROBE_DATE_MAX
                   , K.EXPECTED_END_DATE_MIN
                   , K.EXPECTED_END_DATE_MAX
                   , A.CLOSE_YN
                   , A.CLOSE_REASON
                   , Y.LOT_NO
                   , A.PO_NUM

            --20191010 추가: 생산계획번호 / 계획주차(MAX), LOT_NO(한 컬럼) 가져오기 위해 추가
            SELECT A.COMP_CODE
                 , A.DIV_CODE
                 , A.CUSTOM_CODE
                 , A.CUSTOM_NAME
                 , A.ORDER_NUM
                 , A.SER_NO
                 , A.ITEM_CODE
                 , A.ITEM_NAME
                 , A.ORDER_DATE
                 , A.ORDER_Q
                 , A.ORDER_REM_Q
                 , A.INIT_DVRY_DATE
                 , A.DVRY_DATE
                 , A.DVRY_WEEK_NUM
                 , A.REASON1
                 , A.REASON2
                 , A.CHILD_ITEM_CODE
                 , A.COMPLETE_Q
                 , A.REASON3
                 , A.REASON4
                 , A.REASON
                 , A.UNIT_Q
                 , A.PROD_UNIT_Q
                 , A.SET_QTY
                 , A.CHILD_ITEM_NAME
                 , A.OUT_DIV_CODE
                 , MAX(A.WK_PLAN_NUM)   AS WK_PLAN_NUM
                 , MAX(A.WEEK_NUM)      AS WEEK_NUM
                 , A.ORDER_P
                 , SUM(A.WK_PLAN_Q)     AS WK_PLAN_Q
                 , A.QTYCOUNT_A
                 , A.QTYCOUNT_B
                 , A.QTYCOUNT_C
                 , CASE WHEN A.PLANQTY_B = 0 THEN 0
                        ELSE (CASE WHEN (A.QTYCOUNT_B/A.PLANQTY_B)*100 >100 THEN 100 ELSE (A.QTYCOUNT_B/A.PLANQTY_B)*100 END)
                    END  AS WORK_RATE_B
                 , CASE WHEN A.PLANQTY_C = 0 THEN 0
                        ELSE (CASE WHEN (A.QTYCOUNT_C/A.PLANQTY_C)*100 >100 THEN 100 ELSE (A.QTYCOUNT_C/A.PLANQTY_C)*100 END)
                    END  AS WORK_RATE_C
                 , A.MICROBE_DATE_MIN
                 , A.MICROBE_DATE_MAX
                 , A.EXPECTED_END_DATE_MIN
                 , A.EXPECTED_END_DATE_MAX
                 , A.CLOSE_YN
                 , A.CLOSE_REASON
                 , A.LOT_NO
                 , A.PO_NUM
                 , A.REASON1 AS REASON1_OLD
                 , A.REASON2 AS REASON2_OLD
                 , A.REASON3 AS REASON3_OLD
                 , A.REASON4 AS REASON4_OLD
              FROM (
                    SELECT A.COMP_CODE
                           , A.DIV_CODE
                           , A.CUSTOM_CODE
                           , A.CUSTOM_NAME
                           , A.ORDER_NUM
                           , A.SER_NO
                           , A.ITEM_CODE
                           , A.ITEM_NAME
                           , A.ORDER_DATE
                           , A.ORDER_Q
                           , A.ORDER_REM_Q
                           , A.INIT_DVRY_DATE
                           , A.DVRY_DATE
                           , A.DVRY_WEEK_NUM
                           , A.REASON1
                           , A.REASON2
                           , A.CHILD_ITEM_CODE
                           , A.COMPLETE_Q
                           , A.REASON3
                           , A.REASON4
                           , A.REASON
                           , A.UNIT_Q
                           , A.PROD_UNIT_Q
                           , A.SET_QTY
                           , A.CHILD_ITEM_NAME
                           , A.OUT_DIV_CODE
                           , A.WK_PLAN_NUM
                           , A.WEEK_NUM
                           , A.ORDER_P
                           , A.WK_PLAN_Q
                           , A.QTYCOUNT_A
                           , A.QTYCOUNT_B
                           , A.QTYCOUNT_C
                           , A.PLANQTY_B
                           , A.PLANQTY_C
                           , A.MICROBE_DATE_MIN
                           , A.MICROBE_DATE_MAX
                           , A.EXPECTED_END_DATE_MIN
                           , A.EXPECTED_END_DATE_MAX
                           , A.CLOSE_YN
                           , A.CLOSE_REASON
                           , STUFF((SELECT ',' + LOT_NO AS [text()]
                                      FROM #TEST_PJW B
                                     WHERE B.ORDER_NUM = A.ORDER_NUM
                                       AND B.SER_NO    = A.SER_NO
                                     GROUP BY LOT_NO
                                     FOR XML PATH('')),1,1,'') AS LOT_NO
                            , A.PO_NUM
                      FROM #TEST_PJW A
                      GROUP BY A.COMP_CODE
                             , A.DIV_CODE
                             , A.CUSTOM_CODE
                             , A.CUSTOM_NAME
                             , A.ORDER_NUM
                             , A.SER_NO
                             , A.ITEM_CODE
                             , A.ITEM_NAME
                             , A.ORDER_DATE
                             , A.ORDER_Q
                             , A.ORDER_REM_Q
                             , A.INIT_DVRY_DATE
                             , A.DVRY_DATE
                             , A.DVRY_WEEK_NUM
                             , A.REASON1
                             , A.REASON2
                             , A.CHILD_ITEM_CODE
                             , A.COMPLETE_Q
                             , A.REASON3
                             , A.REASON4
                             , A.REASON
                             , A.UNIT_Q
                             , A.PROD_UNIT_Q
                             , A.SET_QTY
                             , A.CHILD_ITEM_NAME
                             , A.OUT_DIV_CODE
                             , A.WK_PLAN_NUM
                             , A.WEEK_NUM
                             , A.ORDER_P
                             , A.WK_PLAN_Q
                             , A.QTYCOUNT_A
                             , A.QTYCOUNT_B
                             , A.QTYCOUNT_C
                             , A.PLANQTY_B
                             , A.PLANQTY_C
                             , A.MICROBE_DATE_MIN
                             , A.MICROBE_DATE_MAX
                             , A.EXPECTED_END_DATE_MIN
                             , A.EXPECTED_END_DATE_MAX
                             , A.CLOSE_YN
                             , A.CLOSE_REASON
                             , A.PO_NUM
              ) A
              GROUP BY A.COMP_CODE
                     , A.DIV_CODE
                     , A.CUSTOM_CODE
                     , A.CUSTOM_NAME
                     , A.ORDER_NUM
                     , A.SER_NO
                     , A.ITEM_CODE
                     , A.ITEM_NAME
                     , A.ORDER_DATE
                     , A.ORDER_Q
                     , A.ORDER_REM_Q
                     , A.INIT_DVRY_DATE
                     , A.DVRY_DATE
                     , A.DVRY_WEEK_NUM
                     , A.REASON1
                     , A.REASON2
                     , A.CHILD_ITEM_CODE
                     , A.COMPLETE_Q
                     , A.REASON3
                     , A.REASON4
                     , A.REASON
                     , A.UNIT_Q
                     , A.PROD_UNIT_Q
                     , A.SET_QTY
                     , A.CHILD_ITEM_NAME
                     , A.OUT_DIV_CODE
                     , A.ORDER_P
                     , A.QTYCOUNT_A
                     , A.QTYCOUNT_B
                     , A.QTYCOUNT_C
                     , A.PLANQTY_B
                     , A.PLANQTY_C
                     , A.MICROBE_DATE_MIN
                     , A.MICROBE_DATE_MAX
                     , A.EXPECTED_END_DATE_MIN
                     , A.EXPECTED_END_DATE_MAX
                     , A.CLOSE_YN
                     , A.CLOSE_REASON
                     , A.LOT_NO
                     , A.PO_NUM
            ORDER BY A.OUT_DIV_CODE, A.ORDER_NUM, A.SER_NO
            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END
    </select>

    <!-- 미생물내역 조회 -->
    <select id="s_sof150ukrv_kodiServiceImpl.selectList1" parameterType="Map" resultType="rMap">
        BEGIN
            SET NOCOUNT ON
            SET ARITHABORT ON

            DECLARE @CompCode       NVARCHAR(08)    /* 법인코드      */
                  , @UserId         NVARCHAR(100)   /* 사용자ID */
                  , @LangType       NVARCHAR(2)     /* 언어구분     */
                  , @RefItem        NVARCHAR(01)
                  , @DateFormat     NVARCHAR(10)

            SET @CompCode = #{S_COMP_CODE}
            SET @UserId   = #{S_USER_ID}
            SET @LangType = #{S_LANG_CODE}

            SELECT E.LOT_NO, MIN(F.MICROBE_DATE) AS MICROBE_DATE, MIN(F.EXPECTED_END_DATE) AS EXPECTED_END_DATE
              FROM         SOF100T A WITH(NOLOCK)
                INNER JOIN SOF110T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                                 AND B.DIV_CODE  = A.DIV_CODE
                                                 AND B.ORDER_NUM = A.ORDER_NUM
                LEFT  JOIN PPL100T C WITH(NOLOCK) ON C.COMP_CODE = B.COMP_CODE
                                                 AND C.DIV_CODE  = B.OUT_DIV_CODE
                                                 AND C.ORDER_NUM = B.ORDER_NUM
                                                 AND C.SEQ       = B.SER_NO
                                                 AND C.ITEM_CODE = B.ITEM_CODE
                LEFT  JOIN PMR100T D WITH(NOLOCK) ON D.COMP_CODE = C.COMP_CODE
                                                 AND D.DIV_CODE  = C.DIV_CODE
                                                 AND D.WK_PLAN_NUM = C.WK_PLAN_NUM
                                                 AND D.LINE_END_YN = 'Y'
                LEFT  JOIN PMR200T E WITH(NOLOCK) ON E.COMP_CODE  = D.COMP_CODE
                                                 AND E.DIV_CODE   = D.DIV_CODE
                                                 AND E.PRODT_NUM  = D.PRODT_NUM
                                                 AND E.WKORD_NUM  = D.WKORD_NUM
               INNER JOIN BSA230T Z WITH (NOLOCK) ON Z.COMP_CODE   = E.COMP_CODE
                                                 AND Z.TYPE_LEVEL  = E.DIV_CODE
                                                 AND Z.TREE_CODE   = E.WORK_SHOP_CODE
                LEFT  JOIN QMS400T F WITH(NOLOCK) ON F.COMP_CODE  = E.COMP_CODE
                                                 AND F.DIV_CODE   = E.DIV_CODE
                                                 AND F.RECEIPT_NUM = E.RECEIPT_NUM
                                                 AND F.RECEIPT_SEQ = E.RECEIPT_SEQ
            WHERE B.COMP_CODE = @CompCode
              <if test="@foren.Ognl@isNotEmpty(DIV_CODE)">
                               AND B.DIV_CODE IN
                               <foreach collection="DIV_CODE" item="item1" separator="," close=")" open="(">
                                   #{item1}
                               </foreach>
             </if>

              AND B.OUT_DIV_CODE = #{OUT_DIV_CODE}
              AND B.ORDER_NUM = #{ORDER_NUM}
              AND B.SER_NO = #{SER_NO}


            <if test="OUT_DIV_CODE == &quot;01&quot;">
               AND Z.INSPEC_TYPE    = '1'
            </if>
            <if test="OUT_DIV_CODE == &quot;02&quot;">
               AND Z.INSPEC_TYPE    = '2'
            </if>

              AND ISNULL(E.PRODT_NUM, '') <![CDATA[<>]]> ''
              AND ISNULL(F.INSPEC_NUM, '') <![CDATA[<>]]> ''

            GROUP BY E.LOT_NO
            HAVING MIN(F.MICROBE_DATE)  <![CDATA[<>]]> ''

            SET NOCOUNT OFF
            SET ARITHABORT OFF
        END

    </select>

    <!-- 자재소요량 및 현재고 (품목 / 내용물) -->
    <select id="s_sof150ukrv_kodiServiceImpl.stockList" parameterType="Map" resultType="rMap">
        /* s_sof150ukrv_kodiServiceImpl.stockList */
        SELECT A.SEQ
             , C.ITEM_ACCOUNT
             , A.CHILD_ITEM_CODE                                                    AS ITEM_CODE
             , B.ITEM_NAME
             , B.STOCK_UNIT
             , A.UNIT_Q / A.PROD_UNIT_Q                                             AS USAGE
             , ISNULL(A.SET_QTY, 100)                                               AS USAGE_RATE       -- 실사용률
             , CASE WHEN STOCK_UNIT = 'EA' THEN unilite.fnFormat(#{S_COMP_CODE}, CEILING(${ORDER_REM_Q} * (A.UNIT_Q / A.PROD_UNIT_Q)), 'S_FSET_QS')
                    ELSE unilite.fnFormat(#{S_COMP_CODE}, ${ORDER_REM_Q} * (A.UNIT_Q / A.PROD_UNIT_Q), 'S_FSET_QS')
               END                                                                  AS NEED_Q           -- 잔여량 * (A.UNIT_Q / A.PROD_UNIT_Q)
             , CASE WHEN STOCK_UNIT = 'EA' THEN unilite.fnFormat(#{S_COMP_CODE}, CEILING((${ORDER_REM_Q} * (A.UNIT_Q / A.PROD_UNIT_Q)) * (A.SET_QTY / 100)), 'S_FSET_QS')
                    ELSE unilite.fnFormat(#{S_COMP_CODE}, (${ORDER_REM_Q} * (A.UNIT_Q / A.PROD_UNIT_Q)) * (A.SET_QTY / 100), 'S_FSET_QS')
               END                                                                  AS REAL_NEED_Q
             , D.GOOD_STOCK_Q
             , ISNULL(C.CUSTOM_CODE, '') AS MATR_CUSTOM_CODE
             , ISNULL(E.CUSTOM_NAME, '') AS MATR_CUSTOM_NAME
             , A.COMP_CODE
          FROM       BPR500T A WITH(NOLOCK)
          INNER JOIN BPR100T B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                           AND B.ITEM_CODE = A.CHILD_ITEM_CODE
          INNER JOIN BPR200T C WITH(NOLOCK) ON C.COMP_CODE = A.COMP_CODE
                                           AND C.DIV_CODE  = A.DIV_CODE
                                           AND C.ITEM_CODE = A.CHILD_ITEM_CODE
          LEFT  JOIN (SELECT COMP_CODE
                           , DIV_CODE
                           , ITEM_CODE
                           , SUM(ISNULL(GOOD_STOCK_Q, 0))   AS GOOD_STOCK_Q
                        FROM BIV100T WITH(NOLOCK)
                       GROUP BY COMP_CODE, DIV_CODE, ITEM_CODE) D ON D.COMP_CODE = A.COMP_CODE
                                                                 AND D.DIV_CODE  = A.DIV_CODE
                                                                 AND D.ITEM_CODE = A.CHILD_ITEM_CODE
          LEFT  JOIN BCM100T E ON E.COMP_CODE   = C.COMP_CODE
                              AND E.CUSTOM_CODE = C.CUSTOM_CODE
         WHERE A.COMP_CODE        = #{S_COMP_CODE}
           AND A.DIV_CODE         = #{OUT_DIV_CODE}
           AND A.PROD_ITEM_CODE   = #{ITEM_CODE}
           AND A.CHILD_ITEM_CODE != '$'
           AND CONVERT(NVARCHAR(08), GETDATE(), 112) BETWEEN A.START_DATE AND ISNULL(A.STOP_DATE, '29991231')
           AND A.USE_YN = '1'
         ORDER BY A.SEQ
    </select>






    <update id="s_sof150ukrv_kodiServiceImpl.updateList" parameterType="Map">
        UPDATE SOF110T
           SET REASON1          = #{REASON1}
             , REASON2          = #{REASON2}
             , REASON3          = #{REASON3}
             , REASON4          = #{REASON4}
             , MICROBE_DATE     = #{MICROBE_DATE}
             , EXPECTED_END_DATE= #{EXPECTED_END_DATE}
             --20190627 마감여부 추가
             , CLOSE_YN         = #{CLOSE_YN}
             , CLOSE_REASON     = #{CLOSE_REASON}
             , UPDATE_DB_USER   = #{S_USER_ID}
             , UPDATE_DB_TIME   = GETDATE()
        WHERE COMP_CODE = #{S_COMP_CODE}
          AND DIV_CODE  = #{DIV_CODE}
          AND ORDER_NUM = #{ORDER_NUM}
          AND SER_NO    = #{SER_NO}
    </update>

    <insert id="s_sof150ukrv_kodiServiceImpl.insertList" parameterType="Map">
    </insert>

    <update id="s_sof150ukrv_kodiServiceImpl.deleteList" parameterType="Map">
    </update>





<!-- 20190722 뱃지기능 추가 -->
    <update id="s_sof150ukrv_kodiServiceImpl.updateAlert" parameterType="Map">
        -- 알람정보 생성
        BEGIN
            IF EXISTS(SELECT TOP 1 1
                        FROM BSB020T WITH (NOLOCK)
                       WHERE COMP_CODE   = #{S_COMP_CODE}
                         AND DIV_CODE    = #{OUT_DIV_CODE}
                         AND PROGRAM_ID IN ('s_sof150ukrv_kodi'))
            BEGIN

            IF EXISTS(SELECT TOP 1 1
                        FROM BSB100T WITH (NOLOCK)
                       WHERE COMP_CODE   = #{S_COMP_CODE}
                         AND DIV_CODE    = #{OUT_DIV_CODE}
                         AND REF_VAL_1   = #{ORDER_DATE}
                         AND REF_VAL_2   = #{ORDER_NUM}
                         AND REF_VAL_5   = #{SER_NO}
                         AND PROGRAM_ID IN ('s_sof150ukrv_kodi'))
               BEGIN
                    UPDATE A
                       SET A.ALERT_CNT = 1
                         , A.ALERT_MESSAGE = '품목 : ' + CONVERT(NVARCHAR(20), #{ITEM_CODE}) + ' / ' + '품목명 : ' + CONVERT(NVARCHAR(200), #{ITEM_NAME})
                                <if test="REASON2_OLD != REASON2">
                                       + '<![CDATA[<hr size="1" style="border-style:dotted">]]>' + '변경 전 :부자재  - ' + #{REASON2_OLD}
                                       + '<![CDATA[<br>]]>' + '변경 후 :부자재  - ' + #{REASON2}
                                       + '<![CDATA[<br>]]>' + '수정자 : ' + B.USER_NAME
                                </if>
                         , A.ALERT_MESSAGE_EN = uniLITE.fnGetTxtLang('ENGLISH'   ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('ENGLISH'   ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , A.ALERT_MESSAGE_CN = uniLITE.fnGetTxtLang('CHINESE'   ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('CHINESE'   ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , A.ALERT_MESSAGE_JP = uniLITE.fnGetTxtLang('JAPANESE'  ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('JAPANESE'  ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , A.ALERT_MESSAGE_VI = uniLITE.fnGetTxtLang('VIETNAMESE','A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('VIETNAMESE','A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , A.UPDATE_DB_USER = #{S_USER_ID}
                         , A.UPDATE_DB_TIME = GETDATE()
                      FROM BSB100T AS A 
                           INNER JOIN BSA300T AS B WITH(NOLOCK) ON B.COMP_CODE = A.COMP_CODE
                                                               AND B.USER_ID   = #{S_USER_ID}
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.DIV_CODE    = #{OUT_DIV_CODE}
                       AND A.REF_VAL_1   = #{ORDER_DATE}
                       AND A.REF_VAL_2   = #{ORDER_NUM}
                       AND A.REF_VAL_5   = #{SER_NO}
                       AND A.PROGRAM_ID IN ('s_sof150ukrv_kodi')
                END
            ELSE
                BEGIN
                    INSERT INTO BSB100T
                         ( COMP_CODE         , DIV_CODE          , ALERT_USER_ID     , ALERT_TYPE        , ALERT_PROGRAM_ID
                         , ALERT_CNT
                         , PROGRAM_ID
                         , REF_NUM
                         , JSON_PARAMETER
                         , REF_VAL_1         , REF_VAL_2         , REF_VAL_3         , REF_VAL_4
                         , REF_VAL_5         , REF_VAL_6         , REF_VAL_7         , REF_VAL_8
                         , ALERT_MESSAGE     , ALERT_MESSAGE_EN  , ALERT_MESSAGE_CN  , ALERT_MESSAGE_JP  , ALERT_MESSAGE_VI
                         , REMARK
                         , INSERT_DB_USER    , INSERT_DB_TIME    , UPDATE_DB_USER    , UPDATE_DB_TIME )
                    SELECT DISTINCT
                           #{S_COMP_CODE}    , #{OUT_DIV_CODE}   , A.ALERT_USER_ID   , '1'               , B.ALERT_PROGRAM_ID
                         , 1
                         , 's_sof150ukrv_kodi'
                         ,  #{S_COMP_CODE} + #{ORDER_DATE} + REPLICATE('0', 20 - LEN(CONVERT(VARCHAR(20), #{ORDER_NUM}))) + CONVERT(VARCHAR(20), #{ORDER_NUM}) + #{SER_NO}
                         , '{"DIV_CODE":"' + #{DIV_CODE} + '","OUT_DIV_CODE":"' + #{OUT_DIV_CODE} + '","ORDER_DATE":"' + #{ORDER_DATE} + '","ORDER_NUM":"' + CONVERT(VARCHAR(20), #{ORDER_NUM}) + '","SER_NO":"' + #{SER_NO} + '"}'
                         , #{ORDER_DATE}     , #{ORDER_NUM}      , NULL              , NULL
                         , #{SER_NO}         , NULL              , NULL              , NULL
                         , '품목 : ' + CONVERT(NVARCHAR(20), #{ITEM_CODE}) + ' / ' + '품목명 : ' + CONVERT(NVARCHAR(200), #{ITEM_NAME})
                           + '<![CDATA[<br>]]>' + '미대응 사유  - 부자재 : ' + #{REASON2}
                           + '<![CDATA[<br>]]>' + '수정자 : ' + C.USER_NAME
                         , uniLITE.fnGetTxtLang('ENGLISH'   ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('ENGLISH'   ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , uniLITE.fnGetTxtLang('CHINESE'   ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('CHINESE'   ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , uniLITE.fnGetTxtLang('JAPANESE'  ,'A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('JAPANESE'  ,'A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , uniLITE.fnGetTxtLang('VIETNAMESE','A0038') + ' : ' + CONVERT(NVARCHAR(10),CONVERT(DATETIME,#{ORDER_DATE}),102) + ' / ' + uniLITE.fnGetTxtLang('VIETNAMESE','A0039') + ' : ' + CONVERT(NVARCHAR(7),#{ORDER_NUM})
                         , ''
                         , #{S_USER_ID}       , GETDATE()        , #{S_USER_ID}      , GETDATE()
                      FROM            BSB010T A WITH (NOLOCK)
                           INNER JOIN BSB020T B WITH (NOLOCK) ON B.COMP_CODE  = A.COMP_CODE
                                                             AND B.DIV_CODE   = A.DIV_CODE
                                                             AND B.PROGRAM_ID = A.PROGRAM_ID
                           INNER JOIN BSA300T C WITH (NOLOCK) ON C.COMP_CODE  = A.COMP_CODE
                                                             AND C.USER_ID    = #{S_USER_ID}
                     WHERE A.COMP_CODE   = #{S_COMP_CODE}
                       AND A.DIV_CODE    = #{OUT_DIV_CODE}
                       AND A.PROGRAM_ID IN ('s_sof150ukrv_kodi');
                END
            END
        END
    </update>
    <update id="s_sof150ukrv_kodiServiceImpl.deleteAlert" parameterType="Map">
        -- 알람정보 업데이트
        BEGIN
            UPDATE BSB100T
               SET ALERT_CNT = 0
             WHERE COMP_CODE   = #{S_COMP_CODE}
               AND DIV_CODE    = #{OUT_DIV_CODE}
               AND REF_VAL_1   = #{ORDER_DATE_FR}
               AND REF_VAL_2   = #{FR_ORDER_NUM}
               AND REF_VAL_5   = #{SER_NO}
               AND PROGRAM_ID IN ('s_sof150ukrv_kodi')
        END
    </update>

<!-- 20191107 품목정보 팝업 관련로직 추가 -->
    <select id="s_sof150ukrv_kodiServiceImpl.getItemInfo" parameterType="Map" resultType="rMap">
        SELECT *
             , CONVERT(NVARCHAR, UPDATE_DB_TIME) AS CHANGE_YN
          FROM BPR101T WITH (NOLOCK)
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND ITEM_CODE = #{ITEM_CODE}
         ORDER BY FILE_TYPE, MANAGE_NO
    </select>

    <insert id="s_sof150ukrv_kodiServiceImpl.itemInfoInsert" parameterType="Map">
        INSERT INTO BPR101T(
               COMP_CODE
             , ITEM_CODE
             , FILE_TYPE
             , MANAGE_NO
             , REMARK
             , INSERT_DB_USER
             , INSERT_DB_TIME
             , UPDATE_DB_USER
             , UPDATE_DB_TIME
        ) VALUES (
               #{S_COMP_CODE}
             , #{ITEM_CODE}
             , #{FILE_TYPE}
             , #{MANAGE_NO}
             , #{REMARK}
             , #{S_USER_ID}
             , GETDATE()
             , #{S_USER_ID}
             , GETDATE()
         )
    </insert>

    <update id="s_sof150ukrv_kodiServiceImpl.itemInfoUpdate" parameterType="Map">
        UPDATE BPR101T
           SET REMARK    = #{REMARK}
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND ITEM_CODE = #{ITEM_CODE}
           AND MANAGE_NO = #{MANAGE_NO}
           AND FILE_TYPE = #{FILE_TYPE}
    </update>

    <delete id="s_sof150ukrv_kodiServiceImpl.itemInfoDelete" parameterType="Map">
        DELETE FROM BPR101T
         WHERE COMP_CODE = #{S_COMP_CODE}
           AND ITEM_CODE = #{ITEM_CODE}
           AND MANAGE_NO = #{MANAGE_NO}
           AND FILE_TYPE = #{FILE_TYPE}
    </delete>

    <!-- 사진업로드 후, 등록자정보 update -->
    <update id="s_sof150ukrv_kodiServiceImpl.photoModified" parameterType="Map">
        /* s_sof150ukrv_kodiServiceImpl.photoModified */
        UPDATE BPR101T
           SET CERT_FILE      = #{CERT_FILE}   --실제파일명 (ORIGINAL_FILE_NAME)
             , FILE_ID        = #{FILE_ID}     --서버에 저장한 파일명 (FID)
             , MIME_TYPE      = #{MIME_TYPE}   --파일형식
             , FILE_EXT       = #{FILE_EXT}    --파일확장자
             , FILE_SIZE      = #{FILE_SIZE}   --파일크기
             , FILE_PATH      = #{FILE_PATH}   --파일경로 (PATH)
             , UPDATE_DB_USER = #{S_USER_ID}
             , UPDATE_DB_TIME = GETDATE()
        WHERE COMP_CODE = #{S_COMP_CODE}
          AND ITEM_CODE = #{ITEM_CODE}
          AND MANAGE_NO = #{MANAGE_NO}
          AND FILE_TYPE = #{FILE_TYPE}
    </update>

    <!-- 품목 관련 파일 다운로드(관련 파일 정보) -->
    <select id="s_sof150ukrv_kodiServiceImpl.selectFileInfo" parameterType="Map" resultType="gMap">
        /* s_sof150ukrv_kodiServiceImpl.selectFileInfo */
        SELECT FILE_ID    AS FID
             , CERT_FILE  AS ORIGINAL_FILE_NAME
             , FILE_PATH  AS PATH
             , MIME_TYPE  AS MIME_TYPE            -- 'image/jpeg'
             , FILE_SIZE  AS SIZE
          FROM BPR101T WITH (NOLOCK)
         WHERE FILE_ID = #{fid}
    </select>

    <select id="s_sof150ukrv_kodiServiceImpl.getFileList" parameterType="Map" resultType="rMap">
        /* s_sof150ukrv_kodiServiceImpl.getFileList  */
        SELECT A.FID                AS id
             , A.FID                AS fid
             , A.ORIGINAL_FILE_NAME AS name
             , B.SIZE               AS size
             , '6'                  AS status
          FROM      SOF102T A  WITH (NOLOCK)
         INNER JOIN BFL200T B WITH (NOLOCK) ON A.COMP_CODE = B.COMP_CODE AND A.FID = B.FID
         WHERE A.COMP_CODE= #{S_COMP_CODE}
           AND A.DOC_NO = #{DOC_NO}
    </select>
</mapper>